begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_comment
comment|/**  * {@code PrivilegeBits} TODO  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrivilegeBits
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NO_PRIVILEGE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|READ_NODES
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|READ_PROPERTIES
init|=
name|READ_NODES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ADD_PROPERTIES
init|=
name|READ_PROPERTIES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ALTER_PROPERTIES
init|=
name|ADD_PROPERTIES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|REMOVE_PROPERTIES
init|=
name|ALTER_PROPERTIES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ADD_CHILD_NODES
init|=
name|REMOVE_PROPERTIES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|REMOVE_CHILD_NODES
init|=
name|ADD_CHILD_NODES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|REMOVE_NODE
init|=
name|REMOVE_CHILD_NODES
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|READ_AC
init|=
name|REMOVE_NODE
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MODIFY_AC
init|=
name|READ_AC
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NODE_TYPE_MNGMT
init|=
name|MODIFY_AC
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|VERSION_MNGMT
init|=
name|NODE_TYPE_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|LOCK_MNGMT
init|=
name|VERSION_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|LIFECYCLE_MNGMT
init|=
name|LOCK_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|RETENTION_MNGMT
init|=
name|LIFECYCLE_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|WORKSPACE_MNGMT
init|=
name|RETENTION_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NODE_TYPE_DEF_MNGMT
init|=
name|WORKSPACE_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NAMESPACE_MNGMT
init|=
name|NODE_TYPE_DEF_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|PRIVILEGE_MNGMT
init|=
name|NAMESPACE_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|USER_MNGMT
init|=
name|PRIVILEGE_MNGMT
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|READ
init|=
name|READ_NODES
operator||
name|READ_PROPERTIES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MODIFY_PROPERTIES
init|=
name|ADD_PROPERTIES
operator||
name|ALTER_PROPERTIES
operator||
name|REMOVE_PROPERTIES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|WRITE
init|=
name|MODIFY_PROPERTIES
operator||
name|ADD_CHILD_NODES
operator||
name|REMOVE_CHILD_NODES
operator||
name|REMOVE_NODE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|WRITE2
init|=
name|WRITE
operator||
name|NODE_TYPE_MNGMT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrivilegeBits
name|EMPTY
init|=
operator|new
name|PrivilegeBits
argument_list|(
name|UnmodifiableData
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeBits
argument_list|>
name|BUILT_IN
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PrivilegeBits
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_READ_NODES
argument_list|,
name|getInstance
argument_list|(
name|READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_READ_PROPERTIES
argument_list|,
name|getInstance
argument_list|(
name|READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_ADD_PROPERTIES
argument_list|,
name|getInstance
argument_list|(
name|ADD_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_ALTER_PROPERTIES
argument_list|,
name|getInstance
argument_list|(
name|ALTER_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_REMOVE_PROPERTIES
argument_list|,
name|getInstance
argument_list|(
name|REMOVE_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|getInstance
argument_list|(
name|ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|getInstance
argument_list|(
name|REMOVE_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_REMOVE_NODE
argument_list|,
name|getInstance
argument_list|(
name|REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|getInstance
argument_list|(
name|READ_AC
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|,
name|getInstance
argument_list|(
name|MODIFY_AC
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|NODE_TYPE_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_VERSION_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|VERSION_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_LOCK_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|LOCK_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|LIFECYCLE_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_RETENTION_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|RETENTION_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_WORKSPACE_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|WORKSPACE_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|NODE_TYPE_DEF_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|NAMESPACE_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_PRIVILEGE_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|PRIVILEGE_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_USER_MANAGEMENT
argument_list|,
name|getInstance
argument_list|(
name|USER_MNGMT
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_READ
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_MODIFY_PROPERTIES
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|MODIFY_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|JCR_WRITE
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|BUILT_IN
operator|.
name|put
argument_list|(
name|REP_WRITE
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|WRITE2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Data
name|d
decl_stmt|;
comment|/**      * Private constructor.      *      * @param d The data that backs this instance.      */
specifier|private
name|PrivilegeBits
parameter_list|(
name|Data
name|d
parameter_list|)
block|{
name|this
operator|.
name|d
operator|=
name|d
expr_stmt|;
block|}
comment|/**      * Creates a mutable instance of privilege bits.      *      * @return a new instance of privilege bits.      */
specifier|public
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|()
block|{
return|return
operator|new
name|PrivilegeBits
argument_list|(
operator|new
name|ModifiableData
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a mutable instance of privilege bits.      *      * @param base The base for this mutable instance.      * @return a new instance of privilege bits.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|base
parameter_list|)
block|{
return|return
operator|new
name|PrivilegeBits
argument_list|(
operator|new
name|ModifiableData
argument_list|(
name|base
operator|.
name|d
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get or create an instance of privilege bits for a specific property that      * stores privileges.      *      * @param property The property state storing privilege bits information.      * @return an instance of {@code PrivilegeBits}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|int
name|size
init|=
name|property
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|getInstance
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|longs
index|[
name|i
index|]
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|getInstance
argument_list|(
name|longs
argument_list|)
return|;
block|}
block|}
comment|/**      * Get or create an instance of privilege bits for a privilege definition.      *      * @param tree A privilege definition tree or the privileges root.      * @return an instance of {@code PrivilegeBits}      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|String
name|privName
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|BUILT_IN
operator|.
name|containsKey
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|BUILT_IN
operator|.
name|get
argument_list|(
name|privName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|REP_PRIVILEGES
operator|.
name|equals
argument_list|(
name|privName
argument_list|)
condition|)
block|{
return|return
name|getInstance
argument_list|(
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_NEXT
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getInstance
argument_list|(
name|tree
operator|.
name|getProperty
argument_list|(
name|REP_BITS
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Internal method to get or create an instance of privilege bits for the      * specified long value.      *      * @param bits A long value.      * @return an instance of {@code PrivilegeBits}      */
annotation|@
name|Nonnull
specifier|private
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|(
name|long
name|bits
parameter_list|)
block|{
if|if
condition|(
name|bits
operator|==
name|NO_PRIVILEGE
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
else|else
block|{
name|checkArgument
argument_list|(
name|bits
operator|>
name|NO_PRIVILEGE
argument_list|)
expr_stmt|;
return|return
operator|new
name|PrivilegeBits
argument_list|(
operator|new
name|UnmodifiableData
argument_list|(
name|bits
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Internal method to create a new instance of {@code PrivilegeBits}.      *      * @param bits A long array.      * @return an instance of {@code PrivilegeBits}      */
annotation|@
name|Nonnull
specifier|private
specifier|static
name|PrivilegeBits
name|getInstance
parameter_list|(
name|long
index|[]
name|bits
parameter_list|)
block|{
return|return
operator|new
name|PrivilegeBits
argument_list|(
operator|new
name|UnmodifiableData
argument_list|(
name|bits
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * TODO      *      * @param bits      * @param parentBits      * @param isAllow      * @return      */
specifier|public
specifier|static
name|long
name|calculatePermissions
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|bits
parameter_list|,
annotation|@
name|Nonnull
name|PrivilegeBits
name|parentBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
name|long
name|privs
init|=
name|bits
operator|.
name|d
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|parentPrivs
init|=
name|parentBits
operator|.
name|d
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|perm
init|=
name|Permissions
operator|.
name|NO_PERMISSION
decl_stmt|;
if|if
condition|(
operator|(
name|privs
operator|&
name|READ
operator|)
operator|==
name|READ
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|READ
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|privs
operator|&
name|READ_NODES
operator|)
operator|==
name|READ_NODES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|READ_NODE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|privs
operator|&
name|READ_PROPERTIES
operator|)
operator|==
name|READ_PROPERTIES
operator|)
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|READ_PROPERTY
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|MODIFY_PROPERTIES
operator|)
operator|==
name|MODIFY_PROPERTIES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|SET_PROPERTY
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|privs
operator|&
name|ADD_PROPERTIES
operator|)
operator|==
name|ADD_PROPERTIES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|ADD_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|privs
operator|&
name|ALTER_PROPERTIES
operator|)
operator|==
name|ALTER_PROPERTIES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|MODIFY_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|privs
operator|&
name|REMOVE_PROPERTIES
operator|)
operator|==
name|REMOVE_PROPERTIES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|REMOVE_PROPERTY
expr_stmt|;
block|}
block|}
comment|// add_node permission is granted through privilege on the parent.
if|if
condition|(
operator|(
name|parentPrivs
operator|&
name|ADD_CHILD_NODES
operator|)
operator|==
name|ADD_CHILD_NODES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|ADD_NODE
expr_stmt|;
block|}
comment|/*          remove_node is          allowed: only if remove_child_nodes privilege is present on                   the parent AND remove_node is present on the node itself          denied : if either remove_child_nodes is denied on the parent                   OR remove_node is denied on the node itself.         */
if|if
condition|(
name|isAllow
condition|)
block|{
if|if
condition|(
operator|(
name|parentPrivs
operator|&
name|REMOVE_CHILD_NODES
operator|)
operator|==
name|REMOVE_CHILD_NODES
operator|&&
operator|(
name|privs
operator|&
name|REMOVE_NODE
operator|)
operator|==
name|REMOVE_NODE
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|REMOVE_NODE
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|parentPrivs
operator|&
name|REMOVE_CHILD_NODES
operator|)
operator|==
name|REMOVE_CHILD_NODES
operator|||
operator|(
name|privs
operator|&
name|REMOVE_NODE
operator|)
operator|==
name|REMOVE_NODE
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|REMOVE_NODE
expr_stmt|;
block|}
block|}
comment|// modify_child_node_collection permission is granted through
comment|// privileges on the parent
if|if
condition|(
operator|(
name|parentPrivs
operator|&
name|ADD_CHILD_NODES
operator|)
operator|==
name|ADD_CHILD_NODES
operator|&&
operator|(
name|parentPrivs
operator|&
name|REMOVE_CHILD_NODES
operator|)
operator|==
name|REMOVE_CHILD_NODES
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
expr_stmt|;
block|}
comment|// the remaining (special) permissions are simply defined on the node
if|if
condition|(
operator|(
name|privs
operator|&
name|READ_AC
operator|)
operator|==
name|READ_AC
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|MODIFY_AC
operator|)
operator|==
name|MODIFY_AC
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|LIFECYCLE_MNGMT
operator|)
operator|==
name|LIFECYCLE_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|LIFECYCLE_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|LOCK_MNGMT
operator|)
operator|==
name|LOCK_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|LOCK_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|NODE_TYPE_MNGMT
operator|)
operator|==
name|NODE_TYPE_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|RETENTION_MNGMT
operator|)
operator|==
name|RETENTION_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|RETENTION_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|VERSION_MNGMT
operator|)
operator|==
name|VERSION_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|VERSION_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|WORKSPACE_MNGMT
operator|)
operator|==
name|WORKSPACE_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|NODE_TYPE_DEF_MNGMT
operator|)
operator|==
name|NODE_TYPE_DEF_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|NAMESPACE_MNGMT
operator|)
operator|==
name|NAMESPACE_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|PRIVILEGE_MNGMT
operator|)
operator|==
name|PRIVILEGE_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|privs
operator|&
name|USER_MNGMT
operator|)
operator|==
name|USER_MNGMT
condition|)
block|{
name|perm
operator||=
name|Permissions
operator|.
name|USER_MANAGEMENT
expr_stmt|;
block|}
return|return
name|perm
return|;
block|}
comment|/**      * Returns {@code true} if this privilege bits includes no privileges      * at all.      *      * @return {@code true} if this privilege bits includes no privileges      *         at all; {@code false} otherwise.      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions#NO_PERMISSION      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|d
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns an unmodifiable instance.      *      * @return an unmodifiable {@code PrivilegeBits} instance.      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|unmodifiable
parameter_list|()
block|{
if|if
condition|(
name|d
operator|instanceof
name|ModifiableData
condition|)
block|{
if|if
condition|(
name|d
operator|.
name|isSimple
argument_list|()
condition|)
block|{
return|return
name|getInstance
argument_list|(
name|d
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|long
index|[]
name|bits
init|=
name|d
operator|.
name|longValues
argument_list|()
decl_stmt|;
name|long
index|[]
name|copy
init|=
operator|new
name|long
index|[
name|bits
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bits
argument_list|,
literal|0
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|bits
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|getInstance
argument_list|(
name|copy
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
comment|/**      * Returns {@code true} if all privileges defined by the specified      * {@code otherBits} are present in this instance.      *      * @param otherBits      * @return {@code true} if all privileges defined by the specified      *         {@code otherBits} are included in this instance; {@code false}      *         otherwise.      */
specifier|public
name|boolean
name|includes
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|otherBits
parameter_list|)
block|{
return|return
name|d
operator|.
name|includes
argument_list|(
name|otherBits
operator|.
name|d
argument_list|)
return|;
block|}
comment|/**      * Returns {@code true} if this instance includes the jcr:read      * privilege. Shortcut for calling {@link PrivilegeBits#includes(PrivilegeBits)}      * where the other bits represented the jcr:read privilege.      *      * @return {@code true} if this instance includes the jcr:read      *         privilege; {@code false} otherwise.      */
specifier|public
name|boolean
name|includesRead
parameter_list|(
name|long
name|readPermission
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|EMPTY
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|d
operator|.
name|includes
argument_list|(
name|readPermission
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds the other privilege bits to this instance.      *      * @param other The other privilege bits to be added.      * @return The updated instance.      * @throws UnsupportedOperationException if this instance is immutable.      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|add
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|other
parameter_list|)
block|{
if|if
condition|(
name|d
operator|instanceof
name|ModifiableData
condition|)
block|{
operator|(
operator|(
name|ModifiableData
operator|)
name|d
operator|)
operator|.
name|add
argument_list|(
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"immutable privilege bits"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Subtracts the other PrivilegeBits from the this.<br>      * If the specified bits do not intersect with this, it isn't modified.<br>      * If {@code this} is included in {@code other} {@link #EMPTY empty}      * privilege bits is returned.      *      * @param other The other privilege bits to be subtracted from this instance.      * @return The updated instance.      * @throws UnsupportedOperationException if this instance is immutable.      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|diff
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|other
parameter_list|)
block|{
if|if
condition|(
name|d
operator|instanceof
name|ModifiableData
condition|)
block|{
operator|(
operator|(
name|ModifiableData
operator|)
name|d
operator|)
operator|.
name|diff
argument_list|(
name|other
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"immutable privilege bits"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Subtracts the {@code b} from {@code a} and adds the result (diff)      * to this instance.      *      * @param a An instance of privilege bits.      * @param b An instance of privilege bits.      * @return The updated instance.      * @throws UnsupportedOperationException if this instance is immutable.      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|addDifference
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|a
parameter_list|,
annotation|@
name|Nonnull
name|PrivilegeBits
name|b
parameter_list|)
block|{
if|if
condition|(
name|d
operator|instanceof
name|ModifiableData
condition|)
block|{
operator|(
operator|(
name|ModifiableData
operator|)
name|d
operator|)
operator|.
name|addDifference
argument_list|(
name|a
operator|.
name|d
argument_list|,
name|b
operator|.
name|d
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"immutable privilege bits"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
name|PropertyState
name|asPropertyState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|name
argument_list|,
name|Longs
operator|.
name|asList
argument_list|(
name|d
operator|.
name|longValues
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
return|;
block|}
comment|/**      * Package private method to calculate the privilege bits associated with a      * given built-in or custom privilege definition.      *      * @return an instance of {@code PrivilegeBits}      */
annotation|@
name|Nonnull
name|PrivilegeBits
name|nextBits
parameter_list|()
block|{
if|if
condition|(
name|this
operator|==
name|EMPTY
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrivilegeBits
argument_list|(
name|d
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Write this instance as property to the specified tree.      *      * @param tree The target tree.      */
name|void
name|writeTo
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|REP_PRIVILEGES
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|?
name|REP_NEXT
else|:
name|REP_BITS
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|asPropertyState
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|d
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|PrivilegeBits
condition|)
block|{
return|return
name|d
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PrivilegeBits
operator|)
name|o
operator|)
operator|.
name|d
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"PrivilegeBits: "
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|d
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|d
operator|.
name|longValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------------------------------------< inner classes>---
comment|/**      * Base class for the internal privilege bits representation and handling.      */
specifier|private
specifier|static
specifier|abstract
class|class
name|Data
block|{
specifier|abstract
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
specifier|abstract
name|long
name|longValue
parameter_list|()
function_decl|;
specifier|abstract
name|long
index|[]
name|longValues
parameter_list|()
function_decl|;
specifier|abstract
name|boolean
name|isSimple
parameter_list|()
function_decl|;
specifier|abstract
name|Data
name|next
parameter_list|()
function_decl|;
specifier|abstract
name|boolean
name|includes
parameter_list|(
name|Data
name|other
parameter_list|)
function_decl|;
specifier|abstract
name|boolean
name|includes
parameter_list|(
name|long
name|permissions
parameter_list|)
function_decl|;
specifier|static
name|boolean
name|includes
parameter_list|(
name|long
name|bits
parameter_list|,
name|long
name|otherBits
parameter_list|)
block|{
return|return
operator|(
name|bits
operator||
operator|~
name|otherBits
operator|)
operator|==
operator|-
literal|1
return|;
block|}
specifier|static
name|boolean
name|includes
parameter_list|(
name|long
index|[]
name|bits
parameter_list|,
name|long
index|[]
name|otherBits
parameter_list|)
block|{
if|if
condition|(
name|otherBits
operator|.
name|length
operator|<=
name|bits
operator|.
name|length
condition|)
block|{
comment|// test for each long if is included
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|otherBits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|bits
index|[
name|i
index|]
operator||
operator|~
name|otherBits
index|[
name|i
index|]
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// otherbits array is longer> cannot be included in bits
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**      * Immutable Data object      */
specifier|private
specifier|static
specifier|final
class|class
name|UnmodifiableData
extends|extends
name|Data
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MAX
init|=
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UnmodifiableData
name|EMPTY
init|=
operator|new
name|UnmodifiableData
argument_list|(
name|NO_PRIVILEGE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|bits
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|bitsArr
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isSimple
decl_stmt|;
specifier|private
name|UnmodifiableData
parameter_list|(
name|long
name|bits
parameter_list|)
block|{
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
name|bitsArr
operator|=
operator|new
name|long
index|[]
block|{
name|bits
block|}
expr_stmt|;
name|isSimple
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|UnmodifiableData
parameter_list|(
name|long
index|[]
name|bitsArr
parameter_list|)
block|{
name|bits
operator|=
name|NO_PRIVILEGE
expr_stmt|;
name|this
operator|.
name|bitsArr
operator|=
name|bitsArr
expr_stmt|;
name|isSimple
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|==
name|EMPTY
return|;
block|}
annotation|@
name|Override
name|long
name|longValue
parameter_list|()
block|{
return|return
name|bits
return|;
block|}
annotation|@
name|Override
name|long
index|[]
name|longValues
parameter_list|()
block|{
return|return
name|bitsArr
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSimple
parameter_list|()
block|{
return|return
name|isSimple
return|;
block|}
annotation|@
name|Override
name|Data
name|next
parameter_list|()
block|{
if|if
condition|(
name|this
operator|==
name|EMPTY
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
elseif|else
if|if
condition|(
name|isSimple
condition|)
block|{
if|if
condition|(
name|bits
operator|<
name|MAX
condition|)
block|{
name|long
name|b
init|=
name|bits
operator|<<
literal|1
decl_stmt|;
return|return
operator|new
name|UnmodifiableData
argument_list|(
name|b
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|UnmodifiableData
argument_list|(
operator|new
name|long
index|[]
block|{
name|bits
block|}
argument_list|)
operator|.
name|next
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|long
index|[]
name|bts
decl_stmt|;
name|long
name|last
init|=
name|bitsArr
index|[
name|bitsArr
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|last
operator|<
name|MAX
condition|)
block|{
name|bts
operator|=
operator|new
name|long
index|[
name|bitsArr
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bitsArr
argument_list|,
literal|0
argument_list|,
name|bts
argument_list|,
literal|0
argument_list|,
name|bitsArr
operator|.
name|length
argument_list|)
expr_stmt|;
name|bts
index|[
name|bts
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|last
operator|<<
literal|1
expr_stmt|;
block|}
else|else
block|{
name|bts
operator|=
operator|new
name|long
index|[
name|bitsArr
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|bts
index|[
name|bts
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|UnmodifiableData
argument_list|(
name|bts
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|includes
parameter_list|(
name|Data
name|other
parameter_list|)
block|{
if|if
condition|(
name|isSimple
condition|)
block|{
return|return
operator|(
name|other
operator|.
name|isSimple
argument_list|()
operator|)
operator|&&
name|includes
argument_list|(
name|bits
argument_list|,
name|other
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|includes
argument_list|(
name|bitsArr
argument_list|,
name|other
operator|.
name|longValues
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|includes
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
operator|(
name|isSimple
operator|)
condition|?
operator|(
name|bits
operator|&
name|permissions
operator|)
operator|==
name|permissions
else|:
operator|(
name|bitsArr
index|[
literal|0
index|]
operator|&
name|permissions
operator|)
operator|==
name|permissions
return|;
block|}
comment|//---------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|isSimple
operator|)
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|bits
argument_list|)
operator|.
name|hashCode
argument_list|()
else|:
name|Arrays
operator|.
name|hashCode
argument_list|(
name|bitsArr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|UnmodifiableData
condition|)
block|{
name|UnmodifiableData
name|d
init|=
operator|(
name|UnmodifiableData
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|isSimple
operator|!=
name|d
operator|.
name|isSimple
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isSimple
condition|)
block|{
return|return
name|bits
operator|==
name|d
operator|.
name|bits
return|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|bitsArr
argument_list|,
name|d
operator|.
name|bitsArr
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**      * Mutable implementation of the Data base class.      */
specifier|private
specifier|static
specifier|final
class|class
name|ModifiableData
extends|extends
name|Data
block|{
specifier|private
name|long
index|[]
name|bits
decl_stmt|;
specifier|private
name|ModifiableData
parameter_list|()
block|{
name|bits
operator|=
operator|new
name|long
index|[]
block|{
name|NO_PRIVILEGE
block|}
expr_stmt|;
block|}
specifier|private
name|ModifiableData
parameter_list|(
name|Data
name|base
parameter_list|)
block|{
name|long
index|[]
name|b
init|=
name|base
operator|.
name|longValues
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|b
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
comment|// empty
name|bits
operator|=
operator|new
name|long
index|[]
block|{
name|NO_PRIVILEGE
block|}
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// single long
name|bits
operator|=
operator|new
name|long
index|[]
block|{
name|b
index|[
literal|0
index|]
block|}
expr_stmt|;
break|break;
default|default:
comment|// copy
name|bits
operator|=
operator|new
name|long
index|[
name|b
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|bits
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
operator|==
literal|1
operator|&&
name|bits
index|[
literal|0
index|]
operator|==
name|NO_PRIVILEGE
return|;
block|}
annotation|@
name|Override
name|long
name|longValue
parameter_list|()
block|{
return|return
operator|(
name|bits
operator|.
name|length
operator|==
literal|1
operator|)
condition|?
name|bits
index|[
literal|0
index|]
else|:
name|NO_PRIVILEGE
return|;
block|}
annotation|@
name|Override
name|long
index|[]
name|longValues
parameter_list|()
block|{
return|return
name|bits
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSimple
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
name|Data
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|boolean
name|includes
parameter_list|(
name|Data
name|other
parameter_list|)
block|{
if|if
condition|(
name|bits
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|other
operator|.
name|isSimple
argument_list|()
operator|&&
name|includes
argument_list|(
name|bits
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|includes
argument_list|(
name|bits
argument_list|,
name|other
operator|.
name|longValues
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|includes
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
operator|(
name|bits
index|[
literal|0
index|]
operator|&
name|permissions
operator|)
operator|==
name|permissions
return|;
block|}
comment|/**          * Add the other Data to this instance.          *          * @param other          */
specifier|private
name|void
name|add
parameter_list|(
name|Data
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|bits
operator|.
name|length
operator|==
literal|1
operator|&&
name|other
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|bits
index|[
literal|0
index|]
operator||=
name|other
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|or
argument_list|(
name|other
operator|.
name|longValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Subtract the other Data from this instance.          *          * @param other          */
specifier|private
name|void
name|diff
parameter_list|(
name|Data
name|other
parameter_list|)
block|{
if|if
condition|(
name|bits
operator|.
name|length
operator|==
literal|1
operator|&&
name|other
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|bits
index|[
literal|0
index|]
operator|=
name|bits
index|[
literal|0
index|]
operator|&
operator|~
name|other
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
name|diff
argument_list|(
name|bits
argument_list|,
name|other
operator|.
name|longValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Add the diff between the specified Data a and b.          *          * @param a          * @param b          */
specifier|private
name|void
name|addDifference
parameter_list|(
name|Data
name|a
parameter_list|,
name|Data
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isSimple
argument_list|()
operator|&&
name|b
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|bits
index|[
literal|0
index|]
operator||=
name|a
operator|.
name|longValue
argument_list|()
operator|&
operator|~
name|b
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
index|[]
name|diff
init|=
name|diff
argument_list|(
name|a
operator|.
name|longValues
argument_list|()
argument_list|,
name|b
operator|.
name|longValues
argument_list|()
argument_list|)
decl_stmt|;
name|or
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|or
parameter_list|(
name|long
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
operator|>
name|bits
operator|.
name|length
condition|)
block|{
comment|// enlarge the array
name|long
index|[]
name|res
init|=
operator|new
name|long
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bits
argument_list|,
literal|0
argument_list|,
name|res
argument_list|,
literal|0
argument_list|,
name|bits
operator|.
name|length
argument_list|)
expr_stmt|;
name|bits
operator|=
name|res
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bits
index|[
name|i
index|]
operator||=
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|long
index|[]
name|diff
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|long
index|[]
name|b
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|long
index|[]
name|res
init|=
operator|new
name|long
index|[
operator|(
operator|(
name|a
operator|.
name|length
operator|>
name|b
operator|.
name|length
operator|)
condition|?
name|a
operator|.
name|length
else|:
name|b
operator|.
name|length
operator|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|a
operator|.
name|length
operator|&&
name|i
operator|<
name|b
operator|.
name|length
condition|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|a
index|[
name|i
index|]
operator|&
operator|~
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|res
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|<
name|a
operator|.
name|length
operator|)
condition|?
name|a
index|[
name|i
index|]
else|:
literal|0
expr_stmt|;
block|}
comment|// remember start of trailing 0 array entries
if|if
condition|(
name|res
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|index
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|index
condition|)
block|{
case|case
operator|-
literal|1
case|:
comment|// no need to remove trailing 0-long from the array
return|return
name|res
return|;
case|case
literal|0
case|:
comment|// array consisting of one or multiple 0
return|return
operator|new
name|long
index|[]
block|{
name|NO_PRIVILEGE
block|}
return|;
default|default:
comment|// remove trailing 0-long entries from the array
name|long
index|[]
name|r2
init|=
operator|new
name|long
index|[
name|index
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|res
argument_list|,
literal|0
argument_list|,
name|r2
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|r2
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

