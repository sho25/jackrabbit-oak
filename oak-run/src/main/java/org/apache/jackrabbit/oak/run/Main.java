begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|checkpoint
operator|.
name|Checkpoints
operator|.
name|CP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyChecker
operator|.
name|checkConsistency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractScheduledService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoURI
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|ArgumentAcceptingOptionSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|BenchmarkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|checkpoint
operator|.
name|Checkpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|explorer
operator|.
name|Explorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|explorer
operator|.
name|NodeStoreTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|http
operator|.
name|OakServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|JsopDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
operator|.
name|FileStoreBackup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
operator|.
name|FileStoreRestore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|LastRevRecoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoMissingLastRevSeeker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CloseableIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MapDBMapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
operator|.
name|StandbyClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
operator|.
name|StandbyServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|ScalabilityRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|RepositoryUpgrade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|server
operator|.
name|remoting
operator|.
name|davex
operator|.
name|JcrRemotingServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|jcr
operator|.
name|JCRWebdavServerServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|server
operator|.
name|AbstractWebdavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|simple
operator|.
name|SimpleWebdavServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_class
specifier|public
class|class
name|Main
block|{
specifier|public
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|8080
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|TAR_STORAGE_MEMORY_MAPPED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"tar.memoryMapped"
argument_list|)
decl_stmt|;
specifier|private
name|Main
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|printProductInfo
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Mode
name|mode
init|=
name|Mode
operator|.
name|SERVER
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|mode
operator|=
name|Mode
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown run mode: "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mode
operator|=
name|Mode
operator|.
name|HELP
expr_stmt|;
block|}
name|String
index|[]
name|tail
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|tail
argument_list|,
literal|0
argument_list|,
name|tail
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
operator|=
name|tail
expr_stmt|;
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|BACKUP
case|:
name|backup
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESTORE
case|:
name|restore
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|BENCHMARK
case|:
name|BenchmarkRunner
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSOLE
case|:
name|Console
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEBUG
case|:
name|debug
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHECK
case|:
name|check
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMPACT
case|:
name|compact
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERVER
case|:
name|server
argument_list|(
name|URI
argument_list|,
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPGRADE
case|:
name|upgrade
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCALABILITY
case|:
name|ScalabilityRunner
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXPLORE
case|:
name|Explorer
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|STANDBY
case|:
name|standbyInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIMARY
case|:
name|primaryInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHECKPOINTS
case|:
name|checkpoints
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|RECOVERY
case|:
name|recovery
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|HELP
case|:
default|default:
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Available run modes: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|Mode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getProductInfo
parameter_list|()
block|{
name|String
name|version
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|stream
init|=
name|Main
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/META-INF/maven/org.apache.jackrabbit/oak-run/pom.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|version
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{         }
name|String
name|product
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|product
operator|=
literal|"Apache Jackrabbit Oak "
operator|+
name|version
expr_stmt|;
block|}
else|else
block|{
name|product
operator|=
literal|"Apache Jackrabbit Oak"
expr_stmt|;
block|}
return|return
name|product
return|;
block|}
specifier|private
specifier|static
name|void
name|printProductInfo
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|contains
argument_list|(
literal|"--quiet"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getProductInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|backup
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|h
init|=
literal|"backup { /path/to/oak/repository | mongodb://host:port/database }<path/to/backup>"
decl_stmt|;
try|try
block|{
name|NodeStore
name|store
init|=
name|bootstrapNodeStore
argument_list|(
name|args
argument_list|,
name|closer
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|FileStoreBackup
operator|.
name|backup
argument_list|(
name|store
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|restore
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|h
init|=
literal|"restore { /path/to/oak/repository | mongodb://host:port/database }<path/to/backup>"
decl_stmt|;
try|try
block|{
name|NodeStore
name|store
init|=
name|bootstrapNodeStore
argument_list|(
name|args
argument_list|,
name|closer
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|FileStoreRestore
operator|.
name|restore
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|//TODO react to state changes of FailoverClient (triggered via JMX), once the state model of FailoverClient is complete.
specifier|private
specifier|static
class|class
name|ScheduledSyncService
extends|extends
name|AbstractScheduledService
block|{
specifier|private
specifier|final
name|StandbyClient
name|failoverClient
decl_stmt|;
specifier|private
specifier|final
name|int
name|interval
decl_stmt|;
specifier|public
name|ScheduledSyncService
parameter_list|(
name|StandbyClient
name|failoverClient
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|failoverClient
operator|=
name|failoverClient
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runOneIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|failoverClient
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Scheduler
name|scheduler
parameter_list|()
block|{
return|return
name|Scheduler
operator|.
name|newFixedDelaySchedule
argument_list|(
literal|0
argument_list|,
name|interval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|standbyInstance
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|defaultHost
init|=
literal|"127.0.0.1"
decl_stmt|;
specifier|final
name|int
name|defaultPort
init|=
literal|8023
decl_stmt|;
specifier|final
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|host
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"host"
argument_list|,
literal|"master host"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|defaultHost
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"port"
argument_list|,
literal|"master port"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|defaultPort
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|interval
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"interval"
argument_list|,
literal|"interval between successive executions"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|secure
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"secure"
argument_list|,
literal|"use secure connections"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
name|Mode
operator|.
name|STANDBY
operator|+
literal|"<path to repository>"
argument_list|)
decl_stmt|;
specifier|final
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nonOptions
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|store
init|=
literal|null
decl_stmt|;
name|StandbyClient
name|failoverClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|store
operator|=
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|failoverClient
operator|=
operator|new
name|StandbyClient
argument_list|(
name|options
operator|.
name|has
argument_list|(
name|host
argument_list|)
condition|?
name|options
operator|.
name|valueOf
argument_list|(
name|host
argument_list|)
else|:
name|defaultHost
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|port
argument_list|)
condition|?
name|options
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
else|:
name|defaultPort
argument_list|,
name|store
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|secure
argument_list|)
operator|&&
name|options
operator|.
name|valueOf
argument_list|(
name|secure
argument_list|)
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|has
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|failoverClient
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ScheduledSyncService
name|syncService
init|=
operator|new
name|ScheduledSyncService
argument_list|(
name|failoverClient
argument_list|,
name|options
operator|.
name|valueOf
argument_list|(
name|interval
argument_list|)
argument_list|)
decl_stmt|;
name|syncService
operator|.
name|startAsync
argument_list|()
expr_stmt|;
name|syncService
operator|.
name|awaitTerminated
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failoverClient
operator|!=
literal|null
condition|)
block|{
name|failoverClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|primaryInstance
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|defaultPort
init|=
literal|8023
decl_stmt|;
specifier|final
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"port"
argument_list|,
literal|"port to listen"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|defaultPort
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|secure
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"secure"
argument_list|,
literal|"use secure connections"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|admissible
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"admissible"
argument_list|,
literal|"list of admissible slave host names or ip ranges"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
name|Mode
operator|.
name|PRIMARY
operator|+
literal|"<path to repository>"
argument_list|)
decl_stmt|;
specifier|final
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nonOptions
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|admissibleSlaves
init|=
name|options
operator|.
name|has
argument_list|(
name|admissible
argument_list|)
condition|?
name|options
operator|.
name|valuesOf
argument_list|(
name|admissible
argument_list|)
else|:
name|Collections
operator|.
name|EMPTY_LIST
decl_stmt|;
name|FileStore
name|store
init|=
literal|null
decl_stmt|;
name|StandbyServer
name|failoverServer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|store
operator|=
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|failoverServer
operator|=
operator|new
name|StandbyServer
argument_list|(
name|options
operator|.
name|has
argument_list|(
name|port
argument_list|)
condition|?
name|options
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
else|:
name|defaultPort
argument_list|,
name|store
argument_list|,
name|admissibleSlaves
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|secure
argument_list|)
operator|&&
name|options
operator|.
name|valueOf
argument_list|(
name|secure
argument_list|)
argument_list|)
expr_stmt|;
name|failoverServer
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failoverServer
operator|!=
literal|null
condition|)
block|{
name|failoverServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|NodeStore
name|bootstrapNodeStore
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Closer
name|closer
parameter_list|,
name|String
name|h
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO add support for other NodeStore flags
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|clusterId
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"clusterId"
argument_list|,
literal|"MongoMK clusterId"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nonOptions
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|src
init|=
name|nonOptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|startsWith
argument_list|(
name|MongoURI
operator|.
name|MONGODB_PREFIX
argument_list|)
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getDatabase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Database missing in MongoDB URI: "
operator|+
name|uri
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|MongoConnection
name|mongo
init|=
operator|new
name|MongoConnection
argument_list|(
name|uri
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|mongo
argument_list|)
argument_list|)
expr_stmt|;
name|DocumentNodeStore
name|store
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|mongo
operator|.
name|getDB
argument_list|()
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
name|FileStore
name|fs
init|=
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|src
argument_list|)
argument_list|,
literal|256
argument_list|,
name|TAR_STORAGE_MEMORY_MAPPED
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SegmentNodeStore
argument_list|(
name|fs
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
specifier|final
name|FileStore
name|fs
parameter_list|)
block|{
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
specifier|final
name|DocumentNodeStore
name|dns
parameter_list|)
block|{
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Closeable
name|asCloseable
parameter_list|(
specifier|final
name|MongoConnection
name|con
parameter_list|)
block|{
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|void
name|compact
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: compact<path>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isValidFileStore
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid FileStore directory "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting "
operator|+
name|directory
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    before "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|directory
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> compacting"
argument_list|)
expr_stmt|;
name|FileStore
name|store
init|=
operator|new
name|FileStore
argument_list|(
name|directory
argument_list|,
literal|256
argument_list|,
name|TAR_STORAGE_MEMORY_MAPPED
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -> cleaning up"
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|FileStore
argument_list|(
name|directory
argument_list|,
literal|256
argument_list|,
name|TAR_STORAGE_MEMORY_MAPPED
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    after  "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|directory
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkpoints
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"usage: checkpoints {<path>|<mongo-uri>} [list|rm-all|rm-unreferenced|rm<checkpoint>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Checkpoints
name|cps
decl_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|op
init|=
literal|"list"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|op
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
literal|"list"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm-all"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm-unreferenced"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|failWith
argument_list|(
literal|"Unknown command."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
name|MongoURI
operator|.
name|MONGODB_PREFIX
argument_list|)
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|MongoClient
name|client
init|=
operator|new
name|MongoClient
argument_list|(
name|uri
argument_list|)
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|store
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|client
operator|.
name|getDB
argument_list|(
name|uri
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cps
operator|=
name|Checkpoints
operator|.
name|onDocumentMK
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isValidFileStore
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
specifier|final
name|FileStore
name|store
init|=
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|256
argument_list|,
name|TAR_STORAGE_MEMORY_MAPPED
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cps
operator|=
name|Checkpoints
operator|.
name|onTarMK
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Invalid FileStore directory "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checkpoints "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"list"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CP
name|cp
range|:
name|cps
operator|.
name|list
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"- %s created %s expires %s%n"
argument_list|,
name|cp
operator|.
name|id
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|cp
operator|.
name|created
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|cp
operator|.
name|expires
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|cnt
operator|+
literal|" checkpoints"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"rm-all"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cnt
init|=
name|cps
operator|.
name|removeAll
argument_list|()
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed "
operator|+
name|cnt
operator|+
literal|" checkpoints in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove all checkpoints."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"rm-unreferenced"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cnt
init|=
name|cps
operator|.
name|removeUnreferenced
argument_list|()
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed "
operator|+
name|cnt
operator|+
literal|" checkpoints in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove unreferenced checkpoints."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"rm"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|failWith
argument_list|(
literal|"Missing checkpoint id"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cp
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|cps
operator|.
name|remove
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed checkpoint "
operator|+
name|cp
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove checkpoint "
operator|+
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Checkpoint '"
operator|+
name|cp
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|failWith
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|recovery
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|MapFactory
operator|.
name|setInstance
argument_list|(
operator|new
name|MapDBMapFactory
argument_list|()
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|h
init|=
literal|"recovery mongodb://host:port/database { dryRun }"
decl_stmt|;
try|try
block|{
name|NodeStore
name|store
init|=
name|bootstrapNodeStore
argument_list|(
name|args
argument_list|,
name|closer
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|store
operator|instanceof
name|DocumentNodeStore
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Recovery only available for DocumentNodeStore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|DocumentNodeStore
name|dns
init|=
operator|(
name|DocumentNodeStore
operator|)
name|store
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dns
operator|.
name|getDocumentStore
argument_list|()
operator|instanceof
name|MongoDocumentStore
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Recovery only available for MongoDocumentStore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|MongoDocumentStore
name|docStore
init|=
operator|(
name|MongoDocumentStore
operator|)
name|dns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|LastRevRecoveryAgent
name|agent
init|=
operator|new
name|LastRevRecoveryAgent
argument_list|(
name|dns
argument_list|)
decl_stmt|;
name|MongoMissingLastRevSeeker
name|seeker
init|=
operator|new
name|MongoMissingLastRevSeeker
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|CloseableIterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|seeker
operator|.
name|getCandidates
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|boolean
name|dryRun
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|contains
argument_list|(
literal|"dryRun"
argument_list|)
decl_stmt|;
name|agent
operator|.
name|recover
argument_list|(
name|docs
operator|.
name|iterator
argument_list|()
argument_list|,
name|dns
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|debug
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: debug<path> [id...]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isValidFileStore
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid FileStore directory "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: enable debug information for other node store implementations
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Debug "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FileStore
name|store
init|=
operator|new
name|FileStore
argument_list|(
name|file
argument_list|,
literal|256
argument_list|,
name|TAR_STORAGE_MEMORY_MAPPED
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|debugFileStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|debugTarFile
argument_list|(
name|store
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugSegment
argument_list|(
name|store
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|check
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|path
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"path"
argument_list|,
literal|"path to the segment store (required)"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|journal
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"journal"
argument_list|,
literal|"journal file"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"journal.log"
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|Long
argument_list|>
name|deep
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"deep"
argument_list|,
literal|"enable deep consistency checking. An optional long "
operator|+
literal|"specifies the number of seconds between progress notifications"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|has
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: check<options>"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isValidFileStore
argument_list|(
name|path
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid FileStore directory "
operator|+
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|journalFileName
init|=
name|journal
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|boolean
name|fullTraversal
init|=
name|options
operator|.
name|has
argument_list|(
name|deep
argument_list|)
decl_stmt|;
name|long
name|debugLevel
init|=
name|deep
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|checkConsistency
argument_list|(
name|dir
argument_list|,
name|journalFileName
argument_list|,
name|fullTraversal
argument_list|,
name|debugLevel
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|debugTarFile
parameter_list|(
name|FileStore
name|store
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|f
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"skipping "
operator|+
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|File
name|tar
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"file doesn't exist, skipping "
operator|+
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Debug file "
operator|+
name|tar
operator|+
literal|"("
operator|+
name|tar
operator|.
name|length
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasrefs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|e
range|:
name|store
operator|.
name|getTarReaderIndex
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|hasrefs
operator|=
literal|true
expr_stmt|;
name|uuids
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasrefs
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SegmentNodeState references to "
operator|+
name|f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeStoreTree
operator|.
name|filterNodeStates
argument_list|(
name|uuids
argument_list|,
name|paths
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No references to "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|store
operator|.
name|getTarGraph
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tar graph:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|graph
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|'='
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error getting tar graph:"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|debugSegment
parameter_list|(
name|FileStore
name|store
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-f-]+)|(([0-9a-f-]+:[0-9a-f]+)(-([0-9a-f-]+:[0-9a-f]+))?)?(/.*)?"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentId
name|id
init|=
name|store
operator|.
name|getTracker
argument_list|()
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|id
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RecordId
name|id1
init|=
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|RecordId
name|id2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id1
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id2
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|path
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2
operator|==
literal|null
condition|)
block|{
name|NodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"/ ("
operator|+
name|id1
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RecordId
name|nid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|nid
operator|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node
operator|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|nid
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NodeState
name|node1
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|NodeState
name|node2
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node1
operator|=
name|node1
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|node2
operator|=
name|node2
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|JsopDiff
operator|.
name|diffToJsop
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|debugFileStore
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|List
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|idmap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|dataCount
init|=
literal|0
decl_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|;
name|int
name|bulkCount
init|=
literal|0
decl_stmt|;
name|long
name|bulkSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|store
operator|.
name|getSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|Segment
name|segment
init|=
name|id
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|segment
operator|.
name|getReferencedIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
expr|<
name|SegmentId
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total size:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6dMB in %6d data segments%n"
argument_list|,
name|dataSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6dMB in %6d bulk segments%n"
argument_list|,
name|bulkSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|garbage
init|=
name|newHashSet
argument_list|(
name|idmap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|SegmentId
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SegmentId
name|id
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|garbage
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|idmap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dataCount
operator|=
literal|0
expr_stmt|;
name|dataSize
operator|=
literal|0
expr_stmt|;
name|bulkCount
operator|=
literal|0
expr_stmt|;
name|bulkSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|garbage
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available for garbage collection:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6dMB in %6d data segments%n"
argument_list|,
name|dataSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%6dMB in %6d bulk segments%n"
argument_list|,
name|bulkSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the provided directory is a valid FileStore      *       * @return true if the provided directory is a valid FileStore      */
specifier|private
specifier|static
name|boolean
name|isValidFileStore
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|store
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
operator|||
operator|!
name|store
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// for now the only check is the existence of the journal file
for|for
control|(
name|String
name|f
range|:
name|store
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
literal|"journal.log"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|upgrade
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|accepts
argument_list|(
literal|"datastore"
argument_list|,
literal|"keep data store"
argument_list|)
expr_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|||
name|argList
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|argList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|xml
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"repository.xml"
argument_list|)
decl_stmt|;
name|String
name|dst
init|=
name|argList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|xml
operator|=
operator|new
name|File
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|dst
operator|=
name|argList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|RepositoryContext
name|source
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|dir
argument_list|,
name|xml
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dst
operator|.
name|startsWith
argument_list|(
literal|"mongodb://"
argument_list|)
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|MongoClient
name|client
init|=
operator|new
name|MongoClient
argument_list|(
name|uri
argument_list|)
decl_stmt|;
try|try
block|{
name|DocumentNodeStore
name|target
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|client
operator|.
name|getDB
argument_list|(
name|uri
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
try|try
block|{
name|RepositoryUpgrade
name|upgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|upgrade
operator|.
name|setCopyBinariesByReference
argument_list|(
name|options
operator|.
name|has
argument_list|(
literal|"datastore"
argument_list|)
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|target
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileStore
name|store
init|=
operator|new
name|FileStore
argument_list|(
operator|new
name|File
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|256
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeStore
name|target
init|=
operator|new
name|SegmentNodeStore
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|RepositoryUpgrade
name|upgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|upgrade
operator|.
name|setCopyBinariesByReference
argument_list|(
name|options
operator|.
name|has
argument_list|(
literal|"datastore"
argument_list|)
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|source
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: upgrade<olddir><newdir>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|server
parameter_list|(
name|String
name|defaultUri
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|mkServer
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"mk"
argument_list|,
literal|"MicroKernel server"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|cache
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"cache"
argument_list|,
literal|"cache size (MB)"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// tar/h2 specific option
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|base
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"base"
argument_list|,
literal|"Base directory"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|mmap
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"mmap"
argument_list|,
literal|"TarMK memory mapping"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// mongo specific options:
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|host
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"host"
argument_list|,
literal|"MongoDB host"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"port"
argument_list|,
literal|"MongoDB port"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|27017
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|dbName
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"db"
argument_list|,
literal|"MongoDB database"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|clusterIds
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"clusterIds"
argument_list|,
literal|"Cluster Ids"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|withValuesSeparatedBy
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|nonOption
init|=
name|parser
operator|.
name|nonOptions
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|OakFixture
name|oakFixture
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arglist
init|=
name|nonOption
operator|.
name|values
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
operator|(
name|arglist
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|defaultUri
else|:
name|arglist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|fix
init|=
operator|(
name|arglist
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
condition|?
name|OakFixture
operator|.
name|OAK_MEMORY
else|:
name|arglist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|cacheSize
init|=
name|cache
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|cIds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fix
operator|.
name|startsWith
argument_list|(
name|OakFixture
operator|.
name|OAK_MEMORY
argument_list|)
condition|)
block|{
if|if
condition|(
name|OakFixture
operator|.
name|OAK_MEMORY_NS
operator|.
name|equals
argument_list|(
name|fix
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMemoryNS
argument_list|(
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMemory
argument_list|(
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fix
operator|.
name|startsWith
argument_list|(
name|OakFixture
operator|.
name|OAK_MONGO
argument_list|)
condition|)
block|{
name|cIds
operator|=
name|clusterIds
operator|.
name|values
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|db
init|=
name|dbName
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required argument db missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|OakFixture
operator|.
name|OAK_MONGO_NS
operator|.
name|equals
argument_list|(
name|fix
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMongoNS
argument_list|(
name|host
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|port
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|db
argument_list|,
literal|false
argument_list|,
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OakFixture
operator|.
name|OAK_MONGO_MK
operator|.
name|equals
argument_list|(
name|fix
argument_list|)
condition|)
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMongoMK
argument_list|(
name|host
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|port
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|db
argument_list|,
literal|false
argument_list|,
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getMongo
argument_list|(
name|host
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|port
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
name|db
argument_list|,
literal|false
argument_list|,
name|cacheSize
operator|*
name|MB
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fix
operator|.
name|equals
argument_list|(
name|OakFixture
operator|.
name|OAK_TAR
argument_list|)
condition|)
block|{
name|File
name|baseFile
init|=
name|base
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required argument base missing."
argument_list|)
throw|;
block|}
name|oakFixture
operator|=
name|OakFixture
operator|.
name|getTar
argument_list|(
name|OakFixture
operator|.
name|OAK_TAR
argument_list|,
name|baseFile
argument_list|,
literal|256
argument_list|,
name|cacheSize
argument_list|,
name|mmap
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported repository setup "
operator|+
name|fix
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|mkServer
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|cIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: clusterIds option is ignored when mk option is specified"
argument_list|)
expr_stmt|;
block|}
name|startMkServer
argument_list|(
name|oakFixture
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startOakServer
argument_list|(
name|oakFixture
argument_list|,
name|uri
argument_list|,
name|cIds
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startOakServer
parameter_list|(
name|OakFixture
name|oakFixture
parameter_list|,
name|String
name|uri
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|cIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
name|m
decl_stmt|;
if|if
condition|(
name|cIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting "
operator|+
name|oakFixture
operator|.
name|toString
argument_list|()
operator|+
literal|" repository -> "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|m
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|oakFixture
operator|.
name|getOak
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting a clustered repository "
operator|+
name|oakFixture
operator|.
name|toString
argument_list|()
operator|+
literal|" -> "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|HashMap
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
argument_list|(
name|cIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|oakFixture
operator|.
name|getOak
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"/node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|HttpServer
argument_list|(
name|uri
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startMkServer
parameter_list|(
name|OakFixture
name|oakFixture
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
operator|.
name|Server
name|server
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
operator|.
name|Server
argument_list|(
name|oakFixture
operator|.
name|getMicroKernel
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|server
operator|.
name|setBindAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getPort
argument_list|()
operator|>
literal|0
condition|)
block|{
name|server
operator|.
name|setPort
argument_list|(
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|server
operator|.
name|setPort
argument_list|(
literal|28080
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|HttpServer
block|{
specifier|private
specifier|final
name|ServletContextHandler
name|context
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|public
name|HttpServer
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|uri
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
operator|new
name|Oak
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HttpServer
parameter_list|(
name|String
name|uri
parameter_list|,
name|Map
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
name|oakMap
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|java
operator|.
name|net
operator|.
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
comment|// use default
name|port
operator|=
name|PORT
expr_stmt|;
block|}
name|context
operator|=
operator|new
name|ServletContextHandler
argument_list|()
expr_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Oak
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|oakMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addServlets
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
operator|new
name|Server
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addServlets
parameter_list|(
name|Oak
name|oak
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
decl_stmt|;
comment|// 1 - OakServer
name|ContentRepository
name|repository
init|=
name|oak
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|OakServlet
argument_list|(
name|repository
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
name|path
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
comment|// 2 - Webdav Server on JCR repository
specifier|final
name|Repository
name|jcrRepository
init|=
name|jcr
operator|.
name|createRepository
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|ServletHolder
name|webdav
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|SimpleWebdavServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|jcrRepository
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|webdav
operator|.
name|setInitParameter
argument_list|(
name|SimpleWebdavServlet
operator|.
name|INIT_PARAM_RESOURCE_PATH_PREFIX
argument_list|,
name|path
operator|+
literal|"/webdav"
argument_list|)
expr_stmt|;
name|webdav
operator|.
name|setInitParameter
argument_list|(
name|AbstractWebdavServlet
operator|.
name|INIT_PARAM_AUTHENTICATE_HEADER
argument_list|,
literal|"Basic realm=\"Oak\""
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|webdav
argument_list|,
name|path
operator|+
literal|"/webdav/*"
argument_list|)
expr_stmt|;
comment|// 3 - JCR Remoting Server
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|ServletHolder
name|jcrremote
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|JcrRemotingServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|jcrRepository
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|jcrremote
operator|.
name|setInitParameter
argument_list|(
name|JCRWebdavServerServlet
operator|.
name|INIT_PARAM_RESOURCE_PATH_PREFIX
argument_list|,
name|path
operator|+
literal|"/jcrremote"
argument_list|)
expr_stmt|;
name|jcrremote
operator|.
name|setInitParameter
argument_list|(
name|AbstractWebdavServlet
operator|.
name|INIT_PARAM_AUTHENTICATE_HEADER
argument_list|,
literal|"Basic realm=\"Oak\""
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|jcrremote
argument_list|,
name|path
operator|+
literal|"/jcrremote/*"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
enum|enum
name|Mode
block|{
name|BACKUP
argument_list|(
literal|"backup"
argument_list|)
block|,
name|RESTORE
argument_list|(
literal|"restore"
argument_list|)
block|,
name|BENCHMARK
argument_list|(
literal|"benchmark"
argument_list|)
block|,
name|CONSOLE
argument_list|(
literal|"console"
argument_list|)
block|,
name|DEBUG
argument_list|(
literal|"debug"
argument_list|)
block|,
name|CHECK
argument_list|(
literal|"check"
argument_list|)
block|,
name|COMPACT
argument_list|(
literal|"compact"
argument_list|)
block|,
name|SERVER
argument_list|(
literal|"server"
argument_list|)
block|,
name|UPGRADE
argument_list|(
literal|"upgrade"
argument_list|)
block|,
name|SCALABILITY
argument_list|(
literal|"scalability"
argument_list|)
block|,
name|EXPLORE
argument_list|(
literal|"explore"
argument_list|)
block|,
name|PRIMARY
argument_list|(
literal|"primary"
argument_list|)
block|,
name|STANDBY
argument_list|(
literal|"standy"
argument_list|)
block|,
name|HELP
argument_list|(
literal|"help"
argument_list|)
block|,
name|CHECKPOINTS
argument_list|(
literal|"checkpoints"
argument_list|)
block|,
name|RECOVERY
argument_list|(
literal|"recovery"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
name|Mode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

