begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|singletonIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|LANES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Same as for {@link ContentMirrorStoreStrategy} but the order of the keys is kept by using the  * following structure  *   *<code>  *  :index : {  *      :start : { :next = n1 },  *      n0 : { /content/foo/bar(match=true), :next=n3 },  *      n1 : { /content/foo1/bar(match=true), :next=n0 },  *      n2 : { /content/foo2/bar(match=true), :next= }, //this is the end of the list  *      n3 : { /content/foo3/bar(match=true), :next=n2 }  *  }  *</code>  */
end_comment

begin_class
specifier|public
class|class
name|OrderedContentMirrorStoreStrategy
extends|extends
name|ContentMirrorStoreStrategy
block|{
comment|/**      * convenience property for initialising an empty multi-value :next      */
specifier|public
specifier|static
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|EMPTY_NEXT
init|=
name|Collections
operator|.
name|nCopies
argument_list|(
name|OrderedIndex
operator|.
name|LANES
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|/**      * convenience property that represent an empty :next as array      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_NEXT_ARRAY
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|EMPTY_NEXT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * the property linking to the next node      */
specifier|public
specifier|static
specifier|final
name|String
name|NEXT
init|=
literal|":next"
decl_stmt|;
comment|/**      * node that works as root of the index (start point or 0 element)      */
specifier|public
specifier|static
specifier|final
name|String
name|START
init|=
literal|":start"
decl_stmt|;
comment|/**      * a NodeState used for easy creating of an empty :start      */
specifier|public
specifier|static
specifier|final
name|NodeState
name|EMPTY_START_NODE
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|EMPTY_NEXT
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrderedContentMirrorStoreStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RND
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * maximum number of attempt for potential recursive processes like seek()       */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
name|LANES
operator|+
literal|1
decl_stmt|;
comment|/**      * the direction of the index.      */
specifier|private
name|OrderDirection
name|direction
init|=
name|OrderedIndex
operator|.
name|DEFAULT_DIRECTION
decl_stmt|;
specifier|public
name|OrderedContentMirrorStoreStrategy
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OrderedContentMirrorStoreStrategy
parameter_list|(
name|OrderDirection
name|direction
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printWalkedLanes
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|String
index|[]
name|walked
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|String
name|m
init|=
operator|(
name|msg
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|msg
decl_stmt|;
if|if
condition|(
name|walked
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|m
operator|+
literal|" walked: null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|walked
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{}walked[{}]: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|m
block|,
name|i
block|,
name|walked
index|[
name|i
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|NodeBuilder
name|fetchKeyNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - === new item '{}'"
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// this is where the actual adding and maintenance of index's keys happen
name|NodeBuilder
name|node
init|=
literal|null
decl_stmt|;
name|NodeBuilder
name|start
init|=
name|index
operator|.
name|child
argument_list|(
name|START
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|condition
init|=
name|direction
operator|.
name|isAscending
argument_list|()
condition|?
operator|new
name|PredicateGreaterThan
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
else|:
operator|new
name|PredicateLessThan
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|walked
init|=
operator|new
name|String
index|[
name|OrderedIndex
operator|.
name|LANES
index|]
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|getPropertyNext
argument_list|(
name|start
argument_list|)
argument_list|)
condition|)
block|{
comment|// it means we're in an empty/new index. Setting properly the :start's :next
name|setPropertyNext
argument_list|(
name|start
argument_list|,
name|EMPTY_NEXT_ARRAY
argument_list|)
expr_stmt|;
block|}
comment|// we use the seek for seeking the right spot. The walkedLanes will have all our
comment|// predecessors
name|String
name|entry
init|=
name|seek
argument_list|(
name|index
argument_list|,
name|condition
argument_list|,
name|walked
argument_list|,
literal|0
argument_list|,
operator|new
name|FixingDanglingLinkCallback
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - entry: {} "
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|printWalkedLanes
argument_list|(
literal|"fetchKeyNode() - "
argument_list|,
name|walked
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// it's an existing node. We should not need to update anything around pointers
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - node already there."
argument_list|)
expr_stmt|;
name|node
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the entry does not exits yet
name|node
operator|=
name|index
operator|.
name|child
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// it's a brand new node. let's start setting an empty next
name|setPropertyNext
argument_list|(
name|node
argument_list|,
name|EMPTY_NEXT_ARRAY
argument_list|)
expr_stmt|;
name|int
name|lane
init|=
name|getLane
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - extracted lane: {}"
argument_list|,
name|lane
argument_list|)
expr_stmt|;
name|String
name|next
decl_stmt|;
name|NodeBuilder
name|predecessor
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
name|lane
init|;
name|l
operator|>=
literal|0
condition|;
name|l
operator|--
control|)
block|{
comment|// let's update the predecessors starting from the coin-flip lane
name|predecessor
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|walked
index|[
name|l
index|]
argument_list|)
expr_stmt|;
name|next
operator|=
name|getPropertyNext
argument_list|(
name|predecessor
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|setPropertyNext
argument_list|(
name|predecessor
argument_list|,
name|key
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|setPropertyNext
argument_list|(
name|node
argument_list|,
name|next
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - on lane: {}"
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - next from previous: {}"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - new status of predecessor name: {} - {} "
argument_list|,
name|walked
index|[
name|l
index|]
argument_list|,
name|predecessor
operator|.
name|getProperty
argument_list|(
name|NEXT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetchKeyNode() - new node name: {} - {}"
argument_list|,
name|key
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|NEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
name|void
name|prune
parameter_list|(
specifier|final
name|NodeBuilder
name|index
parameter_list|,
specifier|final
name|Deque
argument_list|<
name|NodeBuilder
argument_list|>
name|builders
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"prune() - deleting: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeBuilder
name|node
range|:
name|builders
control|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
literal|"match"
argument_list|)
operator|||
name|node
operator|.
name|getChildNodeCount
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|hasProperty
argument_list|(
name|NEXT
argument_list|)
condition|)
block|{
name|String
index|[]
name|walkedLanes
init|=
operator|new
name|String
index|[
name|OrderedIndex
operator|.
name|LANES
index|]
decl_stmt|;
name|String
name|entry
decl_stmt|;
name|String
name|lane0Next
decl_stmt|,
name|prevNext
decl_stmt|,
name|currNext
decl_stmt|;
comment|// for as long as we have the an entry and we didn't update the lane0 we have
comment|// to keep searching and update
do|do
block|{
name|entry
operator|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateEquals
argument_list|(
name|key
argument_list|)
argument_list|,
name|walkedLanes
argument_list|,
literal|0
argument_list|,
operator|new
name|LoggingDanglinLinkCallback
argument_list|()
argument_list|)
expr_stmt|;
name|lane0Next
operator|=
name|getPropertyNext
argument_list|(
name|index
operator|.
name|getChildNode
argument_list|(
name|walkedLanes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|walkedLanes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"prune() - walkedLanes[{}]: {}"
argument_list|,
name|i
argument_list|,
name|walkedLanes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|lane
init|=
name|walkedLanes
operator|.
name|length
operator|-
literal|1
init|;
name|lane
operator|>=
literal|0
condition|;
name|lane
operator|--
control|)
block|{
name|prevNext
operator|=
name|getPropertyNext
argument_list|(
name|index
operator|.
name|getChildNode
argument_list|(
name|walkedLanes
index|[
name|lane
index|]
argument_list|)
argument_list|,
name|lane
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|prevNext
argument_list|)
condition|)
block|{
comment|// if it's actually pointing to us let's deal with it
name|currNext
operator|=
name|getPropertyNext
argument_list|(
name|node
argument_list|,
name|lane
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"prune() - setting next for '{}' on lane '{}' with '{}'"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|walkedLanes
index|[
name|lane
index|]
block|,
name|lane
block|,
name|currNext
block|}
argument_list|)
expr_stmt|;
block|}
name|setPropertyNext
argument_list|(
name|index
operator|.
name|getChildNode
argument_list|(
name|walkedLanes
index|[
name|lane
index|]
argument_list|)
argument_list|,
name|currNext
argument_list|,
name|lane
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
name|lane0Next
argument_list|)
condition|)
do|;
block|}
name|node
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * retrieve an Iterable for going through the index in the right order without the :start node      *       * @param index the root of the index (:index)      * @return the iterable      */
annotation|@
name|Override
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|)
block|{
return|return
name|getChildNodeEntries
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Retrieve an Iterable for going through the index in the right order with potentially the      * :start node      *       * @param index the root of the index (:index)      * @param includeStart true if :start should be included as first element      * @return      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|index
parameter_list|,
specifier|final
name|boolean
name|includeStart
parameter_list|)
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|cne
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeState
name|start
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
name|String
name|startNext
init|=
name|getPropertyNext
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|start
operator|.
name|exists
argument_list|()
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|startNext
argument_list|)
operator|)
operator|&&
operator|!
name|includeStart
condition|)
block|{
comment|// if the property is not there or is empty it means we're empty
name|cne
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cne
operator|=
operator|new
name|FullIterable
argument_list|(
name|index
argument_list|,
name|includeStart
argument_list|)
expr_stmt|;
block|}
return|return
name|cne
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|NodeState
name|indexMeta
parameter_list|,
specifier|final
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|indexMeta
argument_list|,
name|pr
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**      * search the index for the provided PropertyRestriction      *       * @param filter      * @param indexName      * @param indexMeta      * @param pr      * @return the iterable      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|NodeState
name|indexMeta
parameter_list|,
specifier|final
name|PropertyRestriction
name|pr
parameter_list|,
name|String
name|pathPrefix
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|indexMeta
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|,
name|pr
argument_list|,
name|pathPrefix
argument_list|)
return|;
block|}
comment|/**      * queries through the index as other query() but provides the PropertyRestriction to be applied      * for advanced cases like range queries      *       * @param filter      * @param indexName      * @param indexMeta      * @param indexStorageNodeName      * @param pr      * @return the iterable      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
specifier|final
name|Filter
name|filter
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|NodeState
name|indexMeta
parameter_list|,
specifier|final
name|String
name|indexStorageNodeName
parameter_list|,
specifier|final
name|PropertyRestriction
name|pr
parameter_list|,
name|String
name|pathPrefix
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"query() - filter: {}"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query() - indexName: {}"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query() - indexMeta: {}"
argument_list|,
name|indexMeta
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query() - indexStorageNodeName: {}"
argument_list|,
name|indexStorageNodeName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"query() - pr: {}"
argument_list|,
name|pr
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeState
name|indexState
init|=
name|indexMeta
operator|.
name|getChildNode
argument_list|(
name|indexStorageNodeName
argument_list|)
decl_stmt|;
specifier|final
name|NodeBuilder
name|index
init|=
operator|new
name|ReadOnlyBuilder
argument_list|(
name|indexState
argument_list|)
decl_stmt|;
specifier|final
name|String
name|firstEncoded
init|=
operator|(
name|pr
operator|.
name|first
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|encode
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lastEncoded
init|=
operator|(
name|pr
operator|.
name|last
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|encode
argument_list|(
name|pr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstEncoded
operator|!=
literal|null
operator|&&
operator|!
name|firstEncoded
operator|.
name|equals
argument_list|(
name|lastEncoded
argument_list|)
condition|)
block|{
comment|// '>'& '>=' and between use case
name|LOG
operator|.
name|debug
argument_list|(
literal|"'>'& '>=' and between use case"
argument_list|)
expr_stmt|;
name|ChildNodeEntry
name|firstValueableItem
decl_stmt|;
name|String
name|firstValuableItemKey
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|childrenIterable
decl_stmt|;
if|if
condition|(
name|lastEncoded
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|">&>= case."
argument_list|)
expr_stmt|;
name|firstValuableItemKey
operator|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateGreaterThan
argument_list|(
name|firstEncoded
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstValuableItemKey
operator|!=
literal|null
condition|)
block|{
name|firstValueableItem
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|firstValuableItemKey
argument_list|,
name|indexState
operator|.
name|getChildNode
argument_list|(
name|firstValuableItemKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|direction
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|childrenIterable
operator|=
operator|new
name|SeekedIterable
argument_list|(
name|indexState
argument_list|,
name|firstValueableItem
argument_list|)
expr_stmt|;
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|childrenIterable
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
operator|new
name|BetweenIterable
argument_list|(
name|indexState
argument_list|,
name|firstValueableItem
argument_list|,
name|firstEncoded
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|direction
argument_list|)
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|first
decl_stmt|,
name|last
decl_stmt|;
name|boolean
name|includeFirst
decl_stmt|,
name|includeLast
decl_stmt|;
name|first
operator|=
name|firstEncoded
expr_stmt|;
name|last
operator|=
name|lastEncoded
expr_stmt|;
name|includeFirst
operator|=
name|pr
operator|.
name|firstIncluding
expr_stmt|;
name|includeLast
operator|=
name|pr
operator|.
name|lastIncluding
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|op1
init|=
name|includeFirst
condition|?
literal|">="
else|:
literal|">"
decl_stmt|;
specifier|final
name|String
name|op2
init|=
name|includeLast
condition|?
literal|"<="
else|:
literal|"<"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"in between case. direction: {} - Condition: (x {} {} AND x {} {})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|direction
block|,
name|op1
block|,
name|first
block|,
name|op2
block|,
name|last
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|direction
operator|.
name|equals
argument_list|(
name|OrderDirection
operator|.
name|ASC
argument_list|)
condition|)
block|{
name|firstValuableItemKey
operator|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateGreaterThan
argument_list|(
name|first
argument_list|,
name|includeFirst
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstValuableItemKey
operator|=
name|seek
argument_list|(
name|index
argument_list|,
operator|new
name|PredicateLessThan
argument_list|(
name|last
argument_list|,
name|includeLast
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"firstValueableItem: {}"
argument_list|,
name|firstValuableItemKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstValuableItemKey
operator|!=
literal|null
condition|)
block|{
name|firstValueableItem
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|firstValuableItemKey
argument_list|,
name|indexState
operator|.
name|getChildNode
argument_list|(
name|firstValuableItemKey
argument_list|)
argument_list|)
expr_stmt|;
name|childrenIterable
operator|=
operator|new
name|BetweenIterable
argument_list|(
name|indexState
argument_list|,
name|firstValueableItem
argument_list|,
name|last
argument_list|,
name|includeLast
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|childrenIterable
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|it
return|;
block|}
elseif|else
if|if
condition|(
name|lastEncoded
operator|!=
literal|null
operator|&&
operator|!
name|lastEncoded
operator|.
name|equals
argument_list|(
name|firstEncoded
argument_list|)
condition|)
block|{
comment|// '<'& '<=' use case
name|LOG
operator|.
name|debug
argument_list|(
literal|"'<'& '<=' use case"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|searchfor
init|=
name|lastEncoded
decl_stmt|;
specifier|final
name|boolean
name|include
init|=
name|pr
operator|.
name|lastIncluding
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
operator|new
name|PredicateLessThan
argument_list|(
name|searchfor
argument_list|,
name|include
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<&<= case. - searchfor: {} - include: {} - predicate: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|searchfor
block|,
name|include
block|,
name|predicate
block|}
argument_list|)
expr_stmt|;
name|ChildNodeEntry
name|firstValueableItem
decl_stmt|;
name|String
name|firstValueableItemKey
init|=
name|seek
argument_list|(
name|index
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"firstValuableItem: {}"
argument_list|,
name|firstValueableItemKey
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|it
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstValueableItemKey
operator|!=
literal|null
condition|)
block|{
name|firstValueableItem
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|firstValueableItemKey
argument_list|,
name|indexState
operator|.
name|getChildNode
argument_list|(
name|firstValueableItemKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|direction
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
operator|new
name|BetweenIterable
argument_list|(
name|indexState
argument_list|,
name|firstValueableItem
argument_list|,
name|searchfor
argument_list|,
name|include
argument_list|,
name|direction
argument_list|)
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|it
operator|=
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
operator|new
name|SeekedIterable
argument_list|(
name|indexState
argument_list|,
name|firstValueableItem
argument_list|)
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|it
return|;
block|}
elseif|else
if|if
condition|(
name|firstEncoded
operator|!=
literal|null
operator|&&
name|firstEncoded
operator|.
name|equals
argument_list|(
name|lastEncoded
argument_list|)
condition|)
block|{
comment|// property = $value case
name|LOG
operator|.
name|debug
argument_list|(
literal|"'property = $value' case"
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|key
init|=
name|indexState
operator|.
name|getChildNode
argument_list|(
name|firstEncoded
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pf
init|=
name|pathPrefix
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|PathIterator
name|pi
init|=
operator|new
name|PathIterator
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|pf
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setPathContainsValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pi
operator|.
name|enqueue
argument_list|(
name|singletonIterator
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|firstEncoded
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// property is not null. AKA "open query"
name|LOG
operator|.
name|debug
argument_list|(
literal|"property is not null. AKA 'open query'. FullIterable"
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueryResultsWrapper
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
operator|new
name|FullIterable
argument_list|(
name|indexState
argument_list|,
literal|false
argument_list|)
argument_list|,
name|pathPrefix
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|String
name|v
decl_stmt|;
try|try
block|{
name|v
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|value
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while encoding value."
argument_list|)
expr_stmt|;
name|v
operator|=
name|value
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|static
class|class
name|OrderedChildNodeEntry
extends|extends
name|AbstractChildNodeEntry
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|state
decl_stmt|;
specifier|public
name|OrderedChildNodeEntry
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
comment|/**      * estimate the number of nodes given the provided PropertyRestriction      *       * @param indexMeta      * @param pr      * @param max      * @return the estimated number of nodes      */
specifier|public
name|long
name|count
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|,
name|Filter
operator|.
name|PropertyRestriction
name|pr
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|NodeState
name|content
init|=
name|indexMeta
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
name|Filter
operator|.
name|PropertyRestriction
name|lpr
init|=
name|pr
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|lpr
operator|==
literal|null
condition|)
block|{
comment|// it means we have no restriction and we should return the whole lot
name|lpr
operator|=
operator|new
name|Filter
operator|.
name|PropertyRestriction
argument_list|()
expr_stmt|;
block|}
comment|// the index is not empty
name|String
name|value
decl_stmt|;
if|if
condition|(
name|lpr
operator|.
name|firstIncluding
operator|&&
name|lpr
operator|.
name|lastIncluding
operator|&&
name|lpr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|lpr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|last
argument_list|)
condition|)
block|{
comment|// property==value case
name|value
operator|=
name|lpr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|n
init|=
name|content
operator|.
name|getChildNode
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|exists
argument_list|()
condition|)
block|{
name|CountingNodeVisitor
name|v
init|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// property not null case
name|PropertyState
name|ec
init|=
name|indexMeta
operator|.
name|getProperty
argument_list|(
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|!=
literal|null
condition|)
block|{
name|count
operator|=
name|ec
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CountingNodeVisitor
name|v
init|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|first
operator|!=
literal|null
operator|&&
operator|!
name|lpr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|last
argument_list|)
condition|)
block|{
comment|//>&>= in ascending index
name|value
operator|=
name|lpr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
specifier|final
name|String
name|vv
init|=
name|encode
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|include
init|=
name|lpr
operator|.
name|firstIncluding
decl_stmt|;
specifier|final
name|OrderDirection
name|dd
init|=
name|direction
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|String
name|v
init|=
name|vv
decl_stmt|;
specifier|private
name|boolean
name|i
init|=
name|include
decl_stmt|;
specifier|private
name|OrderDirection
name|d
init|=
name|dd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|boolean
name|b
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|OrderDirection
operator|.
name|ASC
argument_list|)
condition|)
block|{
name|b
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|>
literal|0
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|<
literal|0
expr_stmt|;
block|}
name|b
operator|=
name|b
operator|||
operator|(
name|i
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|CountingNodeVisitor
name|v
decl_stmt|;
name|int
name|depthTotal
init|=
literal|0
decl_stmt|;
comment|// seeking the right starting point
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|String
name|converted
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|converted
argument_list|)
condition|)
block|{
comment|// here we are let's start counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|v
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|depthTotal
operator|+=
name|v
operator|.
name|depthTotal
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// small hack for having a common way of counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|depthTotal
operator|=
name|depthTotal
expr_stmt|;
name|v
operator|.
name|count
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lpr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|lpr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|lpr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|//<&<=
name|value
operator|=
name|lpr
operator|.
name|last
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
specifier|final
name|String
name|vv
init|=
name|encode
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|include
init|=
name|lpr
operator|.
name|lastIncluding
decl_stmt|;
specifier|final
name|OrderDirection
name|dd
init|=
name|direction
decl_stmt|;
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|getChildNodeEntries
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|String
name|v
init|=
name|vv
decl_stmt|;
specifier|private
name|boolean
name|i
init|=
name|include
decl_stmt|;
specifier|private
name|OrderDirection
name|d
init|=
name|dd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|boolean
name|b
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|OrderDirection
operator|.
name|ASC
argument_list|)
condition|)
block|{
name|b
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|<
literal|0
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|>
literal|0
expr_stmt|;
block|}
name|b
operator|=
name|b
operator|||
operator|(
name|i
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|CountingNodeVisitor
name|v
decl_stmt|;
name|int
name|depthTotal
init|=
literal|0
decl_stmt|;
comment|// seeking the right starting point
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|children
control|)
block|{
name|String
name|converted
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|converted
argument_list|)
condition|)
block|{
comment|// here we are let's start counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|visit
argument_list|(
name|content
operator|.
name|getChildNode
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|v
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|depthTotal
operator|+=
name|v
operator|.
name|depthTotal
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// small hack for having a common way of counting
name|v
operator|=
operator|new
name|CountingNodeVisitor
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|v
operator|.
name|depthTotal
operator|=
name|depthTotal
expr_stmt|;
name|v
operator|.
name|count
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|count
operator|=
name|v
operator|.
name|getEstimatedCount
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**      * wrap an {@code Iterable<ChildNodeEntry>} in something that can be understood by the Query      * Engine      */
specifier|private
specifier|static
class|class
name|QueryResultsWrapper
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|private
name|String
name|pathPrefix
decl_stmt|;
specifier|public
name|QueryResultsWrapper
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|indexName
parameter_list|,
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
parameter_list|,
name|String
name|pathPrefix
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|pathPrefix
operator|=
name|pathPrefix
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|PathIterator
name|pi
init|=
operator|new
name|PathIterator
argument_list|(
name|filter
argument_list|,
name|indexName
argument_list|,
name|pathPrefix
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setPathContainsValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pi
operator|.
name|enqueue
argument_list|(
name|children
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
block|}
block|}
comment|/**      * iterating throughout the index in the correct order. Externalised as class for easy      * overloading.      */
specifier|private
specifier|static
class|class
name|FullIterator
implements|implements
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|boolean
name|includeStart
decl_stmt|;
specifier|private
name|NodeState
name|start
decl_stmt|;
name|NodeState
name|current
decl_stmt|;
specifier|private
name|NodeState
name|index
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
decl_stmt|;
name|String
name|currentName
decl_stmt|;
specifier|private
name|DanglingLinkCallback
name|dlc
init|=
operator|new
name|LoggingDanglinLinkCallback
argument_list|()
decl_stmt|;
specifier|public
name|FullIterator
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|NodeState
name|start
parameter_list|,
name|boolean
name|includeStart
parameter_list|,
name|NodeState
name|current
parameter_list|)
block|{
name|this
operator|.
name|includeStart
operator|=
name|includeStart
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|new
name|ReadOnlyBuilder
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|String
name|next
init|=
name|getPropertyNext
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
operator|(
name|includeStart
operator|&&
name|start
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|includeStart
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|next
argument_list|)
operator|&&
name|ensureAndCleanNode
argument_list|(
name|builder
argument_list|,
name|next
argument_list|,
name|currentName
operator|==
literal|null
condition|?
literal|""
else|:
name|currentName
argument_list|,
literal|0
argument_list|,
name|dlc
argument_list|)
operator|)
decl_stmt|;
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
name|ChildNodeEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|includeStart
operator|&&
name|start
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|entry
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|START
argument_list|,
name|current
argument_list|)
expr_stmt|;
comment|// let's set it to false. We just included it.
name|includeStart
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|currentName
operator|=
name|getPropertyNext
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|currentName
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|OrderedChildNodeEntry
argument_list|(
name|currentName
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**          * @return the name of the current node. May be null in some cases.          */
annotation|@
name|Nullable
name|String
name|getCurrentName
parameter_list|()
block|{
return|return
name|currentName
return|;
block|}
block|}
comment|/**      * Convenience class for iterating throughout the index in the correct order      */
specifier|private
specifier|static
class|class
name|FullIterable
implements|implements
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|boolean
name|includeStart
decl_stmt|;
name|NodeState
name|index
decl_stmt|;
name|NodeState
name|start
decl_stmt|;
name|NodeState
name|current
decl_stmt|;
comment|/**          * @param index the current index content state. The {@code :index} node          * @param includeStart whether include {@code :start} or not.          */
specifier|public
name|FullIterable
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|boolean
name|includeStart
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|includeStart
operator|=
name|includeStart
expr_stmt|;
name|NodeState
name|s
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeStart
operator|&&
operator|!
name|s
operator|.
name|exists
argument_list|()
condition|)
block|{
name|start
operator|=
name|EMPTY_START_NODE
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|s
expr_stmt|;
block|}
name|current
operator|=
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FullIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|includeStart
argument_list|,
name|current
argument_list|)
return|;
block|}
block|}
comment|/**      * Iterator that allows to start iterating from a given position      */
specifier|private
specifier|static
class|class
name|SeekedIterator
extends|extends
name|FullIterator
block|{
comment|/**          * whether the seekeed item has been returned already or not.          */
specifier|private
name|boolean
name|firstReturned
decl_stmt|;
comment|/**          * the seeked item          */
specifier|private
name|ChildNodeEntry
name|first
decl_stmt|;
specifier|public
name|SeekedIterator
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|NodeState
name|start
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
literal|false
argument_list|,
name|first
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|firstReturned
operator|||
name|super
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
if|if
condition|(
name|firstReturned
condition|)
block|{
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|currentName
operator|=
name|first
operator|.
name|getName
argument_list|()
expr_stmt|;
name|current
operator|=
name|first
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|firstReturned
operator|=
literal|true
expr_stmt|;
return|return
name|first
return|;
block|}
block|}
block|}
comment|/**      * iterable that starts at a provided position ({@code ChildNodeEntry})      */
specifier|private
specifier|static
class|class
name|SeekedIterable
extends|extends
name|FullIterable
block|{
name|ChildNodeEntry
name|first
decl_stmt|;
specifier|public
name|SeekedIterable
parameter_list|(
name|NodeState
name|index
parameter_list|,
name|ChildNodeEntry
name|first
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SeekedIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|)
return|;
block|}
block|}
comment|/**      * see {@link #seek(NodeState, Predicate<ChildNodeEntry>, ChildNodeEntry[])} passing null as      * last argument      */
name|String
name|seek
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
name|Predicate
argument_list|<
name|String
argument_list|>
name|condition
parameter_list|)
block|{
return|return
name|seek
argument_list|(
name|index
argument_list|,
name|condition
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
operator|new
name|LoggingDanglinLinkCallback
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * seek for an element in the index given the provided Predicate. If {@code walkedLanes} won't      * be null it will have on the way out the last elements of each lane walked through during the      * seek.      *       * @param index the index content node {@code :index}      * @param condition the predicate to evaluate      * @param walkedLanes if not null will contain the last element of the walked lanes with each      *            lane represented by the corresponding position in the array.<b>You have</b> to      *            pass in an array already sized as {@link OrderedIndex#LANES} or an      *            {@link IllegalArgumentException} will be raised      * @param retries the number of retries      * @return the entry or null if not found      */
name|String
name|seek
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|condition
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
index|[]
name|walkedLanes
parameter_list|,
name|int
name|retries
parameter_list|,
annotation|@
name|Nullable
name|DanglingLinkCallback
name|callback
parameter_list|)
block|{
name|boolean
name|keepWalked
init|=
literal|false
decl_stmt|;
name|String
name|searchfor
init|=
name|condition
operator|.
name|getSearchFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"seek() - Searching for: {}"
argument_list|,
name|condition
operator|.
name|getSearchFor
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"seek() - condition: {}"
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
name|Predicate
argument_list|<
name|String
argument_list|>
name|walkingPredicate
init|=
name|direction
operator|.
name|isAscending
argument_list|()
condition|?
operator|new
name|PredicateLessThan
argument_list|(
name|searchfor
argument_list|,
literal|true
argument_list|)
else|:
operator|new
name|PredicateGreaterThan
argument_list|(
name|searchfor
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// we always begin with :start
name|String
name|currentKey
init|=
name|START
decl_stmt|;
name|String
name|found
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|walkedLanes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|walkedLanes
operator|.
name|length
operator|!=
name|OrderedIndex
operator|.
name|LANES
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Wrong size for keeping track of the Walked Lanes. Expected %d but was %d"
argument_list|,
name|OrderedIndex
operator|.
name|LANES
argument_list|,
name|walkedLanes
operator|.
name|length
argument_list|)
argument_list|)
throw|;
block|}
comment|// ensuring the right data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|walkedLanes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|walkedLanes
index|[
name|i
index|]
operator|=
name|currentKey
expr_stmt|;
block|}
name|keepWalked
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|lane
decl_stmt|;
name|boolean
name|stillLaning
decl_stmt|;
name|String
name|nextkey
decl_stmt|;
if|if
condition|(
operator|(
name|direction
operator|.
name|isAscending
argument_list|()
operator|&&
name|condition
operator|instanceof
name|PredicateLessThan
operator|)
operator|||
operator|(
name|direction
operator|.
name|isDescending
argument_list|()
operator|&&
name|condition
operator|instanceof
name|PredicateGreaterThan
operator|)
condition|)
block|{
comment|// we're asking for a<,<= query from ascending index or>,>= from descending
comment|// we have to walk the lanes from bottom to up rather than up to bottom.
name|LOG
operator|.
name|debug
argument_list|(
literal|"seek() - cross case"
argument_list|)
expr_stmt|;
name|lane
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|stillLaning
operator|=
name|lane
operator|<
name|OrderedIndex
operator|.
name|LANES
expr_stmt|;
name|nextkey
operator|=
name|getPropertyNext
argument_list|(
name|index
operator|.
name|getChildNode
argument_list|(
name|currentKey
argument_list|)
argument_list|,
name|lane
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextkey
argument_list|)
operator|||
operator|!
name|walkingPredicate
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
operator|)
operator|&&
name|lane
operator|<
name|OrderedIndex
operator|.
name|LANES
condition|)
block|{
comment|// if we're currently pointing to NIL or the next element does not fit the search
comment|// but we still have lanes left
name|lane
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|condition
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
condition|)
block|{
comment|// this branch is used so far only for range queries.
comment|// while figuring out how to correctly reproduce the issue is less risky
comment|// to leave this untouched.
name|found
operator|=
name|nextkey
expr_stmt|;
block|}
else|else
block|{
name|currentKey
operator|=
name|nextkey
expr_stmt|;
if|if
condition|(
name|keepWalked
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|currentKey
argument_list|)
operator|&&
name|walkedLanes
operator|!=
literal|null
condition|)
block|{
name|walkedLanes
index|[
name|lane
index|]
operator|=
name|currentKey
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
operator|(
operator|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextkey
argument_list|)
operator|&&
name|walkingPredicate
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
operator|)
operator|||
name|stillLaning
operator|)
operator|&&
operator|(
name|found
operator|==
literal|null
operator|)
condition|)
do|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"seek() - plain case"
argument_list|)
expr_stmt|;
name|lane
operator|=
name|OrderedIndex
operator|.
name|LANES
operator|-
literal|1
expr_stmt|;
name|NodeBuilder
name|currentNode
init|=
literal|null
decl_stmt|;
name|int
name|iteration
init|=
literal|0
decl_stmt|;
name|boolean
name|exitCondition
init|=
literal|true
decl_stmt|;
do|do
block|{
name|iteration
operator|++
expr_stmt|;
name|stillLaning
operator|=
name|lane
operator|>
literal|0
expr_stmt|;
if|if
condition|(
name|currentNode
operator|==
literal|null
condition|)
block|{
name|currentNode
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
name|nextkey
operator|=
name|getPropertyNext
argument_list|(
name|currentNode
argument_list|,
name|lane
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextkey
argument_list|)
operator|||
operator|!
name|walkingPredicate
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
operator|)
operator|&&
name|lane
operator|>
literal|0
condition|)
block|{
comment|// if we're currently pointing to NIL or the next element does not fit the search
comment|// but we still have lanes left, let's lower the lane;
name|lane
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|condition
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
condition|)
block|{
if|if
condition|(
name|ensureAndCleanNode
argument_list|(
name|index
argument_list|,
name|nextkey
argument_list|,
name|currentKey
argument_list|,
name|lane
argument_list|,
name|callback
argument_list|)
condition|)
block|{
name|found
operator|=
name|nextkey
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|retries
operator|<
name|MAX_RETRIES
condition|)
block|{
return|return
name|seek
argument_list|(
name|index
argument_list|,
name|condition
argument_list|,
name|walkedLanes
argument_list|,
operator|++
name|retries
argument_list|,
name|callback
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempted a lookup and fix for {} times. Leaving it be and returning null"
argument_list|,
name|retries
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
else|else
block|{
name|currentKey
operator|=
name|nextkey
expr_stmt|;
name|currentNode
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|keepWalked
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|currentKey
argument_list|)
operator|&&
name|walkedLanes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|l
init|=
name|lane
init|;
name|l
operator|>=
literal|0
condition|;
name|l
operator|--
control|)
block|{
name|walkedLanes
index|[
name|l
index|]
operator|=
name|currentKey
expr_stmt|;
block|}
block|}
block|}
block|}
name|exitCondition
operator|=
operator|(
operator|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextkey
argument_list|)
operator|&&
name|walkingPredicate
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
operator|)
operator|||
name|stillLaning
operator|)
operator|&&
operator|(
name|found
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - --- iteration: {}"
argument_list|,
name|iteration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - retries: {},  MAX_RETRIES: {}"
argument_list|,
name|retries
argument_list|,
name|MAX_RETRIES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - lane: {}"
argument_list|,
name|lane
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - currentKey: {}"
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - nextkey: {}"
argument_list|,
name|nextkey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - condition.apply(nextkey): {}"
argument_list|,
name|condition
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - found: {}"
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - !Strings.isNullOrEmpty(nextkey): {}"
argument_list|,
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nextkey
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - walkingPredicate.apply(nextkey): {}"
argument_list|,
name|walkingPredicate
operator|.
name|apply
argument_list|(
name|nextkey
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - stillLaning: {}"
argument_list|,
name|stillLaning
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"seek()::plain case - While Condition: {}"
argument_list|,
name|exitCondition
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|exitCondition
condition|)
do|;
block|}
return|return
name|found
return|;
block|}
comment|/**      * ensure that the provided {@code next} actually exists as node. Attempt to clean it up      * otherwise.      *       * @param index the {@code :index} node      * @param next the {@code :next} retrieved for the provided lane      * @param current the current node from which {@code :next} has been retrieved      * @param lane the lane on which we're looking into      * @return true if the node exists, false otherwise      */
specifier|private
specifier|static
name|boolean
name|ensureAndCleanNode
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|index
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|next
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|current
parameter_list|,
specifier|final
name|int
name|lane
parameter_list|,
annotation|@
name|Nullable
name|DanglingLinkCallback
name|callback
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|lane
operator|<
name|LANES
operator|&&
name|lane
operator|>=
literal|0
argument_list|,
literal|"The lane must be between 0 and LANES"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|getChildNode
argument_list|(
name|next
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|perform
argument_list|(
name|current
argument_list|,
name|next
argument_list|,
name|lane
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**      * predicate for evaluating 'key' equality across index       */
specifier|static
class|class
name|PredicateEquals
implements|implements
name|Predicate
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|String
name|searchfor
decl_stmt|;
specifier|public
name|PredicateEquals
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
operator|.
name|searchfor
operator|=
name|searchfor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|arg0
argument_list|)
operator|&&
name|searchfor
operator|.
name|equals
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
return|return
name|searchfor
return|;
block|}
block|}
comment|/**      * evaluates when the current element is greater than (>) and greater than equal      * {@code searchfor}      */
specifier|static
class|class
name|PredicateGreaterThan
implements|implements
name|Predicate
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|String
name|searchforDecoded
decl_stmt|;
specifier|private
name|boolean
name|include
decl_stmt|;
specifier|public
name|PredicateGreaterThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
argument_list|(
name|searchfor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PredicateGreaterThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|,
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|searchforDecoded
operator|=
name|searchfor
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|arg0
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|arg0
decl_stmt|;
name|b
operator|=
name|searchforDecoded
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|include
operator|&&
name|searchforDecoded
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
return|return
name|searchforDecoded
return|;
block|}
block|}
comment|/**      * evaluates when the current element is less than (<) and less than equal {@code searchfor}      */
specifier|static
class|class
name|PredicateLessThan
implements|implements
name|Predicate
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|String
name|searchforOriginal
decl_stmt|;
specifier|private
name|boolean
name|include
decl_stmt|;
specifier|public
name|PredicateLessThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|)
block|{
name|this
argument_list|(
name|searchfor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PredicateLessThan
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchfor
parameter_list|,
name|boolean
name|include
parameter_list|)
block|{
name|this
operator|.
name|searchforOriginal
operator|=
name|searchfor
expr_stmt|;
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|arg0
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|arg0
decl_stmt|;
name|b
operator|=
name|searchforOriginal
operator|.
name|compareTo
argument_list|(
name|name
argument_list|)
operator|>
literal|0
operator|||
operator|(
name|include
operator|&&
name|searchforOriginal
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
return|return
name|searchforOriginal
return|;
block|}
block|}
comment|/**      * iterable for going through a set of data in the case of BETWEEN queries. We don't have to      * return more data for having the Query Engine to skip them later.      */
specifier|private
specifier|static
class|class
name|BetweenIterable
extends|extends
name|SeekedIterable
block|{
specifier|private
name|String
name|lastKey
decl_stmt|;
specifier|private
name|boolean
name|lastInclude
decl_stmt|;
specifier|private
name|OrderDirection
name|direction
decl_stmt|;
specifier|public
name|BetweenIterable
parameter_list|(
specifier|final
name|NodeState
name|index
parameter_list|,
specifier|final
name|ChildNodeEntry
name|first
parameter_list|,
specifier|final
name|String
name|lastKey
parameter_list|,
specifier|final
name|boolean
name|lastInclude
parameter_list|,
specifier|final
name|OrderDirection
name|direction
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastKey
operator|=
name|lastKey
expr_stmt|;
name|this
operator|.
name|lastInclude
operator|=
name|lastInclude
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|BetweenIterator
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|,
name|lastKey
argument_list|,
name|lastInclude
argument_list|,
name|direction
argument_list|)
return|;
block|}
block|}
comment|/**      * iterator for iterating in the cases of BETWEEN queries.      */
specifier|private
specifier|static
class|class
name|BetweenIterator
extends|extends
name|SeekedIterator
block|{
specifier|private
name|Predicate
argument_list|<
name|String
argument_list|>
name|condition
decl_stmt|;
comment|/**          * @param index the current index content {@code :index}          * @param start the {@code :start} node          * @param first the first valuable options for starting iterating from.          * @param lastKey the last key to be returned          * @param lastInclude whether including the last key or not.           */
specifier|public
name|BetweenIterator
parameter_list|(
specifier|final
name|NodeState
name|index
parameter_list|,
specifier|final
name|NodeState
name|start
parameter_list|,
specifier|final
name|ChildNodeEntry
name|first
parameter_list|,
specifier|final
name|String
name|lastKey
parameter_list|,
specifier|final
name|boolean
name|lastInclude
parameter_list|,
specifier|final
name|OrderDirection
name|direction
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|start
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|this
operator|.
name|condition
operator|=
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|String
name|v
init|=
name|lastKey
decl_stmt|;
specifier|private
name|boolean
name|i
init|=
name|lastInclude
decl_stmt|;
specifier|private
name|OrderDirection
name|d
init|=
name|direction
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
comment|// splitting in multiple lines for easier debugging
name|boolean
name|compareTo
decl_stmt|,
name|equals
decl_stmt|,
name|apply
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|OrderDirection
operator|.
name|ASC
argument_list|)
condition|)
block|{
name|compareTo
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|>
literal|0
expr_stmt|;
block|}
else|else
block|{
name|compareTo
operator|=
name|v
operator|.
name|compareTo
argument_list|(
name|input
argument_list|)
operator|<
literal|0
expr_stmt|;
block|}
name|equals
operator|=
name|v
operator|.
name|equals
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|apply
operator|=
name|compareTo
operator|||
operator|(
name|i
operator|&&
name|equals
operator|)
expr_stmt|;
return|return
name|apply
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSearchFor
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|hasNext
init|=
name|super
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getCurrentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|hasNext
condition|)
block|{
name|String
name|next
init|=
name|getPropertyNext
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|hasNext
operator|=
name|hasNext
operator|&&
name|condition
operator|.
name|apply
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|hasNext
return|;
block|}
block|}
comment|/**      * set the value of the the :next at position 0      *       * @param node the node to modify      * @param next the 'next' value      */
specifier|static
name|void
name|setPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|node
parameter_list|,
specifier|final
name|String
modifier|...
name|next
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|next
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|next
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|len
operator|>=
literal|0
condition|;
name|len
operator|--
control|)
block|{
if|if
condition|(
name|next
index|[
name|len
index|]
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|len
operator|++
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|next
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
name|NEXT
argument_list|,
name|list
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * set the value of the :next at the given position. If the property :next won't be there by the      * time this method is invoked it won't perform any action      *       * @param node      * @param value      * @param lane      */
specifier|public
specifier|static
name|void
name|setPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|node
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|int
name|lane
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
operator|&&
name|lane
operator|>=
literal|0
operator|&&
name|lane
operator|<
name|OrderedIndex
operator|.
name|LANES
condition|)
block|{
name|PropertyState
name|next
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|values
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|values
operator|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|next
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|<
name|OrderedIndex
operator|.
name|LANES
condition|)
block|{
comment|// it could be we increased the number of lanes and running on some existing
comment|// content
name|LOG
operator|.
name|debug
argument_list|(
literal|"topping-up the number of lanes."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vv
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|vv
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|OrderedIndex
operator|.
name|LANES
condition|;
name|i
operator|++
control|)
block|{
name|vv
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|values
operator|=
name|vv
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|vv
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|values
operator|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|EMPTY_NEXT
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|next
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|values
index|[
name|lane
index|]
operator|=
name|value
expr_stmt|;
name|setPropertyNext
argument_list|(
name|node
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * see {@link #getPropertyNext(NodeState, int)} by providing '0' as lane      */
specifier|static
name|String
name|getPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|getPropertyNext
argument_list|(
name|nodeState
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * return the 'next' value at the provided position      *       * @param nodeState the node state to inspect      * @return the next value      */
specifier|static
name|String
name|getPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|state
parameter_list|,
specifier|final
name|int
name|lane
parameter_list|)
block|{
return|return
name|getPropertyNext
argument_list|(
operator|new
name|ReadOnlyBuilder
argument_list|(
name|state
argument_list|)
argument_list|,
name|lane
argument_list|)
return|;
block|}
comment|/**      * short-cut for using NodeBuilder. See {@code getNext(NodeState)}      */
specifier|public
specifier|static
name|String
name|getPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|node
parameter_list|)
block|{
return|return
name|getPropertyNext
argument_list|(
name|node
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * short-cut for using NodeBuilder. See {@code getNext(NodeState)}      */
specifier|public
specifier|static
name|String
name|getPropertyNext
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|node
parameter_list|,
specifier|final
name|int
name|lane
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|next
init|=
literal|""
decl_stmt|;
name|PropertyState
name|ps
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|ps
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
operator|&&
name|count
operator|>
name|lane
condition|)
block|{
name|next
operator|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|lane
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|next
operator|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
return|;
block|}
comment|/**      * retrieve the lane to be updated based on probabilistic approach.      *       * Having 4 lanes if we have the 3 to be updated it means we'll have to update lanes      * 0,1,2 and 3. If we'll have 2 only 0,1,2 and so on.      *       * Lane 0 will always be updated as it's the base linked list.      *       * It uses {@code getLane(Random)} by passing a {@code new Random(System.currentTimeMillis())}      *       * @see OrderedIndex.DEFAULT_PROBABILITY      *       * @return the lane to start updating from.      */
specifier|public
name|int
name|getLane
parameter_list|()
block|{
return|return
name|getLane
argument_list|(
name|RND
argument_list|)
return|;
block|}
comment|/**      * used for mocking purposes or advanced uses. Use the {@code getLane()} where possible      *       * @param rnd the Random generator to be used for probability      * @return the lane to be updated.       */
specifier|protected
name|int
name|getLane
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Random
name|rnd
parameter_list|)
block|{
specifier|final
name|int
name|maxLanes
init|=
name|OrderedIndex
operator|.
name|LANES
operator|-
literal|1
decl_stmt|;
name|int
name|lane
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rnd
operator|.
name|nextDouble
argument_list|()
operator|<
name|OrderedIndex
operator|.
name|DEFAULT_PROBABILITY
operator|&&
name|lane
operator|<
name|maxLanes
condition|)
block|{
name|lane
operator|++
expr_stmt|;
block|}
return|return
name|lane
return|;
block|}
comment|/**      * implementors of this interface will deal with the dangling link cases along the list      * (OAK-2077)      */
interface|interface
name|DanglingLinkCallback
block|{
comment|/**          * perform the required operation on the provided {@code current} node for the {@code next}          * value on {@code lane}          *           * @param current the current node with the dangling link          * @param next the value pointing to the missing node          * @param lane the lane on which the link is on          */
name|void
name|perform
parameter_list|(
name|String
name|current
parameter_list|,
name|String
name|next
parameter_list|,
name|int
name|lane
parameter_list|)
function_decl|;
block|}
comment|/**      * implements a "Read-only" version for managing the dangling links which will simply track down      * in logs the presence of it      */
specifier|static
class|class
name|LoggingDanglinLinkCallback
implements|implements
name|DanglingLinkCallback
block|{
specifier|private
name|boolean
name|alreadyLogged
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|current
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|next
parameter_list|,
name|int
name|lane
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|lane
operator|<
name|LANES
operator|&&
name|lane
operator|>=
literal|0
argument_list|,
literal|"The lane must be between 0 and LANES"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alreadyLogged
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Dangling link to '{}' found on lane '{}' for key '{}'. Trying to clean it up. You may consider a reindex"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|next
block|,
name|lane
block|,
name|current
block|}
argument_list|)
expr_stmt|;
name|alreadyLogged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|FixingDanglingLinkCallback
extends|extends
name|LoggingDanglinLinkCallback
block|{
specifier|private
specifier|final
name|NodeBuilder
name|indexContent
decl_stmt|;
specifier|public
name|FixingDanglingLinkCallback
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|indexContent
parameter_list|)
block|{
name|this
operator|.
name|indexContent
operator|=
name|checkNotNull
argument_list|(
name|indexContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|String
name|current
parameter_list|,
name|String
name|next
parameter_list|,
name|int
name|lane
parameter_list|)
block|{
name|super
operator|.
name|perform
argument_list|(
name|current
argument_list|,
name|next
argument_list|,
name|lane
argument_list|)
expr_stmt|;
comment|// as we're already pointing to nowhere it's safe to truncate here and avoid
comment|// future errors. We'll fix all the lanes from slowest to fastest starting from the lane
comment|// with the error. This should keep the list a bit more consistent with what is
comment|// expected.
for|for
control|(
name|int
name|l
init|=
name|lane
init|;
name|l
operator|<
name|LANES
condition|;
name|l
operator|++
control|)
block|{
name|setPropertyNext
argument_list|(
name|indexContent
operator|.
name|getChildNode
argument_list|(
name|current
argument_list|)
argument_list|,
literal|""
argument_list|,
name|lane
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

