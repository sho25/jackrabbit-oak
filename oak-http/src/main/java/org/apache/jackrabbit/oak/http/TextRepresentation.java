begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_class
class|class
name|TextRepresentation
implements|implements
name|Representation
block|{
annotation|@
name|Override
specifier|public
name|MediaType
name|getType
parameter_list|()
block|{
return|return
name|MediaType
operator|.
name|TEXT_PLAIN
return|;
block|}
specifier|public
name|void
name|render
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|writer
init|=
name|startResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|tree
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|CoreValue
name|value
range|:
name|property
operator|.
name|getValues
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|print
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|tree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|response
operator|.
name|encodeRedirectURL
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|render
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|writer
init|=
name|startResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|CoreValue
name|value
range|:
name|property
operator|.
name|getValues
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|print
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PrintWriter
name|startResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getWriter
argument_list|()
return|;
block|}
block|}
end_class

end_unit

