begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLClientInfoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Savepoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_class
specifier|public
class|class
name|RDBConnectionWrapper
implements|implements
name|Connection
block|{
specifier|private
specifier|final
name|RDBDataSourceWrapper
name|datasource
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|long
name|constart
decl_stmt|;
specifier|public
name|RDBConnectionWrapper
parameter_list|(
name|RDBDataSourceWrapper
name|datasource
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|datasource
operator|=
name|datasource
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|constart
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
comment|// needed in Java 7...
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|abort
parameter_list|(
name|Executor
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|SQLException
name|x
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|x
operator|=
name|ex
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|List
argument_list|<
name|RDBLogEntry
argument_list|>
name|l
init|=
name|datasource
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"connection.close() after "
operator|+
operator|(
operator|(
name|start
operator|-
name|constart
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"us"
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
operator|new
name|RDBLogEntry
argument_list|(
name|start
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|SQLException
name|x
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|x
operator|=
name|ex
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|List
argument_list|<
name|RDBLogEntry
argument_list|>
name|l
init|=
name|datasource
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"connection.commit()"
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
operator|new
name|RDBLogEntry
argument_list|(
name|start
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Array
name|createArrayOf
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
index|[]
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createArrayOf
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|Blob
name|createBlob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createBlob
argument_list|()
return|;
block|}
specifier|public
name|Clob
name|createClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createClob
argument_list|()
return|;
block|}
specifier|public
name|NClob
name|createNClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createNClob
argument_list|()
return|;
block|}
specifier|public
name|SQLXML
name|createSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createSQLXML
argument_list|()
return|;
block|}
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createStatement
argument_list|()
return|;
block|}
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|Struct
name|createStruct
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
index|[]
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|createStruct
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getAutoCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getAutoCommit
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCatalog
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getCatalog
argument_list|()
return|;
block|}
specifier|public
name|Properties
name|getClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getClientInfo
argument_list|()
return|;
block|}
specifier|public
name|String
name|getClientInfo
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getClientInfo
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getHoldability
argument_list|()
return|;
block|}
specifier|public
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getMetaData
argument_list|()
return|;
block|}
comment|// needed in Java 7...
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|int
name|getNetworkTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
comment|// needed in Java 7...
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
operator|(
name|String
operator|)
name|connection
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getSchema"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
comment|// best effort otherwise
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// best effort otherwise
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|int
name|getTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getTransactionIsolation
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTypeMap
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getTypeMap
argument_list|()
return|;
block|}
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|getWarnings
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|isClosed
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|isValid
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|isWrapperFor
argument_list|(
name|iface
argument_list|)
return|;
block|}
specifier|public
name|String
name|nativeSQL
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|nativeSQL
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|,
name|int
name|arg3
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
return|;
block|}
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|,
name|int
name|arg3
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|arg0
parameter_list|,
name|int
index|[]
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
index|[]
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
return|;
block|}
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|SQLException
name|x
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
return|return
operator|new
name|RDBPreparedStatementWrapper
argument_list|(
name|datasource
argument_list|,
name|statement
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|x
operator|=
name|ex
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|List
argument_list|<
name|RDBLogEntry
argument_list|>
name|l
init|=
name|datasource
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"connection.prepareStatement(\""
operator|+
name|sql
operator|+
literal|"\")"
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
operator|new
name|RDBLogEntry
argument_list|(
name|start
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|releaseSavepoint
parameter_list|(
name|Savepoint
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|releaseSavepoint
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|SQLException
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|SQLException
name|x
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|x
operator|=
name|ex
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|List
argument_list|<
name|RDBLogEntry
argument_list|>
name|l
init|=
name|datasource
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"connection.rollback()"
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
operator|new
name|RDBLogEntry
argument_list|(
name|start
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollback
parameter_list|(
name|Savepoint
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|rollback
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setCatalog
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|Properties
name|arg0
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|connection
operator|.
name|setClientInfo
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|connection
operator|.
name|setClientInfo
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHoldability
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setHoldability
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
comment|// needed in Java 7...
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|setNetworkTimeout
parameter_list|(
name|Executor
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setReadOnly
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|setSavepoint
argument_list|()
return|;
block|}
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|setSavepoint
argument_list|(
name|arg0
argument_list|)
return|;
block|}
comment|// needed in Java 7...
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setTransactionIsolation
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|arg0
parameter_list|)
throws|throws
name|SQLException
block|{
name|connection
operator|.
name|setTypeMap
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|connection
operator|.
name|unwrap
argument_list|(
name|iface
argument_list|)
return|;
block|}
block|}
end_class

end_unit

