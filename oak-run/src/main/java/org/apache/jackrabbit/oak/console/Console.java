begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|tools
operator|.
name|shell
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_comment
comment|/**  * A command line console.  */
end_comment

begin_class
specifier|public
class|class
name|Console
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
name|quiet
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"quiet"
argument_list|,
literal|"be less chatty"
argument_list|)
decl_stmt|;
name|OptionSpec
name|shell
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"shell"
argument_list|,
literal|"run the shell after executing files"
argument_list|)
decl_stmt|;
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|opts
operator|.
name|parseAndConfigure
argument_list|(
name|parser
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|isHelpRequested
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nonOptions
init|=
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|getNonOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|NodeStoreFixture
name|fixture
init|=
name|NodeStoreFixtureProvider
operator|.
name|create
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|scriptArgs
init|=
name|nonOptions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|getNonOptions
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|nonOptions
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
decl_stmt|;
name|IO
name|io
init|=
operator|new
name|IO
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|quiet
argument_list|)
condition|)
block|{
name|io
operator|.
name|setVerbosity
argument_list|(
name|IO
operator|.
name|Verbosity
operator|.
name|QUIET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|isReadWrite
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Repository connected in read-only mode. Use '--read-write' for write operations"
argument_list|)
expr_stmt|;
block|}
name|GroovyConsole
name|console
init|=
operator|new
name|GroovyConsole
argument_list|(
name|ConsoleSession
operator|.
name|create
argument_list|(
name|fixture
operator|.
name|getStore
argument_list|()
argument_list|)
argument_list|,
operator|new
name|IO
argument_list|()
argument_list|,
name|fixture
argument_list|)
decl_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scriptArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|code
operator|=
name|console
operator|.
name|execute
argument_list|(
name|scriptArgs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptArgs
operator|.
name|isEmpty
argument_list|()
operator|||
name|options
operator|.
name|has
argument_list|(
name|shell
argument_list|)
condition|)
block|{
name|code
operator|=
name|console
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

