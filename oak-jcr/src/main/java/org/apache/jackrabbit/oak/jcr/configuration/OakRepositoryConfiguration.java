begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|text
operator|.
name|MessageFormat
operator|.
name|format
import|;
end_import

begin_class
specifier|public
class|class
name|OakRepositoryConfiguration
implements|implements
name|RepositoryConfiguration
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|private
specifier|final
name|String
name|microkernelUrl
decl_stmt|;
specifier|private
name|OakRepositoryConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|parameters
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|microkernelUrl
operator|=
name|getParameterMap
argument_list|()
operator|.
name|get
argument_list|(
name|MICROKERNEL_URL
argument_list|)
expr_stmt|;
if|if
condition|(
name|microkernelUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|format
argument_list|(
literal|"Missing configuration value for {0}"
argument_list|,
name|MICROKERNEL_URL
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RepositoryConfiguration
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|OakRepositoryConfiguration
argument_list|(
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameterMap
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMicrokernelUrl
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|microkernelUrl
return|;
block|}
block|}
end_class

end_unit

