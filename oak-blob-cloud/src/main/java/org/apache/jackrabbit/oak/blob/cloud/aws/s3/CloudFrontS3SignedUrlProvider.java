begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|cloudfront
operator|.
name|CloudFrontUrlSigner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|conversion
operator|.
name|URIProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|OakValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SignatureException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|KeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Adapts from Value to URI where Value has a Binary value.  * If running as an OSGi Component would expect an OSGi AdapterManager to pick it up.  * other.  *  * To generate keys in PKCS8 format use OpenSSL  * openssl genrsa -out private_key.pem 1024  * openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in private_key.pem -out private_key.pkcs8  * See http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-creating-cloudfront-key-pairs for  * details on how to configure CloudFront.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
argument_list|(
name|URIProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CloudFrontS3SignedUrlProvider
implements|implements
name|URIProvider
block|{
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"The cloud front URL, including a trailing slash. Normally this is the http://<coudfrontdomain>/"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CLOUD_FRONT_URL
init|=
literal|"cloudFrontUrl"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|60
argument_list|,
name|description
operator|=
literal|"Time each signed url is valid for before it expires, in seconds."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TTL
init|=
literal|"ttl"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|100
argument_list|,
name|description
operator|=
literal|"Minimum size over which a binary is redirected, in kb."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MIN_SIZE
init|=
literal|"minSize"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"Path to the PKCS8 formatted private key file, probably an absolute path."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PRIVATE_KEY_FILE
init|=
literal|"privateKeyFile"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|description
operator|=
literal|"The keypair ID generated by AWS Console when the public key was generated or uploaded."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PAIR_ID
init|=
literal|"keyPairId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BEGIN_PRIVATE_KEY
init|=
literal|"-----BEGIN PRIVATE KEY-----"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|END_PRIVATE_KEY
init|=
literal|"-----END PRIVATE KEY-----"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CloudFrontS3SignedUrlProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|cloudFrontUrl
decl_stmt|;
specifier|private
name|long
name|ttl
decl_stmt|;
specifier|private
name|String
name|keyPairId
decl_stmt|;
specifier|private
name|RSAPrivateKey
name|privateKey
decl_stmt|;
specifier|private
name|long
name|minimumSize
decl_stmt|;
comment|/**      * Default Constructor used by OSGi.      */
specifier|public
name|CloudFrontS3SignedUrlProvider
parameter_list|()
block|{     }
comment|/**      * Non OSGi IoC constructor, close must be called when done.      * @param cloudFrontUrl      * @param ttl      * @param privateKeyPEM      * @param privateKeyId      * @throws InvalidKeySpecException      * @throws NoSuchAlgorithmException      */
specifier|public
name|CloudFrontS3SignedUrlProvider
parameter_list|(
name|String
name|cloudFrontUrl
parameter_list|,
name|long
name|ttl
parameter_list|,
name|long
name|minSize
parameter_list|,
name|String
name|privateKeyPEM
parameter_list|,
name|String
name|privateKeyId
parameter_list|)
throws|throws
name|InvalidKeySpecException
throws|,
name|NoSuchAlgorithmException
block|{
name|init
argument_list|(
name|cloudFrontUrl
argument_list|,
name|ttl
argument_list|,
name|minSize
argument_list|,
name|privateKeyPEM
argument_list|,
name|privateKeyId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|deactivate
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{     }
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|InvalidKeySpecException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Property {}: {} "
argument_list|,
name|CLOUD_FRONT_URL
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|CLOUD_FRONT_URL
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Property {}: {} "
argument_list|,
name|TTL
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|TTL
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Property {}: {} "
argument_list|,
name|PRIVATE_KEY_FILE
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|PRIVATE_KEY_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Property {}: {} "
argument_list|,
name|KEY_PAIR_ID
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|KEY_PAIR_ID
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Property {}: {} "
argument_list|,
name|MIN_SIZE
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|MIN_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|CLOUD_FRONT_URL
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|properties
operator|.
name|get
argument_list|(
name|TTL
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|properties
operator|.
name|get
argument_list|(
name|MIN_SIZE
argument_list|)
argument_list|,
name|loadPrivateKey
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|PRIVATE_KEY_FILE
argument_list|)
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|KEY_PAIR_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|loadPrivateKey
parameter_list|(
name|String
name|keyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileReader
name|fr
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|key
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|fr
operator|=
operator|new
name|FileReader
argument_list|(
name|keyFile
argument_list|)
expr_stmt|;
name|char
index|[]
name|b
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|i
init|=
name|fr
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|key
operator|.
name|append
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|fr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|cloudFrontUrl
parameter_list|,
name|long
name|ttl
parameter_list|,
name|long
name|minSize
parameter_list|,
name|String
name|privateKeyPEM
parameter_list|,
name|String
name|privateKeyId
parameter_list|)
throws|throws
name|InvalidKeySpecException
throws|,
name|NoSuchAlgorithmException
block|{
name|this
operator|.
name|cloudFrontUrl
operator|=
name|cloudFrontUrl
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
name|this
operator|.
name|minimumSize
operator|=
name|minSize
operator|*
literal|1024
expr_stmt|;
name|this
operator|.
name|privateKey
operator|=
name|getPrivateKey
argument_list|(
name|privateKeyPEM
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyPairId
operator|=
name|privateKeyId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|toURI
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
comment|// The conversion is javax.jcr.Value -> URI, but for Oak all Values are OakValues and we can only do it for Values.
if|if
condition|(
name|value
operator|instanceof
name|OakValue
condition|)
block|{
try|try
block|{
name|Blob
name|b
init|=
operator|(
operator|(
name|OakValue
operator|)
name|value
operator|)
operator|.
name|getBlob
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|>
name|minimumSize
condition|)
block|{
name|String
name|contentId
init|=
name|b
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentId
operator|!=
literal|null
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|signS3Url
argument_list|(
name|contentId
argument_list|,
name|ttl
argument_list|,
name|cloudFrontUrl
argument_list|,
name|keyPairId
argument_list|,
name|privateKey
argument_list|)
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generated URI {} "
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|uri
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to get or sign content identity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Convert the content identity to a S3 url, see the {@link org.apache.jackrabbit.oak.blob.cloud.s3.S3Backend} class.      * @param contentIdentity      * @return      */
annotation|@
name|Nonnull
specifier|private
name|String
name|getS3Key
parameter_list|(
annotation|@
name|Nonnull
name|String
name|contentIdentity
parameter_list|)
block|{
return|return
name|contentIdentity
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|contentIdentity
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|String
name|signS3Url
parameter_list|(
annotation|@
name|Nonnull
name|String
name|contentIdentity
parameter_list|,
name|long
name|ttl
parameter_list|,
annotation|@
name|Nonnull
name|String
name|cloudFrontUrl
parameter_list|,
annotation|@
name|Nonnull
name|String
name|keyPairId
parameter_list|,
annotation|@
name|Nonnull
name|RSAPrivateKey
name|privateKey
parameter_list|)
throws|throws
name|InvalidKeySpecException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeyException
throws|,
name|SignatureException
throws|,
name|UnsupportedEncodingException
block|{
name|long
name|expiry
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
operator|)
operator|+
name|ttl
decl_stmt|;
name|StringBuilder
name|urlToSign
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|urlToSign
operator|.
name|append
argument_list|(
name|cloudFrontUrl
argument_list|)
operator|.
name|append
argument_list|(
name|getS3Key
argument_list|(
name|contentIdentity
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CloudFrontUrlSigner
operator|.
name|getSignedURLWithCannedPolicy
argument_list|(
name|urlToSign
operator|.
name|toString
argument_list|()
argument_list|,
name|keyPairId
argument_list|,
name|privateKey
argument_list|,
operator|new
name|Date
argument_list|(
name|expiry
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RSAPrivateKey
name|getPrivateKey
parameter_list|(
name|String
name|privateKeyPKCS8
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|int
name|is
init|=
name|privateKeyPKCS8
operator|.
name|indexOf
argument_list|(
name|BEGIN_PRIVATE_KEY
argument_list|)
decl_stmt|;
name|int
name|ie
init|=
name|privateKeyPKCS8
operator|.
name|indexOf
argument_list|(
name|END_PRIVATE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|ie
operator|<
literal|0
operator|||
name|is
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Private Key is not correctly encoded, need a PEM encoded key with "
operator|+
literal|"-----BEGIN PRIVATE KEY----- headers to indicate PKCS8 encoding."
argument_list|)
throw|;
block|}
name|privateKeyPKCS8
operator|=
name|privateKeyPKCS8
operator|.
name|substring
argument_list|(
name|is
operator|+
name|BEGIN_PRIVATE_KEY
operator|.
name|length
argument_list|()
argument_list|,
name|ie
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|byte
index|[]
name|privateKeyBytes
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|privateKeyPKCS8
argument_list|)
decl_stmt|;
comment|// load the private key
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|ks
init|=
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|privateKeyBytes
argument_list|)
decl_stmt|;
return|return
operator|(
name|RSAPrivateKey
operator|)
name|keyFactory
operator|.
name|generatePrivate
argument_list|(
name|ks
argument_list|)
return|;
block|}
block|}
end_class

end_unit

