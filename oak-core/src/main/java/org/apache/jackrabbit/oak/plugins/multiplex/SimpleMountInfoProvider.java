begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|multiplex
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_comment
comment|/**  * A simple and inefficient implementation to manage mountpoints  */
end_comment

begin_class
specifier|public
class|class
name|SimpleMountInfoProvider
implements|implements
name|MountInfoProvider
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|MountInfo
argument_list|>
name|mountInfos
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Mount
argument_list|>
name|mounts
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hasMounts
decl_stmt|;
specifier|public
name|SimpleMountInfoProvider
parameter_list|(
name|List
argument_list|<
name|MountInfo
argument_list|>
name|mountInfos
parameter_list|)
block|{
name|this
operator|.
name|mountInfos
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mountInfos
argument_list|)
expr_stmt|;
name|this
operator|.
name|mounts
operator|=
name|getMounts
argument_list|(
name|mountInfos
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasMounts
operator|=
operator|!
name|mountInfos
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|//TODO add validation of mountpoints
block|}
annotation|@
name|Override
specifier|public
name|Mount
name|getMountByPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|MountInfo
name|md
range|:
name|mountInfos
control|)
block|{
if|if
condition|(
name|md
operator|.
name|isMounted
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|md
operator|.
name|getMount
argument_list|()
return|;
block|}
block|}
return|return
name|Mount
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Mount
argument_list|>
name|getNonDefaultMounts
parameter_list|()
block|{
return|return
name|mounts
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Mount
name|getMountByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|mounts
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNonDefaultMounts
parameter_list|()
block|{
return|return
name|hasMounts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Mount
argument_list|>
name|getMountsContainedBetweenPaths
parameter_list|(
name|String
name|fromPath
parameter_list|,
name|String
name|toPath
parameter_list|)
block|{
name|List
argument_list|<
name|Mount
argument_list|>
name|matching
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MountInfo
argument_list|>
name|allMountInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|allMountInfos
operator|.
name|add
argument_list|(
operator|new
name|MountInfo
argument_list|(
name|Mount
operator|.
name|DEFAULT
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allMountInfos
operator|.
name|addAll
argument_list|(
name|mountInfos
argument_list|)
expr_stmt|;
name|boolean
name|hasUncertainPaths
init|=
name|fromPath
operator|==
literal|null
operator|||
name|toPath
operator|==
literal|null
decl_stmt|;
for|for
control|(
name|MountInfo
name|mountInfo
range|:
name|allMountInfos
control|)
block|{
if|if
condition|(
operator|!
name|hasUncertainPaths
operator|&&
name|mountInfo
operator|.
name|isWrapped
argument_list|(
name|fromPath
argument_list|,
name|toPath
argument_list|)
condition|)
block|{
name|matching
operator|.
name|add
argument_list|(
name|mountInfo
operator|.
name|getMount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matching
return|;
block|}
comment|//~----------------------------------------< builder>
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|MountInfo
argument_list|>
name|mounts
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|Builder
name|mount
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|mounts
operator|.
name|add
argument_list|(
operator|new
name|MountInfo
argument_list|(
operator|new
name|Mount
argument_list|(
name|name
argument_list|)
argument_list|,
name|asList
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|readOnlyMount
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|mounts
operator|.
name|add
argument_list|(
operator|new
name|MountInfo
argument_list|(
operator|new
name|Mount
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|,
name|asList
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SimpleMountInfoProvider
name|build
parameter_list|()
block|{
return|return
operator|new
name|SimpleMountInfoProvider
argument_list|(
name|mounts
argument_list|)
return|;
block|}
block|}
comment|//~----------------------------------------< private>
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Mount
argument_list|>
name|getMounts
parameter_list|(
name|List
argument_list|<
name|MountInfo
argument_list|>
name|mountInfos
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Mount
argument_list|>
name|mounts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|MountInfo
name|mi
range|:
name|mountInfos
control|)
block|{
name|mounts
operator|.
name|put
argument_list|(
name|mi
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mi
operator|.
name|getMount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|mounts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

