begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PREDECESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|MIX_REP_VERSIONABLE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|VersionCopyTestUtils
operator|.
name|createLabeledVersions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|VersionCopyTestUtils
operator|.
name|getOrAddNodeWithMixins
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|repository
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|VersionCopyTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
operator|.
name|VersionCopyTestUtils
operator|.
name|VersionCopySetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionCopyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CopyVersionHistoryTest
extends|extends
name|AbstractRepositoryUpgradeTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONABLES_PATH_PREFIX
init|=
literal|"/versionables/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONABLES_OLD
init|=
literal|"old"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONABLES_OLD_ORPHANED
init|=
literal|"oldOrphaned"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONABLES_YOUNG
init|=
literal|"young"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONABLES_YOUNG_ORPHANED
init|=
literal|"youngOrphaned"
decl_stmt|;
specifier|protected
name|RepositoryImpl
name|repository
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Calendar
name|betweenHistories
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathToVersionHistory
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**      * Home directory of source repository.      */
specifier|private
specifier|static
name|File
name|source
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|MIXINS
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createSourceContent
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|hasSimpleVersioningSupport
argument_list|(
name|session
operator|.
name|getRepository
argument_list|()
argument_list|)
condition|)
block|{
name|MIXINS
operator|=
operator|new
name|String
index|[]
block|{
literal|"mix:simpleVersionable"
block|,
name|MIX_VERSIONABLE
block|}
expr_stmt|;
block|}
else|else
block|{
name|MIXINS
operator|=
operator|new
name|String
index|[]
block|{
name|MIX_VERSIONABLE
block|}
expr_stmt|;
block|}
specifier|final
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|mixinType
range|:
name|MIXINS
control|)
block|{
specifier|final
name|Node
name|parent
init|=
name|VersionCopyTestUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
name|rel
argument_list|(
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixinType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|oldNode
init|=
name|getOrAddNodeWithMixins
argument_list|(
name|parent
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|mixinType
argument_list|)
decl_stmt|;
name|pathToVersionHistory
operator|.
name|put
argument_list|(
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|createLabeledVersions
argument_list|(
name|oldNode
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|oldOrphanNode
init|=
name|getOrAddNodeWithMixins
argument_list|(
name|parent
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|mixinType
argument_list|)
decl_stmt|;
name|pathToVersionHistory
operator|.
name|put
argument_list|(
name|oldOrphanNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|createLabeledVersions
argument_list|(
name|oldOrphanNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|betweenHistories
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|mixinType
range|:
name|MIXINS
control|)
block|{
specifier|final
name|Node
name|parent
init|=
name|VersionCopyTestUtils
operator|.
name|getOrAddNode
argument_list|(
name|root
argument_list|,
name|rel
argument_list|(
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixinType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|youngNode
init|=
name|getOrAddNodeWithMixins
argument_list|(
name|parent
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|mixinType
argument_list|)
decl_stmt|;
name|pathToVersionHistory
operator|.
name|put
argument_list|(
name|youngNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|createLabeledVersions
argument_list|(
name|youngNode
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|youngOrphanNode
init|=
name|getOrAddNodeWithMixins
argument_list|(
name|parent
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|,
name|mixinType
argument_list|)
decl_stmt|;
name|pathToVersionHistory
operator|.
name|put
argument_list|(
name|youngOrphanNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|createLabeledVersions
argument_list|(
name|youngOrphanNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// create orphaned version histories by deleting the original nodes
name|parent
operator|.
name|getNode
argument_list|(
name|VERSIONABLES_OLD_ORPHANED
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|parent
operator|.
name|getNode
argument_list|(
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasSimpleVersioningSupport
parameter_list|(
specifier|final
name|Repository
name|repository
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|repository
operator|.
name|getDescriptor
argument_list|(
name|Repository
operator|.
name|OPTION_SIMPLE_VERSIONING_SUPPORTED
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doUpgradeRepository
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// abuse this method to capture the source repo directory
name|CopyVersionHistoryTest
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
block|{
name|CopyVersionHistoryTest
operator|.
name|pathToVersionHistory
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CopyVersionHistoryTest
operator|.
name|source
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyAllVersions
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
comment|// copying all versions is enabled by default
block|}
block|}
argument_list|)
decl_stmt|;
name|assertVersionableProperties
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertExistingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertVersionsCanBeRestored
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|referencedSinceDate
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyVersions
argument_list|(
name|betweenHistories
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertVersionableProperties
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertExistingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionsCanBeRestored
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|referencedOlderThanOrphaned
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyOrphanedVersions
argument_list|(
name|betweenHistories
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertVersionableProperties
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertExistingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionsCanBeRestored
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyReferenced
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyOrphanedVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertVersionableProperties
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertExistingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
empty_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionsCanBeRestored
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyReferencedAfterDate
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyVersions
argument_list|(
name|betweenHistories
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCopyOrphanedVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertVersionableProperties
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertExistingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertVersionsCanBeRestored
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overrideOrphaned
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCopyOrphanedVersions
argument_list|(
name|betweenHistories
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dontCopyVersionHistory
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Session
name|session
init|=
name|performCopy
argument_list|(
operator|new
name|VersionCopySetup
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setCopyVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCopyOrphanedVersions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertMissingHistories
argument_list|(
name|session
argument_list|,
name|VERSIONABLES_OLD
argument_list|,
name|VERSIONABLES_OLD_ORPHANED
argument_list|,
name|VERSIONABLES_YOUNG
argument_list|,
name|VERSIONABLES_YOUNG_ORPHANED
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
literal|"/jcr:system/jcr:versionStorage"
argument_list|)
operator|.
name|getPrimaryNodeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Session
name|performCopy
parameter_list|(
name|VersionCopySetup
name|setup
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
specifier|final
name|RepositoryConfig
name|sourceConfig
init|=
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryContext
name|sourceContext
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|sourceConfig
argument_list|)
decl_stmt|;
specifier|final
name|NodeStore
name|targetNodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|RepositoryUpgrade
name|upgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|sourceContext
argument_list|,
name|targetNodeStore
argument_list|)
decl_stmt|;
name|setup
operator|.
name|setup
argument_list|(
name|upgrade
operator|.
name|versionCopyConfiguration
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|setEarlyShutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|upgrade
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sourceContext
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|repository
operator|=
operator|(
name|RepositoryImpl
operator|)
operator|new
name|Jcr
argument_list|(
operator|new
name|Oak
argument_list|(
name|targetNodeStore
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|repository
operator|.
name|login
argument_list|(
name|AbstractRepositoryUpgradeTest
operator|.
name|CREDENTIALS
argument_list|)
decl_stmt|;
name|sessions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|closeRepository
parameter_list|()
block|{
for|for
control|(
name|Session
name|s
range|:
name|sessions
control|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|sessions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|repository
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|rel
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
specifier|private
specifier|static
name|VersionHistory
name|getVersionHistoryForPath
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasNode
argument_list|(
name|rel
argument_list|(
name|pathToVersionHistory
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|(
name|VersionHistory
operator|)
name|session
operator|.
name|getNode
argument_list|(
name|pathToVersionHistory
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|assertVersionableProperties
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|VersionManager
name|vMgr
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|mixin
range|:
name|MIXINS
control|)
block|{
specifier|final
name|String
name|pathPrefix
init|=
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixin
operator|+
literal|"/"
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|String
name|path
init|=
name|pathPrefix
operator|+
name|name
decl_stmt|;
name|Node
name|versionable
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|versionHistoryUuid
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|getVersionHistoryForPath
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|versionHistoryUuid
argument_list|)
expr_stmt|;
specifier|final
name|Version
name|baseVersion
init|=
name|vMgr
operator|.
name|getBaseVersion
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.2"
argument_list|,
name|baseVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Value
index|[]
name|predecessors
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predecessors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseVersion
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|predecessors
index|[
literal|0
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertExistingHistories
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
specifier|final
name|String
name|mixin
range|:
name|MIXINS
control|)
block|{
specifier|final
name|String
name|pathPrefix
init|=
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixin
operator|+
literal|"/"
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|String
name|path
init|=
name|pathPrefix
operator|+
name|name
decl_stmt|;
specifier|final
name|VersionHistory
name|history
init|=
name|getVersionHistoryForPath
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No history found for "
operator|+
name|path
argument_list|,
name|history
argument_list|)
expr_stmt|;
name|VersionCopyTestUtils
operator|.
name|assertLabeledVersions
argument_list|(
name|history
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertMissingHistories
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
specifier|final
name|String
name|mixin
range|:
name|MIXINS
control|)
block|{
specifier|final
name|String
name|pathPrefix
init|=
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixin
operator|+
literal|"/"
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|String
name|path
init|=
name|pathPrefix
operator|+
name|name
decl_stmt|;
specifier|final
name|VersionHistory
name|history
init|=
name|getVersionHistoryForPath
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Should not have found history for "
operator|+
name|path
argument_list|,
name|history
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertVersionablePaths
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
specifier|final
name|String
name|mixin
range|:
name|MIXINS
control|)
block|{
specifier|final
name|String
name|pathPrefix
init|=
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixin
operator|+
literal|"/"
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|String
name|path
init|=
name|pathPrefix
operator|+
name|name
decl_stmt|;
specifier|final
name|Node
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" should have mix:versionable mixin"
argument_list|,
name|node
operator|.
name|isNodeType
argument_list|(
name|MIX_VERSIONABLE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|VersionHistory
name|history
init|=
name|getVersionHistoryForPath
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertVersionablePath
argument_list|(
name|history
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertVersionablePath
parameter_list|(
specifier|final
name|VersionHistory
name|history
parameter_list|,
specifier|final
name|String
name|versionablePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|workspaceName
init|=
name|history
operator|.
name|getSession
argument_list|()
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|isNodeType
argument_list|(
name|MIX_REP_VERSIONABLE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|hasProperty
argument_list|(
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Property
name|pathProperty
init|=
name|history
operator|.
name|getProperty
argument_list|(
name|workspaceName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|PATH
argument_list|,
name|pathProperty
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionablePath
argument_list|,
name|pathProperty
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertVersionsCanBeRestored
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|VersionManager
name|vMgr
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|mixin
range|:
name|MIXINS
control|)
block|{
specifier|final
name|String
name|pathPrefix
init|=
name|VERSIONABLES_PATH_PREFIX
operator|+
name|mixin
operator|+
literal|"/"
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|String
name|path
init|=
name|pathPrefix
operator|+
name|name
decl_stmt|;
name|VersionHistory
name|history
init|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.2"
argument_list|,
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|vMgr
operator|.
name|restore
argument_list|(
name|history
operator|.
name|getVersion
argument_list|(
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|versionable
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|versionable
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
comment|// restored node should have correct properties
name|String
name|versionHistoryUuid
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|history
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|versionHistoryUuid
argument_list|)
expr_stmt|;
specifier|final
name|Version
name|baseVersion
init|=
name|vMgr
operator|.
name|getBaseVersion
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|baseVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Value
index|[]
name|predecessors
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|predecessors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vMgr
operator|.
name|isCheckedOut
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// after restoring, the paths should be still versionable
name|assertVersionablePaths
argument_list|(
name|session
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

