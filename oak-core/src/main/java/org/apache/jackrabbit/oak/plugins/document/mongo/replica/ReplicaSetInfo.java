begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|isEmpty
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|filterKeys
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|union
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|isGreaterOrEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|BasicBSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ReadPreference
import|;
end_import

begin_comment
comment|/**  * This class analyses the replica set info provided by MongoDB to find out two  * what's the current synchronization state of secondary instances in terms of  * revision values and timestamp.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicaSetInfo
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicaSetInfo
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DB
name|adminDb
decl_stmt|;
specifier|private
specifier|final
name|long
name|pullFrequencyMillis
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxReplicationLagMillis
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|NodeCollectionProvider
name|nodeCollections
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|Object
name|stopMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ReplicaSetInfoListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ReplicaSetInfoListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|RevisionVector
name|rootRevisions
decl_stmt|;
specifier|volatile
name|long
name|secondariesSafeTimestamp
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hiddenMembers
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stop
decl_stmt|;
specifier|public
name|ReplicaSetInfo
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|DB
name|db
parameter_list|,
name|String
name|originalMongoUri
parameter_list|,
name|long
name|pullFrequencyMillis
parameter_list|,
name|long
name|maxReplicationLagMillis
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|adminDb
operator|=
name|db
operator|.
name|getSisterDB
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pullFrequencyMillis
operator|=
name|pullFrequencyMillis
expr_stmt|;
name|this
operator|.
name|maxReplicationLagMillis
operator|=
name|maxReplicationLagMillis
expr_stmt|;
name|this
operator|.
name|nodeCollections
operator|=
operator|new
name|NodeCollectionProvider
argument_list|(
name|originalMongoUri
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addListener
parameter_list|(
name|ReplicaSetInfoListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMoreRecentThan
parameter_list|(
name|RevisionVector
name|revisions
parameter_list|)
block|{
name|RevisionVector
name|localRootRevisions
init|=
name|rootRevisions
decl_stmt|;
if|if
condition|(
name|localRootRevisions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|isGreaterOrEquals
argument_list|(
name|localRootRevisions
argument_list|,
name|revisions
argument_list|)
return|;
block|}
block|}
specifier|public
name|long
name|getLag
parameter_list|()
block|{
name|long
name|localTS
init|=
name|secondariesSafeTimestamp
decl_stmt|;
if|if
condition|(
name|localTS
operator|==
literal|0
condition|)
block|{
return|return
name|maxReplicationLagMillis
return|;
block|}
else|else
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|localTS
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|public
name|RevisionVector
name|getMinimumRootRevisions
parameter_list|()
block|{
return|return
name|rootRevisions
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|stopMonitor
init|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
name|stopMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|updateLoop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in the ReplicaSetInfo thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateLoop
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stop
condition|)
block|{
if|if
condition|(
name|hiddenMembers
operator|==
literal|null
condition|)
block|{
name|hiddenMembers
operator|=
name|getHiddenMembers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|updateReplicaStatus
argument_list|()
expr_stmt|;
for|for
control|(
name|ReplicaSetInfoListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|gotRootRevisions
argument_list|(
name|rootRevisions
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|stopMonitor
init|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|stop
condition|)
block|{
name|stopMonitor
operator|.
name|wait
argument_list|(
name|pullFrequencyMillis
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping the replica set info"
argument_list|)
expr_stmt|;
name|nodeCollections
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|void
name|updateReplicaStatus
parameter_list|()
block|{
name|BasicDBObject
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|getReplicaStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get replica status"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rootRevisions
operator|=
literal|null
expr_stmt|;
name|secondariesSafeTimestamp
operator|=
literal|0
expr_stmt|;
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|BasicBSONObject
argument_list|>
name|members
init|=
operator|(
name|Iterable
argument_list|<
name|BasicBSONObject
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"members"
argument_list|)
decl_stmt|;
if|if
condition|(
name|members
operator|==
literal|null
condition|)
block|{
name|members
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|updateRevisions
argument_list|(
name|members
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getHiddenMembers
parameter_list|()
block|{
name|BasicDBObject
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|getReplicaConfig
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get replica configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|BasicBSONObject
argument_list|>
name|members
init|=
operator|(
name|Iterable
argument_list|<
name|BasicBSONObject
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"members"
argument_list|)
decl_stmt|;
if|if
condition|(
name|members
operator|==
literal|null
condition|)
block|{
name|members
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hiddenMembers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BasicBSONObject
name|member
range|:
name|members
control|)
block|{
if|if
condition|(
name|member
operator|.
name|getBoolean
argument_list|(
literal|"hidden"
argument_list|)
condition|)
block|{
name|hiddenMembers
operator|.
name|add
argument_list|(
name|member
operator|.
name|getString
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hiddenMembers
return|;
block|}
specifier|protected
name|BasicDBObject
name|getReplicaConfig
parameter_list|()
block|{
return|return
name|adminDb
operator|.
name|command
argument_list|(
literal|"replSetGetConfig"
argument_list|,
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|BasicDBObject
name|getReplicaStatus
parameter_list|()
block|{
return|return
name|adminDb
operator|.
name|command
argument_list|(
literal|"replSetGetStatus"
argument_list|,
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateRevisions
parameter_list|(
name|Iterable
argument_list|<
name|BasicBSONObject
argument_list|>
name|members
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|secondaries
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|unknownState
init|=
literal|false
decl_stmt|;
name|String
name|primary
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BasicBSONObject
name|member
range|:
name|members
control|)
block|{
name|MemberState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|MemberState
operator|.
name|valueOf
argument_list|(
name|member
operator|.
name|getString
argument_list|(
literal|"stateStr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|state
operator|=
name|MemberState
operator|.
name|UNKNOWN
expr_stmt|;
block|}
name|String
name|name
init|=
name|member
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiddenMembers
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|PRIMARY
case|:
name|primary
operator|=
name|name
expr_stmt|;
continue|continue;
case|case
name|SECONDARY
case|:
name|secondaries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
case|case
name|ARBITER
case|:
continue|continue;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid state {} for instance {}"
argument_list|,
name|state
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|unknownState
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|secondaries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No secondaries found: {}"
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|unknownState
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|primary
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No primary found: {}"
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|unknownState
operator|=
literal|true
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|vectors
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|unknownState
condition|)
block|{
name|vectors
operator|=
name|getRootRevisions
argument_list|(
name|union
argument_list|(
name|secondaries
argument_list|,
name|of
argument_list|(
name|primary
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|vectors
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|unknownState
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unknownState
condition|)
block|{
name|rootRevisions
operator|=
literal|null
expr_stmt|;
name|secondariesSafeTimestamp
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
name|primaryRevision
init|=
name|vectors
operator|.
name|get
argument_list|(
name|primary
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|secondaryRevisions
init|=
name|filterKeys
argument_list|(
name|vectors
argument_list|,
name|in
argument_list|(
name|secondaries
argument_list|)
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
name|rootRevisions
operator|=
name|pmin
argument_list|(
name|transform
argument_list|(
name|secondaryRevisions
argument_list|,
name|Timestamped
operator|.
expr|<
name|RevisionVector
operator|>
name|getExtractFunction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootRevisions
operator|==
literal|null
operator|||
name|primaryRevision
operator|==
literal|null
operator|||
name|isEmpty
argument_list|(
name|secondaryRevisions
argument_list|)
condition|)
block|{
name|secondariesSafeTimestamp
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|secondariesSafeTimestamp
operator|=
name|getSecondariesSafeTimestamp
argument_list|(
name|primaryRevision
argument_list|,
name|secondaryRevisions
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Minimum root revisions: {}. Current lag: {}"
argument_list|,
name|rootRevisions
argument_list|,
name|getLag
argument_list|()
argument_list|)
expr_stmt|;
name|nodeCollections
operator|.
name|retain
argument_list|(
name|secondaries
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find the oldest revision which hasn't been replicated from primary to      * secondary yet and return its timestamp. If all revisions has been already      * replicated, return the date of the measurement.      *      * @return the point in time to which the secondary instances has been synchronized      */
specifier|private
name|long
name|getSecondariesSafeTimestamp
parameter_list|(
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
name|primary
parameter_list|,
name|Iterable
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|secondaries
parameter_list|)
block|{
specifier|final
name|RevisionVector
name|priRev
init|=
name|primary
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|oldestNotReplicated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
name|v
range|:
name|secondaries
control|)
block|{
name|RevisionVector
name|secRev
init|=
name|v
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|secRev
operator|.
name|equals
argument_list|(
name|priRev
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Revision
name|pr
range|:
name|priRev
control|)
block|{
name|Revision
name|sr
init|=
name|secRev
operator|.
name|getRevision
argument_list|(
name|pr
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|equals
argument_list|(
name|sr
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|oldestNotReplicated
operator|==
literal|null
operator|||
name|oldestNotReplicated
operator|>
name|pr
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|oldestNotReplicated
operator|=
name|pr
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|oldestNotReplicated
operator|==
literal|null
condition|)
block|{
name|long
name|minOpTimestamp
init|=
name|primary
operator|.
name|getOperationTimestamp
argument_list|()
decl_stmt|;
for|for
control|(
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
name|v
range|:
name|secondaries
control|)
block|{
if|if
condition|(
name|v
operator|.
name|getOperationTimestamp
argument_list|()
operator|<
name|minOpTimestamp
condition|)
block|{
name|minOpTimestamp
operator|=
name|v
operator|.
name|getOperationTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|minOpTimestamp
return|;
block|}
else|else
block|{
return|return
name|oldestNotReplicated
return|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|getRootRevisions
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|hosts
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|hostName
range|:
name|hosts
control|)
block|{
name|Callable
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|callable
init|=
operator|new
name|GetRootRevisionsCallable
argument_list|(
name|clock
argument_list|,
name|hostName
argument_list|,
name|nodeCollections
argument_list|)
decl_stmt|;
name|FutureTask
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|futureTask
init|=
operator|new
name|FutureTask
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|futureTask
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|futureTask
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|futures
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't connect to the Mongo instance"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|RevisionVector
name|pmin
parameter_list|(
name|Iterable
argument_list|<
name|RevisionVector
argument_list|>
name|vectors
parameter_list|)
block|{
name|RevisionVector
name|minimum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RevisionVector
name|v
range|:
name|vectors
control|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|minimum
operator|==
literal|null
condition|)
block|{
name|minimum
operator|=
name|v
expr_stmt|;
block|}
else|else
block|{
name|minimum
operator|=
name|minimum
operator|.
name|pmin
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|minimum
return|;
block|}
enum|enum
name|MemberState
block|{
name|STARTUP
block|,
name|PRIMARY
block|,
name|SECONDARY
block|,
name|RECOVERING
block|,
name|STARTUP2
block|,
name|UNKNOWN
block|,
name|ARBITER
block|,
name|DOWN
block|,
name|ROLLBACK
block|,
name|REMOVED
block|}
block|}
end_class

end_unit

