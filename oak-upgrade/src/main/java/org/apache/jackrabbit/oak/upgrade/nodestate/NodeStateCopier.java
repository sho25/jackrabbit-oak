begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * The NodeStateCopier and NodeStateCopier.Builder classes allow  * recursively copying a NodeState to a NodeBuilder.  *<br>  * The copy algorithm is optimized for copying nodes between two  * different NodeStore instances, i.e. where comparing NodeStates  * is imprecise and/or expensive.  *<br>  * The algorithm does a post-order traversal. I.e. it copies  * changed leaf-nodes first.  *<br>  * The work for a traversal without any differences between  * {@code source} and {@code target} is equivalent to the single  * execution of a naive equals implementation.  */
end_comment

begin_class
specifier|public
class|class
name|NodeStateCopier
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeStateCopier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|NodeStateCopier
parameter_list|()
block|{
comment|// no instances
block|}
comment|/**      * Shorthand method to copy one NodeStore to another. The changes in the      * target NodeStore are automatically persisted.      *      * @param source NodeStore to copy from.      * @param target NodeStore to copy to.      * @throws CommitFailedException      */
specifier|public
specifier|static
name|boolean
name|copyNodeStore
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeStore
name|source
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeStore
name|target
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeBuilder
name|builder
init|=
name|checkNotNull
argument_list|(
name|target
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasChanges
init|=
name|copyNodeState
argument_list|(
name|checkNotNull
argument_list|(
name|source
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|source
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
return|return
name|hasChanges
return|;
block|}
comment|/**      * Copies all changed properties from the source NodeState to the target      * NodeBuilder instance.      *      * @param source The NodeState to copy from.      * @param target The NodeBuilder to copy to.      * @return Whether changes were made or not.      */
specifier|public
specifier|static
name|boolean
name|copyProperties
parameter_list|(
name|NodeState
name|source
parameter_list|,
name|NodeBuilder
name|target
parameter_list|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
comment|// remove removed properties
for|for
control|(
specifier|final
name|PropertyState
name|property
range|:
name|target
operator|.
name|getProperties
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|target
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// add new properties and change changed properties
for|for
control|(
name|PropertyState
name|property
range|:
name|source
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|property
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|target
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|hasChanges
return|;
block|}
comment|/**      * Recursively copies the source NodeState to the target NodeBuilder.      *<br>      * Nodes that exist in the {@code target} but not in the {@code source}      * are removed, unless they are descendants of one of the {@code mergePaths}.      * This is determined by checking if the {@code currentPath} is a descendant      * of any of the {@code mergePaths}.      *<br>      *<b>Note:</b> changes are not persisted.      *      * @param source NodeState to copy from      * @param target NodeBuilder to copy to      * @param currentPath The path of both the source and target arguments.      * @param mergePaths A Set of paths under which existing nodes should be      *                   preserved, even if the do not exist in the source.      * @return An indication of whether there were changes or not.      */
specifier|public
specifier|static
name|boolean
name|copyNodeState
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeState
name|source
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|target
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|currentPath
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
parameter_list|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
comment|// delete deleted children
for|for
control|(
specifier|final
name|String
name|childName
range|:
name|target
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|hasChildNode
argument_list|(
name|childName
argument_list|)
operator|&&
operator|!
name|isMerge
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|childName
argument_list|)
argument_list|,
name|mergePaths
argument_list|)
condition|)
block|{
name|target
operator|.
name|setChildNode
argument_list|(
name|childName
argument_list|,
name|EmptyNodeState
operator|.
name|MISSING_NODE
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|source
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
specifier|final
name|String
name|childName
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|NodeState
name|childSource
init|=
name|child
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|hasChildNode
argument_list|(
name|childName
argument_list|)
condition|)
block|{
comment|// add new children
name|target
operator|.
name|setChildNode
argument_list|(
name|childName
argument_list|,
name|childSource
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// recurse into existing children
specifier|final
name|NodeBuilder
name|childTarget
init|=
name|target
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|hasChanges
operator|=
name|copyNodeState
argument_list|(
name|childSource
argument_list|,
name|childTarget
argument_list|,
name|childPath
argument_list|,
name|mergePaths
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
block|}
block|}
name|hasChanges
operator|=
name|copyProperties
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Node {} has changes"
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|hasChanges
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMerge
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
parameter_list|)
block|{
for|for
control|(
name|String
name|mergePath
range|:
name|mergePaths
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|mergePath
argument_list|,
name|path
argument_list|)
operator|||
name|mergePath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

