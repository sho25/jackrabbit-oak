begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|NullOutputStream
import|;
end_import

begin_class
specifier|abstract
class|class
name|ReadManyTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
literal|1234567890L
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|Content
block|{
name|void
name|create
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
name|void
name|read
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
block|}
specifier|public
specifier|static
specifier|final
name|Content
name|EMPTY
init|=
operator|new
name|Content
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|parent
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|Node
name|node
parameter_list|)
block|{         }
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Content
name|FILES
init|=
operator|new
name|Content
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|byte
index|[]
name|randomBytes
init|=
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|randomBytes
argument_list|)
decl_stmt|;
name|JcrUtils
operator|.
name|putFile
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
literal|"application/octet-stream"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Binary
name|binary
init|=
name|node
operator|.
name|getProperty
argument_list|(
literal|"jcr:content/jcr:data"
argument_list|)
operator|.
name|getBinary
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|stream
init|=
name|binary
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|binary
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Content
name|NODES
init|=
operator|new
name|Content
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|parent
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|randomText
init|=
operator|new
name|char
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|randomText
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|j
operator|%
literal|10
operator|)
operator|!=
literal|0
condition|)
block|{
name|randomText
index|[
name|j
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|'z'
operator|-
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomText
index|[
name|j
index|]
operator|=
literal|' '
expr_stmt|;
block|}
block|}
name|Node
name|child
init|=
name|node
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"child"
operator|+
name|i
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"content"
argument_list|,
operator|new
name|String
argument_list|(
name|randomText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|Node
name|child
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|)
control|)
block|{
name|child
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
name|child
operator|.
name|getProperty
argument_list|(
literal|"content"
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|ReadManyTest
name|linear
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|scale
parameter_list|,
name|Content
name|content
parameter_list|)
block|{
return|return
operator|new
name|ReadManyTest
argument_list|(
name|name
argument_list|,
name|scale
argument_list|,
name|content
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|top
init|=
name|root
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|scale
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|middle
init|=
name|top
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|bottom
range|:
name|JcrUtils
operator|.
name|getChildNodes
argument_list|(
name|middle
argument_list|)
control|)
block|{
name|content
operator|.
name|read
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|ReadManyTest
name|uniform
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|scale
parameter_list|,
name|Content
name|content
parameter_list|)
block|{
return|return
operator|new
name|ReadManyTest
argument_list|(
name|name
argument_list|,
name|scale
argument_list|,
name|content
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|content
operator|.
name|read
argument_list|(
name|root
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|scale
argument_list|)
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|int
name|scale
decl_stmt|;
specifier|protected
specifier|final
name|Content
name|content
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|protected
name|Node
name|root
decl_stmt|;
specifier|protected
name|ReadManyTest
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|scale
parameter_list|,
name|Content
name|content
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|=
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"content"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scale
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|top
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|middle
init|=
name|top
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|j
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
block|{
name|content
operator|.
name|create
argument_list|(
name|middle
argument_list|,
literal|"node"
operator|+
name|k
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// save once every 1k leaf entries
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

