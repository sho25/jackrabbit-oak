begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_LASTMODIFIED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_comment
comment|/**  * A file, which might be split into multiple blobs.  */
end_comment

begin_class
class|class
name|OakIndexFile
block|{
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakIndexFile
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Size of the blob entries to which the Lucene files are split.      * Set to higher than the 4kB inline limit for the BlobStore,      */
specifier|static
specifier|final
name|int
name|DEFAULT_BLOB_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
comment|/**      * The file name.      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * The node that contains the data for this file.      */
specifier|private
specifier|final
name|NodeBuilder
name|file
decl_stmt|;
comment|/**      * The maximum size of each blob.      */
specifier|private
specifier|final
name|int
name|blobSize
decl_stmt|;
comment|/**      * The current position within the file (for positioned read and write      * operations).      */
specifier|private
name|long
name|position
init|=
literal|0
decl_stmt|;
comment|/**      * The length of the file.      */
specifier|private
name|long
name|length
decl_stmt|;
comment|/**      * The list of blobs (might be empty).      * The last blob has a size of 1 up to blobSize.      * All other blobs have a size of blobSize.      */
specifier|private
name|List
argument_list|<
name|Blob
argument_list|>
name|data
decl_stmt|;
comment|/**      * Whether the data was modified since it was last flushed. If yes, on a      * flush, the metadata, and the list of blobs need to be stored.      */
specifier|private
name|boolean
name|dataModified
init|=
literal|false
decl_stmt|;
comment|/**      * The index of the currently loaded blob.      */
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The data of the currently loaded blob.      */
specifier|private
name|byte
index|[]
name|blob
decl_stmt|;
comment|/**      * The unique key that is used to make the content unique (to allow removing binaries from the blob store without risking to remove binaries that are still needed).      */
specifier|private
specifier|final
name|byte
index|[]
name|uniqueKey
decl_stmt|;
comment|/**      * Whether the currently loaded blob was modified since the blob was      * flushed.      */
specifier|private
name|boolean
name|blobModified
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|String
name|dirDetails
decl_stmt|;
specifier|private
specifier|final
name|BlobFactory
name|blobFactory
decl_stmt|;
specifier|public
name|OakIndexFile
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeBuilder
name|file
parameter_list|,
name|String
name|dirDetails
parameter_list|,
annotation|@
name|Nonnull
name|BlobFactory
name|blobFactory
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|dirDetails
operator|=
name|dirDetails
expr_stmt|;
name|this
operator|.
name|blobSize
operator|=
name|determineBlobSize
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|uniqueKey
operator|=
name|readUniqueKey
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|blob
operator|=
operator|new
name|byte
index|[
name|blobSize
index|]
expr_stmt|;
name|this
operator|.
name|blobFactory
operator|=
name|checkNotNull
argument_list|(
name|blobFactory
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
name|file
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getType
argument_list|()
operator|==
name|BINARIES
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|newArrayList
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|data
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|length
operator|=
operator|(
name|long
operator|)
name|data
operator|.
name|size
argument_list|()
operator|*
name|blobSize
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Blob
name|last
init|=
name|data
operator|.
name|get
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|length
operator|-=
name|blobSize
operator|-
name|last
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|uniqueKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|length
operator|-=
name|uniqueKey
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|OakIndexFile
parameter_list|(
name|OakIndexFile
name|that
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|that
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|that
operator|.
name|file
expr_stmt|;
name|this
operator|.
name|dirDetails
operator|=
name|that
operator|.
name|dirDetails
expr_stmt|;
name|this
operator|.
name|blobSize
operator|=
name|that
operator|.
name|blobSize
expr_stmt|;
name|this
operator|.
name|uniqueKey
operator|=
name|that
operator|.
name|uniqueKey
expr_stmt|;
name|this
operator|.
name|blob
operator|=
operator|new
name|byte
index|[
name|blobSize
index|]
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|that
operator|.
name|position
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|that
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|newArrayList
argument_list|(
name|that
operator|.
name|data
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataModified
operator|=
name|that
operator|.
name|dataModified
expr_stmt|;
name|this
operator|.
name|blobFactory
operator|=
name|that
operator|.
name|blobFactory
expr_stmt|;
block|}
specifier|private
name|void
name|loadBlob
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|checkElementIndex
argument_list|(
name|i
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
name|i
condition|)
block|{
name|flushBlob
argument_list|()
expr_stmt|;
name|checkState
argument_list|(
operator|!
name|blobModified
argument_list|)
expr_stmt|;
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|blobSize
argument_list|,
name|length
operator|-
operator|(
name|long
operator|)
name|i
operator|*
name|blobSize
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|blob
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushBlob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|blobModified
condition|)
block|{
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|blobSize
argument_list|,
name|length
operator|-
operator|(
name|long
operator|)
name|index
operator|*
name|blobSize
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|blob
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueKey
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|SequenceInputStream
argument_list|(
name|in
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|uniqueKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Blob
name|b
init|=
name|blobFactory
operator|.
name|createBlob
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
name|data
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|index
operator|==
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|dataModified
operator|=
literal|true
expr_stmt|;
name|blobModified
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Duplicates this instance to be used by a different consumer/thread.      * State of the cloned instance is same as original. Once cloned, the states      * would change separately according to how are they accessed.      *      * @return cloned instance      */
specifier|public
name|OakIndexFile
name|clone
parameter_list|()
block|{
return|return
operator|new
name|OakIndexFile
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * @return length of index file      */
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**      * @return current location of access      */
specifier|public
name|long
name|position
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|blob
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|data
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|blob
operator|==
literal|null
operator|&&
name|data
operator|==
literal|null
return|;
block|}
comment|/**      * Seek current location of access to {@code pos}      * @param pos      * @throws IOException      */
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// seek() may be called with pos == length
comment|// see https://issues.apache.org/jira/browse/LUCENE-1196
if|if
condition|(
name|pos
argument_list|<
literal|0
operator|||
name|pos
argument_list|>
name|length
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Invalid seek request for [%s][%s], "
operator|+
literal|"position: %d, file length: %d"
argument_list|,
name|dirDetails
argument_list|,
name|name
argument_list|,
name|pos
argument_list|,
name|length
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
name|position
operator|=
name|pos
expr_stmt|;
block|}
block|}
comment|/**      * Read {@code len} number of bytes from underlying storage and copy them      * into byte array {@code b} starting at {@code offset}      * @param b byte array to copy contents read from storage      * @param offset index into {@code b} where the copy begins      * @param len numeber of bytes to be read from storage      * @throws IOException      */
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|len
argument_list|,
name|checkNotNull
argument_list|(
name|b
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
argument_list|<
literal|0
operator|||
name|position
operator|+
name|len
argument_list|>
name|length
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Invalid byte range request for [%s][%s], "
operator|+
literal|"position: %d, file length: %d, len: %d"
argument_list|,
name|dirDetails
argument_list|,
name|name
argument_list|,
name|position
argument_list|,
name|length
argument_list|,
name|len
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|int
name|i
init|=
call|(
name|int
call|)
argument_list|(
name|position
operator|/
name|blobSize
argument_list|)
decl_stmt|;
name|int
name|o
init|=
call|(
name|int
call|)
argument_list|(
name|position
operator|%
name|blobSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|loadBlob
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|blobSize
operator|-
name|o
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|blob
argument_list|,
name|o
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|l
expr_stmt|;
name|len
operator|-=
name|l
expr_stmt|;
name|position
operator|+=
name|l
expr_stmt|;
comment|// next block
name|i
operator|++
expr_stmt|;
comment|// for the next block, we read from the beginning
name|o
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * Writes {@code len} number of bytes from byte array {@code b}      * starting at {@code offset} into the underlying storage      * @param b byte array to copy contents into the storage      * @param offset index into {@code b} where the copy begins      * @param len numeber of bytes to be written to storage      * @throws IOException      */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
call|(
name|int
call|)
argument_list|(
name|position
operator|/
name|blobSize
argument_list|)
decl_stmt|;
name|int
name|o
init|=
call|(
name|int
call|)
argument_list|(
name|position
operator|%
name|blobSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|blobSize
operator|-
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|i
condition|)
block|{
if|if
condition|(
name|o
operator|>
literal|0
operator|||
operator|(
name|l
operator|<
name|blobSize
operator|&&
name|position
operator|+
name|l
operator|<
name|length
operator|)
condition|)
block|{
comment|// loadBlob first flushes the previous block,
comment|// and it sets the index
name|loadBlob
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we don't need to load the block,
comment|// as we anyway overwrite it fully, if:
comment|// o == 0 (start writing at a block boundary)
comment|// and either: l is the blockSize, or
comment|// we write at least to the end of the file
name|flushBlob
argument_list|()
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
block|}
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|blob
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|blobModified
operator|=
literal|true
expr_stmt|;
name|offset
operator|+=
name|l
expr_stmt|;
name|len
operator|-=
name|l
expr_stmt|;
name|position
operator|+=
name|l
expr_stmt|;
name|length
operator|=
name|Math
operator|.
name|max
argument_list|(
name|length
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|o
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|determineBlobSize
parameter_list|(
name|NodeBuilder
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|hasProperty
argument_list|(
name|OakDirectory
operator|.
name|PROP_BLOB_SIZE
argument_list|)
condition|)
block|{
return|return
name|Ints
operator|.
name|checkedCast
argument_list|(
name|file
operator|.
name|getProperty
argument_list|(
name|OakDirectory
operator|.
name|PROP_BLOB_SIZE
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
block|}
return|return
name|DEFAULT_BLOB_SIZE
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|readUniqueKey
parameter_list|(
name|NodeBuilder
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|hasProperty
argument_list|(
name|OakDirectory
operator|.
name|PROP_UNIQUE_KEY
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|file
operator|.
name|getString
argument_list|(
name|OakDirectory
operator|.
name|PROP_UNIQUE_KEY
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|convertHexToBytes
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Flushes the content into storage. Before calling this method, written      * content only exist in memory      * @throws IOException      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|flushBlob
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataModified
condition|)
block|{
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_LASTMODIFIED
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
name|data
argument_list|,
name|BINARIES
argument_list|)
expr_stmt|;
name|dataModified
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return name of the index being accessed      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

