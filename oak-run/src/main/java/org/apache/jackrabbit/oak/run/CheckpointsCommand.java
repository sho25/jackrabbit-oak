begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|checkpoint
operator|.
name|Checkpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_class
class|class
name|CheckpointsCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CheckpointsOptions
name|options
init|=
operator|new
name|CheckpointsOptions
argument_list|(
literal|"checkpoints {<path>|<mongo-uri>|<jdbc-uri>} [list|rm-all|rm-unreferenced|rm<checkpoint>|info<checkpoint>|set<checkpoint><name> [<value>]] [--segment]"
argument_list|)
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|options
operator|.
name|isHelp
argument_list|()
condition|)
block|{
name|options
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|storeArg
init|=
name|options
operator|.
name|getStoreArg
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeArg
operator|==
literal|null
operator|||
name|storeArg
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Missing nodestore path/URI"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|opArg
init|=
name|options
operator|.
name|getOtherArgs
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Checkpoints
name|cps
decl_stmt|;
name|Closer
name|closer
init|=
name|Utils
operator|.
name|createCloserWithShutdownHook
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|op
init|=
literal|"list"
decl_stmt|;
comment|//default operation
if|if
condition|(
name|opArg
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|op
operator|=
name|opArg
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"list"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm-all"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm-unreferenced"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"rm"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"info"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
literal|"set"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|failWith
argument_list|(
literal|"Unknown operation: "
operator|+
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isDocumentNodeStore
init|=
name|storeArg
operator|.
name|startsWith
argument_list|(
literal|"jdbc:"
argument_list|)
operator|||
name|storeArg
operator|.
name|startsWith
argument_list|(
literal|"mongodb:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDocumentNodeStore
condition|)
block|{
name|DocumentNodeStoreBuilder
argument_list|<
name|?
argument_list|>
name|builder
init|=
name|Utils
operator|.
name|createDocumentMKBuilder
argument_list|(
name|options
argument_list|,
name|closer
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create DocumentNodeStoreBuilder"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|DocumentNodeStore
name|nodeStore
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|Utils
operator|.
name|asCloseable
argument_list|(
name|nodeStore
argument_list|)
argument_list|)
expr_stmt|;
name|cps
operator|=
name|Checkpoints
operator|.
name|onDocumentMK
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cps
operator|=
name|Checkpoints
operator|.
name|onSegmentTar
argument_list|(
operator|new
name|File
argument_list|(
name|storeArg
argument_list|)
argument_list|,
name|closer
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checkpoints "
operator|+
name|storeArg
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"list"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Checkpoints
operator|.
name|CP
name|cp
range|:
name|cps
operator|.
name|list
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"- %s created %s expires %s%n"
argument_list|,
name|cp
operator|.
name|id
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|cp
operator|.
name|created
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|cp
operator|.
name|expires
argument_list|)
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|cnt
operator|+
literal|" checkpoints"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rm-all"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cnt
init|=
name|cps
operator|.
name|removeAll
argument_list|()
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed "
operator|+
name|cnt
operator|+
literal|" checkpoints in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove all checkpoints."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"rm-unreferenced"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|cnt
init|=
name|cps
operator|.
name|removeUnreferenced
argument_list|()
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed "
operator|+
name|cnt
operator|+
literal|" checkpoints in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove unreferenced checkpoints."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"rm"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|opArg
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|failWith
argument_list|(
literal|"Missing checkpoint id"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cp
init|=
name|opArg
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|cps
operator|.
name|remove
argument_list|(
name|cp
argument_list|)
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed checkpoint "
operator|+
name|cp
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove checkpoint "
operator|+
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Checkpoint '"
operator|+
name|cp
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|opArg
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|failWith
argument_list|(
literal|"Missing checkpoint id"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cp
init|=
name|opArg
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|cps
operator|.
name|getInfo
argument_list|(
name|cp
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|info
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|'\t'
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Checkpoint '"
operator|+
name|cp
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"set"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|opArg
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|)
block|{
name|failWith
argument_list|(
literal|"Missing checkpoint id"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|cp
init|=
name|opArg
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|opArg
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opArg
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|)
block|{
name|value
operator|=
name|opArg
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|cps
operator|.
name|setInfoProperty
argument_list|(
name|cp
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
if|if
condition|(
name|cnt
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated checkpoint "
operator|+
name|cp
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Failed to remove checkpoint "
operator|+
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|failWith
argument_list|(
literal|"Checkpoint '"
operator|+
name|cp
operator|+
literal|"' not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|failWith
parameter_list|(
name|String
name|message
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|CheckpointsOptions
extends|extends
name|Utils
operator|.
name|NodeStoreOptions
block|{
name|CheckpointsOptions
parameter_list|(
name|String
name|usage
parameter_list|)
block|{
name|super
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CheckpointsCommand
operator|.
name|CheckpointsOptions
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|isHelp
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

