begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|ASYNC_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|createIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
operator|.
name|AsyncIndexStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
operator|.
name|IndexTaskSpliter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ConflictAnnotatingRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ProxyNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexUpdateTest
block|{
comment|// TODO test index config deletes
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|PropertyIndexLookup
name|lookup
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
operator|new
name|FilterImpl
argument_list|()
argument_list|,
name|name
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeState
name|checkPathExists
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
modifier|...
name|verify
parameter_list|)
block|{
name|NodeState
name|c
init|=
name|state
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|verify
control|)
block|{
name|c
operator|=
name|c
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**      * Async Index Test      *<ul>      *<li>Add an index definition</li>      *<li>Add some content</li>      *<li>Search& verify</li>      *</ul>      *       */
annotation|@
name|Test
specifier|public
name|void
name|testAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// first check that the index content nodes exist
name|checkPathExists
argument_list|(
name|root
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|":conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Async Index Test with 2 index defs at the same location      *<ul>      *<li>Add an index definition</li>      *<li>Add some content</li>      *<li>Search& verify</li>      *</ul>      *       */
annotation|@
name|Test
specifier|public
name|void
name|testAsyncDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndexSecond"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testSecond"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"ghi"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// first check that the index content nodes exist
name|checkPathExists
argument_list|(
name|root
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|checkPathExists
argument_list|(
name|root
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndexSecond"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"bar"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testSecond"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"bar"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Async Index Test with 2 index defs at different tree locations      *<ul>      *<li>Add an index definition</li>      *<li>Add some content</li>      *<li>Search& verify</li>      *</ul>      *       */
annotation|@
name|Test
specifier|public
name|void
name|testAsyncDoubleSubtree
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|child
argument_list|(
literal|"other"
argument_list|)
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"subIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|child
argument_list|(
literal|"other"
argument_list|)
operator|.
name|child
argument_list|(
literal|"testChild"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// first check that the index content nodes exist
name|checkPathExists
argument_list|(
name|root
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|checkPathExists
argument_list|(
name|root
argument_list|,
literal|"newchild"
argument_list|,
literal|"other"
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"subIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookupChild
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|root
operator|.
name|getChildNode
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"other"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testChild"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookupChild
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookupChild
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncPause
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|pause
argument_list|()
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|resume
argument_list|()
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// first check that the index content nodes exist
name|checkPathExists
argument_list|(
name|root
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|":conflict"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1749
annotation|@
name|Test
specifier|public
name|void
name|branchBaseOnCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Semaphore
name|retrieve
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|checkpoint
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|NodeState
name|retrieve
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
name|retrieve
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
finally|finally
block|{
name|retrieve
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
try|try
block|{
return|return
name|super
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|properties
argument_list|)
return|;
block|}
finally|finally
block|{
name|checkpoint
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TYPE
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// drain checkpoint permits
name|checkpoint
operator|.
name|acquireUninterruptibly
argument_list|(
name|checkpoint
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
comment|// block NodeStore.retrieve()
name|retrieve
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait until async update called checkpoint
name|retrieve
operator|.
name|release
argument_list|()
expr_stmt|;
name|checkpoint
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"child"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// allow async update to proceed with NodeStore.retrieve()
name|retrieve
operator|.
name|release
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1784
annotation|@
name|Test
specifier|public
name|void
name|failOnConflict
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|Semaphore
argument_list|>
name|locks
init|=
name|Maps
operator|.
name|newIdentityHashMap
argument_list|()
decl_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Semaphore
name|s
init|=
name|locks
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|commitHook
argument_list|,
name|info
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TYPE
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Semaphore
name|s
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// make some unrelated changes to trigger indexing
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|s
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
comment|// introduce a conflict
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|":index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|s
operator|.
name|release
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertNoConflictMarker
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNoConflictMarker
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|builder
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ConflictAnnotatingRebaseDiff
operator|.
name|CONFLICT
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"conflict marker detected"
argument_list|)
expr_stmt|;
block|}
name|assertNoConflictMarker
argument_list|(
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * OAK-1959, stale ref to checkpoint thorws the indexer into a reindexing      * loop      */
annotation|@
name|Test
specifier|public
name|void
name|recoverFromMissingCpRef
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|checkPathExists
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|,
literal|"abc"
argument_list|,
literal|"testRoot"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|// change cp ref to point to a non-existing one
name|builder
operator|.
name|child
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
literal|"faulty"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testAnother"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|checkPathExists
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|INDEX_DEFINITIONS_NAME
argument_list|,
literal|"rootIndex"
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|,
literal|"def"
argument_list|,
literal|"testAnother"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cpCleanupNoChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// no changes on diff, no checkpoints left behind
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|async
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|newHashSet
argument_list|(
name|store
operator|.
name|listCheckpoints
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting the initial checkpoint"
argument_list|,
name|checkpoints
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|,
name|checkpoints
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no checkpoint changes"
argument_list|,
name|checkpoints
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cpCleanupWChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|firstCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Store should keep only second checkpoint"
argument_list|,
name|secondCp
operator|.
name|equals
argument_list|(
name|firstCp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondCp
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cpCleanupWUnrelatedChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|firstCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// add content that's hidden from indexing
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Store should keep only second checkpoint"
argument_list|,
name|secondCp
operator|.
name|equals
argument_list|(
name|firstCp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondCp
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cpCleanupWErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|FaultyIndexEditorProvder
name|provider
init|=
operator|new
name|FaultyIndexEditorProvder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error should have been triggered by the commit"
argument_list|,
name|provider
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// OAK-3054 failure reports
name|AsyncIndexStats
name|stats
init|=
name|async
operator|.
name|getIndexStats
argument_list|()
decl_stmt|;
name|String
name|since
init|=
name|stats
operator|.
name|getFailingSince
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getConsecutiveFailedExecutions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|since
argument_list|,
name|stats
operator|.
name|getLatestErrorTime
argument_list|()
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getConsecutiveFailedExecutions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|since
argument_list|,
name|stats
operator|.
name|getFailingSince
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|since
argument_list|,
name|stats
operator|.
name|getLatestErrorTime
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|fixed
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getConsecutiveFailedExecutions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|stats
operator|.
name|getFailingSince
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cpCleanupNoRelease
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MemoryNodeStore
name|mns
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|canRelease
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ProxyNodeStore
name|store
init|=
operator|new
name|ProxyNodeStore
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|mns
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|(
name|String
name|checkpoint
parameter_list|)
block|{
if|if
condition|(
name|canRelease
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|release
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|mns
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|mns
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one temp checkpoint"
argument_list|,
name|newHashSet
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"async-temp"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting two checkpoints"
argument_list|,
name|mns
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting two temp checkpoints"
argument_list|,
name|newHashSet
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"async-temp"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|canRelease
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|mns
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|mns
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|secondCp
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the temp cps size is 2 now but the unreferenced checkpoints have been
comment|// cleared from the store already
for|for
control|(
name|String
name|cp
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"async-temp"
argument_list|)
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|equals
argument_list|(
name|secondCp
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertNull
argument_list|(
literal|"Temp checkpoint was already cleared from store"
argument_list|,
name|store
operator|.
name|retrieve
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * OAK-2203 Test reindex behavior on an async index when the index provider is missing      * for a given type      */
annotation|@
name|Test
specifier|public
name|void
name|testReindexMissingProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"asyncMissing"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"asyncMissing"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
comment|//first run, creates a checkpoint and a ref to it as the last indexed state
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|async
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|firstCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|firstCp
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"asyncMissing"
argument_list|)
argument_list|)
expr_stmt|;
comment|// second run, simulate an index going away
name|provider
operator|=
name|CompositeIndexEditorProvider
operator|.
name|compose
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|IndexEditorProvider
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|async
operator|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"asyncMissing"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|async
operator|.
name|isFailing
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't set reindex=true but skip the update
name|PropertyState
name|reindex
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|getProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reindex
operator|==
literal|null
operator|||
operator|!
name|reindex
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Store should not create a new checkpoint"
argument_list|,
name|secondCp
operator|.
name|equals
argument_list|(
name|firstCp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstCp
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
operator|.
name|getString
argument_list|(
literal|"asyncMissing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FaultyIndexEditorProvder
implements|implements
name|IndexEditorProvider
block|{
specifier|private
specifier|final
name|FaultyIndexEditor
name|faulty
init|=
operator|new
name|FaultyIndexEditor
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|type
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|faulty
return|;
block|}
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|faulty
operator|.
name|failed
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FaultyIndexEditor
implements|implements
name|IndexEditor
block|{
specifier|private
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|failed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"test"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"Testing failures"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{         }
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|taskSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"changedIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"ignored1"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async-ignored"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"ignored2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"etc"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|firstCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|IndexTaskSpliter
name|splitter
init|=
name|async
operator|.
name|getTaskSplitter
argument_list|()
decl_stmt|;
name|splitter
operator|.
name|registerSplit
argument_list|(
name|newHashSet
argument_list|(
literal|"/oak:index/changedIndex"
argument_list|)
argument_list|,
literal|"async-slow"
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|newHashSet
argument_list|(
name|store
operator|.
name|listCheckpoints
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting two checkpoints"
argument_list|,
name|checkpoints
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkpoints
operator|.
name|remove
argument_list|(
name|firstCp
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|checkpoints
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeState
name|asyncNode
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstCp
argument_list|,
name|asyncNode
operator|.
name|getString
argument_list|(
literal|"async-slow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondCp
argument_list|,
name|asyncNode
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newHashSet
argument_list|(
name|asyncNode
operator|.
name|getStrings
argument_list|(
literal|"async-temp"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|firstCp
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|indexNode
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"async"
argument_list|,
name|indexNode
operator|.
name|getChildNode
argument_list|(
literal|"rootIndex"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"async-ignored"
argument_list|,
name|indexNode
operator|.
name|getChildNode
argument_list|(
literal|"ignored1"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|indexNode
operator|.
name|getChildNode
argument_list|(
literal|"ignored2"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"async-slow"
argument_list|,
name|indexNode
operator|.
name|getChildNode
argument_list|(
literal|"changedIndex"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|indexNode
operator|.
name|getChildNode
argument_list|(
literal|"changedIndex"
argument_list|)
operator|.
name|getBoolean
argument_list|(
literal|"reindex"
argument_list|)
argument_list|)
expr_stmt|;
comment|// new index task is on previous checkpoint
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"testRoot"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"bar"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|taskSplitNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"ignored"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async-ignored"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting no checkpoints"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting one checkpoint"
argument_list|,
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|firstCp
init|=
name|store
operator|.
name|listCheckpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|IndexTaskSpliter
name|splitter
init|=
name|async
operator|.
name|getTaskSplitter
argument_list|()
decl_stmt|;
comment|// no match on the provided path
name|splitter
operator|.
name|registerSplit
argument_list|(
name|newHashSet
argument_list|(
literal|"/oak:index/ignored"
argument_list|)
argument_list|,
literal|"async-slow"
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|newHashSet
argument_list|(
name|store
operator|.
name|listCheckpoints
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting a single checkpoint"
argument_list|,
name|checkpoints
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|secondCp
init|=
name|checkpoints
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeState
name|asyncNode
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|AsyncIndexUpdate
operator|.
name|ASYNC
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|secondCp
argument_list|,
name|asyncNode
operator|.
name|getString
argument_list|(
literal|"async"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|firstCp
argument_list|,
name|asyncNode
operator|.
name|getString
argument_list|(
literal|"async-slow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsyncExecutionStats
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knownCheckpoints
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|NodeState
name|retrieve
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
if|if
condition|(
operator|!
name|knownCheckpoints
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|knownCheckpoints
operator|.
name|contains
argument_list|(
name|checkpoint
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
comment|// merge it back in
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lastExecutionStats
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Run a cycle so that change of reindex flag gets indexed
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lastExecutionStats
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now run so that it results in an empty cycle
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lastExecutionStats
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Do some updates and counter should increase
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lastExecutionStats
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Do some updates but disable checkpoints. Counter should not increase
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|//Disable new checkpoint retrieval
name|knownCheckpoints
operator|.
name|addAll
argument_list|(
name|store
operator|.
name|listCheckpoints
argument_list|()
argument_list|)
expr_stmt|;
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lastExecutionStats
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getExecutionCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|lastExecutionStats
parameter_list|(
name|CompositeData
name|cd
parameter_list|)
block|{
comment|//Last stat is the last entry in the array
return|return
operator|(
operator|(
name|long
index|[]
operator|)
name|cd
operator|.
name|get
argument_list|(
literal|"per second"
argument_list|)
operator|)
index|[
literal|59
index|]
return|;
block|}
specifier|private
specifier|static
name|void
name|runOneCycle
parameter_list|(
name|AsyncIndexUpdate
name|async
parameter_list|)
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpointStability
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
comment|//Initial indexing
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
comment|//Now checkpoints = [checkpoints0]
comment|//Index again so as to get change in reindex flag done
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
comment|//Now checkpoints = [checkpoints1]. checkpoints0 released
comment|//Now make some changes to
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
comment|//Now checkpoints = [checkpoints1]. Note that size is 1 so new checkpoint name remains same
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|AsyncIndexUpdate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noRunWhenClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|async
operator|.
name|close
argument_list|()
expr_stmt|;
name|LogCustomizer
name|lc
init|=
name|createLogCustomizer
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lc
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Could not acquire run permit"
argument_list|)
argument_list|)
expr_stmt|;
name|lc
operator|.
name|finished
argument_list|()
expr_stmt|;
name|async
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeWithSoftLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|Semaphore
name|asyncLock
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AsyncUpdateCallback
name|newAsyncUpdateCallback
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|leaseTimeOut
parameter_list|,
name|String
name|beforeCheckpoint
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|,
name|AsyncIndexStats
name|indexStats
parameter_list|,
name|AtomicBoolean
name|stopFlag
parameter_list|)
block|{
try|try
block|{
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                 }
return|return
name|super
operator|.
name|newAsyncUpdateCallback
argument_list|(
name|store
argument_list|,
name|name
argument_list|,
name|leaseTimeOut
argument_list|,
name|beforeCheckpoint
argument_list|,
name|afterCheckpoint
argument_list|,
name|indexStats
argument_list|,
name|stopFlag
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|async
operator|.
name|setCloseTimeOut
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|closer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Wait till async gets to wait state i.e. inside run
while|while
condition|(
operator|!
name|asyncLock
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
empty_stmt|;
name|LogCustomizer
name|lc
init|=
name|createLogCustomizer
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
decl_stmt|;
name|closer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Wait till closer is in waiting state
while|while
condition|(
operator|!
name|async
operator|.
name|isClosing
argument_list|()
condition|)
empty_stmt|;
comment|//For softLimit case the flag should not be set
name|assertFalse
argument_list|(
name|async
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertLogPhrase
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|"[WAITING]"
argument_list|)
expr_stmt|;
comment|//Let indexing run complete now
name|asyncLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//Wait for both threads
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|closer
operator|.
name|join
argument_list|()
expr_stmt|;
comment|//Close call should complete
name|assertLogPhrase
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|"[CLOSED OK]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeWithHardLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|Semaphore
name|asyncLock
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AsyncUpdateCallback
name|newAsyncUpdateCallback
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|leaseTimeOut
parameter_list|,
name|String
name|beforeCheckpoint
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|,
name|AsyncIndexStats
name|indexStats
parameter_list|,
name|AtomicBoolean
name|stopFlag
parameter_list|)
block|{
try|try
block|{
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                 }
return|return
name|super
operator|.
name|newAsyncUpdateCallback
argument_list|(
name|store
argument_list|,
name|name
argument_list|,
name|leaseTimeOut
argument_list|,
name|beforeCheckpoint
argument_list|,
name|afterCheckpoint
argument_list|,
name|indexStats
argument_list|,
name|stopFlag
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|//Set a 1 sec close timeout
name|async
operator|.
name|setCloseTimeOut
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|closer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|async
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//Lock to ensure that AsyncIndexUpdate waits
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Wait till async gets to wait state i.e. inside run
while|while
condition|(
operator|!
name|asyncLock
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
empty_stmt|;
name|LogCustomizer
name|lc
init|=
name|createLogCustomizer
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
decl_stmt|;
name|closer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Wait till stopFlag is set
while|while
condition|(
operator|!
name|async
operator|.
name|isClosed
argument_list|()
condition|)
empty_stmt|;
name|assertLogPhrase
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|"[SOFT LIMIT HIT]"
argument_list|)
expr_stmt|;
comment|//Let indexing run complete now
name|asyncLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//Wait for both threads
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|//Async run would have exited with log message logged
name|assertLogPhrase
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|"The index update interrupted"
argument_list|)
expr_stmt|;
comment|//Wait for close call to complete
name|closer
operator|.
name|join
argument_list|()
expr_stmt|;
name|lc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|abortedRun
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|IndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"rootIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ASYNC_PROPERTY_NAME
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|Semaphore
name|asyncLock
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AsyncUpdateCallback
name|newAsyncUpdateCallback
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|leaseTimeOut
parameter_list|,
name|String
name|beforeCheckpoint
parameter_list|,
name|String
name|afterCheckpoint
parameter_list|,
name|AsyncIndexStats
name|indexStats
parameter_list|,
name|AtomicBoolean
name|stopFlag
parameter_list|)
block|{
return|return
operator|new
name|AsyncUpdateCallback
argument_list|(
name|store
argument_list|,
name|name
argument_list|,
name|leaseTimeOut
argument_list|,
name|beforeCheckpoint
argument_list|,
name|afterCheckpoint
argument_list|,
name|indexStats
argument_list|,
name|stopFlag
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                         }
try|try
block|{
name|super
operator|.
name|indexUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|asyncLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_DONE
argument_list|,
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|//Below we ensure that we interrupt while the indexing is in progress
comment|//hence the use of asyncLock which ensures the abort is called at right time
comment|//Now make some changes to
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"testRoot2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|async
argument_list|)
decl_stmt|;
comment|//Lock to ensure that AsyncIndexUpdate waits
name|asyncLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Wait till async gets to wait state i.e. inside run
while|while
condition|(
operator|!
name|asyncLock
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
empty_stmt|;
name|assertEquals
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
argument_list|,
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|abortAndPause
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Abort request placed"
argument_list|)
argument_list|)
expr_stmt|;
name|asyncLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|retry
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|IndexStatsMBean
operator|.
name|STATUS_INTERRUPTED
operator|.
name|equals
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Post abort indexing should be fine
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|isPaused
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now resume indexing
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|resume
argument_list|()
expr_stmt|;
name|runOneCycle
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_DONE
argument_list|,
name|async
operator|.
name|getIndexStats
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|async
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertLogPhrase
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|logs
parameter_list|,
name|String
name|logPhrase
parameter_list|)
block|{
name|assertThat
argument_list|(
name|logs
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|logPhrase
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|LogCustomizer
name|createLogCustomizer
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|LogCustomizer
name|lc
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|AsyncIndexUpdate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|level
argument_list|)
operator|.
name|enable
argument_list|(
name|level
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|lc
operator|.
name|starting
argument_list|()
expr_stmt|;
return|return
name|lc
return|;
block|}
specifier|private
specifier|static
name|void
name|retry
parameter_list|(
name|int
name|timeoutSeconds
parameter_list|,
name|int
name|intervalBetweenTriesMsec
parameter_list|,
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|c
parameter_list|)
block|{
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutSeconds
operator|*
literal|1000L
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
try|try
block|{
if|if
condition|(
name|c
operator|.
name|call
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|intervalBetweenTriesMsec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{             }
block|}
name|fail
argument_list|(
literal|"RetryLoop failed, condition is false after "
operator|+
name|timeoutSeconds
operator|+
literal|" seconds: "
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

