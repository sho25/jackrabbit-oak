begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_comment
comment|/**  * Allows to read from a file channel like an input stream.  */
end_comment

begin_class
specifier|public
class|class
name|FileChannelInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|FileChannel
name|channel
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|buffer
init|=
block|{
literal|0
block|}
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|closeChannel
decl_stmt|;
comment|/**      * Create a new file object input stream from the file channel.      *      * @param channel the file channel      * @param closeChannel close the channel when done      */
specifier|public
name|FileChannelInputStream
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|boolean
name|closeChannel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|closeChannel
operator|=
name|closeChannel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|.
name|position
argument_list|()
operator|>=
name|channel
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|FileUtils
operator|.
name|readFully
argument_list|(
name|channel
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
index|[
literal|0
index|]
operator|&
literal|0xff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|.
name|position
argument_list|()
operator|+
name|len
operator|<
name|channel
operator|.
name|size
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|readFully
argument_list|(
name|channel
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|channel
operator|.
name|size
argument_list|()
operator|-
name|channel
operator|.
name|position
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
name|channel
operator|.
name|position
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closeChannel
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

