begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|AddNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|AddPropertyInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|CopyNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|MoveNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|RemoveNodeInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Instruction
operator|.
name|SetPropertyInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|InstructionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|query
operator|.
name|FetchNodeByPathQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_class
specifier|public
class|class
name|CommitCommandInstructionVisitor
implements|implements
name|InstructionVisitor
block|{
specifier|private
specifier|final
name|long
name|headRevisionId
decl_stmt|;
specifier|private
specifier|final
name|MongoConnection
name|mongoConnection
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
name|pathNodeMap
decl_stmt|;
specifier|public
name|CommitCommandInstructionVisitor
parameter_list|(
name|MongoConnection
name|mongoConnection
parameter_list|,
name|long
name|headRevisionId
parameter_list|)
block|{
name|this
operator|.
name|mongoConnection
operator|=
name|mongoConnection
expr_stmt|;
name|this
operator|.
name|headRevisionId
operator|=
name|headRevisionId
expr_stmt|;
name|pathNodeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
name|getPathNodeMap
parameter_list|()
block|{
return|return
name|pathNodeMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|AddNodeInstruction
name|instruction
parameter_list|)
block|{
name|String
name|path
init|=
name|instruction
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|getStagedNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|parentNodePath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeMongo
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|parentNodePath
argument_list|)
condition|)
block|{
name|parent
operator|=
name|getStoredNode
argument_list|(
name|parentNodePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No such parent: "
operator|+
name|PathUtils
operator|.
name|getName
argument_list|(
name|parentNodePath
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|parent
operator|.
name|childExists
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There's already a child node with name '"
operator|+
name|nodeName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|parent
operator|=
name|getStagedNode
argument_list|(
name|parentNodePath
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addChild
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|AddPropertyInstruction
name|instruction
parameter_list|)
block|{
name|NodeMongo
name|node
init|=
name|getStagedNode
argument_list|(
name|instruction
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|addProperty
argument_list|(
name|instruction
operator|.
name|getKey
argument_list|()
argument_list|,
name|instruction
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|CopyNodeInstruction
name|instruction
parameter_list|)
block|{
name|String
name|srcPath
init|=
name|instruction
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|String
name|destPath
init|=
name|instruction
operator|.
name|getDestPath
argument_list|()
decl_stmt|;
name|String
name|srcParentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|srcNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|destParentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|String
name|destNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|NodeMongo
name|srcParent
init|=
name|pathNodeMap
operator|.
name|get
argument_list|(
name|srcParentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcParent
operator|==
literal|null
condition|)
block|{
comment|// The subtree to be copied has not been modified
name|boolean
name|entryExists
init|=
name|getStoredNode
argument_list|(
name|srcParentPath
argument_list|)
operator|.
name|childExists
argument_list|(
name|srcNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entryExists
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not found: "
operator|+
name|srcPath
argument_list|)
throw|;
block|}
name|NodeMongo
name|destParent
init|=
name|getStagedNode
argument_list|(
name|destParentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|destParent
operator|.
name|childExists
argument_list|(
name|destNodeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Node already exists at copy destination path: "
operator|+
name|destPath
argument_list|)
throw|;
block|}
comment|// Copy src node to destPath.
name|NodeMongo
name|srcNode
init|=
name|getStoredNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|NodeMongo
name|destNode
init|=
name|NodeMongo
operator|.
name|fromDBObject
argument_list|(
name|srcNode
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setPath
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
comment|// FIXME - [Mete] This needs to do proper merge instead of just add.
name|List
argument_list|<
name|String
argument_list|>
name|addedChildren
init|=
name|srcNode
operator|.
name|getAddedChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|addedChildren
operator|!=
literal|null
operator|&&
operator|!
name|addedChildren
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|addedChildren
control|)
block|{
name|getStagedNode
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|destPath
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|destNode
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|pathNodeMap
operator|.
name|put
argument_list|(
name|destPath
argument_list|,
name|destNode
argument_list|)
expr_stmt|;
comment|// Add to destParent.
name|destParent
operator|.
name|addChild
argument_list|(
name|destNodeName
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|srcEntryExists
init|=
name|srcParent
operator|.
name|childExists
argument_list|(
name|srcNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcEntryExists
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|srcPath
argument_list|)
throw|;
block|}
comment|// FIXME - [Mete] The rest is not totally correct.
name|NodeMongo
name|destParent
init|=
name|getStagedNode
argument_list|(
name|destParentPath
argument_list|)
decl_stmt|;
name|NodeMongo
name|srcNode
init|=
name|getStagedNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcNode
operator|!=
literal|null
condition|)
block|{
comment|// Copy the modified subtree
name|NodeMongo
name|destNode
init|=
name|NodeMongo
operator|.
name|fromDBObject
argument_list|(
name|srcNode
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setPath
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|put
argument_list|(
name|destPath
argument_list|,
name|destNode
argument_list|)
expr_stmt|;
name|destParent
operator|.
name|addChild
argument_list|(
name|destNodeName
argument_list|)
expr_stmt|;
comment|//destParent.add(destNodeName, srcNode.copy());
block|}
else|else
block|{
name|NodeMongo
name|destNode
init|=
name|NodeMongo
operator|.
name|fromDBObject
argument_list|(
name|srcNode
argument_list|)
decl_stmt|;
name|destNode
operator|.
name|setPath
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|put
argument_list|(
name|destPath
argument_list|,
name|destNode
argument_list|)
expr_stmt|;
name|destParent
operator|.
name|addChild
argument_list|(
name|destNodeName
argument_list|)
expr_stmt|;
comment|//destParent.add(new ChildNodeEntry(destNodeName, srcEntry.getId()));
block|}
comment|// [Mete] Old code from Philipp.
comment|// retrieve all nodes beyond and add them as new children to the dest location
comment|//        List<NodeMongo> childNodesToCopy = new FetchNodesByPathAndDepthQuery(mongoConnection, srcPath,
comment|//                revisionId, -1).execute();
comment|//        for (NodeMongo nodeMongo : childNodesToCopy) {
comment|//            String oldPath = nodeMongo.getPath();
comment|//            String oldPathRel = PathUtils.relativize(srcPath, oldPath);
comment|//            String newPath = PathUtils.concat(destPath, oldPathRel);
comment|//
comment|//            nodeMongo.setPath(newPath);
comment|//            nodeMongo.removeField("_id");
comment|//            pathNodeMap.put(newPath, nodeMongo);
comment|//        }
comment|// tricky part now: In case we already know about any changes to these existing nodes we need to merge
comment|// those now.
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|MoveNodeInstruction
name|instruction
parameter_list|)
block|{
name|String
name|srcPath
init|=
name|instruction
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|String
name|destPath
init|=
name|instruction
operator|.
name|getDestPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|srcPath
argument_list|,
name|destPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Target path cannot be descendant of source path: "
operator|+
name|destPath
argument_list|)
throw|;
block|}
name|String
name|srcParentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|srcNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|destParentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
name|String
name|destNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
comment|// Add the old node with the new path.
name|NodeMongo
name|destNode
init|=
name|pathNodeMap
operator|.
name|get
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|destNode
operator|==
literal|null
condition|)
block|{
name|NodeMongo
name|srcNode
init|=
name|getStoredNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|destNode
operator|=
name|srcNode
expr_stmt|;
name|destNode
operator|.
name|setPath
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|remove
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|put
argument_list|(
name|destPath
argument_list|,
name|destNode
argument_list|)
expr_stmt|;
block|}
comment|// [Mete] Check that this works in all cases.
comment|// Remove all the pending old node child changes.
name|Map
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
name|pendingChanges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
argument_list|>
name|iterator
init|=
name|pathNodeMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeMongo
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeMongo
name|node
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|String
name|newPath
init|=
name|destPath
operator|+
name|path
operator|.
name|substring
argument_list|(
name|srcPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|setPath
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|pendingChanges
operator|.
name|put
argument_list|(
name|newPath
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|pathNodeMap
operator|.
name|putAll
argument_list|(
name|pendingChanges
argument_list|)
expr_stmt|;
comment|// Remove from srcParent - [Mete] What if there is no such child?
name|NodeMongo
name|scrParentNode
init|=
name|getStoredNode
argument_list|(
name|srcParentPath
argument_list|)
decl_stmt|;
name|scrParentNode
operator|.
name|removeChild
argument_list|(
name|srcNodeName
argument_list|)
expr_stmt|;
comment|// Add to destParent
name|NodeMongo
name|destParentNode
init|=
name|getStoredNode
argument_list|(
name|destParentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|destParentNode
operator|.
name|childExists
argument_list|(
name|destNodeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Node already exists at move destination path: "
operator|+
name|destPath
argument_list|)
throw|;
block|}
name|destParentNode
operator|.
name|addChild
argument_list|(
name|destNodeName
argument_list|)
expr_stmt|;
comment|// [Mete] Siblings?
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|RemoveNodeInstruction
name|instruction
parameter_list|)
block|{
name|String
name|path
init|=
name|instruction
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeMongo
name|parentNode
init|=
name|getStoredNode
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentNode
operator|.
name|childExists
argument_list|(
name|childName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|path
argument_list|)
throw|;
block|}
name|parentNode
operator|.
name|removeChild
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|SetPropertyInstruction
name|instruction
parameter_list|)
block|{
name|String
name|path
init|=
name|instruction
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|instruction
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|instruction
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeMongo
name|node
init|=
name|getStagedNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|removeProp
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|addProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO - [Mete] I think we need a way to distinguish between Staged
comment|// and Stored nodes. For example, what if a node is retrieved as Staged
comment|// but later it needs to be retrieved as Stored?
specifier|private
name|NodeMongo
name|getStagedNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeMongo
name|node
init|=
name|pathNodeMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|NodeMongo
argument_list|()
expr_stmt|;
name|node
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|NodeMongo
name|getStoredNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeMongo
name|node
init|=
name|pathNodeMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|FetchNodeByPathQuery
name|query
init|=
operator|new
name|FetchNodeByPathQuery
argument_list|(
name|mongoConnection
argument_list|,
name|path
argument_list|,
name|headRevisionId
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|removeField
argument_list|(
literal|"_id"
argument_list|)
expr_stmt|;
name|pathNodeMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|node
return|;
block|}
block|}
end_class

end_unit

