begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessTestUtils
operator|.
name|storeBinaryAndRetrieve
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|binary
operator|.
name|BinaryUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|FileDataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|DocumentMemoryNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|SegmentMemoryNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test binary upload / download capabilities of the {@link JackrabbitValueFactory} interface when the underlying  * implementation does not support these features.  If the underlying doesn't support these features the implementation  * will return null when the methods are called and clients are expected to check for null to determine if the  * features are supported.  */
end_comment

begin_class
specifier|public
class|class
name|BinaryAccessUnsupportedIT
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
name|JackrabbitValueFactory
name|uploadProvider
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|dataStoreFixtures
parameter_list|()
block|{
name|Collection
argument_list|<
name|NodeStoreFixture
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Create a fixture using FileDataStore.  FileDataStore doesn't support the direct access features so
comment|// it should be a valid real-world example of how the API should behave when the implementation doesn't
comment|// have the feature support.
name|FileDataStoreFixture
name|fds
init|=
operator|new
name|FileDataStoreFixture
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|SegmentMemoryNodeStoreFixture
argument_list|(
name|fds
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|DocumentMemoryNodeStoreFixture
argument_list|(
name|fds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fixtures
return|;
block|}
specifier|public
name|BinaryAccessUnsupportedIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|uploadProvider
operator|=
operator|(
name|JackrabbitValueFactory
operator|)
name|getAdminSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
name|createRepository
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|getNodeStoreComponent
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|!=
literal|null
operator|&&
name|blobStore
operator|instanceof
name|BlobAccessProvider
condition|)
block|{
name|wb
operator|.
name|register
argument_list|(
name|BlobAccessProvider
operator|.
name|class
argument_list|,
operator|(
name|BlobAccessProvider
operator|)
name|blobStore
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|initJcr
argument_list|(
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
name|wb
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateUploadUnsupportedReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|BinaryUpload
name|upload
init|=
name|uploadProvider
operator|.
name|initiateBinaryUpload
argument_list|(
literal|1024
operator|*
literal|20
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|upload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteUploadUnsupportedReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Binary
name|binary
init|=
name|uploadProvider
operator|.
name|completeBinaryUpload
argument_list|(
literal|"fake_token"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|binary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIUnsupportedReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Content
name|content
init|=
name|Content
operator|.
name|createRandom
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
decl_stmt|;
name|Binary
name|binary
init|=
name|storeBinaryAndRetrieve
argument_list|(
name|getAdminSession
argument_list|()
argument_list|,
literal|"/my_path"
argument_list|,
name|content
argument_list|)
decl_stmt|;
comment|// the returned binary could not be implementing BinaryDownload...
if|if
condition|(
name|binary
operator|instanceof
name|BinaryDownload
condition|)
block|{
comment|// ...or implement it but return null on getURI()
name|URI
name|downloadURI
init|=
operator|(
operator|(
name|BinaryDownload
operator|)
name|binary
operator|)
operator|.
name|getURI
argument_list|(
name|BinaryDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|downloadURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

