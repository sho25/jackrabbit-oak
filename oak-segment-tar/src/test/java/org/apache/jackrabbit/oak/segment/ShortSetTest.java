begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordIdSet
operator|.
name|ShortSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ShortSetTest
block|{
specifier|private
specifier|final
name|ShortSet
name|set
init|=
operator|new
name|ShortSet
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|empty
parameter_list|()
block|{
for|for
control|(
name|short
name|k
init|=
name|Short
operator|.
name|MIN_VALUE
init|;
name|k
operator|<
name|Short
operator|.
name|MAX_VALUE
condition|;
name|k
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addOne
parameter_list|()
block|{
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addTwo
parameter_list|()
block|{
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|s
argument_list|(
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addTwoReverse
parameter_list|()
block|{
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|s
argument_list|(
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|s
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirst
parameter_list|()
block|{
name|short
index|[]
name|elements
init|=
operator|new
name|short
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|0
block|}
decl_stmt|;
name|addAndCheck
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLast
parameter_list|()
block|{
name|short
index|[]
name|elements
init|=
operator|new
name|short
index|[]
block|{
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|,
literal|0
block|,
literal|9
block|}
decl_stmt|;
name|addAndCheck
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMedian
parameter_list|()
block|{
name|short
index|[]
name|elements
init|=
operator|new
name|short
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|5
block|}
decl_stmt|;
name|addAndCheck
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addRandom
parameter_list|()
block|{
name|short
index|[]
name|elements
init|=
operator|new
name|short
index|[
literal|8192
index|]
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|elements
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|elements
index|[
name|k
index|]
operator|=
name|s
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|Short
operator|.
name|MAX_VALUE
operator|-
name|Short
operator|.
name|MIN_VALUE
argument_list|)
operator|+
name|Short
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
name|addAndCheck
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAndCheck
parameter_list|(
name|short
index|[]
name|elements
parameter_list|)
block|{
for|for
control|(
name|short
name|k
range|:
name|elements
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|short
name|k
range|:
name|elements
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|short
name|s
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|n
return|;
block|}
block|}
end_class

end_unit

