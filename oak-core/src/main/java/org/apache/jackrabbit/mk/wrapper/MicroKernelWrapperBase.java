begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_comment
comment|/**  * A MicroKernel implementation that extends this interface can use a JsopReader  * instead of having to use strings.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MicroKernelWrapperBase
implements|implements
name|MicroKernel
implements|,
name|MicroKernelWrapper
block|{
specifier|public
specifier|final
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|commitStream
argument_list|(
name|path
argument_list|,
operator|new
name|JsopTokenizer
argument_list|(
name|jsonDiff
argument_list|)
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|getJournalStream
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
name|getNodesStream
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|getNodesStream
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|filter
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|diffStream
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|String
name|getRevisions
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
return|return
name|getRevisionsStream
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Wrap a MicroKernel implementation so that the MicroKernelWrapper      * interface can be used.      *      * @param mk the MicroKernel implementation to wrap      * @return the wrapped instance      */
specifier|public
specifier|static
name|MicroKernelWrapper
name|wrap
parameter_list|(
specifier|final
name|MicroKernel
name|mk
parameter_list|)
block|{
if|if
condition|(
name|mk
operator|instanceof
name|MicroKernelWrapper
condition|)
block|{
return|return
operator|(
name|MicroKernelWrapper
operator|)
name|mk
return|;
block|}
return|return
operator|new
name|MicroKernelWrapper
argument_list|()
block|{
name|MicroKernel
name|wrapped
init|=
name|mk
decl_stmt|;
specifier|public
name|String
name|commitStream
parameter_list|(
name|String
name|path
parameter_list|,
name|JsopReader
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|commit
argument_list|(
name|path
argument_list|,
name|jsonDiff
operator|.
name|toString
argument_list|()
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getJournalStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
operator|new
name|JsopTokenizer
argument_list|(
name|wrapped
operator|.
name|getJournal
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getNodesStream
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
operator|new
name|JsopTokenizer
argument_list|(
name|wrapped
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getNodesStream
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
operator|new
name|JsopTokenizer
argument_list|(
name|wrapped
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|filter
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getRevisionsStream
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
return|return
operator|new
name|JsopTokenizer
argument_list|(
name|wrapped
operator|.
name|getRevisions
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|diffStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|JsopTokenizer
argument_list|(
name|wrapped
operator|.
name|diff
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|commit
argument_list|(
name|path
argument_list|,
name|jsonDiff
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|diff
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|wrapped
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
return|return
name|wrapped
operator|.
name|getHeadRevision
argument_list|()
return|;
block|}
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getJournal
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRevisions
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getRevisions
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
return|;
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getChildNodeCount
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|wrapped
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevisionId
argument_list|,
name|maxWaitMillis
argument_list|)
return|;
block|}
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|write
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

