begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|joran
operator|.
name|JoranConfigurator
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|util
operator|.
name|ContextInitializer
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|joran
operator|.
name|spi
operator|.
name|JoranException
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|util
operator|.
name|StatusPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Configures the logging based on logback-{logIdentifier}.xml specified. This file  * would be copied to work directory and then logging would be  * configured based on that  *  * The log file is configured for auto scan so any change made while  * oak-run is in progress would be picked up  */
end_comment

begin_class
specifier|public
class|class
name|LoggingInitializer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOGBACK_XML_PREFIX
init|=
literal|"logback-"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
specifier|final
name|String
name|config
decl_stmt|;
specifier|private
specifier|final
name|String
name|logIdentifier
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|doReset
decl_stmt|;
specifier|public
name|LoggingInitializer
parameter_list|(
name|File
name|workDir
parameter_list|,
name|String
name|logIdentifier
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|logIdentifier
operator|=
name|logIdentifier
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|LOGBACK_XML_PREFIX
operator|+
name|logIdentifier
operator|+
literal|".xml"
expr_stmt|;
name|this
operator|.
name|doReset
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|LoggingInitializer
parameter_list|(
name|File
name|workDir
parameter_list|,
name|String
name|logIdentifier
parameter_list|,
name|boolean
name|reset
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|logIdentifier
operator|=
name|logIdentifier
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|LOGBACK_XML_PREFIX
operator|+
name|logIdentifier
operator|+
literal|".xml"
expr_stmt|;
name|this
operator|.
name|doReset
operator|=
name|reset
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|//If custom config file defined then disable the default logic
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|ContextInitializer
operator|.
name|CONFIG_FILE_PROPERTY
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|config
init|=
name|copyDefaultConfig
argument_list|()
decl_stmt|;
name|configureLogback
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Logging configured from {}"
argument_list|,
name|config
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Any change in logging config would be picked up"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Logs would be written to {}"
argument_list|,
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|logIdentifier
operator|+
literal|".log"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|shutdownLogging
parameter_list|()
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
decl_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|configureLogback
parameter_list|(
name|File
name|config
parameter_list|)
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|JoranConfigurator
name|configurator
init|=
operator|new
name|JoranConfigurator
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"oak.workDir"
argument_list|,
name|FilenameUtils
operator|.
name|normalizeNoEndSeparator
argument_list|(
name|workDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call context.reset() to clear any previous configuration, e.g. default
comment|// configuration. For multi-step configuration, omit calling context.reset().
if|if
condition|(
name|doReset
condition|)
block|{
name|context
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|configurator
operator|.
name|doConfigure
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JoranException
name|je
parameter_list|)
block|{
comment|// StatusPrinter will handle this
block|}
name|StatusPrinter
operator|.
name|printInCaseOfErrorsOrWarnings
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|copyDefaultConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/"
operator|+
name|config
argument_list|)
decl_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|config
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
name|FileUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|is
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
block|}
end_class

end_unit

