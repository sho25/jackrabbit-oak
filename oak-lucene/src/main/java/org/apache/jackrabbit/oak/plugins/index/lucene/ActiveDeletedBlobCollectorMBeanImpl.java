begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|ActiveDeletedBlobCollectorFactory
operator|.
name|ActiveDeletedBlobCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|initiated
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|done
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|newManagementOperation
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveDeletedBlobCollectorMBeanImpl
implements|implements
name|ActiveDeletedBlobCollectorMBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveDeletedBlobCollectorMBeanImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OP_NAME
init|=
literal|"Active lucene index blobs collection"
decl_stmt|;
comment|/**      * Actively deleted blob must be deleted for at least this long (in seconds)      */
specifier|private
specifier|final
name|long
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.active.deletion.minAge"
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toSeconds
argument_list|(
literal|24
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
name|ManagementOperation
argument_list|<
name|Void
argument_list|>
name|gcOp
init|=
name|done
argument_list|(
name|OP_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**      * @param activeDeletedBlobCollector    deleted index blobs collector      * @param executor                      executor for running the collection task      */
specifier|public
name|ActiveDeletedBlobCollectorMBeanImpl
parameter_list|(
annotation|@
name|Nonnull
name|ActiveDeletedBlobCollector
name|activeDeletedBlobCollector
parameter_list|,
annotation|@
name|Nonnull
name|Whiteboard
name|whiteboard
parameter_list|,
annotation|@
name|Nonnull
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
annotation|@
name|Nonnull
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|activeDeletedBlobCollector
operator|=
name|checkNotNull
argument_list|(
name|activeDeletedBlobCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|checkNotNull
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|checkNotNull
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active blob collector initialized with minAge: {}"
argument_list|,
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|CompositeData
name|startActiveCollection
parameter_list|()
block|{
if|if
condition|(
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|long
name|safeTimestampForDeletedBlobs
init|=
name|getSafeTimestampForDeletedBlobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|safeTimestampForDeletedBlobs
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" couldn't be run as a safe timestamp for"
operator|+
literal|" purging lucene index blobs couldn't be evaluated"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
name|gcOp
operator|=
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
parameter_list|()
lambda|->
block|{
name|activeDeletedBlobCollector
operator|.
name|purgeBlobsDeleted
argument_list|(
name|safeTimestampForDeletedBlobs
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|gcOp
argument_list|)
expr_stmt|;
return|return
name|initiated
argument_list|(
name|gcOp
argument_list|,
name|OP_NAME
operator|+
literal|" started"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" already running"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|CompositeData
name|cancelActiveCollection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|gcOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
call|(
name|Callable
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|gcOp
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
block|;
name|activeDeletedBlobCollector
operator|.
name|cancelBlobCollection
argument_list|()
argument_list|;
return|return
literal|null
return|;
block|}
block|)
block|)
class|;
end_class

begin_return
return|return
name|initiated
argument_list|(
name|gcOp
argument_list|,
literal|"Active lucene index blobs collection cancelled"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
end_return

begin_block
unit|} else
block|{
return|return
name|failed
argument_list|(
name|OP_NAME
operator|+
literal|" not running"
argument_list|)
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
end_block

begin_function
unit|}      @
name|Nonnull
annotation|@
name|Override
specifier|public
name|CompositeData
name|getActiveCollectionStatus
parameter_list|()
block|{
return|return
name|gcOp
operator|.
name|getStatus
argument_list|()
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|getSafeTimestampForDeletedBlobs
parameter_list|()
block|{
name|long
name|timestamp
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|MIN_BLOB_AGE_TO_ACTIVELY_DELETE
argument_list|)
decl_stmt|;
name|long
name|minCheckpointTimestamp
init|=
name|getOldestCheckpointCreationTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|minCheckpointTimestamp
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|minCheckpointTimestamp
return|;
block|}
if|if
condition|(
name|minCheckpointTimestamp
operator|<
name|timestamp
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Oldest checkpoint timestamp ({}) is older than buffer period ({}) for deleted blobs."
operator|+
literal|" Using that instead"
argument_list|,
name|minCheckpointTimestamp
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|minCheckpointTimestamp
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|getOldestCheckpointCreationTimestamp
parameter_list|()
block|{
name|Tracker
argument_list|<
name|CheckpointMBean
argument_list|>
name|tracker
init|=
name|whiteboard
operator|.
name|track
argument_list|(
name|CheckpointMBean
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|CheckpointMBean
argument_list|>
name|services
init|=
name|tracker
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOldestCheckpointCreationTimestamp
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|services
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get checkpoint mbean. No service of required type found."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get checkpoint mbean. Multiple services of required type found."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
finally|finally
block|{
name|tracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

