begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
specifier|public
class|class
name|IndexManagerImpl
implements|implements
name|IndexManager
block|{
comment|// TODO implement an observation listener so that the {@link
comment|// IndexManagerImpl} automatically creates new indexes based on new nodes
comment|// added under {@link #indexConfigPath}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexConfigPath
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexFactory
argument_list|>
name|indexFactories
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|IndexFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|IndexDefinition
argument_list|,
name|Index
argument_list|>
name|indexes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|IndexDefinition
argument_list|,
name|Index
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|IndexManagerImpl
parameter_list|(
name|String
name|indexConfigPath
parameter_list|,
name|ContentSession
name|session
parameter_list|,
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|indexConfigPath
operator|=
name|indexConfigPath
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerIndexFactory
parameter_list|(
name|IndexFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|init
argument_list|(
name|mk
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|factory
operator|.
name|getTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|indexFactories
operator|.
name|remove
argument_list|(
name|type
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TODO is override allowed?
block|}
name|indexFactories
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|//
comment|// TODO hardwire default property indexes first ?
comment|// registerIndexFactory(type, factory);
name|Tree
name|definitions
init|=
name|session
operator|.
name|getCurrentRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|indexConfigPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|definitions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|IndexDefinition
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|c
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|IndexDefinition
name|def
init|=
name|IndexUtils
operator|.
name|getDefs
argument_list|(
name|indexConfigPath
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping illegal index definition name {} @ {}"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|indexConfigPath
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|indexes
operator|.
name|get
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping existing index definition name {} @ {}"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|indexConfigPath
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|defs
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
name|registerIndex
argument_list|(
name|defs
operator|.
name|toArray
argument_list|(
operator|new
name|IndexDefinition
index|[
name|defs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerIndex
parameter_list|(
name|IndexDefinition
modifier|...
name|indexDefinition
parameter_list|)
block|{
for|for
control|(
name|IndexDefinition
name|def
range|:
name|indexDefinition
control|)
block|{
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|IndexFactory
name|f
init|=
name|indexFactories
operator|.
name|get
argument_list|(
name|def
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unknown index definition type {}, name {} @ {}"
argument_list|,
operator|new
name|String
index|[]
block|{
name|def
operator|.
name|getType
argument_list|()
block|,
name|indexConfigPath
block|,
name|def
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Index
name|index
init|=
name|f
operator|.
name|createIndex
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|indexes
operator|.
name|put
argument_list|(
name|def
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IndexDefinition
argument_list|>
name|getIndexes
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|indexes
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|IndexDefinition
argument_list|>
name|iterator
init|=
name|indexes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IndexDefinition
name|id
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|indexes
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing index {}"
argument_list|,
name|id
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

