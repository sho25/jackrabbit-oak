begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractSharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents an upload token returned by  * {@link DataRecordAccessProvider#initiateDataRecordUpload(long, int)} and  * used in subsequent calls to {@link  * DataRecordAccessProvider#completeDataRecordUpload(String)}.  This class  * handles creation, signing, and parsing of the token and uses a provided  * secret key to sign the contents of the token and to validate contents of  * tokens.  */
end_comment

begin_class
specifier|public
class|class
name|DataRecordUploadToken
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataRecordUploadToken
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|blobId
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|uploadId
decl_stmt|;
comment|/**      * Create an upload token from the provided {@code blobId} and {@code      * uploadId}.  At creation time the token is not encoded or signed; to do      * that call {@link #getEncodedToken(byte[])} after creating the token.      *      * @param blobId The blob ID, usually a {@link      *        org.apache.jackrabbit.core.data.DataIdentifier}.      * @param uploadId A free-form string used to identify this upload.  This      *        may be provided by the service provider; if not a free-form      *        upload ID generated by the implementation will suffice.  May be      *        {@code null} if no upload ID is available.  However, some service      *        providers will require an upload ID to complete the upload so be      *        sure to check whether the service provider API provides one and      *        use that if it is available.      */
specifier|public
name|DataRecordUploadToken
parameter_list|(
annotation|@
name|NotNull
name|String
name|blobId
parameter_list|,
annotation|@
name|Nullable
name|String
name|uploadId
parameter_list|)
block|{
name|this
operator|.
name|blobId
operator|=
name|blobId
expr_stmt|;
name|this
operator|.
name|uploadId
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an upload token instance from the provided encoded token string,      * using the provided secret key to verify the string.  The encoded token      * string should have been created originally by a prior call to {@link      * #getEncodedToken(byte[])}.      *<p>      * This method will parse and validate the contents of the provided encoded      * token string.  An instance of this class is returned if the parsing and      * validation is successful.      *<p>      * A secret key is required to verify the encoded token.  You are strongly      * encouraged to use the secret key used by the data store backend      * implementation.  This key can be obtained by calling {@link      * AbstractSharedBackend#getOrCreateReferenceKey()}.      *      * @param encoded The encoded, signed token string.      * @param secret The secret key to be used to verify the contents of the      *         token string.      * @return A new instance containing the parsed upload token propreties.      * @throws IllegalArgumentException if the token string cannot be parsed or      *         if validation fails.      */
specifier|public
specifier|static
name|DataRecordUploadToken
name|fromEncodedToken
parameter_list|(
annotation|@
name|NotNull
name|String
name|encoded
parameter_list|,
annotation|@
name|NotNull
name|byte
index|[]
name|secret
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|parts
init|=
name|encoded
operator|.
name|split
argument_list|(
literal|"#"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Encoded string is missing the signature"
argument_list|)
throw|;
block|}
name|String
name|toBeDecoded
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|expectedSig
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|String
name|actualSig
init|=
name|getSignedString
argument_list|(
name|toBeDecoded
argument_list|,
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedSig
operator|.
name|equals
argument_list|(
name|actualSig
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Upload token signature does not match"
argument_list|)
throw|;
block|}
name|String
name|decoded
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|toBeDecoded
argument_list|)
decl_stmt|;
name|String
name|decodedParts
index|[]
init|=
name|decoded
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|decodedParts
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not all upload token parts provided"
argument_list|)
throw|;
block|}
return|return
operator|new
name|DataRecordUploadToken
argument_list|(
name|decodedParts
index|[
literal|0
index|]
argument_list|,
name|decodedParts
operator|.
name|length
operator|>
literal|2
condition|?
name|decodedParts
index|[
literal|2
index|]
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**      * Generate an encoded, signed token string from this instance.  The      * resulting token can later be parsed and validated by {@link      * #fromEncodedToken(String, byte[])}.      *<p>      * A secret key is required to generate the encoded token.  You are strongly      * encouraged to use the secret key used by the data store backend      * implementation.  This key can be obtained by calling {@link      * AbstractSharedBackend#getOrCreateReferenceKey()}.      *      * @param secret The secret key used to sign the contents of the token.      * @return An encoded token string that can later be used to uniquely and      *         securely identify an upload.      */
specifier|public
name|String
name|getEncodedToken
parameter_list|(
annotation|@
name|NotNull
name|byte
index|[]
name|secret
parameter_list|)
block|{
name|String
name|now
init|=
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|toBeEncoded
init|=
name|uploadId
operator|.
name|isPresent
argument_list|()
condition|?
name|Joiner
operator|.
name|on
argument_list|(
literal|"#"
argument_list|)
operator|.
name|join
argument_list|(
name|blobId
argument_list|,
name|now
argument_list|,
name|uploadId
operator|.
name|get
argument_list|()
argument_list|)
else|:
name|Joiner
operator|.
name|on
argument_list|(
literal|"#"
argument_list|)
operator|.
name|join
argument_list|(
name|blobId
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|String
name|toBeSigned
init|=
name|Base64
operator|.
name|encode
argument_list|(
name|toBeEncoded
argument_list|)
decl_stmt|;
name|String
name|sig
init|=
name|getSignedString
argument_list|(
name|toBeSigned
argument_list|,
name|secret
argument_list|)
decl_stmt|;
return|return
name|sig
operator|!=
literal|null
condition|?
name|Joiner
operator|.
name|on
argument_list|(
literal|"#"
argument_list|)
operator|.
name|join
argument_list|(
name|toBeSigned
argument_list|,
name|sig
argument_list|)
else|:
name|toBeSigned
return|;
block|}
specifier|private
specifier|static
name|String
name|getSignedString
parameter_list|(
name|String
name|toBeSigned
parameter_list|,
name|byte
index|[]
name|secret
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|algorithm
init|=
literal|"HmacSHA1"
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|secret
argument_list|,
name|algorithm
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hash
init|=
name|mac
operator|.
name|doFinal
argument_list|(
name|toBeSigned
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|hash
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
decl||
name|InvalidKeyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not sign upload token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the blob ID of this instance.      *      * @return The blob ID.      */
specifier|public
name|String
name|getBlobId
parameter_list|()
block|{
return|return
name|blobId
return|;
block|}
comment|/**      * Returns the upload ID of this instance.      *      * @return The upload ID.      */
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getUploadId
parameter_list|()
block|{
return|return
name|uploadId
return|;
block|}
block|}
end_class

end_unit

