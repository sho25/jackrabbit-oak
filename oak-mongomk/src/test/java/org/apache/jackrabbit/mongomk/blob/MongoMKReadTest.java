begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|MicroKernelInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|AbstractMongoConnectionTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
operator|.
name|MongoMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * Tests for {@code MongoMicroKernel#read(String, long, byte[], int, int)}  */
end_comment

begin_class
specifier|public
class|class
name|MongoMKReadTest
extends|extends
name|AbstractMongoConnectionTest
block|{
specifier|private
name|MongoMK
name|mk
decl_stmt|;
specifier|private
name|byte
index|[]
name|blob
decl_stmt|;
specifier|private
name|String
name|blobId
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|DB
name|db
init|=
name|mongoConnection
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|mk
operator|=
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|db
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|small
parameter_list|()
throws|throws
name|Exception
block|{
name|read
argument_list|(
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|medium
parameter_list|()
throws|throws
name|Exception
block|{
name|read
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|large
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Skip range tests for large blobs for now as it's complicated with
comment|// block size.
name|read
argument_list|(
literal|20
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|read
parameter_list|(
name|int
name|blobLength
parameter_list|,
name|boolean
name|skipRangeTests
parameter_list|)
throws|throws
name|Exception
block|{
name|createAndWriteBlob
argument_list|(
name|blobLength
argument_list|)
expr_stmt|;
comment|// Complete read.
name|byte
index|[]
name|buffer
init|=
name|MicroKernelInputStream
operator|.
name|readFully
argument_list|(
name|mk
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blob
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipRangeTests
condition|)
block|{
return|return;
block|}
comment|// Range end from end.
name|buffer
operator|=
operator|new
name|byte
index|[
name|blob
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
name|int
name|totalBytes
init|=
name|mk
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
operator|(
name|blob
operator|.
name|length
operator|/
literal|2
operator|)
operator|-
literal|1
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|length
operator|/
literal|2
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
index|[
operator|(
operator|(
name|blob
operator|.
name|length
operator|/
literal|2
operator|)
operator|-
literal|1
operator|)
operator|+
name|i
index|]
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Range from start.
name|buffer
operator|=
operator|new
name|byte
index|[
name|blob
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
name|totalBytes
operator|=
name|mk
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|blob
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
operator|.
name|length
operator|/
literal|2
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blob
index|[
name|i
index|]
argument_list|,
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createAndWriteBlob
parameter_list|(
name|int
name|blobLength
parameter_list|)
throws|throws
name|Exception
block|{
name|blob
operator|=
operator|new
name|byte
index|[
name|blobLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blob
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blob
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|1
expr_stmt|;
block|}
name|blobId
operator|=
name|mk
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|blob
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

