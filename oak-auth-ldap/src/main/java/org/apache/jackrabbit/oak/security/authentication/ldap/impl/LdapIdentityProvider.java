begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|constants
operator|.
name|SchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|cursor
operator|.
name|CursorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|cursor
operator|.
name|SearchCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapAuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapInvalidAttributeValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|SearchRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|SearchResultEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|SearchScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|PoolableLdapConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code LdapIdentityProvider} implements an external identity provider that reads users and groups from an ldap  * source.  *  * Please refer to {@link LdapProviderConfig} for configuration options.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
comment|// note that the metatype information is generated from LdapProviderConfig
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|LdapIdentityProvider
implements|implements
name|ExternalIdentityProvider
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdapIdentityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * internal configuration      */
specifier|private
name|LdapProviderConfig
name|config
decl_stmt|;
comment|/**      * the connection pool with connections authenticated with the bind DN      */
specifier|private
name|LdapConnectionPool
name|adminPool
decl_stmt|;
comment|/**      * the connection pool with unbound connections      */
specifier|private
name|UnboundLdapConnectionPool
name|userPool
decl_stmt|;
comment|/**      * Default constructor for OSGi      */
specifier|public
name|LdapIdentityProvider
parameter_list|()
block|{     }
comment|/**      * Constructor for non-OSGi cases.      * @param config the configuration      */
specifier|public
name|LdapIdentityProvider
parameter_list|(
name|LdapProviderConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|ConfigurationParameters
name|cfg
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|config
operator|=
name|LdapProviderConfig
operator|.
name|of
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the ldap identity provider.      */
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|adminPool
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Provider already initialized."
argument_list|)
throw|;
block|}
comment|// setup admin connection pool
name|LdapConnectionConfig
name|cc
init|=
operator|new
name|LdapConnectionConfig
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setLdapHost
argument_list|(
name|config
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setLdapPort
argument_list|(
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getBindDN
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cc
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getBindDN
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setCredentials
argument_list|(
name|config
operator|.
name|getBindPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cc
operator|.
name|setUseSsl
argument_list|(
name|config
operator|.
name|useSSL
argument_list|()
argument_list|)
expr_stmt|;
name|PoolableLdapConnectionFactory
name|factory
init|=
operator|new
name|PoolableLdapConnectionFactory
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|adminPool
operator|=
operator|new
name|LdapConnectionPool
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|adminPool
operator|.
name|setTestOnBorrow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adminPool
operator|.
name|setWhenExhaustedAction
argument_list|(
name|GenericObjectPool
operator|.
name|WHEN_EXHAUSTED_GROW
argument_list|)
expr_stmt|;
comment|// setup unbound connection pool. let's create a new version of the config
name|cc
operator|=
operator|new
name|LdapConnectionConfig
argument_list|()
expr_stmt|;
name|cc
operator|.
name|setLdapHost
argument_list|(
name|config
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setLdapPort
argument_list|(
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setUseSsl
argument_list|(
name|config
operator|.
name|useSSL
argument_list|()
argument_list|)
expr_stmt|;
name|userPool
operator|=
operator|new
name|UnboundLdapConnectionPool
argument_list|(
operator|new
name|PoolableUnboundConnectionFactory
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|userPool
operator|.
name|setTestOnBorrow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|userPool
operator|.
name|setWhenExhaustedAction
argument_list|(
name|GenericObjectPool
operator|.
name|WHEN_EXHAUSTED_GROW
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes this provider and releases the internal pool. This should be called by Non-OSGi users of this provider.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|adminPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|adminPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing LDAP connection pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|adminPool
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|userPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|userPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing LDAP connection pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|userPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|config
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalIdentity
name|getIdentity
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
operator|!
name|isMyRef
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|connection
operator|.
name|lookup
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|hasObjectClass
argument_list|(
name|config
operator|.
name|getUserConfig
argument_list|()
operator|.
name|getObjectClasses
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createUser
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|hasObjectClass
argument_list|(
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getObjectClasses
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createGroup
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"referenced identity is neither user or group: {}"
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap lookup."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|getUser
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|getEntry
argument_list|(
name|connection
argument_list|,
name|config
operator|.
name|getUserConfig
argument_list|()
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getUser({}) connect: {}us, lookup: {}us"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|userId
block|,
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000
block|,
operator|(
name|t2
operator|-
name|t1
operator|)
operator|/
literal|1000
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|createUser
argument_list|(
name|entry
argument_list|,
name|userId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap lookup."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap lookup."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalGroup
name|getGroup
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|getEntry
argument_list|(
name|connection
argument_list|,
name|config
operator|.
name|getGroupConfig
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|createGroup
argument_list|(
name|entry
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap lookup."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap lookup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap lookup."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Entry
name|getEntry
parameter_list|(
name|LdapConnection
name|connection
parameter_list|,
name|LdapProviderConfig
operator|.
name|Identity
name|idConfig
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|CursorException
throws|,
name|LdapException
block|{
name|String
name|searchFilter
init|=
name|idConfig
operator|.
name|getSearchFilter
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Create the SearchRequest object
name|SearchRequest
name|req
init|=
operator|new
name|SearchRequestImpl
argument_list|()
decl_stmt|;
name|req
operator|.
name|setScope
argument_list|(
name|SearchScope
operator|.
name|SUBTREE
argument_list|)
expr_stmt|;
name|req
operator|.
name|addAttributes
argument_list|(
name|SchemaConstants
operator|.
name|ALL_USER_ATTRIBUTES
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTimeLimit
argument_list|(
name|config
operator|.
name|getSearchTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBase
argument_list|(
operator|new
name|Dn
argument_list|(
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFilter
argument_list|(
name|searchFilter
argument_list|)
expr_stmt|;
comment|// Process the request
name|SearchCursor
name|searchCursor
init|=
name|connection
operator|.
name|search
argument_list|(
name|req
argument_list|)
decl_stmt|;
while|while
condition|(
name|searchCursor
operator|.
name|next
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
name|searchCursor
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// process the SearchResultEntry
if|if
condition|(
name|response
operator|instanceof
name|SearchResultEntry
condition|)
block|{
name|Entry
name|resultEntry
init|=
operator|(
operator|(
name|SearchResultEntry
operator|)
name|response
operator|)
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchCursor
operator|.
name|next
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"search for {} returned more than one entry. discarding additional ones."
argument_list|,
name|searchFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|idConfig
operator|.
name|getBaseDN
argument_list|()
block|,
name|searchFilter
block|,
name|resultEntry
operator|.
name|getDn
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|resultEntry
return|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found 0 entries."
argument_list|,
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|,
name|searchFilter
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ExternalUser
name|createUser
parameter_list|(
name|Entry
name|e
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|LdapInvalidAttributeValueException
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|e
operator|.
name|getDn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|e
operator|.
name|get
argument_list|(
name|config
operator|.
name|getUserConfig
argument_list|()
operator|.
name|getIdAttribute
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|LdapUser
name|user
init|=
operator|new
name|LdapUser
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|user
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attr
range|:
name|e
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|isHumanReadable
argument_list|()
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getId
argument_list|()
argument_list|,
name|attr
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|user
return|;
block|}
specifier|private
name|ExternalGroup
name|createGroup
parameter_list|(
name|Entry
name|e
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|LdapInvalidAttributeValueException
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|e
operator|.
name|getDn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|e
operator|.
name|get
argument_list|(
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getIdAttribute
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|LdapGroup
name|group
init|=
operator|new
name|LdapGroup
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|group
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attr
range|:
name|e
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|isHumanReadable
argument_list|()
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getId
argument_list|()
argument_list|,
name|attr
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|group
return|;
block|}
specifier|private
name|LdapConnection
name|connect
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
try|try
block|{
return|return
name|adminPool
operator|.
name|getConnection
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while connecting to the ldap server."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error while connecting and binding to the ldap server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|disconnect
parameter_list|(
name|LdapConnection
name|connection
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
try|try
block|{
name|adminPool
operator|.
name|releaseConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while disconnecting from the ldap server."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|authenticate
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|ExternalIdentityException
throws|,
name|LoginException
block|{
if|if
condition|(
operator|!
operator|(
name|credentials
operator|instanceof
name|SimpleCredentials
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"LDAP IDP can only authenticate SimpleCredentials."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|SimpleCredentials
name|creds
init|=
operator|(
name|SimpleCredentials
operator|)
name|credentials
decl_stmt|;
specifier|final
name|ExternalUser
name|user
init|=
name|getUser
argument_list|(
name|creds
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
comment|// authenticate
name|LdapConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|connection
operator|=
name|userPool
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|connection
operator|.
name|bind
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"authenticate({}) connect: {}us, bind: {}us"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|user
operator|.
name|getId
argument_list|()
block|,
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000
block|,
operator|(
name|t2
operator|-
name|t1
operator|)
operator|/
literal|1000
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapAuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unable to authenticate against LDAP server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error while binding user credentials"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|userPool
operator|.
name|releaseConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
return|return
name|user
return|;
block|}
specifier|private
name|boolean
name|isMyRef
parameter_list|(
name|ExternalIdentityRef
name|ref
parameter_list|)
block|{
specifier|final
name|String
name|refProviderName
init|=
name|ref
operator|.
name|getProviderName
argument_list|()
decl_stmt|;
return|return
name|refProviderName
operator|==
literal|null
operator|||
name|refProviderName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|refProviderName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

