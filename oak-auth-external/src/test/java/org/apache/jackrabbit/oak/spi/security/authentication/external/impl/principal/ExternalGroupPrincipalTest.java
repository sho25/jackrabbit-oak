begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|principal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalGroupPrincipalTest
extends|extends
name|AbstractPrincipalTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
name|GroupPrincipal
name|principal
init|=
name|getGroupPrincipal
argument_list|(
name|externalUser
operator|.
name|getDeclaredGroups
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|externalUser
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPrincipal
name|principal
init|=
name|getGroupPrincipal
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|exGroupPrincNames
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|idp
operator|.
name|listGroups
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|ExternalGroup
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|ExternalGroup
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getPrincipalName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|principalName
range|:
name|exGroupPrincNames
control|)
block|{
name|assertFalse
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPrincipal
name|principal
init|=
name|getGroupPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberLocalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|GroupPrincipal
name|principal
init|=
name|getGroupPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
name|gr
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principal
operator|.
name|isMember
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|gr
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPrincipal
name|principal
init|=
name|getGroupPrincipal
argument_list|()
decl_stmt|;
name|Principal
index|[]
name|expectedMembers
init|=
operator|new
name|Principal
index|[]
block|{
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPrincipal
argument_list|()
block|,
operator|new
name|PrincipalImpl
argument_list|(
name|idp
operator|.
name|getUser
argument_list|(
name|USER_ID
argument_list|)
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Principal
name|expected
range|:
name|expectedMembers
control|)
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
name|principal
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|members
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

