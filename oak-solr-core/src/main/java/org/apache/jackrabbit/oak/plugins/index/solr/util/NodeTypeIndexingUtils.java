begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_comment
comment|/**  * Utility class for generating a Solr synonyms file for expanding {@link javax.jcr.nodetype.NodeType}s  */
end_comment

begin_class
specifier|public
class|class
name|NodeTypeIndexingUtils
block|{
specifier|public
specifier|static
name|File
name|createPrimaryTypeSynonymsFile
parameter_list|(
name|String
name|path
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|allNodeTypes
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|allNodeTypes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|nodeType
init|=
name|allNodeTypes
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|superTypes
init|=
name|nodeType
operator|.
name|getSupertypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|superTypes
operator|!=
literal|null
operator|&&
name|superTypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|stringWriter
operator|.
name|append
argument_list|(
name|nodeType
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|superTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stringWriter
operator|.
name|append
argument_list|(
name|superTypes
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|superTypes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|stringWriter
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|stringWriter
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|stringWriter
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|FileOutputStream
name|fileOutputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileOutputStream
operator|.
name|write
argument_list|(
name|stringWriter
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|fileOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fileOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
return|return
name|file
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"primary types synonyms file could not be created"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

