begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|nodestate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|EmbeddedSolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|RemoteSolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfigurationDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|server
operator|.
name|SolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateSolrServerConfigurationProvider
implements|implements
name|SolrServerConfigurationProvider
block|{
specifier|private
specifier|final
name|NodeState
name|nodeState
decl_stmt|;
specifier|public
name|NodeStateSolrServerConfigurationProvider
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|nodeState
operator|=
name|nodeState
expr_stmt|;
if|if
condition|(
operator|!
name|nodeState
operator|.
name|hasProperty
argument_list|(
name|Properties
operator|.
name|SERVER_TYPE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"missing property "
operator|+
name|Properties
operator|.
name|SERVER_TYPE
operator|+
literal|" in "
operator|+
name|nodeState
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|getIntValueFor
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|long
name|value
init|=
name|defaultValue
decl_stmt|;
name|PropertyState
name|property
init|=
name|nodeState
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|value
return|;
block|}
specifier|private
name|String
name|getStringValueFor
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|defaultValue
decl_stmt|;
name|PropertyState
name|property
init|=
name|nodeState
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|SolrServerConfiguration
argument_list|<
name|SolrServerProvider
argument_list|>
name|getSolrServerConfiguration
parameter_list|()
block|{
name|String
name|type
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|SERVER_TYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"embedded"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|solrHomePath
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|SOLRHOME_PATH
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|SOLR_HOME_PATH
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|CORE_NAME
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|CORE_NAME
argument_list|)
decl_stmt|;
name|String
name|context
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|CONTEXT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|httpPort
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|HTTP_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|httpPort
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|SolrServerConfiguration
operator|)
operator|new
name|EmbeddedSolrServerConfiguration
argument_list|(
name|solrHomePath
argument_list|,
name|coreName
argument_list|)
operator|.
name|withHttpConfiguration
argument_list|(
name|context
argument_list|,
name|httpPort
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|SolrServerConfiguration
operator|)
operator|new
name|EmbeddedSolrServerConfiguration
argument_list|(
name|solrHomePath
argument_list|,
name|coreName
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"remote"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|solrZkHost
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|ZK_HOST
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|solrCollection
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|COLLECTION
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|COLLECTION
argument_list|)
decl_stmt|;
name|int
name|solrReplicationFactor
init|=
name|getIntValueFor
argument_list|(
name|Properties
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|REPLICATION_FACTOR
argument_list|)
decl_stmt|;
name|String
name|solrConfDir
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|CONFIGURATION_DIRECTORY
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|CONFIGURATION_DIRECTORY
argument_list|)
decl_stmt|;
name|String
name|solrHttpUrls
init|=
name|getStringValueFor
argument_list|(
name|Properties
operator|.
name|HTTP_URL
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|HTTP_URL
argument_list|)
decl_stmt|;
name|int
name|solrShardsNo
init|=
name|getIntValueFor
argument_list|(
name|Properties
operator|.
name|SHARDS_NO
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|SHARDS_NO
argument_list|)
decl_stmt|;
name|int
name|socketTimeout
init|=
name|getIntValueFor
argument_list|(
name|Properties
operator|.
name|SOCKET_TIMEOUT
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|SOCKET_TIMEOUT
argument_list|)
decl_stmt|;
name|int
name|connectionTimeout
init|=
name|getIntValueFor
argument_list|(
name|Properties
operator|.
name|CONNECTION_TIMEOUT
argument_list|,
name|SolrServerConfigurationDefaults
operator|.
name|CONNECTION_TIMEOUT
argument_list|)
decl_stmt|;
return|return
operator|(
name|SolrServerConfiguration
operator|)
operator|new
name|RemoteSolrServerConfiguration
argument_list|(
name|solrZkHost
argument_list|,
name|solrCollection
argument_list|,
name|solrShardsNo
argument_list|,
name|solrReplicationFactor
argument_list|,
name|solrConfDir
argument_list|,
name|socketTimeout
argument_list|,
name|connectionTimeout
argument_list|,
name|solrHttpUrls
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected Solr server type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**      * Properties that may be retrieved from the configuration {@link org.apache.jackrabbit.oak.spi.state.NodeState}.      */
specifier|public
specifier|final
class|class
name|Properties
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_TYPE
init|=
literal|"solrServerType"
decl_stmt|;
comment|// --> embedded solr server properties<--
specifier|public
specifier|static
specifier|final
name|String
name|SOLRHOME_PATH
init|=
literal|"solrHomePath"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"solrContext"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_PORT
init|=
literal|"httpPort"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CORE_NAME
init|=
literal|"coreName"
decl_stmt|;
comment|// --> remote solr server properties<--
specifier|public
specifier|static
specifier|final
name|String
name|ZK_HOST
init|=
literal|"zkHost"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_FACTOR
init|=
literal|"replicationFactor"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_DIRECTORY
init|=
literal|"configurationDirectory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_URL
init|=
literal|"httpUrl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_NO
init|=
literal|"shardsNo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_TIMEOUT
init|=
literal|"connectionTimeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOCKET_TIMEOUT
init|=
literal|"socketTimeout"
decl_stmt|;
block|}
block|}
end_class

end_unit

