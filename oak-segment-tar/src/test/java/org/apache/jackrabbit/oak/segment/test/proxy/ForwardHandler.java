begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|test
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|ForwardHandler
extends|extends
name|ChannelInboundHandlerAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ForwardHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|targetHost
decl_stmt|;
specifier|private
specifier|final
name|int
name|targetPort
decl_stmt|;
specifier|private
specifier|final
name|int
name|skipPosition
decl_stmt|;
specifier|private
specifier|final
name|int
name|skipBytes
decl_stmt|;
specifier|private
specifier|final
name|int
name|flipPosition
decl_stmt|;
specifier|private
name|Channel
name|remote
decl_stmt|;
specifier|private
name|EventLoopGroup
name|group
decl_stmt|;
name|ForwardHandler
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|flipPosition
parameter_list|,
name|int
name|skipPosition
parameter_list|,
name|int
name|skipBytes
parameter_list|)
block|{
name|this
operator|.
name|targetHost
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|targetPort
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|flipPosition
operator|=
name|flipPosition
expr_stmt|;
name|this
operator|.
name|skipPosition
operator|=
name|skipPosition
expr_stmt|;
name|this
operator|.
name|skipBytes
operator|=
name|skipBytes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|group
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|0
argument_list|,
name|r
lambda|->
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"forward-handler-%d"
argument_list|,
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|Bootstrap
name|b
init|=
operator|new
name|Bootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|group
argument_list|)
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|handler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|flipPosition
operator|>=
literal|0
condition|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|FlipHandler
argument_list|(
name|flipPosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipBytes
operator|>
literal|0
condition|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|SkipHandler
argument_list|(
name|skipPosition
argument_list|,
name|skipBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|BackwardHandler
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|remote
operator|=
name|b
operator|.
name|connect
argument_list|(
name|targetHost
argument_list|,
name|targetPort
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|remote
operator|.
name|close
argument_list|()
expr_stmt|;
name|group
operator|.
name|shutdownGracefully
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
name|remote
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelReadComplete
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|remote
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected error, closing channel"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

