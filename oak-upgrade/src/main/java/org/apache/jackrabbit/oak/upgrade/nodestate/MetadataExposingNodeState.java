begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|nodestate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|AbstractDocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|AbstractDecoratedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|secondary
operator|.
name|DelegatingDocumentNodeState
operator|.
name|PROP_LAST_REV
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|secondary
operator|.
name|DelegatingDocumentNodeState
operator|.
name|PROP_REVISION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataExposingNodeState
extends|extends
name|AbstractDecoratedNodeState
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|PropertyState
argument_list|>
name|metadataProperties
decl_stmt|;
specifier|public
name|MetadataExposingNodeState
parameter_list|(
name|AbstractDocumentNodeState
name|documentNodeState
parameter_list|)
block|{
name|super
argument_list|(
name|documentNodeState
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metadataProperties
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|documentNodeState
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|metadataProperties
operator|.
name|add
argument_list|(
name|createProperty
argument_list|(
name|PROP_REVISION
argument_list|,
name|documentNodeState
operator|.
name|getRootRevision
argument_list|()
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadataProperties
operator|.
name|add
argument_list|(
name|createProperty
argument_list|(
name|PROP_LAST_REV
argument_list|,
name|documentNodeState
operator|.
name|getLastRevision
argument_list|()
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getNewPropertyStates
parameter_list|()
block|{
return|return
name|metadataProperties
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|NodeState
name|decorateChild
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|delegateChild
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|delegateChild
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PropertyState
name|decorateProperty
parameter_list|(
annotation|@
name|NotNull
name|PropertyState
name|delegatePropertyState
parameter_list|)
block|{
return|return
name|delegatePropertyState
return|;
block|}
specifier|public
specifier|static
name|NodeState
name|wrap
parameter_list|(
name|NodeState
name|wrapped
parameter_list|)
block|{
if|if
condition|(
name|wrapped
operator|instanceof
name|AbstractDocumentNodeState
condition|)
block|{
return|return
operator|new
name|MetadataExposingNodeState
argument_list|(
operator|(
name|AbstractDocumentNodeState
operator|)
name|wrapped
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|wrapped
operator|instanceof
name|MetadataExposingNodeState
condition|)
block|{
return|return
name|wrapped
return|;
block|}
elseif|else
if|if
condition|(
name|wrapped
operator|instanceof
name|AbstractDecoratedNodeState
condition|)
block|{
name|NodeState
name|unwrapped
init|=
name|wrapped
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|unwrapped
operator|instanceof
name|AbstractDecoratedNodeState
condition|)
block|{
name|unwrapped
operator|=
operator|(
operator|(
name|AbstractDecoratedNodeState
operator|)
name|unwrapped
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|unwrapped
operator|instanceof
name|AbstractDocumentNodeState
condition|)
block|{
return|return
name|unwrapped
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

