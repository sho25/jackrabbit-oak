begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_comment
comment|/**  * Interface to manage the supported restrictions present with a given access  * control and permission management implementation.  *  * @since OAK 1.0  */
end_comment

begin_interface
specifier|public
interface|interface
name|RestrictionProvider
block|{
comment|/**      * Returns the restriction definitions supported by this provider implementation      * at the specified path.      *      * @param oakPath The path of the access controlled tree. A {@code null}      * path indicates that the supported restrictions for repository level      * policies should be returned.      * @return The set of supported restrictions at the given path.      */
annotation|@
name|Nonnull
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|getSupportedRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
function_decl|;
comment|/**      * Creates a new single valued restriction for the specified parameters.      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param oakName The name of the restriction.      * @param value The value of the restriction.      * @return A new restriction instance.      * @throws AccessControlException If no matching restriction definition      * exists for the specified parameters.      * @throws RepositoryException If another error occurs.      */
annotation|@
name|Nonnull
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
name|value
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
function_decl|;
comment|/**      * Creates a new multi valued restriction for the specified parameters.      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param oakName The name of the restriction.      * @param values The values of the restriction.      * @return A new restriction instance.      * @throws AccessControlException If no matching restriction definition      * exists for the specified parameters.      * @throws RepositoryException If another error occurs.      */
annotation|@
name|Nonnull
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
modifier|...
name|values
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
function_decl|;
comment|/**      * Read the valid restrictions stored in the specified ACE tree.      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param aceTree The tree corresponding to an ACE that may contain      * restrictions.      * @return The valid restrictions stored with the specified tree or an      * empty set.      */
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Restriction
argument_list|>
name|readRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
function_decl|;
comment|/**      * Writes the given restrictions to the specified ACE tree. Note, that this      * method does not need to validate the specified restrictions (see also      * {@link #validateRestrictions(String, org.apache.jackrabbit.oak.api.Tree)}).      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param aceTree The tree corresponding to an ACE that will have the      * specified restrictions added.      * @param restrictions The set of restrictions to be written to the specified      * tree.      * @throws RepositoryException If an error occurs while writing the      * restrictions.      */
name|void
name|writeRestrictions
parameter_list|(
name|String
name|oakPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
comment|/**      * Validate the restrictions present with the specified ACE tree.      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param aceTree The tree corresponding to an ACE.      * @throws AccessControlException If any invalid restrictions are detected.      * @throws RepositoryException If another error occurs.      */
name|void
name|validateRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
function_decl|;
comment|/**      * Creates the {@link RestrictionPattern} for the restriction information      * stored with specified tree.      *      * @param oakPath The path of the access controlled tree or {@code null} if      * the target policies applies to the repository level.      * @param tree The tree holding the restriction information.      * @return A new {@link RestrictionPattern} representing the restriction      * information present with the given tree.      */
annotation|@
name|Nonnull
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
function_decl|;
comment|/**      * Empty restriction provider implementation that doesn't support any      * restrictions.      */
name|RestrictionProvider
name|EMPTY
init|=
operator|new
name|RestrictionProvider
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RestrictionDefinition
argument_list|>
name|getSupportedRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
name|value
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"This implementation doesn't support any restrictions"
argument_list|)
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Restriction
name|createRestriction
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|oakName
parameter_list|,
annotation|@
name|Nonnull
name|Value
modifier|...
name|values
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"This implementation doesn't support any restrictions"
argument_list|)
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Restriction
argument_list|>
name|readRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeRestrictions
parameter_list|(
name|String
name|oakPath
parameter_list|,
name|Tree
name|aceTree
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|aceTree
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|RestrictionPattern
operator|.
name|EMPTY
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface

end_unit

