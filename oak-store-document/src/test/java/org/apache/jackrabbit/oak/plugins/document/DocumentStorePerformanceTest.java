begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests measuring the performance of various {@link DocumentStore} operations.  *<p>  * These tests are disabled by default due to their long running time. On the command line  * specify {@code -DDocumentStorePerformanceTest=true} to enable them.  */
end_comment

begin_class
specifier|public
class|class
name|DocumentStorePerformanceTest
extends|extends
name|AbstractMultiDocumentStoreTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentStorePerformanceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|DocumentStorePerformanceTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|assumeEnabled
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DocumentStorePerformanceTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmall
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmallBatch
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|,
literal|64
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfSmallBatch2
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|16
argument_list|,
literal|256
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreatePerfBig
parameter_list|()
block|{
name|createPerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createPerf
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|amount
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ups
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testCreatePerf-"
operator|+
name|size
operator|+
literal|"-"
operator|+
name|cnt
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ups
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"documents with "
operator|+
name|ids
operator|+
literal|" not created"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document creation with property of size "
operator|+
name|size
operator|+
literal|" and batch size "
operator|+
name|amount
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfCollectionPaging
parameter_list|()
block|{
name|testPerfCollectionPaging
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testPerfCollectionPaging"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfCollectionPagingUnCached
parameter_list|()
block|{
name|testPerfCollectionPaging
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testPerfCollectionPagingUnCached"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPerfCollectionPaging
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|invalidateCache
parameter_list|)
block|{
name|String
name|cid
init|=
name|name
decl_stmt|;
name|int
name|nodecount
init|=
literal|20000
decl_stmt|;
name|int
name|initialFetchCount
init|=
literal|100
decl_stmt|;
name|int
name|maxFetchCount
init|=
literal|1600
decl_stmt|;
name|int
name|fetchcount
init|=
name|initialFetchCount
decl_stmt|;
name|long
name|duration
init|=
literal|2000
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ups
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateOp
name|container
init|=
operator|new
name|UpdateOp
argument_list|(
name|cid
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodecount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%08d"
argument_list|,
name|cid
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|u
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ups
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|String
name|sid
init|=
name|cid
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|result
init|=
name|super
operator|.
name|ds
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|sid
argument_list|,
name|cid
operator|+
literal|"X"
argument_list|,
name|fetchcount
argument_list|)
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|ds
operator|.
name|getCacheStats
argument_list|()
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// check freshness of returned documents
name|long
name|created
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLastCheckTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'getLastCheckTime' timestamp of NodeDocument too old ("
operator|+
name|created
operator|+
literal|" vs "
operator|+
name|now
operator|+
literal|") (on "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|")"
argument_list|,
name|created
operator|>=
name|now
argument_list|)
expr_stmt|;
block|}
name|found
operator|+=
name|result
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|<
name|fetchcount
condition|)
block|{
if|if
condition|(
name|sid
operator|.
name|equals
argument_list|(
name|cid
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"first page must not be empty"
argument_list|)
expr_stmt|;
block|}
name|sid
operator|=
name|cid
expr_stmt|;
name|assertEquals
argument_list|(
name|nodecount
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|found
operator|=
literal|0
expr_stmt|;
name|fetchcount
operator|=
name|initialFetchCount
expr_stmt|;
block|}
else|else
block|{
name|sid
operator|=
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
if|if
condition|(
name|fetchcount
operator|<
name|maxFetchCount
condition|)
block|{
name|fetchcount
operator|*=
literal|2
expr_stmt|;
block|}
block|}
name|cnt
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|invalidateCache
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"collection lookups "
operator|+
operator|(
name|invalidateCache
condition|?
literal|"(uncached) "
else|:
literal|""
operator|)
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfLastRevBatch
parameter_list|()
block|{
name|String
name|bid
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testPerfLastRevBatch"
decl_stmt|;
name|int
name|nodecount
init|=
literal|100
decl_stmt|;
name|long
name|duration
init|=
literal|5000
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Revision
name|cr
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r0-0-1"
argument_list|)
decl_stmt|;
comment|// create test nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodecount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|bid
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"testprop"
argument_list|,
name|generateString
argument_list|(
literal|100
operator|*
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"_lastRev"
argument_list|,
name|cr
argument_list|,
literal|"setup"
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"creation failed for "
operator|+
name|id
operator|+
literal|" in "
operator|+
name|super
operator|.
name|dsname
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|bid
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"_lastRev"
argument_list|,
name|cr
argument_list|,
literal|"iteration-"
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|up
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|ops
operator|.
name|add
argument_list|(
name|up
operator|.
name|shallowCopy
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
comment|// check postcondition
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodecount
condition|;
name|i
operator|++
control|)
block|{
name|NodeDocument
name|d
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|bid
operator|+
literal|"-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
operator|)
name|d
operator|.
name|get
argument_list|(
literal|"_lastRev"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"iteration-"
operator|+
operator|(
name|cnt
operator|-
literal|1
operator|)
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|cr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"batch update for _lastRev for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfReadBigDocCached
parameter_list|()
block|{
name|perfReadBigDoc
argument_list|(
literal|true
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testReadBigDocCached"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerfReadBigDocAfterInvalidate
parameter_list|()
block|{
name|perfReadBigDoc
argument_list|(
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testReadBigDocAfterInvalidate"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|perfReadBigDoc
parameter_list|(
name|boolean
name|cached
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|id
init|=
name|name
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|super
operator|.
name|ds
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|up
operator|.
name|set
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|,
name|generateString
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|super
operator|.
name|ds
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
if|if
condition|(
operator|!
name|cached
condition|)
block|{
name|super
operator|.
name|ds
operator|.
name|invalidateCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|NodeDocument
name|d
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"big doc read "
operator|+
operator|(
name|cached
condition|?
literal|""
else|:
literal|"(after invalidate) "
operator|)
operator|+
literal|"from "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfSmall
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|16
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfSmallGrowing
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|16
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePerfBig
parameter_list|()
block|{
name|updatePerf
argument_list|(
literal|32
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePerf
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|growing
parameter_list|)
block|{
name|String
name|pval
init|=
name|generateString
argument_list|(
name|size
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|duration
init|=
literal|1000
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|expectedRevs
init|=
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testUpdatePerf"
operator|+
operator|(
name|growing
condition|?
literal|"Growing"
else|:
literal|""
operator|)
operator|+
literal|"-"
operator|+
name|size
decl_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|growing
condition|)
block|{
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|cnt
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"foo"
argument_list|,
name|r
argument_list|,
name|pval
argument_list|)
expr_stmt|;
name|up
operator|.
name|setMapEntry
argument_list|(
literal|"_commitRoot"
argument_list|,
name|r
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|up
operator|.
name|increment
argument_list|(
literal|"c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|up
operator|.
name|max
argument_list|(
literal|"max"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|expectedRevs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|up
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
name|pval
argument_list|)
expr_stmt|;
block|}
name|NodeDocument
name|old
init|=
name|super
operator|.
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|up
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
literal|"expect null on create"
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"fail on update "
operator|+
name|cnt
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|growing
condition|)
block|{
name|NodeDocument
name|result
init|=
name|super
operator|.
name|ds
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of revisions"
argument_list|,
name|expectedRevs
operator|.
name|size
argument_list|()
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedRevs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"document updates with property of size "
operator|+
name|size
operator|+
operator|(
name|growing
condition|?
literal|" (growing)"
else|:
literal|""
operator|)
operator|+
literal|" for "
operator|+
name|super
operator|.
name|dsname
operator|+
literal|" was "
operator|+
name|cnt
operator|+
literal|" in "
operator|+
name|duration
operator|+
literal|"ms ("
operator|+
operator|(
name|cnt
operator|/
operator|(
name|duration
operator|/
literal|1000f
operator|)
operator|)
operator|+
literal|"/s)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

