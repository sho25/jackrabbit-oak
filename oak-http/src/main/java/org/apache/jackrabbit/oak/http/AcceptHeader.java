begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_class
specifier|public
class|class
name|AcceptHeader
block|{
specifier|private
specifier|static
specifier|final
name|MediaTypeRegistry
name|registry
init|=
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|MediaRange
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|MediaRange
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AcceptHeader
parameter_list|(
name|String
name|accept
parameter_list|)
block|{
if|if
condition|(
name|accept
operator|==
literal|null
condition|)
block|{
name|ranges
operator|.
name|add
argument_list|(
operator|new
name|MediaRange
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"*/*"
argument_list|)
argument_list|,
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|part
range|:
name|accept
operator|.
name|split
argument_list|(
literal|"(\\s*,)+\\s*"
argument_list|)
control|)
block|{
name|MediaRange
name|range
init|=
name|MediaRange
operator|.
name|parse
argument_list|(
name|part
argument_list|,
name|registry
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Representation
name|resolve
parameter_list|(
name|Representation
modifier|...
name|representations
parameter_list|)
block|{
assert|assert
name|representations
operator|!=
literal|null
operator|&&
name|representations
operator|.
name|length
operator|>
literal|0
assert|;
name|int
name|maxIndex
init|=
literal|0
decl_stmt|;
name|double
name|maxQ
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|representations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|q
init|=
literal|0.0
decl_stmt|;
name|MediaType
name|type
init|=
name|registry
operator|.
name|normalize
argument_list|(
name|representations
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaRange
name|range
range|:
name|ranges
control|)
block|{
name|q
operator|=
name|Math
operator|.
name|max
argument_list|(
name|q
argument_list|,
name|range
operator|.
name|match
argument_list|(
name|type
argument_list|,
name|registry
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|>
name|maxQ
condition|)
block|{
name|maxIndex
operator|=
name|i
expr_stmt|;
name|maxQ
operator|=
name|q
expr_stmt|;
block|}
block|}
return|return
name|representations
index|[
name|maxIndex
index|]
return|;
block|}
block|}
end_class

end_unit

