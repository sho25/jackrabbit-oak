begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexUtils
block|{
comment|/**      * switch to "oak:index" as soon as it is possible      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INDEX_HOME
init|=
literal|"/oak-index"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INDEX_NAME
init|=
literal|"default"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_INDEX_PATH
init|=
block|{
literal|"oak-index"
block|,
literal|"default"
block|,
literal|":data"
block|}
decl_stmt|;
specifier|private
name|LuceneIndexUtils
parameter_list|()
block|{      }
comment|/**      *       * You still need to call #commit afterwards to persist the changes      *       * @param index      * @param path      * @param indexName      * @return      */
specifier|public
specifier|static
name|Tree
name|createIndexNode
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|e
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|index
operator|.
name|hasChild
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|index
operator|=
name|index
operator|.
name|getChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|index
operator|.
name|addChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|index
operator|.
name|hasChild
argument_list|(
literal|":data"
argument_list|)
condition|)
block|{
name|index
operator|.
name|addChild
argument_list|(
literal|":data"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
comment|/**      *       * Checks if any of the index's children qualifies as an index node, and      * returns the list of good candidates.      *       * For now each child that has a :data node is considered to be a potential      * index      *       * @param indexHome      *            the location of potential index nodes      * @return the list of existing indexes      */
specifier|public
specifier|static
name|List
argument_list|<
name|LuceneIndexInfo
argument_list|>
name|getIndexInfos
parameter_list|(
name|NodeState
name|indexHome
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
if|if
condition|(
name|indexHome
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|LuceneIndexInfo
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|parent
init|=
name|segmentPath
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LuceneIndexInfo
argument_list|>
name|tempIndexes
init|=
operator|new
name|ArrayList
argument_list|<
name|LuceneIndexInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|c
range|:
name|indexHome
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|child
init|=
name|c
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|hasChildNode
argument_list|(
literal|":data"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childIndexPath
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|childIndexPath
operator|.
name|add
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|childIndexPath
operator|.
name|add
argument_list|(
literal|":data"
argument_list|)
expr_stmt|;
name|tempIndexes
operator|.
name|add
argument_list|(
operator|new
name|LuceneIndexInfo
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|childIndexPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tempIndexes
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|segmentPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pathElements
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|pathElements
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|pathElements
return|;
block|}
block|}
end_class

end_unit

