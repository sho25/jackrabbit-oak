begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeConfigurationTest
extends|extends
name|AbstractCompositeConfigurationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|compositeConfiguration
operator|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"test"
argument_list|,
operator|new
name|SecurityProvider
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|SecurityConfiguration
argument_list|>
name|getConfigurations
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|Class
argument_list|<
name|T
argument_list|>
name|configClass
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NAME
argument_list|,
name|compositeConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDefaultConfig
parameter_list|()
block|{
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddConfiguration
parameter_list|()
block|{
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|contains
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveConfiguration
parameter_list|()
block|{
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|addConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|List
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|def
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|cls
init|=
name|Class
operator|.
name|forName
argument_list|(
name|CompositeConfiguration
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$CompositeContext"
argument_list|)
decl_stmt|;
name|Field
name|def
init|=
name|cls
operator|.
name|getDeclaredField
argument_list|(
literal|"defaultCtx"
argument_list|)
decl_stmt|;
name|def
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|delegatees
init|=
name|cls
operator|.
name|getDeclaredField
argument_list|(
literal|"delegatees"
argument_list|)
decl_stmt|;
name|delegatees
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Context
name|ctx
init|=
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|cls
argument_list|,
name|ctx
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delegatees
operator|.
name|get
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Context
operator|.
name|DEFAULT
argument_list|,
name|def
operator|.
name|get
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc
init|=
operator|new
name|TestConfiguration
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|delegatees
operator|.
name|get
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|sc
operator|.
name|getContext
argument_list|()
argument_list|,
name|def
operator|.
name|get
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cls
argument_list|,
name|ctx
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|sc
operator|.
name|getContext
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|delegatees
operator|.
name|get
argument_list|(
name|ctx
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add configuration that has DEFAULT ctx -> must not be added
name|SecurityConfiguration
name|defConfig
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|addConfiguration
argument_list|(
name|defConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|delegatees
operator|.
name|get
argument_list|(
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add same test configuration again -> no duplicate entries
name|addConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|delegatees
operator|.
name|get
argument_list|(
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc2
init|=
operator|new
name|TestConfiguration
argument_list|()
decl_stmt|;
name|addConfiguration
argument_list|(
name|sc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|delegatees
operator|.
name|get
argument_list|(
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|sc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|delegatees
operator|.
name|get
argument_list|(
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|defConfig
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delegatees
operator|.
name|get
argument_list|(
name|compositeConfiguration
operator|.
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestConfiguration
extends|extends
name|SecurityConfiguration
operator|.
name|Default
block|{
specifier|private
specifier|final
name|Context
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestContext
extends|extends
name|Context
operator|.
name|Default
block|{      }
block|}
end_class

end_unit

