begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TODO
import|;
end_import

begin_comment
comment|/**  * PrivilegeMigrator is a utility to migrate custom privilege definitions from  * a jackrabbit 2 project to oak.  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeMigrator
block|{
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|public
name|PrivilegeMigrator
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
block|}
comment|/**      *      * @throws RepositoryException      */
specifier|public
name|void
name|migrateCustomPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeRegistry
name|pr
init|=
operator|new
name|PrivilegeRegistry
argument_list|(
name|contentSession
argument_list|,
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
comment|// TODO: order custom privileges such that validation succeeds.
comment|// FIXME: user proper path to jr2 custom privileges stored in fs
comment|// jr2 used to be:
comment|// new FileSystemResource(fs, "/privileges/custom_privileges.xml").getInputStream()
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// TODO: should get a proper namespace registry from somewhere
name|NamespaceRegistry
name|nsRegistry
init|=
name|TODO
operator|.
name|dummyImplementation
argument_list|()
operator|.
name|returnValue
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeDefinition
index|[]
name|custom
init|=
name|PrivilegeDefinitionReader
operator|.
name|readCustomDefinitons
argument_list|(
name|stream
argument_list|,
name|nsRegistry
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeDefinition
name|def
range|:
name|custom
control|)
block|{
name|pr
operator|.
name|registerDefinition
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|isAbstract
argument_list|()
argument_list|,
name|def
operator|.
name|getDeclaredAggregateNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore.
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

