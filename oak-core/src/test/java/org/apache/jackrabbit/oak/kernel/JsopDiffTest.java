begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|BooleanPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|DoublePropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|LongPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|StringPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_class
specifier|public
class|class
name|JsopDiffTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPropertyChanges
parameter_list|()
block|{
name|JsopDiff
name|diff
decl_stmt|;
name|PropertyState
name|before
init|=
name|StringPropertyState
operator|.
name|stringProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|propertyAdded
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/foo\":\"bar\""
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
literal|"foo"
argument_list|,
literal|123L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/foo\":123"
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|DoublePropertyState
operator|.
name|doubleProperty
argument_list|(
literal|"foo"
argument_list|,
literal|1.23
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/foo\":\"dou:1.23\""
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: 1.23?
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|BooleanPropertyState
operator|.
name|booleanProperty
argument_list|(
literal|"foo"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/foo\":true"
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/foo\":null"
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNodeChanges
parameter_list|()
block|{
name|JsopDiff
name|diff
decl_stmt|;
name|NodeState
name|before
init|=
name|EMPTY_NODE
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|before
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|childNodeAdded
argument_list|(
literal|"test"
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/test\":{}"
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|childNodeChanged
argument_list|(
literal|"test"
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/test/a\":1+\"/test/x\":{}"
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
operator|new
name|JsopDiff
argument_list|()
expr_stmt|;
name|diff
operator|.
name|childNodeDeleted
argument_list|(
literal|"test"
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-\"/test\""
argument_list|,
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

