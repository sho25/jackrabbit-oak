begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|EVENTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|LISTENERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|REP_OBSERVATION
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|EventQueueWriter
operator|.
name|EventRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|EventQueueWriter
operator|.
name|ListenerSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
specifier|public
class|class
name|EventQueueWriterProvider
implements|implements
name|EditorProvider
block|{
specifier|public
specifier|static
specifier|final
name|AtomicLong
name|BUNDLE_ID
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|NodeBuilder
name|queue
init|=
name|getEventQueue
argument_list|(
name|builder
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
return|return
name|DefaultEditor
operator|.
name|INSTANCE
return|;
block|}
name|Iterable
argument_list|<
name|ListenerSpec
argument_list|>
name|listenerSpecs
init|=
name|getListenerSpecs
argument_list|(
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenerSpecs
operator|==
literal|null
condition|)
block|{
return|return
name|DefaultEditor
operator|.
name|INSTANCE
return|;
block|}
name|EventRecorder
name|eventRecorder
init|=
operator|new
name|EventRecorder
argument_list|(
name|queue
argument_list|,
name|listenerSpecs
argument_list|)
decl_stmt|;
return|return
name|VisibleEditor
operator|.
name|wrap
argument_list|(
operator|new
name|EventQueueWriter
argument_list|(
name|eventRecorder
argument_list|,
literal|"/"
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|getEventQueue
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|hasChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasChildNode
argument_list|(
name|REP_OBSERVATION
argument_list|)
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|REP_OBSERVATION
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|child
argument_list|(
name|EVENTS
argument_list|)
operator|.
name|child
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|BUNDLE_ID
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|ListenerSpec
argument_list|>
name|getListenerSpecs
parameter_list|(
name|NodeState
name|after
parameter_list|)
block|{
name|NodeState
name|listeners
init|=
name|after
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|REP_OBSERVATION
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|LISTENERS
argument_list|)
decl_stmt|;
name|ReadOnlyNodeTypeManager
name|ntMgr
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ListenerSpec
argument_list|>
name|specs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|listener
range|:
name|listeners
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|ListenerSpec
name|spec
init|=
name|ListenerSpec
operator|.
name|create
argument_list|(
name|ntMgr
argument_list|,
name|listener
operator|.
name|getName
argument_list|()
argument_list|,
name|listener
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
name|specs
operator|.
name|add
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|specs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|specs
return|;
block|}
block|}
end_class

end_unit

