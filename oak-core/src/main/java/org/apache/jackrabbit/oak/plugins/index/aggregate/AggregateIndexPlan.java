begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * An index plan for multiple query indexes.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateIndexPlan
implements|implements
name|IndexPlan
block|{
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|private
name|boolean
name|pathWithoutPlan
decl_stmt|;
comment|/**      * The map of terms to plans.      */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexPlan
argument_list|>
name|basePlans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexPlan
argument_list|>
argument_list|()
decl_stmt|;
name|AggregateIndexPlan
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
name|void
name|setPlan
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
parameter_list|)
block|{
if|if
condition|(
name|plans
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no index
name|basePlans
operator|.
name|put
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pathWithoutPlan
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// we always pick the first plan
name|basePlans
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|containsPathWithoutPlan
parameter_list|()
block|{
return|return
name|pathWithoutPlan
return|;
block|}
name|IndexPlan
name|getPlan
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|basePlans
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|IndexPlan
argument_list|>
name|getPlans
parameter_list|()
block|{
return|return
name|basePlans
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCostPerExecution
parameter_list|()
block|{
name|double
name|cost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|cost
operator|+=
name|p
operator|.
name|getCostPerExecution
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|cost
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCostPerEntry
parameter_list|()
block|{
comment|// calculate the weigted average
name|double
name|costPerEntry
init|=
literal|0
decl_stmt|;
name|long
name|totalEntries
init|=
name|getEstimatedEntryCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalEntries
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|costPerEntry
operator|+=
name|p
operator|.
name|getCostPerEntry
argument_list|()
operator|*
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
operator|/
name|totalEntries
expr_stmt|;
block|}
block|}
return|return
name|costPerEntry
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedEntryCount
parameter_list|()
block|{
name|long
name|totalEntries
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|totalEntries
operator|+=
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|totalEntries
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**      * Whether any base plan is delayed.      *       * @return true if yes      */
annotation|@
name|Override
specifier|public
name|boolean
name|isDelayed
parameter_list|()
block|{
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|isDelayed
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Whether any base plan is a full text index.      *       * @return true if yes      */
annotation|@
name|Override
specifier|public
name|boolean
name|isFulltextIndex
parameter_list|()
block|{
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|isFulltextIndex
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Whether all base plan include node data.      *       * @return true if yes      */
annotation|@
name|Override
specifier|public
name|boolean
name|includesNodeData
parameter_list|()
block|{
for|for
control|(
name|IndexPlan
name|p
range|:
name|basePlans
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|includesNodeData
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * An aggregated query can not sort, as it gets results from a number of      * indexes.      *       * @return null      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|getSortOrder
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|// the following methods probably shouldn't be in the IndexPlan interface
comment|// as they are only used locally (in the ordered index, or in the lucene index)
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|PropertyRestriction
name|getPropertyRestriction
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexPlan
name|copy
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getDefinition
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathPrefix
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

