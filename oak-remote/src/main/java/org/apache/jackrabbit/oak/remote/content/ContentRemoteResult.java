begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_class
class|class
name|ContentRemoteResult
implements|implements
name|RemoteResult
block|{
specifier|private
specifier|final
name|ContentRemoteBinaries
name|binaries
decl_stmt|;
specifier|private
specifier|final
name|ResultRow
name|row
decl_stmt|;
specifier|public
name|ContentRemoteResult
parameter_list|(
name|ContentRemoteBinaries
name|binaries
parameter_list|,
name|ResultRow
name|row
parameter_list|)
block|{
name|this
operator|.
name|binaries
operator|=
name|binaries
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteValue
name|getColumnValue
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
name|toRemoteValue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RemoteValue
name|toRemoteValue
parameter_list|(
name|PropertyValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|value
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|toMultiRemoteValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toSingleRemoteValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
specifier|private
name|RemoteValue
name|toSingleRemoteValue
parameter_list|(
name|PropertyValue
name|value
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|value
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|tag
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|RemoteValue
operator|.
name|toText
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
return|return
name|RemoteValue
operator|.
name|toBinaryId
argument_list|(
name|binaries
operator|.
name|put
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|RemoteValue
operator|.
name|toLong
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|RemoteValue
operator|.
name|toDouble
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|RemoteValue
operator|.
name|toDate
argument_list|(
name|ISO8601
operator|.
name|parse
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|RemoteValue
operator|.
name|toBoolean
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|RemoteValue
operator|.
name|toName
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|RemoteValue
operator|.
name|toPath
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|RemoteValue
operator|.
name|toReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|RemoteValue
operator|.
name|toWeakReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|RemoteValue
operator|.
name|toUri
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URI
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|RemoteValue
operator|.
name|toDecimal
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"type not supported"
argument_list|)
throw|;
block|}
specifier|private
name|RemoteValue
name|toMultiRemoteValue
parameter_list|(
name|PropertyValue
name|value
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|value
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|tag
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|RemoteValue
operator|.
name|toMultiText
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
return|return
name|RemoteValue
operator|.
name|toMultiBinaryId
argument_list|(
name|readBinaryValues
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|RemoteValue
operator|.
name|toMultiLong
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|RemoteValue
operator|.
name|toMultiDouble
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|RemoteValue
operator|.
name|toMultiDate
argument_list|(
name|readDateValues
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|RemoteValue
operator|.
name|toMultiBoolean
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|RemoteValue
operator|.
name|toMultiName
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|RemoteValue
operator|.
name|toMultiPath
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|RemoteValue
operator|.
name|toMultiReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|RemoteValue
operator|.
name|toMultiWeakReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|RemoteValue
operator|.
name|toMultiUri
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|RemoteValue
operator|.
name|toMultiDecimal
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"type not supported"
argument_list|)
throw|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|readBinaryValues
parameter_list|(
name|PropertyValue
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Blob
name|blob
range|:
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|binaries
operator|.
name|put
argument_list|(
name|blob
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|Long
argument_list|>
name|readDateValues
parameter_list|(
name|PropertyValue
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|result
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ISO8601
operator|.
name|parse
argument_list|(
name|string
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSelectorPath
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
return|return
name|row
operator|.
name|getPath
argument_list|(
name|selector
argument_list|)
return|;
block|}
block|}
end_class

end_unit

