begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AccessControlPolicyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|PolicyOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeAccessControlManagerTest
extends|extends
name|AbstractCompositeTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|"/test"
decl_stmt|;
specifier|private
name|CompositeAccessControlManager
name|acMgr
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccessControlManager
argument_list|>
name|acMgrs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
operator|new
name|TestAcMgr
argument_list|()
argument_list|)
decl_stmt|;
name|acMgr
operator|=
operator|new
name|CompositeAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|,
name|acMgrs
argument_list|)
expr_stmt|;
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|getTree
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|result
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromName
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
operator|==
name|TestPolicy
operator|.
name|INSTANCE
condition|)
block|{
name|fail
argument_list|(
literal|"TestPolicy should only be applicable at /test."
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|it
operator|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|found
operator|=
operator|(
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
operator|==
name|TestPolicy
operator|.
name|INSTANCE
operator|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|TEST_PATH
argument_list|,
name|TestPolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|len
operator|++
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|TestPolicy
operator|.
name|INSTANCE
argument_list|,
name|policies
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|it
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccessControlPolicy
name|plc
init|=
name|it
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|plc
operator|==
name|TestPolicy
operator|.
name|INSTANCE
condition|)
block|{
name|fail
argument_list|(
literal|"TestPolicy should only be applicable at /test."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|TEST_PATH
argument_list|,
name|plc
argument_list|)
expr_stmt|;
name|len
operator|++
expr_stmt|;
name|Set
argument_list|<
name|AccessControlPolicy
argument_list|>
name|policySet
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|policySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policySet
operator|.
name|contains
argument_list|(
name|TestPolicy
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policySet
operator|.
name|contains
argument_list|(
name|plc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
block|{
comment|// TODO
block|}
specifier|private
specifier|final
specifier|static
class|class
name|TestAcMgr
implements|implements
name|AccessControlManager
implements|,
name|PolicyOwner
block|{
specifier|private
name|boolean
name|hasPolicy
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getSupportedPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|privilegeFromName
parameter_list|(
name|String
name|privilegeName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
if|if
condition|(
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|&&
name|hasPolicy
condition|)
block|{
return|return
operator|new
name|AccessControlPolicy
index|[]
block|{
name|TestPolicy
operator|.
name|INSTANCE
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
if|if
condition|(
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|&&
name|hasPolicy
condition|)
block|{
return|return
operator|new
name|AccessControlPolicy
index|[]
block|{
name|TestPolicy
operator|.
name|INSTANCE
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
if|if
condition|(
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|&&
operator|!
name|hasPolicy
condition|)
block|{
return|return
operator|new
name|AccessControlPolicyIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|TestPolicy
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|AccessControlPolicyIteratorAdapter
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|hasPolicy
operator|||
operator|!
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|||
name|policy
operator|!=
name|TestPolicy
operator|.
name|INSTANCE
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|()
throw|;
block|}
else|else
block|{
name|hasPolicy
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
name|hasPolicy
operator|||
operator|!
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|||
name|policy
operator|!=
name|TestPolicy
operator|.
name|INSTANCE
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|()
throw|;
block|}
else|else
block|{
name|hasPolicy
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//----------------------------------------------------< PolicyOwner>---
annotation|@
name|Override
specifier|public
name|boolean
name|defines
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|accessControlPolicy
parameter_list|)
block|{
return|return
name|TEST_PATH
operator|.
name|equals
argument_list|(
name|absPath
argument_list|)
operator|&&
name|accessControlPolicy
operator|==
name|TestPolicy
operator|.
name|INSTANCE
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestPolicy
implements|implements
name|AccessControlPolicy
block|{
specifier|private
specifier|static
specifier|final
name|TestPolicy
name|INSTANCE
init|=
operator|new
name|TestPolicy
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

