begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Scalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ScalarImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ChangeLogTest
block|{
specifier|private
specifier|final
name|ChangeLog
name|changeLog
init|=
operator|new
name|ChangeLog
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|empty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleton
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"//foo\":{}"
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tuples
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//c\":\"//d\">\"//a\":\"//b\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//c\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"//b\":{}"
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-\"//a\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|triple
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//d\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/x"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/y"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//c\">\"//x\":\"//y\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-\"//a\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeAdded
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|properties
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"//a\":42"
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"//a\":43"
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"b"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|changeLog
operator|.
name|toJsop
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|setProperty
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|state
argument_list|(
literal|"a"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeProperty
argument_list|(
name|path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^\"//a\":null"
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 1.>/a:/b>/c:/d     =>/c:/d>/a:b      * 5.>/a:/b>/c:/d     =>/c:/d>/a:b      * 9.>/a:/b>/c:/d     =>/c:/d>/a:b      * 13:>/a:/b>/c:/d     =>/c:/d>/a:b      */
annotation|@
name|Test
specifier|public
name|void
name|testRule1_5_9_13
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//c\":\"//d\">\"//a\":\"//b\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 2.>/a:/b>/a/b:/c      illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule2
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 3.>/a:/b>/a:/c        illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule3
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4.>/a/b:/c>/a:/d   =>/a:/d>/d/b:/c      */
annotation|@
name|Test
specifier|public
name|void
name|testRule4
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//d\">\"//d/b\":\"//c\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4.>/a/b:/c>/a:/c/d    does not commute  (q< s)      */
annotation|@
name|Test
specifier|public
name|void
name|testRule4a
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a/b\":\"//c\">\"//a\":\"//c/d\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4'.  -/a/b -/a         =  -/a               (s = NIL and q = NIL)      */
annotation|@
name|Test
specifier|public
name|void
name|testRule4b
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-\"//a\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 4'.>/a/b:/c -/a      =  does not commute  (s = NIL)      */
annotation|@
name|Test
specifier|public
name|void
name|testRule4c
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a/b\":\"//c\"-\"//a\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 6.>/a:/b>/c:/a/d      illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule6
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/a/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 7.>/a:/b>/c:/a        does not commute      */
annotation|@
name|Test
specifier|public
name|void
name|testRule7
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//b\">\"//c\":\"//a\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 8.>/a/d:/b>/c:/a      illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule8
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/d"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 10.>/a:/b>/b/c:/d   =>/a/c:/d>/a:/b      */
annotation|@
name|Test
specifier|public
name|void
name|testRule10
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a/c\":\"//d\">\"//a\":\"//b\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 10'. +/b:{}>/b/c:/d      illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule10a
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 11.>/a:/b>/b:/c     =>/a:/c      */
annotation|@
name|Test
specifier|public
name|void
name|testRule11
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a\":\"//c\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 12.>/a:/b/c>/b:/d   =>/b:/d>/a:/d/c      */
annotation|@
name|Test
specifier|public
name|void
name|testRule12
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//b\":\"//d\">\"//a\":\"//d/c\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 12'.>/a:/b/c -/b      =  -/b -/a = -/a -/b      */
annotation|@
name|Test
specifier|public
name|void
name|testRule12a
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|removeNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-\"//a\"-\"//b\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14.>/a:/b>/c:/b/d   =>/c:/a/d>/a:/b      */
annotation|@
name|Test
specifier|public
name|void
name|testRule14
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//c\":\"//a/d\">\"//a\":\"//b\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14.>/a/b:/b>/a:/b/d    does not commute  (p> r)      */
annotation|@
name|Test
specifier|public
name|void
name|testRule14a
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">\"//a/b\":\"//b\">\"//a\":\"//b/d\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14'. +/b:{}>/c:/b/c      does not commute  (parent of s = q and p = NIL)      */
annotation|@
name|Test
specifier|public
name|void
name|testRule14b
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"//b\":{}>\"//c\":\"//b/c\""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * 14'. +/b:{}>/c:/b/c/d    illegal           (p = NIL)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule14c
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|addNode
argument_list|(
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/c/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 15.>/a:/b>/c:/b        illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule15
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * 16.>/a:/b/d>/c:/b      illegal      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRule16
parameter_list|()
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b/d"
argument_list|)
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|moveNode
argument_list|(
name|path
argument_list|(
literal|"/c"
argument_list|)
argument_list|,
name|path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------< private>---
specifier|private
specifier|static
name|Path
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|Path
operator|.
name|create
argument_list|(
literal|""
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|PropertyState
name|state
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|AbstractPropertyState
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isArray
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Scalar
name|getScalar
parameter_list|()
block|{
return|return
name|ScalarImpl
operator|.
name|longScalar
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Scalar
argument_list|>
name|getArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

