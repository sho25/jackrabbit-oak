begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InitialContentMigratorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|migrateContentWithCheckpoints
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
comment|// 1. populate the seed store with
comment|// .
comment|// \- first
comment|// \- second
comment|// \- third
comment|//
comment|// 2. checkpoint before adding the third node
comment|//
comment|// 3. the mount only includes the '/first' path, so only the
comment|// 'second' and 'third' nodes should be available
name|MemoryNodeStore
name|seed
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|seed
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|seed
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|String
name|checkpoint1
init|=
name|seed
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|=
name|seed
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|root
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
expr_stmt|;
name|seed
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|MemoryNodeStore
name|target
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"seed"
argument_list|,
literal|"/first"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// perform migration
name|InitialContentMigrator
name|icm
init|=
operator|new
name|InitialContentMigrator
argument_list|(
name|target
argument_list|,
name|seed
argument_list|,
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"seed"
argument_list|)
argument_list|)
decl_stmt|;
name|icm
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|NodeState
name|targetRoot
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// verify that the 'second' and 'third' nodes are visible in the migrated store
name|assertFalse
argument_list|(
literal|"Node /first should not have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /second should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /third should have been migrated"
argument_list|,
name|targetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the 'second' node is visible in the migrated store when retrieving the checkpoint
name|NodeState
name|checkpointTargetRoot
init|=
name|target
operator|.
name|retrieve
argument_list|(
name|checkpoint1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Node /first should not have been migrated"
argument_list|,
name|checkpointTargetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /second should have been migrated"
argument_list|,
name|checkpointTargetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node /third should not be visible from the migrated checkpoint"
argument_list|,
name|checkpointTargetRoot
operator|.
name|hasChildNode
argument_list|(
literal|"third"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

