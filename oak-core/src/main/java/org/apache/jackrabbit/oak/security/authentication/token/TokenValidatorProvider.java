begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_class
class|class
name|TokenValidatorProvider
extends|extends
name|ValidatorProvider
implements|implements
name|TokenConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TokenValidatorProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|userRootPath
decl_stmt|;
specifier|private
specifier|final
name|TreeProvider
name|treeProvider
decl_stmt|;
name|TokenValidatorProvider
parameter_list|(
annotation|@
name|NotNull
name|ConfigurationParameters
name|userConfig
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
name|userRootPath
operator|=
name|userConfig
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|treeProvider
operator|=
name|treeProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Validator
name|getRootValidator
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
return|return
operator|new
name|TokenValidator
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|commitInfo
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|CommitFailedException
name|constraintViolation
parameter_list|(
name|int
name|code
parameter_list|,
annotation|@
name|NotNull
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
name|code
argument_list|,
name|message
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|verifyNotNull
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
name|checkState
argument_list|(
name|tree
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|tree
return|;
block|}
specifier|private
specifier|final
class|class
name|TokenValidator
extends|extends
name|DefaultValidator
implements|implements
name|TokenConstants
block|{
specifier|private
specifier|final
name|Tree
name|parentBefore
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|parentAfter
decl_stmt|;
specifier|private
specifier|final
name|CommitInfo
name|commitInfo
decl_stmt|;
name|TokenValidator
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|parentBefore
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|parentAfter
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
name|this
argument_list|(
name|treeProvider
operator|.
name|createReadOnlyTree
argument_list|(
name|parentBefore
argument_list|)
argument_list|,
name|treeProvider
operator|.
name|createReadOnlyTree
argument_list|(
name|parentAfter
argument_list|)
argument_list|,
name|commitInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TokenValidator
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|parentBefore
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|parentAfter
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
name|this
operator|.
name|parentBefore
operator|=
name|parentBefore
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
name|this
operator|.
name|commitInfo
operator|=
name|commitInfo
expr_stmt|;
block|}
specifier|private
name|TokenValidator
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|parentAfter
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
name|this
operator|.
name|parentBefore
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
name|this
operator|.
name|commitInfo
operator|=
name|commitInfo
expr_stmt|;
block|}
comment|//------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|name
init|=
name|after
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|TOKEN_PROPERTY_NAMES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// ensure that token specific properties are managed by the token provider.
name|verifyCommitInfo
argument_list|()
expr_stmt|;
comment|// make sure they are not solely located with a token node.
if|if
condition|(
operator|!
name|isTokenTree
argument_list|(
name|parentAfter
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Attempt to create reserved token property "
operator|+
name|name
decl_stmt|;
throw|throw
name|constraintViolation
argument_list|(
literal|60
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|propertyName
init|=
name|after
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|TOKEN_ATTRIBUTE_KEY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Attempt to change reserved token property "
operator|+
name|propertyName
decl_stmt|;
throw|throw
name|constraintViolation
argument_list|(
literal|61
argument_list|,
name|msg
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|TOKEN_ATTRIBUTE_EXPIRY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|verifyCommitInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
if|if
condition|(
name|TOKEN_NT_NAME
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|62
argument_list|,
literal|"Changing primary type of existing node to the reserved token node type."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isTokensParent
argument_list|(
name|parentAfter
argument_list|)
operator|&&
name|TOKENS_NT_NAME
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|69
argument_list|,
literal|"Cannot change the primary type of an existing .tokens node."
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|tree
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTokenTree
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|validateTokenTree
argument_list|(
name|tree
argument_list|)
expr_stmt|;
comment|// no further validation required
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|isTokensParent
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|validateTokensParent
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VisibleValidator
argument_list|(
operator|new
name|TokenValidator
argument_list|(
name|tree
argument_list|,
name|commitInfo
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|beforeTree
init|=
name|verifyNotNull
argument_list|(
name|parentBefore
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Tree
name|afterTree
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTokenTree
argument_list|(
name|beforeTree
argument_list|)
operator|||
name|isTokenTree
argument_list|(
name|afterTree
argument_list|)
condition|)
block|{
name|validateTokenTree
argument_list|(
name|afterTree
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTokensParent
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|validateTokensParent
argument_list|(
name|afterTree
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VisibleValidator
argument_list|(
operator|new
name|TokenValidator
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|commitInfo
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------< private>---
specifier|private
name|void
name|verifyCommitInfo
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|CommitMarker
operator|.
name|isValidCommitInfo
argument_list|(
name|commitInfo
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|63
argument_list|,
literal|"Attempt to manually create or change a token node or it's parent."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|verifyHierarchy
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|Text
operator|.
name|isDescendant
argument_list|(
name|userRootPath
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Attempt to create a token (or it's parent) outside of configured scope "
operator|+
name|path
decl_stmt|;
throw|throw
name|constraintViolation
argument_list|(
literal|64
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isTokenTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|TOKEN_NT_NAME
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateTokenTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tokenTree
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// enforce changing being made by the TokenProvider implementation
name|verifyCommitInfo
argument_list|()
expr_stmt|;
name|verifyHierarchy
argument_list|(
name|tokenTree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|parent
init|=
name|tokenTree
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokensParent
argument_list|(
name|parent
argument_list|)
operator|||
operator|!
name|UserConstants
operator|.
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|parent
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|65
argument_list|,
literal|"Invalid location of token node."
argument_list|)
throw|;
block|}
comment|// assert mandatory properties are present
name|String
name|key
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|tokenTree
argument_list|,
name|TOKEN_ATTRIBUTE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|PasswordUtil
operator|.
name|isPlainTextPassword
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|66
argument_list|,
literal|"Invalid token key."
argument_list|)
throw|;
block|}
if|if
condition|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|tokenTree
argument_list|,
name|TOKEN_ATTRIBUTE_EXPIRY
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|67
argument_list|,
literal|"Mandatory token expiration missing."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isTokensParent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|isTokensParent
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isTokensParent
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
return|return
name|TOKENS_NODE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateTokensParent
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tokensParent
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|verifyHierarchy
argument_list|(
name|tokensParent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|userTree
init|=
name|tokensParent
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|UserConstants
operator|.
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|userTree
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
name|constraintViolation
argument_list|(
literal|68
argument_list|,
literal|"Invalid location of .tokens node."
argument_list|)
throw|;
block|}
name|String
name|nt
init|=
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tokensParent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TOKENS_NT_NAME
operator|.
name|equals
argument_list|(
name|nt
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Unexpected node type of .tokens node {}."
argument_list|,
name|nt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

