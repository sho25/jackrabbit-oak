begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AbstractAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AbstractAccessControlListTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * ACLTest... TODO  *  * TODO: test restrictions  * TODO: add test with multiple entries  */
end_comment

begin_class
specifier|public
class|class
name|ACLTest
extends|extends
name|AbstractAccessControlListTest
block|{
specifier|private
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
specifier|private
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|private
name|AbstractAccessControlList
name|emptyAcl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|privilegeManager
operator|=
name|getPrivilegeManager
argument_list|()
expr_stmt|;
name|principalManager
operator|=
name|getSecurityProvider
argument_list|()
operator|.
name|getPrincipalConfiguration
argument_list|()
operator|.
name|getPrincipalManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|emptyAcl
operator|=
name|createEmptyACL
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|getTestPrincipal
argument_list|()
expr_stmt|;
name|testPrivileges
operator|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractAccessControlList
name|createACL
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|String
name|path
init|=
operator|(
name|jcrPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|namePathMapper
operator|.
name|getOakPathKeepIndex
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
specifier|final
name|RestrictionProvider
name|rp
init|=
name|getRestrictionProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|ACL
argument_list|(
name|path
argument_list|,
name|entries
argument_list|,
name|namePathMapper
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|rp
return|;
block|}
annotation|@
name|Override
name|PrincipalManager
name|getPrincipalManager
parameter_list|()
block|{
return|return
name|principalManager
return|;
block|}
annotation|@
name|Override
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|()
block|{
return|return
name|privilegeManager
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknownPrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
try|try
block|{
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|unknownPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with an unknown principal should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithoutPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with empty privilege array should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with null privileges should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|Privilege
index|[]
block|{
operator|new
name|InvalidPrivilege
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with invalid privileges should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyAcl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyAcl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|emptyAcl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|emptyAcl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithInvalidRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"unknownRestriction"
argument_list|,
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
operator|.
name|getBlobFactory
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|emptyAcl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid restrictions -> AccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|emptyAcl
operator|.
name|removeAccessControlEntry
argument_list|(
name|emptyAcl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|emptyAcl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|getTestPath
argument_list|()
argument_list|,
name|createTestEntries
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveInvalidEntry
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|emptyAcl
operator|.
name|removeAccessControlEntry
argument_list|(
operator|new
name|JackrabbitAccessControlEntry
argument_list|()
block|{
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Value
name|getRestriction
parameter_list|(
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|testPrincipal
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|testPrivileges
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing an unknown ACE should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|emptyAcl
operator|.
name|removeAccessControlEntry
argument_list|(
operator|new
name|ACE
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing a non-existing ACE should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderToTheEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|acl
operator|.
name|orderBefore
argument_list|(
name|first
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entriesAfter
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|entriesAfter
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|AccessControlEntry
name|second
init|=
name|entries
index|[
literal|1
index|]
decl_stmt|;
name|AccessControlEntry
name|third
init|=
name|entries
index|[
literal|2
index|]
decl_stmt|;
comment|// reorder 'second' to the first position
name|acl
operator|.
name|orderBefore
argument_list|(
name|second
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// reorder 'third' before 'first'
name|acl
operator|.
name|orderBefore
argument_list|(
name|third
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderInvalidElements
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|emptyAcl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|invalid
init|=
operator|new
name|ACE
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|Restriction
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|emptyAcl
operator|.
name|orderBefore
argument_list|(
name|invalid
argument_list|,
name|emptyAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"src entry not contained in list -> reorder should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|emptyAcl
operator|.
name|orderBefore
argument_list|(
name|emptyAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"dest entry not contained in list -> reorder should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
class|class
name|InvalidPrivilege
implements|implements
name|Privilege
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"invalidPrivilege"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getDeclaredAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

