begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Adapter class for turning an in-content property definition  * node ("nt:childNodeDefinition") to a {@link NodeDefinition} instance.  */
end_comment

begin_class
class|class
name|NodeDefinitionImpl
extends|extends
name|ItemDefinitionImpl
implements|implements
name|NodeDefinition
block|{
specifier|private
specifier|final
name|NodeTypeManager
name|manager
decl_stmt|;
specifier|protected
name|NodeDefinitionImpl
parameter_list|(
name|NodeTypeManager
name|manager
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
comment|/** CND:<pre>- jcr:requiredPrimaryTypes (NAME) = 'nt:base' protected mandatory multiple</pre> */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredPrimaryTypeNames
parameter_list|()
block|{
return|return
name|getStrings
argument_list|(
name|Property
operator|.
name|JCR_REQUIRED_PRIMARY_TYPES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getRequiredPrimaryTypes
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|getRequiredPrimaryTypeNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeType
argument_list|>
argument_list|(
name|names
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|getType
argument_list|(
name|manager
argument_list|,
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|NodeType
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:defaultPrimaryType (NAME) protected</pre> */
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|String
name|getDefaultPrimaryTypeName
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|Property
operator|.
name|JCR_DEFAULT_PRIMARY_TYPE
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getDefaultPrimaryType
parameter_list|()
block|{
name|String
name|name
init|=
name|getDefaultPrimaryTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|getType
argument_list|(
name|manager
argument_list|,
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** CND:<pre>- jcr:sameNameSiblings (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|allowsSameNameSiblings
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_SAME_NAME_SIBLINGS
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|rt
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|rts
init|=
name|getRequiredPrimaryTypeNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|rts
operator|!=
literal|null
condition|)
block|{
name|rt
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|rts
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"+ "
argument_list|)
decl_stmt|;
name|appendItemCND
argument_list|(
name|sb
argument_list|,
name|rt
argument_list|,
name|getDefaultPrimaryTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ..."
argument_list|)
expr_stmt|;
comment|// TODO: rest of the info
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

