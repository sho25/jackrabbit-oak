begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtility
import|;
end_import

begin_comment
comment|/**  * QueryUtil... TODO  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|QueryUtil
block|{
specifier|private
name|QueryUtil
parameter_list|()
block|{}
comment|/**      * Determine the search root for the given authorizable type based on the      * configured root path.      *      * @param type The authorizable type.      * @param config The configuration parameters.      * @return The path of search root for the specified authorizable type.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getSearchRoot
parameter_list|(
name|AuthorizableType
name|type
parameter_list|,
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|String
name|path
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|USER
condition|)
block|{
name|path
operator|=
name|UserUtility
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|GROUP
condition|)
block|{
name|path
operator|=
name|UserUtility
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|UserUtility
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|searchRoot
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|searchRoot
operator|.
name|append
argument_list|(
literal|"/jcr:root"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|searchRoot
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Retrieve the node type name for the specified authorizable type.      *      * @param type The authorizable type.      * @return The corresponding node type name.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getNodeTypeName
parameter_list|(
name|AuthorizableType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|USER
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_USER
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|GROUP
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_GROUP
return|;
block|}
else|else
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
return|;
block|}
block|}
block|}
end_class

end_unit

