begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|indexversion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|RecursiveDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|PurgeOldVersionUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OAK_INDEX
init|=
literal|"oak:index"
decl_stmt|;
specifier|public
specifier|static
name|long
name|getMillisFromString
parameter_list|(
name|String
name|strDate
parameter_list|)
block|{
return|return
name|ISO8601
operator|.
name|parse
argument_list|(
name|strDate
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
comment|/**      * @param nodeBuilder      * @param path        Path of node whose nodeBuilder object should be returned.      * @return nodeBuilder object of node at @param{path}      */
specifier|public
specifier|static
name|NodeBuilder
name|getNode
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|nodeBuilder
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|resultNodeBuilder
init|=
name|nodeBuilder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|resultNodeBuilder
operator|=
name|resultNodeBuilder
operator|.
name|getChildNode
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultNodeBuilder
return|;
block|}
comment|/**      * @param store      * @param path      * @throws CommitFailedException recursively deletes child nodes under path      */
specifier|public
specifier|static
name|void
name|recursiveDeleteHiddenChildNodes
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|nodeState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|nodeState
operator|.
name|getChildNodeNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodeNames
control|)
block|{
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|childNodeName
argument_list|)
condition|)
block|{
name|RecursiveDelete
name|recursiveDelete
init|=
operator|new
name|RecursiveDelete
argument_list|(
name|store
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
parameter_list|()
lambda|->
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|recursiveDelete
operator|.
name|run
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param commandlineIndexPath      * @param repositoryIndexPath      * @return true if baseIndexName at  commandlineIndexPath and repositoryIndexPath are equal      */
specifier|public
specifier|static
name|boolean
name|isBaseIndexEqual
parameter_list|(
name|String
name|commandlineIndexPath
parameter_list|,
name|String
name|repositoryIndexPath
parameter_list|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|commandlineIndexPath
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|OAK_INDEX
argument_list|)
condition|)
block|{
name|String
name|commandlineIndexBaseName
init|=
name|IndexName
operator|.
name|parse
argument_list|(
name|commandlineIndexPath
argument_list|)
operator|.
name|getBaseName
argument_list|()
decl_stmt|;
name|String
name|repositoryIndexBaseName
init|=
name|IndexName
operator|.
name|parse
argument_list|(
name|repositoryIndexPath
argument_list|)
operator|.
name|getBaseName
argument_list|()
decl_stmt|;
if|if
condition|(
name|commandlineIndexBaseName
operator|.
name|equals
argument_list|(
name|repositoryIndexBaseName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @param commandlineIndexPath      * @param repositoryIndexPath      * @return true if repositoryIndexPath is child of commandlineIndexPath      */
specifier|public
specifier|static
name|boolean
name|isIndexChildNode
parameter_list|(
name|String
name|commandlineIndexPath
parameter_list|,
name|String
name|repositoryIndexPath
parameter_list|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|commandlineIndexPath
argument_list|)
operator|.
name|equals
argument_list|(
name|OAK_INDEX
argument_list|)
condition|)
block|{
if|if
condition|(
name|repositoryIndexPath
operator|.
name|startsWith
argument_list|(
name|commandlineIndexPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

