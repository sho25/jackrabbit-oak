begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @since OAK 1.0  */
end_comment

begin_class
specifier|public
class|class
name|MembershipProviderTest
extends|extends
name|MembershipBaseTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|User
name|member
init|=
name|createUser
argument_list|()
decl_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|removeMember
argument_list|(
name|getTree
argument_list|(
name|gr
argument_list|)
argument_list|,
name|getTree
argument_list|(
name|member
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|gr
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|User
name|member
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|member2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|gr
operator|.
name|addMembers
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|,
name|member2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|m
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|getContentID
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|member
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|getContentID
argument_list|(
name|member2
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|,
name|member2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|mp
operator|.
name|removeMembers
argument_list|(
name|getTree
argument_list|(
name|gr
argument_list|)
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNonMember
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|mp
operator|.
name|removeMember
argument_list|(
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
argument_list|,
name|getTree
argument_list|(
name|getTestUser
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNonMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nonMemberIds
init|=
name|createIdMap
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|nonMemberIds
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|mp
operator|.
name|removeMembers
argument_list|(
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
argument_list|,
name|nonMemberIds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMemberAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|grp
argument_list|,
name|NUM_USERS
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|grp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|Tree
name|memberTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|addMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|grp
argument_list|,
name|NUM_USERS
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|Tree
name|memberTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|memberId
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|memberTree
argument_list|,
name|REP_AUTHORIZABLE_ID
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|getContentID
argument_list|(
name|memberTree
argument_list|)
argument_list|,
name|memberId
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|m
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failed
init|=
name|mp
operator|.
name|addMembers
argument_list|(
name|getTree
argument_list|(
name|grp
argument_list|)
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|failed
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMemberTransient
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// test declared members with transient modifications
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// test declared members after commit
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMemberFew
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|m1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|User
name|m2
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMembers
argument_list|(
name|m1
operator|.
name|getID
argument_list|()
argument_list|,
name|m2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test declared members with transient modifications
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and after commit
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDeclaredMemberMissingMembersProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|grTree
init|=
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|memberTree
init|=
name|getTree
argument_list|(
name|createUser
argument_list|()
argument_list|)
decl_stmt|;
name|NodeUtil
name|memberList
init|=
operator|new
name|NodeUtil
argument_list|(
name|grTree
argument_list|)
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
decl_stmt|;
name|memberList
operator|.
name|addChild
argument_list|(
literal|"member1"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
operator|.
name|setStrings
argument_list|(
name|REP_MEMBERS
argument_list|,
name|getContentID
argument_list|(
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|grTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotIsDeclaredMemberMissingMembersProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|grTree
init|=
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|memberTree
init|=
name|getTree
argument_list|(
name|createUser
argument_list|()
argument_list|)
decl_stmt|;
name|NodeUtil
name|memberList
init|=
operator|new
name|NodeUtil
argument_list|(
name|grTree
argument_list|)
operator|.
name|addChild
argument_list|(
name|REP_MEMBERS_LIST
argument_list|,
name|NT_REP_MEMBER_REFERENCES_LIST
argument_list|)
decl_stmt|;
name|memberList
operator|.
name|addChild
argument_list|(
literal|"member1"
argument_list|,
name|NT_REP_MEMBER_REFERENCES
argument_list|)
operator|.
name|setStrings
argument_list|(
name|REP_MEMBERS
argument_list|,
name|getContentID
argument_list|(
literal|"another"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|grTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberTransient
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|g2
argument_list|,
name|NUM_USERS
argument_list|)
decl_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test members with transient modifications
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberPaths
init|=
name|createMembers
argument_list|(
name|g2
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// test members after commit
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|memberPaths
control|)
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMemberFew
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|User
name|m1
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|m2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// test members with transient modifications
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... and after commit
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|getTree
argument_list|(
name|m2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransientInMembersList
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|createMembers
argument_list|(
name|g
argument_list|,
name|NUM_USERS
operator|/
literal|2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// add another transient member that will end up in the members-ref-list
name|User
name|u
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Tree
name|memberTree
init|=
name|getTree
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|memberTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|false
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|true
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|false
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|mp
operator|.
name|getMembership
argument_list|(
name|memberTree
argument_list|,
literal|true
argument_list|)
argument_list|,
name|groupTree
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|groupTree
init|=
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|notMember
init|=
name|getTree
argument_list|(
name|createGroup
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|notMember2
init|=
name|getTree
argument_list|(
name|createUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isDeclaredMember
argument_list|(
name|groupTree
argument_list|,
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|notMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|isMember
argument_list|(
name|groupTree
argument_list|,
name|notMember2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersWithRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|member
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mp
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersInherited
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|createUser
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembersWithDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|createUser
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembers
argument_list|(
name|getTree
argument_list|(
name|g
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembershipInherited
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|member2
argument_list|)
expr_stmt|;
name|member2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembership
argument_list|(
name|getTree
argument_list|(
name|user
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembershipWithDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member2
argument_list|)
expr_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|member2
argument_list|)
expr_stmt|;
name|member2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembership
argument_list|(
name|getTree
argument_list|(
name|user
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|Group
name|member2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|member
operator|.
name|addMember
argument_list|(
name|member2
argument_list|)
expr_stmt|;
name|member2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|res
init|=
name|mp
operator|.
name|getMembership
argument_list|(
name|getTree
argument_list|(
name|user
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

