begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|TextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
operator|.
name|FULLTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
operator|.
name|CSVFileBinaryResourceProvider
operator|.
name|FORMAT
import|;
end_import

begin_class
class|class
name|TextPopulator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextPopulator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|BLOB_ID
init|=
literal|"blobId"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ERROR_TEXT
init|=
literal|"TextExtractionError"
decl_stmt|;
specifier|private
specifier|final
name|TextWriter
name|textWriter
decl_stmt|;
specifier|private
name|PopulatorStats
name|stats
decl_stmt|;
name|TextPopulator
parameter_list|(
name|TextWriter
name|textWriter
parameter_list|)
block|{
name|this
operator|.
name|textWriter
operator|=
name|textWriter
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|PopulatorStats
argument_list|()
expr_stmt|;
block|}
comment|// exposed for test purposes only
name|void
name|setStats
parameter_list|(
name|PopulatorStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
name|void
name|populate
parameter_list|(
name|File
name|dataFile
parameter_list|,
name|File
name|indexDir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
init|)
block|{
name|Iterable
argument_list|<
name|CSVRecord
argument_list|>
name|csvRecords
init|=
name|closer
operator|.
name|register
argument_list|(
name|CSVParser
operator|.
name|parse
argument_list|(
name|dataFile
argument_list|,
name|UTF_8
argument_list|,
name|FORMAT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FSDirectory
name|dir
init|=
name|closer
operator|.
name|register
argument_list|(
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryReader
name|reader
init|=
name|closer
operator|.
name|register
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|CSVRecord
name|record
range|:
name|csvRecords
control|)
block|{
name|String
name|blobId
init|=
name|record
operator|.
name|get
argument_list|(
name|BLOB_ID
argument_list|)
decl_stmt|;
name|String
name|jcrPath
init|=
name|record
operator|.
name|get
argument_list|(
name|JCR_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|textWriter
operator|.
name|isProcessed
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|getText
argument_list|(
name|reader
argument_list|,
name|searcher
argument_list|,
name|jcrPath
argument_list|)
decl_stmt|;
name|stats
operator|.
name|processed
operator|++
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
comment|// Ignore errors as we might be processing partial OR incorrect index
comment|// writer.markError(blobId);
name|stats
operator|.
name|errored
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ERROR_TEXT
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|textWriter
operator|.
name|markError
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|stats
operator|.
name|errored
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|textWriter
operator|.
name|markEmpty
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|stats
operator|.
name|empty
operator|++
expr_stmt|;
block|}
else|else
block|{
name|textWriter
operator|.
name|write
argument_list|(
name|blobId
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|stats
operator|.
name|parsed
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|stats
operator|.
name|ignored
operator|++
expr_stmt|;
block|}
name|stats
operator|.
name|readAndDumpStatsIfRequired
argument_list|(
name|jcrPath
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getText
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|TopDocs
name|topDocs
decl_stmt|;
try|try
block|{
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|PATH
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|topDocs
operator|.
name|scoreDocs
decl_stmt|;
if|if
condition|(
name|scoreDocs
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|ftVals
init|=
name|doc
operator|.
name|getValues
argument_list|(
name|FULLTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|ftVals
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
comment|// being conservative... expecting only one stored fulltext field
return|return
literal|null
return|;
block|}
return|return
name|ftVals
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
specifier|static
class|class
name|PopulatorStats
block|{
name|int
name|read
init|=
literal|0
decl_stmt|;
name|int
name|ignored
init|=
literal|0
decl_stmt|;
name|int
name|processed
init|=
literal|0
decl_stmt|;
name|int
name|parsed
init|=
literal|0
decl_stmt|;
name|int
name|errored
init|=
literal|0
decl_stmt|;
name|int
name|empty
init|=
literal|0
decl_stmt|;
name|Stopwatch
name|w
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|void
name|readAndDumpStatsIfRequired
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|read
operator|++
expr_stmt|;
if|if
condition|(
name|read
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{} - currently at {}"
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Text populator stats - "
operator|+
literal|"Read: %s; Ignored: %s; Processed: %s; Parsed: %s; Errored: %s; Empty: %s (in %s)"
argument_list|,
name|read
argument_list|,
name|ignored
argument_list|,
name|processed
argument_list|,
name|parsed
argument_list|,
name|errored
argument_list|,
name|empty
argument_list|,
name|w
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

