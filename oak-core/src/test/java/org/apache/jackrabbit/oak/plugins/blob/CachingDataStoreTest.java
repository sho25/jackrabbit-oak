begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractSharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
operator|.
name|UploadType
operator|.
name|SYNCHRONOUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractSharedCachingDataStore}  */
end_comment

begin_class
specifier|public
class|class
name|CachingDataStoreTest
extends|extends
name|AbstractDataStoreCacheTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachingDataStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_PREFIX
init|=
literal|"12345"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|File
name|root
decl_stmt|;
specifier|private
name|CountDownLatch
name|taskLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|callbackLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|afterExecuteLatch
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
specifier|private
name|AbstractSharedCachingDataStore
name|dataStore
decl_stmt|;
specifier|private
name|TestMemoryBackend
name|backend
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|1
argument_list|,
literal|64
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|cacheSize
parameter_list|,
name|int
name|uploadSplit
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting init"
argument_list|)
expr_stmt|;
comment|// create executor
name|taskLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|callbackLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|afterExecuteLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|TestExecutor
name|executor
init|=
operator|new
name|TestExecutor
argument_list|(
literal|1
argument_list|,
name|taskLatch
argument_list|,
name|callbackLatch
argument_list|,
name|afterExecuteLatch
argument_list|)
decl_stmt|;
comment|// stats
name|ScheduledExecutorService
name|statsExecutor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|statsExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|StatisticsProvider
name|statsProvider
init|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|statsExecutor
argument_list|)
decl_stmt|;
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|scheduledExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|File
name|datastoreRoot
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
specifier|final
name|TestMemoryBackend
name|testBackend
init|=
operator|new
name|TestMemoryBackend
argument_list|(
name|datastoreRoot
argument_list|)
decl_stmt|;
name|this
operator|.
name|backend
operator|=
name|testBackend
expr_stmt|;
name|dataStore
operator|=
operator|new
name|AbstractSharedCachingDataStore
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|AbstractSharedBackend
name|createBackend
parameter_list|()
block|{
return|return
name|testBackend
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
expr_stmt|;
name|dataStore
operator|.
name|setStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|setCacheSize
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|setStagingSplitPercentage
argument_list|(
name|uploadSplit
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|listeningExecutor
operator|=
name|executor
expr_stmt|;
name|dataStore
operator|.
name|schedulerExecutor
operator|=
name|scheduledExecutor
expr_stmt|;
name|dataStore
operator|.
name|init
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|successfulAsList
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|executor
operator|.
name|futures
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished init"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add, get, delete when zero cache size.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|zeroCacheAddGetDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting zeroCacheAddGetDelete"
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|dataStore
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|deleteRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished zeroCacheAddGetDelete"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add, get, delete when staging cache is 0.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|zeroStagingCacheAddGetDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting zeroStagingCacheAddGetDelete"
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|1
argument_list|,
literal|64
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|dataStore
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|deleteRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished zeroStagingCacheAddGetDelete"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add, get, delete with synchronous option.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|syncAddGetDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting syncAddGetDelete"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|,
operator|new
name|BlobOptions
argument_list|()
operator|.
name|setUpload
argument_list|(
name|SYNCHRONOUS
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|dataStore
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|deleteRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished syncAddGetDelete"
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link CompositeDataStoreCache#getIfPresent(String)} when no cache.      */
annotation|@
name|Test
specifier|public
name|void
name|getRecordNotAvailable
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getRecordNotAvailable"
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getRecordNotAvailable"
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@link CompositeDataStoreCache#get(String)} when no cache.      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting exists"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dataStore
operator|.
name|exists
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished exists"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add in datastore.      */
annotation|@
name|Test
specifier|public
name|void
name|addDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting addDelete"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//start& finish
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|deleteRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished addDelete"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add in staging and delete.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|addStagingAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting addStagingAndDelete"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|deleteRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//start& finish
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished addStagingAndDelete"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get all Identifiers.      */
annotation|@
name|Test
specifier|public
name|void
name|getAllIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting getAllIdentifiers"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|dataStore
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//start& finish
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterators
operator|.
name|contains
argument_list|(
name|dataStore
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished getAllIdentifiers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reference
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting reference"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
comment|// Record still in staging
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
comment|//start& finish
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
comment|// Now record in download cache
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished reference"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|referenceNoCache
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting referenceNoCache"
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fin
argument_list|)
expr_stmt|;
comment|// Record still in staging
name|DataRecord
name|rec
init|=
name|dataStore
operator|.
name|addRecord
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|rec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|=
name|dataStore
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|assertFile
argument_list|(
name|rec
operator|.
name|getStream
argument_list|()
argument_list|,
name|f
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|backend
operator|.
name|getReferenceFromIdentifier
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|,
name|rec
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished referenceNoCache"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tear
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|File
name|org
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|File
name|ret
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|is
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|org
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getIdForInputStream
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|Exception
block|{
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|output
operator|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitFinish
parameter_list|()
block|{
try|try
block|{
comment|// wait for upload finish
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Force execute removal from staging cache
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|scheduledExecutor
operator|.
name|schedule
argument_list|(
name|dataStore
operator|.
name|getCache
argument_list|()
operator|.
name|getStagingCache
argument_list|()
operator|.
operator|new
name|RemoveJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After jobs completed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

