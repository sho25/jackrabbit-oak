begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_comment
comment|/**  * Read-only namespace registry. Used mostly internally when access to the  * in-content registered namespaces is needed. See the  * {@link ReadWriteNamespaceRegistry} subclass for a more complete registry  * implementation that supports also namespace modifications and that's thus  * better suited for use in in implementing the full JCR API.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReadOnlyNamespaceRegistry
implements|implements
name|NamespaceRegistry
implements|,
name|NamespaceConstants
block|{
comment|/**      * Called by the {@link NamespaceRegistry} implementation methods      * to acquire a root {@link Tree} instance from which to read the      * namespace mappings (under {@code jcr:system/rep:namespaces}).      *      * @return root {@link Tree} for reading the namespace mappings      */
specifier|protected
specifier|abstract
name|Tree
name|getReadTree
parameter_list|()
function_decl|;
comment|//--------------------------------------------------< NamespaceRegistry>---
annotation|@
name|Override
specifier|public
name|void
name|registerNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
index|[]
name|getPrefixes
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|Tree
name|root
init|=
name|getReadTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Namespaces
operator|.
name|getNamespaceMap
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|String
index|[]
name|prefixes
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|prefixes
argument_list|)
expr_stmt|;
return|return
name|prefixes
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve registered namespace prefixes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
index|[]
name|getURIs
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|Tree
name|root
init|=
name|getReadTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Namespaces
operator|.
name|getNamespaceMap
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|String
index|[]
name|uris
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|uris
argument_list|)
expr_stmt|;
return|return
name|uris
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve registered namespace URIs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getURI
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|Tree
name|root
init|=
name|getReadTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Namespaces
operator|.
name|getNamespaceMap
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|map
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace registered for prefix "
operator|+
name|prefix
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve the namespace URI for prefix "
operator|+
name|prefix
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|Tree
name|root
init|=
name|getReadTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Namespaces
operator|.
name|getNamespaceMap
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"No namespace prefix registered for URI "
operator|+
name|uri
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to retrieve the namespace prefix for URI "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

