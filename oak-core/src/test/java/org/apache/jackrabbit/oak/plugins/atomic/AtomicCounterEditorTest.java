begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PREFIX_PROP_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PREFIX_PROP_REVISION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_INCREMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|MIX_ATOMIC_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
operator|.
name|EMPTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|LongPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|Clusterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AtomicCounterEditorTest
block|{
comment|/**      * convenience class to ease construction during tests      */
specifier|private
specifier|static
class|class
name|TestableACEProvider
extends|extends
name|AtomicCounterEditorProvider
block|{
specifier|public
name|TestableACEProvider
parameter_list|(
specifier|final
name|Clusterable
name|c
parameter_list|,
specifier|final
name|ScheduledExecutorService
name|e
parameter_list|,
specifier|final
name|NodeStore
name|s
parameter_list|,
specifier|final
name|Whiteboard
name|b
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Clusterable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Clusterable
name|get
parameter_list|()
block|{
return|return
name|c
return|;
block|}
empty_stmt|;
block|}
argument_list|,
operator|new
name|Supplier
argument_list|<
name|ScheduledExecutorService
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScheduledExecutorService
name|get
parameter_list|()
block|{
return|return
name|e
return|;
block|}
empty_stmt|;
block|}
argument_list|,
operator|new
name|Supplier
argument_list|<
name|NodeStore
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
block|{
return|return
name|s
return|;
block|}
block|}
argument_list|,
operator|new
name|Supplier
argument_list|<
name|Whiteboard
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Whiteboard
name|get
parameter_list|()
block|{
return|return
name|b
return|;
block|}
empty_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Clusterable
name|CLUSTER_1
init|=
operator|new
name|Clusterable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getInstanceId
parameter_list|()
block|{
return|return
literal|"1"
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Clusterable
name|CLUSTER_2
init|=
operator|new
name|Clusterable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getInstanceId
parameter_list|()
block|{
return|return
literal|"2"
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK_NO_CLUSTER
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TestableACEProvider
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK_1_SYNC
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TestableACEProvider
argument_list|(
name|CLUSTER_1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK_2_SYNC
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TestableACEProvider
argument_list|(
name|CLUSTER_2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyState
name|INCREMENT_BY_1
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyState
name|INCREMENT_BY_2
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
literal|2L
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|increment
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|Editor
name|editor
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|assertNoCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"the oak:increment should never be set"
argument_list|,
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_INCREMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTotalCountersValue
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consolidate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|Editor
name|editor
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|assertTotalCountersValue
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|assertTotalCountersValue
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|AtomicCounterEditor
operator|.
name|consolidateCount
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|,
name|PREFIX_PROP_REVISION
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * that a list of properties does not contains any property with name starting with      * {@link AtomicCounterEditor#PREFIX_PROP_COUNTER}      *       * @param properties      */
specifier|private
specifier|static
name|void
name|assertNoCounters
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|properties
control|)
block|{
name|assertFalse
argument_list|(
literal|"there should be no counter property"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * assert the total amount of {@link AtomicCounterEditor#PREFIX_PROP_COUNTER}      *       * @param properties      */
specifier|private
specifier|static
name|void
name|assertTotalCountersValue
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|checkNotNull
argument_list|(
name|properties
argument_list|)
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
condition|)
block|{
name|total
operator|+=
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"the total amount of :oak-counter properties does not match"
argument_list|,
name|expected
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|setMixin
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|builder
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|of
argument_list|(
name|MIX_ATOMIC_COUNTER
argument_list|)
argument_list|,
name|NAMES
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertCounterNodeState
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|String
argument_list|>
name|hiddenProps
parameter_list|,
name|long
name|expectedCounter
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|hiddenProps
argument_list|)
expr_stmt|;
name|long
name|totalHiddenValue
init|=
literal|0
decl_stmt|;
name|PropertyState
name|counter
init|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hp
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|hiddenProps
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"counter property cannot be null"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"The increment property should not be there"
argument_list|,
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_INCREMENT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|builder
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected hidden property found: "
operator|+
name|name
argument_list|,
name|hp
operator|.
name|remove
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
condition|)
block|{
name|totalHiddenValue
operator|+=
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"The sum of the hidden properties does not match the counter"
argument_list|,
name|counter
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|totalHiddenValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The counter does not match the expected value"
argument_list|,
name|expectedCounter
argument_list|,
name|counter
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|incrementBy
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|increment
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|builder
argument_list|)
operator|.
name|setProperty
argument_list|(
name|checkNotNull
argument_list|(
name|increment
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notCluster
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|NodeState
name|before
decl_stmt|,
name|after
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_NO_CLUSTER
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|,
name|PREFIX_PROP_REVISION
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_2
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_NO_CLUSTER
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|,
name|PREFIX_PROP_REVISION
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * simulates the update from multiple oak instances      * @throws CommitFailedException       */
annotation|@
name|Test
specifier|public
name|void
name|multipleNodeUpdates
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|NodeState
name|before
decl_stmt|,
name|after
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_1_SYNC
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
literal|"1"
argument_list|,
name|PREFIX_PROP_REVISION
operator|+
literal|"1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_2_SYNC
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
literal|"1"
argument_list|,
name|PREFIX_PROP_COUNTER
operator|+
literal|"2"
argument_list|,
name|PREFIX_PROP_REVISION
operator|+
literal|"1"
argument_list|,
name|PREFIX_PROP_REVISION
operator|+
literal|"2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * covers the revision increments aspect      * @throws CommitFailedException       */
annotation|@
name|Test
specifier|public
name|void
name|revisionIncrements
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|NodeState
name|before
decl_stmt|,
name|after
decl_stmt|;
name|PropertyState
name|rev
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_1_SYNC
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|rev
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rev
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_2
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_1_SYNC
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|rev
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rev
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|builder
operator|=
name|HOOK_2_SYNC
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|EMPTY
argument_list|)
operator|.
name|builder
argument_list|()
expr_stmt|;
name|rev
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rev
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|rev
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rev
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleNodeAsync
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MyExecutor
name|exec1
init|=
operator|new
name|MyExecutor
argument_list|()
decl_stmt|;
name|Whiteboard
name|board
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|EditorHook
name|hook1
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TestableACEProvider
argument_list|(
name|CLUSTER_1
argument_list|,
name|exec1
argument_list|,
name|store
argument_list|,
name|board
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
decl_stmt|,
name|root
decl_stmt|;
name|PropertyState
name|p
decl_stmt|;
name|board
operator|.
name|register
argument_list|(
name|CommitHook
operator|.
name|class
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|hook1
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// as we're providing all the information we expect the counter not to be consolidated for
comment|// as long as the scheduled process has run
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// executing the consolidation
name|exec1
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// fetching the latest store state to see the changes
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"the counter node should exists"
argument_list|,
name|builder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|,
name|PREFIX_PROP_REVISION
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noHookInWhiteboard
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MyExecutor
name|exec1
init|=
operator|new
name|MyExecutor
argument_list|()
decl_stmt|;
name|Whiteboard
name|board
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|EditorHook
name|hook1
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|TestableACEProvider
argument_list|(
name|CLUSTER_1
argument_list|,
name|exec1
argument_list|,
name|store
argument_list|,
name|board
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
decl_stmt|,
name|root
decl_stmt|;
name|PropertyState
name|p
decl_stmt|;
name|root
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|root
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|incrementBy
argument_list|(
name|builder
argument_list|,
name|INCREMENT_BY_1
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|hook1
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// as we're providing all the information we expect the counter not to be consolidated for
comment|// as long as the scheduled process has run
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_REVISION
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"without a registered hook it should have fell to sync"
argument_list|,
name|exec1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// fetching the latest store state to see the changes
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"the counter node should exists"
argument_list|,
name|builder
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertCounterNodeState
argument_list|(
name|builder
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|,
name|PREFIX_PROP_REVISION
operator|+
name|CLUSTER_1
operator|.
name|getInstanceId
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * a fake {@link ScheduledExecutorService} which does not schedule and wait for a call on      * {@link #execute()} to execute the first scheduled task. It works in a FIFO manner.      */
specifier|private
specifier|static
class|class
name|MyExecutor
extends|extends
name|AbstractExecutorService
implements|implements
name|ScheduledExecutorService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MyExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Queue
argument_list|<
name|ScheduledFuture
argument_list|>
name|fifo
init|=
operator|new
name|LinkedList
argument_list|<
name|ScheduledFuture
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
specifier|private
specifier|synchronized
name|void
name|addToQueue
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Nonnull
name|ScheduledFuture
name|future
parameter_list|)
block|{
name|fifo
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
comment|/**          * return true whether the underlying queue is empty or not          *           * @return          */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|fifo
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
specifier|synchronized
name|ScheduledFuture
name|getFromQueue
parameter_list|()
block|{
if|if
condition|(
name|fifo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|fifo
operator|.
name|remove
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|V
parameter_list|>
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|schedule
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scheduling with delay: {} and unit: {} the process {}"
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|,
name|callable
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
if|if
condition|(
name|delay
operator|<
literal|0
condition|)
block|{
name|delay
operator|=
literal|0
expr_stmt|;
block|}
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|future
init|=
operator|new
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|c
init|=
name|callable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
try|try
block|{
return|return
name|c
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|addToQueue
argument_list|(
name|future
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
comment|/**          * executes the first item scheduled in the queue. If the queue is empty it will silently          * return {@code null} which can easily be the same returned from the scheduled process.          *           * @return the result of the {@link ScheduledFuture} or {@code null} if the queue is empty.          * @throws InterruptedException          * @throws ExecutionException          */
annotation|@
name|CheckForNull
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|f
init|=
name|getFromQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|f
operator|.
name|get
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleAtFixedRate
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkRevision
parameter_list|()
block|{
name|NodeBuilder
name|b
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|PropertyState
name|r
init|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
literal|"r"
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|checkRevision
argument_list|(
name|b
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|checkRevision
argument_list|(
name|b
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|checkRevision
argument_list|(
name|b
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|checkRevision
argument_list|(
name|b
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|checkRevision
argument_list|(
name|b
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nextDelay
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MIN_TIMEOUT
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
operator|-
literal|23456789
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MIN_TIMEOUT
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MIN_TIMEOUT
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|4000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|8000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32000
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
literal|16000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MAX_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|nextDelay
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MAX_TIMEOUT
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isTimeOut
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|MAX_TIMEOUT
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// any number> 32
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
operator|.
name|isTimedOut
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isConsolidate
parameter_list|()
block|{
name|NodeBuilder
name|b
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|PropertyState
name|counter
decl_stmt|,
name|hidden1
decl_stmt|,
name|hidden2
decl_stmt|;
name|String
name|hidden1Name
init|=
name|PREFIX_PROP_COUNTER
operator|+
literal|"1"
decl_stmt|;
name|String
name|hidden2Name
init|=
name|PREFIX_PROP_COUNTER
operator|+
literal|"2"
decl_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|isConsolidate
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|PROP_COUNTER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hidden1
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|hidden1Name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|hidden1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|isConsolidate
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|PROP_COUNTER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hidden1
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|hidden1Name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hidden2
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|hidden2Name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|hidden1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|hidden2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AtomicCounterEditor
operator|.
name|isConsolidate
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|PROP_COUNTER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hidden1
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|hidden1Name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hidden2
operator|=
name|LongPropertyState
operator|.
name|createLongProperty
argument_list|(
name|hidden2Name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|hidden1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|hidden2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AtomicCounterEditor
operator|.
name|isConsolidate
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

