begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A builder for a commit, translating modifications into {@link UpdateOp}s.  */
end_comment

begin_class
class|class
name|CommitBuilder
block|{
comment|/** A marker revision when the commit is initially built */
specifier|static
specifier|final
name|Revision
name|PSEUDO_COMMIT_REVISION
init|=
operator|new
name|Revision
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
specifier|private
specifier|final
name|RevisionVector
name|baseRevision
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|UpdateOp
argument_list|>
name|operations
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|addedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Set of all nodes which have binary properties. **/
specifier|private
specifier|final
name|Set
argument_list|<
name|Path
argument_list|>
name|nodesWithBinaries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|bundledNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates a new builder with a pseudo commit revision. Building the commit      * must be done by calling {@link #build(Revision)}.      *      * @param nodeStore the node store.      * @param baseRevision the base revision if available.      */
name|CommitBuilder
parameter_list|(
annotation|@
name|NotNull
name|DocumentNodeStore
name|nodeStore
parameter_list|,
annotation|@
name|Nullable
name|RevisionVector
name|baseRevision
parameter_list|)
block|{
name|this
argument_list|(
name|nodeStore
argument_list|,
name|PSEUDO_COMMIT_REVISION
argument_list|,
name|baseRevision
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new builder with the given commit {@code revision}.      *      * @param nodeStore the node store.      * @param revision the commit revision.      * @param baseRevision the base revision of the commit or {@code null} if      *          none is set.      */
name|CommitBuilder
parameter_list|(
annotation|@
name|NotNull
name|DocumentNodeStore
name|nodeStore
parameter_list|,
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nullable
name|RevisionVector
name|baseRevision
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|checkNotNull
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseRevision
operator|=
name|baseRevision
expr_stmt|;
block|}
comment|/**      * @return the commit revision.      */
annotation|@
name|NotNull
name|Revision
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
comment|/**      * @return the base revision or {@code null} if none is set.      */
annotation|@
name|Nullable
name|RevisionVector
name|getBaseRevision
parameter_list|()
block|{
return|return
name|baseRevision
return|;
block|}
comment|/**      * Add a node to the commit with the given path.      *      * @param path the path of the node to add.      * @return {@code this} builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|addNode
parameter_list|(
annotation|@
name|NotNull
name|Path
name|path
parameter_list|)
block|{
name|addNode
argument_list|(
operator|new
name|DocumentNodeState
argument_list|(
name|nodeStore
argument_list|,
name|path
argument_list|,
operator|new
name|RevisionVector
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add a the given node and its properties to the commit.      *      * @param node the node state to add.      * @return {@code this} builder.      * @throws DocumentStoreException if there's already a modification for      *      a node at the given {@code path} in this commit builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|addNode
parameter_list|(
annotation|@
name|NotNull
name|DocumentNodeState
name|node
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|UpdateOp
name|op
init|=
name|node
operator|.
name|asOperation
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|operations
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Node already added: "
operator|+
name|path
decl_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranchCommit
argument_list|()
condition|)
block|{
name|NodeDocument
operator|.
name|setBranchCommit
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|addedNodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Instructs the commit builder that the bundling root of the node at      * {@code path} is at {@code bundlingRootPath}.      *      * @param path the path of a node.      * @param bundlingRootPath the bundling root for the node.      * @return {@code this} builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|addBundledNode
parameter_list|(
annotation|@
name|NotNull
name|Path
name|path
parameter_list|,
annotation|@
name|NotNull
name|Path
name|bundlingRootPath
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|bundlingRootPath
argument_list|)
expr_stmt|;
name|bundledNodes
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|bundlingRootPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Removes a node in this commit.      *      * @param path the path of the node to remove.      * @param state the node state representing the node to remove.      * @return {@code this} builder.      * @throws DocumentStoreException if there's already a modification for      *      a node at the given {@code path} in this commit builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|removeNode
parameter_list|(
annotation|@
name|NotNull
name|Path
name|path
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|state
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|operations
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Node already removed: "
operator|+
name|path
decl_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|removedNodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
name|getUpdateOperationForNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|op
operator|.
name|setDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setDeleted
argument_list|(
name|op
argument_list|,
name|revision
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|updateProperty
argument_list|(
name|path
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Updates a property to a given value.      *      * @param path the path of the node.      * @param propertyName the name of the property.      * @param value the value of the property.      * @return {@code this} builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|updateProperty
parameter_list|(
annotation|@
name|NotNull
name|Path
name|path
parameter_list|,
annotation|@
name|NotNull
name|String
name|propertyName
parameter_list|,
annotation|@
name|Nullable
name|String
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
name|getUpdateOperationForNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
name|key
argument_list|,
name|revision
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Instructs the commit builder that the node at the given {@code path} has      * a reference to a binary.      *      * @param path the path of the node.      * @return {@code this} builder.      */
annotation|@
name|NotNull
name|CommitBuilder
name|markNodeHavingBinary
parameter_list|(
annotation|@
name|NotNull
name|Path
name|path
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|nodesWithBinaries
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds the commit with the modifications.      *      * @return {@code this} builder.      * @throws IllegalStateException if this builder was created without an      *      explicit commit revision and {@link #build(Revision)} should have      *      been called instead.      */
annotation|@
name|NotNull
name|Commit
name|build
parameter_list|()
block|{
if|if
condition|(
name|PSEUDO_COMMIT_REVISION
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Cannot build a commit with a pseudo commit revision"
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
operator|new
name|Commit
argument_list|(
name|nodeStore
argument_list|,
name|revision
argument_list|,
name|baseRevision
argument_list|,
name|operations
argument_list|,
name|addedNodes
argument_list|,
name|removedNodes
argument_list|,
name|nodesWithBinaries
argument_list|,
name|bundledNodes
argument_list|)
return|;
block|}
comment|/**      * Builds the commit with the modifications and the given commit revision.      *      * @param revision the commit revision.      * @return {@code this} builder.      */
annotation|@
name|NotNull
name|Commit
name|build
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|Revision
name|from
init|=
name|this
operator|.
name|revision
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|UpdateOp
argument_list|>
name|operations
init|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|this
operator|.
name|operations
argument_list|,
name|op
lambda|->
name|rewrite
argument_list|(
name|op
argument_list|,
name|from
argument_list|,
name|revision
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Commit
argument_list|(
name|nodeStore
argument_list|,
name|revision
argument_list|,
name|baseRevision
argument_list|,
name|operations
argument_list|,
name|addedNodes
argument_list|,
name|removedNodes
argument_list|,
name|nodesWithBinaries
argument_list|,
name|bundledNodes
argument_list|)
return|;
block|}
comment|/**      * Returns the number of operations currently recorded by this commit      * builder.      *      * @return the number of operations.      */
name|int
name|getNumOperations
parameter_list|()
block|{
return|return
name|operations
operator|.
name|size
argument_list|()
return|;
block|}
comment|//-------------------------< internal>-------------------------------------
specifier|private
name|UpdateOp
name|getUpdateOperationForNode
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|op
operator|=
name|createUpdateOp
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
name|isBranchCommit
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|private
specifier|static
name|UpdateOp
name|createUpdateOp
parameter_list|(
name|Path
name|path
parameter_list|,
name|Revision
name|revision
parameter_list|,
name|boolean
name|isBranch
parameter_list|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBranch
condition|)
block|{
name|NodeDocument
operator|.
name|setBranchCommit
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
comment|/**      * @return {@code true} if this is a branch commit.      */
specifier|private
name|boolean
name|isBranchCommit
parameter_list|()
block|{
return|return
name|baseRevision
operator|!=
literal|null
operator|&&
name|baseRevision
operator|.
name|isBranch
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|UpdateOp
name|rewrite
parameter_list|(
name|UpdateOp
name|up
parameter_list|,
name|Revision
name|from
parameter_list|,
name|Revision
name|to
parameter_list|)
block|{
name|Map
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|UpdateOp
operator|.
name|Operation
argument_list|>
name|changes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|UpdateOp
operator|.
name|Operation
argument_list|>
name|entry
range|:
name|up
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UpdateOp
operator|.
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|UpdateOp
operator|.
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|k
operator|=
operator|new
name|UpdateOp
operator|.
name|Key
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|op
operator|=
operator|new
name|UpdateOp
operator|.
name|Operation
argument_list|(
name|op
operator|.
name|type
argument_list|,
name|NodeDocument
operator|.
name|getModifiedInSecs
argument_list|(
name|to
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changes
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UpdateOp
argument_list|(
name|up
operator|.
name|getId
argument_list|()
argument_list|,
name|up
operator|.
name|isNew
argument_list|()
argument_list|,
name|up
operator|.
name|isDelete
argument_list|()
argument_list|,
name|changes
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

