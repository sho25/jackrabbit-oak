begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ParseVersionCopyArgumentTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|parseTrue
parameter_list|()
throws|throws
name|ParseException
block|{
for|for
control|(
name|String
name|argument
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"true"
argument_list|,
literal|"TRUE"
argument_list|,
literal|"TrUe"
argument_list|)
control|)
block|{
specifier|final
name|Calendar
name|result
init|=
name|Main
operator|.
name|parseVersionCopyArgument
argument_list|(
name|argument
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseDate
parameter_list|()
throws|throws
name|ParseException
block|{
specifier|final
name|Calendar
name|result
init|=
name|Main
operator|.
name|parseVersionCopyArgument
argument_list|(
literal|"2013-01-01"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|GregorianCalendar
argument_list|(
literal|2013
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseFalse
parameter_list|()
throws|throws
name|ParseException
block|{
for|for
control|(
name|String
name|argument
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"false"
argument_list|,
literal|"FaLse"
argument_list|,
literal|""
argument_list|,
literal|"xyz"
argument_list|,
literal|null
argument_list|)
control|)
block|{
specifier|final
name|Calendar
name|result
init|=
name|Main
operator|.
name|parseVersionCopyArgument
argument_list|(
name|argument
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

