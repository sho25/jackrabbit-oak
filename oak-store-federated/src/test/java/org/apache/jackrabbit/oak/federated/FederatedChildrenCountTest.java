begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|federated
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|cycle
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|limit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|MAX_VALUE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|FederatedChildrenCountTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|singleContributingStore
parameter_list|()
block|{
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeStore
name|globalStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|FederatedNodeStore
name|federatedNodeStore
init|=
operator|new
name|FederatedNodeStore
operator|.
name|Builder
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FederatedNodeStoreBuilder
name|b
init|=
operator|new
name|FederatedNodeStoreBuilder
argument_list|(
name|federatedNodeStore
operator|.
name|ctx
argument_list|)
decl_stmt|;
name|b
operator|.
name|configureMount
argument_list|(
literal|"/"
argument_list|,
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|b
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|clear
argument_list|()
operator|.
name|configureMount
argument_list|(
literal|"/"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|b
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleContributingStores
parameter_list|()
block|{
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"libs"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/libs1"
argument_list|,
literal|"/libs2"
argument_list|,
literal|"/libs3"
argument_list|,
literal|"/libs4"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeStore
name|globalStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeStore
name|libsStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|mounts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|mounts
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"libs"
argument_list|)
argument_list|,
name|libsStore
argument_list|)
argument_list|)
expr_stmt|;
name|FederatedNodeStore
name|federatedNodeStore
init|=
operator|new
name|FederatedNodeStore
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|,
name|mounts
argument_list|)
decl_stmt|;
name|FederatedNodeStoreBuilder
name|b
init|=
operator|new
name|FederatedNodeStoreBuilder
argument_list|(
name|federatedNodeStore
operator|.
name|ctx
argument_list|)
decl_stmt|;
name|TestingNodeState
name|globalTestingNS
init|=
name|b
operator|.
name|configureMount
argument_list|(
literal|"/"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TestingNodeState
name|libsTestingNS
init|=
name|b
operator|.
name|configureMount
argument_list|(
literal|"/libs"
argument_list|,
literal|"libs"
argument_list|,
literal|"libs1"
argument_list|,
literal|"libs2"
argument_list|)
decl_stmt|;
name|FederatedNodeState
name|mns
init|=
name|b
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mns
operator|.
name|getChildNodeCount
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|getChildNodeCount
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|getChildNodeCount
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mns
operator|.
name|builder
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|builder
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|builder
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contributingStoreReturnsInfinity
parameter_list|()
block|{
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"libs"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/libs1"
argument_list|,
literal|"/libs2"
argument_list|,
literal|"/libs3"
argument_list|,
literal|"/libs4"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeStore
name|globalStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeStore
name|libsStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|mounts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|mounts
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"libs"
argument_list|)
argument_list|,
name|libsStore
argument_list|)
argument_list|)
expr_stmt|;
name|FederatedNodeStore
name|federatedNodeStore
init|=
operator|new
name|FederatedNodeStore
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|,
name|mounts
argument_list|)
decl_stmt|;
name|FederatedNodeStoreBuilder
name|b
init|=
operator|new
name|FederatedNodeStoreBuilder
argument_list|(
name|federatedNodeStore
operator|.
name|ctx
argument_list|)
decl_stmt|;
name|TestingNodeState
name|globalTestingNS
init|=
name|b
operator|.
name|configureMount
argument_list|(
literal|"/"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TestingNodeState
name|libsTestingNS
init|=
name|b
operator|.
name|configureMount
argument_list|(
literal|"/libs"
argument_list|,
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|FederatedNodeState
name|mns
init|=
name|b
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|globalTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|libsTestingNS
operator|.
name|fetchedChildren
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_VALUE
argument_list|,
name|mns
operator|.
name|builder
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|globalTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|libsTestingNS
operator|.
name|fetchedChildren
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FederatedNodeStoreBuilder
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|MountedNodeStore
argument_list|,
name|NodeState
argument_list|>
name|rootStates
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FederationContext
name|ctx
decl_stmt|;
specifier|public
name|FederatedNodeStoreBuilder
parameter_list|(
name|FederationContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
block|}
specifier|public
name|TestingNodeState
name|configureMount
parameter_list|(
name|String
name|mountPath
parameter_list|,
name|long
name|children
parameter_list|)
block|{
name|TestingNodeState
name|nodeState
init|=
operator|new
name|TestingNodeState
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|rootStates
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|getOwningStore
argument_list|(
name|mountPath
argument_list|)
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
return|return
name|nodeState
return|;
block|}
specifier|public
name|TestingNodeState
name|configureMount
parameter_list|(
name|String
name|mountPath
parameter_list|,
name|String
modifier|...
name|children
parameter_list|)
block|{
name|TestingNodeState
name|nodeState
init|=
operator|new
name|TestingNodeState
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|rootStates
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|getOwningStore
argument_list|(
name|mountPath
argument_list|)
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
return|return
name|nodeState
return|;
block|}
specifier|public
name|FederatedNodeState
name|getNodeState
parameter_list|()
block|{
return|return
operator|new
name|FederatedNodeState
argument_list|(
literal|"/"
argument_list|,
name|rootStates
argument_list|,
name|ctx
argument_list|)
return|;
block|}
specifier|public
name|FederatedNodeStoreBuilder
name|clear
parameter_list|()
block|{
name|rootStates
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestingNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|final
name|long
name|childrenCount
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|children
decl_stmt|;
specifier|private
name|long
name|fetchedChildren
init|=
literal|0
decl_stmt|;
specifier|private
name|TestingNodeState
parameter_list|(
name|long
name|childrenCount
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|childrenCount
operator|=
name|childrenCount
expr_stmt|;
block|}
specifier|private
name|TestingNodeState
parameter_list|(
name|String
modifier|...
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|childrenCount
operator|=
name|children
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|EmptyNodeState
operator|.
name|MISSING_NODE
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|childrenIterable
init|=
name|cycle
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
literal|"child"
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|asCountingIterable
argument_list|(
name|limit
argument_list|(
name|childrenIterable
argument_list|,
name|childrenCount
operator|==
name|MAX_VALUE
condition|?
literal|1000
else|:
operator|(
name|int
operator|)
name|childrenCount
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|asCountingIterable
argument_list|(
name|transform
argument_list|(
name|asList
argument_list|(
name|children
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|input
argument_list|,
name|EMPTY_NODE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
return|return
name|childrenCount
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|ReadOnlyBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|asCountingIterable
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|T
name|apply
parameter_list|(
annotation|@
name|Nullable
name|T
name|input
parameter_list|)
block|{
name|fetchedChildren
operator|++
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

