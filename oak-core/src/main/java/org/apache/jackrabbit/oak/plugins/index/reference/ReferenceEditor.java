begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|INTEGRITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|REFERENCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|WEAKREFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|WEAKREFERENCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
operator|.
name|REF_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
operator|.
name|WEAK_REF_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ImmutableRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Index editor for keeping a references to a node up to date.  *   */
end_comment

begin_class
class|class
name|ReferenceEditor
extends|extends
name|DefaultEditor
block|{
comment|// TODO
comment|// - look into using a storage strategy (trees)
comment|// - what happens when you move a node? who updates the backlinks?
comment|/** Parent editor, or {@code null} if this is the root editor. */
specifier|private
specifier|final
name|ReferenceEditor
name|parent
decl_stmt|;
comment|/** Name of this node, or {@code null} for the root node. */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** Path of this editor, built lazily in {@link #getPath()}. */
specifier|private
name|String
name|path
decl_stmt|;
comment|/** The Id Manager, built lazily in {@link #getIdManager()}. */
specifier|private
name|IdentifierManager
name|idManager
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
comment|/**      * the uuid of the current node, null if the node doesn't have this      * property.      */
specifier|private
specifier|final
name|String
name|uuid
decl_stmt|;
comment|/**      *<UUID, Set<paths-pointing-to-the-uuid>>      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newRefs
decl_stmt|;
comment|/**      *<UUID, Set<paths-pointing-to-the-uuid>>      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|rmRefs
decl_stmt|;
comment|/**      *<UUID, Set<paths-pointing-to-the-uuid>>      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newWeakRefs
decl_stmt|;
comment|/**      *<UUID, Set<paths-pointing-to-the-uuid>>      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|rmWeakRefs
decl_stmt|;
comment|/**      * set of removed Ids of nodes that have a :reference property. These UUIDs      * need to be verified in the #after call      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|rmIds
decl_stmt|;
comment|/**      * set of ids that changed. This can happen when a node with the same name      * is deleted and added again      *       */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|discardedIds
decl_stmt|;
specifier|public
name|ReferenceEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|newRefs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmRefs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|newWeakRefs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmWeakRefs
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmIds
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|discardedIds
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ReferenceEditor
parameter_list|(
name|ReferenceEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|parent
operator|.
name|builder
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|newRefs
operator|=
name|parent
operator|.
name|newRefs
expr_stmt|;
name|this
operator|.
name|rmRefs
operator|=
name|parent
operator|.
name|rmRefs
expr_stmt|;
name|this
operator|.
name|newWeakRefs
operator|=
name|parent
operator|.
name|newWeakRefs
expr_stmt|;
name|this
operator|.
name|rmWeakRefs
operator|=
name|parent
operator|.
name|rmWeakRefs
expr_stmt|;
name|this
operator|.
name|rmIds
operator|=
name|parent
operator|.
name|rmIds
expr_stmt|;
name|this
operator|.
name|discardedIds
operator|=
name|parent
operator|.
name|discardedIds
expr_stmt|;
block|}
comment|/**      * Returns the path of this node, building it lazily when first requested.      */
specifier|private
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**      * Returns the id manager, building it lazily when first requested.      */
specifier|private
name|IdentifierManager
name|getIdManager
parameter_list|()
block|{
if|if
condition|(
name|idManager
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getIdManager
argument_list|()
return|;
block|}
name|this
operator|.
name|idManager
operator|=
operator|new
name|IdentifierManager
argument_list|(
operator|new
name|ImmutableRoot
argument_list|(
name|this
operator|.
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|idManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|offending
init|=
name|newHashSet
argument_list|(
name|rmIds
argument_list|)
decl_stmt|;
name|offending
operator|.
name|removeAll
argument_list|(
name|rmRefs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|offending
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|INTEGRITY
argument_list|,
literal|1
argument_list|,
literal|"Unable to delete referenced node"
argument_list|)
throw|;
block|}
name|rmIds
operator|.
name|addAll
argument_list|(
name|discardedIds
argument_list|)
expr_stmt|;
comment|// local uuid-> nodebuilder cache
name|Map
argument_list|<
name|String
argument_list|,
name|NodeBuilder
argument_list|>
name|builders
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
range|:
name|rmRefs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|uuid
init|=
name|ref
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmIds
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|child
init|=
name|resolveUUID
argument_list|(
name|uuid
argument_list|,
name|getIdManager
argument_list|()
argument_list|,
name|builder
argument_list|,
name|builders
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|INTEGRITY
argument_list|,
literal|2
argument_list|,
literal|"Unable to resolve UUID "
operator|+
name|uuid
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|rm
init|=
name|ref
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|add
init|=
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|newRefs
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|add
operator|=
name|newRefs
operator|.
name|remove
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|child
argument_list|,
name|REF_NAME
argument_list|,
name|add
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
range|:
name|newRefs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|uuid
init|=
name|ref
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmIds
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|child
init|=
name|resolveUUID
argument_list|(
name|uuid
argument_list|,
name|getIdManager
argument_list|()
argument_list|,
name|builder
argument_list|,
name|builders
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|INTEGRITY
argument_list|,
literal|3
argument_list|,
literal|"Unable to resolve UUID "
operator|+
name|uuid
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|add
init|=
name|ref
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rm
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|child
argument_list|,
name|REF_NAME
argument_list|,
name|add
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
range|:
name|rmWeakRefs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|uuid
init|=
name|ref
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmIds
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|child
init|=
name|resolveUUID
argument_list|(
name|uuid
argument_list|,
name|getIdManager
argument_list|()
argument_list|,
name|builder
argument_list|,
name|builders
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
comment|// TODO log warning?
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|rm
init|=
name|ref
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|add
init|=
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|newWeakRefs
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|add
operator|=
name|newWeakRefs
operator|.
name|remove
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|child
argument_list|,
name|WEAK_REF_NAME
argument_list|,
name|add
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
range|:
name|newWeakRefs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|uuid
init|=
name|ref
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmIds
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeBuilder
name|child
init|=
name|resolveUUID
argument_list|(
name|uuid
argument_list|,
name|getIdManager
argument_list|()
argument_list|,
name|builder
argument_list|,
name|builders
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
comment|// TODO log warning?
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|add
init|=
name|ref
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rm
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|child
argument_list|,
name|WEAK_REF_NAME
argument_list|,
name|add
argument_list|,
name|rm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|propertyChanged
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|before
operator|.
name|getType
argument_list|()
operator|==
name|REFERENCE
operator|||
name|before
operator|.
name|getType
argument_list|()
operator|==
name|REFERENCES
condition|)
block|{
name|put
argument_list|(
name|rmRefs
argument_list|,
name|before
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|before
operator|.
name|getType
argument_list|()
operator|==
name|WEAKREFERENCE
operator|||
name|before
operator|.
name|getType
argument_list|()
operator|==
name|WEAKREFERENCES
condition|)
block|{
name|put
argument_list|(
name|rmWeakRefs
argument_list|,
name|before
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// node remove + add -> changed uuid
name|String
name|beforeUuid
init|=
name|before
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeUuid
operator|!=
literal|null
operator|&&
operator|!
name|beforeUuid
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|discardedIds
operator|.
name|add
argument_list|(
name|beforeUuid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|after
operator|.
name|getType
argument_list|()
operator|==
name|REFERENCE
operator|||
name|after
operator|.
name|getType
argument_list|()
operator|==
name|REFERENCES
condition|)
block|{
name|put
argument_list|(
name|newRefs
argument_list|,
name|after
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|.
name|getType
argument_list|()
operator|==
name|WEAKREFERENCE
operator|||
name|after
operator|.
name|getType
argument_list|()
operator|==
name|WEAKREFERENCES
condition|)
block|{
name|put
argument_list|(
name|newWeakRefs
argument_list|,
name|after
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|propertyChanged
argument_list|(
name|before
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|String
name|path
init|=
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVersionStorePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ReferenceEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|after
operator|.
name|getString
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|String
name|path
init|=
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVersionStorePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ReferenceEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|after
operator|.
name|getString
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|path
init|=
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVersionStorePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|uuid
init|=
name|before
operator|.
name|getString
argument_list|(
name|JCR_UUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|.
name|hasProperty
argument_list|(
name|REF_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|rmIds
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ReferenceEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|uuid
argument_list|)
return|;
block|}
comment|// ---------- Utils -----------------------------------------
specifier|private
specifier|static
name|NodeBuilder
name|resolveUUID
parameter_list|(
name|String
name|uuid
parameter_list|,
name|IdentifierManager
name|idManager
parameter_list|,
name|NodeBuilder
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeBuilder
argument_list|>
name|builders
parameter_list|)
block|{
if|if
condition|(
name|builders
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
return|return
name|builders
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
name|String
name|path
init|=
name|idManager
operator|.
name|resolveUUID
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeBuilder
name|child
init|=
name|getChild
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|builders
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|getChild
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|child
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|child
operator|=
name|child
operator|.
name|child
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isVersionStorePath
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|)
block|{
if|if
condition|(
name|oakPath
operator|.
name|indexOf
argument_list|(
name|JcrConstants
operator|.
name|JCR_SYSTEM
argument_list|)
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|VersionConstants
operator|.
name|SYSTEM_PATHS
control|)
block|{
if|if
condition|(
name|oakPath
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|put
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|set
parameter_list|(
name|NodeBuilder
name|child
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|add
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|rm
parameter_list|)
block|{
comment|// TODO should we optimize for the remove/add case? intersect the
comment|// sets, work on the diffs?
name|Set
argument_list|<
name|String
argument_list|>
name|vals
decl_stmt|;
name|PropertyState
name|ref
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|vals
operator|=
name|newHashSet
argument_list|(
name|ref
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vals
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
block|}
name|vals
operator|.
name|addAll
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|vals
operator|.
name|removeAll
argument_list|(
name|rm
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|vals
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

