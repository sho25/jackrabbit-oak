begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|MultiDataStoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|CONSISTENCY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|FINISH_FAILURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|NUM_BLOBS_DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|NUM_CANDIDATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|GarbageCollectionOperationStats
operator|.
name|TOTAL_SIZE_DELETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|OperationsStatsMBean
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|randomStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
operator|.
name|METRICS_ONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Generic class for BlobGC tests which uses custom MemoryNodeStore as well as a memory NodeStore.  */
end_comment

begin_class
specifier|public
class|class
name|BlobGCTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobGCTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|Whiteboard
name|wb
decl_stmt|;
specifier|protected
name|Closer
name|closer
decl_stmt|;
specifier|protected
name|Cluster
name|cluster
decl_stmt|;
specifier|protected
name|Clock
name|clock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|=
name|Closer
operator|.
name|create
argument_list|()
expr_stmt|;
name|clock
operator|=
name|getClock
argument_list|()
expr_stmt|;
comment|// add whiteboard
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|wb
operator|=
operator|new
name|DefaultWhiteboard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|props
operator|.
name|set
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|service
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|TimeLapsedDataStore
name|dataStore
init|=
operator|new
name|TimeLapsedDataStore
argument_list|()
decl_stmt|;
name|DataStoreBlobStore
name|blobStore
init|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|dataStore
argument_list|)
decl_stmt|;
name|MemoryBlobStoreNodeStore
name|nodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|blobStore
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|blobStore
argument_list|,
name|nodeStore
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing cluster instances"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Clock
name|getClock
parameter_list|()
block|{
return|return
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
return|;
block|}
class|class
name|Cluster
implements|implements
name|Closeable
block|{
specifier|protected
specifier|final
name|BlobStoreState
name|blobStoreState
decl_stmt|;
specifier|private
specifier|final
name|File
name|root
decl_stmt|;
name|String
name|repoId
decl_stmt|;
specifier|protected
specifier|final
name|TimeLapsedDataStore
name|dataStore
decl_stmt|;
specifier|protected
specifier|final
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
specifier|protected
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|MarkSweepGarbageCollector
name|collector
decl_stmt|;
specifier|protected
name|BlobReferenceRetriever
name|referenceRetriever
decl_stmt|;
specifier|protected
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
specifier|protected
name|ThreadPoolExecutor
name|executor
decl_stmt|;
specifier|protected
name|DefaultStatisticsProvider
name|statsProvider
decl_stmt|;
specifier|protected
name|long
name|startReferenceTime
decl_stmt|;
specifier|public
name|Cluster
parameter_list|(
name|File
name|root
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|dataStore
operator|=
call|(
name|TimeLapsedDataStore
call|)
argument_list|(
operator|(
name|DataStoreBlobStore
operator|)
name|blobStore
argument_list|)
operator|.
name|getDataStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|referenceRetriever
operator|=
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|getBlobReferenceRetriever
argument_list|()
expr_stmt|;
name|startReferenceTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reference time {}"
argument_list|,
name|startReferenceTime
argument_list|)
expr_stmt|;
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|executor
operator|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|statsProvider
operator|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|scheduledExecutor
argument_list|)
expr_stmt|;
name|blobStoreState
operator|=
name|setUp
argument_list|(
name|nodeStore
argument_list|,
name|blobStore
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRepoId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|repoId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|MarkSweepGarbageCollector
name|getCollector
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|)
throws|throws
name|Exception
block|{
name|collector
operator|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
name|referenceRetriever
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|2048
argument_list|,
name|blobGcMaxAgeInSecs
argument_list|,
name|repoId
argument_list|,
name|wb
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
return|return
name|collector
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ExecutorCloser
argument_list|(
name|scheduledExecutor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sharedGC
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring sharedGC()"
argument_list|)
expr_stmt|;
comment|// Setup a different cluster/repository sharing the blob store
name|MemoryBlobStoreNodeStore
name|secondClusterNodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|)
decl_stmt|;
name|Cluster
name|secondCluster
init|=
operator|new
name|Cluster
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStore
argument_list|,
name|secondClusterNodeStore
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|secondCluster
argument_list|)
expr_stmt|;
name|Sets
operator|.
name|SetView
argument_list|<
name|String
argument_list|>
name|totalPresent
init|=
name|Sets
operator|.
name|union
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|secondCluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|)
decl_stmt|;
name|Sets
operator|.
name|SetView
argument_list|<
name|String
argument_list|>
name|totalAdded
init|=
name|Sets
operator|.
name|union
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|,
name|secondCluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|)
decl_stmt|;
comment|// Execute mark on the default cluster
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|secondCluster
argument_list|,
name|secondCluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|totalPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|secondCluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|totalAdded
operator|.
name|size
argument_list|()
operator|-
name|totalPresent
operator|.
name|size
argument_list|()
argument_list|,
name|totalAdded
operator|.
name|size
argument_list|()
operator|-
name|totalPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSharedGC
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting noSharedGC()"
argument_list|)
expr_stmt|;
comment|// Setup a different cluster/repository sharing the blob store
name|MemoryBlobStoreNodeStore
name|secondClusterNodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|)
decl_stmt|;
name|Cluster
name|secondCluster
init|=
operator|new
name|Cluster
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStore
argument_list|,
name|secondClusterNodeStore
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|secondCluster
argument_list|)
expr_stmt|;
name|Sets
operator|.
name|SetView
argument_list|<
name|String
argument_list|>
name|totalAdded
init|=
name|Sets
operator|.
name|union
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|,
name|secondCluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|secondCluster
argument_list|,
name|secondCluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalAdded
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|secondCluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sharedGCRepositoryCloned
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting sharedGCRepoCloned()"
argument_list|)
expr_stmt|;
comment|// Setup a different cluster/repository sharing the blob store and the repository id
name|MemoryBlobStoreNodeStore
name|secondClusterNodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|)
decl_stmt|;
name|Cluster
name|secondCluster
init|=
operator|new
name|Cluster
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStore
argument_list|,
name|secondClusterNodeStore
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|secondCluster
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|secondCluster
operator|.
name|blobStore
operator|)
operator|.
name|deleteMetadataRecord
argument_list|(
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|secondCluster
operator|.
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
name|secondCluster
operator|.
name|setRepoId
argument_list|(
name|cluster
operator|.
name|repoId
argument_list|)
expr_stmt|;
name|Sets
operator|.
name|SetView
argument_list|<
name|String
argument_list|>
name|totalPresent
init|=
name|Sets
operator|.
name|union
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|secondCluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|)
decl_stmt|;
comment|// Execute mark on the default cluster
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|secondCluster
argument_list|,
name|secondCluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|totalPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting gc()"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcWithNoDeleteDirectBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting gcWithNoDeleteDirectBinary()"
argument_list|)
expr_stmt|;
name|setupDirectBinary
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcWithDeleteDirectBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting gcWithNoDeleteDirectBinary()"
argument_list|)
expr_stmt|;
name|setupDirectBinary
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noGc
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting noGc()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"after setup time {}"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
name|afterSetupTime
operator|-
name|cluster
operator|.
name|startReferenceTime
operator|+
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting checkConsistency()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"after setup time {}"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|MarkSweepGarbageCollector
name|collector
init|=
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|missing
init|=
name|collector
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|missing
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|CONSISTENCY_NAME
argument_list|)
expr_stmt|;
name|assertStatsBean
argument_list|(
name|collector
operator|.
name|getConsistencyOperationStats
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkConsistencyFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting checkConsistencyFailure()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"after setup time {}"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|blobStore
operator|.
name|countDeleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|getLast
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MarkSweepGarbageCollector
name|collector
init|=
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|missing
init|=
name|collector
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|missing
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|CONSISTENCY_NAME
argument_list|)
expr_stmt|;
name|assertStatsBean
argument_list|(
name|collector
operator|.
name|getConsistencyOperationStats
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcCheckDeletedSize
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting gcCheckDeletedSize()"
argument_list|)
expr_stmt|;
comment|// Capture logs for the second round of gc
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|MarkSweepGarbageCollector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Estimated size recovered for"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|deletedSize
init|=
operator|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
operator|)
operator|*
literal|100
decl_stmt|;
name|assertTrue
argument_list|(
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|deletedSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
operator|-
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deletedSize
argument_list|,
name|getStatCount
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
name|NAME
argument_list|,
name|TOTAL_SIZE_DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcMarkOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting gcMarkOnly()"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertStats
argument_list|(
name|cluster
operator|.
name|statsProvider
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|executeGarbageCollection
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|MarkSweepGarbageCollector
name|collector
parameter_list|,
name|boolean
name|markOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|collector
operator|.
name|collectGarbage
argument_list|(
name|markOnly
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs existing after gc : {}"
argument_list|,
name|existingAfterGC
operator|.
name|size
argument_list|()
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
return|return
name|existingAfterGC
return|;
block|}
specifier|private
name|void
name|assertStats
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|failure
parameter_list|,
name|long
name|deleted
parameter_list|,
name|long
name|candidates
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Start counter mismatch"
argument_list|,
name|start
argument_list|,
name|getStatCount
argument_list|(
name|statsProvider
argument_list|,
name|typeName
argument_list|,
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish error mismatch"
argument_list|,
name|failure
argument_list|,
name|getStatCount
argument_list|(
name|statsProvider
argument_list|,
name|typeName
argument_list|,
name|FINISH_FAILURE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num deleted mismatch"
argument_list|,
name|deleted
argument_list|,
name|getStatCount
argument_list|(
name|statsProvider
argument_list|,
name|typeName
argument_list|,
name|NUM_BLOBS_DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num candidates mismatch"
argument_list|,
name|candidates
argument_list|,
name|getStatCount
argument_list|(
name|statsProvider
argument_list|,
name|typeName
argument_list|,
name|NUM_CANDIDATES
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertStatsBean
parameter_list|(
name|OperationsStatsMBean
name|mbean
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|failure
parameter_list|,
name|long
name|deleted
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Start counter mismatch"
argument_list|,
name|start
argument_list|,
name|mbean
operator|.
name|getStartCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish error mismatch"
argument_list|,
name|failure
argument_list|,
name|mbean
operator|.
name|getFailureCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num deleted mismatch"
argument_list|,
name|deleted
argument_list|,
name|mbean
operator|.
name|numDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getStatCount
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|statsProvider
operator|.
name|getCounterStats
argument_list|(
name|TYPE
operator|+
literal|"."
operator|+
name|typeName
operator|+
literal|"."
operator|+
name|name
argument_list|,
name|METRICS_ONLY
argument_list|)
operator|.
name|getCount
argument_list|()
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iterate
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cur
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
specifier|public
name|BlobStoreState
name|setUp
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|deletions
parameter_list|,
name|int
name|blobSize
parameter_list|,
name|int
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
name|preSetup
argument_list|()
expr_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/* Create and delete nodes with blobs stored in DS*/
name|int
name|maxDeleted
init|=
name|deletions
decl_stmt|;
name|int
name|numBlobs
init|=
name|count
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toBeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDeleted
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numBlobs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|toBeDeleted
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|BlobStoreState
name|state
init|=
operator|new
name|BlobStoreState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlobs
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|seed
argument_list|)
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|blobSize
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|state
operator|.
name|blobsPresent
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created blobs : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|toBeDeleted
control|)
block|{
name|delete
argument_list|(
literal|"c"
operator|+
name|id
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Deleted nodes : {}"
argument_list|,
name|toBeDeleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep a little to make eligible for cleanup
name|clock
operator|.
name|waitUntil
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|postSetup
argument_list|(
name|nodeStore
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs added : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs remaining : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|protected
name|void
name|setupDirectBinary
parameter_list|(
name|int
name|numCreate
parameter_list|,
name|int
name|numDelete
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCreate
condition|;
name|i
operator|++
control|)
block|{
name|BlobUpload
name|blobUpload
init|=
operator|(
operator|(
name|BlobAccessProvider
operator|)
name|cluster
operator|.
name|blobStore
operator|)
operator|.
name|initiateBlobUpload
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
operator|(
operator|(
name|BlobAccessProvider
operator|)
name|cluster
operator|.
name|blobStore
operator|)
operator|.
name|completeBlobUpload
argument_list|(
name|blobUpload
operator|.
name|getUploadToken
argument_list|()
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|add
argument_list|(
name|blob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|add
argument_list|(
name|blob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|cluster
operator|.
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"dbu"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
name|cluster
operator|.
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"dbu"
operator|+
name|i
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|Blob
name|blobReturned
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|cluster
operator|.
name|nodeStore
operator|)
operator|.
name|getReferencedBlobs
argument_list|()
operator|.
name|add
argument_list|(
name|blobReturned
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|numCreate
argument_list|,
name|numDelete
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|PropertyState
name|property
init|=
name|cluster
operator|.
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"dbu"
operator|+
name|i
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
name|delete
argument_list|(
literal|"dbu"
operator|+
name|i
argument_list|,
name|cluster
operator|.
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|cluster
operator|.
name|nodeStore
operator|)
operator|.
name|getReferencedBlobs
argument_list|()
operator|.
name|remove
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|remove
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|createBlobs
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|blobSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|10
operator|+
name|i
argument_list|,
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|blobSet
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"{} Additional created {}"
argument_list|,
name|blobSet
operator|.
name|size
argument_list|()
argument_list|,
name|blobSet
argument_list|)
expr_stmt|;
return|return
name|blobSet
return|;
block|}
name|void
name|preSetup
parameter_list|()
block|{}
specifier|protected
name|void
name|postSetup
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|BlobStoreState
name|state
parameter_list|)
block|{
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|setReferencedBlobs
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|nodeId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Represents state of the blobs after setup      */
class|class
name|BlobStoreState
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|blobsAdded
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|blobsPresent
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
block|}
comment|/**      * MemoryNodeStore extension which created blobs in the in-memory blob store      */
specifier|public
specifier|static
class|class
name|MemoryBlobStoreNodeStore
extends|extends
name|MemoryNodeStore
block|{
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|referencedBlobs
decl_stmt|;
specifier|public
name|MemoryBlobStoreNodeStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
specifier|public
name|void
name|setReferencedBlobs
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|referencedBlobs
parameter_list|)
block|{
name|this
operator|.
name|referencedBlobs
operator|=
name|referencedBlobs
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getReferencedBlobs
parameter_list|()
block|{
return|return
name|this
operator|.
name|referencedBlobs
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArrayBasedBlob
name|createBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
name|String
name|id
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestBlob
argument_list|(
name|id
argument_list|,
name|blobStore
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in createBlobs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|BlobReferenceRetriever
name|getBlobReferenceRetriever
parameter_list|()
block|{
return|return
name|collector
lambda|->
block|{
for|for
control|(
name|String
name|id
range|:
name|referencedBlobs
control|)
block|{
name|collector
operator|.
name|addReference
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|static
class|class
name|TestBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|public
name|TestBlob
parameter_list|(
name|String
name|id
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentIdentity
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in getNewStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in length"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
comment|/**      * Test in memory DS to store the contents with an increasing time      */
class|class
name|TimeLapsedDataStore
implements|implements
name|DataStore
implements|,
name|MultiDataStoreAware
implements|,
name|SharedDataStore
implements|,
name|DataRecordAccessProvider
block|{
specifier|public
specifier|static
specifier|final
name|int
name|MIN_RECORD_LENGTH
init|=
literal|50
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|store
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|metadata
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uploadTokens
decl_stmt|;
specifier|public
name|TimeLapsedDataStore
parameter_list|()
block|{
name|this
operator|.
name|startTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|store
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|uploadTokens
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordIfStored
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|store
operator|.
name|containsKey
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getRecord
argument_list|(
name|identifier
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordFromReference
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|reference
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|addRecord
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|TestRecord
name|rec
init|=
operator|new
name|TestRecord
argument_list|(
name|id
argument_list|,
name|data
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Blob created {} with timestamp {}"
argument_list|,
name|rec
operator|.
name|id
argument_list|,
name|rec
operator|.
name|lastModified
argument_list|)
expr_stmt|;
return|return
name|rec
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|store
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
lambda|->
operator|new
name|DataIdentifier
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|store
operator|.
name|remove
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/***************************************** SharedDataStore ***************************************/
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|TestRecord
name|rec
init|=
operator|new
name|TestRecord
argument_list|(
name|name
argument_list|,
name|data
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Metadata created {} with timestamp {}"
argument_list|,
name|rec
operator|.
name|id
argument_list|,
name|rec
operator|.
name|lastModified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|FileInputStream
name|fstream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fstream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|addMetadataRecord
argument_list|(
name|fstream
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|metadataRecordExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataRecord
argument_list|>
name|getAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
argument_list|>
name|iter
init|=
name|metadata
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|recs
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
argument_list|>
name|iter
init|=
name|metadata
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|recs
control|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataRecord
argument_list|>
name|getAllRecords
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|store
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordForId
parameter_list|(
name|DataIdentifier
name|id
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SharedDataStore
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|SharedDataStore
operator|.
name|Type
operator|.
name|SHARED
return|;
block|}
comment|/**************************** DataRecordAccessProvider *************************/
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|URI
name|getDownloadURI
parameter_list|(
annotation|@
name|NotNull
name|DataIdentifier
name|identifier
parameter_list|,
annotation|@
name|NotNull
name|DataRecordDownloadOptions
name|downloadOptions
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|DataRecordUpload
name|initiateDataRecordUpload
parameter_list|(
name|long
name|maxUploadSizeInBytes
parameter_list|,
name|int
name|maxNumberOfURIs
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|DataRecordUploadException
block|{
name|String
name|upToken
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|randomStream
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|data
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataRecordUploadException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|TestRecord
name|rec
init|=
operator|new
name|TestRecord
argument_list|(
name|upToken
argument_list|,
name|data
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|put
argument_list|(
name|upToken
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|DataRecordUpload
name|uploadRec
init|=
operator|new
name|DataRecordUpload
argument_list|()
block|{
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|String
name|getUploadToken
parameter_list|()
block|{
return|return
name|upToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMinPartSize
parameter_list|()
block|{
return|return
name|maxUploadSizeInBytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxPartSize
parameter_list|()
block|{
return|return
name|maxUploadSizeInBytes
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|Collection
argument_list|<
name|URI
argument_list|>
name|getUploadURIs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
decl_stmt|;
return|return
name|uploadRec
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|DataRecord
name|completeDataRecordUpload
parameter_list|(
annotation|@
name|NotNull
name|String
name|uploadToken
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|DataRecordUploadException
throws|,
name|DataStoreException
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|uploadToken
argument_list|)
return|;
block|}
class|class
name|TestRecord
implements|implements
name|DataRecord
block|{
name|String
name|id
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|long
name|lastModified
decl_stmt|;
specifier|public
name|TestRecord
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataIdentifier
name|getIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
block|}
specifier|private
name|String
name|getIdForInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
comment|/*************************************** No Op ***********************/
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|RepositoryException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|updateModifiedDateOnAccess
parameter_list|(
name|long
name|before
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|int
name|deleteAllOlderThan
parameter_list|(
name|long
name|min
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
name|MIN_RECORD_LENGTH
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DataStoreException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{         }
block|}
block|}
end_class

end_unit

