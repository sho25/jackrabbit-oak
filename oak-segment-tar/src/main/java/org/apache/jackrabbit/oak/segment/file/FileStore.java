begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|getInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|DefaultSegmentWriterBuilder
operator|.
name|defaultSegmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|CLEANUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_FORCE_COMPACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_RETRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|ESTIMATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|IDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|EXPEDITE_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GCJournal
operator|.
name|GCJournalEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ShutDown
operator|.
name|ShutDownCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|CleanupContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
operator|.
name|CleanupResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The storage implementation for tar files.  */
end_comment

begin_class
specifier|public
class|class
name|FileStore
extends|extends
name|AbstractFileStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Minimal interval in milli seconds between subsequent garbage collection cycles.      * Garbage collection invoked via {@link #fullGC()} will be skipped unless at least      * the specified time has passed since its last successful invocation.      */
specifier|private
specifier|static
specifier|final
name|long
name|GC_BACKOFF
init|=
name|getInteger
argument_list|(
literal|"oak.gc.backoff"
argument_list|,
literal|10
operator|*
literal|3600
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"repo.lock"
decl_stmt|;
comment|/**      * GC counter for logging purposes      */
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|GC_COUNT
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|segmentWriter
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GarbageCollector
name|garbageCollector
decl_stmt|;
specifier|private
specifier|final
name|TarFiles
name|tarFiles
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|lockFile
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|FileLock
name|lock
decl_stmt|;
specifier|private
specifier|volatile
name|TarRevisions
name|revisions
decl_stmt|;
comment|/**      * Scheduler for running<em>short</em> background operations      */
specifier|private
specifier|final
name|Scheduler
name|fileStoreScheduler
init|=
operator|new
name|Scheduler
argument_list|(
literal|"FileStore background tasks"
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed. They can      * not be removed immediately, because they first need to be closed, and the      * JVM needs to release the memory mapped file references.      */
specifier|private
specifier|final
name|FileReaper
name|fileReaper
init|=
operator|new
name|FileReaper
argument_list|()
decl_stmt|;
comment|/**      * This flag is periodically updated by calling the {@code SegmentGCOptions}      * at regular intervals.      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientDiskSpace
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**      * This flag is raised whenever the available memory falls under a specified      * threshold. See {@link GCMemoryBarrier}      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientMemory
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileStoreStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|ShutDown
name|shutDown
init|=
operator|new
name|ShutDown
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentNotFoundExceptionListener
name|snfeListener
decl_stmt|;
name|FileStore
parameter_list|(
specifier|final
name|FileStoreBuilder
name|builder
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|lockFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOCK_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|=
name|lockFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is in use by another store."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|this
operator|.
name|segmentWriter
operator|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"sys"
argument_list|)
operator|.
name|withGeneration
argument_list|(
parameter_list|()
lambda|->
name|getGcGeneration
argument_list|()
operator|.
name|nonGC
argument_list|()
argument_list|)
operator|.
name|withWriterPool
argument_list|()
operator|.
name|with
argument_list|(
name|builder
operator|.
name|getCacheManager
argument_list|()
operator|.
name|withAccessTracking
argument_list|(
literal|"WRITE"
argument_list|,
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|garbageCollector
operator|=
operator|new
name|GarbageCollector
argument_list|(
name|builder
operator|.
name|getGcOptions
argument_list|()
argument_list|,
name|builder
operator|.
name|getGcListener
argument_list|()
argument_list|,
operator|new
name|GCJournal
argument_list|(
name|directory
argument_list|)
argument_list|,
name|builder
operator|.
name|getCacheManager
argument_list|()
operator|.
name|withAccessTracking
argument_list|(
literal|"COMPACT"
argument_list|,
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|directory
argument_list|,
name|builder
operator|.
name|getStrictVersionCheck
argument_list|()
argument_list|)
operator|.
name|checkAndUpdateManifest
argument_list|()
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|FileStoreStats
argument_list|(
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|tarFiles
operator|=
name|TarFiles
operator|.
name|builder
argument_list|()
operator|.
name|withDirectory
argument_list|(
name|directory
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
operator|.
name|withTarRecovery
argument_list|(
name|recovery
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
operator|.
name|withFileStoreMonitor
argument_list|(
name|stats
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|builder
operator|.
name|getMaxFileSize
argument_list|()
operator|*
name|MB
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|this
operator|.
name|tarFiles
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|stats
operator|.
name|init
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|snfeListener
operator|=
name|builder
operator|.
name|getSnfeListener
argument_list|()
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK flush [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|shutDown
operator|.
name|shutDownRequested
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|tryFlush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at {}"
argument_list|,
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK filer reaper [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fileReaper
operator|.
name|reap
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK disk space check [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
specifier|final
name|SegmentGCOptions
name|gcOptions
init|=
name|builder
operator|.
name|getGcOptions
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkDiskSpace
argument_list|(
name|gcOptions
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened at {}, mmap={}, size={} ({} bytes)"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|,
name|humanReadableByteCount
argument_list|(
name|size
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TAR files: {}"
argument_list|,
name|tarFiles
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|bind
parameter_list|(
name|TarRevisions
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|revisions
operator|.
name|bind
argument_list|(
name|this
argument_list|,
name|tracker
argument_list|,
name|initialNode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|Supplier
argument_list|<
name|RecordId
argument_list|>
name|initialNode
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|get
parameter_list|()
block|{
try|try
block|{
name|SegmentWriter
name|writer
init|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"init"
argument_list|)
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|segmentReader
argument_list|,
name|writer
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|node
operator|.
name|getRecordId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to write initial node"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|GCGeneration
name|getGcGeneration
parameter_list|()
block|{
return|return
name|revisions
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
comment|/**      * @return  a runnable for running garbage collection      */
specifier|public
name|Runnable
name|getGCRunner
parameter_list|()
block|{
return|return
operator|new
name|SafeRunnable
argument_list|(
name|format
argument_list|(
literal|"TarMK revision gc [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running revision garbage collection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @return the currently active gc write monitor      */
specifier|public
name|GCNodeWriteMonitor
name|getGCNodeWriteMonitor
parameter_list|()
block|{
return|return
name|garbageCollector
operator|.
name|getGCNodeWriteMonitor
argument_list|()
return|;
block|}
comment|/**      * @return the size of this store.      */
specifier|private
name|long
name|size
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|readerCount
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|readerCount
argument_list|()
return|;
block|}
block|}
specifier|public
name|FileStoreStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|private
name|void
name|doTryFlush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No TarRevisions available, skipping flush"
argument_list|)
expr_stmt|;
return|return;
block|}
name|revisions
operator|.
name|tryFlush
argument_list|(
parameter_list|()
lambda|->
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stats
operator|.
name|flushed
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|tryFlush
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|doTryFlush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No TarRevisions available, skipping flush"
argument_list|)
expr_stmt|;
return|return;
block|}
name|revisions
operator|.
name|flush
argument_list|(
parameter_list|()
lambda|->
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stats
operator|.
name|flushed
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|doFlush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Run full garbage collection: estimation, compaction, cleanup.      */
specifier|public
name|void
name|fullGC
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|runFull
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Run tail garbage collection.      */
specifier|public
name|void
name|tailGC
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|runTail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copy every referenced record in data (non-bulk) segments. Bulk segments      * are fully kept (they are only removed in cleanup, if there is no      * reference to them).      * @return {@code true} on success, {@code false} otherwise.      */
specifier|public
name|boolean
name|compactFull
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|garbageCollector
operator|.
name|compactFull
argument_list|()
operator|.
name|isSuccess
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|compactTail
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|garbageCollector
operator|.
name|compactTail
argument_list|()
operator|.
name|isSuccess
argument_list|()
return|;
block|}
block|}
comment|/**      * Run garbage collection on the segment level: reclaim those data segments      * that are from an old segment generation and those bulk segments that are not      * reachable anymore.      * Those tar files that shrink by at least 25% are rewritten to a new tar generation      * skipping the reclaimed segments.      */
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|fileReaper
operator|.
name|add
argument_list|(
name|garbageCollector
operator|.
name|cleanup
argument_list|(
name|CompactionResult
operator|.
name|skipped
argument_list|(
name|getGcGeneration
argument_list|()
argument_list|,
name|garbageCollector
operator|.
name|gcOptions
argument_list|,
name|revisions
operator|.
name|getHead
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Finds all external blob references that are currently accessible      * in this repository and adds them to the given collector. Useful      * for collecting garbage in an external data store.      *<p>      * Note that this method only collects blob references that are already      * stored in the repository (at the time when this method is called), so      * the garbage collector will need some other mechanism for tracking      * in-memory references and references stored while this method is      * running.      * @param collector  reference collector called back for each blob reference found      */
specifier|public
name|void
name|collectBlobReferences
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|garbageCollector
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Cancel a running revision garbage collection compaction process as soon as possible.      * Does nothing if gc is not running.      */
specifier|public
name|void
name|cancelGC
parameter_list|()
block|{
name|garbageCollector
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|getWriter
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|segmentWriter
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|TarRevisions
name|getRevisions
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|revisions
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|shutDown
argument_list|()
init|)
block|{
comment|// avoid deadlocks by closing (and joining) the background
comment|// thread before acquiring the synchronization lock
name|fileStoreScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|doFlush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to flush the store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|lock
operator|::
name|release
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|tarFiles
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|revisions
argument_list|)
expr_stmt|;
name|closeAndLogOnFail
argument_list|(
name|closer
argument_list|)
expr_stmt|;
block|}
comment|// Try removing pending files in case the scheduler didn't have a chance to run yet
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
name|fileReaper
operator|.
name|reap
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|tarFiles
operator|.
name|containsSegment
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Segment
name|readSegment
parameter_list|(
specifier|final
name|SegmentId
name|id
parameter_list|)
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
return|return
name|segmentCache
operator|.
name|getSegment
argument_list|(
name|id
argument_list|,
parameter_list|()
lambda|->
name|readSegmentUncached
argument_list|(
name|tarFiles
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|SegmentNotFoundException
name|snfe
init|=
name|asSegmentNotFoundException
argument_list|(
name|e
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|snfeListener
operator|.
name|notify
argument_list|(
name|id
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
throw|throw
name|snfe
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ShutDownCloser
name|ignored
init|=
name|shutDown
operator|.
name|keepAlive
argument_list|()
init|)
block|{
name|Segment
name|segment
init|=
literal|null
decl_stmt|;
comment|// If the segment is a data segment, create a new instance of Segment to
comment|// access some internal information stored in the segment and to store
comment|// in an in-memory cache for later use.
name|GCGeneration
name|generation
init|=
name|GCGeneration
operator|.
name|NULL
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|binaryReferences
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|4096
condition|)
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|tracker
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|generation
operator|=
name|segment
operator|.
name|getGcGeneration
argument_list|()
expr_stmt|;
name|references
operator|=
name|readReferences
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|binaryReferences
operator|=
name|readBinaryReferences
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|tarFiles
operator|.
name|writeSegment
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|generation
argument_list|,
name|references
argument_list|,
name|binaryReferences
argument_list|)
expr_stmt|;
comment|// Keep this data segment in memory as it's likely to be accessed soon.
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|segmentCache
operator|.
name|putSegment
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkDiskSpace
parameter_list|(
name|SegmentGCOptions
name|gcOptions
parameter_list|)
block|{
name|long
name|repositoryDiskSpace
init|=
name|size
argument_list|()
decl_stmt|;
name|long
name|availableDiskSpace
init|=
name|directory
operator|.
name|getFreeSpace
argument_list|()
decl_stmt|;
name|boolean
name|updated
init|=
name|SegmentGCOptions
operator|.
name|isDiskSpaceSufficient
argument_list|(
name|repositoryDiskSpace
argument_list|,
name|availableDiskSpace
argument_list|)
decl_stmt|;
name|boolean
name|previous
init|=
name|sufficientDiskSpace
operator|.
name|getAndSet
argument_list|(
name|updated
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|&&
operator|!
name|updated
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Available disk space ({}) is too low, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updated
operator|&&
operator|!
name|previous
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available disk space ({}) is sufficient again for repository operations, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|GarbageCollector
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentGCOptions
name|gcOptions
decl_stmt|;
comment|/**          * {@code GcListener} listening to this instance's gc progress          */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCListener
name|gcListener
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCJournal
name|gcJournal
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|WriterCacheManager
name|cacheManager
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|GCNodeWriteMonitor
name|compactionMonitor
init|=
name|GCNodeWriteMonitor
operator|.
name|EMPTY
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cancelled
decl_stmt|;
comment|/**          * Timestamp of the last time {@link #fullGC()} or {@link #tailGC()} was          * successfully invoked. 0 if never.          */
specifier|private
name|long
name|lastSuccessfullGC
decl_stmt|;
name|GarbageCollector
parameter_list|(
annotation|@
name|Nonnull
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
name|GCListener
name|gcListener
parameter_list|,
annotation|@
name|Nonnull
name|GCJournal
name|gcJournal
parameter_list|,
annotation|@
name|Nonnull
name|WriterCacheManager
name|cacheManager
parameter_list|)
block|{
name|this
operator|.
name|gcOptions
operator|=
name|gcOptions
expr_stmt|;
name|this
operator|.
name|gcListener
operator|=
name|gcListener
expr_stmt|;
name|this
operator|.
name|gcJournal
operator|=
name|gcJournal
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
block|}
name|GCNodeWriteMonitor
name|getGCNodeWriteMonitor
parameter_list|()
block|{
return|return
name|compactionMonitor
return|;
block|}
specifier|synchronized
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|gcOptions
operator|.
name|getGCType
argument_list|()
condition|)
block|{
case|case
name|FULL
case|:
name|runFull
argument_list|()
expr_stmt|;
break|break;
case|case
name|TAIL
case|:
name|runTail
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid GC type"
argument_list|)
throw|;
block|}
block|}
specifier|synchronized
name|void
name|runFull
parameter_list|()
throws|throws
name|IOException
block|{
name|run
argument_list|(
literal|true
argument_list|,
name|this
operator|::
name|compactFull
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|runTail
parameter_list|()
throws|throws
name|IOException
block|{
name|run
argument_list|(
literal|false
argument_list|,
name|this
operator|::
name|compactTail
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|run
parameter_list|(
name|boolean
name|full
parameter_list|,
name|Supplier
argument_list|<
name|CompactionResult
argument_list|>
name|compact
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: started"
argument_list|,
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastSuccessfullGC
decl_stmt|;
if|if
condition|(
name|dt
operator|<
name|GC_BACKOFF
condition|)
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: skipping garbage collection as it already ran "
operator|+
literal|"less than {} hours ago ({} s)."
argument_list|,
name|GC_COUNT
argument_list|,
name|GC_BACKOFF
operator|/
literal|3600000
argument_list|,
name|dt
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|sufficientEstimatedGain
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|gcOptions
operator|.
name|isEstimationDisabled
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because it was explicitly disabled"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because compaction is paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation started"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|ESTIMATION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|GCEstimationResult
name|estimation
init|=
name|estimateCompactionGain
argument_list|(
name|full
argument_list|)
decl_stmt|;
name|sufficientEstimatedGain
operator|=
name|estimation
operator|.
name|isGcNeeded
argument_list|()
expr_stmt|;
name|String
name|gcLog
init|=
name|estimation
operator|.
name|getGcLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
try|try
init|(
name|GCMemoryBarrier
name|gcMemoryBarrier
init|=
operator|new
name|GCMemoryBarrier
argument_list|(
name|sufficientMemory
argument_list|,
name|gcListener
argument_list|,
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|,
name|gcOptions
argument_list|)
init|)
block|{
if|if
condition|(
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: compaction paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|sufficientMemory
operator|.
name|get
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: compaction skipped. Not enough memory"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompactionResult
name|compactionResult
init|=
name|compact
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|compactionResult
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|lastSuccessfullGC
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleaning up after failed compaction"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
name|fileReaper
operator|.
name|add
argument_list|(
name|cleanup
argument_list|(
name|compactionResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|compactionMonitor
operator|.
name|finished
argument_list|()
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|IDLE
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Estimated compaction gain. The result will be undefined if stopped through          * the passed {@code stop} signal.          * @return compaction gain estimate          */
name|GCEstimationResult
name|estimateCompactionGain
parameter_list|(
name|boolean
name|full
parameter_list|)
block|{
return|return
operator|new
name|SizeDeltaGcEstimation
argument_list|(
name|gcOptions
operator|.
name|getGcSizeDeltaEstimation
argument_list|()
argument_list|,
name|gcJournal
argument_list|,
name|stats
operator|.
name|getApproximateSize
argument_list|()
argument_list|,
name|full
argument_list|)
operator|.
name|estimate
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|CompactionResult
name|compactionAborted
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|generation
parameter_list|)
block|{
name|gcListener
operator|.
name|compactionFailed
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|aborted
argument_list|(
name|getGcGeneration
argument_list|()
argument_list|,
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|CompactionResult
name|compactionSucceeded
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|generation
parameter_list|,
annotation|@
name|Nonnull
name|RecordId
name|compactedRootId
parameter_list|)
block|{
name|gcListener
operator|.
name|compactionSucceeded
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|succeeded
argument_list|(
name|generation
argument_list|,
name|gcOptions
argument_list|,
name|compactedRootId
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|SegmentNodeState
name|getBase
parameter_list|()
block|{
name|String
name|root
init|=
name|gcJournal
operator|.
name|read
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|RecordId
name|rootId
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|RecordId
operator|.
name|NULL
operator|.
name|equals
argument_list|(
name|rootId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|SegmentNodeState
name|node
init|=
name|segmentReader
operator|.
name|readNode
argument_list|(
name|rootId
argument_list|)
decl_stmt|;
name|node
operator|.
name|getPropertyCount
argument_list|()
expr_stmt|;
comment|// Resilience: fail early with a SNFE if the segment is not there
return|return
name|node
return|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": Base state "
operator|+
name|rootId
operator|+
literal|" is not accessible"
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|synchronized
name|CompactionResult
name|compactFull
parameter_list|()
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: running full compaction"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
literal|null
argument_list|,
name|getGcGeneration
argument_list|()
operator|.
name|nextFull
argument_list|()
argument_list|)
return|;
block|}
specifier|synchronized
name|CompactionResult
name|compactTail
parameter_list|()
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: running tail compaction"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|base
init|=
name|getBase
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
return|return
name|compact
argument_list|(
name|base
argument_list|,
name|getGcGeneration
argument_list|()
operator|.
name|nextTail
argument_list|()
argument_list|)
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: no base state available, running full compaction instead"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
literal|null
argument_list|,
name|getGcGeneration
argument_list|()
operator|.
name|nextFull
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CompactionResult
name|compact
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|,
name|GCGeneration
name|newGeneration
parameter_list|)
block|{
try|try
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction started, gc options={}"
argument_list|,
name|GC_COUNT
argument_list|,
name|gcOptions
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|COMPACTION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|GCJournalEntry
name|gcEntry
init|=
name|gcJournal
operator|.
name|read
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
name|size
argument_list|()
decl_stmt|;
name|compactionMonitor
operator|=
operator|new
name|GCNodeWriteMonitor
argument_list|(
name|gcOptions
operator|.
name|getGcLogInterval
argument_list|()
argument_list|,
name|gcListener
argument_list|)
expr_stmt|;
name|compactionMonitor
operator|.
name|init
argument_list|(
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|,
name|gcEntry
operator|.
name|getRepoSize
argument_list|()
argument_list|,
name|gcEntry
operator|.
name|getNodes
argument_list|()
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|before
init|=
name|getHead
argument_list|()
decl_stmt|;
name|CancelCompactionSupplier
name|cancel
init|=
operator|new
name|CancelCompactionSupplier
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|SegmentWriter
name|writer
init|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|"c"
argument_list|)
operator|.
name|with
argument_list|(
name|cacheManager
argument_list|)
operator|.
name|withGeneration
argument_list|(
name|newGeneration
argument_list|)
operator|.
name|withoutWriterPool
argument_list|()
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|Compactor
name|compactor
init|=
operator|new
name|Compactor
argument_list|(
name|segmentReader
argument_list|,
name|writer
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|cancel
argument_list|,
name|compactionMonitor
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|base
argument_list|,
name|before
argument_list|,
name|compactor
argument_list|,
name|writer
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|newGeneration
argument_list|)
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cycle 0 completed in {} ({} ms). Compacted {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cycles
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|cycles
operator|<
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
operator|&&
operator|!
operator|(
name|success
operator|=
name|revisions
operator|.
name|setHead
argument_list|(
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|EXPEDITE_OPTION
argument_list|)
operator|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|cycles
operator|++
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction detected concurrent commits while compacting. "
operator|+
literal|"Compacting these commits. Cycle {} of {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|,
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_RETRY
operator|.
name|message
argument_list|()
operator|+
name|cycles
argument_list|)
expr_stmt|;
name|Stopwatch
name|cycleWatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|()
decl_stmt|;
name|after
operator|=
name|compact
argument_list|(
name|after
argument_list|,
name|head
argument_list|,
name|compactor
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|newGeneration
argument_list|)
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cycle {} completed in {} ({} ms). Compacted {} against {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|,
name|cycleWatch
argument_list|,
name|cycleWatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|head
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction gave up compacting concurrent commits after {} cycles."
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
name|int
name|forceTimeout
init|=
name|gcOptions
operator|.
name|getForceTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|forceTimeout
operator|>
literal|0
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: trying to force compact remaining commits for {} seconds. "
operator|+
literal|"Concurrent commits to the store will be blocked."
argument_list|,
name|GC_COUNT
argument_list|,
name|forceTimeout
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_FORCE_COMPACT
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|Stopwatch
name|forceWatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|cycles
operator|++
expr_stmt|;
name|cancel
operator|.
name|timeOutAfter
argument_list|(
name|forceTimeout
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|after
operator|=
name|forceCompact
argument_list|(
name|after
argument_list|,
name|compactor
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|success
operator|=
name|after
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction succeeded to force compact remaining commits "
operator|+
literal|"after {} ({} ms)."
argument_list|,
name|GC_COUNT
argument_list|,
name|forceWatch
argument_list|,
name|forceWatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cancel
operator|.
name|get
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction failed to force compact remaining commits "
operator|+
literal|"after {} ({} ms). Compaction was cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|forceWatch
argument_list|,
name|forceWatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction failed to force compact remaining commits. "
operator|+
literal|"after {} ({} ms). Could not acquire exclusive access to the node store."
argument_list|,
name|GC_COUNT
argument_list|,
name|forceWatch
argument_list|,
name|forceWatch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction succeeded in {} ({} ms), after {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionSucceeded
argument_list|(
name|newGeneration
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction failed after {} ({} ms), and {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|newGeneration
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|newGeneration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction encountered an error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|newGeneration
argument_list|)
return|;
block|}
block|}
comment|/**          * Compact {@code uncompacted} on top of an optional {@code base}.          * @param base         the base state to compact onto or {@code null} for an empty state.          * @param uncompacted  the uncompacted state to compact          * @param compactor    the compactor for creating the new generation of the          *                     uncompacted state.          * @param writer       the segment writer used by {@code compactor} for writing to the          *                     new generation.          * @return  compacted clone of {@code uncompacted} or null if cancelled.          * @throws IOException          */
annotation|@
name|CheckForNull
specifier|private
name|SegmentNodeState
name|compact
parameter_list|(
annotation|@
name|Nullable
name|SegmentNodeState
name|base
parameter_list|,
annotation|@
name|Nonnull
name|SegmentNodeState
name|uncompacted
parameter_list|,
annotation|@
name|Nonnull
name|Compactor
name|compactor
parameter_list|,
annotation|@
name|Nonnull
name|SegmentWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Collect a chronologically ordered list of roots for the base and the uncompacted
comment|// state. This list consists of all checkpoints followed by the root.
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|baseRoots
init|=
name|collectRoots
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|uncompactedRoots
init|=
name|collectRoots
argument_list|(
name|uncompacted
argument_list|)
decl_stmt|;
comment|// Compact the list of uncompacted roots to a list of compacted roots.
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|compactedRoots
init|=
name|compact
argument_list|(
name|baseRoots
argument_list|,
name|uncompactedRoots
argument_list|,
name|compactor
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedRoots
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Build a compacted super root by replacing the uncompacted roots with
comment|// the compacted ones in the original node.
name|SegmentNodeBuilder
name|builder
init|=
name|uncompacted
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|compactedRoot
range|:
name|compactedRoots
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|compactedRoot
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
name|compactedRoot
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeBuilder
name|childBuilder
init|=
name|getChild
argument_list|(
name|builder
argument_list|,
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|childBuilder
operator|.
name|setChildNode
argument_list|(
name|getName
argument_list|(
name|path
argument_list|)
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Use the segment writer of the *new generation* to persist the compacted super root.
name|RecordId
name|nodeId
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|uncompacted
operator|.
name|getStableIdBytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|segmentReader
argument_list|,
name|segmentWriter
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
comment|/**          * Compact a list of uncompacted roots on top of base roots of the same key or          * an empty node if none.          */
annotation|@
name|CheckForNull
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|compact
parameter_list|(
annotation|@
name|Nonnull
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|baseRoots
parameter_list|,
annotation|@
name|Nonnull
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|uncompactedRoots
parameter_list|,
annotation|@
name|Nonnull
name|Compactor
name|compactor
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeState
name|onto
init|=
name|baseRoots
operator|.
name|get
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|NodeState
name|previous
init|=
name|onto
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|compactedRoots
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|uncompactedRoot
range|:
name|uncompactedRoots
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|uncompactedRoot
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
name|uncompactedRoot
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeState
name|compacted
decl_stmt|;
if|if
condition|(
name|onto
operator|==
literal|null
condition|)
block|{
name|compacted
operator|=
name|compactor
operator|.
name|compact
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compacted
operator|=
name|compactor
operator|.
name|compact
argument_list|(
name|previous
argument_list|,
name|state
argument_list|,
name|onto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compacted
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|previous
operator|=
name|state
expr_stmt|;
name|onto
operator|=
name|compacted
expr_stmt|;
name|compactedRoots
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|compacted
argument_list|)
expr_stmt|;
block|}
return|return
name|compactedRoots
return|;
block|}
comment|/**          * Collect a chronologically ordered list of roots for the base and the uncompacted          * state from a {@code superRoot} . This list consists of all checkpoints followed by          * the root.          */
annotation|@
name|Nonnull
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|collectRoots
parameter_list|(
annotation|@
name|Nullable
name|SegmentNodeState
name|superRoot
parameter_list|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|roots
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|superRoot
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|checkpoints
init|=
name|newArrayList
argument_list|(
name|superRoot
operator|.
name|getChildNode
argument_list|(
literal|"checkpoints"
argument_list|)
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|)
decl_stmt|;
name|checkpoints
operator|.
name|sort
argument_list|(
parameter_list|(
name|cne1
parameter_list|,
name|cne2
parameter_list|)
lambda|->
block|{
name|long
name|c1
init|=
name|cne1
operator|.
name|getNodeState
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
name|long
name|c2
init|=
name|cne2
operator|.
name|getNodeState
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|checkpoint
range|:
name|checkpoints
control|)
block|{
name|roots
operator|.
name|put
argument_list|(
literal|"checkpoints/"
operator|+
name|checkpoint
operator|.
name|getName
argument_list|()
operator|+
literal|"/root"
argument_list|,
name|checkpoint
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|roots
operator|.
name|put
argument_list|(
literal|"root"
argument_list|,
name|superRoot
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|roots
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|NodeBuilder
name|getChild
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|private
name|SegmentNodeState
name|forceCompact
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|SegmentNodeState
name|base
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Compactor
name|compactor
parameter_list|,
annotation|@
name|Nonnull
name|SegmentWriter
name|writer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RecordId
name|compactedId
init|=
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|headId
parameter_list|)
block|{
try|try
block|{
name|long
name|t0
init|=
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|base
argument_list|,
name|segmentReader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
name|compactor
argument_list|,
name|writer
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled after {} seconds"
argument_list|,
name|GC_COUNT
argument_list|,
operator|(
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|after
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #{"
operator|+
name|GC_COUNT
operator|+
literal|"}: Error during forced compaction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|,
name|timeout
argument_list|(
name|gcOptions
operator|.
name|getForceTimeout
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|compactedId
operator|!=
literal|null
condition|?
name|segmentReader
operator|.
name|readNode
argument_list|(
name|compactedId
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
name|CleanupContext
name|newCleanupContext
parameter_list|(
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|old
parameter_list|)
block|{
return|return
operator|new
name|CleanupContext
argument_list|()
block|{
specifier|private
name|boolean
name|isUnreferencedBulkSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
operator|!
name|referenced
return|;
block|}
specifier|private
name|boolean
name|isOldDataSegment
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
block|{
return|return
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
operator|&&
name|old
operator|.
name|apply
argument_list|(
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|UUID
argument_list|>
name|initialReferences
parameter_list|()
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|references
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|references
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldReclaim
parameter_list|(
name|UUID
name|id
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|boolean
name|referenced
parameter_list|)
block|{
return|return
name|isUnreferencedBulkSegment
argument_list|(
name|id
argument_list|,
name|referenced
argument_list|)
operator|||
name|isOldDataSegment
argument_list|(
name|id
argument_list|,
name|generation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldFollow
parameter_list|(
name|UUID
name|from
parameter_list|,
name|UUID
name|to
parameter_list|)
block|{
return|return
operator|!
name|isDataSegmentId
argument_list|(
name|to
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**          * Cleanup segments whose generation matches the {@link CompactionResult#reclaimer()} predicate.          * @return list of files to be removed          * @throws IOException          */
annotation|@
name|Nonnull
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanup
parameter_list|(
annotation|@
name|Nonnull
name|CompactionResult
name|compactionResult
parameter_list|)
throws|throws
name|IOException
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup started."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|updateStatus
argument_list|(
name|CLEANUP
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|segmentCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|CleanupResult
name|cleanupResult
init|=
name|tarFiles
operator|.
name|cleanup
argument_list|(
name|newCleanupContext
argument_list|(
name|compactionResult
operator|.
name|reclaimer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanupResult
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup interrupted"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
name|tracker
operator|.
name|clearSegmentIdTables
argument_list|(
name|cleanupResult
operator|.
name|getReclaimedSegmentIds
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|gcInfo
argument_list|()
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup marking files for deletion: {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|toFileNames
argument_list|(
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|finalSize
init|=
name|size
argument_list|()
decl_stmt|;
name|long
name|reclaimedSize
init|=
name|cleanupResult
operator|.
name|getReclaimedSize
argument_list|()
decl_stmt|;
name|stats
operator|.
name|reclaimed
argument_list|(
name|reclaimedSize
argument_list|)
expr_stmt|;
name|gcJournal
operator|.
name|persist
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|,
name|getGcGeneration
argument_list|()
argument_list|,
name|compactionMonitor
operator|.
name|getCompactedNodes
argument_list|()
argument_list|,
name|compactionResult
operator|.
name|getCompactedRootId
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup completed in {} ({} ms). Post cleanup size is {} ({} bytes)"
operator|+
literal|" and space reclaimed {} ({} bytes)."
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|finalSize
argument_list|,
name|humanReadableByteCount
argument_list|(
name|reclaimedSize
argument_list|)
argument_list|,
name|reclaimedSize
argument_list|)
expr_stmt|;
return|return
name|cleanupResult
operator|.
name|getRemovableFiles
argument_list|()
return|;
block|}
specifier|private
name|String
name|toFileNames
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"none"
return|;
block|}
else|else
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|files
argument_list|)
return|;
block|}
block|}
comment|/**          * Finds all external blob references that are currently accessible          * in this repository and adds them to the given collector. Useful          * for collecting garbage in an external data store.          *<p>          * Note that this method only collects blob references that are already          * stored in the repository (at the time when this method is called), so          * the garbage collector will need some other mechanism for tracking          * in-memory references and references stored while this method is          * running.          * @param collector  reference collector called back for each blob reference found          */
specifier|synchronized
name|void
name|collectBlobReferences
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|,
name|Reclaimers
operator|.
name|newOldReclaimer
argument_list|(
name|getGcGeneration
argument_list|()
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**          * Represents the cancellation policy for the compaction phase. If the disk          * space was considered insufficient at least once during compaction (or if          * the space was never sufficient to begin with), compaction is considered          * canceled. Furthermore when the file store is shutting down, compaction is          * considered canceled.          * Finally the cancellation can be triggered by a timeout that can be set          * at any time.          */
specifier|private
class|class
name|CancelCompactionSupplier
implements|implements
name|Supplier
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|FileStore
name|store
decl_stmt|;
specifier|private
name|String
name|reason
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|baseLine
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|deadline
decl_stmt|;
specifier|public
name|CancelCompactionSupplier
parameter_list|(
annotation|@
name|Nonnull
name|FileStore
name|store
parameter_list|)
block|{
name|cancelled
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
comment|/**              * Set a timeout for cancellation. Setting a different timeout cancels              * a previous one that did not yet elapse. Setting a timeout after              * cancellation took place has no effect.              */
specifier|public
name|void
name|timeOutAfter
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|TimeUnit
name|unit
parameter_list|)
block|{
name|baseLine
operator|=
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|deadline
operator|=
name|baseLine
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// The outOfDiskSpace and shutdown flags can only transition from
comment|// false (their initial values), to true. Once true, there should
comment|// be no way to go back.
if|if
condition|(
operator|!
name|store
operator|.
name|sufficientDiskSpace
operator|.
name|get
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough disk space"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|store
operator|.
name|sufficientMemory
operator|.
name|get
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough memory"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|store
operator|.
name|shutDown
operator|.
name|shutDownRequested
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"The FileStore is shutting down"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cancelled
condition|)
block|{
name|reason
operator|=
literal|"Cancelled by user"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|deadline
operator|>
literal|0
operator|&&
name|currentTimeMillis
argument_list|()
operator|>
name|deadline
condition|)
block|{
name|long
name|dt
init|=
name|SECONDS
operator|.
name|convert
argument_list|(
name|currentTimeMillis
argument_list|()
operator|-
name|baseLine
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|reason
operator|=
literal|"Timeout after "
operator|+
name|dt
operator|+
literal|" seconds"
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
block|}
block|}
comment|/**      * Instances of this class represent the result from a compaction. Either      * {@link #succeeded(GCGeneration, SegmentGCOptions, RecordId) succeeded},      * {@link #aborted(GCGeneration, GCGeneration) aborted} or {@link      * #skipped(GCGeneration, SegmentGCOptions, RecordId)}  skipped}.      */
specifier|private
specifier|abstract
specifier|static
class|class
name|CompactionResult
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCGeneration
name|currentGeneration
decl_stmt|;
specifier|protected
name|CompactionResult
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|)
block|{
name|this
operator|.
name|currentGeneration
operator|=
name|currentGeneration
expr_stmt|;
block|}
comment|/**          * Result of a succeeded compaction.          * @param newGeneration     the generation successfully created by compaction          * @param gcOptions         the current GC options used by compaction          * @param compactedRootId   the record id of the root created by compaction          */
specifier|static
name|CompactionResult
name|succeeded
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|newGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|RecordId
name|compactedRootId
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|newGeneration
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|Reclaimers
operator|.
name|newOldReclaimer
argument_list|(
name|newGeneration
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|compactedRootId
return|;
block|}
block|}
return|;
block|}
comment|/**          * Result of an aborted compaction.          * @param currentGeneration  the current generation of the store          * @param failedGeneration   the generation that compaction attempted to create          */
specifier|static
name|CompactionResult
name|aborted
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|GCGeneration
name|failedGeneration
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|currentGeneration
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|Reclaimers
operator|.
name|newExactReclaimer
argument_list|(
name|failedGeneration
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|/**          * Result serving as a placeholder for a compaction that was skipped.          * @param currentGeneration  the current generation of the store          * @param gcOptions         the current GC options used by compaction          */
specifier|static
name|CompactionResult
name|skipped
parameter_list|(
annotation|@
name|Nonnull
name|GCGeneration
name|currentGeneration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|RecordId
name|compactedRootId
parameter_list|)
block|{
return|return
operator|new
name|CompactionResult
argument_list|(
name|currentGeneration
argument_list|)
block|{
annotation|@
name|Override
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
block|{
return|return
name|Reclaimers
operator|.
name|newOldReclaimer
argument_list|(
name|currentGeneration
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|compactedRootId
return|;
block|}
block|}
return|;
block|}
comment|/**          * @return  a predicate determining which segments to          *          {@link GarbageCollector#cleanup(CompactionResult) clean up} for          *          the given compaction result.          */
specifier|abstract
name|Predicate
argument_list|<
name|GCGeneration
argument_list|>
name|reclaimer
parameter_list|()
function_decl|;
comment|/**          * @return  {@code true} for {@link #succeeded(GCGeneration, SegmentGCOptions, RecordId) succeeded}          *          and {@link #skipped(GCGeneration, SegmentGCOptions, RecordId) skipped}, {@code false} otherwise.          */
specifier|abstract
name|boolean
name|isSuccess
parameter_list|()
function_decl|;
comment|/**          * @return  the record id of the compacted root on {@link #isSuccess() success},          *          {@link RecordId#NULL} otherwise.          */
name|RecordId
name|getCompactedRootId
parameter_list|()
block|{
return|return
name|RecordId
operator|.
name|NULL
return|;
block|}
comment|/**          * @return  a diagnostic message describing the outcome of this compaction.          */
name|String
name|gcInfo
parameter_list|()
block|{
return|return
literal|"gc-count="
operator|+
name|GC_COUNT
operator|+
literal|",gc-status="
operator|+
operator|(
name|isSuccess
argument_list|()
condition|?
literal|"success"
else|:
literal|"failed"
operator|)
operator|+
literal|",store-generation="
operator|+
name|currentGeneration
operator|+
literal|",reclaim-predicate="
operator|+
name|reclaimer
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

