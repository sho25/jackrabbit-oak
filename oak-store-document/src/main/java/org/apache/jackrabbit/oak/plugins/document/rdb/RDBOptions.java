begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * Options applicable to RDB persistence  */
end_comment

begin_class
specifier|public
class|class
name|RDBOptions
block|{
specifier|private
name|boolean
name|dropTablesOnClose
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|tablePrefix
init|=
literal|""
decl_stmt|;
specifier|private
name|int
name|initialSchema
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"org.apache.jackrabbit.oak.plugins.document.rdb.RDBOptions.INITIALSCHEMA"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|int
name|upgradeToSchema
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"org.apache.jackrabbit.oak.plugins.document.rdb.RDBOptions.UPGRADETOSCHEMA"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|RDBOptions
parameter_list|()
block|{     }
comment|/**      * Whether to drop the tables on close (in case they have been auto-created)      */
specifier|public
name|RDBOptions
name|dropTablesOnClose
parameter_list|(
name|boolean
name|dropTablesOnClose
parameter_list|)
block|{
name|this
operator|.
name|dropTablesOnClose
operator|=
name|dropTablesOnClose
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isDropTablesOnClose
parameter_list|()
block|{
return|return
name|this
operator|.
name|dropTablesOnClose
return|;
block|}
comment|/**      * Prefix for table names.      */
specifier|public
name|RDBOptions
name|tablePrefix
parameter_list|(
annotation|@
name|Nonnull
name|String
name|tablePrefix
parameter_list|)
block|{
name|this
operator|.
name|tablePrefix
operator|=
name|tablePrefix
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
annotation|@
name|Nonnull
name|String
name|getTablePrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|tablePrefix
return|;
block|}
comment|/**      * Control over initial DB schema      */
specifier|public
name|RDBOptions
name|initialSchema
parameter_list|(
name|int
name|initialSchema
parameter_list|)
block|{
name|this
operator|.
name|initialSchema
operator|=
name|initialSchema
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getInitialSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|initialSchema
return|;
block|}
comment|/**      * Control over DB schema to upgrade to      */
specifier|public
name|RDBOptions
name|upgradeToSchema
parameter_list|(
name|int
name|upgradeToSchema
parameter_list|)
block|{
name|this
operator|.
name|upgradeToSchema
operator|=
name|upgradeToSchema
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getUpgradeToSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|upgradeToSchema
return|;
block|}
block|}
end_class

end_unit

