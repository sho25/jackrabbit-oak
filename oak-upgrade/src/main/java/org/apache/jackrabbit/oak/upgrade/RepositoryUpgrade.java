begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ACTIVITIES_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ROOT_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|VERSION_STORAGE_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
operator|.
name|addCustomMapping
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_ALL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|BeanConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|LoginModuleConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|fs
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|nodetype
operator|.
name|NodeTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|security
operator|.
name|user
operator|.
name|UserManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CompositeIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|ReadWriteNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|SecurityProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ProgressNotificationEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|WorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|security
operator|.
name|GroupEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|security
operator|.
name|RestrictionEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QNodeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QNodeTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QValueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|commons
operator|.
name|conversion
operator|.
name|DefaultNamePathResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|commons
operator|.
name|conversion
operator|.
name|NamePathResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|commons
operator|.
name|value
operator|.
name|ValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryUpgrade
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Source repository context.      */
specifier|private
specifier|final
name|RepositoryContext
name|source
decl_stmt|;
comment|/**      * Target node store.      */
specifier|private
specifier|final
name|NodeStore
name|target
decl_stmt|;
specifier|private
name|boolean
name|copyBinariesByReference
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|skipOnError
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|earlyShutdown
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CommitHook
argument_list|>
name|customCommitHooks
init|=
literal|null
decl_stmt|;
comment|/**      * Copies the contents of the repository in the given source directory      * to the given target node store.      *      * @param source source repository directory      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|copy
argument_list|(
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies the contents of the repository with the given configuration      * to the given target node builder.      *      * @param source source repository configuration      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|RepositoryConfig
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryContext
name|context
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|RepositoryUpgrade
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
operator|.
name|copy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a tool for copying the full contents of the source repository      * to the given target repository. Any existing content in the target      * repository will be overwritten.      *      * @param source source repository context      * @param target target node store      */
specifier|public
name|RepositoryUpgrade
parameter_list|(
name|RepositoryContext
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCopyBinariesByReference
parameter_list|()
block|{
return|return
name|copyBinariesByReference
return|;
block|}
specifier|public
name|void
name|setCopyBinariesByReference
parameter_list|(
name|boolean
name|copyBinariesByReference
parameter_list|)
block|{
name|this
operator|.
name|copyBinariesByReference
operator|=
name|copyBinariesByReference
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSkipOnError
parameter_list|()
block|{
return|return
name|skipOnError
return|;
block|}
specifier|public
name|void
name|setSkipOnError
parameter_list|(
name|boolean
name|skipOnError
parameter_list|)
block|{
name|this
operator|.
name|skipOnError
operator|=
name|skipOnError
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEarlyShutdown
parameter_list|()
block|{
return|return
name|earlyShutdown
return|;
block|}
specifier|public
name|void
name|setEarlyShutdown
parameter_list|(
name|boolean
name|earlyShutdown
parameter_list|)
block|{
name|this
operator|.
name|earlyShutdown
operator|=
name|earlyShutdown
expr_stmt|;
block|}
comment|/**      * Returns the list of custom CommitHooks to be applied before the final      * type validation, reference and indexing hooks.      *      * @return the list of custom CommitHooks      */
specifier|public
name|List
argument_list|<
name|CommitHook
argument_list|>
name|getCustomCommitHooks
parameter_list|()
block|{
return|return
name|customCommitHooks
return|;
block|}
comment|/**      * Sets the list of custom CommitHooks to be applied before the final      * type validation, reference and indexing hooks.      *      * @param customCommitHooks the list of custom CommitHooks      */
specifier|public
name|void
name|setCustomCommitHooks
parameter_list|(
name|List
argument_list|<
name|CommitHook
argument_list|>
name|customCommitHooks
parameter_list|)
block|{
name|this
operator|.
name|customCommitHooks
operator|=
name|customCommitHooks
expr_stmt|;
block|}
comment|/**      * Copies the full content from the source to the target repository.      *<p>      * The source repository<strong>must not be modified</strong> while      * the copy operation is running to avoid an inconsistent copy.      *<p>      * Note that both the source and the target repository must be closed      * during the copy operation as this method requires exclusive access      * to the repositories.      *      * @param initializer optional extra repository initializer to use      * @throws RepositoryException if the copy operation fails      */
specifier|public
name|void
name|copy
parameter_list|(
name|RepositoryInitializer
name|initializer
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryConfig
name|config
init|=
name|source
operator|.
name|getRepositoryConfig
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying repository content from {} to Oak"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeState
name|base
init|=
name|target
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Root
name|upgradeRoot
init|=
operator|new
name|UpgradeRoot
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|String
name|workspaceName
init|=
name|source
operator|.
name|getRepositoryConfig
argument_list|()
operator|.
name|getDefaultWorkspaceName
argument_list|()
decl_stmt|;
name|SecurityProviderImpl
name|security
init|=
operator|new
name|SecurityProviderImpl
argument_list|(
name|mapSecurityConfig
argument_list|(
name|config
operator|.
name|getSecurityConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// init target repository first
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing initial repository content"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|InitialContent
argument_list|()
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|initializer
operator|!=
literal|null
condition|)
block|{
name|initializer
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"InitialContent completed"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|security
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|RepositoryInitializer
name|ri
init|=
name|sc
operator|.
name|getRepositoryInitializer
argument_list|()
decl_stmt|;
name|ri
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Repository initializer '"
operator|+
name|ri
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' completed"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|security
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|WorkspaceInitializer
name|wi
init|=
name|sc
operator|.
name|getWorkspaceInitializer
argument_list|()
decl_stmt|;
name|wi
operator|.
name|initialize
argument_list|(
name|builder
argument_list|,
name|workspaceName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Workspace initializer '"
operator|+
name|wi
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' completed"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered namespaces"
argument_list|)
expr_stmt|;
name|copyNamespaces
argument_list|(
name|builder
argument_list|,
name|uriToPrefix
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Namespace registration completed."
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered node types"
argument_list|)
expr_stmt|;
name|NodeTypeManager
name|ntMgr
init|=
operator|new
name|ReadWriteNodeTypeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|upgradeRoot
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|upgradeRoot
return|;
block|}
block|}
decl_stmt|;
name|copyNodeTypes
argument_list|(
name|ntMgr
argument_list|,
operator|new
name|ValueFactoryImpl
argument_list|(
name|upgradeRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Node type registration completed."
argument_list|)
expr_stmt|;
comment|// migrate privileges
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered privileges"
argument_list|)
expr_stmt|;
name|PrivilegeConfiguration
name|privilegeConfiguration
init|=
name|security
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|copyCustomPrivileges
argument_list|(
name|privilegeConfiguration
operator|.
name|getPrivilegeManager
argument_list|(
name|upgradeRoot
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Privilege registration completed."
argument_list|)
expr_stmt|;
comment|// Triggers compilation of type information, which we need for
comment|// the type predicates used by the bulk  copy operations below.
operator|new
name|TypeEditorProvider
argument_list|(
literal|false
argument_list|)
operator|.
name|getRootEditor
argument_list|(
name|base
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|versionablePaths
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|NodeState
name|root
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying workspace content"
argument_list|)
expr_stmt|;
name|copyWorkspace
argument_list|(
name|builder
argument_list|,
name|root
argument_list|,
name|workspaceName
argument_list|,
name|uriToPrefix
argument_list|,
name|versionablePaths
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Upgrading workspace content completed."
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying version store content"
argument_list|)
expr_stmt|;
name|copyVersionStore
argument_list|(
name|builder
argument_list|,
name|root
argument_list|,
name|workspaceName
argument_list|,
name|uriToPrefix
argument_list|,
name|versionablePaths
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Upgrading version store content completed."
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Applying default commit hooks"
argument_list|)
expr_stmt|;
comment|// TODO: default hooks?
name|List
argument_list|<
name|CommitHook
argument_list|>
name|hooks
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|UserConfiguration
name|userConf
init|=
name|security
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|groupsPath
init|=
name|userConf
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|)
decl_stmt|;
comment|// hooks specific to the upgrade, need to run first
name|hooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|CompositeEditorProvider
argument_list|(
operator|new
name|RestrictionEditorProvider
argument_list|()
argument_list|,
operator|new
name|GroupEditorProvider
argument_list|(
name|groupsPath
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// security-related hooks
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|security
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|hooks
operator|.
name|addAll
argument_list|(
name|sc
operator|.
name|getCommitHooks
argument_list|(
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customCommitHooks
operator|!=
literal|null
condition|)
block|{
name|hooks
operator|.
name|addAll
argument_list|(
name|customCommitHooks
argument_list|)
expr_stmt|;
block|}
comment|// type validation, reference and indexing hooks
name|hooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|CompositeEditorProvider
argument_list|(
name|createTypeEditorProvider
argument_list|()
argument_list|,
name|createIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
operator|new
name|LoggingCompositeHook
argument_list|(
name|hooks
argument_list|,
name|source
argument_list|,
name|earlyShutdown
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Repository upgrade completed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to copy content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|EditorProvider
name|createTypeEditorProvider
parameter_list|()
block|{
return|return
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Editor
name|rootEditor
init|=
operator|new
name|TypeEditorProvider
argument_list|(
literal|false
argument_list|)
operator|.
name|getRootEditor
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
name|info
argument_list|)
decl_stmt|;
return|return
name|ProgressNotificationEditor
operator|.
name|wrap
argument_list|(
name|rootEditor
argument_list|,
name|logger
argument_list|,
literal|"Checking node types:"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TypeEditorProvider"
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|EditorProvider
name|createIndexEditorProvider
parameter_list|()
block|{
specifier|final
name|ProgressTicker
name|ticker
init|=
operator|new
name|AsciiArtTicker
argument_list|()
decl_stmt|;
return|return
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|IndexEditorProvider
name|editorProviders
init|=
operator|new
name|CompositeIndexEditorProvider
argument_list|(
operator|new
name|ReferenceEditorProvider
argument_list|()
argument_list|,
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexUpdate
argument_list|(
name|editorProviders
argument_list|,
literal|null
argument_list|,
name|after
argument_list|,
name|builder
argument_list|,
operator|new
name|IndexUpdateCallback
argument_list|()
block|{
name|String
name|progress
init|=
literal|"Updating indexes "
decl_stmt|;
name|long
name|t0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|indexUpdate
parameter_list|()
block|{
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|-
name|t0
operator|>
literal|2000
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{} {}"
argument_list|,
name|progress
argument_list|,
name|ticker
operator|.
name|tick
argument_list|()
argument_list|)
expr_stmt|;
name|t0
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IndexEditorProvider"
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|ConfigurationParameters
name|mapSecurityConfig
parameter_list|(
name|SecurityConfig
name|config
parameter_list|)
block|{
name|ConfigurationParameters
name|loginConfig
init|=
name|mapConfigurationParameters
argument_list|(
name|config
operator|.
name|getLoginModuleConfig
argument_list|()
argument_list|,
name|LoginModuleConfig
operator|.
name|PARAM_ADMIN_ID
argument_list|,
name|UserConstants
operator|.
name|PARAM_ADMIN_ID
argument_list|,
name|LoginModuleConfig
operator|.
name|PARAM_ANONYMOUS_ID
argument_list|,
name|UserConstants
operator|.
name|PARAM_ANONYMOUS_ID
argument_list|)
decl_stmt|;
name|ConfigurationParameters
name|userConfig
init|=
name|mapConfigurationParameters
argument_list|(
name|config
operator|.
name|getSecurityManagerConfig
argument_list|()
operator|.
name|getUserManagerConfig
argument_list|()
argument_list|,
name|UserManagerImpl
operator|.
name|PARAM_USERS_PATH
argument_list|,
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|UserManagerImpl
operator|.
name|PARAM_GROUPS_PATH
argument_list|,
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|UserManagerImpl
operator|.
name|PARAM_DEFAULT_DEPTH
argument_list|,
name|UserConstants
operator|.
name|PARAM_DEFAULT_DEPTH
argument_list|,
name|UserManagerImpl
operator|.
name|PARAM_PASSWORD_HASH_ALGORITHM
argument_list|,
name|UserConstants
operator|.
name|PARAM_PASSWORD_HASH_ALGORITHM
argument_list|,
name|UserManagerImpl
operator|.
name|PARAM_PASSWORD_HASH_ITERATIONS
argument_list|,
name|UserConstants
operator|.
name|PARAM_PASSWORD_HASH_ITERATIONS
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|loginConfig
argument_list|,
name|userConfig
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ConfigurationParameters
name|mapConfigurationParameters
parameter_list|(
name|BeanConfig
name|config
parameter_list|,
name|String
modifier|...
name|mapping
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Properties
name|properties
init|=
name|config
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|mapping
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|mapping
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|mapping
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|private
name|String
name|getOakName
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|String
name|uri
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|name
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
return|return
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
operator|+
literal|':'
operator|+
name|local
return|;
block|}
block|}
comment|/**      * Copies the registered namespaces to the target repository, and returns      * the internal namespace index mapping used in bundle serialization.      *      * @param root root builder      * @param uriToPrefix namespace URI to prefix mapping      * @throws RepositoryException      */
specifier|private
name|void
name|copyNamespaces
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|namespaces
init|=
name|system
operator|.
name|child
argument_list|(
name|NamespaceConstants
operator|.
name|REP_NAMESPACES
argument_list|)
decl_stmt|;
name|Properties
name|registry
init|=
name|loadProperties
argument_list|(
literal|"/namespaces/ns_reg.properties"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prefixHint
range|:
name|registry
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|String
name|prefix
decl_stmt|;
name|String
name|uri
init|=
name|registry
operator|.
name|getProperty
argument_list|(
name|prefixHint
argument_list|)
decl_stmt|;
if|if
condition|(
literal|".empty.key"
operator|.
name|equals
argument_list|(
name|prefixHint
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
comment|// the default empty mapping is not stored
block|}
else|else
block|{
name|prefix
operator|=
name|addCustomMapping
argument_list|(
name|namespaces
argument_list|,
name|uri
argument_list|,
name|prefixHint
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|uriToPrefix
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|Namespaces
operator|.
name|buildIndexNode
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|loadProperties
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|FileSystem
name|filesystem
init|=
name|source
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|filesystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|InputStream
name|stream
init|=
name|filesystem
operator|.
name|getInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|copyCustomPrivileges
parameter_list|(
name|PrivilegeManager
name|pMgr
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PrivilegeRegistry
name|registry
init|=
name|source
operator|.
name|getPrivilegeRegistry
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Privilege
argument_list|>
name|customAggrPrivs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Registering custom non-aggregated privileges"
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|registry
operator|.
name|getRegisteredPrivileges
argument_list|()
control|)
block|{
name|String
name|privilegeName
init|=
name|privilege
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|containsKey
argument_list|(
name|privilegeName
argument_list|)
operator|||
name|JCR_ALL
operator|.
name|equals
argument_list|(
name|privilegeName
argument_list|)
condition|)
block|{
comment|// Ignore built in privileges as those have been installed by the PrivilegesInitializer already
name|logger
operator|.
name|debug
argument_list|(
literal|"Built-in privilege -> ignore."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|privilege
operator|.
name|isAggregate
argument_list|()
condition|)
block|{
comment|// postpone
name|customAggrPrivs
operator|.
name|add
argument_list|(
name|privilege
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pMgr
operator|.
name|registerPrivilege
argument_list|(
name|privilegeName
argument_list|,
name|privilege
operator|.
name|isAbstract
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"- "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Registering custom aggregated privileges"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|customAggrPrivs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Privilege
argument_list|>
name|it
init|=
name|customAggrPrivs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|progress
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Privilege
name|aggrPriv
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrNames
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|aggrPriv
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Privilege
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Privilege
name|input
parameter_list|)
block|{
return|return
operator|(
name|input
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|allAggregatesRegistered
argument_list|(
name|pMgr
argument_list|,
name|aggrNames
argument_list|)
condition|)
block|{
name|pMgr
operator|.
name|registerPrivilege
argument_list|(
name|aggrPriv
operator|.
name|getName
argument_list|()
argument_list|,
name|aggrPriv
operator|.
name|isAbstract
argument_list|()
argument_list|,
name|aggrNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|aggrNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"- "
operator|+
name|aggrPriv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|progress
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|progress
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|customAggrPrivs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Registration of custom privileges completed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|invalid
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"|"
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|p
range|:
name|customAggrPrivs
control|)
block|{
name|invalid
operator|.
name|append
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to register custom privileges. The following privileges contained an invalid aggregation:"
operator|+
name|invalid
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|allAggregatesRegistered
parameter_list|(
name|PrivilegeManager
name|privilegeManager
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggrNames
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|aggrNames
control|)
block|{
try|try
block|{
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|copyNodeTypes
parameter_list|(
name|NodeTypeManager
name|ntMgr
parameter_list|,
name|ValueFactory
name|valueFactory
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeRegistry
name|sourceRegistry
init|=
name|source
operator|.
name|getNodeTypeRegistry
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeTypeTemplate
argument_list|>
name|templates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Name
name|name
range|:
name|sourceRegistry
operator|.
name|getRegisteredNodeTypes
argument_list|()
control|)
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// skip built-in nodetypes (OAK-1235)
if|if
condition|(
operator|!
name|ntMgr
operator|.
name|hasNodeType
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|QNodeTypeDefinition
name|def
init|=
name|sourceRegistry
operator|.
name|getNodeTypeDef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|templates
operator|.
name|add
argument_list|(
name|createNodeTypeTemplate
argument_list|(
name|valueFactory
argument_list|,
name|ntMgr
argument_list|,
name|oakName
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ntMgr
operator|.
name|registerNodeTypes
argument_list|(
name|templates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeTypeTemplate
index|[
name|templates
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeTypeTemplate
name|createNodeTypeTemplate
parameter_list|(
name|ValueFactory
name|valueFactory
parameter_list|,
name|NodeTypeManager
name|ntMgr
parameter_list|,
name|String
name|oakName
parameter_list|,
name|QNodeTypeDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeTemplate
name|tmpl
init|=
name|ntMgr
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|tmpl
operator|.
name|setName
argument_list|(
name|oakName
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setAbstract
argument_list|(
name|def
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setMixin
argument_list|(
name|def
operator|.
name|isMixin
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setOrderableChildNodes
argument_list|(
name|def
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setQueryable
argument_list|(
name|def
operator|.
name|isQueryable
argument_list|()
argument_list|)
expr_stmt|;
name|Name
name|primaryItemName
init|=
name|def
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryItemName
operator|!=
literal|null
condition|)
block|{
name|tmpl
operator|.
name|setPrimaryItemName
argument_list|(
name|getOakName
argument_list|(
name|primaryItemName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Name
index|[]
name|supertypes
init|=
name|def
operator|.
name|getSupertypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|supertypes
operator|!=
literal|null
operator|&&
name|supertypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|supertypes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Name
name|supertype
range|:
name|supertypes
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|getOakName
argument_list|(
name|supertype
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmpl
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PropertyDefinitionTemplate
argument_list|>
name|propertyDefinitionTemplates
init|=
name|tmpl
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
decl_stmt|;
for|for
control|(
name|QPropertyDefinition
name|qpd
range|:
name|def
operator|.
name|getPropertyDefs
argument_list|()
control|)
block|{
name|PropertyDefinitionTemplate
name|pdt
init|=
name|createPropertyDefinitionTemplate
argument_list|(
name|valueFactory
argument_list|,
name|ntMgr
argument_list|,
name|qpd
argument_list|)
decl_stmt|;
name|propertyDefinitionTemplates
operator|.
name|add
argument_list|(
name|pdt
argument_list|)
expr_stmt|;
block|}
comment|// + jcr:childNodeDefinition (nt:childNodeDefinition) = nt:childNodeDefinition protected sns
name|List
argument_list|<
name|NodeDefinitionTemplate
argument_list|>
name|nodeDefinitionTemplates
init|=
name|tmpl
operator|.
name|getNodeDefinitionTemplates
argument_list|()
decl_stmt|;
for|for
control|(
name|QNodeDefinition
name|qnd
range|:
name|def
operator|.
name|getChildNodeDefs
argument_list|()
control|)
block|{
name|NodeDefinitionTemplate
name|ndt
init|=
name|createNodeDefinitionTemplate
argument_list|(
name|ntMgr
argument_list|,
name|qnd
argument_list|)
decl_stmt|;
name|nodeDefinitionTemplates
operator|.
name|add
argument_list|(
name|ndt
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpl
return|;
block|}
specifier|private
name|NodeDefinitionTemplate
name|createNodeDefinitionTemplate
parameter_list|(
name|NodeTypeManager
name|ntMgr
parameter_list|,
name|QNodeDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeDefinitionTemplate
name|tmpl
init|=
name|ntMgr
operator|.
name|createNodeDefinitionTemplate
argument_list|()
decl_stmt|;
name|Name
name|name
init|=
name|def
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|tmpl
operator|.
name|setName
argument_list|(
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmpl
operator|.
name|setAutoCreated
argument_list|(
name|def
operator|.
name|isAutoCreated
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setMandatory
argument_list|(
name|def
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setOnParentVersion
argument_list|(
name|def
operator|.
name|getOnParentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setProtected
argument_list|(
name|def
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setSameNameSiblings
argument_list|(
name|def
operator|.
name|allowsSameNameSiblings
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|def
operator|.
name|getRequiredPrimaryTypes
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Name
name|type
range|:
name|def
operator|.
name|getRequiredPrimaryTypes
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|getOakName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmpl
operator|.
name|setRequiredPrimaryTypeNames
argument_list|(
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Name
name|type
init|=
name|def
operator|.
name|getDefaultPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|tmpl
operator|.
name|setDefaultPrimaryTypeName
argument_list|(
name|getOakName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpl
return|;
block|}
specifier|private
name|PropertyDefinitionTemplate
name|createPropertyDefinitionTemplate
parameter_list|(
name|ValueFactory
name|valueFactory
parameter_list|,
name|NodeTypeManager
name|ntMgr
parameter_list|,
name|QPropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PropertyDefinitionTemplate
name|tmpl
init|=
name|ntMgr
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|Name
name|name
init|=
name|def
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|tmpl
operator|.
name|setName
argument_list|(
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmpl
operator|.
name|setAutoCreated
argument_list|(
name|def
operator|.
name|isAutoCreated
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setMandatory
argument_list|(
name|def
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setOnParentVersion
argument_list|(
name|def
operator|.
name|getOnParentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setProtected
argument_list|(
name|def
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setRequiredType
argument_list|(
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setMultiple
argument_list|(
name|def
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setAvailableQueryOperators
argument_list|(
name|def
operator|.
name|getAvailableQueryOperators
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setFullTextSearchable
argument_list|(
name|def
operator|.
name|isFullTextSearchable
argument_list|()
argument_list|)
expr_stmt|;
name|tmpl
operator|.
name|setQueryOrderable
argument_list|(
name|def
operator|.
name|isQueryOrderable
argument_list|()
argument_list|)
expr_stmt|;
name|QValueConstraint
index|[]
name|qConstraints
init|=
name|def
operator|.
name|getValueConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|qConstraints
operator|!=
literal|null
operator|&&
name|qConstraints
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|constraints
init|=
operator|new
name|String
index|[
name|qConstraints
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qConstraints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|constraints
index|[
name|i
index|]
operator|=
name|qConstraints
index|[
name|i
index|]
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|tmpl
operator|.
name|setValueConstraints
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
block|}
name|QValue
index|[]
name|qValues
init|=
name|def
operator|.
name|getDefaultValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|qValues
operator|!=
literal|null
condition|)
block|{
name|NamePathResolver
name|npResolver
init|=
operator|new
name|DefaultNamePathResolver
argument_list|(
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
argument_list|)
decl_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[
name|qValues
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vs
index|[
name|i
index|]
operator|=
name|ValueFormat
operator|.
name|getJCRValue
argument_list|(
name|qValues
index|[
name|i
index|]
argument_list|,
name|npResolver
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
name|tmpl
operator|.
name|setDefaultValues
argument_list|(
name|vs
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpl
return|;
block|}
specifier|private
name|void
name|copyVersionStore
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|versionablePaths
parameter_list|)
block|{
name|PersistenceManager
name|pm
init|=
name|source
operator|.
name|getInternalVersionManager
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|builder
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying version histories"
argument_list|)
expr_stmt|;
name|copyState
argument_list|(
name|system
argument_list|,
name|JCR_VERSIONSTORAGE
argument_list|,
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|VERSION_STORAGE_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:versionStorage"
argument_list|,
name|workspaceName
argument_list|,
name|versionablePaths
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying activities"
argument_list|)
expr_stmt|;
name|copyState
argument_list|(
name|system
argument_list|,
literal|"jcr:activities"
argument_list|,
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ACTIVITIES_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:activities"
argument_list|,
name|workspaceName
argument_list|,
name|versionablePaths
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|copyWorkspace
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|versionablePaths
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying workspace {}"
argument_list|,
name|workspaceName
argument_list|)
expr_stmt|;
name|PersistenceManager
name|pm
init|=
name|source
operator|.
name|getWorkspaceInfo
argument_list|(
name|workspaceName
argument_list|)
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ROOT_NODE_ID
argument_list|,
literal|"/"
argument_list|,
name|workspaceName
argument_list|,
name|versionablePaths
argument_list|,
name|copyBinariesByReference
argument_list|,
name|skipOnError
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|childName
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JCR_SYSTEM
operator|.
name|equals
argument_list|(
name|childName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying subtree /{}"
argument_list|,
name|childName
argument_list|)
expr_stmt|;
name|copyState
argument_list|(
name|builder
argument_list|,
name|childName
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|workspaceName
return|;
block|}
specifier|private
name|void
name|copyState
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|SegmentNodeBuilder
condition|)
block|{
name|parent
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setChildNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * NodeState are copied by value by recursing down the complete tree      * This is a temporary approach for OAK-1760 for 1.0 branch.      */
specifier|private
name|void
name|setChildNode
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
comment|// OAK-1589: maximum supported length of name for DocumentNodeStore
comment|// is 150 bytes. Skip the sub tree if the the name is too long
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|37
operator|&&
name|name
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
operator|>
literal|150
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Node name too long. Skipping {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return;
block|}
name|NodeBuilder
name|builder
init|=
name|parent
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|setChildNode
argument_list|(
name|builder
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LoggingCompositeHook
implements|implements
name|CommitHook
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|CommitHook
argument_list|>
name|hooks
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|earlyShutdown
decl_stmt|;
specifier|private
specifier|final
name|RepositoryContext
name|source
decl_stmt|;
specifier|public
name|LoggingCompositeHook
parameter_list|(
name|Collection
argument_list|<
name|CommitHook
argument_list|>
name|hooks
parameter_list|,
name|RepositoryContext
name|source
parameter_list|,
name|boolean
name|earlyShutdown
parameter_list|)
block|{
name|this
operator|.
name|hooks
operator|=
name|hooks
expr_stmt|;
name|this
operator|.
name|earlyShutdown
operator|=
name|earlyShutdown
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|newState
init|=
name|after
decl_stmt|;
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
if|if
condition|(
name|earlyShutdown
operator|&&
operator|!
name|started
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Shutting down source repository."
argument_list|)
expr_stmt|;
name|source
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|CommitHook
name|hook
range|:
name|hooks
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Processing commit via {}"
argument_list|,
name|hook
argument_list|)
expr_stmt|;
name|newState
operator|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|newState
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Commit hook {} processed commit in {}"
argument_list|,
name|hook
argument_list|,
name|watch
argument_list|)
expr_stmt|;
name|watch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|newState
return|;
block|}
block|}
block|}
end_class

end_unit

