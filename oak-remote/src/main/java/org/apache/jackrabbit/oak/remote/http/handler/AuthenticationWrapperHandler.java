begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteLoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendInternalServerError
import|;
end_import

begin_class
class|class
name|AuthenticationWrapperHandler
implements|implements
name|Handler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthenticationWrapperHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Handler
name|authenticated
decl_stmt|;
specifier|private
specifier|final
name|Handler
name|notAuthenticated
decl_stmt|;
specifier|public
name|AuthenticationWrapperHandler
parameter_list|(
name|Handler
name|authenticated
parameter_list|,
name|Handler
name|notAuthenticated
parameter_list|)
block|{
name|this
operator|.
name|authenticated
operator|=
name|authenticated
expr_stmt|;
name|this
operator|.
name|notAuthenticated
operator|=
name|notAuthenticated
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|RemoteSession
name|session
init|=
operator|(
name|RemoteSession
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|authenticated
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteRepository
name|repository
init|=
operator|(
name|RemoteRepository
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"repository"
argument_list|)
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|sendInternalServerError
argument_list|(
name|response
argument_list|,
literal|"repository not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteCredentials
name|credentials
init|=
name|extractCredentials
argument_list|(
name|request
argument_list|,
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|notAuthenticated
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteLoginException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to authenticate to the repository"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|notAuthenticated
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|authenticated
operator|.
name|handle
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RemoteCredentials
name|extractCredentials
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RemoteRepository
name|repository
parameter_list|)
block|{
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorization
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|scheme
init|=
name|getScheme
argument_list|(
name|authorization
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"basic"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|token
init|=
name|getToken
argument_list|(
name|authorization
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|decoded
decl_stmt|;
try|try
block|{
name|decoded
operator|=
name|Base64
operator|.
name|decode
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|user
init|=
name|getUser
argument_list|(
name|decoded
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|decoded
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|repository
operator|.
name|createBasicCredentials
argument_list|(
name|user
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getScheme
parameter_list|(
name|String
name|authorization
parameter_list|)
block|{
name|int
name|index
init|=
name|authorization
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
name|authorization
return|;
block|}
return|return
name|authorization
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
name|String
name|getToken
parameter_list|(
name|String
name|authorization
parameter_list|)
block|{
name|int
name|index
init|=
name|authorization
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
name|index
operator|<
name|authorization
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|authorization
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
literal|' '
condition|)
block|{
break|break;
block|}
name|index
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|authorization
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|authorization
operator|.
name|substring
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getUser
parameter_list|(
name|String
name|both
parameter_list|)
block|{
name|int
name|index
init|=
name|both
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|both
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
name|String
name|getPassword
parameter_list|(
name|String
name|both
parameter_list|)
block|{
name|int
name|index
init|=
name|both
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|index
operator|+
literal|1
operator|<
name|both
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|both
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

