begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Marker object to help the {@link org.apache.jackrabbit.oak.security.authentication.token.TokenValidatorProvider.TokenValidator}  * identifying if login tokens have been issued and updated by the {@code TokenProvider}  * implementation provided by this package and not through regular write  * operations on the Oak API which doesn't enforce the protected status  * of the login tokens as defined by this implementation.  */
end_comment

begin_class
specifier|final
class|class
name|CommitMarker
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
name|CommitMarker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CommitMarker
name|INSTANCE
init|=
operator|new
name|CommitMarker
argument_list|()
decl_stmt|;
annotation|@
name|NotNull
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asCommitAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|CommitMarker
operator|.
name|KEY
argument_list|,
name|CommitMarker
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isValidCommitInfo
parameter_list|(
annotation|@
name|NotNull
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
return|return
name|CommitMarker
operator|.
name|INSTANCE
operator|==
name|commitInfo
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitMarker
operator|.
name|KEY
argument_list|)
return|;
block|}
specifier|private
name|CommitMarker
parameter_list|()
block|{}
block|}
end_class

end_unit

