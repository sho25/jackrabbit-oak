begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|lock
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|NodeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|operation
operator|.
name|NodeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|operation
operator|.
name|SessionOperation
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|LockImpl
implements|implements
name|Lock
block|{
specifier|private
specifier|final
name|SessionContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|NodeDelegate
name|delegate
decl_stmt|;
specifier|public
name|LockImpl
parameter_list|(
annotation|@
name|Nonnull
name|SessionContext
name|context
parameter_list|,
annotation|@
name|Nonnull
name|NodeDelegate
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
try|try
block|{
return|return
name|NodeImpl
operator|.
name|createNode
argument_list|(
name|delegate
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to access the lock node"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLockOwner
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|String
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|node
operator|.
name|getLockOwner
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeep
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|node
operator|.
name|holdsLock
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLive
parameter_list|()
block|{
return|return
name|context
operator|.
name|getSession
argument_list|()
operator|.
name|isLive
argument_list|()
operator|&&
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|node
operator|.
name|holdsLock
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLockToken
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|String
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|token
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getOpenScopedLocks
argument_list|()
operator|.
name|contains
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|token
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSecondsRemaining
parameter_list|()
block|{
if|if
condition|(
name|isLive
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSessionScoped
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getSessionScopedLocks
argument_list|()
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLockOwningSession
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|NodeOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|delegate
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getSessionScopedLocks
argument_list|()
operator|.
name|contains
argument_list|(
name|path
argument_list|)
operator|||
name|context
operator|.
name|getOpenScopedLocks
argument_list|()
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|LockException
block|{
if|if
condition|(
operator|!
name|isLive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"This lock is not alive"
argument_list|)
throw|;
block|}
block|}
comment|//-----------------------------------------------------------< private>--
comment|/**      * Perform the passed {@link SessionOperation} assuming it does not      * throw a {@code RepositoryException}. If it does, wrap it into and      * throw it as a {@code RuntimeException}.      *      * @param op operation to perform      * @param<U> return type of the operation      * @return the result of {@code op.perform()}      */
annotation|@
name|CheckForNull
specifier|private
specifier|final
parameter_list|<
name|U
parameter_list|>
name|U
name|safePerform
parameter_list|(
annotation|@
name|Nonnull
name|SessionOperation
argument_list|<
name|U
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|context
operator|.
name|getSessionDelegate
argument_list|()
operator|.
name|safePerform
argument_list|(
name|op
argument_list|)
return|;
block|}
block|}
end_class

end_unit

