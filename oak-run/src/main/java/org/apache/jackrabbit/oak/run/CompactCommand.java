begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|AzureCompact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Compact
import|;
end_import

begin_class
class|class
name|CompactCommand
implements|implements
name|Command
block|{
specifier|private
specifier|static
name|boolean
name|isTrue
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|directoryArg
init|=
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"Path/URI to TAR/remote segment store (required)"
argument_list|)
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|mmapArg
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"mmap"
argument_list|,
literal|"Use memory mapped access if true, use file access if false. "
operator|+
literal|"If not specified, memory mapped access is used on 64 bit "
operator|+
literal|"systems and file access is used on 32 bit systems. For "
operator|+
literal|"remote segment stores and on Windows, regular file access "
operator|+
literal|"is always enforced and this option is ignored."
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|forceArg
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"force"
argument_list|,
literal|"Force compaction and ignore a non matching segment store version. "
operator|+
literal|"CAUTION: this will upgrade the segment store to the latest version, "
operator|+
literal|"which is incompatible with older versions of Oak."
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|directoryArg
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Compact a file store. Usage: compact [path]<options>"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"az:"
argument_list|)
condition|)
block|{
name|code
operator|=
name|AzureCompact
operator|.
name|builder
argument_list|()
operator|.
name|withPath
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|withForce
argument_list|(
name|isTrue
argument_list|(
name|forceArg
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"cache"
argument_list|,
literal|256
argument_list|)
argument_list|)
operator|.
name|withGCLogInterval
argument_list|(
name|Long
operator|.
name|getLong
argument_list|(
literal|"compaction-progress-log"
argument_list|,
literal|150000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|Compact
operator|.
name|builder
argument_list|()
operator|.
name|withPath
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|withForce
argument_list|(
name|isTrue
argument_list|(
name|forceArg
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withMmap
argument_list|(
name|mmapArg
operator|.
name|value
argument_list|(
name|options
argument_list|)
argument_list|)
operator|.
name|withOs
argument_list|(
name|StandardSystemProperty
operator|.
name|OS_NAME
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"cache"
argument_list|,
literal|256
argument_list|)
argument_list|)
operator|.
name|withGCLogInterval
argument_list|(
name|Long
operator|.
name|getLong
argument_list|(
literal|"compaction-progress-log"
argument_list|,
literal|150000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

