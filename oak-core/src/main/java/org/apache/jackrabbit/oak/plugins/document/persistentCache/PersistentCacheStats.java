begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|PersistentCacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Counting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesStatsUtil
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Persistence Cache Statistics.  */
end_comment

begin_class
specifier|public
class|class
name|PersistentCacheStats
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|PersistentCacheStatsMBean
block|{
specifier|private
specifier|static
specifier|final
name|Boolean
name|ENABLE_READ_TIMER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Boolean
name|ENABLE_LOAD_TIMER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Boolean
name|ENABLE_REJECTED_PUT
decl_stmt|;
static|static
block|{
name|String
name|enableReadTimer
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"PersistentCacheStats.readTimer"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|String
name|enableLoadTimer
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"PersistentCacheStats.loadTimer"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|String
name|enableRejectedPut
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"PersistentCacheStats.rejectedPut"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|ENABLE_READ_TIMER
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|enableReadTimer
argument_list|)
expr_stmt|;
name|ENABLE_LOAD_TIMER
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|enableLoadTimer
argument_list|)
expr_stmt|;
name|ENABLE_REJECTED_PUT
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|enableRejectedPut
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|HITS
init|=
literal|"HITS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REQUESTS
init|=
literal|"REQUESTS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_TIMER
init|=
literal|"LOAD_TIMER"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_EXCEPTIONS
init|=
literal|"LOAD_EXCEPTIONS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUT_ONE
init|=
literal|"CACHE_PUT"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROADCAST_RECV
init|=
literal|"BROADCAST_RECV"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVALIDATE_ONE
init|=
literal|"INVALIDATE_ONE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVALIDATE_ALL
init|=
literal|"INVALIDATE_ALL"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|READ_TIMER
init|=
literal|"READ_TIMER"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USED_DISK_SPACE
init|=
literal|"USED_SPACE_BYTES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUT_REJECTED_ALREADY_PERSISTED
init|=
literal|"PUT_REJECTED_ALREADY_PERSISTED"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUT_REJECTED_ENTRY_NOT_USED
init|=
literal|"PUT_REJECTED_ENTRY_NOT_USED"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUT_REJECTED_FULL_QUEUE
init|=
literal|"PUT_REJECTED_FULL_QUEUE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUT_REJECTED_SECONDARY_CACHE
init|=
literal|"PUT_REJECTED_SECONDARY_CACHE"
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
specifier|final
name|String
name|cacheName
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|hitMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|hitRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|requestMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|requestRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|loadExceptionMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|loadExceptionRateHistory
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|loadTimer
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|loadRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|putMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|putRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|broadcastRecvMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|broadcastRecvRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|invalidateOneMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|invalidateOneRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|invalidateAllMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|invalidateAllRateHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|putRejectedAlreadyPersistedMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|putRejectedAlreadyPersistedHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|putRejectedEntryNotUsedMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|putRejectedEntryNotUseHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|putRejectedByFullQueueMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|putRejectedByFullQueueHistory
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|putRejectedAsCachedInSecMeter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|putRejectedAsCachedInSecHistory
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|readTimer
decl_stmt|;
specifier|private
specifier|final
name|CounterStats
name|usedSpaceByteCounter
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|usedSpaceByteCounterHistory
decl_stmt|;
specifier|private
specifier|final
name|UsedSpaceTracker
name|diskStats
decl_stmt|;
specifier|private
specifier|final
name|TimeSeries
name|hitPercentageHistory
decl_stmt|;
specifier|public
name|PersistentCacheStats
parameter_list|(
name|CacheType
name|cacheType
parameter_list|,
name|StatisticsProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|PersistentCacheStatsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
name|statisticsProvider
operator|=
name|StatisticsProvider
operator|.
name|NOOP
expr_stmt|;
block|}
else|else
block|{
name|statisticsProvider
operator|=
name|provider
expr_stmt|;
block|}
comment|// Configure cache name
name|cacheName
operator|=
literal|"PersistentCache.NodeCache."
operator|+
name|cacheType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// Fetch stats and time series
name|String
name|statName
decl_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|HITS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|hitMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|hitRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|REQUESTS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|requestMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|requestRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|hitPercentageHistory
operator|=
operator|new
name|PercentageTimeSeries
argument_list|(
name|hitRateHistory
argument_list|,
name|requestRateHistory
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|LOAD_TIMER
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|loadRateHistory
operator|=
operator|new
name|DifferenceTimeSeries
argument_list|(
name|requestRateHistory
argument_list|,
name|hitRateHistory
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_LOAD_TIMER
condition|)
block|{
name|loadTimer
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadTimer
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getTimer
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
name|statName
operator|=
name|getStatName
argument_list|(
name|LOAD_EXCEPTIONS
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|loadExceptionMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|loadExceptionRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|PUT_ONE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|putMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|BROADCAST_RECV
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|broadcastRecvMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|broadcastRecvRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|INVALIDATE_ONE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|invalidateOneMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|invalidateOneRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|INVALIDATE_ALL
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|invalidateAllMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|invalidateAllRateHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|USED_DISK_SPACE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|usedSpaceByteCounter
operator|=
name|statisticsProvider
operator|.
name|getCounterStats
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|usedSpaceByteCounterHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statName
operator|=
name|getStatName
argument_list|(
name|READ_TIMER
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_READ_TIMER
condition|)
block|{
name|readTimer
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readTimer
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getTimer
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
name|statName
operator|=
name|getStatName
argument_list|(
name|PUT_REJECTED_ALREADY_PERSISTED
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_REJECTED_PUT
condition|)
block|{
name|putRejectedAlreadyPersistedMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedAlreadyPersistedHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|putRejectedAlreadyPersistedMeter
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedAlreadyPersistedHistory
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|statName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|statName
operator|=
name|getStatName
argument_list|(
name|PUT_REJECTED_ENTRY_NOT_USED
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_REJECTED_PUT
condition|)
block|{
name|putRejectedEntryNotUsedMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedEntryNotUseHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|putRejectedEntryNotUsedMeter
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedEntryNotUseHistory
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|statName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|statName
operator|=
name|getStatName
argument_list|(
name|PUT_REJECTED_FULL_QUEUE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ENABLE_REJECTED_PUT
condition|)
block|{
name|putRejectedByFullQueueMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedByFullQueueHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|putRejectedByFullQueueMeter
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedByFullQueueHistory
operator|=
name|StatisticsProvider
operator|.
name|NOOP
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|statName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|statName
operator|=
name|getStatName
argument_list|(
name|PUT_REJECTED_SECONDARY_CACHE
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|putRejectedAsCachedInSecMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|statName
argument_list|,
name|StatsOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|putRejectedAsCachedInSecHistory
operator|=
name|getTimeSeries
argument_list|(
name|statName
argument_list|)
expr_stmt|;
name|diskStats
operator|=
operator|new
name|UsedSpaceTracker
argument_list|(
name|usedSpaceByteCounter
argument_list|)
expr_stmt|;
block|}
comment|//~--------------------------------------< stats update methods
specifier|public
name|void
name|markHit
parameter_list|()
block|{
name|hitMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markRequest
parameter_list|()
block|{
name|requestMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markException
parameter_list|()
block|{
name|loadExceptionMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markPut
parameter_list|()
block|{
name|putMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markRecvBroadcast
parameter_list|()
block|{
name|broadcastRecvMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markInvalidateOne
parameter_list|()
block|{
name|invalidateOneMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markInvalidateAll
parameter_list|()
block|{
name|invalidateAllMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markPutRejectedAlreadyPersisted
parameter_list|()
block|{
name|putRejectedAlreadyPersistedMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markPutRejectedEntryNotUsed
parameter_list|()
block|{
name|putRejectedEntryNotUsedMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markPutRejectedAsCachedInSecondary
parameter_list|()
block|{
name|putRejectedAsCachedInSecMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markPutRejectedQueueFull
parameter_list|()
block|{
name|putRejectedByFullQueueMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TimerStats
operator|.
name|Context
name|startReadTimer
parameter_list|()
block|{
return|return
name|this
operator|.
name|readTimer
operator|.
name|time
argument_list|()
return|;
block|}
specifier|public
name|TimerStats
operator|.
name|Context
name|startLoaderTimer
parameter_list|()
block|{
return|return
name|this
operator|.
name|loadTimer
operator|.
name|time
argument_list|()
return|;
block|}
comment|// Update disk space
specifier|public
name|void
name|addWriteGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|diskStats
operator|.
name|addWriteGeneration
argument_list|(
name|generation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeReadGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|diskStats
operator|.
name|removeReadGeneration
argument_list|(
name|generation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|markBytesWritten
parameter_list|(
name|long
name|numBytes
parameter_list|)
block|{
name|diskStats
operator|.
name|markBytesWritten
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
block|}
comment|//~--------------------------------------< diskspace usage helper
specifier|static
class|class
name|UsedSpaceTracker
block|{
specifier|private
specifier|final
name|CounterStats
name|byteCounter
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|AtomicLong
argument_list|>
name|generationByteCounters
decl_stmt|;
specifier|private
name|AtomicLong
name|currentGenCounter
decl_stmt|;
name|UsedSpaceTracker
parameter_list|(
name|CounterStats
name|usageCounter
parameter_list|)
block|{
name|this
operator|.
name|byteCounter
operator|=
name|usageCounter
expr_stmt|;
name|this
operator|.
name|generationByteCounters
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentGenCounter
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
block|}
name|void
name|addWriteGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|currentGenCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|generationByteCounters
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|currentGenCounter
argument_list|)
expr_stmt|;
block|}
name|void
name|removeReadGeneration
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|AtomicLong
name|genCounter
init|=
name|generationByteCounters
operator|.
name|remove
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|byteCounter
operator|.
name|dec
argument_list|(
name|genCounter
operator|==
literal|null
condition|?
literal|0L
else|:
name|genCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|markBytesWritten
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
name|currentGenCounter
operator|.
name|addAndGet
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byteCounter
operator|.
name|inc
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|//~--------------------------------------< CacheStatsMbean
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|cacheName
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
name|requestMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHitCount
parameter_list|()
block|{
return|return
name|hitMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getHitRate
parameter_list|()
block|{
name|long
name|hitCount
init|=
name|hitMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|requestCount
init|=
name|requestMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|hitCount
operator|/
name|requestCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMissCount
parameter_list|()
block|{
return|return
name|requestMeter
operator|.
name|getCount
argument_list|()
operator|-
name|hitMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMissRate
parameter_list|()
block|{
name|long
name|missCount
init|=
name|getMissCount
argument_list|()
decl_stmt|;
name|long
name|requestCount
init|=
name|requestMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|requestCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|missCount
operator|/
name|requestCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadCount
parameter_list|()
block|{
return|return
name|getMissCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadSuccessCount
parameter_list|()
block|{
return|return
name|getLoadCount
argument_list|()
operator|-
name|getLoadExceptionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLoadExceptionCount
parameter_list|()
block|{
return|return
name|loadExceptionMeter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getLoadExceptionRate
parameter_list|()
block|{
name|long
name|exceptionCount
init|=
name|loadExceptionMeter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|loadCount
init|=
name|loadTimer
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
operator|(
name|loadCount
operator|==
literal|0L
condition|?
literal|0L
else|:
operator|(
name|double
operator|)
name|exceptionCount
operator|/
name|loadCount
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateCurrentWeight
parameter_list|()
block|{
return|return
name|usedSpaceByteCounter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getRequestRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|requestRateHistory
argument_list|,
literal|"Persistent cache requests"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getHitRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|hitRateHistory
argument_list|,
literal|"Persistent cache hits"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getLoadRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|loadRateHistory
argument_list|,
literal|"Persistent cache loads/misses"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getLoadExceptionRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|loadExceptionRateHistory
argument_list|,
literal|"Persistent cache load exceptions"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getHitPercentageHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|hitPercentageHistory
argument_list|,
literal|"Persistent cache hit percentage"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPutRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|putRateHistory
argument_list|,
literal|"Persistent cache manual put entry"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPutRejectedAlreadyPersistedRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|putRejectedAlreadyPersistedHistory
argument_list|,
literal|"Persistent cache put rejected (already persisted)"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPutRejectedEntryNotUsedRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|putRejectedEntryNotUseHistory
argument_list|,
literal|"Persistent cache put rejected (entry not used)"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPutRejectedQueueFullRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|putRejectedByFullQueueHistory
argument_list|,
literal|"Persistent cache put rejected (queue is full)"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPutRejectedAsCachedInSecRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|putRejectedAsCachedInSecHistory
argument_list|,
literal|"Persistent cache put rejected "
operator|+
literal|"(entry is covered by secondary)"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getInvalidateOneRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|invalidateOneRateHistory
argument_list|,
literal|"Persistent cache invalidate one entry"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getInvalidateAllRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|invalidateAllRateHistory
argument_list|,
literal|"Persistent cache invalidate all entries"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getBroadcastRecvRateHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|broadcastRecvRateHistory
argument_list|,
literal|"Persistent cache entries received from broadcast"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompositeData
name|getUsedSpaceHistory
parameter_list|()
block|{
return|return
name|TimeSeriesStatsUtil
operator|.
name|asCompositeData
argument_list|(
name|usedSpaceByteCounterHistory
argument_list|,
literal|"Persistent cache estimated size (bytes)"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|cacheInfoAsString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
literal|"PersistentCacheStats"
argument_list|)
operator|.
name|add
argument_list|(
literal|"requestCount"
argument_list|,
name|getRequestCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitCount"
argument_list|,
name|getHitCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"hitRate"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getHitRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"missCount"
argument_list|,
name|getMissCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"missRate"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%1.2f"
argument_list|,
name|getMissRate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadCount"
argument_list|,
name|getLoadCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadSuccessCount"
argument_list|,
name|getLoadSuccessCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"loadExceptionCount"
argument_list|,
name|getLoadExceptionCount
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"totalWeight"
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|estimateCurrentWeight
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//~--------------------------------------< CacheStatsMbean - stats that are not (yet) available
annotation|@
name|Override
specifier|public
name|long
name|getTotalLoadTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getAverageLoadPenalty
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEvictionCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getElementCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxTotalWeight
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetStats
parameter_list|()
block|{
comment|// ignored
block|}
name|Counting
name|getPutRejectedAsCachedInSecCounter
parameter_list|()
block|{
return|return
name|putRejectedAsCachedInSecMeter
return|;
block|}
comment|//~--------------------------------------< private helpers
specifier|private
specifier|static
name|String
name|getStatName
parameter_list|(
name|String
name|meter
parameter_list|,
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|cacheName
operator|+
literal|"."
operator|+
name|meter
return|;
block|}
specifier|private
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statisticsProvider
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resetValues
parameter_list|)
block|{
return|return
name|statisticsProvider
operator|.
name|getStats
argument_list|()
operator|.
name|getTimeSeries
argument_list|(
name|name
argument_list|,
name|resetValues
argument_list|)
return|;
block|}
comment|/**      * TimeSeries that computes the hit ratio in percentages. ( hit/total * 100 )      */
specifier|private
specifier|static
class|class
name|PercentageTimeSeries
implements|implements
name|TimeSeries
block|{
specifier|private
name|TimeSeries
name|hit
decl_stmt|,
name|total
decl_stmt|;
name|PercentageTimeSeries
parameter_list|(
name|TimeSeries
name|hit
parameter_list|,
name|TimeSeries
name|total
parameter_list|)
block|{
name|this
operator|.
name|hit
operator|=
name|hit
expr_stmt|;
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerSecond
parameter_list|()
block|{
return|return
name|percentage
argument_list|(
name|hit
operator|.
name|getValuePerSecond
argument_list|()
argument_list|,
name|total
operator|.
name|getValuePerSecond
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerMinute
parameter_list|()
block|{
return|return
name|percentage
argument_list|(
name|hit
operator|.
name|getValuePerMinute
argument_list|()
argument_list|,
name|total
operator|.
name|getValuePerMinute
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerHour
parameter_list|()
block|{
return|return
name|percentage
argument_list|(
name|hit
operator|.
name|getValuePerHour
argument_list|()
argument_list|,
name|total
operator|.
name|getValuePerHour
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerWeek
parameter_list|()
block|{
return|return
name|percentage
argument_list|(
name|hit
operator|.
name|getValuePerWeek
argument_list|()
argument_list|,
name|total
operator|.
name|getValuePerWeek
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMissingValue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|long
index|[]
name|percentage
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|long
index|[]
name|b
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|a
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|b
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|a
index|[
name|i
index|]
operator|*
literal|100
operator|)
operator|/
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**      * TimeSeries as a difference between two other TimeSeries      */
specifier|private
specifier|static
class|class
name|DifferenceTimeSeries
implements|implements
name|TimeSeries
block|{
specifier|private
name|TimeSeries
name|tsA
decl_stmt|,
name|tsB
decl_stmt|;
name|DifferenceTimeSeries
parameter_list|(
name|TimeSeries
name|tsA
parameter_list|,
name|TimeSeries
name|tsB
parameter_list|)
block|{
name|this
operator|.
name|tsA
operator|=
name|tsA
expr_stmt|;
name|this
operator|.
name|tsB
operator|=
name|tsB
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerSecond
parameter_list|()
block|{
return|return
name|difference
argument_list|(
name|tsA
operator|.
name|getValuePerSecond
argument_list|()
argument_list|,
name|tsB
operator|.
name|getValuePerSecond
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerMinute
parameter_list|()
block|{
return|return
name|difference
argument_list|(
name|tsA
operator|.
name|getValuePerMinute
argument_list|()
argument_list|,
name|tsB
operator|.
name|getValuePerMinute
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerHour
parameter_list|()
block|{
return|return
name|difference
argument_list|(
name|tsA
operator|.
name|getValuePerHour
argument_list|()
argument_list|,
name|tsB
operator|.
name|getValuePerHour
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getValuePerWeek
parameter_list|()
block|{
return|return
name|difference
argument_list|(
name|tsA
operator|.
name|getValuePerWeek
argument_list|()
argument_list|,
name|tsB
operator|.
name|getValuePerWeek
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMissingValue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|long
index|[]
name|difference
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|long
index|[]
name|b
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|a
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|a
index|[
name|i
index|]
operator|-
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

