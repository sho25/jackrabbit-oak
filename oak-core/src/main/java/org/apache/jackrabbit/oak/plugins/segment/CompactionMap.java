begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Immutable, space-optimized mapping of compacted record identifiers.  * Used to optimize record equality comparisons across a compaction operation  * without holding references to the {@link SegmentId} instances of the old,  * compacted segments.  *<p>  * The data structure used by this class consists of three parts:  *<ol>  *<li>The {@link #msbs} and {@link #lsbs} arrays store the identifiers  *       of all old, compacted segments. The identifiers are stored in  *       increasing order, with the i'th identifier stored in the  *       {@code msbs[i]} and {@code lsbs[i]} slots. Interpolation search  *       is used to quickly locate any given identifier.  *<li>Each compacted segment identifier is associated with a list of  *       mapping entries that point from a record offset within that  *       segment to the new identifier of the compacted record. The  *       {@link #entryIndex} array is used to to locate these lists within  *       the larger entry arrays described below. The list of entries for  *       the i'th identifier consists of entries from {@code entryIndex[i]}  *       (inclusive) to {@code entryIndex[i+1]} (exclusive). An extra  *       sentinel slot is added at the end of the array to make the above  *       rule work also for the last compacted segment identifier.  *<li>The mapping entries are stored in the {@link #beforeOffsets},  *       {@link #afterSegmentIds} and {@link #afterOffsets} arrays. Once the  *       list of entries for a given compacted segment is found, the  *       before record offsets are scanned to find a match. If a match is  *       found, the corresponding compacted record will be identified by the  *       respective after segment identifier and offset.  *</ol>  *<p>  * Assuming each compacted segment contains {@code n} compacted records on  * average, the amortized size of each entry in this mapping is about  * {@code 20/n + 8} bytes, assuming compressed pointers.  */
end_comment

begin_class
class|class
name|CompactionMap
block|{
specifier|private
specifier|final
name|long
index|[]
name|msbs
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|lsbs
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|entryIndex
decl_stmt|;
specifier|private
specifier|final
name|short
index|[]
name|beforeOffsets
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
index|[]
name|afterSegmentIds
decl_stmt|;
specifier|private
specifier|final
name|short
index|[]
name|afterOffsets
decl_stmt|;
name|CompactionMap
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
expr|<
name|RecordId
argument_list|,
name|RecordId
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a compaction map based from the given record identifiers.      */
name|CompactionMap
parameter_list|(
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|compacted
parameter_list|)
block|{
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|RecordId
argument_list|>
argument_list|>
name|mapping
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|compacted
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RecordId
name|before
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SegmentId
name|id
init|=
name|before
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
name|mapping
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|newTreeMap
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|before
operator|.
name|getOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SegmentId
index|[]
name|ids
init|=
name|mapping
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|SegmentId
index|[
name|mapping
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|this
operator|.
name|msbs
operator|=
operator|new
name|long
index|[
name|ids
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|lsbs
operator|=
operator|new
name|long
index|[
name|ids
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|entryIndex
operator|=
operator|new
name|int
index|[
name|ids
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|beforeOffsets
operator|=
operator|new
name|short
index|[
name|compacted
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|afterSegmentIds
operator|=
operator|new
name|SegmentId
index|[
name|compacted
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|afterOffsets
operator|=
operator|new
name|short
index|[
name|compacted
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|msbs
index|[
name|i
index|]
operator|=
name|ids
index|[
name|i
index|]
operator|.
name|getMostSignificantBits
argument_list|()
expr_stmt|;
name|lsbs
index|[
name|i
index|]
operator|=
name|ids
index|[
name|i
index|]
operator|.
name|getLeastSignificantBits
argument_list|()
expr_stmt|;
name|entryIndex
index|[
name|i
index|]
operator|=
name|index
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
name|mapping
operator|.
name|get
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RecordId
name|id
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|beforeOffsets
index|[
name|index
index|]
operator|=
call|(
name|short
call|)
argument_list|(
name|key
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
expr_stmt|;
name|afterSegmentIds
index|[
name|index
index|]
operator|=
name|id
operator|.
name|getSegmentId
argument_list|()
expr_stmt|;
name|afterOffsets
index|[
name|index
index|]
operator|=
call|(
name|short
call|)
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
operator|>>
name|RECORD_ALIGN_BITS
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
name|entryIndex
index|[
name|ids
operator|.
name|length
index|]
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * Checks whether the record with the given {@code before} identifier was      * compacted to a new record with the given {@code after} identifier.      *      * @param before before record identifier      * @param after after record identifier      * @return whether {@code before} was compacted to {@code after}      */
name|boolean
name|wasCompactedTo
parameter_list|(
name|RecordId
name|before
parameter_list|,
name|RecordId
name|after
parameter_list|)
block|{
comment|// this a copy of the TarReader#findEntry with tiny changes around the
comment|// entry sizes
name|SegmentId
name|segmentId
init|=
name|before
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|long
name|msb
init|=
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|before
operator|.
name|getOffset
argument_list|()
decl_stmt|;
comment|// The segment identifiers are randomly generated with uniform
comment|// distribution, so we can use interpolation search to find the
comment|// matching entry in the index. The average runtime is O(log log n).
name|int
name|lowIndex
init|=
literal|0
decl_stmt|;
name|int
name|highIndex
init|=
name|msbs
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// Use floats to prevent integer overflow during interpolation.
comment|// Lost accuracy is no problem, since we use interpolation only
comment|// as a guess of where the target value is located and the actual
comment|// comparisons are still done using the original values.
name|float
name|lowValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|float
name|highValue
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|targetValue
init|=
name|msb
decl_stmt|;
while|while
condition|(
name|lowIndex
operator|<=
name|highIndex
condition|)
block|{
name|int
name|guessIndex
init|=
name|lowIndex
decl_stmt|;
name|float
name|valueRange
init|=
name|highValue
operator|-
name|lowValue
decl_stmt|;
if|if
condition|(
name|valueRange
operator|>=
literal|1
condition|)
block|{
name|guessIndex
operator|+=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|highIndex
operator|-
name|lowIndex
operator|)
operator|*
operator|(
name|targetValue
operator|-
name|lowValue
operator|)
operator|/
name|valueRange
argument_list|)
expr_stmt|;
block|}
name|long
name|m
init|=
name|msbs
index|[
name|guessIndex
index|]
decl_stmt|;
if|if
condition|(
name|msb
operator|<
name|m
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msb
operator|>
name|m
condition|)
block|{
name|lowIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|lowValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// getting close...
name|long
name|l
init|=
name|lsbs
index|[
name|guessIndex
index|]
decl_stmt|;
if|if
condition|(
name|lsb
operator|<
name|l
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|-
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lsb
operator|>
name|l
condition|)
block|{
name|highIndex
operator|=
name|guessIndex
operator|+
literal|1
expr_stmt|;
name|highValue
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
comment|// getting even closer...
name|int
name|index
init|=
name|entryIndex
index|[
name|guessIndex
index|]
decl_stmt|;
name|int
name|limit
init|=
name|entryIndex
index|[
name|guessIndex
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|int
name|o
init|=
operator|(
name|beforeOffsets
index|[
name|i
index|]
operator|&
literal|0xffff
operator|)
operator|<<
name|RECORD_ALIGN_BITS
decl_stmt|;
if|if
condition|(
name|o
operator|<
name|offset
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
name|offset
condition|)
block|{
comment|// found it! now compare the value
return|return
name|afterSegmentIds
index|[
name|i
index|]
operator|==
name|after
operator|.
name|getSegmentId
argument_list|()
operator|&&
operator|(
name|afterOffsets
index|[
name|i
index|]
operator|&
literal|0xffff
operator|)
operator|<<
name|RECORD_ALIGN_BITS
operator|==
name|after
operator|.
name|getOffset
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
comment|// not found
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

