begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Index editor for keeping an ordered property index up to date.  */
end_comment

begin_class
specifier|public
class|class
name|OrderedPropertyIndexEditor
extends|extends
name|PropertyIndexEditor
block|{
comment|/**      * the default Ascending ordered StoreStrategy      */
specifier|static
specifier|final
name|IndexStoreStrategy
name|ORDERED_MIRROR
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|()
decl_stmt|;
comment|/**      * the Descending ordered StoreStrategy      */
specifier|static
specifier|final
name|IndexStoreStrategy
name|ORDERED_MIRROR_DESCENDING
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|(
name|OrderDirection
operator|.
name|DESC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrderedPropertyIndexEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|propertyNames
decl_stmt|;
specifier|private
name|boolean
name|properlyConfigured
decl_stmt|;
specifier|private
name|OrderDirection
name|direction
init|=
name|OrderedIndex
operator|.
name|DEFAULT_DIRECTION
decl_stmt|;
specifier|public
name|OrderedPropertyIndexEditor
parameter_list|(
name|NodeBuilder
name|definition
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|IndexUpdateCallback
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|definition
argument_list|,
name|root
argument_list|,
name|callback
argument_list|)
expr_stmt|;
comment|// configuring propertyNames
name|Set
argument_list|<
name|String
argument_list|>
name|pns
init|=
literal|null
decl_stmt|;
name|PropertyState
name|names
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|IndexConstants
operator|.
name|PROPERTY_NAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|names
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Empty value passed as propertyNames. Index not properly configured. Ignoring."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|names
operator|.
name|isArray
argument_list|()
operator|&&
name|names
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Only single value supported. '{}' only will be used."
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|pns
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|properlyConfigured
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|propertyNames
operator|=
name|pns
expr_stmt|;
comment|// configuring direction
name|String
name|propertyDirection
init|=
name|definition
operator|.
name|getString
argument_list|(
name|OrderedIndex
operator|.
name|DIRECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyDirection
operator|==
literal|null
condition|)
block|{
comment|// LOG.debug("Using default direction for sorting: {}", this.direction);
block|}
else|else
block|{
name|OrderDirection
name|dir
init|=
name|OrderDirection
operator|.
name|fromString
argument_list|(
name|propertyDirection
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An unknown direction has been specified for sorting: '{}'. Using default one. {}"
argument_list|,
name|propertyDirection
argument_list|,
name|this
operator|.
name|direction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|direction
operator|=
name|dir
expr_stmt|;
block|}
block|}
block|}
name|OrderedPropertyIndexEditor
parameter_list|(
name|OrderedPropertyIndexEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyNames
operator|=
name|parent
operator|.
name|getPropertyNames
argument_list|()
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|parent
operator|.
name|getDirection
argument_list|()
expr_stmt|;
block|}
comment|/**      * Same as {@link PropertyIndexEditor#getStrategy(boolean)} but ignores the boolean flag.      *       * @return the proper index strategy      */
annotation|@
name|Override
name|IndexStoreStrategy
name|getStrategy
parameter_list|(
name|boolean
name|unique
parameter_list|)
block|{
name|IndexStoreStrategy
name|store
init|=
name|ORDERED_MIRROR
decl_stmt|;
if|if
condition|(
operator|!
name|OrderedIndex
operator|.
name|DEFAULT_DIRECTION
operator|.
name|equals
argument_list|(
name|getDirection
argument_list|()
argument_list|)
condition|)
block|{
name|store
operator|=
name|ORDERED_MIRROR_DESCENDING
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|boolean
name|isProperlyConfigured
parameter_list|()
block|{
return|return
name|properlyConfigured
return|;
block|}
annotation|@
name|Override
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|()
block|{
return|return
name|propertyNames
return|;
block|}
annotation|@
name|Override
name|PropertyIndexEditor
name|getChildIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|PropertyIndexEditor
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|OrderedPropertyIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      *       * @return the direction of the index configuration      */
specifier|public
name|OrderDirection
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
block|}
end_class

end_unit

