begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|TestGlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|GlobalNameMapperTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMESPACES
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"jcr"
argument_list|,
literal|"http://www.jcp.org/jcr/1.0"
argument_list|,
literal|"nt"
argument_list|,
literal|"http://www.jcp.org/jcr/nt/1.0"
argument_list|,
literal|"mix"
argument_list|,
literal|"http://www.jcp.org/jcr/mix/1.0"
argument_list|,
literal|"foo"
argument_list|,
literal|"http://www.example.com/foo"
argument_list|,
literal|"quu"
argument_list|,
literal|"http://www.example.com/quu"
argument_list|)
decl_stmt|;
specifier|private
name|NameMapper
name|mapper
init|=
operator|new
name|TestGlobalNameMapper
argument_list|(
name|NAMESPACES
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testEmptyName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mapper
operator|.
name|getJcrName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|mapper
operator|.
name|getOakName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|simpleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|" foo "
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|"foo.bar"
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|simpleNames
operator|.
name|add
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|simpleNames
control|)
block|{
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpandedNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jcrToOak
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{}foo"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{foo"
argument_list|,
literal|"{foo"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{foo}"
argument_list|,
literal|"{foo}"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{0} foo"
argument_list|,
literal|"{0} foo"
argument_list|)
expr_stmt|;
comment|// OAK-509
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{"
argument_list|,
literal|"{"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{http://www.jcp.org/jcr/nt/1.0}base"
argument_list|,
literal|"nt:base"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{http://www.example.com/foo}bar"
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|jcrToOak
operator|.
name|put
argument_list|(
literal|"{http://www.example.com/quu}bar"
argument_list|,
literal|"quu:bar"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jcrName
range|:
name|jcrToOak
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|jcrToOak
operator|.
name|get
argument_list|(
name|jcrName
argument_list|)
argument_list|,
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|jcrName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jcrToOak
operator|.
name|get
argument_list|(
name|jcrName
argument_list|)
argument_list|,
name|mapper
operator|.
name|getOakName
argument_list|(
name|jcrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
literal|"{http://www.example.com/bar}bar"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mapper
operator|.
name|getOakName
argument_list|(
literal|"{http://www.example.com/bar}bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RepositoryException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// successs
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefixedNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prefixed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefixed
operator|.
name|add
argument_list|(
literal|"nt:base"
argument_list|)
expr_stmt|;
name|prefixed
operator|.
name|add
argument_list|(
literal|"foo: bar"
argument_list|)
expr_stmt|;
name|prefixed
operator|.
name|add
argument_list|(
literal|"quu:bar "
argument_list|)
expr_stmt|;
comment|// unknown prefixes are only captured by the NameValidator
name|prefixed
operator|.
name|add
argument_list|(
literal|"unknown:bar"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|prefixed
control|)
block|{
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

