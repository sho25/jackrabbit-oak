begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ConflictHandler
operator|.
name|Resolution
operator|.
name|MERGED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ConflictHandler
operator|.
name|Resolution
operator|.
name|OURS
import|;
end_import

begin_comment
comment|/**  * MergingNodeStateDiff... TODO  */
end_comment

begin_class
class|class
name|MergingNodeStateDiff
implements|implements
name|NodeStateDiff
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MergingNodeStateDiff
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|target
decl_stmt|;
specifier|private
specifier|final
name|ConflictHandler
name|conflictHandler
decl_stmt|;
specifier|private
name|MergingNodeStateDiff
parameter_list|(
name|NodeBuilder
name|target
parameter_list|,
name|ConflictHandler
name|conflictHandler
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|conflictHandler
operator|=
name|conflictHandler
expr_stmt|;
block|}
specifier|static
name|void
name|merge
parameter_list|(
name|NodeState
name|fromState
parameter_list|,
name|NodeState
name|toState
parameter_list|,
specifier|final
name|NodeBuilder
name|target
parameter_list|,
specifier|final
name|ConflictHandler
name|conflictHandler
parameter_list|)
block|{
name|toState
operator|.
name|compareAgainstBaseState
argument_list|(
name|fromState
argument_list|,
operator|new
name|MergingNodeStateDiff
argument_list|(
name|checkNotNull
argument_list|(
name|target
argument_list|)
argument_list|,
name|conflictHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------< NodeStateDiff>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
name|PropertyState
name|p
init|=
name|target
operator|.
name|getProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|resolution
operator|=
name|OURS
expr_stmt|;
block|}
else|else
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|addExistingProperty
argument_list|(
name|target
argument_list|,
name|after
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
name|target
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|before
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"before and after must have the same name"
argument_list|)
expr_stmt|;
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
name|PropertyState
name|p
init|=
name|target
operator|.
name|getProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|changeDeletedProperty
argument_list|(
name|target
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|before
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|resolution
operator|=
name|OURS
expr_stmt|;
block|}
else|else
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|changeChangedProperty
argument_list|(
name|target
argument_list|,
name|after
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
name|target
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
name|PropertyState
name|p
init|=
name|target
operator|.
name|getProperty
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|resolution
operator|=
name|OURS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|deleteDeletedProperty
argument_list|(
name|target
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|deleteChangedProperty
argument_list|(
name|target
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
name|target
operator|.
name|removeProperty
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|resolution
operator|=
name|OURS
expr_stmt|;
block|}
else|else
block|{
name|NodeBuilder
name|n
init|=
name|target
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|resolution
operator|=
name|conflictHandler
operator|.
name|addExistingNode
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|after
argument_list|,
name|n
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
name|addChild
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|changeDeletedNode
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|merge
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|target
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|,
name|conflictHandler
argument_list|)
expr_stmt|;
name|resolution
operator|=
name|MERGED
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
name|addChild
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|ConflictHandler
operator|.
name|Resolution
name|resolution
decl_stmt|;
name|NodeBuilder
name|n
init|=
name|target
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|?
name|target
operator|.
name|child
argument_list|(
name|name
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|deleteDeletedNode
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|before
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
name|resolution
operator|=
name|OURS
expr_stmt|;
block|}
else|else
block|{
name|resolution
operator|=
name|conflictHandler
operator|.
name|deleteChangedNode
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|n
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|resolution
condition|)
block|{
case|case
name|OURS
case|:
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|removeNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|THEIRS
case|:
case|case
name|MERGED
case|:
break|break;
block|}
block|}
comment|//-------------------------------------------------------------<private>---
specifier|private
specifier|static
name|void
name|addChild
parameter_list|(
name|NodeBuilder
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|NodeBuilder
name|child
init|=
name|target
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|addChild
argument_list|(
name|child
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

