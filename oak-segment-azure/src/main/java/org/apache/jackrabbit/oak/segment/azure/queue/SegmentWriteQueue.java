begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|queue
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureSegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentWriteQueue
implements|implements
name|Closeable
block|{
specifier|public
specifier|static
specifier|final
name|int
name|THREADS
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segment.azure.threads"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|QUEUE_SIZE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segment.org.apache.jackrabbit.oak.segment.azure.queue"
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentWriteQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockingDeque
argument_list|<
name|SegmentWriteAction
argument_list|>
name|queue
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|SegmentWriteAction
argument_list|>
name|segmentsByUUID
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|flushLock
decl_stmt|;
specifier|private
specifier|final
name|SegmentConsumer
name|writer
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|shutdown
decl_stmt|;
specifier|private
specifier|final
name|Object
name|brokenMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|broken
decl_stmt|;
specifier|public
name|SegmentWriteQueue
parameter_list|(
name|SegmentConsumer
name|writer
parameter_list|)
block|{
name|this
argument_list|(
name|writer
argument_list|,
name|QUEUE_SIZE
argument_list|,
name|THREADS
argument_list|)
expr_stmt|;
block|}
name|SegmentWriteQueue
parameter_list|(
name|SegmentConsumer
name|writer
parameter_list|,
name|int
name|queueSize
parameter_list|,
name|int
name|threadNo
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|segmentsByUUID
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|flushLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|queue
operator|=
operator|new
name|LinkedBlockingDeque
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadNo
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNo
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|this
operator|::
name|mainLoop
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|submit
argument_list|(
name|this
operator|::
name|emergencyLoop
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mainLoop
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shutdown
condition|)
block|{
try|try
block|{
name|waitWhileBroken
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
break|break;
block|}
name|consume
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentConsumeException
name|e
parameter_list|)
block|{
name|SegmentWriteAction
name|segment
init|=
name|e
operator|.
name|segment
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Can't persist the segment {}"
argument_list|,
name|segment
operator|.
name|getUuid
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|queue
operator|.
name|put
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't re-add the segment {} to the queue. It'll be dropped."
argument_list|,
name|segment
operator|.
name|getUuid
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|consume
parameter_list|()
throws|throws
name|SegmentConsumeException
block|{
name|SegmentWriteAction
name|segment
init|=
literal|null
decl_stmt|;
try|try
block|{
name|segment
operator|=
name|queue
operator|.
name|poll
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Poll from queue interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|consume
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|consume
parameter_list|(
name|SegmentWriteAction
name|segment
parameter_list|)
throws|throws
name|SegmentConsumeException
block|{
try|try
block|{
name|segment
operator|.
name|passTo
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|setBroken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SegmentConsumeException
argument_list|(
name|segment
argument_list|,
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|segmentsByUUID
init|)
block|{
name|segmentsByUUID
operator|.
name|remove
argument_list|(
name|segment
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|segmentsByUUID
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|setBroken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|emergencyLoop
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shutdown
condition|)
block|{
name|waitUntilBroken
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
break|break;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|SegmentWriteAction
name|segmentToRetry
init|=
literal|null
decl_stmt|;
do|do
block|{
try|try
block|{
if|if
condition|(
name|segmentToRetry
operator|==
literal|null
condition|)
block|{
name|consume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|consume
argument_list|(
name|segmentToRetry
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentConsumeException
name|e
parameter_list|)
block|{
name|segmentToRetry
operator|=
name|e
operator|.
name|segment
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Can't persist the segment {}"
argument_list|,
name|segmentToRetry
operator|.
name|getUuid
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shutdown
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Shutdown initiated. The segment {} will be dropped."
argument_list|,
name|segmentToRetry
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|success
operator|&&
operator|!
name|shutdown
condition|)
do|;
block|}
block|}
specifier|public
name|void
name|addToQueue
parameter_list|(
name|AzureSegmentArchiveEntry
name|indexEntry
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|waitWhileBroken
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't accept the new segment - shutdown in progress"
argument_list|)
throw|;
block|}
name|SegmentWriteAction
name|action
init|=
operator|new
name|SegmentWriteAction
argument_list|(
name|indexEntry
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|flushLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|segmentsByUUID
operator|.
name|put
argument_list|(
name|action
operator|.
name|getUuid
argument_list|()
argument_list|,
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|queue
operator|.
name|offer
argument_list|(
name|action
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
condition|)
block|{
name|segmentsByUUID
operator|.
name|remove
argument_list|(
name|action
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't add segment to the queue"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|flushLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|segmentsByUUID
init|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|segmentsByUUID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|segmentsByUUID
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't flush the queue in 1 minute. Queue: {}. Segment map: {}"
argument_list|,
name|queue
argument_list|,
name|segmentsByUUID
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SegmentWriteAction
name|read
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
name|segmentsByUUID
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The write wasn't able to shut down clearly"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|segmentsByUUID
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|boolean
name|isBroken
parameter_list|()
block|{
return|return
name|broken
return|;
block|}
name|int
name|getSize
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|void
name|setBroken
parameter_list|(
name|boolean
name|broken
parameter_list|)
block|{
synchronized|synchronized
init|(
name|brokenMonitor
init|)
block|{
name|this
operator|.
name|broken
operator|=
name|broken
expr_stmt|;
name|brokenMonitor
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitWhileBroken
parameter_list|()
block|{
if|if
condition|(
operator|!
name|broken
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|brokenMonitor
init|)
block|{
while|while
condition|(
name|broken
operator|&&
operator|!
name|shutdown
condition|)
block|{
try|try
block|{
name|brokenMonitor
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|waitUntilBroken
parameter_list|()
block|{
if|if
condition|(
name|broken
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|brokenMonitor
init|)
block|{
while|while
condition|(
operator|!
name|broken
operator|&&
operator|!
name|shutdown
condition|)
block|{
try|try
block|{
name|brokenMonitor
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
interface|interface
name|SegmentConsumer
block|{
name|void
name|consume
parameter_list|(
name|AzureSegmentArchiveEntry
name|indexEntry
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|SegmentConsumeException
extends|extends
name|Exception
block|{
specifier|private
specifier|final
name|SegmentWriteAction
name|segment
decl_stmt|;
specifier|public
name|SegmentConsumeException
parameter_list|(
name|SegmentWriteAction
name|segment
parameter_list|,
name|IOException
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|segment
operator|=
name|segment
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

