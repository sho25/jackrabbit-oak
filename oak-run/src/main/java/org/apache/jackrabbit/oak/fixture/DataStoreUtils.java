begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|TransferManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
operator|.
name|SharedS3DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Extension to {@link DataStoreUtils} to enable S3 / AzureBlob extensions for cleaning and initialization.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Class
name|JR2_S3
init|=
name|SharedS3DataStore
operator|.
name|class
decl_stmt|;
specifier|private
specifier|static
name|Class
name|S3
init|=
name|S3DataStore
operator|.
name|class
decl_stmt|;
specifier|private
specifier|static
name|Class
name|AZURE
init|=
name|AzureDataStore
operator|.
name|class
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isS3DataStore
parameter_list|(
name|String
name|dsName
parameter_list|)
block|{
return|return
operator|(
name|dsName
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dsName
operator|.
name|equals
argument_list|(
name|S3
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|dsName
operator|.
name|equals
argument_list|(
name|JR2_S3
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAzureDataStore
parameter_list|(
name|String
name|dsName
parameter_list|)
block|{
return|return
operator|(
name|dsName
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dsName
operator|.
name|equals
argument_list|(
name|AZURE
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|DataStore
name|configureIfCloudDataStore
parameter_list|(
name|String
name|className
parameter_list|,
name|DataStore
name|ds
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|bucket
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add bucket info
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using bucket [ {} ]"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
if|if
condition|(
name|isS3DataStore
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
comment|// Set the props object
if|if
condition|(
name|S3
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
operator|(
operator|(
name|S3DataStore
operator|)
name|ds
operator|)
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
operator|(
operator|(
name|S3DataStore
operator|)
name|ds
operator|)
operator|.
name|setStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JR2_S3
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
operator|.
name|SharedS3DataStore
operator|)
name|ds
operator|)
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isAzureDataStore
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AzureDataStore
operator|)
name|ds
operator|)
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AzureDataStore
operator|)
name|ds
operator|)
operator|.
name|setStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
comment|/**      * Clean directory and if S3 bucket/Azure container is configured delete that.      *      * @param storeDir the local directory      * @param config the datastore config      * @param bucket the S3 bucket name / Azure container name      * @throws Exception      */
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|(
name|File
name|storeDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|storeDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
name|deleteBucket
argument_list|(
name|bucket
argument_list|,
name|config
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|)
condition|)
block|{
name|deleteAzureContainer
argument_list|(
name|config
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteBucket
parameter_list|(
name|String
name|bucket
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"cleaning bucket ["
operator|+
name|bucket
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|AmazonS3Client
name|s3service
init|=
name|Utils
operator|.
name|openService
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|TransferManager
name|tmx
init|=
operator|new
name|TransferManager
argument_list|(
name|s3service
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3service
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|tmx
operator|.
name|abortMultipartUploads
argument_list|(
name|bucket
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|ObjectListing
name|prevObjectListing
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
while|while
condition|(
name|prevObjectListing
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|deleteList
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|delObjsReq
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|delObjsReq
operator|.
name|setKeys
argument_list|(
name|deleteList
argument_list|)
expr_stmt|;
name|s3service
operator|.
name|deleteObjects
argument_list|(
name|delObjsReq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|prevObjectListing
operator|.
name|isTruncated
argument_list|()
condition|)
break|break;
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevObjectListing
argument_list|)
expr_stmt|;
block|}
block|}
name|s3service
operator|.
name|deleteBucket
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"bucket [ "
operator|+
name|bucket
operator|+
literal|"] cleaned"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"bucket ["
operator|+
name|bucket
operator|+
literal|"] doesn't exists"
argument_list|)
expr_stmt|;
block|}
name|tmx
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|s3service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteAzureContainer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|accountName
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_NAME
argument_list|)
decl_stmt|;
name|String
name|accountKey
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|containerName
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|accountName
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|accountKey
argument_list|)
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"deleting container ["
operator|+
name|containerName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|CloudBlobContainer
name|container
init|=
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|Utils
operator|.
name|getBlobContainer
argument_list|(
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|Utils
operator|.
name|getConnectionString
argument_list|(
name|accountName
argument_list|,
name|accountKey
argument_list|)
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|.
name|deleteIfExists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"container [ "
operator|+
name|containerName
operator|+
literal|"] deleted"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"container ["
operator|+
name|containerName
operator|+
literal|"] doesn't exists"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

