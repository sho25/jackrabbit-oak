begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PersistingDiff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PersistingDiff
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Number of content updates that need to happen before the updates      * are automatically purged to the underlying segments.      */
specifier|private
specifier|static
specifier|final
name|int
name|UPDATE_LIMIT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"upgrade.update.limit"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|SegmentReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|PersistingDiff
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
specifier|private
specifier|final
name|Reporter
name|reporter
decl_stmt|;
annotation|@
name|NotNull
specifier|private
name|MemoryNodeBuilder
name|builder
decl_stmt|;
annotation|@
name|NotNull
specifier|private
specifier|final
name|NodeState
name|base
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|IOException
name|exception
decl_stmt|;
specifier|private
name|long
name|modCount
decl_stmt|;
specifier|private
name|PersistingDiff
parameter_list|(
name|PersistingDiff
name|parent
parameter_list|,
name|String
name|nodeName
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|base
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|parent
operator|.
name|writer
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|parent
operator|.
name|reader
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|parent
operator|.
name|blobStore
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|parent
operator|.
name|reporter
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|checkNotNull
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
specifier|private
name|PersistingDiff
parameter_list|(
name|SegmentWriter
name|writer
parameter_list|,
name|SegmentReader
name|reader
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|base
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
operator|new
name|Reporter
argument_list|()
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|checkNotNull
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
name|SegmentNodeState
name|applyDiffOnNodeState
parameter_list|(
name|FileStore
name|fileStore
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|before
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|after
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|onto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PersistingDiff
argument_list|(
name|fileStore
operator|.
name|getWriter
argument_list|()
argument_list|,
name|fileStore
operator|.
name|getReader
argument_list|()
argument_list|,
name|fileStore
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|onto
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
specifier|private
name|void
name|updated
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|modCount
operator|%
name|UPDATE_LIMIT
operator|==
literal|0
condition|)
block|{
name|RecordId
name|newBaseId
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|newBase
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|blobStore
argument_list|,
name|newBaseId
argument_list|)
decl_stmt|;
name|builder
operator|=
operator|new
name|MemoryNodeBuilder
argument_list|(
name|newBase
argument_list|)
expr_stmt|;
block|}
name|modCount
operator|++
expr_stmt|;
block|}
specifier|private
name|String
name|getPath
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PersistingDiff
name|currentDiff
init|=
name|this
decl_stmt|;
while|while
condition|(
name|currentDiff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentDiff
operator|.
name|nodeName
operator|!=
literal|null
condition|)
block|{
name|segments
operator|.
name|add
argument_list|(
name|currentDiff
operator|.
name|nodeName
argument_list|)
expr_stmt|;
block|}
name|currentDiff
operator|=
name|currentDiff
operator|.
name|parent
expr_stmt|;
block|}
name|segments
operator|=
name|Lists
operator|.
name|reverse
argument_list|(
name|segments
argument_list|)
expr_stmt|;
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|segments
control|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nullable
name|SegmentNodeState
name|diff
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|before
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|after
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|success
condition|)
block|{
name|NodeState
name|nodeState
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|modCount
operator|==
literal|0
operator|||
operator|!
operator|(
name|nodeState
operator|instanceof
name|SegmentNodeState
operator|)
argument_list|)
expr_stmt|;
name|RecordId
name|nodeId
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|nodeState
argument_list|,
name|getStableIdBytes
argument_list|(
name|after
argument_list|)
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|reportNode
argument_list|(
name|this
operator|::
name|getPath
argument_list|)
expr_stmt|;
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|blobStore
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
annotation|@
name|NotNull
name|PropertyState
name|after
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
annotation|@
name|NotNull
name|PropertyState
name|before
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|after
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|builder
operator|.
name|removeProperty
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|SegmentNodeState
name|segmentNodeState
init|=
operator|new
name|PersistingDiff
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|EMPTY_NODE
argument_list|)
operator|.
name|diff
argument_list|(
name|EMPTY_NODE
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentNodeState
operator|!=
literal|null
condition|)
block|{
name|updated
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|segmentNodeState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|before
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|SegmentNodeState
name|compacted
init|=
operator|new
name|PersistingDiff
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|compacted
operator|!=
literal|null
condition|)
block|{
name|updated
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|compacted
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
try|try
block|{
name|updated
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|Buffer
name|getStableIdBytes
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
return|return
operator|(
operator|(
name|SegmentNodeState
operator|)
name|state
operator|)
operator|.
name|getStableIdBytes
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Reporter
block|{
specifier|private
name|long
name|count
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|reportNode
parameter_list|(
name|Supplier
argument_list|<
name|String
argument_list|>
name|pathSupplier
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
operator|&&
name|count
operator|%
name|RepositorySidegrade
operator|.
name|LOG_NODE_COPY
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying node {}: {}"
argument_list|,
name|count
argument_list|,
name|pathSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

