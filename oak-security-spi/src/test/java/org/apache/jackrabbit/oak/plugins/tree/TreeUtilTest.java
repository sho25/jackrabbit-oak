begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TreeUtilTest
extends|extends
name|AbstractTreeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|nonExisting
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStrings
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|nonExisting
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetString
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringWithDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBoolean
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNames
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NumberFormatException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetLongInvalidConversion
parameter_list|()
block|{
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoCreateProperty
parameter_list|()
block|{
name|Tree
name|propDef
init|=
name|child
decl_stmt|;
comment|// TODO
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
literal|"anyName"
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
argument_list|)
expr_stmt|;
name|UUID
operator|.
name|fromString
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsReadOnlyTree
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|isReadOnlyTree
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

