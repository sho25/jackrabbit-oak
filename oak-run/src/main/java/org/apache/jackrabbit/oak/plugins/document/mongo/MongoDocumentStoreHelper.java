begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocumentHelper
operator|.
name|commitRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocumentHelper
operator|.
name|getLocalCommitRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocumentHelper
operator|.
name|getLocalMap
import|;
end_import

begin_comment
comment|/**  * Helper class to access package private methods on MongoDocumentStore.  */
end_comment

begin_class
specifier|public
class|class
name|MongoDocumentStoreHelper
block|{
specifier|public
specifier|static
name|void
name|repair
parameter_list|(
name|MongoDocumentStore
name|store
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|DBCollection
name|col
init|=
name|store
operator|.
name|getDBCollection
argument_list|(
name|NODES
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No document for path "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|Revision
argument_list|>
name|changes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|doc
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPropertyName
argument_list|(
name|key
argument_list|)
operator|||
name|NodeDocument
operator|.
name|isDeletedEntry
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|changes
operator|.
name|addAll
argument_list|(
name|getLocalMap
argument_list|(
name|doc
argument_list|,
name|key
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commitRoot
init|=
name|newTreeMap
argument_list|(
name|getLocalCommitRoot
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commitRoot
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|changes
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nothing to repair on "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|Number
name|modCount
init|=
name|doc
operator|.
name|getModCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|modCount
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Document does not have a modCount "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|is
argument_list|(
name|id
argument_list|)
operator|.
name|and
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
operator|.
name|is
argument_list|(
name|modCount
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|DBObject
name|cr
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|commitRoot
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cr
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"$set"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|commitRoot
argument_list|()
argument_list|,
name|cr
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"$inc"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|col
operator|.
name|update
argument_list|(
name|query
argument_list|,
name|update
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getN
argument_list|()
operator|==
literal|1
condition|)
block|{
name|int
name|num
init|=
name|getLocalCommitRoot
argument_list|(
name|doc
argument_list|)
operator|.
name|size
argument_list|()
operator|-
name|commitRoot
operator|.
name|size
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed "
operator|+
name|num
operator|+
literal|" _commitRoot entries on "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to repair "
operator|+
name|path
operator|+
literal|" (concurrent update)."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

