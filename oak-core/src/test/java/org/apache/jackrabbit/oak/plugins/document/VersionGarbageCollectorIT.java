begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|size
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|HOURS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|Fixture
operator|.
name|DOCUMENT_MEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|Fixture
operator|.
name|DOCUMENT_NS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|Fixture
operator|.
name|DOCUMENT_RDB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|getFixtures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|PREV_SPLIT_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|NO_BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Atomics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VersionGarbageCollectorIT
block|{
specifier|private
name|DocumentStoreFixture
name|fixture
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|store
decl_stmt|;
specifier|private
name|VersionGarbageCollector
name|gc
decl_stmt|;
specifier|private
name|ExecutorService
name|execService
decl_stmt|;
specifier|public
name|VersionGarbageCollectorIT
parameter_list|(
name|DocumentStoreFixture
name|fixture
parameter_list|)
block|{
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|DocumentStoreFixture
name|mongo
init|=
operator|new
name|DocumentStoreFixture
operator|.
name|MongoFixture
argument_list|()
decl_stmt|;
if|if
condition|(
name|getFixtures
argument_list|()
operator|.
name|contains
argument_list|(
name|DOCUMENT_NS
argument_list|)
operator|&&
name|mongo
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mongo
block|}
argument_list|)
expr_stmt|;
block|}
name|DocumentStoreFixture
name|rdb
init|=
operator|new
name|DocumentStoreFixture
operator|.
name|RDBFixture
argument_list|()
decl_stmt|;
if|if
condition|(
name|getFixtures
argument_list|()
operator|.
name|contains
argument_list|(
name|DOCUMENT_RDB
argument_list|)
operator|&&
name|rdb
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|rdb
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fixtures
operator|.
name|isEmpty
argument_list|()
operator|||
name|getFixtures
argument_list|()
operator|.
name|contains
argument_list|(
name|DOCUMENT_MEM
argument_list|)
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|DocumentStoreFixture
operator|.
name|MemoryFixture
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|execService
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setLeaseCheck
argument_list|(
literal|false
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|fixture
operator|.
name|createDocumentStore
argument_list|()
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|gc
operator|=
name|store
operator|.
name|getVersionGarbageCollector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|execService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|execService
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|fixture
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcIgnoredForCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expiryTime
init|=
literal|100
decl_stmt|,
name|maxAge
init|=
literal|20
decl_stmt|;
name|Revision
name|cp
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|expiryTime
argument_list|)
argument_list|)
decl_stmt|;
comment|//Fast forward time to future but before expiry of checkpoint
name|clock
operator|.
name|waitUntil
argument_list|(
name|cp
operator|.
name|getTimestamp
argument_list|()
operator|+
name|expiryTime
operator|-
name|maxAge
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|ignoredGCDueToCheckPoint
argument_list|)
expr_stmt|;
comment|//Fast forward time to future such that checkpoint get expired
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|expiryTime
operator|+
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"GC should be performed"
argument_list|,
name|stats
operator|.
name|ignoredGCDueToCheckPoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGCDeletedDocument
parameter_list|()
throws|throws
name|Exception
block|{
comment|//1. Create nodes
name|NodeBuilder
name|b1
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hours
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|//1. Go past GC age and check no GC done as nothing deleted
name|clock
operator|.
name|waitUntil
argument_list|(
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
operator|+
name|maxAge
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
comment|//Remove x/y
name|NodeBuilder
name|b2
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|child
argument_list|(
literal|"y"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|//2. Check that a deleted doc is not collected before
comment|//maxAge
comment|//Clock cannot move back (it moved forward in #1) so double the maxAge
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|stats
operator|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
operator|*
literal|2
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
comment|//3. Check that deleted doc does get collected post maxAge
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
operator|*
literal|2
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|stats
operator|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
operator|*
literal|2
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
comment|//4. Check that a revived doc (deleted and created again) does not get gc
name|NodeBuilder
name|b3
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b3
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b3
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeBuilder
name|b4
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b4
operator|.
name|child
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b4
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
operator|*
literal|2
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|stats
operator|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
operator|*
literal|2
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|updateResurrectedGCCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcSplitDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|gcSplitDocsInternal
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcLongPathSplitDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|gcSplitDocsInternal
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"sub"
argument_list|,
literal|120
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|gcSplitDocsInternal
parameter_list|(
name|String
name|subNodeName
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hrs
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
name|subNodeName
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|child
argument_list|(
name|subNodeName
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|//Commit on a node which has a child and where the commit root
comment|// is parent
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|b1
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//This updates a middle node i.e. one which has child bar
comment|//Should result in SplitDoc of type PROP_COMMIT_ONLY
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
name|subNodeName
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|//This should result in SplitDoc of type DEFAULT_NO_CHILD
name|b1
operator|.
name|child
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|child
argument_list|(
name|subNodeName
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|previousDocTestFoo
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|getDoc
argument_list|(
literal|"/test/"
operator|+
name|subNodeName
argument_list|)
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|previousDocTestFoo2
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|getDoc
argument_list|(
literal|"/test2/"
operator|+
name|subNodeName
argument_list|)
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|previousDocTestFoo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|previousDocTestFoo2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|COMMIT_ROOT_ONLY
argument_list|,
name|previousDocTestFoo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|DEFAULT_LEAF
argument_list|,
name|previousDocTestFoo2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
comment|//Previous doc should be removed
name|assertNull
argument_list|(
name|getDoc
argument_list|(
name|previousDocTestFoo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getDoc
argument_list|(
name|previousDocTestFoo2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Following would not work for Mongo as the delete happened on the server side
comment|//And entries from cache are not evicted
comment|//assertTrue(ImmutableList.copyOf(getDoc("/test2/foo").getAllPreviousDocs()).isEmpty());
block|}
comment|// OAK-1729
annotation|@
name|Test
specifier|public
name|void
name|gcIntermediateDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hrs
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// adding the test node will cause the commit root to be placed
comment|// on the root document, because the children flag is set on the
comment|// root document
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getDoc
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// setting the test property afterwards will use the new test document
comment|// as the commit root. this what we want for the test.
name|b1
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|getDoc
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PREV_SPLIT_FACTOR
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_REVS_THRESHOLD
condition|;
name|j
operator|++
control|)
block|{
name|b1
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
operator|*
name|NUM_REVS_THRESHOLD
operator|+
name|j
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
comment|// trigger another split, now that we have 10 previous docs
comment|// this will create an intermediate previous doc
name|store
operator|.
name|addSplitCandidate
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|prevRanges
init|=
name|getDoc
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|getPreviousRanges
argument_list|()
decl_stmt|;
name|boolean
name|hasIntermediateDoc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Range
argument_list|>
name|entry
range|:
name|prevRanges
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasIntermediateDoc
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Test data does not have intermediate previous docs"
argument_list|,
name|hasIntermediateDoc
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|test
init|=
name|getDoc
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|getNodeAtRevision
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|hasProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1779
annotation|@
name|Test
specifier|public
name|void
name|cacheConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hrs
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"test-"
operator|+
name|i
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|entry
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
name|b1
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|getChildNode
argument_list|(
literal|"test-7"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|names
operator|.
name|remove
argument_list|(
literal|"test-7"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|children
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|names
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1793
annotation|@
name|Test
specifier|public
name|void
name|gcPrevWithMostRecentModification
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hrs
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_REVS_THRESHOLD
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|getDoc
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|state
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1791
annotation|@
name|Test
specifier|public
name|void
name|gcDefaultLeafSplitDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
comment|// simulate continuous writes once a second for one day
comment|// collect garbage older than one hour
name|int
name|hours
init|=
literal|24
decl_stmt|;
if|if
condition|(
name|fixture
operator|instanceof
name|DocumentStoreFixture
operator|.
name|MongoFixture
condition|)
block|{
comment|// only run for 6 hours on MongoDB to
comment|// keep time to run on a reasonable level
name|hours
operator|=
literal|6
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3600
operator|*
name|hours
condition|;
name|i
operator|++
control|)
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|start
operator|+
name|i
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
comment|// trigger GC twice an hour
if|if
condition|(
name|i
operator|%
literal|1800
operator|==
literal|0
condition|)
block|{
name|gc
operator|.
name|gc
argument_list|(
literal|1
argument_list|,
name|HOURS
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|numPrevDocs
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"too many previous docs: "
operator|+
name|numPrevDocs
argument_list|,
name|numPrevDocs
operator|<
literal|70
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|numRevs
init|=
name|size
argument_list|(
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"too many revisions: "
operator|+
name|numRevs
argument_list|,
name|numRevs
operator|<
literal|6000
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2778
annotation|@
name|Test
specifier|public
name|void
name|gcWithConcurrentModification
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|DocumentStore
name|ds
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
comment|// create test content
name|createTestNode
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|createTestNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
comment|// remove again
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// wait one hour
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|Queues
operator|.
name|newSynchronousQueue
argument_list|()
decl_stmt|;
name|VersionGCSupport
name|gcSupport
init|=
operator|new
name|VersionGCSupport
argument_list|(
name|store
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
name|long
name|lastModifiedTime
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|super
operator|.
name|getPossiblyDeletedDocs
argument_list|(
name|lastModifiedTime
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
try|try
block|{
name|docs
operator|.
name|put
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|VersionGarbageCollector
name|gc
init|=
operator|new
name|VersionGarbageCollector
argument_list|(
name|store
argument_list|,
name|gcSupport
argument_list|)
decl_stmt|;
comment|// start GC -> will try to remove /foo and /bar
name|Future
argument_list|<
name|VersionGCStats
argument_list|>
name|f
init|=
name|execService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|VersionGCStats
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VersionGCStats
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|gc
operator|.
name|gc
argument_list|(
literal|30
argument_list|,
name|MINUTES
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|docs
operator|.
name|take
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// recreate node, which hasn't been removed yet
name|name
operator|=
name|name
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
condition|?
literal|"bar"
else|:
literal|"foo"
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// loop over child node entries -> will populate nodeChildrenCache
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|cne
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// invalidate cached DocumentNodeState
name|DocumentNodeState
name|state
init|=
operator|(
name|DocumentNodeState
operator|)
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|store
operator|.
name|invalidateNodeCache
argument_list|(
name|state
operator|.
name|getPath
argument_list|()
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getLastRevision
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|docs
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
comment|// read children again after GC finished
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
operator|+
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|f
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
block|}
comment|// OAK-4819
annotation|@
name|Test
specifier|public
name|void
name|malformedId
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|1
decl_stmt|;
comment|//hrs
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// remove again
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// add a document with a malformed id
name|String
name|id
init|=
literal|"42"
decl_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setDeletedOnce
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|op
argument_list|,
name|store
operator|.
name|newRevision
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|create
argument_list|(
name|NODES
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|HOURS
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
operator|+
name|delta
argument_list|)
expr_stmt|;
comment|// gc must not fail
name|VersionGCStats
name|stats
init|=
name|gc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|HOURS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidateCacheOnMissingPreviousDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|fixture
operator|.
name|hasSinglePersistence
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentStore
name|ds
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|RevisionVector
name|head
init|=
name|store
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|,
name|store
argument_list|,
name|head
argument_list|,
name|NO_BINARY
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|ds
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|foo
init|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|Long
name|modCount
init|=
name|foo
operator|.
name|getModCount
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|modCount
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prevIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|foo
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|NodeDocument
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// run gc on another document node store
name|DocumentStore
name|ds2
init|=
name|fixture
operator|.
name|createDocumentStore
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns2
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|ds2
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
try|try
block|{
name|VersionGarbageCollector
name|gc
init|=
name|ns2
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
comment|// collect about half of the changes
name|gc
operator|.
name|gc
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ns2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|// evict prev docs from cache and force DocumentStore
comment|// to check with storage again
for|for
control|(
name|String
name|id
range|:
name|prevIds
control|)
block|{
name|ds
operator|.
name|invalidateCache
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|foo
operator|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|Iterators
operator|.
name|size
argument_list|(
name|foo
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// foo must now reflect state after GC
name|foo
operator|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|modCount
argument_list|,
name|foo
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cancelGCBeforeFirstPhase
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestNode
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|VersionGarbageCollector
argument_list|>
name|gcRef
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
name|VersionGCSupport
name|gcSupport
init|=
operator|new
name|VersionGCSupport
argument_list|(
name|store
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
name|long
name|lastModifiedTime
parameter_list|)
block|{
comment|// cancel as soon as it runs
name|gcRef
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getPossiblyDeletedDocs
argument_list|(
name|lastModifiedTime
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|gcRef
operator|.
name|set
argument_list|(
operator|new
name|VersionGarbageCollector
argument_list|(
name|store
argument_list|,
name|gcSupport
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gcRef
operator|.
name|get
argument_list|()
operator|.
name|gc
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|canceled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|intermediateSplitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cancelGCAfterFirstPhase
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestNode
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|VersionGarbageCollector
argument_list|>
name|gcRef
init|=
name|Atomics
operator|.
name|newReference
argument_list|()
decl_stmt|;
name|VersionGCSupport
name|gcSupport
init|=
operator|new
name|VersionGCSupport
argument_list|(
name|store
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
specifier|final
name|long
name|lastModifiedTime
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
specifier|private
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|candidates
argument_list|(
name|lastModifiedTime
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeDocument
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
comment|// cancel when we reach the end
name|gcRef
operator|.
name|get
argument_list|()
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|candidates
parameter_list|(
name|long
name|lastModifiedTime
parameter_list|)
block|{
return|return
name|super
operator|.
name|getPossiblyDeletedDocs
argument_list|(
name|lastModifiedTime
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|gcRef
operator|.
name|set
argument_list|(
operator|new
name|VersionGarbageCollector
argument_list|(
name|store
argument_list|,
name|gcSupport
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGCStats
name|stats
init|=
name|gcRef
operator|.
name|get
argument_list|()
operator|.
name|gc
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|canceled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|deletedLeafDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|intermediateSplitDocGCCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|splitDocGCCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTestNode
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|DocumentStore
name|ds
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|id
argument_list|)
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|store
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|store
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|merge
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeDocument
name|getDoc
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|store
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

