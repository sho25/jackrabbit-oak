begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_class
specifier|public
class|class
name|GlobbingPathHelper
block|{
specifier|public
specifier|static
name|String
name|globAsRegex
parameter_list|(
name|String
name|patternWithGlobs
parameter_list|)
block|{
if|if
condition|(
name|patternWithGlobs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|patternWithGlobs
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
name|patternWithGlobs
return|;
block|}
name|String
index|[]
name|starStarParts
init|=
name|patternWithGlobs
operator|.
name|split
argument_list|(
literal|"\\*\\*"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\Q"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|starStarParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
comment|// the '**' regexp equivalent:
comment|// - anything not including '/'
comment|// - followed by ('/' plus anything not including '/') repeated
name|sb
operator|.
name|append
argument_list|(
literal|"\\E[^/]*(/[^/]*)*\\Q"
argument_list|)
expr_stmt|;
block|}
name|String
name|part
init|=
name|starStarParts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|starStarParts
operator|.
name|length
operator|>
literal|1
operator|&&
name|part
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|part
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|starStarParts
operator|.
name|length
operator|-
literal|1
operator|&&
name|part
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|part
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|part
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|part
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|"\\E[^/]*\\Q"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\\E"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

