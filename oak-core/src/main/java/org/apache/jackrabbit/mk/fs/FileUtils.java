begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This utility class contains utility functions that use the file system  * abstraction.  */
end_comment

begin_class
specifier|public
class|class
name|FileUtils
block|{
specifier|private
name|FileUtils
parameter_list|()
block|{     }
comment|/**      * Checks if a file exists.      * This method is similar to Java 7<code>java.nio.file.Path.exists</code>.      *      * @param fileName the file name      * @return true if it exists      */
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
comment|/**      * Create a directory (all required parent directories must already exist).      * This method is similar to Java 7<code>java.nio.file.Path.createDirectory</code>.      *      * @param directoryName the directory name      */
specifier|public
specifier|static
name|void
name|createDirectory
parameter_list|(
name|String
name|directoryName
parameter_list|)
throws|throws
name|IOException
block|{
name|FilePath
operator|.
name|get
argument_list|(
name|directoryName
argument_list|)
operator|.
name|createDirectory
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a new file.      * This method is similar to Java 7<code>java.nio.file.Path.createFile</code>, but returns      * false instead of throwing a exception if the file already existed.      *      * @param fileName the file name      * @return true if creating was successful      */
specifier|public
specifier|static
name|boolean
name|createFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|createFile
argument_list|()
return|;
block|}
comment|/**      * Delete a file or directory if it exists.      * Directories may only be deleted if they are empty.      * This method is similar to Java 7<code>java.nio.file.Path.deleteIfExists</code>.      *      * @param path the file or directory name      */
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FilePath
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the canonical file or directory name.      * This method is similar to Java 7<code>java.nio.file.Path.toRealPath</code>.      *      * @param fileName the file name      * @return the normalized file name      */
specifier|public
specifier|static
name|String
name|toRealPath
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|toRealPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get the parent directory of a file or directory.      * This method returns null if there is no parent.      * This method is similar to Java 7<code>java.nio.file.Path.getParent</code>.      *      * @param fileName the file or directory name      * @return the parent directory name      */
specifier|public
specifier|static
name|String
name|getParent
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|FilePath
name|p
init|=
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Check if the file name includes a path.      * This method is similar to Java 7<code>java.nio.file.Path.isAbsolute</code>.      *      * @param fileName the file name      * @return if the file name is absolute      */
specifier|public
specifier|static
name|boolean
name|isAbsolute
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|isAbsolute
argument_list|()
return|;
block|}
comment|/**      * Rename a file if this is allowed.      * This method is similar to Java 7<code>java.nio.file.Path.moveTo</code>.      *      * @param oldName the old fully qualified file name      * @param newName the new fully qualified file name      */
specifier|public
specifier|static
name|void
name|moveTo
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|IOException
block|{
name|FilePath
operator|.
name|get
argument_list|(
name|oldName
argument_list|)
operator|.
name|moveTo
argument_list|(
name|FilePath
operator|.
name|get
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the file or directory name (the last element of the path).      * This method is similar to Java 7<code>java.nio.file.Path.getName</code>.      *      * @param path the directory and file name      * @return just the file name      */
specifier|public
specifier|static
name|String
name|getName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * List the files and directories in the given directory.      * This method is similar to Java 7<code>java.nio.file.Path.newDirectoryStream</code>.      *      * @param path the directory      * @return the list of fully qualified file names      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|newDirectoryStream
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FilePath
argument_list|>
name|list
init|=
name|FilePath
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|newDirectoryStream
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get the last modified date of a file.      * This method is similar to Java 7      *<code>java.nio.file.attribute.Attributes.readBasicFileAttributes(file).lastModified().toMillis()</code>      *      * @param fileName the file name      * @return the last modified date      */
specifier|public
specifier|static
name|long
name|lastModified
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|lastModified
argument_list|()
return|;
block|}
comment|/**      * Get the size of a file in bytes      * This method is similar to Java 7      *<code>java.nio.file.attribute.Attributes.readBasicFileAttributes(file).size()</code>      *      * @param fileName the file name      * @return the size in bytes      */
specifier|public
specifier|static
name|long
name|size
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Check if it is a file or a directory.      *<code>java.nio.file.attribute.Attributes.readBasicFileAttributes(file).isDirectory()</code>      *      * @param fileName the file or directory name      * @return true if it is a directory      */
specifier|public
specifier|static
name|boolean
name|isDirectory
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
comment|/**      * Open a random access file object.      * This method is similar to Java 7<code>java.nio.channels.FileChannel.open</code>.      *      * @param fileName the file name      * @param mode the access mode. Supported are r, rw, rws, rwd      * @return the file object      */
specifier|public
specifier|static
name|FileChannel
name|open
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|open
argument_list|(
name|mode
argument_list|)
return|;
block|}
comment|/**      * Create an input stream to read from the file.      * This method is similar to Java 7<code>java.nio.file.Path.newInputStream</code>.      *      * @param fileName the file name      * @return the input stream      */
specifier|public
specifier|static
name|InputStream
name|newInputStream
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|newInputStream
argument_list|()
return|;
block|}
comment|/**      * Create an output stream to write into the file.      * This method is similar to Java 7<code>java.nio.file.Path.newOutputStream</code>.      *      * @param fileName the file name      * @param append if true, the file will grow, if false, the file will be      *            truncated first      * @return the output stream      */
specifier|public
specifier|static
name|OutputStream
name|newOutputStream
parameter_list|(
name|String
name|fileName
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|newOutputStream
argument_list|(
name|append
argument_list|)
return|;
block|}
comment|/**      * Check if the file is writable.      * This method is similar to Java 7      *<code>java.nio.file.Path.checkAccess(AccessMode.WRITE)</code>      *      * @param fileName the file name      * @return if the file is writable      */
specifier|public
specifier|static
name|boolean
name|canWrite
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|canWrite
argument_list|()
return|;
block|}
comment|// special methods =======================================
comment|/**      * Disable the ability to write. The file can still be deleted afterwards.      *      * @param fileName the file name      * @return true if the call was successful      */
specifier|public
specifier|static
name|boolean
name|setReadOnly
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|setReadOnly
argument_list|()
return|;
block|}
comment|// utility methods =======================================
comment|/**      * Delete a directory or file and all subdirectories and files.      *      * @param path the path      * @param tryOnly whether errors should  be ignored      */
specifier|public
specifier|static
name|void
name|deleteRecursive
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|tryOnly
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|newDirectoryStream
argument_list|(
name|path
argument_list|)
control|)
block|{
name|deleteRecursive
argument_list|(
name|s
argument_list|,
name|tryOnly
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tryOnly
condition|)
block|{
name|tryDelete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create the directory and all required parent directories.      *      * @param dir the directory name      */
specifier|public
specifier|static
name|void
name|createDirectories
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create directory, "
operator|+
literal|"because a file with the same name already exists: "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|parent
init|=
name|getParent
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|createDirectories
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copy a file from one directory to another, or to another file.      *      * @param original the original file name      * @param copy the file name of the copy      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|String
name|original
parameter_list|,
name|String
name|copy
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|newInputStream
argument_list|(
name|original
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
name|newOutputStream
argument_list|(
name|copy
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Try to delete a file (ignore errors).      *      * @param fileName the file name      * @return true if it worked      */
specifier|public
specifier|static
name|boolean
name|tryDelete
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
name|FilePath
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Create a new temporary file.      *      * @param prefix the prefix of the file name (including directory name if      *            required)      * @param suffix the suffix      * @param deleteOnExit if the file should be deleted when the virtual      *            machine exists      * @param inTempDir if the file should be stored in the temporary directory      * @return the name of the created file      */
specifier|public
specifier|static
name|String
name|createTempFile
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|,
name|boolean
name|inTempDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FilePath
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
operator|.
name|createTempFile
argument_list|(
name|suffix
argument_list|,
name|deleteOnExit
argument_list|,
name|inTempDir
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Fully read from the file. This will read all remaining bytes,      * or throw an EOFException if not successful.      *      * @param channel the file channel      * @param dst the byte buffer      */
specifier|public
specifier|static
name|void
name|readFully
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
name|int
name|r
init|=
name|channel
operator|.
name|read
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
block|}
do|while
condition|(
name|dst
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
do|;
block|}
comment|/**      * Fully write to the file. This will write all remaining bytes.      *      * @param channel the file channel      * @param src the byte buffer      */
specifier|public
specifier|static
name|void
name|writeFully
parameter_list|(
name|FileChannel
name|channel
parameter_list|,
name|ByteBuffer
name|src
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
name|channel
operator|.
name|write
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|src
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
do|;
block|}
block|}
end_class

end_unit

