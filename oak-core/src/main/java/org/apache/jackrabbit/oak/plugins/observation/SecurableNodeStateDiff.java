begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RecursingNodeStateDiff
import|;
end_import

begin_comment
comment|/**  * Base class for {@code NodeStateDiff} implementations that can be secured.  * That is, its call back methods are only called when its receiver has sufficient  * rights to access the respective items.  *<p>  * Implementors must implement the {@link #create(SecurableNodeStateDiff, String, NodeState, NodeState)}  * factory method for creating {@code SecurableNodeStateDiff} instances for child nodes.  * Further implementors should override {@link #canRead(PropertyState, PropertyState)} and  * {@link #canRead(String, NodeState, NodeState)} and determine whether the passed states are  * accessible and the respective callbacks should thus be invoked. Finally implementors should override,  * {@link #secureBefore(String, NodeState)}, and {@link #secureAfter(String, NodeState)}} wrapping the  * passed node state into a node state that restricts access to accessible child nodes and properties.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SecurableNodeStateDiff
implements|implements
name|NodeStateDiff
block|{
comment|/**      * Parent diff      */
specifier|private
specifier|final
name|SecurableNodeStateDiff
name|parent
decl_stmt|;
comment|/**      * Unsecured diff this secured diff delegates to after it has determined      * that the items pertaining to a call back are accessible.      */
specifier|private
name|RecursingNodeStateDiff
name|diff
decl_stmt|;
comment|/**      * Deferred {@link #childNodeChanged(String, NodeState, NodeState)} calls.      * Such calls are deferred until an accessible change in the respective sub tree      * is detected, as otherwise we might leak information restricted by access control      * to the call back.      */
specifier|private
name|Deferred
name|deferred
init|=
name|Deferred
operator|.
name|EMPTY
decl_stmt|;
specifier|private
name|SecurableNodeStateDiff
parameter_list|(
name|SecurableNodeStateDiff
name|parent
parameter_list|,
name|RecursingNodeStateDiff
name|diff
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
block|}
comment|/**      * Create a new child instance      * @param parent  parent of this instance      */
specifier|protected
name|SecurableNodeStateDiff
parameter_list|(
name|SecurableNodeStateDiff
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|RecursingNodeStateDiff
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance wrapping a unsecured diff.      * @param diff  unsecured diff      */
specifier|protected
name|SecurableNodeStateDiff
parameter_list|(
name|RecursingNodeStateDiff
name|diff
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
comment|/**      * Factory method for creating {@code SecurableNodeStateDiff} instances for child nodes.      * @param parent  parent diff      * @param name    name of the child node      * @param before  before state of the child node      * @param after   after state of the child node      * @return  {@code SecurableNodeStateDiff} for the child node {@code name}.      */
annotation|@
name|CheckForNull
specifier|protected
specifier|abstract
name|SecurableNodeStateDiff
name|create
parameter_list|(
name|SecurableNodeStateDiff
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
function_decl|;
comment|/**      * Determine whether a property is accessible      * @param before  before state of the property      * @param after   after state of the property      * @return  {@code true} if accessible, {@code false} otherwise.      */
specifier|protected
name|boolean
name|canRead
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Determine whether a node is accessible      * @param before  before state of the node      * @param after   after state of the node      * @return  {@code true} if accessible, {@code false} otherwise.      */
specifier|protected
name|boolean
name|canRead
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Secure the before state of a child node such that it only provides      * accessible child nodes and properties.      * @param name       name of the child node      * @param nodeState  before state of the child node      * @return  secured before state      */
annotation|@
name|Nonnull
specifier|protected
name|NodeState
name|secureBefore
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|nodeState
return|;
block|}
comment|/**      * Secure the after state of a child node such that it only provides      * accessible child nodes and properties.      * @param name       name of the child node      * @param nodeState  after state of the child node      * @return  secured after state      */
annotation|@
name|Nonnull
specifier|protected
name|NodeState
name|secureAfter
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|nodeState
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|canRead
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
condition|)
block|{
return|return
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
return|return
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|before
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|after
argument_list|)
condition|)
block|{
return|return
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|secureAfter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|before
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
block|{
specifier|final
name|SecurableNodeStateDiff
name|childDiff
init|=
name|create
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDiff
operator|==
literal|null
condition|)
block|{
comment|// Continue with siblings but don't decent into this subtree
return|return
literal|true
return|;
block|}
comment|// Defer call back until accessible changes in the subtree are found
name|deferred
operator|=
operator|new
name|Deferred
argument_list|()
block|{
annotation|@
name|Override
name|boolean
name|call
parameter_list|()
block|{
if|if
condition|(
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|secureBefore
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|,
name|secureAfter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
condition|)
block|{
name|childDiff
operator|.
name|diff
operator|=
name|diff
operator|.
name|createChildDiff
argument_list|(
name|name
argument_list|,
name|secureBefore
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|,
name|secureAfter
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
expr_stmt|;
return|return
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|childDiff
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
name|canRead
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
name|applyDeferred
argument_list|()
operator|&&
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|secureBefore
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|boolean
name|applyDeferred
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
operator|||
name|parent
operator|.
name|deferred
operator|.
name|apply
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< Deferred>---
comment|/**      * A deferred method call implementing call by need semantics.      */
specifier|private
specifier|abstract
specifier|static
class|class
name|Deferred
block|{
specifier|public
specifier|static
specifier|final
name|Deferred
name|EMPTY
init|=
operator|new
name|Deferred
argument_list|()
block|{
annotation|@
name|Override
name|boolean
name|call
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Boolean
name|result
decl_stmt|;
name|boolean
name|apply
parameter_list|()
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|call
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|abstract
name|boolean
name|call
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

