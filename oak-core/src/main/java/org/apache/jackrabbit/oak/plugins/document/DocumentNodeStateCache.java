begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_interface
specifier|public
interface|interface
name|DocumentNodeStateCache
block|{
name|DocumentNodeStateCache
name|NOOP
init|=
operator|new
name|DocumentNodeStateCache
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeStateCacheEntry
name|getDocumentNodeState
parameter_list|(
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|RevisionVector
name|rootRevision
parameter_list|,
name|RevisionVector
name|parentLastRev
parameter_list|)
block|{
return|return
name|UNKNOWN
return|;
block|}
block|}
decl_stmt|;
name|NodeStateCacheEntry
name|MISSING
init|=
operator|new
name|NodeStateCacheEntry
argument_list|(
name|NodeStateCacheEntry
operator|.
name|EntryType
operator|.
name|MISSING
argument_list|)
decl_stmt|;
name|NodeStateCacheEntry
name|UNKNOWN
init|=
operator|new
name|NodeStateCacheEntry
argument_list|(
name|NodeStateCacheEntry
operator|.
name|EntryType
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
comment|/**      * Get the node for the given path and revision.      *      * @param path the path of the node.      * @param rootRevision      * @param readRevision the read revision.      * @return the node or {@link MISSING} if no state is there for given path and revision or {@link UNKNOWN} if      * cache does not have any knowledge of nodeState for given parameters      */
annotation|@
name|Nonnull
name|NodeStateCacheEntry
name|getDocumentNodeState
parameter_list|(
name|String
name|path
parameter_list|,
name|RevisionVector
name|rootRevision
parameter_list|,
name|RevisionVector
name|parentLastRev
parameter_list|)
function_decl|;
class|class
name|NodeStateCacheEntry
block|{
specifier|private
enum|enum
name|EntryType
block|{
name|FOUND
block|,
name|MISSING
block|,
name|UNKNOWN
block|}
specifier|private
specifier|final
name|AbstractDocumentNodeState
name|state
decl_stmt|;
specifier|private
specifier|final
name|EntryType
name|entryType
decl_stmt|;
specifier|public
name|NodeStateCacheEntry
parameter_list|(
name|AbstractDocumentNodeState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|entryType
operator|=
name|EntryType
operator|.
name|FOUND
expr_stmt|;
block|}
specifier|private
name|NodeStateCacheEntry
parameter_list|(
name|EntryType
name|entryType
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|entryType
operator|=
name|entryType
expr_stmt|;
block|}
specifier|public
name|AbstractDocumentNodeState
name|getState
parameter_list|()
block|{
name|checkState
argument_list|(
name|entryType
operator|==
name|EntryType
operator|.
name|FOUND
argument_list|,
literal|"Cannot read state from an entry of type [%s]"
argument_list|,
name|entryType
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|public
name|boolean
name|isUnknown
parameter_list|()
block|{
return|return
name|entryType
operator|==
name|EntryType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|boolean
name|isMissing
parameter_list|()
block|{
return|return
name|entryType
operator|==
name|EntryType
operator|.
name|MISSING
return|;
block|}
specifier|public
name|boolean
name|isFound
parameter_list|()
block|{
return|return
name|entryType
operator|==
name|EntryType
operator|.
name|FOUND
return|;
block|}
block|}
block|}
end_interface

end_unit

