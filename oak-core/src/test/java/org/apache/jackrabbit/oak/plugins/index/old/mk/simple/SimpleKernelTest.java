begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
operator|.
name|SimpleKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * {@link MicroKernel} test cases that currently only work against the  * {@link SimpleKernelImpl} implementation.  *<p>  * TODO: Review these to see if they rely on implementation-specific  * functionality or if they should be turned into generic integration  * tests and the respective test failures in other MK implementations  * fixed.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleKernelTest
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
init|=
operator|new
name|SimpleKernelImpl
argument_list|(
literal|"mem:SimpleKernelTest"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|reorderNode
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|node
init|=
literal|"reorderNode_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\" : {\"a\":{}, \"b\":{}, \"c\":{}}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// System.out.println(mk.getNodes('/' + node, head).replaceAll("\"", "").replaceAll(":childNodeCount:.", ""));
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\""
operator|+
name|node
operator|+
literal|"/a\" : {\"before\":\""
operator|+
name|node
operator|+
literal|"/c\"}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// System.out.println(mk.getNodes('/' + node, head).replaceAll("\"", "").replaceAll(":childNodeCount:.", ""));
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleDelete
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\": {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"a\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"a\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

