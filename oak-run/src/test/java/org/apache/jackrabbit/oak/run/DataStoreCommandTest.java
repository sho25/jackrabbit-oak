begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|cm
operator|.
name|file
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
operator|.
name|AzureDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
operator|.
name|S3DataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCTest
operator|.
name|MemoryBlobStoreNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|OakFileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|BlobStoreOptions
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzureUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|tool
operator|.
name|ToolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|FILE_SEPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REFERENCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|DataStoreCommand
operator|.
name|VerboseIdLogger
operator|.
name|DASH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|DataStoreCommand
operator|.
name|VerboseIdLogger
operator|.
name|HASH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|DataStoreCommand
operator|.
name|VerboseIdLogger
operator|.
name|filterFiles
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|defaultGCOptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeFalse
import|;
end_import

begin_comment
comment|/**  * Tests for {@link DataStoreCommand}  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DataStoreCommandTest
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataStoreCommandTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|DataStoreFixture
name|blobFixture
decl_stmt|;
specifier|private
name|StoreFixture
name|storeFixture
decl_stmt|;
specifier|private
name|String
name|additionalParams
decl_stmt|;
specifier|private
name|DataStoreBlobStore
name|setupDataStore
decl_stmt|;
specifier|private
name|NodeStore
name|store
decl_stmt|;
specifier|public
name|DataStoreCommandTest
parameter_list|(
name|StoreFixture
name|storeFixture
parameter_list|,
name|DataStoreFixture
name|blobFixture
parameter_list|)
block|{
name|this
operator|.
name|storeFixture
operator|=
name|storeFixture
expr_stmt|;
name|this
operator|.
name|blobFixture
operator|=
name|blobFixture
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: ({0} : {1})"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
return|return
name|FixtureHelper
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|storeFixture
operator|instanceof
name|StoreFixture
operator|.
name|AzureSegmentStoreFixture
condition|)
block|{
name|assumeFalse
argument_list|(
literal|"Environment variable \"AZURE_SECRET_KEY\" must be set to run Azure Segment fixture"
argument_list|,
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"AZURE_SECRET_KEY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setupDataStore
operator|=
name|blobFixture
operator|.
name|init
argument_list|(
name|temporaryFolder
argument_list|)
expr_stmt|;
name|store
operator|=
name|storeFixture
operator|.
name|init
argument_list|(
name|setupDataStore
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|additionalParams
operator|=
literal|"--ds-read-write"
expr_stmt|;
name|String
name|repoId
init|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|setupDataStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Data
name|prepareData
parameter_list|(
name|StoreFixture
name|storeFixture
parameter_list|,
name|DataStoreFixture
name|blobFixture
parameter_list|,
name|int
name|numBlobs
parameter_list|,
name|int
name|numMaxDeletions
parameter_list|,
name|int
name|missingDataStore
parameter_list|)
throws|throws
name|Exception
block|{
name|DataStoreBlobStore
name|blobStore
init|=
name|blobFixture
operator|.
name|getDataStore
argument_list|()
decl_stmt|;
name|NodeStore
name|store
init|=
name|storeFixture
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|storeFixture
operator|.
name|preDataPrepare
argument_list|()
expr_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toBeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaxDeletions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numBlobs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|toBeDeleted
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeBuilder
name|a
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlobs
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|store
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|18342
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|data
operator|.
name|added
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|data
operator|.
name|idToPath
operator|.
name|put
argument_list|(
name|chunk
argument_list|,
literal|"/c"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|data
operator|.
name|deleted
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created Data : {}"
argument_list|,
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|toBeDeleted
control|)
block|{
name|delete
argument_list|(
literal|"c"
operator|+
name|id
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Deleted nodes : {}"
argument_list|,
name|toBeDeleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|missing
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|data
operator|.
name|added
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|missing
operator|<
name|missingDataStore
condition|)
block|{
name|String
name|id
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|deleted
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|data
operator|.
name|missingDataStore
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|missing
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|data
operator|.
name|missingDataStore
control|)
block|{
name|long
name|count
init|=
name|blobStore
operator|.
name|countDeleteChunks
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|id
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// Sleep a little to make eligible for cleanup
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|storeFixture
operator|.
name|postDataPrepare
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|protected
specifier|static
name|void
name|delete
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|nodeId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|storeFixture
operator|.
name|after
argument_list|()
expr_stmt|;
name|blobFixture
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoSensitiveParams
parameter_list|()
throws|throws
name|Exception
block|{
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--check-consistency"
argument_list|,
literal|"--"
operator|+
name|getOption
argument_list|(
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getConfigPath
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--reset-log-config"
argument_list|,
literal|"false"
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|additionalParams
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Running testNoSensitiveParams: {}"
argument_list|,
name|argsList
argument_list|)
expr_stmt|;
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|DataStoreCommand
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|matchesRegex
argument_list|(
literal|".*mongodb:.*|.*az:.*"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|DataStoreCommand
name|cmd
init|=
operator|new
name|DataStoreCommand
argument_list|()
decl_stmt|;
try|try
block|{
name|cmd
operator|.
name|execute
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingOpParams
parameter_list|()
throws|throws
name|Exception
block|{
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--"
operator|+
name|getOption
argument_list|(
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getConfigPath
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--reset-log-config"
argument_list|,
literal|"false"
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|additionalParams
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Running testMissingOpParams: {}"
argument_list|,
name|argsList
argument_list|)
expr_stmt|;
name|testIncorrectParams
argument_list|(
name|argsList
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"No actions specified"
argument_list|)
argument_list|,
name|DataStoreCommand
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Only for Segment/Tar      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testTarNoDS
parameter_list|()
throws|throws
name|Exception
block|{
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|storeFixture
operator|instanceof
name|StoreFixture
operator|.
name|SegmentStoreFixture
argument_list|)
expr_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--check-consistency"
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"--reset-log-config"
argument_list|,
literal|"false"
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|additionalParams
argument_list|)
expr_stmt|;
block|}
name|testIncorrectParams
argument_list|(
name|argsList
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"No BlobStore specified"
argument_list|)
argument_list|,
name|DataStoreCommand
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyVerbose
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyVerboseRootPathNoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --verboseRootPath /c1,/c2"
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|data
operator|.
name|idToPath
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c1"
argument_list|)
operator|||
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c2"
argument_list|)
condition|)
block|{
name|data
operator|.
name|addedSubset
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyVerboseRootPathWithDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --verboseRootPath /c1,/c2"
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|data
operator|.
name|idToPath
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c1"
argument_list|)
operator|||
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c2"
argument_list|)
condition|)
block|{
name|data
operator|.
name|addedSubset
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyVerboseRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --verboseRootPath /c1,/c2"
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|data
operator|.
name|idToPath
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c1"
argument_list|)
operator|||
name|data
operator|.
name|idToPath
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/c2"
argument_list|)
condition|)
block|{
name|data
operator|.
name|addedSubset
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyVerboseRootPathWithoutVerbose
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --verboseRootPath /a"
expr_stmt|;
try|try
block|{
comment|// Create exec command without --verbose - It should throw an exception
comment|// since we used --verboseRootPath without --verbose
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Option(s) [verboseRootPath] are unavailable "
operator|+
literal|"given other options on the command line"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyNoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcWithConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --check-consistency-gc true"
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"avail-"
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verbose would have paths as well as ids changed but normally only DocumentNS would have paths suffixed
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"consistencyCandidatesAfterGC"
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*     Command should throw and exception if --verboseRootPath specified     with --collect-garbage      */
annotation|@
name|Test
specifier|public
name|void
name|gcWithVerboseRootPathOption
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|additionalParams
operator|+=
literal|" --verboseRootPath /a"
expr_stmt|;
try|try
block|{
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Option(s) [verboseRootPath] are unavailable "
operator|+
literal|"given other options on the command line"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcNoDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcNoneOld
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcOnlyMark
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|10000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcMarkOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryBlobStoreNodeStore
name|memNodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|setupDataStore
argument_list|)
decl_stmt|;
name|String
name|rep2Id
init|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|memNodeStore
argument_list|)
decl_stmt|;
name|setupDataStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|rep2Id
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idMapping
init|=
name|dummyData
argument_list|(
name|memNodeStore
argument_list|,
name|rep2Id
argument_list|,
name|store
argument_list|,
name|setupDataStore
argument_list|,
name|temporaryFolder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|data
operator|.
name|added
operator|.
name|addAll
argument_list|(
name|idMapping
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|idToPath
operator|.
name|putAll
argument_list|(
name|idMapping
argument_list|)
expr_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|testGc
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcNoMarkOnRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryBlobStoreNodeStore
name|memNodeStore
init|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|setupDataStore
argument_list|)
decl_stmt|;
name|String
name|rep2Id
init|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|memNodeStore
argument_list|)
decl_stmt|;
name|setupDataStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|rep2Id
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--collect-garbage"
argument_list|,
literal|"--max-age"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"--"
operator|+
name|getOption
argument_list|(
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getConfigPath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"--reset-log-config"
argument_list|,
literal|"false"
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|additionalParams
argument_list|)
expr_stmt|;
block|}
name|testIncorrectParams
argument_list|(
name|argsList
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Not all repositories have marked references available : "
argument_list|)
argument_list|,
name|MarkSweepGarbageCollector
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Only for Segment/Tar      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConsistencyFakeDS
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|storeFixture
operator|instanceof
name|StoreFixture
operator|.
name|SegmentStoreFixture
argument_list|)
expr_stmt|;
name|File
name|dump
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|dsPath
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|Data
name|data
init|=
name|prepareData
argument_list|(
name|storeFixture
argument_list|,
name|blobFixture
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|storeFixture
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--check-consistency"
argument_list|,
literal|"--fake-ds-path"
argument_list|,
name|dsPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|additionalParams
argument_list|)
expr_stmt|;
block|}
name|DataStoreCommand
name|cmd
init|=
operator|new
name|DataStoreCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"avail-"
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"marked-"
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testConsistency
parameter_list|(
name|File
name|dump
parameter_list|,
name|Data
name|data
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|testConsistency
argument_list|(
name|dump
argument_list|,
name|data
argument_list|,
name|verbose
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testConsistency
parameter_list|(
name|File
name|dump
parameter_list|,
name|Data
name|data
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|boolean
name|verboseRootPath
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--check-consistency"
argument_list|,
literal|"--"
operator|+
name|getOption
argument_list|(
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getConfigPath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|addAll
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|splitToList
argument_list|(
name|additionalParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"--verbose"
argument_list|)
expr_stmt|;
block|}
name|DataStoreCommand
name|cmd
init|=
operator|new
name|DataStoreCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"avail-"
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verbose would have paths as well as ids changed but normally only DocumentNS would have paths suffixed
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"marked-"
argument_list|,
name|verbose
condition|?
name|encodedIdsAndPath
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|verboseRootPath
condition|?
name|data
operator|.
name|addedSubset
else|:
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|,
name|data
operator|.
name|idToPath
argument_list|,
literal|true
argument_list|)
else|:
operator|(
name|storeFixture
operator|instanceof
name|StoreFixture
operator|.
name|MongoStoreFixture
operator|)
condition|?
name|encodedIdsAndPath
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|,
name|data
operator|.
name|idToPath
argument_list|,
literal|false
argument_list|)
else|:
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verbose would have paths as well as ids changed but normally only DocumentNS would have paths suffixed
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"gccand-"
argument_list|,
name|verbose
condition|?
name|encodedIdsAndPath
argument_list|(
name|verboseRootPath
condition|?
name|Sets
operator|.
name|intersection
argument_list|(
name|data
operator|.
name|addedSubset
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
else|:
name|data
operator|.
name|missingDataStore
argument_list|,
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|,
name|data
operator|.
name|idToPath
argument_list|,
literal|true
argument_list|)
else|:
operator|(
name|storeFixture
operator|instanceof
name|StoreFixture
operator|.
name|MongoStoreFixture
operator|)
condition|?
name|encodedIdsAndPath
argument_list|(
name|data
operator|.
name|missingDataStore
argument_list|,
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|,
name|data
operator|.
name|idToPath
argument_list|,
literal|false
argument_list|)
else|:
name|data
operator|.
name|missingDataStore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testGc
parameter_list|(
name|File
name|dump
parameter_list|,
name|Data
name|data
parameter_list|,
name|long
name|maxAge
parameter_list|,
name|boolean
name|markOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--collect-garbage"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|markOnly
argument_list|)
argument_list|,
literal|"--max-age"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxAge
argument_list|)
argument_list|,
literal|"--"
operator|+
name|getOption
argument_list|(
name|blobFixture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|blobFixture
operator|.
name|getConfigPath
argument_list|()
argument_list|,
name|storeFixture
operator|.
name|getConnectionString
argument_list|()
argument_list|,
literal|"--out-dir"
argument_list|,
name|dump
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"--work-dir"
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|additionalParams
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|addAll
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|splitToList
argument_list|(
name|additionalParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DataStoreCommand
name|cmd
init|=
operator|new
name|DataStoreCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|markOnly
condition|)
block|{
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"avail-"
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFileNull
argument_list|(
name|dump
argument_list|,
literal|"avail-"
argument_list|)
expr_stmt|;
block|}
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"marked-"
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|markOnly
condition|)
block|{
name|assertFileEquals
argument_list|(
name|dump
argument_list|,
literal|"gccand-"
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFileNull
argument_list|(
name|dump
argument_list|,
literal|"gccand-"
argument_list|)
expr_stmt|;
block|}
name|Sets
operator|.
name|SetView
argument_list|<
name|String
argument_list|>
name|blobsBeforeGc
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|data
operator|.
name|added
argument_list|,
name|data
operator|.
name|missingDataStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAge
operator|<=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|blobsBeforeGc
argument_list|,
name|data
operator|.
name|deleted
argument_list|)
argument_list|,
name|blobs
argument_list|(
name|setupDataStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|blobsBeforeGc
argument_list|,
name|blobs
argument_list|(
name|setupDataStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|testIncorrectParams
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argList
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|assertMsg
parameter_list|,
name|Class
name|logger
parameter_list|)
block|{
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
name|assertMsg
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|DataStoreCommand
name|cmd
init|=
operator|new
name|DataStoreCommand
argument_list|()
decl_stmt|;
try|try
block|{
name|cmd
operator|.
name|execute
argument_list|(
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dummyData
parameter_list|(
name|MemoryBlobStoreNodeStore
name|memNodeStore
parameter_list|,
name|String
name|rep2Id
parameter_list|,
name|NodeStore
name|store
parameter_list|,
name|DataStoreBlobStore
name|setupDataStore
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
throws|,
name|DataStoreException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idMapping
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|memNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|store
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
operator|+
literal|100
argument_list|,
literal|18342
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|setupDataStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|idMapping
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|"/d"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|child
argument_list|(
literal|"d"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|memNodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sort
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|setupDataStore
operator|.
name|addMetadataRecord
argument_list|(
name|f
argument_list|,
name|REFERENCES
operator|.
name|getNameFromId
argument_list|(
name|rep2Id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|idMapping
return|;
block|}
specifier|private
specifier|static
name|void
name|assertFileEquals
parameter_list|(
name|File
name|dump
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blobsAdded
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|filterFiles
argument_list|(
name|dump
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blobsAdded
argument_list|,
name|FileIOUtils
operator|.
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertFileNull
parameter_list|(
name|File
name|dump
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|File
name|file
init|=
name|filterFiles
argument_list|(
name|dump
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|blobs
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cur
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|createTempConfig
parameter_list|(
name|File
name|cfgFile
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
name|FileUtils
operator|.
name|openOutputStream
argument_list|(
name|cfgFile
argument_list|)
decl_stmt|;
name|ConfigurationHandler
operator|.
name|write
argument_list|(
name|fos
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|cfgFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|encodedIdsAndPath
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|Type
name|dsOption
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idToNodes
parameter_list|,
name|boolean
name|encodeId
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|ids
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|encodeId
condition|?
name|encodeId
argument_list|(
name|input
argument_list|,
name|dsOption
argument_list|)
else|:
name|input
argument_list|,
name|idToNodes
operator|.
name|get
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|encodeId
parameter_list|(
name|String
name|id
parameter_list|,
name|Type
name|dsType
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|idLengthSepList
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|HASH
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|idLengthSepList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsType
operator|==
name|Type
operator|.
name|FDS
condition|)
block|{
return|return
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|dsType
operator|==
name|Type
operator|.
name|S3
operator|||
name|dsType
operator|==
name|Type
operator|.
name|AZURE
condition|)
block|{
return|return
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|DASH
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|)
return|;
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|String
name|getOption
parameter_list|(
name|Type
name|dsOption
parameter_list|)
block|{
if|if
condition|(
name|dsOption
operator|==
name|Type
operator|.
name|FDS
condition|)
block|{
return|return
literal|"fds"
return|;
block|}
elseif|else
if|if
condition|(
name|dsOption
operator|==
name|Type
operator|.
name|S3
condition|)
block|{
return|return
literal|"s3ds"
return|;
block|}
elseif|else
if|if
condition|(
name|dsOption
operator|==
name|Type
operator|.
name|AZURE
condition|)
block|{
return|return
literal|"azureds"
return|;
block|}
else|else
block|{
return|return
literal|"fake-ds-path"
return|;
block|}
block|}
specifier|static
class|class
name|Data
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|added
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|idToPath
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|deleted
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|missingDataStore
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|addedSubset
decl_stmt|;
specifier|public
name|Data
parameter_list|()
block|{
name|added
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|idToPath
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|deleted
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|missingDataStore
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|addedSubset
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
block|}
block|}
interface|interface
name|StoreFixture
block|{
name|NodeStore
name|init
parameter_list|(
name|DataStoreBlobStore
name|blobStore
parameter_list|,
name|File
name|storeFile
parameter_list|)
throws|throws
name|Exception
function_decl|;
name|NodeStore
name|getNodeStore
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|String
name|getConnectionString
parameter_list|()
function_decl|;
name|boolean
name|isAvailable
parameter_list|()
function_decl|;
name|void
name|preDataPrepare
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|void
name|postDataPrepare
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
name|void
name|after
parameter_list|()
function_decl|;
name|StoreFixture
name|MONGO
init|=
operator|new
name|MongoStoreFixture
argument_list|()
decl_stmt|;
name|StoreFixture
name|SEGMENT
init|=
operator|new
name|SegmentStoreFixture
argument_list|()
decl_stmt|;
name|StoreFixture
name|SEGMENT_AZURE
init|=
operator|new
name|AzureSegmentStoreFixture
argument_list|()
decl_stmt|;
class|class
name|MongoStoreFixture
implements|implements
name|StoreFixture
block|{
specifier|private
specifier|final
name|Clock
operator|.
name|Virtual
name|clock
decl_stmt|;
name|MongoConnection
name|c
decl_stmt|;
name|DocumentMK
operator|.
name|Builder
name|builder
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|public
name|MongoStoreFixture
parameter_list|()
block|{
name|c
operator|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|c
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|init
parameter_list|(
name|DataStoreBlobStore
name|blobStore
parameter_list|,
name|File
name|storeFile
parameter_list|)
block|{
name|c
operator|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|c
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|waitUntil
argument_list|(
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setMongoDB
argument_list|(
name|c
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|c
operator|.
name|getDBName
argument_list|()
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|builder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
return|return
name|nodeStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|nodeStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConnectionString
parameter_list|()
block|{
return|return
name|MongoUtils
operator|.
name|URL
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDataPrepare
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxAge
init|=
literal|20
decl_stmt|;
comment|// hours
comment|// 1. Go past GC age and check no GC done as nothing deleted
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
name|vGC
init|=
name|nodeStore
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|VersionGarbageCollector
operator|.
name|VersionGCStats
name|stats
init|=
name|vGC
operator|.
name|gc
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|c
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDataPrepare
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{
name|String
name|dbName
init|=
name|c
operator|.
name|getDBName
argument_list|()
decl_stmt|;
try|try
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"dispose failed with exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|SegmentStoreFixture
implements|implements
name|StoreFixture
block|{
specifier|protected
name|FileStore
name|fileStore
decl_stmt|;
specifier|protected
name|SegmentNodeStore
name|store
decl_stmt|;
specifier|protected
name|SegmentGCOptions
name|gcOptions
init|=
name|defaultGCOptions
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|storePath
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|init
parameter_list|(
name|DataStoreBlobStore
name|blobStore
parameter_list|,
name|File
name|storeFile
parameter_list|)
throws|throws
name|Exception
block|{
name|storePath
operator|=
name|storeFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|FileStoreBuilder
name|fileStoreBuilder
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|storeFile
argument_list|)
decl_stmt|;
name|fileStore
operator|=
name|fileStoreBuilder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|256
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
literal|64
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|store
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConnectionString
parameter_list|()
block|{
return|return
name|storePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDataPrepare
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|fileStore
operator|.
name|compactFull
argument_list|()
expr_stmt|;
block|}
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDataPrepare
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|a
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/* Create garbage by creating in-lined blobs (size< 16KB) */
name|int
name|number
init|=
literal|500
decl_stmt|;
name|NodeBuilder
name|content
init|=
name|a
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|content
operator|.
name|child
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
name|store
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|j
argument_list|,
literal|16384
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|store
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Requires 'AZURE_SECRET_KEY' to be set as an environment variable as well          */
class|class
name|AzureSegmentStoreFixture
extends|extends
name|SegmentStoreFixture
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AZURE_DIR
init|=
literal|"repository"
decl_stmt|;
specifier|private
name|String
name|container
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|init
parameter_list|(
name|DataStoreBlobStore
name|blobStore
parameter_list|,
name|File
name|storeFile
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
name|AzureDataStoreUtils
operator|.
name|getAzureConfig
argument_list|()
decl_stmt|;
name|String
name|accessKey
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_NAME
argument_list|)
decl_stmt|;
name|String
name|secretKey
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_KEY
argument_list|)
decl_stmt|;
name|container
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|)
expr_stmt|;
name|container
operator|=
name|container
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Create the azure segment container
name|String
name|connectionString
init|=
name|getAzureConnectionString
argument_list|(
name|accessKey
argument_list|,
name|secretKey
argument_list|,
name|container
argument_list|,
name|AZURE_DIR
argument_list|)
decl_stmt|;
name|AzureUtilities
operator|.
name|cloudBlobDirectoryFrom
argument_list|(
name|connectionString
argument_list|,
name|container
argument_list|,
name|AZURE_DIR
argument_list|)
expr_stmt|;
comment|// get the azure uri expected by the command
name|storePath
operator|=
name|getAzureUri
argument_list|(
name|accessKey
argument_list|,
name|container
argument_list|,
name|AZURE_DIR
argument_list|)
expr_stmt|;
comment|// initialize azure segment for test setup
name|SegmentNodeStorePersistence
name|segmentNodeStorePersistence
init|=
name|ToolUtils
operator|.
name|newSegmentNodeStorePersistence
argument_list|(
name|ToolUtils
operator|.
name|SegmentStoreType
operator|.
name|AZURE
argument_list|,
name|storePath
argument_list|)
decl_stmt|;
name|fileStore
operator|=
name|fileStoreBuilder
argument_list|(
name|storeFile
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|segmentNodeStorePersistence
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|store
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|store
return|;
block|}
specifier|protected
name|String
name|getAzureUri
parameter_list|(
name|String
name|accountName
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
name|StringBuilder
name|uri
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"az:"
argument_list|)
decl_stmt|;
name|uri
operator|.
name|append
argument_list|(
literal|"https://"
argument_list|)
operator|.
name|append
argument_list|(
name|accountName
argument_list|)
operator|.
name|append
argument_list|(
literal|".blob.core.windows.net/"
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|container
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|directory
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getAzureConnectionString
parameter_list|(
name|String
name|accountName
parameter_list|,
name|String
name|secret
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"AccountName="
argument_list|)
operator|.
name|append
argument_list|(
name|accountName
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DefaultEndpointsProtocol=https;"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"BlobEndpoint=https://"
argument_list|)
operator|.
name|append
argument_list|(
name|accountName
argument_list|)
operator|.
name|append
argument_list|(
literal|".blob.core.windows.net"
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"AccountKey="
argument_list|)
operator|.
name|append
argument_list|(
name|secret
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|AzureDataStoreUtils
operator|.
name|deleteContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in cleaning the container {}"
argument_list|,
name|container
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|AzureDataStoreUtils
operator|.
name|isAzureConfigured
argument_list|()
return|;
block|}
block|}
block|}
interface|interface
name|DataStoreFixture
block|{
name|boolean
name|isAvailable
parameter_list|()
function_decl|;
name|DataStoreBlobStore
name|init
parameter_list|(
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|Exception
function_decl|;
name|DataStoreBlobStore
name|getDataStore
parameter_list|()
function_decl|;
name|String
name|getConfigPath
parameter_list|()
function_decl|;
name|Type
name|getType
parameter_list|()
function_decl|;
name|void
name|after
parameter_list|()
function_decl|;
name|DataStoreFixture
name|S3
init|=
operator|new
name|S3DataStoreFixture
argument_list|()
decl_stmt|;
name|DataStoreFixture
name|AZURE
init|=
operator|new
name|AzureDataStoreFixture
argument_list|()
decl_stmt|;
name|DataStoreFixture
name|FDS
init|=
operator|new
name|FileDataStoreFixture
argument_list|()
decl_stmt|;
class|class
name|S3DataStoreFixture
implements|implements
name|DataStoreFixture
block|{
name|DataStoreBlobStore
name|blobStore
decl_stmt|;
name|String
name|cfgFilePath
decl_stmt|;
name|String
name|container
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|S3DataStoreUtils
operator|.
name|isS3Configured
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|init
parameter_list|(
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
name|S3DataStoreUtils
operator|.
name|getS3Config
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"cacheSize"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|container
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|)
expr_stmt|;
name|container
operator|=
name|container
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|DataStore
name|ds
init|=
name|S3DataStoreUtils
operator|.
name|getS3DataStore
argument_list|(
name|S3DataStoreUtils
operator|.
name|getFixtures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|props
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|cfgFilePath
operator|=
name|createTempConfig
argument_list|(
name|folder
operator|.
name|newFile
argument_list|(
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|".config"
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|getDataStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfigPath
parameter_list|()
block|{
return|return
name|cfgFilePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|S3
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|S3DataStoreUtils
operator|.
name|deleteBucket
argument_list|(
name|container
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in cleaning the container {}"
argument_list|,
name|container
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|AzureDataStoreFixture
implements|implements
name|DataStoreFixture
block|{
name|DataStoreBlobStore
name|blobStore
decl_stmt|;
name|String
name|cfgFilePath
decl_stmt|;
name|String
name|container
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|AzureDataStoreUtils
operator|.
name|isAzureConfigured
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|init
parameter_list|(
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
name|AzureDataStoreUtils
operator|.
name|getAzureConfig
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"cacheSize"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|container
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|)
expr_stmt|;
name|container
operator|=
name|container
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_CONTAINER_NAME
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|DataStore
name|ds
init|=
name|AzureDataStoreUtils
operator|.
name|getAzureDataStore
argument_list|(
name|props
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|cfgFilePath
operator|=
name|createTempConfig
argument_list|(
name|folder
operator|.
name|newFile
argument_list|(
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|".config"
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|getDataStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfigPath
parameter_list|()
block|{
return|return
name|cfgFilePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|AZURE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{
try|try
block|{
name|AzureDataStoreUtils
operator|.
name|deleteContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in cleaning the container {}"
argument_list|,
name|container
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|FileDataStoreFixture
implements|implements
name|DataStoreFixture
block|{
name|DataStoreBlobStore
name|blobStore
decl_stmt|;
name|String
name|cfgFilePath
decl_stmt|;
name|String
name|container
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|init
parameter_list|(
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|OakFileDataStore
name|delegate
init|=
operator|new
name|OakFileDataStore
argument_list|()
decl_stmt|;
name|container
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|setPath
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|File
name|cfgFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"minRecordLength"
argument_list|,
operator|new
name|Long
argument_list|(
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
name|cfgFilePath
operator|=
name|createTempConfig
argument_list|(
name|cfgFile
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataStoreBlobStore
name|getDataStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfigPath
parameter_list|()
block|{
return|return
name|cfgFilePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|FDS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
block|{             }
block|}
block|}
specifier|static
class|class
name|FixtureHelper
block|{
specifier|static
name|List
argument_list|<
name|StoreFixture
argument_list|>
name|getStoreFixtures
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|StoreFixture
operator|.
name|MONGO
argument_list|,
name|StoreFixture
operator|.
name|SEGMENT
argument_list|,
name|StoreFixture
operator|.
name|SEGMENT_AZURE
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|DataStoreFixture
argument_list|>
name|getDataStoreFixtures
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|DataStoreFixture
operator|.
name|S3
argument_list|,
name|DataStoreFixture
operator|.
name|AZURE
argument_list|,
name|DataStoreFixture
operator|.
name|FDS
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|get
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFixture
name|storeFixture
range|:
name|getStoreFixtures
argument_list|()
control|)
block|{
if|if
condition|(
name|storeFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
for|for
control|(
name|DataStoreFixture
name|dsFixture
range|:
name|getDataStoreFixtures
argument_list|()
control|)
block|{
if|if
condition|(
name|dsFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|storeFixture
block|,
name|dsFixture
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|fixtures
return|;
block|}
block|}
block|}
end_class

end_unit

