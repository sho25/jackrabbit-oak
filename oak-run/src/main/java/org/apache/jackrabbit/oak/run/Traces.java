begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|readAllLines
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
operator|.
name|newIOTracer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|BreadthFirstTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|DepthFirstTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|RandomAccessTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Utility class for running the various {@link Trace} implementations.  */
end_comment

begin_enum
specifier|public
enum|enum
name|Traces
block|{
comment|/**      * Utility for running a {@link DepthFirstTrace depth first trace}.      */
name|DEPTH
block|{
annotation|@
name|NotNull
specifier|private
name|String
name|path
init|=
name|DEFAULT_PATH
decl_stmt|;
specifier|private
name|int
name|depth
init|=
name|DEFAULT_DEPTH
decl_stmt|;
annotation|@
name|Override
name|void
name|setPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"depth first traversal of %d levels starting from %s"
argument_list|,
name|depth
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|NotNull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|NotNull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
name|segmentStore
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|DepthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|DepthFirstTrace
argument_list|(
name|depth
argument_list|,
name|path
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
comment|/**      * Utility for running a {@link BreadthFirstTrace breadth first trace}.      */
name|BREADTH
block|{
annotation|@
name|NotNull
specifier|private
name|String
name|path
init|=
name|DEFAULT_PATH
decl_stmt|;
specifier|private
name|int
name|depth
init|=
name|DEFAULT_DEPTH
decl_stmt|;
annotation|@
name|Override
name|void
name|setPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"breadth first traversal of %d levels starting from %s"
argument_list|,
name|depth
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|NotNull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|NotNull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
name|segmentStore
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|BreadthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|BreadthFirstTrace
argument_list|(
name|depth
argument_list|,
name|path
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
comment|/**      * Utility for running a {@link RandomAccessTrace random access trace}.      */
name|RANDOM
block|{
annotation|@
name|NotNull
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|seed
init|=
name|DEFAULT_SEED
decl_stmt|;
specifier|private
name|int
name|count
init|=
name|DEFAULT_COUNT
decl_stmt|;
annotation|@
name|Override
name|void
name|setPaths
parameter_list|(
annotation|@
name|NotNull
name|File
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|paths
operator|=
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|paths
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"random access of %d paths (seed=%d)"
argument_list|,
name|count
argument_list|,
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|NotNull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|NotNull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
name|segmentStore
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|RandomAccessTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|RandomAccessTrace
argument_list|(
name|paths
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|;
comment|/**      * Default path to the node from where to start tracing.      */
annotation|@
name|NotNull
specifier|static
specifier|final
name|String
name|DEFAULT_PATH
init|=
literal|"/root"
decl_stmt|;
comment|/**      * Default maximal depth      */
specifier|static
specifier|final
name|int
name|DEFAULT_DEPTH
init|=
literal|5
decl_stmt|;
comment|/**      * Default seed for picking paths randomly      */
specifier|static
specifier|final
name|long
name|DEFAULT_SEED
init|=
literal|0
decl_stmt|;
comment|/**      * Default number of paths to trace      */
specifier|static
specifier|final
name|int
name|DEFAULT_COUNT
init|=
literal|1000
decl_stmt|;
comment|/**      * Set the path to the node from where to start tracing.      * @param path      * @see BreadthFirstTrace      * @see DepthFirstTrace      */
name|void
name|setPath
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{}
comment|/**      * Set the maximal depth      * @param depth      * @see BreadthFirstTrace      * @see DepthFirstTrace      */
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{}
comment|/**      * Set the paths to trace      * @param paths  file containing a paths per line      * @throws IOException      * @see RandomAccessTrace      */
name|void
name|setPaths
parameter_list|(
annotation|@
name|NotNull
name|File
name|paths
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**      * Set the seed used to randomly pick paths      * @param seed      */
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{}
comment|/**      * Set the number of paths to trace      * @param count      */
name|void
name|setCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{}
comment|/**      * @return a human readable description of the trace      */
specifier|abstract
name|String
name|getDescription
parameter_list|()
function_decl|;
comment|/**      * Collect an IO trace on a segment store.      * @param segmentStore       path to the segment store      * @param mmap               whether to enable memory mapping      * @param segmentCacheSize   size of the segment cache in MB      * @param output             output file where the trace is written to      * @throws IOException      */
specifier|abstract
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|NotNull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|NotNull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
function_decl|;
annotation|@
name|NotNull
specifier|private
specifier|static
name|FileStore
name|newFileStore
parameter_list|(
name|FileStoreBuilder
name|fileStoreBuilder
parameter_list|)
block|{
try|try
block|{
return|return
name|fileStoreBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

