begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MIXIN_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PRIMARY_SUBTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Inheritance-aware node type predicate for {@link NodeState node states}.  *  * @since Oak 0.11  */
end_comment

begin_class
specifier|public
class|class
name|TypePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeState
argument_list|>
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|primaryTypes
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mixinTypes
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a predicate for checking whether a node state is an instance of      * the named node type. This is an O(1) operation in terms of item      * accesses.      *      * @param root root node state      * @param name Oak name of the node type to check for      */
specifier|public
name|TypePredicate
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|root
argument_list|,
name|singleton
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a predicate for checking whether a node state is an instance of      * any of the named node types. This is an O(n) operation in terms of item      * accesses, with n being the number of given node types.      *      * @param root root node state      * @param names Oak names of the node types to check for      */
specifier|public
name|TypePredicate
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
block|}
comment|/**      * Creates a predicate for checking whether a node state is an instance of      * any of the named node types. This is an O(n) operation in terms of item      * accesses, with n being the number of given node types.      *      * @param root root node state      * @param names Oak names of the node types to check for      */
specifier|public
name|TypePredicate
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|String
index|[]
name|names
parameter_list|)
block|{
name|this
argument_list|(
name|root
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|add
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
name|newHashSet
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
block|}
specifier|private
name|void
name|addNodeType
parameter_list|(
name|NodeState
name|types
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|type
init|=
name|types
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|primary
range|:
name|type
operator|.
name|getNames
argument_list|(
name|OAK_PRIMARY_SUBTYPES
argument_list|)
control|)
block|{
name|primaryTypes
operator|=
name|add
argument_list|(
name|primaryTypes
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|mixinTypes
operator|=
name|add
argument_list|(
name|mixinTypes
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// Only mixin types can have mixin descendants, so we
comment|// only fill the mixinTypes set in this branch of code.
for|for
control|(
name|String
name|mixin
range|:
name|type
operator|.
name|getNames
argument_list|(
name|OAK_MIXIN_SUBTYPES
argument_list|)
control|)
block|{
name|mixinTypes
operator|=
name|add
argument_list|(
name|mixinTypes
argument_list|,
name|mixin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No need to check whether the type actually exists, as if
comment|// it doesn't there should in any case be no matching content.
name|primaryTypes
operator|=
name|add
argument_list|(
name|primaryTypes
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|//---------------------------------------------------------< Predicate>--
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeState
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
comment|// lazy initialization of the sets of matching type names
name|NodeState
name|types
init|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|checkNotNull
argument_list|(
name|names
argument_list|)
control|)
block|{
name|addNodeType
argument_list|(
name|types
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|primaryTypes
operator|!=
literal|null
operator|&&
name|primaryTypes
operator|.
name|contains
argument_list|(
name|input
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|mixinTypes
operator|!=
literal|null
operator|&&
name|any
argument_list|(
name|input
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|in
argument_list|(
name|mixinTypes
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|toString
argument_list|(
name|names
argument_list|)
return|;
block|}
block|}
end_class

end_unit

