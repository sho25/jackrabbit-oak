begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeConstants
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|NT_REP_ACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|NT_REP_DENY_ACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|NT_REP_GRANT_ACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_PRINCIPAL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|REP_ACCESS_CONTROLLED_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|REP_NUM_PERMISSIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionStoreEditorTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PRINCIPAL_NAME
init|=
literal|"principalName"
decl_stmt|;
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
specifier|private
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
specifier|private
name|TypePredicate
name|isACE
decl_stmt|;
specifier|private
name|TypePredicate
name|isGrantACE
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|restrictionProvider
operator|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
expr_stmt|;
name|NodeState
name|rootState
init|=
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|isACE
operator|=
name|spy
argument_list|(
operator|new
name|TypePredicate
argument_list|(
name|rootState
argument_list|,
name|NT_REP_ACE
argument_list|)
argument_list|)
expr_stmt|;
name|isGrantACE
operator|=
name|spy
argument_list|(
operator|new
name|TypePredicate
argument_list|(
name|rootState
argument_list|,
name|NT_REP_GRANT_ACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|NodeState
name|mockACE
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
block|{
name|NodeState
name|ace
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ace
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NT_REP_DENY_ACE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ace
operator|.
name|getNames
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ace
operator|.
name|getString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
return|return
name|ace
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|NodeState
name|mockNodeState
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|ace
parameter_list|)
block|{
name|NodeState
name|nodeState
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getNames
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNodeCount
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ace
argument_list|)
expr_stmt|;
return|return
name|nodeState
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|PermissionStoreEditor
name|createPermissionStoreEditor
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|nodeState
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|permissionRoot
parameter_list|)
block|{
return|return
operator|new
name|PermissionStoreEditor
argument_list|(
literal|""
argument_list|,
name|AccessControlConstants
operator|.
name|REP_REPO_POLICY
argument_list|,
name|nodeState
argument_list|,
name|permissionRoot
argument_list|,
name|isACE
argument_list|,
name|isGrantACE
argument_list|,
name|bitsProvider
argument_list|,
name|restrictionProvider
argument_list|,
name|getTreeProvider
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithNonAceChildren
parameter_list|()
block|{
name|NodeState
name|nodeState
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getNames
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|,
literal|"c3"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
operator|new
name|PermissionStoreEditor
argument_list|(
literal|"/test"
argument_list|,
name|AccessControlConstants
operator|.
name|REP_POLICY
argument_list|,
name|nodeState
argument_list|,
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|,
name|isACE
argument_list|,
name|isGrantACE
argument_list|,
name|bitsProvider
argument_list|,
name|restrictionProvider
argument_list|,
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeState
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|isACE
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|test
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|isGrantACE
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|test
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithIncompleteChildOrder
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getNames
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNodeCount
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|,
literal|"c3"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nodeState
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ace
argument_list|)
expr_stmt|;
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeState
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|isACE
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|test
argument_list|(
name|ace
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|isGrantACE
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|test
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePermissionEntriesUnknownPrincipalName
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
literal|"unknownPrincipal"
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|editor
operator|.
name|removePermissionEntries
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|permissionsRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"unknownPrincipal"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|permissionsRoot
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"unknownPrincipal"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePermissionEntriesNonExistingParent
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|hasChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|getChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|editor
operator|.
name|removePermissionEntries
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|permissionsRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|hasChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|permissionsRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getProperty
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePermissionEntriesNoMatchingEntry
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|PropertyState
name|nonMatchingPathProp
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/noMatch"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonMatchingPathProp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"collision"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|hasChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|getChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|editor
operator|.
name|removePermissionEntries
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getChildNodeNames
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"collision"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateNumEntriesPrincipalRootExisted
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|remove
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|principalRoot
operator|.
name|isNew
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|hasChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|getChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|PropertyState
name|pathProp
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
name|editor
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pathProp
argument_list|)
expr_stmt|;
name|editor
operator|.
name|removePermissionEntries
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|Type
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateNumEntriesTurnsNegativ
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|parent
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|remove
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|principalRoot
operator|.
name|isNew
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|principalRoot
operator|.
name|getProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|hasChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|getChildNode
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|PropertyState
name|pathProp
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
name|editor
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pathProp
argument_list|)
expr_stmt|;
name|editor
operator|.
name|removePermissionEntries
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|REP_NUM_PERMISSIONS
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|principalRoot
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|Type
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePermissionEntriesWhenCollisionChildMatches
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|collision
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|collision
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collision
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|collision
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collision
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|collision
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|Type
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collision
argument_list|)
expr_stmt|;
name|NodeBuilder
name|parent
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|hasProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
literal|"/noMatch"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"collision"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collision
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collision
argument_list|)
expr_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|child
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|collision
operator|.
name|getProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
name|editor
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|editor
operator|.
name|updatePermissionEntries
argument_list|()
expr_stmt|;
comment|// the collision node gets updated not the parent
name|verify
argument_list|(
name|parent
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
name|editor
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|parent
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|collision
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REP_ACCESS_CONTROLLED_PATH
argument_list|,
name|editor
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|collision
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePermissionEntriesDoesNotRemoveCollisions
parameter_list|()
block|{
name|NodeState
name|ace
init|=
name|mockACE
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|NodeState
name|nodeState
init|=
name|mockNodeState
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|NodeBuilder
name|child
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|child
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|child
operator|.
name|setProperty
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|Type
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|NodeBuilder
name|parent
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"collision"
argument_list|,
literal|"entry"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parent
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|NodeBuilder
name|principalRoot
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
operator|.
name|child
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parent
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|NodeBuilder
name|permissionsRoot
init|=
name|mock
argument_list|(
name|NodeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|permissionsRoot
operator|.
name|child
argument_list|(
name|PRINCIPAL_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoot
argument_list|)
expr_stmt|;
name|PermissionStoreEditor
name|editor
init|=
name|createPermissionStoreEditor
argument_list|(
name|nodeState
argument_list|,
name|permissionsRoot
argument_list|)
decl_stmt|;
name|editor
operator|.
name|updatePermissionEntries
argument_list|()
expr_stmt|;
comment|// only the existing 'entry' child gets removed. the collision is not touched
name|verify
argument_list|(
name|child
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

