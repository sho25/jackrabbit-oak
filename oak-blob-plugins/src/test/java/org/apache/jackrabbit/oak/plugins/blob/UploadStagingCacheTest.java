begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link UploadStagingCache}.  */
end_comment

begin_class
specifier|public
class|class
name|UploadStagingCacheTest
extends|extends
name|AbstractDataStoreCacheTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UploadStagingCacheTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_PREFIX
init|=
literal|"12345"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|TestStagingUploader
name|uploader
decl_stmt|;
specifier|private
name|File
name|root
decl_stmt|;
specifier|private
name|CountDownLatch
name|taskLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|callbackLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|afterExecuteLatch
decl_stmt|;
specifier|private
name|TestExecutor
name|executor
decl_stmt|;
specifier|private
name|UploadStagingCache
name|stagingCache
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statsProvider
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|removeExecutor
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|i
argument_list|,
operator|new
name|TestStagingUploader
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|int
name|i
parameter_list|,
name|TestStagingUploader
name|testUploader
parameter_list|,
name|File
name|homeDir
parameter_list|)
block|{
comment|// uploader
name|uploader
operator|=
name|testUploader
expr_stmt|;
comment|// create executor
name|taskLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|callbackLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|afterExecuteLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|TestExecutor
argument_list|(
literal|1
argument_list|,
name|taskLatch
argument_list|,
name|callbackLatch
argument_list|,
name|afterExecuteLatch
argument_list|)
expr_stmt|;
comment|// stats
name|ScheduledExecutorService
name|statsExecutor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|statsExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|statsProvider
operator|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|statsExecutor
argument_list|)
expr_stmt|;
name|removeExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|removeExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//cache instance
name|stagingCache
operator|=
name|UploadStagingCache
operator|.
name|build
argument_list|(
name|root
argument_list|,
name|homeDir
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
literal|8
operator|*
literal|1024
comment|/* bytes */
argument_list|,
name|uploader
argument_list|,
literal|null
comment|/*cache*/
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|stagingCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tear
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZeroCache
parameter_list|()
throws|throws
name|IOException
block|{
name|stagingCache
operator|=
name|UploadStagingCache
operator|.
name|build
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
literal|0
comment|/* bytes */
argument_list|,
name|uploader
argument_list|,
literal|null
comment|/*cache*/
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|stagingCache
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|stagingCache
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Stage file successful upload.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stage file unsuccessful upload.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testAddUploadException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TestStagingUploader
name|secondTimeUploader
init|=
operator|new
name|TestStagingUploader
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|id
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Error in writing blob"
argument_list|)
throw|;
block|}
name|super
operator|.
name|write
argument_list|(
name|id
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// initialize staging cache using the mocked uploader
name|init
argument_list|(
literal|2
argument_list|,
name|secondTimeUploader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
comment|// assert file retrieved from staging cache
name|File
name|ret
init|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getLoadSuccessCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Retry upload and wait for finish
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|removeExecutor
operator|.
name|schedule
argument_list|(
name|stagingCache
operator|.
expr|new
name|RetryJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Now uploaded
name|ret
operator|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|secondTimeUploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve without adding.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGetNoAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|ret
init|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
comment|// assert no file
name|assertNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * GetAllIdentifiers without adding.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiersNoAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|stagingCache
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ids
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invalidate without adding.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateNoAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|stagingCache
operator|.
name|invalidate
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Error in putting file to stage.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testPutMoveFileError
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|empty
init|=
operator|new
name|File
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|empty
argument_list|)
decl_stmt|;
comment|// assert no file
name|assertFalse
argument_list|(
name|future
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put and retrieve different files concurrently.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGetAddDifferent
parameter_list|()
throws|throws
name|Exception
block|{
comment|//add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Create an async retrieve task
specifier|final
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|retFuture
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|retFuture
operator|.
name|set
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//assert no file retrieve
name|assertNull
argument_list|(
name|retFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stagingCache
operator|.
name|getStats
argument_list|()
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stage file when cache full.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testCacheFullAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize cache to have restricted size
name|stagingCache
operator|=
name|UploadStagingCache
operator|.
name|build
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
literal|1
comment|/*threads*/
argument_list|,
literal|4
operator|*
literal|1024
comment|/* bytes */
argument_list|,
name|uploader
argument_list|,
literal|null
comment|/*cache*/
argument_list|,
name|statsProvider
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
literal|3000
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|stagingCache
argument_list|)
expr_stmt|;
comment|// add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Add another load
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future2
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|future2
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Try 2nd upload again
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|futures
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * GetAllIdentifiers after staging before upload.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Check getAllIdentifiers
name|Iterator
argument_list|<
name|String
argument_list|>
name|idsIter
init|=
name|stagingCache
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|idsIter
argument_list|)
argument_list|)
expr_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Should not return anything
name|idsIter
operator|=
name|stagingCache
operator|.
name|getAllIdentifiers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|idsIter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invalidate after staging before upload.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Check invalidate
name|stagingCache
operator|.
name|invalidate
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Should not return anything
name|file
operator|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stage same file concurrently.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentSameAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future2
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|future2
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|future2
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stage different files concurrently      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentDifferentAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Add diff load
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future2
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
if|if
condition|(
name|future2
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|future2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertFuture
argument_list|(
name|futures
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently retrieve after stage but before upload.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentGetDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Get a handle to the file and open stream
name|File
name|file
init|=
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|fStream
init|=
name|Files
operator|.
name|asByteSource
argument_list|(
name|file
argument_list|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
comment|// task to copy the steam to a file simulating read from the stream
name|File
name|temp
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|CountDownLatch
name|copyThreadLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future1
init|=
name|copyStreamThread
argument_list|(
name|executorService
argument_list|,
name|fStream
argument_list|,
name|temp
argument_list|,
name|copyThreadLatch
argument_list|)
decl_stmt|;
comment|//start
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
comment|// trying copying now
name|copyThreadLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|temp
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently stage and trigger delete after upload for same file.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentPutDeleteSame
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentPutDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Concurrently stage and trigger delete after upload for different file.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentPutDeleteDifferent
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentPutDelete
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testConcurrentPutDelete
parameter_list|(
name|int
name|diff
parameter_list|)
throws|throws
name|Exception
block|{
name|ListeningExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
comment|//start immediately
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Add immediately
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// New task to put another file
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
name|diff
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|CountDownLatch
name|putThreadLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|triggerLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SettableFuture
argument_list|<
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|future1
init|=
name|putThread
argument_list|(
name|executorService
argument_list|,
name|diff
argument_list|,
name|f2
argument_list|,
name|stagingCache
argument_list|,
name|putThreadLatch
argument_list|,
name|triggerLatch
argument_list|)
decl_stmt|;
name|putThreadLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait for put thread to go ahead
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|removeExecutor
operator|.
name|schedule
argument_list|(
name|stagingCache
operator|.
expr|new
name|RemoveJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|triggerLatch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|future1
operator|.
name|get
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|future1
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|listListenableFuture
init|=
name|Futures
operator|.
name|successfulAsList
argument_list|(
name|futures
argument_list|)
decl_stmt|;
try|try
block|{
name|listListenableFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
name|diff
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test build on start.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testBuild
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Close before uploading finished
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start again
name|init
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test build on start with more files available in terms of total size in the upload cache.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testBuildMoreThanCacheSize
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create load greater than the cache size upgrades or cache size changes
name|File
name|f1
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|DataStoreCacheUtils
operator|.
name|getFile
argument_list|(
name|ID_PREFIX
operator|+
literal|"1"
argument_list|,
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"upload"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|DataStoreCacheUtils
operator|.
name|getFile
argument_list|(
name|ID_PREFIX
operator|+
literal|"2"
argument_list|,
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"upload"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|f3
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|DataStoreCacheUtils
operator|.
name|getFile
argument_list|(
name|ID_PREFIX
operator|+
literal|"3"
argument_list|,
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"upload"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Directly add files to staging dir simulating an upgrade scenario
comment|// Start staging cache
name|init
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Not staged as already full
name|assertTrue
argument_list|(
name|futures
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Initial files should have been uploaded
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|2
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|3
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test upgrade with build on start.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add load
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|put
argument_list|(
name|folder
argument_list|)
decl_stmt|;
comment|// Close before uploading finished
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create pre-upgrade load
name|File
name|home
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|pendingUploadsFile
init|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
name|DataStoreCacheUpgradeUtils
operator|.
name|UPLOAD_MAP
argument_list|)
decl_stmt|;
name|createUpgradeLoad
argument_list|(
name|home
argument_list|,
name|pendingUploadsFile
argument_list|)
expr_stmt|;
comment|// Start again
name|init
argument_list|(
literal|2
argument_list|,
operator|new
name|TestStagingUploader
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
argument_list|,
name|home
argument_list|)
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertUpgrade
argument_list|(
name|pendingUploadsFile
argument_list|)
expr_stmt|;
name|assertCacheStats
argument_list|(
name|stagingCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/** -------------------- Helper methods ----------------------------------------------------**/
specifier|private
name|void
name|createUpgradeLoad
parameter_list|(
name|File
name|home
parameter_list|,
name|File
name|pendingUploadFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|ID_PREFIX
operator|+
literal|1
decl_stmt|;
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|getFile
argument_list|(
name|id
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
literal|"/"
operator|+
name|id
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
operator|+
literal|"/"
operator|+
name|id
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|pendingUploads
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|pendingUploads
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|serializeMap
argument_list|(
name|pendingUploads
argument_list|,
name|pendingUploadFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertUpgrade
parameter_list|(
name|File
name|pendingUploadFile
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|stagingCache
operator|.
name|getIfPresent
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|equal
argument_list|(
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|1
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
argument_list|,
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pendingUploadFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|copyStreamThread
parameter_list|(
name|ListeningExecutorService
name|executor
parameter_list|,
specifier|final
name|InputStream
name|fStream
parameter_list|,
specifier|final
name|File
name|temp
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|)
block|{
specifier|final
name|SettableFuture
argument_list|<
name|File
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for start of copying"
argument_list|)
expr_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting copy of [{}]"
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|fStream
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished retrieve"
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in get"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
specifier|static
name|SettableFuture
argument_list|<
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|putThread
parameter_list|(
name|ListeningExecutorService
name|executor
parameter_list|,
specifier|final
name|int
name|seed
parameter_list|,
specifier|final
name|File
name|f
parameter_list|,
specifier|final
name|UploadStagingCache
name|cache
parameter_list|,
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|trigger
parameter_list|)
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for start to put"
argument_list|)
expr_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting put"
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|opt
init|=
name|cache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
name|seed
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished put"
argument_list|)
expr_stmt|;
name|future
operator|.
name|set
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in get"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
name|void
name|waitFinish
parameter_list|(
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|listListenableFuture
init|=
name|Futures
operator|.
name|successfulAsList
argument_list|(
name|futures
argument_list|)
decl_stmt|;
try|try
block|{
name|listListenableFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|removeExecutor
operator|.
name|schedule
argument_list|(
name|stagingCache
operator|.
expr|new
name|RemoveJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|put
parameter_list|(
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|future
init|=
name|stagingCache
operator|.
name|put
argument_list|(
name|ID_PREFIX
operator|+
literal|0
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|futures
return|;
block|}
specifier|private
name|void
name|assertFuture
parameter_list|(
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
parameter_list|,
name|int
modifier|...
name|seeds
parameter_list|)
throws|throws
name|Exception
block|{
name|waitFinish
argument_list|(
name|futures
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seeds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|upload
init|=
name|uploader
operator|.
name|read
argument_list|(
name|ID_PREFIX
operator|+
name|seeds
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertFile
argument_list|(
name|upload
argument_list|,
name|seeds
index|[
name|i
index|]
argument_list|,
name|folder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertFile
parameter_list|(
name|File
name|f
parameter_list|,
name|int
name|seed
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|temp
init|=
name|copyToFile
argument_list|(
name|randomStream
argument_list|(
name|seed
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Uploaded file content differs"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
name|temp
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertCacheStats
parameter_list|(
name|UploadStagingCache
name|cache
parameter_list|,
name|long
name|elems
parameter_list|,
name|long
name|weight
parameter_list|,
name|long
name|hits
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|elems
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|weight
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

