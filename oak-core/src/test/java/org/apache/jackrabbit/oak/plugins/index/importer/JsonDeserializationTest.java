begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|Base64BlobSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|BlobSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|EqualsDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|JsonDeserializationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|deserialize
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{\n"
operator|+
literal|"    \"evaluatePathRestrictions\": true,\n"
operator|+
literal|"    \"compatVersion\": 2,\n"
operator|+
literal|"    \"type\": \"lucene\",\n"
operator|+
literal|"    \"includedPaths\": [\"/content\"],\n"
operator|+
literal|"    \"excludedPaths\": [\"/jcr:system\"],\n"
operator|+
literal|"    \"async\": \"async\",\n"
operator|+
literal|"    \"jcr:primaryType\": \"oak:QueryIndexDefinition\",\n"
operator|+
literal|"    \"indexRules\": {\n"
operator|+
literal|"        \"jcr:primaryType\": \"nt:unstructured\",\n"
operator|+
literal|"        \"dam:Asset\": {\n"
operator|+
literal|"            \"jcr:primaryType\": \"nt:unstructured\",\n"
operator|+
literal|"            \"properties\": {\n"
operator|+
literal|"                \"jcr:primaryType\": \"nt:unstructured\",\n"
operator|+
literal|"                \"valid\": {\n"
operator|+
literal|"                    \"name\": \"valid\",\n"
operator|+
literal|"                    \"propertyIndex\": true,\n"
operator|+
literal|"                    \"jcr:primaryType\": \"nt:unstructured\",\n"
operator|+
literal|"                    \"notNullCheckEnabled\": true\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"mimetype\": {\n"
operator|+
literal|"                    \"name\": \"mimetype\",\n"
operator|+
literal|"                    \"analyzed\": true,\n"
operator|+
literal|"                    \"jcr:primaryType\": \"nt:unstructured\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"lastModified\": {\n"
operator|+
literal|"                    \"ordered\": true,\n"
operator|+
literal|"                    \"name\": \"jcr:content/metadata/jcr:lastModified\",\n"
operator|+
literal|"                    \"jcr:primaryType\": \"nt:unstructured\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                \"status\": {\n"
operator|+
literal|"                    \"name\": \"jcr:content/metadata/status\",\n"
operator|+
literal|"                    \"propertyIndex\": true,\n"
operator|+
literal|"                    \"jcr:primaryType\": \"nt:unstructured\"\n"
operator|+
literal|"                }\n"
operator|+
literal|"            }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|TreeFactory
operator|.
name|createTree
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"evaluatePathRestrictions"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"compatVersion"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"type"
argument_list|,
literal|"lucene"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"includedPaths"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"excludedPaths"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"/jcr:system"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"async"
argument_list|,
literal|"async"
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"oak:QueryIndexDefinition"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|indexRules
init|=
name|addUnstructuredChild
argument_list|(
name|tree
argument_list|,
literal|"indexRules"
argument_list|)
decl_stmt|;
name|Tree
name|asset
init|=
name|addUnstructuredChild
argument_list|(
name|indexRules
argument_list|,
literal|"dam:Asset"
argument_list|)
decl_stmt|;
name|Tree
name|properties
init|=
name|addUnstructuredChild
argument_list|(
name|asset
argument_list|,
literal|"properties"
argument_list|)
decl_stmt|;
name|Tree
name|valid
init|=
name|addUnstructuredChild
argument_list|(
name|properties
argument_list|,
literal|"valid"
argument_list|)
decl_stmt|;
name|valid
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
name|valid
operator|.
name|setProperty
argument_list|(
literal|"propertyIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|valid
operator|.
name|setProperty
argument_list|(
literal|"notNullCheckEnabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|mimetype
init|=
name|addUnstructuredChild
argument_list|(
name|properties
argument_list|,
literal|"mimetype"
argument_list|)
decl_stmt|;
name|mimetype
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"mimetype"
argument_list|)
expr_stmt|;
name|mimetype
operator|.
name|setProperty
argument_list|(
literal|"analyzed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|lastModified
init|=
name|addUnstructuredChild
argument_list|(
name|properties
argument_list|,
literal|"lastModified"
argument_list|)
decl_stmt|;
name|lastModified
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"jcr:content/metadata/jcr:lastModified"
argument_list|)
expr_stmt|;
name|lastModified
operator|.
name|setProperty
argument_list|(
literal|"ordered"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|status
init|=
name|addUnstructuredChild
argument_list|(
name|properties
argument_list|,
literal|"status"
argument_list|)
decl_stmt|;
name|status
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"jcr:content/metadata/status"
argument_list|)
expr_stmt|;
name|status
operator|.
name|setProperty
argument_list|(
literal|"propertyIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|idx
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|idx2
init|=
name|deserialize
argument_list|(
name|json
argument_list|)
decl_stmt|;
comment|//System.out.println(JsopDiff.diffToJsop(idx, idx2));
name|assertTrue
argument_list|(
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|idx
argument_list|,
name|idx2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|json2
init|=
name|serialize
argument_list|(
name|idx2
argument_list|)
decl_stmt|;
name|NodeState
name|idx3
init|=
name|deserialize
argument_list|(
name|json2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|idx3
argument_list|,
name|idx2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|deserialize
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|JsonDeserializer
name|deserializer
init|=
operator|new
name|JsonDeserializer
argument_list|(
operator|new
name|Base64BlobSerializer
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|deserializer
operator|.
name|deserialize
argument_list|(
name|json
argument_list|)
return|;
block|}
specifier|private
name|String
name|serialize
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|JsopBuilder
name|json
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
operator|new
name|JsonSerializer
argument_list|(
name|json
argument_list|,
literal|"{\"properties\":[\"*\", \"-:*\"]}"
argument_list|,
operator|new
name|BlobSerializer
argument_list|()
argument_list|)
operator|.
name|serialize
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Tree
name|addUnstructuredChild
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Tree
name|child
init|=
name|tree
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|child
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
end_class

end_unit

