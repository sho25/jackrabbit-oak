begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
operator|.
name|REP_NSDATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|namespace
operator|.
name|NamespaceConstants
operator|.
name|REP_PREFIXES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
class|class
name|NameValidator
extends|extends
name|DefaultValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NameValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|namespaces
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
decl_stmt|;
comment|/**      * Flag controlling the strictness of the namespace checks. if {@code true}      * namespaces existence will not be checked, otherwise referencing a      * non-existent namespace will cause a {@link CommitFailedException}.      *       * Used only for the case where lucene index definitions are registered via      * {@link RepositoryInitializer}s.      */
specifier|private
specifier|final
name|boolean
name|initPhase
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|strictInitialNSChecks
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.strictInitialNSChecks"
argument_list|)
decl_stmt|;
name|NameValidator
parameter_list|(
name|NodeState
name|namespaces
parameter_list|,
name|boolean
name|initPhase
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|namespaces
expr_stmt|;
name|this
operator|.
name|prefixes
operator|=
name|newHashSet
argument_list|(
name|namespaces
operator|.
name|getChildNode
argument_list|(
name|REP_NSDATA
argument_list|)
operator|.
name|getStrings
argument_list|(
name|REP_PREFIXES
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|initPhase
operator|=
name|initPhase
expr_stmt|;
block|}
comment|// escape non-printable non-USASCII characters using standard Java escapes
specifier|protected
specifier|static
name|String
name|getPrintableName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|' '
operator|&&
name|c
operator|<
literal|127
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\b'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\f'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\t'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\t"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\u%04x"
argument_list|,
operator|(
name|int
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|checkValidName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|int
name|colon
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
literal|0
condition|)
block|{
name|String
name|prefix
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
decl_stmt|;
name|checkPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|String
name|local
init|=
name|name
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|local
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|3
operator|&&
name|local
operator|.
name|charAt
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|==
literal|']'
condition|)
block|{
name|int
name|i
init|=
name|n
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|1
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|local
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'['
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|NAME
argument_list|,
literal|2
argument_list|,
literal|"Invalid name index in: "
operator|+
name|getPrintableName
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|local
operator|=
name|local
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Namespaces
operator|.
name|isValidLocalName
argument_list|(
name|local
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|NAME
argument_list|,
literal|3
argument_list|,
literal|"Invalid name: "
operator|+
name|getPrintableName
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|contains
argument_list|(
name|prefixes
argument_list|,
name|namespaces
argument_list|,
name|prefix
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Invalid namespace prefix("
operator|+
name|prefixes
operator|+
literal|"): "
operator|+
name|prefix
decl_stmt|;
if|if
condition|(
name|initPhase
operator|&&
operator|!
name|strictInitialNSChecks
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|NAME
argument_list|,
literal|1
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|,
name|NodeState
name|namespaces
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
return|return
name|prefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
operator|||
name|Namespaces
operator|.
name|collectNamespaces
argument_list|(
name|namespaces
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkValidValue
parameter_list|(
name|PropertyState
name|property
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|Type
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|Type
operator|.
name|NAMES
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
control|)
block|{
name|checkValidValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Type
operator|.
name|PATH
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|Type
operator|.
name|PATHS
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|value
argument_list|)
control|)
block|{
name|checkValidValue
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|checkValidValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkValidName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------------< NodeValidator>
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkValidName
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkValidValue
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkValidValue
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|checkValidName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

