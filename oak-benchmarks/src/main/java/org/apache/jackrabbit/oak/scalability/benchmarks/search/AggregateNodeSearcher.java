begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|benchmarks
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityAbstractSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityNodeRelationshipSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityAbstractSuite
operator|.
name|ExecutionContext
import|;
end_import

begin_comment
comment|/**  * Retrieves search property by iterating over nodes and then executes search using the retrieved  * criteria.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateNodeSearcher
extends|extends
name|SearchScalabilityBenchmark
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RELATIONSHIPS
init|=
literal|"relationships"
decl_stmt|;
comment|/**      * Queries for nodes with property satisfying a set of properties and ordering by the latest.      *      * @param qm the query manager      * @param context the execution context      * @return the query object      * @throws RepositoryException      */
specifier|protected
name|Query
name|getQuery
parameter_list|(
annotation|@
name|Nonnull
name|QueryManager
name|qm
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|relationships
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|RELATIONSHIPS
argument_list|)
decl_stmt|;
comment|// /jcr:root//element(*, ActivityType)[((id = 1234 or id = '1354'))] order by jcr:created
comment|// descending
name|StringBuilder
name|statement
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|statement
operator|.
name|append
argument_list|(
literal|"/jcr:root"
argument_list|)
operator|.
name|append
argument_list|(
literal|"//element(*, "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|CTX_ACT_NODE_TYPE_PROP
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|append
argument_list|(
literal|"[(("
argument_list|)
expr_stmt|;
comment|// adding all the possible mime-types in an OR fashion
for|for
control|(
name|String
name|relationship
range|:
name|relationships
control|)
block|{
name|statement
operator|.
name|append
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|SOURCE_ID
argument_list|)
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
operator|.
name|append
argument_list|(
name|relationship
argument_list|)
operator|.
name|append
argument_list|(
literal|"' or "
argument_list|)
expr_stmt|;
block|}
comment|// removing latest ' or '
name|statement
operator|.
name|delete
argument_list|(
name|statement
operator|.
name|lastIndexOf
argument_list|(
literal|" or "
argument_list|)
argument_list|,
name|statement
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|statement
operator|.
name|append
argument_list|(
literal|"))]"
argument_list|)
expr_stmt|;
comment|// order by jcr:created descending
name|statement
operator|.
name|append
argument_list|(
literal|" order by"
argument_list|)
operator|.
name|append
argument_list|(
literal|" @"
argument_list|)
operator|.
name|append
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|CREATED
argument_list|)
operator|.
name|append
argument_list|(
literal|" descending"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|statement
argument_list|)
expr_stmt|;
return|return
name|qm
operator|.
name|createQuery
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
name|QueryManager
name|qm
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Authorizable
argument_list|>
name|users
init|=
operator|(
name|List
argument_list|<
name|Authorizable
argument_list|>
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|CTX_USER
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|99
argument_list|)
decl_stmt|;
name|Authorizable
name|user
init|=
name|users
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|users
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|targets
init|=
name|getRelatedUsers
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|RELATIONSHIPS
argument_list|,
name|targets
argument_list|)
expr_stmt|;
name|qm
operator|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
expr_stmt|;
name|search
argument_list|(
name|qm
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|remove
argument_list|(
name|RELATIONSHIPS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getRelatedUsers
parameter_list|(
name|Session
name|session
parameter_list|,
name|Authorizable
name|user
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|targets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Node
name|relRootNode
init|=
name|session
operator|.
name|getNode
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|ScalabilityNodeRelationshipSuite
operator|.
name|RELATIONSHIPS
argument_list|)
decl_stmt|;
name|NodeIterator
name|children
init|=
name|relRootNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|targets
operator|.
name|add
argument_list|(
name|node
operator|.
name|getProperty
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|TARGET_ID
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|targets
return|;
block|}
block|}
end_class

end_unit

