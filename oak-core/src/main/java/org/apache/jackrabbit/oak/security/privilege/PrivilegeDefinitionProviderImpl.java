begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinitionProvider
import|;
end_import

begin_comment
comment|/**  * PrivilegeDefinitionProviderImpl... TODO  *  * TODO: review if jcr:all should be present in the content as well (updated in the privilege commit validator)  */
end_comment

begin_class
class|class
name|PrivilegeDefinitionProviderImpl
implements|implements
name|PrivilegeDefinitionProvider
implements|,
name|PrivilegeConstants
block|{
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
name|PrivilegeDefinitionProviderImpl
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|//--------------------------------------------------< PrivilegeProvider>---
annotation|@
name|Override
specifier|public
name|PrivilegeDefinition
index|[]
name|getPrivilegeDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
init|=
name|getReader
argument_list|()
operator|.
name|readDefinitions
argument_list|()
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|JCR_ALL
argument_list|,
name|getJcrAllDefinition
argument_list|(
name|definitions
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|PrivilegeDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrivilegeDefinition
name|getPrivilegeDefinition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|JCR_ALL
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getJcrAllDefinition
argument_list|(
name|getReader
argument_list|()
operator|.
name|readDefinitions
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getReader
argument_list|()
operator|.
name|readDefinition
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrivilegeDefinition
name|registerDefinition
parameter_list|(
specifier|final
name|String
name|privilegeName
parameter_list|,
specifier|final
name|boolean
name|isAbstract
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|declaredAggregateNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PrivilegeDefinition
name|definition
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|privilegeName
argument_list|,
name|isAbstract
argument_list|,
name|declaredAggregateNames
argument_list|)
decl_stmt|;
name|PrivilegeDefinitionWriter
name|writer
init|=
operator|new
name|PrivilegeDefinitionWriter
argument_list|(
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeDefinition
argument_list|(
name|definition
argument_list|)
expr_stmt|;
comment|// refresh the current root to make sure the definition is visible
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|definition
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|PrivilegeDefinitionReader
name|getReader
parameter_list|()
block|{
return|return
operator|new
name|PrivilegeDefinitionReader
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|PrivilegeDefinition
name|getJcrAllDefinition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
parameter_list|)
block|{
return|return
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|JCR_ALL
argument_list|,
literal|false
argument_list|,
name|definitions
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

