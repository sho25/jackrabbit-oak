begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NT_NAME
init|=
literal|"PropertyTest_Type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BOOLEAN_PROP_NAME
init|=
literal|"booleanProperty"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LONG_PROP_NAME
init|=
literal|"longProperty"
decl_stmt|;
specifier|private
name|Node
name|node
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|NodeTypeManager
name|ntMgr
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeTemplate
name|template
init|=
name|ntMgr
operator|.
name|createNodeTypeTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|setName
argument_list|(
name|NT_NAME
argument_list|)
expr_stmt|;
name|template
operator|.
name|setDeclaredSuperTypeNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|JcrConstants
operator|.
name|NT_BASE
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|setMixin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PropertyDefinitionTemplate
name|pdt
init|=
name|ntMgr
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
decl_stmt|;
name|pdt
operator|.
name|setName
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setRequiredType
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|template
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|pdt
argument_list|)
expr_stmt|;
name|pdt
operator|=
name|ntMgr
operator|.
name|createPropertyDefinitionTemplate
argument_list|()
expr_stmt|;
name|pdt
operator|.
name|setName
argument_list|(
name|LONG_PROP_NAME
argument_list|)
expr_stmt|;
name|pdt
operator|.
name|setRequiredType
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|template
operator|.
name|getPropertyDefinitionTemplates
argument_list|()
operator|.
name|add
argument_list|(
name|pdt
argument_list|)
expr_stmt|;
name|ntMgr
operator|.
name|registerNodeType
argument_list|(
name|template
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|,
name|NT_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NT_NAME
argument_list|,
name|node
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMixTitleOnUnstructured
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"unstructured"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
literal|"mix:title"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create jcr:title property with type LONG => declaring NT is nt:unstructured
name|Property
name|title
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|title
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// changing value to STRING => ValueFormatException expected
try|try
block|{
name|title
operator|.
name|setValue
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// re-setting property to STRING -> change definition => declaring NT is mix:title
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"str"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMixTitleOnUnstructured2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"unstructured"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
literal|"mix:title"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create jcr:title as STRING => declaring NT is mix:title
name|Property
name|title
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|title
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// changing value to BOOLEAN => value is converted
name|title
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-setting property to type BOOLEAN => declaring NT is nt:unstructured
name|title
operator|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// same if property is set to type DOUBLE
name|title
operator|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|2.3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|DOUBLE
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// setting property to STRING => declaring NT is back to mix:title
name|title
operator|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"str"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMixTitleOnFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"folder"
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|)
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
literal|"mix:title"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create jcr:title property with type STRING (converted) => declaring NT is mix:title (and
name|Property
name|title
init|=
name|n
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|title
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
comment|// set value to BINARY -> changes value but not definition (binary gets converted)
name|title
operator|.
name|setValue
argument_list|(
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"abc"
argument_list|,
name|PropertyType
operator|.
name|BINARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|title
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|title
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mix:title"
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testLongRequiredTypeBoolean
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Conversion from LONG to BOOLEAN must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testPathRequiredTypeBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|pathValue
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/path"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|,
name|pathValue
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Conversion from PATH to BOOLEAN must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testStringRequiredTypeBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|stringValue
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"true"
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|,
name|stringValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|p
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NT_NAME
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredTypeBooleanChangeDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|p
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NT_NAME
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|p
operator|.
name|setValue
argument_list|(
literal|24.4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Conversion from DOUBLE to BOOLEAN must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|BOOLEAN_PROP_NAME
argument_list|,
literal|24.4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Conversion from DOUBLE to BOOLEAN must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testBooleanRequiredTypeLong
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|LONG_PROP_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Conversion from BOOLEAN to LONG must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testPathRequiredTypeLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|pathValue
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/path"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|LONG_PROP_NAME
argument_list|,
name|pathValue
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Conversion from PATH to LONG must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testRequiredTypeLongChangeBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Property
name|p
init|=
name|node
operator|.
name|setProperty
argument_list|(
name|LONG_PROP_NAME
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyDefinition
name|def
init|=
name|p
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NT_NAME
argument_list|,
name|def
operator|.
name|getDeclaringNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|p
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Conversion from BOOLEAN to LONG must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|LONG_PROP_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Conversion from BOOLEAN to LONG must throw ValueFormatException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
end_class

end_unit

