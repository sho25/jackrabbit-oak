begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Scalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|KernelContentTree
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_comment
comment|/**  * This {@code Branch} implementation accumulates all changes into a json diff  * and applies them to the microkernel on  * {@link NodeStore#merge(org.apache.jackrabbit.oak.api.Branch)}  *  * TODO: review/rewrite when OAK-45 is resolved  * When the MicroKernel has support for branching and merging private working copies,  * this implementation could:  * - directly write every operation through to the private working copy  * - batch write operations through to the private working copy when the  *   transient space gets too big.  * - spool write operations through to the private working copy on a background thread  */
end_comment

begin_class
specifier|public
class|class
name|KernelBranch
implements|implements
name|Branch
block|{
comment|/** Log of changes to this branch */
specifier|private
specifier|final
name|ChangeLog
name|changeLog
init|=
operator|new
name|ChangeLog
argument_list|()
decl_stmt|;
comment|/** Base node state of this private branch */
specifier|private
specifier|final
name|NodeState
name|base
decl_stmt|;
comment|/** Root state of this branch */
specifier|private
specifier|final
name|KernelContentTree
name|root
decl_stmt|;
comment|/**      * Create a new branch for the given base node state      * @param base  base node state of the private branch      */
name|KernelBranch
parameter_list|(
name|NodeState
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|root
operator|=
operator|new
name|KernelContentTree
argument_list|(
name|base
argument_list|,
name|changeLog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|move
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelContentTree
name|source
init|=
name|getTransientState
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelContentTree
name|destParent
init|=
name|getTransientState
argument_list|(
name|getParentPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
return|return
name|destParent
operator|!=
literal|null
operator|&&
name|source
operator|.
name|move
argument_list|(
name|destParent
argument_list|,
name|destName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|copy
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelContentTree
name|sourceNode
init|=
name|getTransientState
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KernelContentTree
name|destParent
init|=
name|getTransientState
argument_list|(
name|getParentPath
argument_list|(
name|destPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
return|return
name|destParent
operator|!=
literal|null
operator|&&
name|sourceNode
operator|.
name|copy
argument_list|(
name|destParent
argument_list|,
name|destName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentTree
name|getContentTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getTransientState
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< internal>---
comment|/**      * Return the base node state of this private branch      * @return base node state      */
name|NodeState
name|getBaseNodeState
parameter_list|()
block|{
return|return
name|base
return|;
block|}
comment|/**      * Atomically merges the changes from this branch back into the      * {@code target}.      *      * @param microkernel Microkernel instance for applying the changes      * @param target target of the merge operation      * @return node state resulting from merging      */
name|KernelNodeState
name|mergeInto
parameter_list|(
name|MicroKernel
name|microkernel
parameter_list|,
name|KernelNodeState
name|target
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|target
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|targetRevision
init|=
name|target
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|microkernel
operator|.
name|commit
argument_list|(
name|targetPath
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|,
name|targetRevision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|KernelNodeState
argument_list|(
name|microkernel
argument_list|,
name|targetPath
argument_list|,
name|rev
argument_list|)
return|;
block|}
comment|/**      * Get a transient node state for the node identified by      * {@code path}      * @param path  the path to the node state      * @return  a {@link KernelContentTree} instance for the item      *          at {@code path} or {@code null} if no such item exits.      */
specifier|private
name|KernelContentTree
name|getTransientState
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|KernelContentTree
name|state
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|state
operator|=
name|state
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|state
return|;
block|}
comment|/**      * Path of the item {@code name} of the given {@code state}      *      * @param state      * @param name The item name.      * @return relative path of the item {@code name}      */
specifier|private
specifier|static
name|String
name|path
parameter_list|(
name|ContentTree
name|state
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|path
init|=
name|state
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
else|:
name|path
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|Scalar
name|scalar
parameter_list|)
block|{
switch|switch
condition|(
name|scalar
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|JsonBuilder
operator|.
name|encode
argument_list|(
name|scalar
operator|.
name|getBoolean
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|JsonBuilder
operator|.
name|encode
argument_list|(
name|scalar
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|JsonBuilder
operator|.
name|encode
argument_list|(
name|scalar
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
literal|null
return|;
comment|// TODO implement encoding of binaries
case|case
name|STRING
case|:
return|return
name|JsonBuilder
operator|.
name|encode
argument_list|(
name|scalar
operator|.
name|getString
argument_list|()
argument_list|)
return|;
case|case
name|NULL
case|:
return|return
literal|"null"
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unreachable"
argument_list|)
throw|;
comment|// Make javac happy
block|}
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|Iterable
argument_list|<
name|Scalar
argument_list|>
name|scalars
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|Scalar
name|scalar
range|:
name|scalars
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|scalar
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * This {@code Listener} implementation records all changes to      * a associated branch as JSOP.      */
specifier|private
specifier|static
class|class
name|ChangeLog
implements|implements
name|Listener
block|{
specifier|private
specifier|final
name|StringBuilder
name|jsop
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addChild
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeChild
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|Scalar
name|value
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Scalar
argument_list|>
name|values
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelContentTree
name|moved
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|">\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|tree
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|moved
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|KernelContentTree
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelContentTree
name|copied
parameter_list|)
block|{
name|jsop
operator|.
name|append
argument_list|(
literal|"*\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|state
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|copied
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toJsop
parameter_list|()
block|{
return|return
name|jsop
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

