begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Array utility methods.  */
end_comment

begin_class
specifier|public
class|class
name|ArrayUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_STRING_ARRAY
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
index|[]
name|EMPTY_LONG_ARRAY
init|=
operator|new
name|long
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|EMPTY_INTEGER_ARRAY
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|ArrayUtils
parameter_list|()
block|{
comment|// utility class
block|}
comment|/**      * Replace an element in a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @param x the value to add      * @return the new array      */
annotation|@
name|Nonnull
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayReplace
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|,
name|T
name|x
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
index|[]
name|v2
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|values
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|v2
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|v2
index|[
name|index
index|]
operator|=
name|x
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Insert an element into a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @param x the value to add      * @return the new array      */
specifier|public
specifier|static
name|int
index|[]
name|arrayInsert
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
name|int
index|[]
name|v2
init|=
operator|new
name|int
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
name|v2
index|[
name|index
index|]
operator|=
name|x
expr_stmt|;
name|copyArrayAdd
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Insert an element into a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @param x the value to add      * @return the new array      */
specifier|public
specifier|static
name|long
index|[]
name|arrayInsert
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|,
name|long
name|x
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
name|long
index|[]
name|v2
init|=
operator|new
name|long
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
name|v2
index|[
name|index
index|]
operator|=
name|x
expr_stmt|;
name|copyArrayAdd
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Insert an element into a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @param x the value to add      * @return the new array      */
annotation|@
name|Nonnull
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayInsert
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|,
name|T
name|x
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
index|[]
name|v2
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|values
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
operator|+
literal|1
argument_list|)
decl_stmt|;
name|v2
index|[
name|index
index|]
operator|=
name|x
expr_stmt|;
name|copyArrayAdd
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Insert an element into a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @param x the value to add      * @return the new array      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
index|[]
name|arrayInsert
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|x
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|v2
init|=
operator|new
name|String
index|[
name|size
operator|+
literal|1
index|]
decl_stmt|;
name|v2
index|[
name|index
index|]
operator|=
name|x
expr_stmt|;
name|copyArrayAdd
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Remove an element from a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @return the new array      */
specifier|public
specifier|static
name|int
index|[]
name|arrayRemove
parameter_list|(
name|int
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|EMPTY_INTEGER_ARRAY
return|;
block|}
name|int
index|[]
name|v2
init|=
operator|new
name|int
index|[
name|size
operator|-
literal|1
index|]
decl_stmt|;
name|copyArrayRemove
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Remove an element from a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @return the new array      */
annotation|@
name|Nonnull
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayRemove
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
index|[]
name|v2
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|values
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|copyArrayRemove
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Remove an element from a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @return the new array      */
specifier|public
specifier|static
name|long
index|[]
name|arrayRemove
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|EMPTY_LONG_ARRAY
return|;
block|}
name|long
index|[]
name|v2
init|=
operator|new
name|long
index|[
name|size
operator|-
literal|1
index|]
decl_stmt|;
name|copyArrayRemove
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
comment|/**      * Remove an element from a clone of the array at the given position.      *      * @param values the values      * @param index the index      * @return the new array      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
index|[]
name|arrayRemove
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|size
init|=
name|values
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
return|return
name|EMPTY_STRING_ARRAY
return|;
block|}
name|String
index|[]
name|v2
init|=
operator|new
name|String
index|[
name|size
operator|-
literal|1
index|]
decl_stmt|;
name|copyArrayRemove
argument_list|(
name|values
argument_list|,
name|v2
argument_list|,
name|size
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
specifier|private
specifier|static
name|void
name|copyArrayAdd
parameter_list|(
name|Object
name|src
parameter_list|,
name|Object
name|dst
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|dst
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|size
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|index
argument_list|,
name|dst
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|size
operator|-
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copyArrayRemove
parameter_list|(
name|Object
name|src
parameter_list|,
name|Object
name|dst
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|dst
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|size
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|dst
argument_list|,
name|index
argument_list|,
name|size
operator|-
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check whether an array contains a given element      * @param array      * @param element      * @param<T>      * @return {@code true} iff {@code array} contains {@code element}.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|contains
parameter_list|(
name|T
index|[]
name|array
parameter_list|,
name|T
name|element
parameter_list|)
block|{
for|for
control|(
name|T
name|t
range|:
name|array
control|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
operator|&&
name|t
operator|==
literal|null
operator|||
name|element
operator|!=
literal|null
operator|&&
name|element
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Convert an array to a set.      * @param elements      * @param<T>      * @return      */
annotation|@
name|Nonnull
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|toSet
parameter_list|(
name|T
modifier|...
name|elements
parameter_list|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|T
argument_list|>
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

