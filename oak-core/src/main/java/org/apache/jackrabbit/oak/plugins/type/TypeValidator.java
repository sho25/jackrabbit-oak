begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|type
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_class
class|class
name|TypeValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|final
name|NodeTypeManager
name|ntm
decl_stmt|;
specifier|public
name|TypeValidator
parameter_list|(
name|NodeTypeManager
name|ntm
parameter_list|)
block|{
name|this
operator|.
name|ntm
operator|=
name|ntm
expr_stmt|;
block|}
comment|//-------------------------------------------------------< NodeValidator>
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|validateType
argument_list|(
name|after
argument_list|)
expr_stmt|;
comment|// TODO: validate added property
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|validateType
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO: validate removed property
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO: validate added child node
comment|// TODO: get the type for validating the child contents
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO: validate changed child node
comment|// TODO: get the type to validating the child contents
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
comment|// TODO: validate removed child node
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|validateType
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|boolean
name|primaryType
init|=
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|mixinType
init|=
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryType
operator|||
name|mixinType
condition|)
block|{
try|try
block|{
for|for
control|(
name|CoreValue
name|cv
range|:
name|after
operator|.
name|getValues
argument_list|()
control|)
block|{
name|String
name|ntName
init|=
name|cv
operator|.
name|getString
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't create node with abstract type: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryType
operator|&&
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't assign mixin for primary type: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mixinType
operator|&&
operator|!
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't assign primary type for mixin: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|throwConstraintViolationException
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
operator|new
name|ConstraintViolationException
argument_list|(
name|message
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

