begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_class
specifier|public
class|class
name|BundlingHandler
block|{
specifier|private
specifier|final
name|BundledTypesRegistry
name|registry
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|BundlingContext
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|metaProps
decl_stmt|;
specifier|public
name|BundlingHandler
parameter_list|(
name|BundledTypesRegistry
name|registry
parameter_list|)
block|{
name|this
argument_list|(
name|registry
argument_list|,
name|BundlingContext
operator|.
name|NULL
argument_list|,
name|ROOT_PATH
argument_list|,
name|Collections
operator|.
expr|<
name|PropertyState
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BundlingHandler
parameter_list|(
name|BundledTypesRegistry
name|registry
parameter_list|,
name|BundlingContext
name|ctx
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|registry
argument_list|,
name|ctx
argument_list|,
name|path
argument_list|,
name|Collections
operator|.
expr|<
name|PropertyState
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BundlingHandler
parameter_list|(
name|BundledTypesRegistry
name|registry
parameter_list|,
name|BundlingContext
name|ctx
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|metaProps
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|metaProps
operator|=
name|metaProps
expr_stmt|;
block|}
specifier|public
name|String
name|getPropertyPath
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|isBundling
argument_list|()
condition|?
name|ctx
operator|.
name|getPropertyPath
argument_list|(
name|propertyName
argument_list|)
else|:
name|propertyName
return|;
block|}
specifier|public
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|getMetaProps
parameter_list|()
block|{
return|return
name|metaProps
return|;
block|}
specifier|public
name|String
name|getRootBundlePath
parameter_list|()
block|{
return|return
name|ctx
operator|.
name|isBundling
argument_list|()
condition|?
name|ctx
operator|.
name|bundlingPath
else|:
name|path
return|;
block|}
specifier|public
name|BundlingHandler
name|childAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|String
name|childPath
init|=
name|childPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BundlingContext
name|childContext
decl_stmt|;
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|metaProps
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|Matcher
name|childMatcher
init|=
name|ctx
operator|.
name|matcher
operator|.
name|next
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|childMatcher
operator|.
name|isMatch
argument_list|()
condition|)
block|{
comment|//TODO Add meta prop for bundled child node
name|childContext
operator|=
name|createChildContext
argument_list|(
name|childMatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocumentBundlor
name|bundlor
init|=
name|registry
operator|.
name|getBundlor
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundlor
operator|!=
literal|null
condition|)
block|{
name|PropertyState
name|bundlorConfig
init|=
name|bundlor
operator|.
name|asPropertyState
argument_list|()
decl_stmt|;
name|metaProps
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|bundlorConfig
argument_list|)
expr_stmt|;
name|childContext
operator|=
operator|new
name|BundlingContext
argument_list|(
name|childPath
argument_list|,
name|bundlor
operator|.
name|createMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childContext
operator|=
name|BundlingContext
operator|.
name|NULL
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|,
name|childContext
argument_list|,
name|childPath
argument_list|,
name|metaProps
argument_list|)
return|;
block|}
specifier|public
name|BundlingHandler
name|childDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|String
name|childPath
init|=
name|childPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BundlingContext
name|childContext
decl_stmt|;
name|Matcher
name|childMatcher
init|=
name|ctx
operator|.
name|matcher
operator|.
name|next
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|childMatcher
operator|.
name|isMatch
argument_list|()
condition|)
block|{
comment|//TODO Add meta prop for bundled child node
name|childContext
operator|=
name|createChildContext
argument_list|(
name|childMatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childContext
operator|=
name|getBundlorContext
argument_list|(
name|childPath
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|,
name|childContext
argument_list|,
name|childPath
argument_list|)
return|;
block|}
specifier|public
name|BundlingHandler
name|childChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|String
name|childPath
init|=
name|childPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BundlingContext
name|childContext
decl_stmt|;
name|Matcher
name|childMatcher
init|=
name|ctx
operator|.
name|matcher
operator|.
name|next
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|childMatcher
operator|.
name|isMatch
argument_list|()
condition|)
block|{
name|childContext
operator|=
name|createChildContext
argument_list|(
name|childMatcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childContext
operator|=
name|getBundlorContext
argument_list|(
name|childPath
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|,
name|childContext
argument_list|,
name|childPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isBundlingRoot
parameter_list|()
block|{
if|if
condition|(
name|ctx
operator|.
name|isBundling
argument_list|()
condition|)
block|{
return|return
name|ctx
operator|.
name|bundlingPath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|childPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|BundlingContext
name|createChildContext
parameter_list|(
name|Matcher
name|childMatcher
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|child
argument_list|(
name|childMatcher
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BundlingContext
name|getBundlorContext
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|BundlingContext
name|result
init|=
name|BundlingContext
operator|.
name|NULL
decl_stmt|;
name|PropertyState
name|bundlorConfig
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|DocumentBundlor
operator|.
name|META_PROP_PATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundlorConfig
operator|!=
literal|null
condition|)
block|{
name|DocumentBundlor
name|bundlor
init|=
name|DocumentBundlor
operator|.
name|from
argument_list|(
name|bundlorConfig
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|BundlingContext
argument_list|(
name|path
argument_list|,
name|bundlor
operator|.
name|createMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
class|class
name|BundlingContext
block|{
specifier|static
specifier|final
name|BundlingContext
name|NULL
init|=
operator|new
name|BundlingContext
argument_list|(
literal|""
argument_list|,
name|Matcher
operator|.
name|FAILED
argument_list|)
decl_stmt|;
specifier|final
name|String
name|bundlingPath
decl_stmt|;
specifier|final
name|Matcher
name|matcher
decl_stmt|;
specifier|public
name|BundlingContext
parameter_list|(
name|String
name|bundlingPath
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|this
operator|.
name|bundlingPath
operator|=
name|bundlingPath
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
block|}
specifier|public
name|BundlingContext
name|child
parameter_list|(
name|Matcher
name|matcher
parameter_list|)
block|{
return|return
operator|new
name|BundlingContext
argument_list|(
name|bundlingPath
argument_list|,
name|matcher
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isBundling
parameter_list|()
block|{
return|return
name|matcher
operator|.
name|isMatch
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPropertyPath
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|matcher
operator|.
name|getMatchedPath
argument_list|()
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

