begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|MERGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|OAK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ChangeDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_comment
comment|/**  * A base implementation of a node store branch, which supports partially  * persisted branches.  *<p>  * This implementation keeps changes in memory up to a certain limit and writes  * them back to the underlying branch when the limit is exceeded.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractNodeStoreBranch
parameter_list|<
name|S
extends|extends
name|NodeStore
parameter_list|,
name|N
extends|extends
name|NodeState
parameter_list|>
implements|implements
name|NodeStoreBranch
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/** The underlying store to which this branch belongs */
specifier|protected
specifier|final
name|S
name|store
decl_stmt|;
comment|/** The dispatcher to report changes */
specifier|protected
specifier|final
name|ChangeDispatcher
name|dispatcher
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maximumBackoff
decl_stmt|;
comment|/**      * State of the this branch. Either {@link Unmodified}, {@link InMemory}, {@link Persisted}      * or {@link Merged}.      * @see BranchState      */
specifier|private
name|BranchState
name|branchState
decl_stmt|;
specifier|public
name|AbstractNodeStoreBranch
parameter_list|(
name|S
name|kernelNodeStore
parameter_list|,
name|ChangeDispatcher
name|dispatcher
parameter_list|,
name|N
name|base
parameter_list|)
block|{
name|this
argument_list|(
name|kernelNodeStore
argument_list|,
name|dispatcher
argument_list|,
name|base
argument_list|,
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|10
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractNodeStoreBranch
parameter_list|(
name|S
name|kernelNodeStore
parameter_list|,
name|ChangeDispatcher
name|dispatcher
parameter_list|,
name|N
name|base
parameter_list|,
name|long
name|maximumBackoff
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|kernelNodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|branchState
operator|=
operator|new
name|Unmodified
argument_list|(
name|checkNotNull
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maximumBackoff
operator|=
name|maximumBackoff
expr_stmt|;
block|}
comment|/**      * @return the current root of the underlying store.      */
specifier|protected
specifier|abstract
name|N
name|getRoot
parameter_list|()
function_decl|;
comment|/**      * Create a new branch state from the given state.      *      * @param state the state from where to create a branch from.      * @return the branch state.      */
specifier|protected
specifier|abstract
name|N
name|createBranch
parameter_list|(
name|N
name|state
parameter_list|)
function_decl|;
comment|/**      * Rebases the branch head to the given base.      *      * @param branchHead the head state of a branch.      * @param base the new base state for the branch.      * @return the rebased branch head.      */
specifier|protected
specifier|abstract
name|N
name|rebase
parameter_list|(
name|N
name|branchHead
parameter_list|,
name|N
name|base
parameter_list|)
function_decl|;
comment|/**      * Merges the branch head and returns the result state of the merge.      *      * @param branchHead the head of the branch to merge.      * @param info the commit info or<code>null</code> if none available.      * @return the result state of the merge.      * @throws CommitFailedException if the merge fails. The type of the      *                    exception will be {@code CommitFailedException.MERGE}.      */
specifier|protected
specifier|abstract
name|N
name|merge
parameter_list|(
name|N
name|branchHead
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
comment|/**      * Resets the branch head to the given ancestor on the same branch.      *      * @param branchHead the head of the branch to reset.      * @param ancestor the state of the branch to reset to.      * @return the state of the reset branch. This is not necessarily the same      *         instance as {@code ancestor} but is guaranteed to be equal to it.      */
annotation|@
name|Nonnull
specifier|protected
specifier|abstract
name|N
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|N
name|branchHead
parameter_list|,
annotation|@
name|Nonnull
name|N
name|ancestor
parameter_list|)
function_decl|;
comment|/**      * Persists the changes between<code>toPersist</code> and<code>base</code>      * to the underlying store.      *<p>      * While this method does not declare any exceptions to be thrown, an      * implementation may still throw a runtime exception specific to the      * concrete implementation of this node store branch.      *      * @param toPersist the state with the changes on top of<code>base</code>.      * @param base the base state.      * @param info the commit info or<code>null</code> if there is none.      * @return the state with the persisted changes.      */
specifier|protected
specifier|abstract
name|N
name|persist
parameter_list|(
name|NodeState
name|toPersist
parameter_list|,
name|N
name|base
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
function_decl|;
comment|/**      * Perform a potentially optimized copy operation directly on the underlying      * store.      *<p>      * This base class ensures that preconditions are met (e.g. the source      * exists), which means an implementation of this method just needs to      * perform the copy operation.      *<p>      * While this method does not declare any exceptions to be thrown, an      * implementation may still throw a runtime exception specific to the      * concrete implementation of this node store branch.      *      * @param source the source of the copy operation.      * @param target the destination of the copy operation.      * @param base the base state.      * @return the result of the copy operation.      */
specifier|protected
specifier|abstract
name|N
name|copy
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|,
name|N
name|base
parameter_list|)
function_decl|;
comment|/**      * Perform a potentially optimized move operation directly on the underlying      * store.      *<p>      * This base class ensures that preconditions are met (e.g. the source      * exists), which means an implementation of this method just needs to      * perform the move operation.      *<p>      * While this method does not declare any exceptions to be thrown, an      * implementation may still throw a runtime exception specific to the      * concrete implementation of this node store branch.      *      * @param source the source of the move operation.      * @param target the destination of the move operation.      * @param base the base state.      * @return the result of the move operation.      */
specifier|protected
specifier|abstract
name|N
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|,
name|N
name|base
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getBase
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|getBase
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|branchState
operator|.
name|getHead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRoot
parameter_list|(
name|NodeState
name|newRoot
parameter_list|)
block|{
name|branchState
operator|.
name|setRoot
argument_list|(
name|checkNotNull
argument_list|(
name|newRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Moves a node in this private branch.      *      * @param source source path      * @param target target path      * @return  {@code true} iff the move succeeded      * @throws IllegalStateException if the branch is already merged      */
specifier|public
name|boolean
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|checkNotNull
argument_list|(
name|source
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|target
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|getNode
argument_list|(
name|source
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// source does not exist
return|return
literal|false
return|;
block|}
name|NodeState
name|destParent
init|=
name|getNode
argument_list|(
name|getParentPath
argument_list|(
name|target
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destParent
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// parent of destination does not exist
return|return
literal|false
return|;
block|}
if|if
condition|(
name|destParent
operator|.
name|getChildNode
argument_list|(
name|getName
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// destination exists already
return|return
literal|false
return|;
block|}
name|branchState
operator|.
name|persist
argument_list|()
operator|.
name|move
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Copies a node in this private branch.      *      * @param source source path      * @param target target path      * @return  {@code true} iff the copy succeeded      * @throws IllegalStateException if the branch is already merged      */
specifier|public
name|boolean
name|copy
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getNode
argument_list|(
name|checkNotNull
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// source does not exist
return|return
literal|false
return|;
block|}
name|NodeState
name|destParent
init|=
name|getNode
argument_list|(
name|getParentPath
argument_list|(
name|checkNotNull
argument_list|(
name|target
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destParent
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// parent of destination does not exist
return|return
literal|false
return|;
block|}
if|if
condition|(
name|destParent
operator|.
name|getChildNode
argument_list|(
name|getName
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// destination exists already
return|return
literal|false
return|;
block|}
name|branchState
operator|.
name|persist
argument_list|()
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|CommitFailedException
name|ex
init|=
literal|null
decl_stmt|;
for|for
control|(
name|long
name|backoff
init|=
literal|100
init|;
name|backoff
operator|<
name|maximumBackoff
condition|;
name|backoff
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|backoff
argument_list|,
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|branchState
operator|.
name|merge
argument_list|(
name|checkNotNull
argument_list|(
name|hook
argument_list|)
argument_list|,
name|info
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
comment|// only retry on merge failures. these may be caused by
comment|// changes introduce by a commit hook and may be resolved
comment|// by a rebase and running the hook again
if|if
condition|(
operator|!
name|e
operator|.
name|isOfType
argument_list|(
name|MERGE
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|// if we get here retrying failed
throw|throw
name|ex
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rebase
parameter_list|()
block|{
name|branchState
operator|.
name|rebase
argument_list|()
expr_stmt|;
block|}
comment|//----------------------------< internal>----------------------------------
specifier|private
name|NodeState
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeState
name|node
init|=
name|getHead
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * Sub classes of this class represent a state a branch can be in. See the individual      * sub classes for permissible state transitions.      */
specifier|private
specifier|abstract
class|class
name|BranchState
block|{
comment|/** Root state of the base revision of this branch */
specifier|protected
name|N
name|base
decl_stmt|;
specifier|protected
name|BranchState
parameter_list|(
name|N
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
comment|/**          * Persist this branch to an underlying branch in the {@code MicroKernel}.          */
name|Persisted
name|persist
parameter_list|()
block|{
name|Persisted
name|p
init|=
operator|new
name|Persisted
argument_list|(
name|base
argument_list|,
name|getHead
argument_list|()
argument_list|)
decl_stmt|;
name|branchState
operator|=
name|p
expr_stmt|;
return|return
name|p
return|;
block|}
name|N
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
annotation|@
name|Nonnull
specifier|abstract
name|NodeState
name|getHead
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|rebase
parameter_list|()
function_decl|;
comment|/**          * Runs the commit hook on the changes tracked with this branch state          * merges the result.          *<p>          * In addition to the {@link CommitFailedException}, an implementation          * may also throw an unchecked exception when an error occurs while          * persisting the changes. This exception is implementation specific          * and it is the responsibility of the caller to convert it into a          * {@link CommitFailedException}.          *          * @param hook the commit hook to run.          * @param info the associated commit info.          * @return the result of the merge.          * @throws CommitFailedException if a commit hook rejected the changes          *          or the actual merge operation failed. An implementation must          *          use the appropriate type in {@code CommitFailedException} to          *          indicate the cause of the exception.          */
annotation|@
name|Nonnull
specifier|abstract
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
function_decl|;
block|}
comment|/**      * Instances of this class represent a branch whose base and head are the same.      *<p>      * Transitions to:      *<ul>      *<li>{@link InMemory} on {@link #setRoot(NodeState)} if the new root differs      *         from the current base</li>.      *<li>{@link Merged} on {@link #merge(CommitHook, CommitInfo)}</li>      *</ul>      */
specifier|private
class|class
name|Unmodified
extends|extends
name|BranchState
block|{
name|Unmodified
parameter_list|(
name|N
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Unmodified["
operator|+
name|base
operator|+
literal|']'
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|base
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
operator|!
name|base
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|branchState
operator|=
operator|new
name|InMemory
argument_list|(
name|base
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|base
operator|=
name|getRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
block|}
comment|/**      * Instances of this class represent a branch whose base and head differ.      * All changes are kept in memory.      *<p>      * Transitions to:      *<ul>      *<li>{@link Unmodified} on {@link #setRoot(NodeState)} if the new root is the same      *         as the base of this branch or      *<li>{@link Persisted} otherwise.      *<li>{@link Merged} on {@link #merge(CommitHook, CommitInfo)}</li>      *</ul>      */
specifier|private
class|class
name|InMemory
extends|extends
name|BranchState
block|{
comment|/** Root state of the transient head. */
specifier|private
name|NodeState
name|head
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InMemory["
operator|+
name|base
operator|+
literal|", "
operator|+
name|head
operator|+
literal|']'
return|;
block|}
name|InMemory
parameter_list|(
name|N
name|base
parameter_list|,
name|NodeState
name|head
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|head
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|head
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|branchState
operator|=
operator|new
name|Unmodified
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|head
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|head
operator|=
name|root
expr_stmt|;
name|persist
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|N
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|head
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
operator|new
name|ConflictAnnotatingRebaseDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|base
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|rebase
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|base
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|toCommit
init|=
name|checkNotNull
argument_list|(
name|hook
argument_list|)
operator|.
name|processCommit
argument_list|(
name|base
argument_list|,
name|head
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeState
name|newHead
init|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|toCommit
argument_list|,
name|base
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|newHead
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
name|newHead
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|MERGE
argument_list|,
literal|1
argument_list|,
literal|"Failed to merge changes to the underlying store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|getRoot
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Instances of this class represent a branch whose base and head differ.      * All changes are persisted to an underlying branch in the {@code MicroKernel}.      *<p>      * Transitions to:      *<ul>      *<li>{@link Unmodified} on {@link #setRoot(NodeState)} if the new root is the same      *         as the base of this branch.      *<li>{@link ResetFailed} on failed reset in {@link #merge(CommitHook, CommitInfo)}</li>      *<li>{@link Merged} on successful {@link #merge(CommitHook, CommitInfo)}</li>      *</ul>      */
specifier|private
class|class
name|Persisted
extends|extends
name|BranchState
block|{
comment|/** Root state of the transient head, top of persisted branch. */
specifier|private
name|N
name|head
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Persisted["
operator|+
name|base
operator|+
literal|", "
operator|+
name|head
operator|+
literal|']'
return|;
block|}
name|Persisted
parameter_list|(
name|N
name|base
parameter_list|,
name|NodeState
name|head
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|head
operator|=
name|createBranch
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|persistTransientHead
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
name|void
name|move
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|head
operator|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|move
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
name|void
name|copy
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|head
operator|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
return|return
name|head
return|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|branchState
operator|=
operator|new
name|Unmodified
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|head
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|persistTransientHead
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
name|N
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|head
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
comment|// Nothing was written to this branch: set new base revision
name|head
operator|=
name|root
expr_stmt|;
name|base
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
comment|// perform rebase in store
name|head
operator|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|rebase
argument_list|(
name|head
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|base
operator|=
name|root
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|rebase
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|base
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|toCommit
init|=
name|checkNotNull
argument_list|(
name|hook
argument_list|)
operator|.
name|processCommit
argument_list|(
name|base
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|N
name|newRoot
init|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|toCommit
argument_list|,
name|head
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|newRoot
operator|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|merge
argument_list|(
name|newRoot
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
try|try
block|{
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|reset
argument_list|(
name|newRoot
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|CommitFailedException
name|ex
init|=
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|100
argument_list|,
literal|"Branch reset failed"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|branchState
operator|=
operator|new
name|ResetFailed
argument_list|(
name|base
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|branchState
operator|=
operator|new
name|Merged
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|newRoot
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|newRoot
return|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|getRoot
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|persistTransientHead
parameter_list|(
name|NodeState
name|newHead
parameter_list|)
block|{
name|head
operator|=
name|AbstractNodeStoreBranch
operator|.
name|this
operator|.
name|persist
argument_list|(
name|newHead
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Instances of this class represent a branch that has already been merged.      * All methods throw an {@code IllegalStateException}.      *<p>      * Transitions to: none.      */
specifier|private
class|class
name|Merged
extends|extends
name|BranchState
block|{
specifier|protected
name|Merged
parameter_list|(
name|N
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Merged["
operator|+
name|base
operator|+
literal|']'
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|getHead
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch has already been merged"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Instances of this class represent a branch with persisted changes and      * a failed attempt to reset changes.      *<p>      * Transitions to: none.      */
specifier|private
class|class
name|ResetFailed
extends|extends
name|BranchState
block|{
comment|/**          * The exception of the failed reset.          */
specifier|private
specifier|final
name|CommitFailedException
name|ex
decl_stmt|;
specifier|protected
name|ResetFailed
parameter_list|(
name|N
name|base
parameter_list|,
name|CommitFailedException
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|ex
operator|=
name|e
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
name|NodeState
name|getHead
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setRoot
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|rebase
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Branch with failed reset"
argument_list|)
throw|;
block|}
comment|/**          * Always throws the {@code CommitFailedException} passed to the          * constructor of this branch state.          *          * @throws CommitFailedException the exception of the failed reset.          */
annotation|@
name|Nonnull
annotation|@
name|Override
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|CommitHook
name|hook
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_class

end_unit

