begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_comment
comment|/**  * This class provides login contexts that accept any credentials and doesn't  * validate specified workspace name.  */
end_comment

begin_class
specifier|public
class|class
name|OpenLoginContextProvider
implements|implements
name|LoginContextProvider
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|OakLoginContext
name|getLoginContext
parameter_list|(
specifier|final
name|Credentials
name|credentials
parameter_list|,
name|String
name|workspaceName
parameter_list|)
block|{
return|return
operator|new
name|OakLoginContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Subject
name|getSubject
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
name|subject
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
block|}
name|subject
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
return|return
name|subject
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|login
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|logout
parameter_list|()
block|{
comment|// do nothing
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

