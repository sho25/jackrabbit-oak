begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
operator|.
name|DocumentBundlor
operator|.
name|META_PROP_NODE
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|BundlorUtils
block|{
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|getMatchingProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|props
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matcher
operator|.
name|isMatch
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|e
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propertyPath
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//PathUtils.depth include depth for property name. So
comment|//reduce 1 to get node depth
name|int
name|depth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|propertyPath
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|propertyPath
operator|.
name|startsWith
argument_list|(
name|matcher
operator|.
name|getMatchedPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|depth
operator|!=
name|matcher
operator|.
name|depth
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|propertyPath
operator|.
name|endsWith
argument_list|(
name|META_PROP_NODE
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Extract property name from relative property path
specifier|final
name|String
name|newKey
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
name|PropertyState
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|value
operator|=
operator|new
name|PropertyStateWrapper
argument_list|(
name|value
argument_list|)
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|newKey
return|;
block|}
block|}
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|//Immediate child should have depth 1 more than matcher depth
name|int
name|expectedDepth
init|=
name|matcher
operator|.
name|depth
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|depth
init|=
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|expectedDepth
operator|&&
name|elements
operator|.
name|get
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|META_PROP_NODE
argument_list|)
condition|)
block|{
comment|//Child node name is the second last element
comment|//[jcr:content/:self -> [jcr:content, :self]
name|childNodeNames
operator|.
name|add
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|childNodeNames
return|;
block|}
block|}
end_class

end_unit

