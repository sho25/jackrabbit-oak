begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|EquiJoinCondition
import|;
end_import

begin_comment
comment|/**  * The implementation of the corresponding JCR interface.  */
end_comment

begin_class
specifier|public
class|class
name|EquiJoinConditionImpl
extends|extends
name|JoinConditionImpl
implements|implements
name|EquiJoinCondition
block|{
specifier|private
specifier|final
name|String
name|property1Name
decl_stmt|;
specifier|private
specifier|final
name|String
name|property2Name
decl_stmt|;
specifier|private
specifier|final
name|String
name|selector1Name
decl_stmt|;
specifier|private
specifier|final
name|String
name|selector2Name
decl_stmt|;
specifier|public
name|EquiJoinConditionImpl
parameter_list|(
name|String
name|selector1Name
parameter_list|,
name|String
name|property1Name
parameter_list|,
name|String
name|selector2Name
parameter_list|,
name|String
name|property2Name
parameter_list|)
block|{
name|this
operator|.
name|selector1Name
operator|=
name|selector1Name
expr_stmt|;
name|this
operator|.
name|property1Name
operator|=
name|property1Name
expr_stmt|;
name|this
operator|.
name|selector2Name
operator|=
name|selector2Name
expr_stmt|;
name|this
operator|.
name|property2Name
operator|=
name|property2Name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSelector1Name
parameter_list|()
block|{
return|return
name|selector1Name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty1Name
parameter_list|()
block|{
return|return
name|property1Name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSelector2Name
parameter_list|()
block|{
return|return
name|selector2Name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty2Name
parameter_list|()
block|{
return|return
name|property2Name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// TODO quote property names?
return|return
name|getSelector1Name
argument_list|()
operator|+
literal|'.'
operator|+
name|getProperty1Name
argument_list|()
operator|+
literal|" = "
operator|+
name|getSelector2Name
argument_list|()
operator|+
literal|'.'
operator|+
name|getProperty2Name
argument_list|()
return|;
block|}
block|}
end_class

end_unit

