begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GCListener
operator|.
name|Status
operator|.
name|FAILURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GCListener
operator|.
name|Status
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|BinaryReferenceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CachingSegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBufferWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|SegmentGraphVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The storage implementation for tar files.  */
end_comment

begin_class
specifier|public
class|class
name|FileStore
implements|implements
name|SegmentStore
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FILE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(data|bulk)((0|[1-9][0-9]*)[0-9]{4})([a-z])?.tar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME_FORMAT
init|=
literal|"data%05d%s.tar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"repo.lock"
decl_stmt|;
comment|/**      * GC counter for logging purposes      */
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|GC_COUNT
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|MEMORY_MAPPING_DEFAULT
init|=
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|segmentWriter
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|CachingSegmentReader
name|segmentReader
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|BinaryReferenceConsumer
name|binaryReferenceConsumer
decl_stmt|;
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
specifier|volatile
name|List
argument_list|<
name|TarReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
name|int
name|writeNumber
decl_stmt|;
specifier|private
specifier|volatile
name|File
name|writeFile
decl_stmt|;
specifier|private
specifier|volatile
name|TarWriter
name|tarWriter
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|lockFile
decl_stmt|;
specifier|private
specifier|final
name|FileLock
name|lock
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|TarRevisions
name|revisions
decl_stmt|;
comment|/**      * The background flush thread. Automatically flushes the TarMK state      * once every five seconds.      */
specifier|private
specifier|final
name|PeriodicOperation
name|flushOperation
decl_stmt|;
comment|/**      * The background compaction thread. Compacts the TarMK contents whenever      * triggered by the {@link #gc()} method.      */
specifier|private
specifier|final
name|TriggeredOperation
name|compactionOperation
decl_stmt|;
comment|/**      * This background thread periodically asks the {@code SegmentGCOptions}      * to compare the approximate size of the repository with the available disk      * space. The result of this comparison is stored in the state of this      * {@code FileStore}.      */
specifier|private
specifier|final
name|PeriodicOperation
name|diskSpaceOperation
decl_stmt|;
specifier|private
specifier|final
name|SegmentGCOptions
name|gcOptions
decl_stmt|;
comment|/**      * Flag to request revision cleanup during the next flush.      */
specifier|private
specifier|final
name|AtomicBoolean
name|cleanupNeeded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed. They can      * not be removed immediately, because they first need to be closed, and the      * JVM needs to release the memory mapped file references.      */
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|pendingRemove
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
comment|/**      * {@code GcListener} listening to this instance's gc progress      */
specifier|private
specifier|final
name|GCListener
name|gcListener
decl_stmt|;
comment|/**      * Represents the approximate size on disk of the repository.      */
specifier|private
specifier|final
name|AtomicLong
name|approximateSize
decl_stmt|;
comment|/**      * This flag is periodically updated by calling the {@code SegmentGCOptions}      * at regular intervals.      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientDiskSpace
decl_stmt|;
comment|/**      * Flag signalling shutdown of the file store      */
specifier|private
specifier|volatile
name|boolean
name|shutdown
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|fileStoreLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FileStoreStats
name|stats
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentCache
name|segmentCache
decl_stmt|;
specifier|private
specifier|final
name|SegmentIdFactory
name|segmentIdFactory
init|=
operator|new
name|SegmentIdFactory
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newSegmentId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
operator|new
name|SegmentId
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// FIXME OAK-4450: Properly split the FileStore into read-only and r/w variants
name|FileStore
parameter_list|(
name|FileStoreBuilder
name|builder
parameter_list|,
specifier|final
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tracker
operator|=
operator|new
name|SegmentTracker
argument_list|()
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|builder
operator|.
name|getRevisions
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|builder
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
comment|// FIXME OAK-4277: Finalise de-duplication caches: inject caches
comment|// from the outside so we can get rid of the cache stat accessors
name|this
operator|.
name|segmentCache
operator|=
operator|new
name|SegmentCache
argument_list|(
name|builder
operator|.
name|getSegmentCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|SegmentWriter
argument_list|>
name|getWriter
init|=
operator|new
name|Supplier
argument_list|<
name|SegmentWriter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SegmentWriter
name|get
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// FIXME OAK-4451: Implement a proper template cache: inject caches
comment|// from the outside so we can get rid of the cache stat accessors
name|this
operator|.
name|segmentReader
operator|=
operator|new
name|CachingSegmentReader
argument_list|(
name|getWriter
argument_list|,
name|blobStore
argument_list|,
name|builder
operator|.
name|getStringCacheSize
argument_list|()
argument_list|,
name|builder
operator|.
name|getTemplateCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|getGeneration
init|=
operator|new
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|()
block|{
return|return
name|getGcGeneration
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|binaryReferenceConsumer
operator|=
operator|new
name|BinaryReferenceConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|int
name|generation
parameter_list|,
name|String
name|binaryReference
parameter_list|)
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|tarWriter
operator|.
name|addBinaryReference
argument_list|(
name|generation
argument_list|,
name|binaryReference
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|this
operator|.
name|segmentWriter
operator|=
name|segmentWriterBuilder
argument_list|(
literal|"sys"
argument_list|)
operator|.
name|withGeneration
argument_list|(
name|getGeneration
argument_list|)
operator|.
name|withWriterPool
argument_list|()
operator|.
name|with
argument_list|(
name|builder
operator|.
name|getCacheManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|builder
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|builder
operator|.
name|getMaxFileSize
argument_list|()
operator|*
name|MB
expr_stmt|;
name|this
operator|.
name|memoryMapping
operator|=
name|builder
operator|.
name|getMemoryMapping
argument_list|()
expr_stmt|;
name|this
operator|.
name|gcListener
operator|=
name|builder
operator|.
name|getGcListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|gcOptions
operator|=
name|builder
operator|.
name|getGcOptions
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|map
init|=
name|collectFiles
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|this
operator|.
name|readers
operator|=
name|newArrayListWithCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|indices
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|indices
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// only try to read-only recover the latest file as that might
comment|// be the *only* one still being accessed by a writer
name|boolean
name|recover
init|=
name|i
operator|==
name|indices
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|openRO
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
argument_list|,
name|memoryMapping
argument_list|,
name|recover
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|initialSize
init|=
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|approximateSize
operator|=
operator|new
name|AtomicLong
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|FileStoreStats
argument_list|(
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|,
name|this
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|writeNumber
operator|=
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|writeNumber
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tarWriter
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|lockFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOCK_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|lock
operator|=
name|lockFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lockFile
operator|=
literal|null
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
block|}
comment|// FIXME The following background operations are historically part of
comment|// the implementation of the FileStore, but they should better be
comment|// scheduled and invoked by an external agent. The code deploying the
comment|// FileStore might have better insights on when and how these background
comment|// operations should be invoked. See also OAK-3468.
name|flushOperation
operator|=
operator|new
name|PeriodicOperation
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TarMK flush thread [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at {}"
argument_list|,
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|compactionOperation
operator|=
operator|new
name|TriggeredOperation
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TarMK compaction thread [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|maybeCompact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|diskSpaceOperation
operator|=
operator|new
name|PeriodicOperation
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TarMK disk space check [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkDiskSpace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|flushOperation
operator|.
name|start
argument_list|()
expr_stmt|;
name|diskSpaceOperation
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|sufficientDiskSpace
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|readOnly
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"TarMK ReadOnly opened: {} (mmap={})"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened: {} (mmap={})"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK readers {}"
argument_list|,
name|this
operator|.
name|readers
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|bind
parameter_list|(
name|TarRevisions
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
name|revisions
operator|.
name|bind
argument_list|(
name|this
argument_list|,
name|initialNode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Supplier
argument_list|<
name|RecordId
argument_list|>
name|initialNode
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|get
parameter_list|()
block|{
try|try
block|{
name|SegmentWriter
name|writer
init|=
name|segmentWriterBuilder
argument_list|(
literal|"init"
argument_list|)
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|node
operator|.
name|getRecordId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to write initial node"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
name|int
name|getGcGeneration
parameter_list|()
block|{
return|return
name|revisions
operator|.
name|getHead
argument_list|()
operator|.
name|getSegment
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|CacheStats
name|getSegmentCacheStats
parameter_list|()
block|{
return|return
name|segmentCache
operator|.
name|getCacheStats
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|CacheStats
name|getStringCacheStats
parameter_list|()
block|{
return|return
name|segmentReader
operator|.
name|getStringCacheStats
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|CacheStats
name|getTemplateCacheStats
parameter_list|()
block|{
return|return
name|segmentReader
operator|.
name|getTemplateCacheStats
argument_list|()
return|;
block|}
specifier|public
name|void
name|maybeCompact
parameter_list|(
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: started"
argument_list|,
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|long
name|avail
init|=
name|runtime
operator|.
name|totalMemory
argument_list|()
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
comment|// FIXME OAK-4281: Rework memory estimation for compaction
comment|// What value should we use for delta?
name|long
name|delta
init|=
literal|0
decl_stmt|;
name|long
name|needed
init|=
name|delta
operator|*
name|gcOptions
operator|.
name|getMemoryThreshold
argument_list|()
decl_stmt|;
if|if
condition|(
name|needed
operator|>=
name|avail
condition|)
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: not enough available memory {} ({} bytes), needed {} ({} bytes),"
operator|+
literal|" last merge delta {} ({} bytes), so skipping compaction for now"
argument_list|,
name|GC_COUNT
argument_list|,
name|humanReadableByteCount
argument_list|(
name|avail
argument_list|)
argument_list|,
name|avail
argument_list|,
name|humanReadableByteCount
argument_list|(
name|needed
argument_list|)
argument_list|,
name|needed
argument_list|,
name|humanReadableByteCount
argument_list|(
name|delta
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
name|cleanupNeeded
operator|.
name|set
argument_list|(
operator|!
name|gcOptions
operator|.
name|isPaused
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|int
name|gainThreshold
init|=
name|gcOptions
operator|.
name|getGainThreshold
argument_list|()
decl_stmt|;
name|boolean
name|sufficientEstimatedGain
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|gainThreshold
operator|<=
literal|0
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because gain threshold value ({}<= 0)"
argument_list|,
name|GC_COUNT
argument_list|,
name|gainThreshold
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because compaction is paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation started"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|shutdown
init|=
name|newShutdownSignal
argument_list|()
decl_stmt|;
name|CompactionGainEstimate
name|estimate
init|=
name|estimateCompactionGain
argument_list|(
name|shutdown
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation interrupted. Skipping compaction."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
name|long
name|gain
init|=
name|estimate
operator|.
name|estimateCompactionGain
argument_list|()
decl_stmt|;
name|sufficientEstimatedGain
operator|=
name|gain
operator|>=
name|gainThreshold
expr_stmt|;
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). "
operator|+
literal|"Gain is {}% or {}/{} ({}/{} bytes), so running compaction"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gain
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|,
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|,
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|estimate
operator|.
name|getTotalSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). "
operator|+
literal|"Skipping compaction for now as repository consists of a single tar file only"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). "
operator|+
literal|"Gain is {}% or {}/{} ({}/{} bytes), so skipping compaction for now"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gain
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|,
name|estimate
operator|.
name|getReachableSize
argument_list|()
argument_list|,
name|estimate
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
if|if
condition|(
operator|!
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
if|if
condition|(
name|compact
argument_list|()
condition|)
block|{
name|cleanupNeeded
operator|.
name|set
argument_list|(
name|cleanup
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: compaction paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|collectFiles
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|dataFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|File
argument_list|>
name|bulkFiles
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|directory
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|FILE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Integer
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"data"
operator|.
name|equals
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|Character
name|generation
init|=
literal|'a'
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|generation
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkState
argument_list|(
name|bulkFiles
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|file
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|bulkFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Upgrading TarMK file names in {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dataFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// first put all the data segments at the end of the list
name|Integer
index|[]
name|indices
init|=
name|dataFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|dataFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
name|Math
operator|.
name|max
argument_list|(
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|bulkFiles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
name|files
init|=
name|dataFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
for|for
control|(
name|Character
name|generation
range|:
name|newHashSet
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|file
init|=
name|files
operator|.
name|get
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
name|generation
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
block|}
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
comment|// then add all the bulk segments at the beginning of the list
name|Integer
index|[]
name|indices
init|=
name|bulkFiles
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|bulkFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indices
control|)
block|{
name|File
name|file
init|=
name|bulkFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Integer
name|newIndex
init|=
name|position
operator|++
decl_stmt|;
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|newIndex
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Renaming {} to {}"
argument_list|,
name|file
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
name|file
operator|.
name|renameTo
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|dataFiles
operator|.
name|put
argument_list|(
name|newIndex
argument_list|,
name|singletonMap
argument_list|(
literal|'a'
argument_list|,
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataFiles
return|;
block|}
specifier|public
specifier|final
name|long
name|size
parameter_list|()
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|size
init|=
name|writeFile
operator|!=
literal|null
condition|?
name|writeFile
operator|.
name|length
argument_list|()
else|:
literal|0
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|size
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|readerCount
parameter_list|()
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readers
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the number of segments in this TarMK instance.      *      * @return number of segments      */
specifier|private
name|int
name|count
parameter_list|()
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
name|count
operator|+=
name|tarWriter
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|count
operator|+=
name|reader
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Estimated compaction gain. The result will be undefined if stopped through      * the passed {@code stop} signal.      * @param stop  signal for stopping the estimation process.      * @return compaction gain estimate      */
name|CompactionGainEstimate
name|estimateCompactionGain
parameter_list|(
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|stop
parameter_list|)
block|{
name|CompactionGainEstimate
name|estimate
init|=
operator|new
name|CompactionGainEstimate
argument_list|(
name|getHead
argument_list|()
argument_list|,
name|count
argument_list|()
argument_list|,
name|stop
argument_list|)
decl_stmt|;
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|reader
operator|.
name|accept
argument_list|(
name|estimate
argument_list|)
expr_stmt|;
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|estimate
return|;
block|}
specifier|public
name|FileStoreStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|revisions
operator|.
name|flush
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanupNeeded
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// FIXME OAK-4138: Decouple revision cleanup from the flush thread
name|pendingRemove
operator|.
name|addAll
argument_list|(
name|cleanup
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove all obsolete tar generations
synchronized|synchronized
init|(
name|pendingRemove
init|)
block|{
name|Iterator
argument_list|<
name|File
argument_list|>
name|iterator
init|=
name|pendingRemove
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Attempting to remove old file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK GC: Removed old file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"TarMK GC: Failed to remove old file {}. Will retry later."
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Run garbage collection on the segment level: reclaim those data segments      * that are from an old segment generation and those bulk segments that are not      * reachable anymore.      * Those tar files that shrink by at least 25% are rewritten to a new tar generation      * skipping the reclaimed segments.      */
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|gcGeneration
init|=
name|getGcGeneration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|reclaimGeneration
init|=
name|gcGeneration
operator|-
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimPredicate
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|generation
parameter_list|)
block|{
return|return
name|generation
operator|<=
name|reclaimGeneration
return|;
block|}
block|}
decl_stmt|;
return|return
name|cleanup
argument_list|(
name|reclaimPredicate
argument_list|,
literal|"gc-count="
operator|+
name|GC_COUNT
operator|+
literal|",gc-status=success"
operator|+
literal|",store-generation="
operator|+
name|gcGeneration
operator|+
literal|",reclaim-predicate=(generation<="
operator|+
name|reclaimGeneration
operator|+
literal|")"
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanup
parameter_list|(
annotation|@
name|Nonnull
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimGeneration
parameter_list|,
annotation|@
name|Nonnull
name|String
name|gcInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
name|size
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|bulkRefs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TarReader
argument_list|,
name|TarReader
argument_list|>
name|cleaned
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup started. Current repository size is {} ({} bytes)"
argument_list|,
name|GC_COUNT
argument_list|,
name|humanReadableByteCount
argument_list|(
name|initialSize
argument_list|)
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|newWriter
argument_list|()
expr_stmt|;
name|segmentCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isDataSegmentId
argument_list|(
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|bulkRefs
operator|.
name|add
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|mark
argument_list|(
name|bulkRefs
argument_list|,
name|reclaim
argument_list|,
name|reclaimGeneration
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{}: size of bulk references/reclaim set {}/{}"
argument_list|,
name|reader
argument_list|,
name|bulkRefs
operator|.
name|size
argument_list|()
argument_list|,
name|reclaim
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup interrupted"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimed
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|sweep
argument_list|(
name|reclaim
argument_list|,
name|reclaimed
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup interrupted"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|List
argument_list|<
name|TarReader
argument_list|>
name|oldReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Replace current list of reader with the cleaned readers taking care not to lose
comment|// any new reader that might have come in through concurrent calls to newWriter()
name|List
argument_list|<
name|TarReader
argument_list|>
name|newReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|cleaned
operator|.
name|containsKey
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|TarReader
name|newReader
init|=
name|cleaned
operator|.
name|get
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReader
operator|!=
literal|null
condition|)
block|{
name|newReaders
operator|.
name|add
argument_list|(
name|newReader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newReader
operator|!=
name|reader
condition|)
block|{
name|oldReaders
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newReaders
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
name|readers
operator|=
name|newReaders
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|tracker
operator|.
name|clearSegmentIdTables
argument_list|(
name|reclaimed
argument_list|,
name|gcInfo
argument_list|)
expr_stmt|;
comment|// Close old readers *after* setting readers to the new readers to avoid accessing
comment|// a closed reader from readSegment()
name|LinkedList
argument_list|<
name|File
argument_list|>
name|toRemove
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|oldReader
range|:
name|oldReaders
control|)
block|{
name|closeAndLogOnFail
argument_list|(
name|oldReader
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|oldReader
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup marking file for deletion: {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|addLast
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|long
name|finalSize
init|=
name|size
argument_list|()
decl_stmt|;
name|approximateSize
operator|.
name|set
argument_list|(
name|finalSize
argument_list|)
expr_stmt|;
name|stats
operator|.
name|reclaimed
argument_list|(
name|initialSize
operator|-
name|finalSize
argument_list|)
expr_stmt|;
comment|// FIXME OAK-4106: Reclaimed size reported by FileStore.cleanup is off
name|gcListener
operator|.
name|cleaned
argument_list|(
name|initialSize
operator|-
name|finalSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup completed in {} ({} ms). Post cleanup size is {} ({} bytes)"
operator|+
literal|" and space reclaimed {} ({} bytes)."
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|finalSize
argument_list|,
name|humanReadableByteCount
argument_list|(
name|initialSize
operator|-
name|finalSize
argument_list|)
argument_list|,
name|initialSize
operator|-
name|finalSize
argument_list|)
expr_stmt|;
return|return
name|toRemove
return|;
block|}
comment|/**      * Finds all external blob references that are currently accessible      * in this repository and adds them to the given collector. Useful      * for collecting garbage in an external data store.      *<p>      * Note that this method only collects blob references that are already      * stored in the repository (at the time when this method is called), so      * the garbage collector will need some other mechanism for tracking      * in-memory references and references stored while this method is      * running.      * @param collector  reference collector called back for each blob reference found      */
specifier|public
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|tarReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|newWriter
argument_list|()
expr_stmt|;
name|tarReaders
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|readers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|int
name|minGeneration
init|=
name|getGcGeneration
argument_list|()
operator|-
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|TarReader
name|tarReader
range|:
name|tarReaders
control|)
block|{
name|tarReader
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|,
name|minGeneration
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the cancellation policy for the compaction phase. If the disk      * space was considered insufficient at least once during compaction (or if      * the space was never sufficient to begin with), compaction is considered      * canceled.      * Furthermore when the file store is shutting down, compaction is considered      * canceled.      *      * @return a flag indicating if compaction should be canceled.      */
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|newCancelCompactionCondition
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|outOfDiskSpace
decl_stmt|;
specifier|private
name|boolean
name|shutdown
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// The outOfDiskSpace and shutdown flags can only transition from false (their initial
comment|// values), to true. Once true, there should be no way to go back.
if|if
condition|(
operator|!
name|sufficientDiskSpace
operator|.
name|get
argument_list|()
condition|)
block|{
name|outOfDiskSpace
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|FileStore
operator|.
name|this
operator|.
name|shutdown
condition|)
block|{
name|this
operator|.
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|shutdown
operator|||
name|outOfDiskSpace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|outOfDiskSpace
condition|)
block|{
return|return
literal|"Not enough disk space available"
return|;
block|}
elseif|else
if|if
condition|(
name|shutdown
condition|)
block|{
return|return
literal|"FileStore shutdown request received"
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns a signal indication the file store shutting down.      * @return  a shutdown signal      */
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|newShutdownSignal
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|shutdown
return|;
block|}
block|}
return|;
block|}
comment|/**      * Copy every referenced record in data (non-bulk) segments. Bulk segments      * are fully kept (they are only removed in cleanup, if there is no      * reference to them).      * @return {@code true} if compaction succeeded, {@code false} otherwise.      */
specifier|public
name|boolean
name|compact
parameter_list|()
throws|throws
name|IOException
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction started, gc options={}"
argument_list|,
name|GC_COUNT
argument_list|,
name|gcOptions
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|before
init|=
name|getHead
argument_list|()
decl_stmt|;
name|long
name|existing
init|=
name|before
operator|.
name|getChildNode
argument_list|(
name|SegmentNodeStore
operator|.
name|CHECKPOINTS
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|>
literal|1
condition|)
block|{
comment|// FIXME OAK-4371: Overly zealous warning about checkpoints on compaction
comment|// Make the number of checkpoints configurable above which the warning should be issued?
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction found {} checkpoints, you might need to run checkpoint cleanup"
argument_list|,
name|GC_COUNT
argument_list|,
name|existing
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|newGeneration
init|=
name|getGcGeneration
argument_list|()
operator|+
literal|1
decl_stmt|;
name|SegmentBufferWriter
name|bufferWriter
init|=
operator|new
name|SegmentBufferWriter
argument_list|(
name|this
argument_list|,
name|tracker
argument_list|,
name|segmentReader
argument_list|,
literal|"c"
argument_list|,
name|newGeneration
argument_list|)
decl_stmt|;
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
init|=
name|newCancelCompactionCondition
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|bufferWriter
argument_list|,
name|before
argument_list|,
name|cancel
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compacted {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|cycles
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|cycles
operator|<
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
operator|&&
operator|!
operator|(
name|success
operator|=
name|revisions
operator|.
name|setHead
argument_list|(
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|cycles
operator|++
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction detected concurrent commits while compacting. "
operator|+
literal|"Compacting these commits. Cycle {} of {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|,
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|()
decl_stmt|;
name|after
operator|=
name|compact
argument_list|(
name|bufferWriter
argument_list|,
name|head
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compacted {} against {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|head
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction gave up compacting concurrent commits after {} cycles."
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
if|if
condition|(
name|gcOptions
operator|.
name|getForceAfterFail
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction force compacting remaining commits"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|cycles
operator|++
expr_stmt|;
name|success
operator|=
name|forceCompact
argument_list|(
name|bufferWriter
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction failed to force compact remaining commits. "
operator|+
literal|"Most likely compaction didn't get exclusive access to the store or was "
operator|+
literal|"prematurely cancelled."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
name|gcListener
operator|.
name|compacted
argument_list|(
name|SUCCESS
argument_list|,
name|newGeneration
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction succeeded in {} ({} ms), after {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleaning up after failed compaction"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|cleanupPredicate
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|generation
parameter_list|)
block|{
return|return
name|generation
operator|==
name|newGeneration
return|;
block|}
block|}
decl_stmt|;
name|cleanup
argument_list|(
name|cleanupPredicate
argument_list|,
literal|"gc-count="
operator|+
name|GC_COUNT
operator|+
literal|",gc-status=failed"
operator|+
literal|",store-generation="
operator|+
operator|(
name|newGeneration
operator|-
literal|1
operator|)
operator|+
literal|",reclaim-predicate=(generation=="
operator|+
name|newGeneration
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|compacted
argument_list|(
name|FAILURE
argument_list|,
name|newGeneration
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction failed after {} ({} ms), and {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction encountered an error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|SegmentNodeState
name|compact
parameter_list|(
name|SegmentBufferWriter
name|bufferWriter
parameter_list|,
name|NodeState
name|head
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|gcOptions
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|SegmentWriter
name|writer
init|=
operator|new
name|SegmentWriter
argument_list|(
name|this
argument_list|,
name|segmentReader
argument_list|,
name|blobStore
argument_list|,
operator|new
name|Default
argument_list|()
argument_list|,
name|bufferWriter
argument_list|,
name|binaryReferenceConsumer
argument_list|)
decl_stmt|;
return|return
operator|new
name|Compactor
argument_list|(
name|segmentReader
argument_list|,
name|writer
argument_list|,
name|blobStore
argument_list|,
name|cancel
argument_list|,
name|gcOptions
argument_list|)
operator|.
name|compact
argument_list|(
name|EMPTY_NODE
argument_list|,
name|head
argument_list|,
name|EMPTY_NODE
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|segmentWriter
operator|.
name|writeNode
argument_list|(
name|head
argument_list|,
name|bufferWriter
argument_list|,
name|cancel
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|forceCompact
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|SegmentBufferWriter
name|bufferWriter
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|base
parameter_list|)
block|{
try|try
block|{
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|bufferWriter
argument_list|,
name|segmentReader
operator|.
name|readNode
argument_list|(
name|base
argument_list|)
argument_list|,
name|cancel
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|after
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #{"
operator|+
name|GC_COUNT
operator|+
literal|"}: Error during forced compaction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|,
name|timeout
argument_list|(
name|gcOptions
operator|.
name|getLockWaitTime
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|SegmentId
argument_list|>
name|getSegmentIds
parameter_list|()
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|tarWriter
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|long
name|msb
init|=
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|newSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|reader
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|long
name|msb
init|=
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|newSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
name|SegmentTracker
name|getTracker
parameter_list|()
block|{
return|return
name|tracker
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|getWriter
parameter_list|()
block|{
return|return
name|segmentWriter
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|SegmentReader
name|getReader
parameter_list|()
block|{
return|return
name|segmentReader
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|BinaryReferenceConsumer
name|getBinaryReferenceConsumer
parameter_list|()
block|{
return|return
name|binaryReferenceConsumer
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|TarRevisions
name|getRevisions
parameter_list|()
block|{
return|return
name|revisions
return|;
block|}
comment|/**      * Convenience method for accessing the root node for the current head.      * This is equivalent to      *<pre>      * fileStore.getReader().readHeadState(fileStore.getRevisions())      *</pre>      * @return the current head node state      */
annotation|@
name|Nonnull
specifier|public
name|SegmentNodeState
name|getHead
parameter_list|()
block|{
return|return
name|segmentReader
operator|.
name|readHeadState
argument_list|(
name|revisions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Flag the store as shutting / shut down
name|shutdown
operator|=
literal|true
expr_stmt|;
comment|// avoid deadlocks by closing (and joining) the background
comment|// threads before acquiring the synchronization lock
try|try
block|{
if|if
condition|(
name|compactionOperation
operator|.
name|stop
argument_list|(
literal|5
argument_list|,
name|SECONDS
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The compaction background thread was successfully shut down"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The compaction background thread takes too long to shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|flushOperation
operator|.
name|stop
argument_list|(
literal|5
argument_list|,
name|SECONDS
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The flush background thread was successfully shut down"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The flush background thread takes too long to shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|diskSpaceOperation
operator|.
name|stop
argument_list|(
literal|5
argument_list|,
name|SECONDS
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The disk space check background thread was successfully shut down"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The disk space check background thread takes too long to shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
name|revisions
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|closeAndLogOnFail
argument_list|(
name|tarWriter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|readers
decl_stmt|;
name|readers
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|list
control|)
block|{
name|closeAndLogOnFail
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|closeAndLogOnFail
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close the TarMK at "
operator|+
name|directory
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tarWriter
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Segment
name|readSegment
parameter_list|(
specifier|final
name|SegmentId
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|segmentCache
operator|.
name|getSegment
argument_list|(
name|id
argument_list|,
operator|new
name|Callable
argument_list|<
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Segment
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Cleanup might already have closed the file.
comment|// The segment should be available from another file.
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping closed tar file {}"
argument_list|,
name|reader
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|tarWriter
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|tarWriter
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Cleanup might already have closed the file.
comment|// The segment should be available from another file.
name|log
operator|.
name|info
argument_list|(
literal|"Skipping closed tar file {}"
argument_list|,
name|reader
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SegmentNotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SegmentNotFoundException
condition|?
operator|(
name|SegmentNotFoundException
operator|)
name|e
operator|.
name|getCause
argument_list|()
else|:
operator|new
name|SegmentNotFoundException
argument_list|(
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|generation
init|=
name|Segment
operator|.
name|getGcGeneration
argument_list|(
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|,
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|tarWriter
operator|.
name|writeEntry
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>=
name|maxFileSize
condition|)
block|{
name|newWriter
argument_list|()
expr_stmt|;
block|}
name|approximateSize
operator|.
name|addAndGet
argument_list|(
name|TarWriter
operator|.
name|BLOCK_SIZE
operator|+
name|length
operator|+
name|TarWriter
operator|.
name|getPaddingSize
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Keep this data segment in memory as it's likely to be accessed soon
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|4096
condition|)
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|segmentCache
operator|.
name|putSegment
argument_list|(
operator|new
name|Segment
argument_list|(
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newSegmentId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|newSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|segmentIdFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newBulkSegmentId
parameter_list|()
block|{
return|return
name|tracker
operator|.
name|newBulkSegmentId
argument_list|(
name|segmentIdFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newDataSegmentId
parameter_list|()
block|{
return|return
name|tracker
operator|.
name|newDataSegmentId
argument_list|(
name|segmentIdFactory
argument_list|)
return|;
block|}
comment|/**      * Switch to a new tar writer.      * This method may only be called when holding the write lock of {@link #fileStoreLock}      * @throws IOException      */
specifier|private
name|void
name|newWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tarWriter
operator|.
name|isDirty
argument_list|()
condition|)
block|{
name|tarWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
literal|1
operator|+
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|writeFile
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|readers
operator|=
name|list
expr_stmt|;
name|writeNumber
operator|++
expr_stmt|;
name|writeFile
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|FILE_NAME_FORMAT
argument_list|,
name|writeNumber
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|tarWriter
operator|=
operator|new
name|TarWriter
argument_list|(
name|writeFile
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return  the external BlobStore (if configured) with this store, {@code null} otherwise.      */
annotation|@
name|CheckForNull
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
comment|/**      * Trigger a garbage collection cycle      */
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|compactionOperation
operator|.
name|trigger
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getTarReaderIndex
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|index
operator|.
name|put
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|reader
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|public
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|getTarGraph
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|UUID
name|uuid
range|:
name|reader
operator|.
name|getUUIDs
argument_list|()
control|)
block|{
name|graph
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|g
init|=
name|reader
operator|.
name|getGraph
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|graph
operator|.
name|putAll
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
block|}
return|return
name|emptyMap
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkDiskSpace
parameter_list|()
block|{
name|long
name|repositoryDiskSpace
init|=
name|approximateSize
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|availableDiskSpace
init|=
name|directory
operator|.
name|getFreeSpace
argument_list|()
decl_stmt|;
name|boolean
name|updated
init|=
name|gcOptions
operator|.
name|isDiskSpaceSufficient
argument_list|(
name|repositoryDiskSpace
argument_list|,
name|availableDiskSpace
argument_list|)
decl_stmt|;
name|boolean
name|previous
init|=
name|sufficientDiskSpace
operator|.
name|getAndSet
argument_list|(
name|updated
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|&&
operator|!
name|updated
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Available disk space ({}) is too low, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updated
operator|&&
operator|!
name|previous
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available disk space ({}) is sufficient again for repository operations, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A read only {@link FileStore} implementation that supports      * going back to old revisions.      *<p>      * All write methods are no-ops.      */
specifier|public
specifier|static
class|class
name|ReadOnlyStore
extends|extends
name|FileStore
block|{
specifier|private
name|RecordId
name|currentHead
decl_stmt|;
name|ReadOnlyStore
parameter_list|(
name|FileStoreBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|ReadOnlyStore
name|bind
parameter_list|(
annotation|@
name|Nonnull
name|TarRevisions
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
name|revisions
operator|.
name|bind
argument_list|(
name|this
argument_list|,
operator|new
name|Supplier
argument_list|<
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot start readonly store from empty journal"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|currentHead
operator|=
name|revisions
operator|.
name|getHead
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Go to the specified {@code revision}          *          * @param revision          */
specifier|public
name|void
name|setRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|RecordId
name|newHead
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|this
argument_list|,
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|revisions
operator|.
name|setHead
argument_list|(
name|currentHead
argument_list|,
name|newHead
argument_list|)
condition|)
block|{
name|currentHead
operator|=
name|newHead
expr_stmt|;
block|}
block|}
comment|/**          * Include the ids of all segments transitively reachable through forward references from          * {@code referencedIds}. See OAK-3864.          */
specifier|private
specifier|static
name|void
name|includeForwardReferences
parameter_list|(
name|Iterable
argument_list|<
name|TarReader
argument_list|>
name|readers
parameter_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
name|referencedIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|fRefs
init|=
name|newHashSet
argument_list|(
name|referencedIds
argument_list|)
decl_stmt|;
do|do
block|{
comment|// Add direct forward references
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|reader
operator|.
name|calculateForwardReferences
argument_list|(
name|fRefs
argument_list|)
expr_stmt|;
if|if
condition|(
name|fRefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
comment|// Optimisation: bail out if no references left
block|}
block|}
comment|// ... as long as new forward references are found.
block|}
do|while
condition|(
name|referencedIds
operator|.
name|addAll
argument_list|(
name|fRefs
argument_list|)
condition|)
do|;
block|}
comment|/**          * Build the graph of segments reachable from an initial set of segments          * @param roots     the initial set of segments          * @param visitor   visitor receiving call back while following the segment graph          * @throws IOException          */
specifier|public
name|void
name|traverseSegmentGraph
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|roots
parameter_list|,
annotation|@
name|Nonnull
name|SegmentGraphVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TarReader
argument_list|>
name|readers
init|=
name|super
operator|.
name|readers
decl_stmt|;
name|includeForwardReferences
argument_list|(
name|readers
argument_list|,
name|roots
argument_list|)
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|reader
operator|.
name|traverseSegmentGraph
argument_list|(
name|checkNotNull
argument_list|(
name|roots
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|visitor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Read Only Store"
argument_list|)
throw|;
block|}
comment|/**          * no-op          */
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|/* nop */
block|}
annotation|@
name|Override
specifier|public
name|LinkedList
argument_list|<
name|File
argument_list|>
name|cleanup
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Read Only Store"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Read Only Store"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compact
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Read Only Store"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|maybeCompact
parameter_list|(
name|boolean
name|cleanup
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Read Only Store"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|closeAndLogOnFail
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore and log
name|log
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

