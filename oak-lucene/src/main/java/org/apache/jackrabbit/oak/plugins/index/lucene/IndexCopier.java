begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|CopyOnReadDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|CopyOnWriteDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|DirectoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|IndexRootDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LocalIndexDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LocalIndexFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|toArray
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_class
specifier|public
class|class
name|IndexCopier
implements|implements
name|CopyOnReadStatsMBean
implements|,
name|Closeable
block|{
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|REMOTE_ONLY
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"segments.gen"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FAILURE_ENTRIES
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WORK_DIR_NAME
init|=
literal|"indexWriterDir"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|File
name|indexWorkDir
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|readerLocalReadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|writerLocalReadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|readerRemoteReadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|writerRemoteReadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|invalidFileCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|deletedFileCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|scheduledForCopyCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|copyInProgressCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|maxCopyInProgressCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|maxScheduledForCopyCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|uploadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|downloadCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|copyInProgressSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|downloadSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|uploadSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|garbageCollectedSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|skippedFromUploadSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|downloadTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|uploadTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sharedWorkingSetMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|indexPathVersionMapping
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LocalIndexFile
argument_list|>
name|failedToDeleteFiles
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|LocalIndexFile
argument_list|>
name|copyInProgressFiles
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalIndexFile
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|prefetchEnabled
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|final
name|IndexRootDirectory
name|indexRootDirectory
decl_stmt|;
specifier|public
name|IndexCopier
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|File
name|indexRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|executor
argument_list|,
name|indexRootDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexCopier
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|File
name|indexRootDir
parameter_list|,
name|boolean
name|prefetchEnabled
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|prefetchEnabled
operator|=
name|prefetchEnabled
expr_stmt|;
name|this
operator|.
name|indexWorkDir
operator|=
name|initializerWorkDir
argument_list|(
name|indexRootDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexRootDirectory
operator|=
operator|new
name|IndexRootDirectory
argument_list|(
name|indexRootDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Directory
name|wrapForRead
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|Directory
name|remote
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|local
init|=
name|createLocalDirForIndexReader
argument_list|(
name|indexPath
argument_list|,
name|definition
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
return|return
operator|new
name|CopyOnReadDirectory
argument_list|(
name|this
argument_list|,
name|remote
argument_list|,
name|local
argument_list|,
name|prefetchEnabled
argument_list|,
name|indexPath
argument_list|,
name|getSharedWorkingSet
argument_list|(
name|indexPath
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
specifier|public
name|Directory
name|wrapForWrite
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|Directory
name|remote
parameter_list|,
name|boolean
name|reindexMode
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|local
init|=
name|createLocalDirForIndexWriter
argument_list|(
name|definition
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
return|return
operator|new
name|CopyOnWriteDirectory
argument_list|(
name|this
argument_list|,
name|remote
argument_list|,
name|local
argument_list|,
name|reindexMode
argument_list|,
name|getIndexPathForLogging
argument_list|(
name|definition
argument_list|)
argument_list|,
name|getSharedWorkingSet
argument_list|(
name|definition
operator|.
name|getIndexPathFromConfig
argument_list|()
argument_list|)
argument_list|,
name|executor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
name|File
name|getIndexWorkDir
parameter_list|()
block|{
return|return
name|indexWorkDir
return|;
block|}
name|IndexRootDirectory
name|getIndexRootDirectory
parameter_list|()
block|{
return|return
name|indexRootDirectory
return|;
block|}
specifier|protected
name|Directory
name|createLocalDirForIndexWriter
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|indexPath
init|=
name|definition
operator|.
name|getIndexPathFromConfig
argument_list|()
decl_stmt|;
name|File
name|indexWriterDir
init|=
name|getIndexDir
argument_list|(
name|definition
argument_list|,
name|indexPath
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
comment|//By design indexing in Oak is single threaded so Lucene locking
comment|//can be disabled
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexWriterDir
argument_list|,
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"IndexWriter would use {}"
argument_list|,
name|indexWriterDir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
specifier|protected
name|Directory
name|createLocalDirForIndexReader
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|indexDir
init|=
name|getIndexDir
argument_list|(
name|definition
argument_list|,
name|indexPath
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|Directory
name|result
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|String
name|newPath
init|=
name|indexDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|oldPath
init|=
name|indexPathVersionMapping
operator|.
name|put
argument_list|(
name|createIndexPathKey
argument_list|(
name|indexPath
argument_list|,
name|dirName
argument_list|)
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newPath
operator|.
name|equals
argument_list|(
name|oldPath
argument_list|)
operator|&&
name|oldPath
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|DeleteOldDirOnClose
argument_list|(
name|result
argument_list|,
operator|new
name|File
argument_list|(
name|oldPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|File
name|getIndexDir
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|indexRootDirectory
operator|.
name|getIndexDir
argument_list|(
name|definition
argument_list|,
name|indexPath
argument_list|,
name|dirName
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|LocalIndexFile
argument_list|>
name|getFailedToDeleteFiles
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|failedToDeleteFiles
argument_list|)
return|;
block|}
specifier|private
name|void
name|failedToDelete
parameter_list|(
name|LocalIndexFile
name|file
parameter_list|)
block|{
comment|//Limit the size on best effort basis
if|if
condition|(
name|failedToDeleteFiles
operator|.
name|size
argument_list|()
operator|<
name|MAX_FAILURE_ENTRIES
condition|)
block|{
name|LocalIndexFile
name|failedToDeleteFile
init|=
name|failedToDeleteFiles
operator|.
name|putIfAbsent
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedToDeleteFile
operator|==
literal|null
condition|)
block|{
name|failedToDeleteFile
operator|=
name|file
expr_stmt|;
block|}
name|failedToDeleteFile
operator|.
name|incrementAttemptToDelete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not able to delete {}. Currently more than {} file with total size {} are pending delete."
argument_list|,
name|file
operator|.
name|deleteLog
argument_list|()
argument_list|,
name|failedToDeleteFiles
operator|.
name|size
argument_list|()
argument_list|,
name|getGarbageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|successfullyDeleted
parameter_list|(
name|LocalIndexFile
name|file
parameter_list|,
name|boolean
name|fileExisted
parameter_list|)
block|{
name|LocalIndexFile
name|failedToDeleteFile
init|=
name|failedToDeleteFiles
operator|.
name|remove
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedToDeleteFile
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Deleted : {}"
argument_list|,
name|failedToDeleteFile
operator|.
name|deleteLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileExisted
condition|)
block|{
name|garbageCollectedSize
operator|.
name|addAndGet
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|deletedFileCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Provide the corresponding shared state to enable COW inform COR      * about new files it is creating while indexing. This would allow COR to ignore      * such files while determining the deletion candidates.      *      * @param defn index definition for which the directory is being created      * @return a set to maintain the state of new files being created by the COW Directory      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSharedWorkingSet
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|sharedSet
decl_stmt|;
synchronized|synchronized
init|(
name|sharedWorkingSetMap
init|)
block|{
name|sharedSet
operator|=
name|sharedWorkingSetMap
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedSet
operator|==
literal|null
condition|)
block|{
name|sharedSet
operator|=
name|Sets
operator|.
name|newConcurrentHashSet
argument_list|()
expr_stmt|;
name|sharedWorkingSetMap
operator|.
name|put
argument_list|(
name|indexPath
argument_list|,
name|sharedSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sharedSet
return|;
block|}
comment|/**      * Creates the workDir. If it exists then it is cleaned      *      * @param indexRootDir root directory under which all indexing related files are managed      * @return work directory. Always empty      */
specifier|private
specifier|static
name|File
name|initializerWorkDir
parameter_list|(
name|File
name|indexRootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|indexRootDir
argument_list|,
name|WORK_DIR_NAME
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|workDir
operator|.
name|mkdirs
argument_list|()
argument_list|,
literal|"Cannot create directory %s"
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
return|return
name|workDir
return|;
block|}
specifier|private
specifier|static
name|String
name|getIndexPathForLogging
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|)
block|{
name|String
name|indexPath
init|=
name|defn
operator|.
name|getIndexPathFromConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
return|return
literal|"UNKNOWN"
return|;
block|}
return|return
name|indexPath
return|;
block|}
comment|/**      * Create a unique key based on indexPath and dirName used under that path      */
specifier|private
specifier|static
name|String
name|createIndexPathKey
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|String
name|dirName
parameter_list|)
block|{
return|return
name|indexPath
operator|.
name|concat
argument_list|(
name|dirName
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|deleteFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|copiedFromRemote
parameter_list|)
block|{
name|LocalIndexFile
name|file
init|=
operator|new
name|LocalIndexFile
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|,
name|DirectoryUtils
operator|.
name|getFileLength
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
argument_list|,
name|copiedFromRemote
argument_list|)
decl_stmt|;
name|boolean
name|successFullyDeleted
init|=
literal|false
decl_stmt|;
try|try
block|{
name|boolean
name|fileExisted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|fileExisted
operator|=
literal|true
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|successfullyDeleted
argument_list|(
name|file
argument_list|,
name|fileExisted
argument_list|)
expr_stmt|;
name|successFullyDeleted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failedToDelete
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Error occurred while removing deleted file {} from Local {}. "
operator|+
literal|"Attempt would be made to delete it on next run "
argument_list|,
name|fileName
argument_list|,
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|successFullyDeleted
return|;
block|}
specifier|public
name|long
name|startCopy
parameter_list|(
name|LocalIndexFile
name|file
parameter_list|)
block|{
name|updateMaxInProgress
argument_list|(
name|copyInProgressCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|copyInProgressSize
operator|.
name|addAndGet
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|copyInProgressFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|public
name|void
name|doneCopy
parameter_list|(
name|LocalIndexFile
name|file
parameter_list|,
name|long
name|start
parameter_list|)
block|{
name|copyInProgressFiles
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|copyInProgressCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|copyInProgressSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isCopyFromRemote
argument_list|()
condition|)
block|{
name|downloadTime
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|downloadSize
operator|.
name|addAndGet
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|downloadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uploadSize
operator|.
name|addAndGet
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|uploadTime
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|uploadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateMaxScheduled
parameter_list|(
name|int
name|val
parameter_list|)
block|{
synchronized|synchronized
init|(
name|maxScheduledForCopyCount
init|)
block|{
name|int
name|current
init|=
name|maxScheduledForCopyCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|>
name|current
condition|)
block|{
name|maxScheduledForCopyCount
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateMaxInProgress
parameter_list|(
name|int
name|val
parameter_list|)
block|{
synchronized|synchronized
init|(
name|maxCopyInProgressCount
init|)
block|{
name|int
name|current
init|=
name|maxCopyInProgressCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|>
name|current
condition|)
block|{
name|maxCopyInProgressCount
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DeleteOldDirOnClose
extends|extends
name|FilterDirectory
block|{
specifier|private
specifier|final
name|File
name|oldIndexDir
decl_stmt|;
specifier|protected
name|DeleteOldDirOnClose
parameter_list|(
name|Directory
name|in
parameter_list|,
name|File
name|oldIndexDir
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldIndexDir
operator|=
name|oldIndexDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|//Clean out the local dir irrespective of any error occurring upon
comment|//close in wrapped directory
try|try
block|{
name|long
name|totalDeletedSize
init|=
name|FileUtils
operator|.
name|sizeOf
argument_list|(
name|oldIndexDir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|oldIndexDir
argument_list|)
expr_stmt|;
name|totalDeletedSize
operator|+=
name|indexRootDirectory
operator|.
name|gcEmptyDirs
argument_list|(
name|oldIndexDir
argument_list|)
expr_stmt|;
name|garbageCollectedSize
operator|.
name|addAndGet
argument_list|(
name|totalDeletedSize
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Removed old index content from {} "
argument_list|,
name|oldIndexDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not able to remove old version of copied index at {}"
argument_list|,
name|oldIndexDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DeleteOldDirOnClose wrapper for "
operator|+
name|getDelegate
argument_list|()
return|;
block|}
block|}
comment|//~------------------------------------------< Stats Collection>
specifier|public
name|void
name|skippedUpload
parameter_list|(
name|long
name|skippedFilesSize
parameter_list|)
block|{
name|skippedFromUploadSize
operator|.
name|addAndGet
argument_list|(
name|skippedFilesSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scheduledForCopy
parameter_list|()
block|{
name|updateMaxScheduled
argument_list|(
name|scheduledForCopyCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyDone
parameter_list|()
block|{
name|scheduledForCopyCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|readFromRemote
parameter_list|(
name|boolean
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
condition|)
block|{
name|readerRemoteReadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writerRemoteReadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFromLocal
parameter_list|(
name|boolean
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
condition|)
block|{
name|readerLocalReadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writerLocalReadCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|foundInvalidFile
parameter_list|()
block|{
name|invalidFileCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|//~------------------------------------------< CopyOnReadStatsMBean>
annotation|@
name|Override
specifier|public
name|TabularData
name|getIndexPathMapping
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|IndexMappingData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Lucene Index Stats"
argument_list|,
name|IndexMappingData
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jcrPath"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalIndexDir
name|indexDir
range|:
name|indexRootDirectory
operator|.
name|getAllLocalIndexes
argument_list|()
control|)
block|{
name|String
name|size
init|=
name|humanReadableByteCount
argument_list|(
name|indexDir
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|IndexMappingData
operator|.
name|TYPE
argument_list|,
name|IndexMappingData
operator|.
name|FIELD_NAMES
argument_list|,
operator|new
name|String
index|[]
block|{
name|indexDir
operator|.
name|getJcrPath
argument_list|()
block|,
name|indexDir
operator|.
name|getFSPath
argument_list|()
block|,
name|size
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPrefetchEnabled
parameter_list|()
block|{
return|return
name|prefetchEnabled
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReaderLocalReadCount
parameter_list|()
block|{
return|return
name|readerLocalReadCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReaderRemoteReadCount
parameter_list|()
block|{
return|return
name|readerRemoteReadCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriterLocalReadCount
parameter_list|()
block|{
return|return
name|writerLocalReadCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriterRemoteReadCount
parameter_list|()
block|{
return|return
name|writerRemoteReadCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getInvalidFileCount
parameter_list|()
block|{
return|return
name|invalidFileCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDownloadSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|downloadSize
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDownloadTime
parameter_list|()
block|{
return|return
name|downloadTime
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDownloadCount
parameter_list|()
block|{
return|return
name|downloadCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUploadCount
parameter_list|()
block|{
return|return
name|uploadCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUploadSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|uploadSize
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getUploadTime
parameter_list|()
block|{
return|return
name|uploadTime
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalIndexSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|indexRootDirectory
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getGarbageDetails
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|transform
argument_list|(
name|failedToDeleteFiles
operator|.
name|values
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|LocalIndexFile
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|LocalIndexFile
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|deleteLog
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getGarbageSize
parameter_list|()
block|{
name|long
name|garbageSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalIndexFile
name|failedToDeleteFile
range|:
name|failedToDeleteFiles
operator|.
name|values
argument_list|()
control|)
block|{
name|garbageSize
operator|+=
name|failedToDeleteFile
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
return|return
name|humanReadableByteCount
argument_list|(
name|garbageSize
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getScheduledForCopyCount
parameter_list|()
block|{
return|return
name|scheduledForCopyCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCopyInProgressCount
parameter_list|()
block|{
return|return
name|copyInProgressCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCopyInProgressSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|copyInProgressSize
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxCopyInProgressCount
parameter_list|()
block|{
return|return
name|maxCopyInProgressCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxScheduledForCopyCount
parameter_list|()
block|{
return|return
name|maxScheduledForCopyCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSkippedFromUploadSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|skippedFromUploadSize
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getCopyInProgressDetails
parameter_list|()
block|{
return|return
name|toArray
argument_list|(
name|transform
argument_list|(
name|copyInProgressFiles
argument_list|,
operator|new
name|Function
argument_list|<
name|LocalIndexFile
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|LocalIndexFile
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|copyLog
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDeletedFilesCount
parameter_list|()
block|{
return|return
name|deletedFileCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getGarbageCollectedSize
parameter_list|()
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|garbageCollectedSize
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|IndexMappingData
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"jcrPath"
block|,
literal|"fsPath"
block|,
literal|"size"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"JCR Path"
block|,
literal|"Filesystem Path"
block|,
literal|"Size"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|IndexMappingData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Index Mapping Data"
argument_list|,
name|IndexMappingData
operator|.
name|FIELD_NAMES
argument_list|,
name|IndexMappingData
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|IndexMappingData
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

