begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|OrderedPropertyIndexQueryTest
extends|extends
name|BasicOrderedPropertyIndexQueryTest
block|{
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|OrderedPropertyIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
operator|new
name|NodeUtil
argument_list|(
name|index
operator|.
name|getChild
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
name|ORDERED_PROPERTY
block|}
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Query the index for retrieving all the entries      *      * @throws CommitFailedException      * @throws ParseException      * @throws RepositoryException      */
annotation|@
name|Test
specifier|public
name|void
name|queryAllEntries
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
throws|,
name|RepositoryException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * from [%s] WHERE foo IS NOT NULL"
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|nodes
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the index for returning the items related to a single key      *      * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryOneKey
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// getting the middle of the random list of nodes.
name|ValuePathTuple
name|searchfor
init|=
name|nodes
operator|.
name|get
argument_list|(
name|NUMBER_OF_NODES
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|searchfor
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"SELECT * FROM [%s] WHERE %s=$%s"
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"one element is expected"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong path returned"
argument_list|,
name|searchfor
operator|.
name|getPath
argument_list|()
argument_list|,
name|results
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"there should be not any more items"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the range query in case of '>' condition      *      * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThan
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] AS n WHERE n.%s> $%s"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendar
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchFor
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|GreaterThanPredicate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the range query in case of '>=' condition      * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterEqualThan
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] AS n WHERE n.%s>= $%s"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendar
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchFor
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|GreaterThanPredicate
argument_list|(
name|searchFor
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the range query in case of '<' condition      *      * in this case as we're ascending we're expecting an empty resultset with the proper      * provider. not the lowcost one.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|queryLessThan
parameter_list|()
throws|throws
name|Exception
block|{
name|initWithProperProvider
argument_list|()
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|DESC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] AS n WHERE n.%s< $%s"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendar
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchFor
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"We should have no results as of the cost and index direction"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * test the range query in case of '<=' condition      *      * in this case as we're ascending we're expecting an empty resultset with the proper      * provider. not the lowcost one.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|queryLessEqualThan
parameter_list|()
throws|throws
name|Exception
block|{
name|initWithProperProvider
argument_list|()
expr_stmt|;
name|initWithProperProvider
argument_list|()
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|DESC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] AS n WHERE n.%s<= $%s"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendar
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchFor
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"We should have no results as of the cost and index direction"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryAllEntriesWithOrderBy
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
throws|,
name|RepositoryException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * from [nt:base] WHERE %s IS NOT NULL ORDER BY %s"
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|nodes
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orderByQueryNoWhere
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * from [nt:base] ORDER BY %s"
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|nodes
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|planOderByNoWhere
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|root
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
name|order
init|=
name|OrderDirection
operator|.
name|ASC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|?
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
else|:
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|DESCENDING
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|addChildNodes
argument_list|(
name|values
argument_list|,
name|root
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|OrderedPropertyIndex
name|index
init|=
operator|new
name|OrderedPropertyIndex
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeTypeName
init|=
name|JcrConstants
operator|.
name|NT_BASE
decl_stmt|;
name|Filter
name|filter
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|createOrderEntry
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|order
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|index
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexPlan
name|p
init|=
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getSortOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueryIndex
operator|.
name|OrderEntry
name|oe
init|=
name|p
operator|.
name|getSortOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|oe
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|,
name|oe
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryOrderByNonIndexedProperty
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|String
name|query
init|=
literal|"SELECT * from [nt:base] ORDER BY somethingnotindexed"
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"An empty resultset is expected"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|FilterImpl
name|createFilter
parameter_list|(
name|NodeState
name|indexed
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeState
name|system
init|=
name|indexed
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeState
name|types
init|=
name|system
operator|.
name|getChildNode
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
name|NodeState
name|type
init|=
name|types
operator|.
name|getChildNode
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|QueryIndex
operator|.
name|OrderEntry
name|createOrderEntry
parameter_list|(
name|String
name|property
parameter_list|,
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
name|order
parameter_list|)
block|{
return|return
operator|new
name|QueryIndex
operator|.
name|OrderEntry
argument_list|(
name|property
argument_list|,
name|Type
operator|.
name|UNDEFINED
argument_list|,
name|order
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|planOrderByNonIndexedProperty
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|root
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
name|order
init|=
name|OrderDirection
operator|.
name|ASC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|?
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
else|:
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|DESCENDING
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|addChildNodes
argument_list|(
name|values
argument_list|,
name|root
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|OrderedPropertyIndex
name|index
init|=
operator|new
name|OrderedPropertyIndex
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeTypeName
init|=
name|JcrConstants
operator|.
name|NT_BASE
decl_stmt|;
name|Filter
name|filter
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|createOrderEntry
argument_list|(
literal|"somethingnotindexed"
argument_list|,
name|order
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|index
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests the output of a plan where the query is asked with where conditions that are not indexed      * but the ORDER BY are on the indexed property      *      * eg: SELECT * FROM [nt:base] WHERE pinned=1 ORDER BY lastModified      *      * @throws RepositoryException      * @throws IllegalArgumentException      * @throws CommitFailedException      */
annotation|@
name|Test
specifier|public
name|void
name|planOrderAndWhereMixed
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|root
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
name|root
operator|.
name|child
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ORDERED_PROPERTY
argument_list|)
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
name|order
init|=
name|OrderDirection
operator|.
name|ASC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|?
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
else|:
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|DESCENDING
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|addChildNodes
argument_list|(
name|values
argument_list|,
name|root
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|OrderedPropertyIndex
name|index
init|=
operator|new
name|OrderedPropertyIndex
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeTypeName
init|=
name|JcrConstants
operator|.
name|NT_BASE
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"somethingNotIndexed"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newLong
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|createOrderEntry
argument_list|(
name|ORDERED_PROPERTY
argument_list|,
name|order
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|index
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexPlan
name|p
init|=
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getSortOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryIndex
operator|.
name|OrderEntry
operator|.
name|Order
operator|.
name|ASCENDING
argument_list|,
name|p
operator|.
name|getSortOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * query the index in case of mixed situation      *      * eg: SELECT * FROM [nt:base] WHERE pinned=1 ORDER BY lastModified      *      * @throws RepositoryException      * @throws IllegalArgumentException      * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryOrderAndWhereMixed
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initiate the repo with some data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedValues
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
argument_list|,
name|test
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|where
init|=
literal|"wholetthedogsout"
decl_stmt|;
name|String
name|value
init|=
literal|"woof-woof-woof-woof"
decl_stmt|;
comment|// let's set the property that will have to be queried only on 2 nodes
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|where
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|t
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|where
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// querying
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
decl_stmt|;
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * from [nt:base] WHERE %s=$%s ORDER BY %s"
argument_list|,
name|where
argument_list|,
name|where
argument_list|,
name|ORDERED_PROPERTY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|where
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|results
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * testing explicitly OAK-1561 use-case      *       * @throws CommitFailedException      * @throws ParseException      */
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThenWithCast
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|ParseException
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> cast('%s' as date)"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendar
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchFor
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|searchFor
argument_list|)
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|GreaterThanPredicate
argument_list|(
name|searchFor
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBetweenNoIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> $start AND "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"< $end"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendarStart
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendarStart
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForStart
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendarStart
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|endCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endCalendar
operator|.
name|setTime
argument_list|(
name|ISO_8601_2000
operator|.
name|parse
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForEnd
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|endCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"start"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForStart
argument_list|)
argument_list|,
literal|"end"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForEnd
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBetweenIncludeLower
parameter_list|()
throws|throws
name|Exception
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|">= $start AND "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"< $end"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Calendar
name|searchForCalendarStart
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendarStart
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForStart
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendarStart
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|endCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endCalendar
operator|.
name|setTime
argument_list|(
name|ISO_8601_2000
operator|.
name|parse
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForEnd
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|endCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"start"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForStart
argument_list|)
argument_list|,
literal|"end"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForEnd
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBetweenIncludeHigher
parameter_list|()
throws|throws
name|Exception
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> $start AND "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"<= $end"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
literal|10
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|ValuePathTuple
name|n
range|:
name|nodes
control|)
block|{
name|n
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// System.out.println("+++" + n);
block|}
name|Calendar
name|searchForCalendarStart
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendarStart
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForStart
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendarStart
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|endCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endCalendar
operator|.
name|setTime
argument_list|(
name|ISO_8601_2000
operator|.
name|parse
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForEnd
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|endCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"start"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForStart
argument_list|)
argument_list|,
literal|"end"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForEnd
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|filtered
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---"
operator|+
name|filtered
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filtered
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBetweenIncludeBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|setTravesalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|OrderDirection
operator|.
name|ASC
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|">= $start AND "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"<= $end"
decl_stmt|;
comment|// index automatically created by the framework:
comment|// {@code createTestIndexNode()}
comment|// initialising the data
name|Tree
name|rTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|rTree
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Calendar
name|start
init|=
name|midnightFirstJan2013
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|generateOrderedDates
argument_list|(
literal|10
argument_list|,
name|direction
argument_list|,
name|start
argument_list|)
argument_list|,
name|test
argument_list|,
name|direction
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|ValuePathTuple
name|n
range|:
name|nodes
control|)
block|{
name|n
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// System.out.println("+++" + n);
block|}
name|Calendar
name|searchForCalendarStart
init|=
operator|(
name|Calendar
operator|)
name|start
operator|.
name|clone
argument_list|()
decl_stmt|;
name|searchForCalendarStart
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForStart
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|searchForCalendarStart
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|endCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endCalendar
operator|.
name|setTime
argument_list|(
name|ISO_8601_2000
operator|.
name|parse
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endCalendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|-
literal|36
argument_list|)
expr_stmt|;
name|String
name|searchForEnd
init|=
name|ISO_8601_2000
operator|.
name|format
argument_list|(
name|endCalendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
name|filter
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"start"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForStart
argument_list|)
argument_list|,
literal|"end"
argument_list|,
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|searchForEnd
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|filter
argument_list|)
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|filtered
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---"
operator|+
name|filtered
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filtered
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|BetweenPredicate
argument_list|(
name|searchForStart
argument_list|,
name|searchForEnd
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertRightOrder
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filtered
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We should have looped throuhg all the results"
argument_list|,
name|results
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|setTravesalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

