begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ItemDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeTypeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|DefaultConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionDelegate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|NodeTypeManagerImpl
implements|implements
name|NodeTypeManager
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"/jcr:system/jcr:nodeTypes"
decl_stmt|;
specifier|private
specifier|final
name|SessionDelegate
name|sd
decl_stmt|;
specifier|public
name|NodeTypeManagerImpl
parameter_list|(
name|SessionDelegate
name|sd
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
block|}
comment|/**      * Called by the {@link NodeTypeManager} implementation methods to      * refresh the state of the session associated with this instance.      * That way the session is kept in sync with the latest global state      * seen by the node type manager.      *      * @throws RepositoryException if the session could not be refreshed      */
specifier|protected
name|void
name|refresh
parameter_list|()
throws|throws
name|RepositoryException
block|{     }
specifier|private
name|String
name|getTypePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// TODO: validate name
return|return
name|PATH
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
comment|//---------------------------------------------------< NodeTypeManager>--
annotation|@
name|Override
specifier|public
name|boolean
name|hasNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|sd
operator|.
name|getSession
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|getTypePath
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|sd
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|getTypePath
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Type not found: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getAllNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|sd
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|iterator
operator|.
name|nextNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getPrimaryNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|sd
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|iterator
operator|.
name|nextNode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getMixinNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|sd
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
operator|new
name|NodeTypeImpl
argument_list|(
name|this
argument_list|,
name|iterator
operator|.
name|nextNode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeTemplate
name|createNodeTypeTemplate
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeTypeTemplateImpl
argument_list|(
name|this
argument_list|,
name|sd
operator|.
name|getValueFactory
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeTemplate
name|createNodeTypeTemplate
parameter_list|(
name|NodeTypeDefinition
name|ntd
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|NodeTypeTemplateImpl
argument_list|(
name|this
argument_list|,
name|sd
operator|.
name|getValueFactory
argument_list|()
argument_list|,
name|ntd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinitionTemplate
name|createNodeDefinitionTemplate
parameter_list|()
block|{
return|return
operator|new
name|NodeDefinitionTemplateImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinitionTemplate
name|createPropertyDefinitionTemplate
parameter_list|()
block|{
return|return
operator|new
name|PropertyDefinitionTemplateImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|registerNodeType
parameter_list|(
name|NodeTypeDefinition
name|ntd
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeDefinition
index|[]
name|ntds
init|=
operator|new
name|NodeTypeDefinition
index|[]
block|{
name|ntd
block|}
decl_stmt|;
return|return
name|registerNodeTypes
argument_list|(
name|ntds
argument_list|,
name|allowUpdate
argument_list|)
operator|.
name|nextNodeType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|registerNodeTypes
parameter_list|(
name|NodeTypeDefinition
index|[]
name|ntds
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Root
name|root
init|=
name|sd
operator|.
name|getContentSession
argument_list|()
operator|.
name|getCurrentRoot
argument_list|()
decl_stmt|;
name|Node
name|types
init|=
name|getNodeTypes
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeTypeDefinition
name|ntd
range|:
name|ntds
control|)
block|{
name|internalRegister
argument_list|(
name|types
argument_list|,
name|ntd
argument_list|,
name|allowUpdate
argument_list|)
expr_stmt|;
block|}
name|commitChanges
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeType
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeTypeDefinition
name|ntd
range|:
name|ntds
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|getNodeType
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNodeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Root
name|root
init|=
name|sd
operator|.
name|getContentSession
argument_list|()
operator|.
name|getCurrentRoot
argument_list|()
decl_stmt|;
name|Node
name|types
init|=
name|getNodeTypes
argument_list|(
name|root
argument_list|)
decl_stmt|;
try|try
block|{
name|types
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|commitChanges
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterNodeTypes
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Root
name|root
init|=
name|sd
operator|.
name|getContentSession
argument_list|()
operator|.
name|getCurrentRoot
argument_list|()
decl_stmt|;
name|Node
name|types
init|=
name|getNodeTypes
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
try|try
block|{
name|types
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Node type "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|commitChanges
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
name|void
name|internalRegister
parameter_list|(
name|Node
name|types
parameter_list|,
name|NodeTypeDefinition
name|ntd
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|ntd
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|hasNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|types
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Node
name|node
init|=
name|types
operator|.
name|addNode
argument_list|(
name|ntd
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_NODE_TYPE_NAME
argument_list|,
name|name
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_SUPERTYPES
argument_list|,
name|ntd
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_IS_ABSTRACT
argument_list|,
name|ntd
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:isQueryable"
argument_list|,
name|ntd
operator|.
name|isQueryable
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: constant
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_IS_MIXIN
argument_list|,
name|ntd
operator|.
name|isMixin
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_HAS_ORDERABLE_CHILD_NODES
argument_list|,
name|ntd
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|primaryItemName
init|=
name|ntd
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryItemName
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_ITEM_NAME
argument_list|,
name|primaryItemName
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
name|int
name|pdn
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|pd
range|:
name|ntd
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
control|)
block|{
name|internalRegisterPropertyDefinition
argument_list|(
name|node
operator|.
name|addNode
argument_list|(
literal|"jcr:propertyDefinition["
operator|+
operator|(
operator|++
name|pdn
operator|)
operator|+
literal|"]"
argument_list|)
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
name|int
name|ndn
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDefinition
name|nd
range|:
name|ntd
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
control|)
block|{
name|internalRegisterNodeDefinition
argument_list|(
name|node
operator|.
name|addNode
argument_list|(
literal|"jcr:childNodeDefinition["
operator|+
operator|(
operator|++
name|ndn
operator|)
operator|+
literal|"]"
argument_list|)
argument_list|,
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalRegisterItemDefinition
parameter_list|(
name|Node
name|node
parameter_list|,
name|ItemDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|def
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_NAME
argument_list|,
name|name
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_AUTOCREATED
argument_list|,
name|def
operator|.
name|isAutoCreated
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_MANDATORY
argument_list|,
name|def
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_PROTECTED
argument_list|,
name|def
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_ON_PARENT_VERSION
argument_list|,
name|OnParentVersionAction
operator|.
name|nameFromValue
argument_list|(
name|def
operator|.
name|getOnParentVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|internalRegisterPropertyDefinition
parameter_list|(
name|Node
name|node
parameter_list|,
name|PropertyDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|internalRegisterItemDefinition
argument_list|(
name|node
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_REQUIRED_TYPE
argument_list|,
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_MULTIPLE
argument_list|,
name|def
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:isFullTextSearchable"
argument_list|,
name|def
operator|.
name|isFullTextSearchable
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:isQueryOrderable"
argument_list|,
name|def
operator|.
name|isQueryOrderable
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:availableQueryOperators"
argument_list|,
name|def
operator|.
name|getAvailableQueryOperators
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|constraints
init|=
name|def
operator|.
name|getValueConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_VALUE_CONSTRAINTS
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
block|}
name|Value
index|[]
name|values
init|=
name|def
operator|.
name|getDefaultValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_DEFAULT_VALUES
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalRegisterNodeDefinition
parameter_list|(
name|Node
name|node
parameter_list|,
name|NodeDefinition
name|def
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|internalRegisterItemDefinition
argument_list|(
name|node
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_SAME_NAME_SIBLINGS
argument_list|,
name|def
operator|.
name|allowsSameNameSiblings
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_REQUIRED_PRIMARY_TYPES
argument_list|,
name|def
operator|.
name|getRequiredPrimaryTypeNames
argument_list|()
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|String
name|defaultPrimaryType
init|=
name|def
operator|.
name|getDefaultPrimaryTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultPrimaryType
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|JCR_DEFAULT_PRIMARY_TYPE
argument_list|,
name|defaultPrimaryType
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|getNodeTypes
parameter_list|(
name|Root
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|types
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|NodeImpl
argument_list|(
operator|new
name|NodeDelegate
argument_list|(
name|sd
argument_list|,
name|types
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Node type registry not found"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|commitChanges
parameter_list|(
name|Root
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|root
operator|.
name|commit
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to modify the node type registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

