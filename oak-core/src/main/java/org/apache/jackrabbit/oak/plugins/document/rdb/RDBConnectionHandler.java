begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility functions for connection handling.  */
end_comment

begin_class
specifier|public
class|class
name|RDBConnectionHandler
block|{
specifier|private
specifier|final
name|DataSource
name|ds
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDBConnectionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Closing a connection doesn't necessarily imply a {@link Connection#commit()} or {@link Connection#rollback()}.      * This becomes a problem when the pool implemented by the {@link DataSource} re-uses the connection, and may      * affect subsequent users of that connection. This system property allows to enable a check to be done upon      * {@link #closeConnection(Connection)} so that problems can be detected early rather than late.      * See also https://issues.apache.org/jira/browse/OAK-2337.      */
specifier|private
specifier|static
specifier|final
name|boolean
name|CHECKCONNECTIONONCLOSE
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"org.apache.jackrabbit.oak.plugins.document.rdb.RDBConnectionHandler.CHECKCONNECTIONONCLOSE"
argument_list|)
decl_stmt|;
specifier|public
name|RDBConnectionHandler
parameter_list|(
annotation|@
name|Nonnull
name|DataSource
name|ds
parameter_list|)
block|{
name|this
operator|.
name|ds
operator|=
name|ds
expr_stmt|;
block|}
comment|/**      * Obtain a {@link Connection} suitable for read-only operations.      */
specifier|public
annotation|@
name|Nonnull
name|Connection
name|getROConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|c
init|=
name|this
operator|.
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**      * Obtain a {@link Connection} suitable for read-write operations.      */
specifier|public
annotation|@
name|Nonnull
name|Connection
name|getRWConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|c
init|=
name|this
operator|.
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**      * Roll back the {@link Connection}.      */
specifier|public
name|void
name|rollbackConnection
parameter_list|(
annotation|@
name|Nullable
name|Connection
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error on rollback (ignored)"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Close the {@link Connection}.      */
specifier|public
name|void
name|closeConnection
parameter_list|(
name|Connection
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|CHECKCONNECTIONONCLOSE
condition|)
block|{
try|try
block|{
name|c
operator|.
name|setReadOnly
argument_list|(
operator|!
name|c
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReadOnly
argument_list|(
operator|!
name|c
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex2
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"got dirty connection"
argument_list|,
name|ex2
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
literal|"dirty connection on close"
argument_list|,
name|ex2
argument_list|)
throw|;
block|}
block|}
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"exception on connection close (ignored)"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Closes a {@link Statement}, logging potential problems.      * @return null      */
specifier|public
parameter_list|<
name|T
extends|extends
name|Statement
parameter_list|>
name|T
name|closeStatement
parameter_list|(
annotation|@
name|CheckForNull
name|T
name|stmt
parameter_list|)
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing statement"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Closes a {@link ResultSet}, logging potential problems.      *       * @return null      */
specifier|public
name|ResultSet
name|closeResultSet
parameter_list|(
annotation|@
name|CheckForNull
name|ResultSet
name|rs
parameter_list|)
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing result set"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

