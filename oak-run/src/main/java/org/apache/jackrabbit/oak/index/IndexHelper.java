begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexInfoServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|datastore
operator|.
name|DataStoreTextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|IndexDefinitionPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|IndexPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|IndexHelper
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|File
name|outputDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
name|IndexInfoServiceImpl
name|indexInfoService
decl_stmt|;
specifier|private
name|IndexPathService
name|indexPathService
decl_stmt|;
specifier|private
name|AsyncIndexInfoService
name|asyncIndexInfoService
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|indexPaths
decl_stmt|;
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|LuceneIndexHelper
name|luceneIndexHelper
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
name|ExtractedTextCache
name|extractedTextCache
decl_stmt|;
name|IndexHelper
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|Whiteboard
name|whiteboard
parameter_list|,
name|File
name|outputDir
parameter_list|,
name|File
name|workDir
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|whiteboard
expr_stmt|;
name|this
operator|.
name|statisticsProvider
operator|=
name|checkNotNull
argument_list|(
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|StatisticsProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|indexPaths
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|indexPaths
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
specifier|public
name|File
name|getOutputDir
parameter_list|()
block|{
return|return
name|outputDir
return|;
block|}
specifier|public
name|File
name|getWorkDir
parameter_list|()
block|{
return|return
name|workDir
return|;
block|}
specifier|public
name|IndexPrinter
name|getIndexPrinter
parameter_list|()
block|{
return|return
operator|new
name|IndexPrinter
argument_list|(
name|getIndexInfoService
argument_list|()
argument_list|,
name|getAsyncIndexInfoService
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|IndexDefinitionPrinter
name|getIndexDefnPrinter
parameter_list|()
block|{
return|return
operator|new
name|IndexDefinitionPrinter
argument_list|(
name|store
argument_list|,
name|getIndexPathService
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|IndexPathService
name|getIndexPathService
parameter_list|()
block|{
if|if
condition|(
name|indexPathService
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|indexPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexPathService
operator|=
operator|new
name|IndexPathServiceImpl
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexPathService
operator|=
parameter_list|()
lambda|->
name|indexPaths
expr_stmt|;
block|}
block|}
return|return
name|indexPathService
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIndexPaths
parameter_list|()
block|{
return|return
name|indexPaths
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|ExecutorService
name|executorService
init|=
name|createExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|=
name|executorService
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
specifier|public
name|MountInfoProvider
name|getMountInfoProvider
parameter_list|()
block|{
return|return
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
return|;
block|}
specifier|public
name|StatisticsProvider
name|getStatisticsProvider
parameter_list|()
block|{
return|return
name|statisticsProvider
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|GarbageCollectableBlobStore
name|getGCBlobStore
parameter_list|()
block|{
return|return
name|blobStore
operator|instanceof
name|GarbageCollectableBlobStore
condition|?
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
else|:
literal|null
return|;
block|}
specifier|public
name|LuceneIndexHelper
name|getLuceneIndexHelper
parameter_list|()
block|{
if|if
condition|(
name|luceneIndexHelper
operator|==
literal|null
condition|)
block|{
name|luceneIndexHelper
operator|=
operator|new
name|LuceneIndexHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|luceneIndexHelper
argument_list|)
expr_stmt|;
block|}
return|return
name|luceneIndexHelper
return|;
block|}
specifier|public
name|ExtractedTextCache
name|getExtractedTextCache
parameter_list|()
block|{
if|if
condition|(
name|extractedTextCache
operator|==
literal|null
condition|)
block|{
name|extractedTextCache
operator|=
operator|new
name|ExtractedTextCache
argument_list|(
name|FileUtils
operator|.
name|ONE_MB
operator|*
literal|5
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|extractedTextCache
return|;
block|}
specifier|public
name|void
name|setPreExtractedTextDir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|getExtractedTextCache
argument_list|()
operator|.
name|setExtractedTextProvider
argument_list|(
operator|new
name|DataStoreTextWriter
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nullable
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getService
parameter_list|(
annotation|@
name|NotNull
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AsyncIndexInfoService
name|getAsyncIndexInfoService
parameter_list|()
block|{
if|if
condition|(
name|asyncIndexInfoService
operator|==
literal|null
condition|)
block|{
name|asyncIndexInfoService
operator|=
operator|new
name|AsyncIndexInfoServiceImpl
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncIndexInfoService
return|;
block|}
specifier|private
name|IndexInfoService
name|getIndexInfoService
parameter_list|()
block|{
if|if
condition|(
name|indexInfoService
operator|==
literal|null
condition|)
block|{
name|indexInfoService
operator|=
operator|new
name|IndexInfoServiceImpl
argument_list|(
name|store
argument_list|,
name|getIndexPathService
argument_list|()
argument_list|)
expr_stmt|;
name|bindIndexInfoProviders
argument_list|(
name|indexInfoService
argument_list|)
expr_stmt|;
block|}
return|return
name|indexInfoService
return|;
block|}
specifier|private
name|void
name|bindIndexInfoProviders
parameter_list|(
name|IndexInfoServiceImpl
name|indexInfoService
parameter_list|)
block|{
name|indexInfoService
operator|.
name|bindInfoProviders
argument_list|(
operator|new
name|LuceneIndexInfoProvider
argument_list|(
name|store
argument_list|,
name|getAsyncIndexInfoService
argument_list|()
argument_list|,
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|indexInfoService
operator|.
name|bindInfoProviders
argument_list|(
operator|new
name|PropertyIndexInfoProvider
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ThreadPoolExecutor
name|createExecutor
parameter_list|()
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
init|=
parameter_list|(
name|t
parameter_list|,
name|e
parameter_list|)
lambda|->
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred in asynchronous processing "
argument_list|,
name|e
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
annotation|@
name|NotNull
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
name|createName
argument_list|()
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
specifier|private
name|String
name|createName
parameter_list|()
block|{
return|return
literal|"oak-lucene-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setKeepAliveTime
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
block|}
end_class

end_unit

