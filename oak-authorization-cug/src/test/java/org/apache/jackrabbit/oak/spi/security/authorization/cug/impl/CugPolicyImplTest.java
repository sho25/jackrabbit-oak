begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalSetPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|CugExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|CugPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemUserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CugPolicyImplTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|String
name|path
init|=
literal|"/testPath"
decl_stmt|;
specifier|private
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
specifier|private
name|CugExclude
name|exclude
init|=
operator|new
name|CugExclude
operator|.
name|Default
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|principalManager
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CugPolicyImpl
name|createEmptyCugPolicy
parameter_list|()
block|{
return|return
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
return|;
block|}
specifier|private
name|CugPolicyImpl
name|createEmptyCugPolicy
parameter_list|(
name|int
name|importBehavior
parameter_list|)
block|{
return|return
operator|new
name|CugPolicyImpl
argument_list|(
name|path
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|principalManager
argument_list|,
name|importBehavior
argument_list|,
name|exclude
argument_list|)
return|;
block|}
specifier|private
name|CugPolicyImpl
name|createCugPolicy
parameter_list|(
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
return|return
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|principals
argument_list|)
return|;
block|}
specifier|private
name|CugPolicyImpl
name|createCugPolicy
parameter_list|(
name|int
name|importBehavior
parameter_list|,
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
return|return
operator|new
name|CugPolicyImpl
argument_list|(
name|path
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|principalManager
argument_list|,
name|importBehavior
argument_list|,
name|exclude
argument_list|,
name|principals
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Principal
name|getExcludedPrincipal
parameter_list|()
block|{
return|return
call|(
name|SystemUserPrincipal
call|)
argument_list|()
operator|->
literal|"excluded"
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrincipalSetPolicy
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|createCugPolicy
argument_list|(
name|principals
argument_list|)
operator|instanceof
name|PrincipalSetPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipals
parameter_list|()
block|{
name|CugPolicyImpl
name|cug
init|=
name|createCugPolicy
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|cug
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|principalSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principals
argument_list|,
name|principalSet
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|principals
argument_list|,
name|principalSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipals2
parameter_list|()
block|{
name|CugPolicyImpl
name|empty
init|=
name|createEmptyCugPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|empty
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithDuplicateName
parameter_list|()
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|duplication
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|testPrincipal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|duplication
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CugPolicyImpl
name|cugPolicy
init|=
name|createCugPolicy
argument_list|(
name|duplication
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cugPolicy
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|cugPolicy
operator|.
name|getPrincipalNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalNames
parameter_list|()
block|{
name|CugPolicyImpl
name|cug
init|=
name|createCugPolicy
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|cug
operator|.
name|getPrincipalNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalNames2
parameter_list|()
block|{
name|CugPolicyImpl
name|empty
init|=
name|createEmptyCugPolicy
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|getPrincipalNames
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|empty
init|=
name|createEmptyCugPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|empty
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|empty
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddInvalidPrincipalsAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
decl_stmt|;
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidPrincipalsBestEffort
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|cug
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|principalSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidPrincipalsIgnore
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|IGNORE
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|cug
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|principalSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalSet
operator|.
name|contains
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|principalSet
operator|.
name|contains
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddContainedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principals
argument_list|,
name|cug
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddContainedPrincipalNonEqualImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
call|(
name|Principal
call|)
argument_list|()
operator|->
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principals
argument_list|,
name|cug
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddEmptyPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|)
decl_stmt|;
name|cug
operator|.
name|addPrincipals
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddNullPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|)
decl_stmt|;
name|cug
operator|.
name|addPrincipals
argument_list|(
call|(
name|Principal
call|)
argument_list|()
operator|->
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cug
operator|.
name|removePrincipals
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|removePrincipals
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|removePrincipals
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveContainedPrincipalNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|removePrincipals
argument_list|(
call|(
name|Principal
call|)
argument_list|()
operator|->
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|CugPolicy
name|empty
init|=
name|createEmptyCugPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|empty
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPathWithRemapping
parameter_list|()
block|{
name|String
name|oakPath
init|=
literal|"/oak:testPath"
decl_stmt|;
name|NamePathMapper
name|mapper
init|=
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|LocalNameMapper
argument_list|(
name|root
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"quercus"
argument_list|,
literal|"http://jackrabbit.apache.org/oak/ns/1.0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|CugPolicy
name|empty
init|=
operator|new
name|CugPolicyImpl
argument_list|(
name|oakPath
argument_list|,
name|mapper
argument_list|,
name|principalManager
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/quercus:testPath"
argument_list|,
name|empty
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidImportBehavior
parameter_list|()
block|{
name|CugPolicy
name|cug
init|=
name|createCugPolicy
argument_list|(
operator|-
literal|1
argument_list|,
name|principals
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSingleExcludedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|getExcludedPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddExcludedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicyImpl
name|cug
init|=
name|createEmptyCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|)
decl_stmt|;
name|Principal
name|excluded
init|=
name|getExcludedPrincipal
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|excluded
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|cug
operator|.
name|getPrincipalNames
argument_list|()
argument_list|,
name|excluded
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExcludedPrincipalAddedBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|excluded
init|=
name|getExcludedPrincipal
argument_list|()
decl_stmt|;
name|CugPolicyImpl
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|excluded
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|cug
operator|.
name|getPrincipalNames
argument_list|()
argument_list|,
name|excluded
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeExcludedPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|excluded
init|=
name|getExcludedPrincipal
argument_list|()
decl_stmt|;
name|CugPolicyImpl
name|cug
init|=
name|createCugPolicy
argument_list|(
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|excluded
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cug
operator|.
name|removePrincipals
argument_list|(
name|excluded
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testImmutableAddPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
operator|new
name|CugPolicyImpl
argument_list|(
name|path
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|principalManager
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|exclude
argument_list|,
name|principals
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cug
operator|.
name|addPrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testImmutableRemovePrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|CugPolicy
name|cug
init|=
operator|new
name|CugPolicyImpl
argument_list|(
name|path
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|principalManager
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|exclude
argument_list|,
name|principals
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cug
operator|.
name|removePrincipals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

