begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Funnels
import|;
end_import

begin_class
class|class
name|BlobIdSet
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobIdSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|store
decl_stmt|;
specifier|private
specifier|final
name|BloomFilter
argument_list|<
name|CharSequence
argument_list|>
name|bloomFilter
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|cache
decl_stmt|;
name|BlobIdSet
parameter_list|(
name|String
name|repositoryDir
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|store
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|repositoryDir
argument_list|)
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|bloomFilter
operator|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|Funnels
operator|.
name|stringFunnel
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|9000000
argument_list|)
expr_stmt|;
comment|// about 8MB
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fillBloomFilter
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|bloomFilter
operator|.
name|apply
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Boolean
name|cached
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
if|if
condition|(
name|isPresentInStore
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|blobId
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|put
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|cache
operator|.
name|put
argument_list|(
name|blobId
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
name|addToStore
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|put
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|blobId
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPresentInStore
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|store
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|addToStore
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|store
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
name|blobId
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillBloomFilter
parameter_list|()
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|bloomFilter
operator|.
name|put
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't fill bloom filter"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

