begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalIDPManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|SyncManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|CompositeTokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|CompositePrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableNodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardAuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|SecurityProviderImpl
implements|implements
name|SecurityProvider
block|{
annotation|@
name|Reference
argument_list|(
name|bind
operator|=
literal|"bindAuthorizationConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|,
comment|// FIXME OAK-1268
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|AuthorizationConfiguration
name|authorizationConfiguration
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|bind
operator|=
literal|"bindAuthenticationConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|AuthenticationConfiguration
name|authenticationConfiguration
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|bind
operator|=
literal|"bindPrivilegeConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|PrivilegeConfiguration
name|privilegeConfiguration
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|bind
operator|=
literal|"bindUserConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|UserConfiguration
name|userConfiguration
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|referenceInterface
operator|=
name|PrincipalConfiguration
operator|.
name|class
argument_list|,
name|bind
operator|=
literal|"bindPrincipalConfiguration"
argument_list|,
name|unbind
operator|=
literal|"unbindPrincipalConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_MULTIPLE
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|PrincipalConfiguration
name|principalConfiguration
init|=
operator|new
name|CompositePrincipalConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|referenceInterface
operator|=
name|TokenConfiguration
operator|.
name|class
argument_list|,
name|bind
operator|=
literal|"bindTokenConfiguration"
argument_list|,
name|unbind
operator|=
literal|"unbindTokenConfiguration"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|TokenConfiguration
name|tokenConfiguration
init|=
operator|new
name|CompositeTokenConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|referenceInterface
operator|=
name|AuthorizableNodeName
operator|.
name|class
argument_list|,
name|bind
operator|=
literal|"bindAuthorizableNodeName"
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policyOption
operator|=
name|ReferencePolicyOption
operator|.
name|GREEDY
argument_list|)
specifier|private
name|NameGenerator
name|authorizableNodeName
init|=
operator|new
name|NameGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WhiteboardAuthorizableActionProvider
name|authorizableActionProvider
init|=
operator|new
name|WhiteboardAuthorizableActionProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WhiteboardRestrictionProvider
name|restrictionProvider
init|=
operator|new
name|WhiteboardRestrictionProvider
argument_list|()
decl_stmt|;
specifier|private
name|ConfigurationParameters
name|configuration
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
comment|/**      * Default constructor used in OSGi environments.      */
specifier|protected
name|SecurityProviderImpl
parameter_list|()
block|{
name|this
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor used for non OSGi environments.      * @param configuration security configuration      */
specifier|public
name|SecurityProviderImpl
parameter_list|(
name|ConfigurationParameters
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|authenticationConfiguration
operator|=
operator|new
name|AuthenticationConfigurationImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|authorizationConfiguration
operator|=
operator|new
name|AuthorizationConfigurationImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|userConfiguration
operator|=
operator|new
name|UserConfigurationImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|principalConfiguration
operator|=
operator|new
name|PrincipalConfigurationImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|privilegeConfiguration
operator|=
operator|new
name|PrivilegeConfigurationImpl
argument_list|()
expr_stmt|;
name|tokenConfiguration
operator|=
operator|new
name|TokenConfigurationImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// register non-OSGi managers
name|whiteboard
operator|.
name|register
argument_list|(
name|SyncManager
operator|.
name|class
argument_list|,
operator|new
name|SyncManagerImpl
argument_list|(
name|whiteboard
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|ExternalIdentityProviderManager
operator|.
name|class
argument_list|,
operator|new
name|ExternalIDPManagerImpl
argument_list|(
name|whiteboard
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|configuration
return|;
block|}
name|ConfigurationParameters
name|params
init|=
name|configuration
operator|.
name|getConfigValue
argument_list|(
name|name
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|SecurityConfiguration
name|sc
range|:
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|!=
literal|null
operator|&&
name|sc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|params
argument_list|,
name|sc
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|SecurityConfiguration
argument_list|>
name|getConfigurations
parameter_list|()
block|{
name|Set
argument_list|<
name|SecurityConfiguration
argument_list|>
name|scs
init|=
operator|new
name|HashSet
argument_list|<
name|SecurityConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|authenticationConfiguration
argument_list|)
expr_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|authorizationConfiguration
argument_list|)
expr_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|userConfiguration
argument_list|)
expr_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|principalConfiguration
argument_list|)
expr_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|privilegeConfiguration
argument_list|)
expr_stmt|;
name|scs
operator|.
name|add
argument_list|(
name|tokenConfiguration
argument_list|)
expr_stmt|;
return|return
name|scs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|Class
argument_list|<
name|T
argument_list|>
name|configClass
parameter_list|)
block|{
if|if
condition|(
name|AuthenticationConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|authenticationConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|AuthorizationConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|authorizationConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|UserConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|userConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|PrincipalConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|principalConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|PrivilegeConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|privilegeConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|TokenConfiguration
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|tokenConfiguration
return|;
block|}
elseif|else
if|if
condition|(
name|Whiteboard
operator|.
name|class
operator|==
name|configClass
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|whiteboard
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported security configuration class "
operator|+
name|configClass
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|whiteboard
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|authorizableActionProvider
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|restrictionProvider
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|()
throws|throws
name|Exception
block|{
name|authorizableActionProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
name|restrictionProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|bindAuthorizationConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
comment|// also initialize authorization config specific default parameters or OSGi environments
name|Map
argument_list|<
name|String
argument_list|,
name|WhiteboardRestrictionProvider
argument_list|>
name|authorizMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|PARAM_RESTRICTION_PROVIDER
argument_list|,
name|restrictionProvider
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|newConfig
operator|.
name|put
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|authorizMap
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
name|authorizationConfiguration
operator|=
operator|(
name|AuthorizationConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindAuthenticationConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|authenticationConfiguration
operator|=
operator|(
name|AuthenticationConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindUserConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
comment|// also initialize user config specific default parameters or OSGi environments
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|userMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_ACTION_PROVIDER
argument_list|,
name|authorizableActionProvider
argument_list|,
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_NODE_NAME
argument_list|,
name|authorizableNodeName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|newConfig
operator|.
name|put
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|userMap
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
name|userConfiguration
operator|=
operator|(
name|UserConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindPrivilegeConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|privilegeConfiguration
operator|=
operator|(
name|PrivilegeConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindPrincipalConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
comment|// replace composite configuration if needed
if|if
condition|(
operator|!
operator|(
name|principalConfiguration
operator|instanceof
name|CompositePrincipalConfiguration
operator|)
condition|)
block|{
name|principalConfiguration
operator|=
operator|new
name|CompositePrincipalConfiguration
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|CompositePrincipalConfiguration
operator|)
name|principalConfiguration
operator|)
operator|.
name|addConfiguration
argument_list|(
operator|(
name|PrincipalConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindPrincipalConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|pc
init|=
name|reference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|instanceof
name|PrincipalConfiguration
condition|)
block|{
if|if
condition|(
name|principalConfiguration
operator|instanceof
name|CompositePrincipalConfiguration
condition|)
block|{
operator|(
operator|(
name|CompositePrincipalConfiguration
operator|)
name|principalConfiguration
operator|)
operator|.
name|removeConfiguration
argument_list|(
operator|(
name|PrincipalConfiguration
operator|)
name|pc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|bindTokenConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
comment|// replace composite configuration if needed
if|if
condition|(
operator|!
operator|(
name|tokenConfiguration
operator|instanceof
name|CompositeTokenConfiguration
operator|)
condition|)
block|{
name|tokenConfiguration
operator|=
operator|new
name|CompositeTokenConfiguration
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|CompositeTokenConfiguration
operator|)
name|tokenConfiguration
operator|)
operator|.
name|addConfiguration
argument_list|(
operator|(
name|TokenConfiguration
operator|)
name|initConfiguration
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindTokenConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|tc
init|=
name|reference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|instanceof
name|TokenConfiguration
condition|)
block|{
if|if
condition|(
name|tokenConfiguration
operator|instanceof
name|CompositeTokenConfiguration
condition|)
block|{
operator|(
operator|(
name|CompositeTokenConfiguration
operator|)
name|tokenConfiguration
operator|)
operator|.
name|removeConfiguration
argument_list|(
operator|(
name|TokenConfiguration
operator|)
name|tc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|bindAuthorizableNodeName
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|ann
init|=
name|reference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|instanceof
name|AuthorizableNodeName
condition|)
block|{
name|authorizableNodeName
operator|.
name|dlg
operator|=
operator|(
name|AuthorizableNodeName
operator|)
name|ann
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|initConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|service
init|=
name|reference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|ConfigurationBase
condition|)
block|{
operator|(
operator|(
name|ConfigurationBase
operator|)
name|service
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
specifier|private
specifier|final
class|class
name|NameGenerator
implements|implements
name|AuthorizableNodeName
block|{
specifier|private
name|AuthorizableNodeName
name|dlg
init|=
name|AuthorizableNodeName
operator|.
name|DEFAULT
decl_stmt|;
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|generateNodeName
parameter_list|(
annotation|@
name|Nonnull
name|String
name|authorizableId
parameter_list|)
block|{
return|return
name|dlg
operator|.
name|generateNodeName
argument_list|(
name|authorizableId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

