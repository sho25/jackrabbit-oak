begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A mutable {@code Tree} implementation based on an underlying  * {@code NodeBuilder}, which tracks all changes recorded through  * this tree's mutator methods.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|NodeBuilderTree
extends|extends
name|AbstractMutableTree
block|{
specifier|private
specifier|final
name|NodeBuilderTree
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|nodeBuilder
decl_stmt|;
comment|/**      * Create a new {@code AbstractTree} instance      *      * @param nodeBuilder {@code NodeBuilder} for the underlying node state      * @param name        name of the tree      */
specifier|public
name|NodeBuilderTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|nodeBuilder
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NodeBuilderTree
parameter_list|(
annotation|@
name|Nullable
name|NodeBuilderTree
name|parent
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|nodeBuilder
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|nodeBuilder
operator|=
name|nodeBuilder
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|protected
name|AbstractMutableTree
name|getParentOrNull
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|NodeBuilder
name|getNodeBuilder
parameter_list|()
block|{
return|return
name|nodeBuilder
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|protected
name|NodeBuilderTree
name|createChild
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
operator|new
name|NodeBuilderTree
argument_list|(
name|this
argument_list|,
name|nodeBuilder
operator|.
name|getChildNode
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

