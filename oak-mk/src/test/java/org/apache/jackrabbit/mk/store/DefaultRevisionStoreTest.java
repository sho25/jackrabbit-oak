begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|persistence
operator|.
name|InMemPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests verifying the inner workings of<code>DefaultRevisionStore</code>.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRevisionStoreTest
block|{
specifier|private
name|DefaultRevisionStore
name|rs
decl_stmt|;
specifier|private
name|MicroKernel
name|mk
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|rs
operator|=
operator|new
name|DefaultRevisionStore
argument_list|(
operator|new
name|InMemPersistence
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doMark
parameter_list|()
throws|throws
name|Exception
block|{
name|markCommit
argument_list|(
name|getHeadCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|rs
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mk
operator|=
operator|new
name|MicroKernelImpl
argument_list|(
operator|new
name|Repository
argument_list|(
name|rs
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mk
operator|!=
literal|null
condition|)
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGC
parameter_list|()
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"c\":{}, \"d\":{} }"
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"b\" : {}"
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/b"
argument_list|,
literal|"+\"e\" : {}"
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/a/c"
argument_list|,
literal|"+\"f\" : {}"
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|headRevision
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
decl_stmt|;
name|rs
operator|.
name|gc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|headRevision
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|contents
argument_list|,
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|headRevision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

