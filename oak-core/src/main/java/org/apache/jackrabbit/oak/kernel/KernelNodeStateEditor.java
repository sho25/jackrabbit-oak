begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeStateEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This {@code NodeStateEditor} implementation accumulates all changes into a json diff  * and applies them to the microkernel on  * {@link org.apache.jackrabbit.mk.model.NodeStore#merge(NodeStateEditor, NodeState)}.  *  * TODO: review/rewrite when OAK-45 is resolved  * When the MicroKernel has support for branching and merging private working copies,  * this implementation could:  * - directly write every operation through to the private working copy  * - batch write operations through to the private working copy when the  *   transient space gets too big.  * - spool write operations through to the private working copy on a background thread  */
end_comment

begin_class
specifier|public
class|class
name|KernelNodeStateEditor
implements|implements
name|NodeStateEditor
block|{
specifier|private
specifier|final
name|NodeState
name|base
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|jsop
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|addedNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|addedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|KernelNodeStateEditor
parameter_list|(
name|NodeState
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|jsop
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
specifier|private
name|KernelNodeStateEditor
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|String
name|path
parameter_list|,
name|StringBuilder
name|jsop
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|jsop
operator|=
name|jsop
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasNodeState
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|transientAddNode
argument_list|(
name|name
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":{}"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|hasNodeState
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|transientRemoveNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
name|transientSetProperty
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|state
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|transientRemoveProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":null"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelNodeStateEditor
name|sourceParent
init|=
name|getEditor
argument_list|(
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|sourcePath
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sourceName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceParent
operator|==
literal|null
operator|||
operator|!
name|sourceParent
operator|.
name|hasNodeState
argument_list|(
name|sourceName
argument_list|)
condition|)
block|{
return|return;
block|}
name|KernelNodeStateEditor
name|destParent
init|=
name|getEditor
argument_list|(
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|destPath
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|destParent
operator|==
literal|null
operator|||
name|destParent
operator|.
name|hasNodeState
argument_list|(
name|destName
argument_list|)
condition|)
block|{
return|return;
block|}
name|destParent
operator|.
name|transientAddNode
argument_list|(
name|destName
argument_list|,
name|sourceParent
operator|.
name|transientRemoveNode
argument_list|(
name|sourceName
argument_list|)
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|">\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|sourcePath
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|destPath
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|KernelNodeStateEditor
name|source
init|=
name|getEditor
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|KernelNodeStateEditor
name|destParent
init|=
name|getEditor
argument_list|(
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|destPath
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|destName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|destPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|destParent
operator|==
literal|null
operator|||
name|destParent
operator|.
name|hasNodeState
argument_list|(
name|destName
argument_list|)
condition|)
block|{
return|return;
block|}
name|destParent
operator|.
name|transientAddNode
argument_list|(
name|destName
argument_list|,
name|source
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|append
argument_list|(
literal|"*\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|sourcePath
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|(
name|destPath
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|KernelNodeStateEditor
name|edit
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|childState
init|=
name|getChildNodeState
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|childState
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|childState
operator|instanceof
name|TransientNodeState
condition|)
block|{
return|return
operator|(
operator|(
name|TransientNodeState
operator|)
name|childState
operator|)
operator|.
name|editor
return|;
block|}
else|else
block|{
return|return
operator|new
name|KernelNodeStateEditor
argument_list|(
name|childState
argument_list|,
name|cat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|jsop
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
operator|new
name|TransientNodeState
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getBaseNodeState
parameter_list|()
block|{
return|return
name|base
return|;
block|}
comment|//------------------------------------------------------------< internal>---
name|NodeState
name|mergeInto
parameter_list|(
name|MicroKernel
name|microkernel
parameter_list|,
name|KernelNodeState
name|target
parameter_list|)
block|{
name|String
name|targetPath
init|=
name|target
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|String
name|targetRevision
init|=
name|target
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|microkernel
operator|.
name|commit
argument_list|(
name|targetPath
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
name|targetRevision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|KernelNodeState
argument_list|(
name|microkernel
argument_list|,
name|targetPath
argument_list|,
name|rev
argument_list|)
return|;
block|}
specifier|private
name|KernelNodeStateEditor
name|getEditor
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|KernelNodeStateEditor
name|editor
init|=
name|this
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|editor
operator|=
name|editor
operator|.
name|edit
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|editor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|editor
return|;
block|}
specifier|private
specifier|static
name|String
name|cat
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|relPath
else|:
name|path
operator|+
literal|'/'
operator|+
name|relPath
return|;
block|}
specifier|private
name|String
name|path
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|cat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|getChildNodeState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|addedNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
return|return
name|removedNodes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasNodeState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getChildNodeState
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
name|PropertyState
name|getPropertyState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|state
init|=
name|addedProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
if|if
condition|(
name|removedProperties
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|base
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|transientAddNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|nodeState
parameter_list|)
block|{
name|addedNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|transientRemoveNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|addedNodes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|removedNodes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|state
operator|==
literal|null
condition|?
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
else|:
name|state
return|;
block|}
specifier|private
name|void
name|transientSetProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
name|addedProperties
operator|.
name|put
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|transientRemoveProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|removedProperties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TransientNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|final
name|KernelNodeStateEditor
name|editor
decl_stmt|;
specifier|public
name|TransientNodeState
parameter_list|(
name|KernelNodeStateEditor
name|editor
parameter_list|)
block|{
name|this
operator|.
name|editor
operator|=
name|editor
expr_stmt|;
block|}
specifier|public
name|TransientNodeState
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|editor
operator|=
operator|new
name|KernelNodeStateEditor
argument_list|(
name|this
argument_list|,
name|cat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|jsop
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|editor
operator|.
name|getPropertyState
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|editor
operator|.
name|getChildNodeState
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|editor
operator|.
name|removedProperties
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|added
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|putAll
argument_list|(
name|editor
operator|.
name|addedProperties
argument_list|)
expr_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|baseProperties
init|=
name|editor
operator|.
name|base
operator|.
name|getProperties
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
init|=
name|baseProperties
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|PropertyState
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PropertyState
name|prop
init|=
name|properties
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|containsKey
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|added
operator|.
name|get
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|prop
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|PropertyState
name|e
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|editor
operator|.
name|removedNodes
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|added
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|putAll
argument_list|(
name|editor
operator|.
name|addedNodes
argument_list|)
expr_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|baseNodes
init|=
name|editor
operator|.
name|base
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|properties
init|=
name|baseNodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|ChildNodeEntry
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ChildNodeEntry
name|entry
init|=
name|properties
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
operator|new
name|AbstractChildNodeEntry
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getNode
parameter_list|()
block|{
return|return
name|added
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|entry
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|ChildNodeEntry
name|e
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

