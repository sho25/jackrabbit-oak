begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_HASORDERABLECHILDNODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYITEMNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SUPERTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_CHILDNODEDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_PROPERTYDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_QUERYABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_DECLARING_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_MIXIN_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_PRIMARY_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_RESIDUAL_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|RESIDUAL_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ItemDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|CompactNodeTypeDefWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeTypeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|UUIDUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|JcrNameParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|JcrPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|constraint
operator|.
name|Constraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<pre>  * [nt:nodeType]  * - jcr:nodeTypeName (NAME) protected mandatory  * - jcr:supertypes (NAME) protected multiple  * - jcr:isAbstract (BOOLEAN) protected mandatory  * - jcr:isQueryable (BOOLEAN) protected mandatory  * - jcr:isMixin (BOOLEAN) protected mandatory  * - jcr:hasOrderableChildNodes (BOOLEAN) protected mandatory  * - jcr:primaryItemName (NAME) protected  * + jcr:propertyDefinition (nt:propertyDefinition) = nt:propertyDefinition protected sns  * + jcr:childNodeDefinition (nt:childNodeDefinition) = nt:childNodeDefinition protected sns  *</pre>  */
end_comment

begin_class
class|class
name|NodeTypeImpl
extends|extends
name|AbstractTypeDefinition
implements|implements
name|NodeType
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeTypeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PropertyDefinition
index|[]
name|NO_PROPERTY_DEFINITIONS
init|=
operator|new
name|PropertyDefinition
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NodeDefinition
index|[]
name|NO_NODE_DEFINITIONS
init|=
operator|new
name|NodeDefinition
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NodeType
index|[]
name|NO_NODE_TYPES
init|=
operator|new
name|NodeType
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NO_NAMES
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|NodeTypeImpl
parameter_list|(
name|Tree
name|type
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getOakName
parameter_list|()
block|{
return|return
name|getOakName
argument_list|(
name|definition
argument_list|)
return|;
block|}
specifier|private
name|String
name|getOakName
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAME
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|tree
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|//-----------------------------------------------------------< NodeType>---
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|mapper
operator|.
name|getJcrName
argument_list|(
name|getOakName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDeclaredSupertypeNames
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|getNames
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|mapper
operator|.
name|getJcrName
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|names
operator|=
name|NO_NAMES
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMixin
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOrderableChildNodes
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JCR_HASORDERABLECHILDNODES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|JCR_IS_QUERYABLE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrimaryItemName
parameter_list|()
block|{
name|String
name|oakName
init|=
name|getName
argument_list|(
name|JCR_PRIMARYITEMNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakName
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
operator|.
name|getJcrName
argument_list|(
name|oakName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns the declared property definitions in their original order.      *      * @return declared property definitions      */
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|PropertyDefinition
index|[]
name|getDeclaredPropertyDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|PropertyDefinition
argument_list|>
name|definitions
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|Iterables
operator|.
name|filter
argument_list|(
name|definition
operator|.
name|getChildren
argument_list|()
argument_list|,
name|PrimaryTypePredicate
operator|.
name|PROPERTY_DEF_PREDICATE
argument_list|)
control|)
block|{
name|definitions
operator|.
name|put
argument_list|(
name|getIndex
argument_list|(
name|child
argument_list|)
argument_list|,
operator|new
name|PropertyDefinitionImpl
argument_list|(
name|child
argument_list|,
name|this
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definitions
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|NO_PROPERTY_DEFINITIONS
argument_list|)
return|;
block|}
comment|/**      * Returns the declared child node definitions in their original order.      *      * @return declared child node definitions      */
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|NodeDefinition
index|[]
name|getDeclaredChildNodeDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|NodeDefinition
argument_list|>
name|definitions
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|Iterables
operator|.
name|filter
argument_list|(
name|definition
operator|.
name|getChildren
argument_list|()
argument_list|,
name|PrimaryTypePredicate
operator|.
name|CHILDNODE_DEF_PREDICATE
argument_list|)
control|)
block|{
name|definitions
operator|.
name|put
argument_list|(
name|getIndex
argument_list|(
name|child
argument_list|)
argument_list|,
operator|new
name|NodeDefinitionImpl
argument_list|(
name|child
argument_list|,
name|this
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definitions
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|NO_NODE_DEFINITIONS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getSupertypes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|supertypes
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|addSupertypes
argument_list|(
name|definition
argument_list|,
name|supertypes
argument_list|)
expr_stmt|;
return|return
name|supertypes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|NO_NODE_TYPES
argument_list|)
return|;
block|}
specifier|private
name|void
name|addSupertypes
parameter_list|(
name|Tree
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|supertypes
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|type
operator|.
name|getProperty
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|Tree
name|root
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|oakName
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|supertypes
operator|.
name|containsKey
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|Tree
name|supertype
init|=
name|root
operator|.
name|getChild
argument_list|(
name|oakName
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|supertype
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|supertypes
operator|.
name|put
argument_list|(
name|oakName
argument_list|,
operator|new
name|NodeTypeImpl
argument_list|(
name|supertype
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
name|addSupertypes
argument_list|(
name|supertype
argument_list|,
name|supertypes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getDeclaredSupertypes
parameter_list|()
block|{
name|NodeType
index|[]
name|supertypes
init|=
name|NO_NODE_TYPES
decl_stmt|;
name|String
index|[]
name|oakNames
init|=
name|getNames
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakNames
operator|!=
literal|null
operator|&&
name|oakNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|supertypes
operator|=
operator|new
name|NodeType
index|[
name|oakNames
operator|.
name|length
index|]
expr_stmt|;
name|Tree
name|root
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oakNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|type
init|=
name|root
operator|.
name|getChild
argument_list|(
name|oakNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|type
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|supertypes
index|[
name|i
index|]
operator|=
operator|new
name|NodeTypeImpl
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|supertypes
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getSubtypes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritance
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Tree
name|root
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|PropertyState
name|supertypes
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|supername
range|:
name|supertypes
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subtypes
init|=
name|inheritance
operator|.
name|get
argument_list|(
name|supername
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtypes
operator|==
literal|null
condition|)
block|{
name|subtypes
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|inheritance
operator|.
name|put
argument_list|(
name|supername
argument_list|,
name|subtypes
argument_list|)
expr_stmt|;
block|}
name|subtypes
operator|.
name|add
argument_list|(
name|oakName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|subtypes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|addSubtypes
argument_list|(
name|getOakName
argument_list|()
argument_list|,
name|subtypes
argument_list|,
name|root
argument_list|,
name|inheritance
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|subtypes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|addSubtypes
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|subtypes
parameter_list|,
name|Tree
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritance
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subnames
init|=
name|inheritance
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subnames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|subname
range|:
name|subnames
control|)
block|{
if|if
condition|(
operator|!
name|subtypes
operator|.
name|containsKey
argument_list|(
name|subname
argument_list|)
condition|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getChild
argument_list|(
name|subname
argument_list|)
decl_stmt|;
name|subtypes
operator|.
name|put
argument_list|(
name|subname
argument_list|,
operator|new
name|NodeTypeImpl
argument_list|(
name|tree
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getDeclaredSubtypes
parameter_list|()
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|subtypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|oakName
init|=
name|getOakName
argument_list|()
decl_stmt|;
name|Tree
name|root
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PropertyState
name|supertypes
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|supertypes
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
name|oakName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|subtypes
operator|.
name|add
argument_list|(
operator|new
name|NodeTypeImpl
argument_list|(
name|child
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|subtypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNodeType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
name|String
name|oakName
init|=
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
name|internalIsNodeType
argument_list|(
name|oakName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getPropertyDefinitions
parameter_list|()
block|{
name|Collection
argument_list|<
name|PropertyDefinition
argument_list|>
name|definitions
init|=
name|internalGetPropertyDefinitions
argument_list|()
decl_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getChildNodeDefinitions
parameter_list|()
block|{
name|Collection
argument_list|<
name|NodeDefinition
argument_list|>
name|definitions
init|=
name|internalGetChildDefinitions
argument_list|()
decl_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|NodeDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|canRemoveProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
try|try
block|{
name|EffectiveNodeTypeImpl
name|effective
init|=
operator|new
name|EffectiveNodeTypeImpl
argument_list|(
name|this
argument_list|,
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|effective
operator|.
name|getPropertyDefinition
argument_list|(
name|propertyName
argument_list|,
literal|false
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|!
name|def
operator|.
name|isProtected
argument_list|()
operator|&&
name|meetsTypeConstraints
argument_list|(
name|value
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|&&
name|meetsValueConstraints
argument_list|(
name|value
argument_list|,
name|def
operator|.
name|getValueConstraints
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO don't use exceptions for flow control. Use internal method in ReadOnlyNodeTypeManager instead.
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|canRemoveProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
try|try
block|{
name|int
name|type
init|=
operator|(
name|values
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|PropertyType
operator|.
name|STRING
else|:
name|values
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
name|EffectiveNodeTypeImpl
name|effective
init|=
operator|new
name|EffectiveNodeTypeImpl
argument_list|(
name|this
argument_list|,
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|def
init|=
name|effective
operator|.
name|getPropertyDefinition
argument_list|(
name|propertyName
argument_list|,
literal|true
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|!
name|def
operator|.
name|isProtected
argument_list|()
operator|&&
name|meetsTypeConstraints
argument_list|(
name|values
argument_list|,
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|&&
name|meetsValueConstraints
argument_list|(
name|values
argument_list|,
name|def
operator|.
name|getValueConstraints
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// TODO don't use exceptions for flow control. Use internal method in ReadOnlyNodeTypeManager instead.
name|log
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|)
block|{
comment|// FIXME: properly calculate matching definition
for|for
control|(
name|NodeDefinition
name|definition
range|:
name|getChildNodeDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|childNodeName
argument_list|,
name|name
argument_list|)
operator|||
name|RESIDUAL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|!
name|definition
operator|.
name|isProtected
argument_list|()
operator|&&
name|definition
operator|.
name|getDefaultPrimaryType
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeType
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|getManager
argument_list|()
operator|.
name|getNodeType
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchNodeTypeException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access node type "
operator|+
name|nodeTypeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// FIXME: properly calculate matching definition
for|for
control|(
name|NodeDefinition
name|definition
range|:
name|getChildNodeDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|childNodeName
argument_list|,
name|name
argument_list|)
operator|||
name|RESIDUAL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|required
range|:
name|definition
operator|.
name|getRequiredPrimaryTypeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isNodeType
argument_list|(
name|required
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveItem
parameter_list|(
name|String
name|itemName
parameter_list|)
block|{
name|List
argument_list|<
name|ItemDefinition
argument_list|>
name|definitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|internalCanRemoveItem
argument_list|(
name|itemName
argument_list|,
name|definitions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|internalCanRemoveItem
argument_list|(
name|nodeName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|getChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|internalCanRemoveItem
argument_list|(
name|propertyName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|getPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the namespace neutral CND of the given node type definition.      * @param def the node type definition      * @return the CND      */
specifier|private
specifier|static
name|String
name|getCnd
parameter_list|(
name|NodeTypeDefinition
name|def
parameter_list|)
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|CompactNodeTypeDefWriter
name|cndWriter
init|=
operator|new
name|CompactNodeTypeDefWriter
argument_list|(
name|out
argument_list|,
operator|new
name|CompactNodeTypeDefWriter
operator|.
name|NamespaceMapping
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|cndWriter
operator|.
name|write
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should never occur
name|log
operator|.
name|error
argument_list|(
literal|"Error generating CND of "
operator|+
name|def
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|instanceof
name|NodeType
operator|&&
name|getCnd
argument_list|(
name|this
argument_list|)
operator|.
name|equals
argument_list|(
name|getCnd
argument_list|(
operator|(
name|NodeType
operator|)
name|o
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getCnd
argument_list|(
name|this
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|//-----------------------------------------------------------< internal>---
specifier|private
name|boolean
name|internalCanRemoveItem
parameter_list|(
name|String
name|itemName
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ItemDefinition
argument_list|>
name|definitions
parameter_list|)
block|{
comment|// FIXME: should properly calculate matching definition taking residual definitions into account.
for|for
control|(
name|ItemDefinition
name|definition
range|:
name|definitions
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|itemName
argument_list|,
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isMandatory
argument_list|()
operator|||
name|definition
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|definitions
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|private
name|ReadOnlyNodeTypeManager
name|getManager
parameter_list|()
block|{
specifier|final
name|Tree
name|types
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReadOnlyNodeTypeManager
argument_list|()
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
block|}
return|;
block|}
name|boolean
name|internalIsNodeType
parameter_list|(
name|String
name|oakName
parameter_list|)
block|{
if|if
condition|(
name|getOakName
argument_list|()
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeType
name|type
range|:
name|getDeclaredSupertypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeTypeImpl
operator|)
name|type
operator|)
operator|.
name|internalIsNodeType
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|Collection
argument_list|<
name|NodeDefinition
argument_list|>
name|internalGetChildDefinitions
parameter_list|()
block|{
comment|// TODO distinguish between additive and overriding node definitions. See 3.7.6.8 Item Definitions in Subtypes
name|Collection
argument_list|<
name|NodeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definitions
return|;
block|}
name|Collection
argument_list|<
name|PropertyDefinition
argument_list|>
name|internalGetPropertyDefinitions
parameter_list|()
block|{
comment|// TODO distinguish between additive and overriding property definitions. See 3.7.6.8 Item Definitions in Subtypes
name|Collection
argument_list|<
name|PropertyDefinition
argument_list|>
name|definitions
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definitions
return|;
block|}
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getDeclaredNamedPropertyDefinitions
parameter_list|(
name|String
name|oakName
parameter_list|)
block|{
name|String
name|escapedName
init|=
name|oakName
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|REP_PRIMARY_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|REP_MIXIN_TYPES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
name|REP_UUID
expr_stmt|;
block|}
return|return
name|getDeclaredPropertyDefs
argument_list|(
name|definition
operator|.
name|getChild
argument_list|(
name|REP_NAMED_PROPERTY_DEFINITIONS
argument_list|)
operator|.
name|getChild
argument_list|(
name|escapedName
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getDeclaredResidualPropertyDefinitions
parameter_list|()
block|{
return|return
name|getDeclaredPropertyDefs
argument_list|(
name|definition
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|getDeclaredNamedNodeDefinitions
parameter_list|(
name|String
name|oakName
parameter_list|)
block|{
return|return
name|getDeclaredNodeDefs
argument_list|(
name|definition
operator|.
name|getChild
argument_list|(
name|REP_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
operator|.
name|getChild
argument_list|(
name|oakName
argument_list|)
argument_list|)
return|;
block|}
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|getDeclaredResidualNodeDefinitions
parameter_list|()
block|{
return|return
name|getDeclaredNodeDefs
argument_list|(
name|definition
operator|.
name|getChild
argument_list|(
name|REP_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getDeclaredPropertyDefs
parameter_list|(
name|Tree
name|definitions
parameter_list|)
block|{
if|if
condition|(
name|definitions
operator|.
name|exists
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|getOakName
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|def
range|:
name|definitions
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|declaringTypeName
init|=
name|TreeUtil
operator|.
name|getName
argument_list|(
name|def
argument_list|,
name|REP_DECLARING_NODE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|declaringTypeName
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|PropertyDefinitionImpl
argument_list|(
name|def
argument_list|,
name|this
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|getDeclaredNodeDefs
parameter_list|(
name|Tree
name|defs
parameter_list|)
block|{
if|if
condition|(
name|defs
operator|.
name|exists
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|getOakName
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|def
range|:
name|defs
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|declaringTypeName
init|=
name|TreeUtil
operator|.
name|getName
argument_list|(
name|def
argument_list|,
name|REP_DECLARING_NODE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|declaringTypeName
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|NodeDefinitionImpl
argument_list|(
name|def
argument_list|,
name|this
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
name|boolean
name|meetsTypeConstraints
parameter_list|(
name|Value
name|value
parameter_list|,
name|int
name|requiredType
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|requiredType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
name|value
operator|.
name|getString
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|value
operator|.
name|getBinary
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|value
operator|.
name|getLong
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|value
operator|.
name|getDouble
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
name|value
operator|.
name|getDate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
name|value
operator|.
name|getBoolean
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
block|{
name|int
name|type
init|=
name|value
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
name|PropertyType
operator|.
name|DOUBLE
operator|&&
name|type
operator|!=
name|PropertyType
operator|.
name|LONG
operator|&&
name|type
operator|!=
name|PropertyType
operator|.
name|BOOLEAN
operator|&&
name|JcrNameParser
operator|.
name|validate
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
case|case
name|PropertyType
operator|.
name|PATH
case|:
block|{
name|int
name|type
init|=
name|value
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
name|PropertyType
operator|.
name|DOUBLE
operator|&&
name|type
operator|!=
name|PropertyType
operator|.
name|LONG
operator|&&
name|type
operator|!=
name|PropertyType
operator|.
name|BOOLEAN
operator|&&
name|JcrPathParser
operator|.
name|validate
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|UUIDUtils
operator|.
name|isValidUUID
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
operator|new
name|URI
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|value
operator|.
name|getDecimal
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|UNDEFINED
case|:
return|return
literal|true
return|;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid property type value: "
operator|+
name|requiredType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|meetsTypeConstraints
parameter_list|(
name|Value
index|[]
name|values
parameter_list|,
name|int
name|requiredType
parameter_list|)
block|{
comment|// Constraints must be met by all values
for|for
control|(
name|Value
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|meetsTypeConstraints
argument_list|(
name|value
argument_list|,
name|requiredType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|meetsValueConstraints
parameter_list|(
name|Value
name|value
parameter_list|,
name|String
index|[]
name|constraints
parameter_list|)
block|{
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Any of the constraints must be met
for|for
control|(
name|String
name|constraint
range|:
name|constraints
control|)
block|{
if|if
condition|(
name|Constraints
operator|.
name|valueConstraint
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|constraint
argument_list|)
operator|.
name|test
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|meetsValueConstraints
parameter_list|(
name|Value
index|[]
name|values
parameter_list|,
name|String
index|[]
name|constraints
parameter_list|)
block|{
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Constraints must be met by all values
for|for
control|(
name|Value
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|meetsValueConstraints
argument_list|(
name|value
argument_list|,
name|constraints
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|int
name|getIndex
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
name|String
name|name
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
return|return
operator|(
name|i
operator|==
operator|-
literal|1
operator|)
condition|?
literal|1
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|']'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|String
name|childNodeName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|oakChildName
init|=
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|String
name|oakName
init|=
name|mapper
operator|.
name|getOakNameOrNull
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// TODO need a better way to handle SNS
return|return
name|oakChildName
operator|!=
literal|null
operator|&&
name|oakChildName
operator|.
name|startsWith
argument_list|(
name|oakName
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PrimaryTypePredicate
implements|implements
name|Predicate
argument_list|<
name|Tree
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|PrimaryTypePredicate
name|PROPERTY_DEF_PREDICATE
init|=
operator|new
name|PrimaryTypePredicate
argument_list|(
name|NT_PROPERTYDEFINITION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PrimaryTypePredicate
name|CHILDNODE_DEF_PREDICATE
init|=
operator|new
name|PrimaryTypePredicate
argument_list|(
name|NT_CHILDNODEDEFINITION
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|primaryTypeName
decl_stmt|;
specifier|private
name|PrimaryTypePredicate
parameter_list|(
annotation|@
name|NotNull
name|String
name|primaryTypeName
parameter_list|)
block|{
name|this
operator|.
name|primaryTypeName
operator|=
name|primaryTypeName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|primaryTypeName
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

