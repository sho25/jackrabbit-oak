begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
operator|.
name|estimateMemoryUsage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|ReaderCache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_class
specifier|public
class|class
name|CacheWeights
block|{
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT_HEADER_SIZE
init|=
literal|12
decl_stmt|;
comment|/**      * memory overhead per each item stored in the cache      */
specifier|private
specifier|static
specifier|final
name|int
name|LIRS_CACHE_OVERHEAD
init|=
literal|168
decl_stmt|;
comment|/**      * memory overhead per each item stored in the cache      */
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_CACHE_OVERHEAD
init|=
literal|32
decl_stmt|;
comment|/**      * memory overhead per each item stored in the cache      */
specifier|private
specifier|static
specifier|final
name|int
name|PRIORITY_CACHE_OVERHEAD
init|=
literal|32
decl_stmt|;
comment|/**      * memory overhead per each item stored in the cache      */
specifier|private
specifier|static
specifier|final
name|int
name|SEGMENT_CACHE_OVERHEAD
init|=
literal|32
decl_stmt|;
specifier|public
specifier|static
class|class
name|OneWeigher
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Weigher
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|NOOP_WEIGHER
init|=
operator|new
name|OneWeigher
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|noopWeigher
parameter_list|()
block|{
return|return
operator|(
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|NOOP_WEIGHER
return|;
block|}
specifier|public
specifier|static
class|class
name|SegmentCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|SegmentId
argument_list|,
name|Segment
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
annotation|@
name|Nonnull
name|SegmentId
name|id
parameter_list|,
annotation|@
name|Nonnull
name|Segment
name|segment
parameter_list|)
block|{
name|int
name|size
init|=
name|SEGMENT_CACHE_OVERHEAD
decl_stmt|;
comment|// segmentId weight estimation is included in segment
name|size
operator|+=
name|segment
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NodeCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|String
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|PRIORITY_CACHE_OVERHEAD
decl_stmt|;
name|size
operator|+=
name|estimateMemoryUsage
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|size
operator|+=
name|value
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|String
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|RECORD_CACHE_OVERHEAD
decl_stmt|;
name|size
operator|+=
name|estimateMemoryUsage
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|size
operator|+=
name|value
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TemplateCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|Template
argument_list|,
name|RecordId
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|Template
name|key
parameter_list|,
name|RecordId
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|RECORD_CACHE_OVERHEAD
decl_stmt|;
name|size
operator|+=
name|key
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|size
operator|+=
name|value
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReaderTemplateCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|CacheKey
argument_list|,
name|Template
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|CacheKey
name|key
parameter_list|,
name|Template
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|LIRS_CACHE_OVERHEAD
decl_stmt|;
name|size
operator|+=
name|key
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|size
operator|+=
name|value
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReaderStringCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|CacheKey
argument_list|,
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|CacheKey
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|int
name|size
init|=
name|LIRS_CACHE_OVERHEAD
decl_stmt|;
name|size
operator|+=
name|key
operator|.
name|estimateMemoryUsage
argument_list|()
expr_stmt|;
name|size
operator|+=
name|estimateMemoryUsage
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
block|}
end_class

end_unit

