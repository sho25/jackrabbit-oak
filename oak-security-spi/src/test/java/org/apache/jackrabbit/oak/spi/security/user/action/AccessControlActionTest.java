begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@code AccessControlAction}.  *  * @see {@link org.apache.jackrabbit.oak.security.user.action.AccessControlActionTest} for integration tests include complete setup.  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlActionTest
implements|implements
name|UserConstants
block|{
specifier|private
specifier|final
name|Root
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SecurityProvider
name|securityProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UserConfiguration
name|userConfiguration
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AuthorizationConfiguration
name|authorizationConfiguration
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|void
name|initSecurityProvider
parameter_list|(
annotation|@
name|NotNull
name|String
name|adminId
parameter_list|,
annotation|@
name|NotNull
name|String
name|anonymousId
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|adminPrincipalNames
parameter_list|)
block|{
name|when
argument_list|(
name|userConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_ADMIN_ID
argument_list|,
name|adminId
argument_list|,
name|PARAM_ANONYMOUS_ID
argument_list|,
name|anonymousId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|authorizationConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PermissionConstants
operator|.
name|PARAM_ADMINISTRATIVE_PRINCIPALS
argument_list|,
name|adminPrincipalNames
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userConfiguration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authorizationConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AccessControlAction
name|createAction
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
block|{
name|AccessControlAction
name|action
init|=
operator|new
name|AccessControlAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|init
argument_list|(
name|securityProvider
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AccessControlAction
operator|.
name|USER_PRIVILEGE_NAMES
argument_list|,
name|privNames
argument_list|,
name|AccessControlAction
operator|.
name|GROUP_PRIVILEGE_NAMES
argument_list|,
name|privNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
specifier|private
name|AccessControlAction
name|createAction
parameter_list|(
annotation|@
name|NotNull
name|String
index|[]
name|userPrivNames
parameter_list|,
annotation|@
name|NotNull
name|String
index|[]
name|groupPrivNames
parameter_list|)
block|{
name|AccessControlAction
name|action
init|=
operator|new
name|AccessControlAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|init
argument_list|(
name|securityProvider
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AccessControlAction
operator|.
name|USER_PRIVILEGE_NAMES
argument_list|,
name|userPrivNames
argument_list|,
name|AccessControlAction
operator|.
name|GROUP_PRIVILEGE_NAMES
argument_list|,
name|groupPrivNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
specifier|private
specifier|static
name|void
name|mockAuthorizable
parameter_list|(
annotation|@
name|NotNull
name|Authorizable
name|a
parameter_list|,
annotation|@
name|NotNull
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|principalName
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|when
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|a
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|principalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|a
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|User
name|mockUser
parameter_list|(
annotation|@
name|NotNull
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|principalName
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|User
name|user
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|user
operator|.
name|isGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mockAuthorizable
argument_list|(
name|user
argument_list|,
name|id
argument_list|,
name|principalName
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
specifier|private
specifier|static
name|Group
name|mockGroup
parameter_list|(
annotation|@
name|NotNull
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|principalName
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Group
name|gr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|gr
operator|.
name|isGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mockAuthorizable
argument_list|(
name|gr
argument_list|,
name|id
argument_list|,
name|principalName
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|gr
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnCreateUserMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|AccessControlAction
argument_list|()
operator|.
name|onCreate
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnCreateGroupMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|AccessControlAction
argument_list|()
operator|.
name|onCreate
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateBuiltinUser
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
literal|"adminId"
argument_list|,
literal|"anonymousId"
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|String
index|[]
name|buildinIds
init|=
operator|new
name|String
index|[]
block|{
literal|"adminId"
block|,
literal|"anonymousId"
block|}
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|buildinIds
control|)
block|{
comment|// throw upon getPrincipal as onCreate for builtin users must not reach that statement
name|User
name|user
init|=
name|mockUser
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnCreateBuiltinIsGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
literal|"adminIdIsUsedByGroup"
argument_list|,
literal|"anonymousId"
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// the check for built-in user must ignore groups
name|Group
name|gr
init|=
name|mockGroup
argument_list|(
literal|"adminIdIsUsedByGroup"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|gr
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateUserEmptyPrivs
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|)
decl_stmt|;
comment|// throw upon getPrincipal as onCreate without configured privileges call must not reach that statement
name|User
name|user
init|=
name|mockUser
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateGroupEmptyPrivs
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// throw upon getPrincipal as onCreate without configured privileges call must not reach that statement
name|Group
name|gr
init|=
name|mockGroup
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|gr
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateAdminUser
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|,
literal|"administrativePrincipal"
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// throw upon getPath as onCreate for administrative principal call must not reach that statement
name|User
name|user
init|=
name|mockUser
argument_list|(
literal|"id"
argument_list|,
literal|"administrativePrincipal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnCreateAdminGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|,
literal|"administrativePrincipal"
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// throw upon getPath as onCreate for administrative principal call must not reach that statement
name|Group
name|gr
init|=
name|mockGroup
argument_list|(
literal|"id"
argument_list|,
literal|"administrativePrincipal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|gr
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnCreateUserWithoutPath
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// throw upon getPath
name|User
name|user
init|=
name|mockUser
argument_list|(
literal|"id"
argument_list|,
literal|"principalName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOnCreateGroupWithoutPath
parameter_list|()
throws|throws
name|Exception
block|{
name|initSecurityProvider
argument_list|(
name|DEFAULT_ADMIN_ID
argument_list|,
name|DEFAULT_ANONYMOUS_ID
argument_list|)
expr_stmt|;
name|AccessControlAction
name|action
init|=
name|createAction
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
comment|// throw upon getPath as onCreate for administrative principal call must not reach that statement
name|Group
name|gr
init|=
name|mockGroup
argument_list|(
literal|"id"
argument_list|,
literal|"principal"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|action
operator|.
name|onCreate
argument_list|(
name|gr
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

