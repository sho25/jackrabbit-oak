begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_INCREMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|MIX_ATOMIC_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RunnableScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|Fixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFutureTask
import|;
end_import

begin_class
specifier|public
class|class
name|AtomicCounterClusterIT
extends|extends
name|DocumentClusterIT
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Fixture
argument_list|>
name|FIXTURES
init|=
name|FixturesHelper
operator|.
name|getFixtures
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AtomicCounterClusterIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PerfLogger
name|LOG_PERF
init|=
operator|new
name|PerfLogger
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CustomScheduledExecutor
argument_list|>
name|executors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|assumtions
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|FIXTURES
operator|.
name|contains
argument_list|(
name|Fixture
operator|.
name|DOCUMENT_NS
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|OakMongoNSRepositoryStub
operator|.
name|isMongoDBAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|executors
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
for|for
control|(
name|CustomScheduledExecutor
name|exec
range|:
name|executors
control|)
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|increments
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|mks
argument_list|,
name|repos
argument_list|,
name|NOT_PROVIDED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repositories and executors should match"
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|,
name|executors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|counterPath
decl_stmt|;
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|14
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|expected
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// setting-up the repo state
name|Repository
name|repo
init|=
name|repos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|repo
operator|.
name|login
argument_list|(
name|ADMIN
argument_list|)
decl_stmt|;
name|Node
name|counter
decl_stmt|;
try|try
block|{
name|counter
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"counter"
argument_list|)
expr_stmt|;
name|counter
operator|.
name|addMixin
argument_list|(
name|MIX_ATOMIC_COUNTER
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|counterPath
operator|=
name|counter
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
comment|// allow the cluster to align
name|alignCluster
argument_list|(
name|mks
argument_list|)
expr_stmt|;
comment|// asserting the initial state
name|assertFalse
argument_list|(
literal|"Path to the counter node should be set"
argument_list|,
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|counterPath
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Repository
name|r
range|:
name|repos
control|)
block|{
try|try
block|{
name|session
operator|=
name|r
operator|.
name|login
argument_list|(
name|ADMIN
argument_list|)
expr_stmt|;
name|counter
operator|=
name|session
operator|.
name|getNode
argument_list|(
name|counterPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nothing should have touched the `expected`"
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong initial counter"
argument_list|,
name|expected
operator|.
name|get
argument_list|()
argument_list|,
name|counter
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
comment|// number of threads per cluster node
specifier|final
name|int
name|numIncrements
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.test.it.atomiccounter.threads"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"pushing {} increments per each of the {} cluster nodes for a total of {} concurrent updates"
argument_list|,
name|numIncrements
argument_list|,
name|repos
operator|.
name|size
argument_list|()
argument_list|,
name|numIncrements
operator|*
name|repos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// for each cluster node, `numIncrements` sessions pushing random increments
name|long
name|start
init|=
name|LOG_PERF
operator|.
name|start
argument_list|(
literal|"Firing the threads"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ListenableFutureTask
argument_list|<
name|Void
argument_list|>
argument_list|>
name|tasks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Repository
name|rep
range|:
name|repos
control|)
block|{
specifier|final
name|Repository
name|r
init|=
name|rep
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIncrements
condition|;
name|i
operator|++
control|)
block|{
name|ListenableFutureTask
argument_list|<
name|Void
argument_list|>
name|task
init|=
name|ListenableFutureTask
operator|.
name|create
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|r
operator|.
name|login
argument_list|(
name|ADMIN
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|Node
name|n
init|=
name|s
operator|.
name|getNode
argument_list|(
name|counterPath
argument_list|)
decl_stmt|;
name|int
name|increment
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addAndGet
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG_PERF
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"Firing threads completed"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|allAsList
argument_list|(
name|tasks
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG_PERF
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"Futures completed"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|waitForTaskCompletion
argument_list|()
expr_stmt|;
name|LOG_PERF
operator|.
name|end
argument_list|(
name|start
argument_list|,
operator|-
literal|1
argument_list|,
literal|"All tasks completed"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// let the time for the async process to kick in and run.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|raiseExceptions
argument_list|(
name|exceptions
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// assert the final situation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Repository
name|r
init|=
name|repos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|session
operator|=
name|r
operator|.
name|login
argument_list|(
name|ADMIN
argument_list|)
expr_stmt|;
name|counter
operator|=
name|session
operator|.
name|getNode
argument_list|(
name|counterPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cluster node: {}, actual counter: {}, expected counter: {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|expected
operator|.
name|get
argument_list|()
argument_list|,
name|counter
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong counter on node "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expected
operator|.
name|get
argument_list|()
argument_list|,
name|counter
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|waitForTaskCompletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|remainingTasks
decl_stmt|;
do|do
block|{
name|remainingTasks
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CustomScheduledExecutor
name|e
range|:
name|executors
control|)
block|{
name|remainingTasks
operator|+=
name|e
operator|.
name|getTotal
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remainingTasks
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"there are approximately {} tasks left to complete. Sleeping 1 sec"
argument_list|,
name|remainingTasks
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|remainingTasks
operator|>
literal|0
condition|)
do|;
block|}
specifier|private
class|class
name|CustomScheduledExecutor
extends|extends
name|ScheduledThreadPoolExecutor
block|{
specifier|private
specifier|volatile
name|AtomicInteger
name|total
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
class|class
name|CustomTask
parameter_list|<
name|V
parameter_list|>
implements|implements
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
decl_stmt|;
specifier|public
name|CustomTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
name|total
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|task
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|task
operator|.
name|isCancelled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|task
operator|.
name|isDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|task
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|task
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|task
operator|.
name|getDelay
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
return|return
name|task
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPeriodic
parameter_list|()
block|{
return|return
name|task
operator|.
name|isPeriodic
argument_list|()
return|;
block|}
block|}
specifier|public
name|CustomScheduledExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|)
expr_stmt|;
name|total
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|V
parameter_list|>
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|decorateTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|callable
operator|instanceof
name|AtomicCounterEditor
operator|.
name|ConsolidatorTask
condition|)
block|{
name|total
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|CustomTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|callable
argument_list|,
name|task
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|decorateTask
argument_list|(
name|callable
argument_list|,
name|task
argument_list|)
return|;
block|}
block|}
comment|/**          * return the approximate amount of tasks to be completed          * @return          */
specifier|public
specifier|synchronized
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|total
operator|.
name|get
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Jcr
name|getJcr
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|CustomScheduledExecutor
name|e
init|=
operator|new
name|CustomScheduledExecutor
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|executors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getJcr
argument_list|(
name|store
argument_list|)
operator|.
name|with
argument_list|(
name|e
argument_list|)
operator|.
name|withAtomicCounter
argument_list|()
return|;
block|}
block|}
end_class

end_unit

