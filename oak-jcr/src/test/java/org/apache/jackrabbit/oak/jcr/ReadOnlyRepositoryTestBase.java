begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_comment
comment|/**  * A base class for tests that never read from the repository and therefore  * share a node store that is initialized just once per test class.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReadOnlyRepositoryTestBase
extends|extends
name|AbstractRepositoryTest
block|{
comment|/** Cache of initialized node stores per fixture when test is read-only */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|NodeStoreFixture
argument_list|,
name|NodeStore
argument_list|>
name|STORES
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|public
name|ReadOnlyRepositoryTestBase
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|disposeStores
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeStoreFixture
argument_list|,
name|NodeStore
argument_list|>
name|e
range|:
name|STORES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|dispose
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|STORES
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Repository
name|getRepository
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepositoryFromCachedStore
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
name|Session
name|s
init|=
name|repository
operator|.
name|login
argument_list|(
name|getAdminCredentials
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|initializeRepository
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|repository
return|;
block|}
specifier|protected
name|void
name|initializeRepository
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
comment|// default does nothing
block|}
specifier|private
name|Repository
name|createRepositoryFromCachedStore
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeStore
name|ns
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeStoreFixture
argument_list|,
name|NodeStore
argument_list|>
name|e
range|:
name|STORES
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|fixture
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
name|ns
operator|=
name|createNodeStore
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
name|STORES
operator|.
name|put
argument_list|(
name|fixture
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
return|return
name|createRepository
argument_list|(
name|ns
argument_list|)
return|;
block|}
block|}
end_class

end_unit

