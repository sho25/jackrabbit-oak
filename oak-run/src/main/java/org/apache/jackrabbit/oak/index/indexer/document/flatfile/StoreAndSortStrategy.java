begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_class
class|class
name|StoreAndSortStrategy
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_DELETE_ORIGINAL
init|=
literal|"oak.indexer.deleteOriginal"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
init|=
literal|"oak.indexer.maxSortMemoryInGB"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
decl_stmt|;
specifier|private
specifier|final
name|PathElementComparator
name|comparator
decl_stmt|;
specifier|private
specifier|final
name|NodeStateEntryWriter
name|entryWriter
decl_stmt|;
specifier|private
specifier|final
name|File
name|storeDir
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|compressionEnabled
decl_stmt|;
specifier|private
name|long
name|entryCount
decl_stmt|;
specifier|private
name|boolean
name|deleteOriginal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OAK_INDEXER_DELETE_ORIGINAL
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|int
name|maxMemory
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|long
name|textSize
decl_stmt|;
specifier|public
name|StoreAndSortStrategy
parameter_list|(
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
parameter_list|,
name|PathElementComparator
name|comparator
parameter_list|,
name|NodeStateEntryWriter
name|entryWriter
parameter_list|,
name|File
name|storeDir
parameter_list|,
name|boolean
name|compressionEnabled
parameter_list|)
block|{
name|this
operator|.
name|nodeStates
operator|=
name|nodeStates
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|entryWriter
operator|=
name|entryWriter
expr_stmt|;
name|this
operator|.
name|storeDir
operator|=
name|storeDir
expr_stmt|;
name|this
operator|.
name|compressionEnabled
operator|=
name|compressionEnabled
expr_stmt|;
block|}
specifier|public
name|File
name|createSortedStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|storeFile
init|=
name|writeToStore
argument_list|(
name|storeDir
argument_list|,
name|getStoreFileName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sortStoreFile
argument_list|(
name|storeFile
argument_list|)
return|;
block|}
specifier|public
name|long
name|getEntryCount
parameter_list|()
block|{
return|return
name|entryCount
return|;
block|}
specifier|private
name|File
name|sortStoreFile
parameter_list|(
name|File
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|sortWorkDir
init|=
operator|new
name|File
argument_list|(
name|storeFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"sort-work-dir"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|sortWorkDir
argument_list|)
expr_stmt|;
name|NodeStateEntrySorter
name|sorter
init|=
operator|new
name|NodeStateEntrySorter
argument_list|(
name|comparator
argument_list|,
name|storeFile
argument_list|,
name|sortWorkDir
argument_list|)
decl_stmt|;
name|logFlags
argument_list|()
expr_stmt|;
name|sorter
operator|.
name|setUseZip
argument_list|(
name|compressionEnabled
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setMaxMemoryInGB
argument_list|(
name|maxMemory
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setDeleteOriginal
argument_list|(
name|deleteOriginal
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setActualFileSize
argument_list|(
name|textSize
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sort
argument_list|()
expr_stmt|;
return|return
name|sorter
operator|.
name|getSortedFile
argument_list|()
return|;
block|}
specifier|private
name|File
name|writeToStore
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|entryCount
operator|=
literal|0
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|w
init|=
name|FlatFileStoreUtils
operator|.
name|createWriter
argument_list|(
name|file
argument_list|,
name|compressionEnabled
argument_list|)
init|)
block|{
for|for
control|(
name|NodeStateEntry
name|e
range|:
name|nodeStates
control|)
block|{
name|String
name|line
init|=
name|entryWriter
operator|.
name|toString
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|w
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|textSize
operator|+=
name|line
operator|.
name|length
argument_list|()
operator|+
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
name|entryCount
operator|++
expr_stmt|;
block|}
block|}
name|String
name|sizeStr
init|=
name|compressionEnabled
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"compressed/%s actual size"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|textSize
argument_list|)
argument_list|)
else|:
literal|""
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Dumped {} nodestates in json format in {} ({} {})"
argument_list|,
name|entryCount
argument_list|,
name|sw
argument_list|,
name|humanReadableByteCount
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|sizeStr
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|private
name|void
name|logFlags
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Delete original dump from traversal : {} ({})"
argument_list|,
name|deleteOriginal
argument_list|,
name|OAK_INDEXER_DELETE_ORIGINAL
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Max heap memory (GB) to be used for merge sort : {} ({})"
argument_list|,
name|maxMemory
argument_list|,
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getStoreFileName
parameter_list|()
block|{
return|return
name|compressionEnabled
condition|?
literal|"store.json.zip"
else|:
literal|"store.json"
return|;
block|}
block|}
end_class

end_unit

