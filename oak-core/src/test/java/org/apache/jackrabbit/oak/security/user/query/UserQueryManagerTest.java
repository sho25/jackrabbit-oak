begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * UserQueryManagerTest provides test cases for {@link UserQueryManager}.  * This class include the original jr2.x test-cases provided by  * {@code NodeResolverTest} and {@code IndexNodeResolverTest}.  */
end_comment

begin_class
specifier|public
class|class
name|UserQueryManagerTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|ValueFactory
name|valueFactory
decl_stmt|;
specifier|private
name|UserQueryManager
name|queryMgr
decl_stmt|;
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|String
name|userId
decl_stmt|;
specifier|private
name|String
name|propertyName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|UserManagerImpl
name|userMgr
init|=
operator|(
name|UserManagerImpl
operator|)
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|user
operator|=
name|getTestUser
argument_list|()
expr_stmt|;
name|userId
operator|=
name|user
operator|.
name|getID
argument_list|()
expr_stmt|;
name|queryMgr
operator|=
operator|new
name|UserQueryManager
argument_list|(
name|userMgr
argument_list|,
name|namePathMapper
argument_list|,
name|getUserConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|valueFactory
operator|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|propertyName
operator|=
literal|"testProperty"
expr_stmt|;
name|getQueryEngineSettings
argument_list|()
operator|.
name|setFailTraversal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getQueryEngineSettings
argument_list|()
operator|.
name|setFailTraversal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|g
range|:
name|groups
control|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Group
name|createGroup
parameter_list|(
annotation|@
name|Nullable
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Group
name|g
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|g
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|id
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|checkNotNull
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|g
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|principal
argument_list|)
expr_stmt|;
block|}
name|groups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
specifier|private
specifier|static
name|void
name|assertResultContainsAuthorizables
parameter_list|(
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
parameter_list|,
name|Authorizable
modifier|...
name|expected
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|expected
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertTrue
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
literal|0
index|]
operator|.
name|getID
argument_list|()
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testFindNodesExact
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|vs
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"value \\, containing backslash"
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName
argument_list|,
literal|"value \\, containing backslash"
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no more results"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNodesNonExact
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|vs
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"value \\, containing backslash"
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName
argument_list|,
literal|"value \\, containing backslash"
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no more results"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNodesNonExactWithApostrophe
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|vs
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"value ' with apostrophe"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName
argument_list|,
literal|"value ' with apostrophe"
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no more results"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNodesExactWithApostrophe
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|vs
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"value ' with apostrophe"
argument_list|)
decl_stmt|;
try|try
block|{
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName
argument_list|,
literal|"value ' with apostrophe"
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no more results"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|user
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryMaxCountZero
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|queryBuilder
parameter_list|)
block|{
name|queryBuilder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertSame
argument_list|(
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|,
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeEveryoneNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|nameMatches
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeEveryoneFiltersEveryone
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|g
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeEveryoneWithIdDiffersPrincipalName
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|"eGroup"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|g
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"eGroup"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryNoScope
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|null
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|g
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeNotMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|"g1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"g1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeDeclaredMember
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|"g1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"g1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeDeclaredMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|"g1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|(
literal|"g2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"g1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryScopeInheritedMembership
parameter_list|()
throws|throws
name|Exception
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
name|createGroup
argument_list|(
literal|"g1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Group
name|g2
init|=
name|createGroup
argument_list|(
literal|"g2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setCondition
argument_list|(
name|builder
operator|.
name|eq
argument_list|(
name|propertyName
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
literal|"g1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|queryMgr
operator|.
name|findAuthorizables
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertResultContainsAuthorizables
argument_list|(
name|result
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

