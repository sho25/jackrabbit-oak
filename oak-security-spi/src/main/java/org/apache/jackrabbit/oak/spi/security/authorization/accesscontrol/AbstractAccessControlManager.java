begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@code JackrabbitAccessControlManager} interface.  * This implementation covers both editing access control content by path and  * by {@code Principal} resulting both in the same content structure.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAccessControlManager
implements|implements
name|JackrabbitAccessControlManager
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractAccessControlManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|workspaceName
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|AuthorizationConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
specifier|private
name|PermissionProvider
name|permissionProvider
decl_stmt|;
specifier|protected
name|AbstractAccessControlManager
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|privilegeManager
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrivilegeManager
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|config
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------< AccessControlManager>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getSupportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getTree
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Privilege
name|privilegeFromName
parameter_list|(
annotation|@
name|NotNull
name|String
name|privilegeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|privilegeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|Nullable
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|hasPrivileges
argument_list|(
name|absPath
argument_list|,
name|privileges
argument_list|,
name|getPermissionProvider
argument_list|()
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getPrivileges
argument_list|(
name|absPath
argument_list|,
name|getPermissionProvider
argument_list|()
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
return|;
block|}
comment|//-------------------------------------< JackrabbitAccessControlManager>---
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|Nullable
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|getPrincipals
argument_list|()
operator|.
name|equals
argument_list|(
name|principals
argument_list|)
condition|)
block|{
return|return
name|hasPrivileges
argument_list|(
name|absPath
argument_list|,
name|privileges
argument_list|)
return|;
block|}
else|else
block|{
name|PermissionProvider
name|provider
init|=
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|principals
argument_list|)
decl_stmt|;
return|return
name|hasPrivileges
argument_list|(
name|absPath
argument_list|,
name|privileges
argument_list|,
name|provider
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|getPrincipals
argument_list|()
operator|.
name|equals
argument_list|(
name|principals
argument_list|)
condition|)
block|{
return|return
name|getPrivileges
argument_list|(
name|absPath
argument_list|)
return|;
block|}
else|else
block|{
name|PermissionProvider
name|provider
init|=
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|principals
argument_list|)
decl_stmt|;
return|return
name|getPrivileges
argument_list|(
name|absPath
argument_list|,
name|provider
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
return|;
block|}
block|}
comment|//----------------------------------------------------------< protected>---
annotation|@
name|NotNull
specifier|protected
name|AuthorizationConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
annotation|@
name|NotNull
specifier|protected
name|Root
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|NotNull
specifier|protected
name|Root
name|getLatestRoot
parameter_list|()
block|{
return|return
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
return|;
block|}
annotation|@
name|NotNull
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|namePathMapper
return|;
block|}
annotation|@
name|NotNull
specifier|protected
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|()
block|{
return|return
name|privilegeManager
return|;
block|}
annotation|@
name|Nullable
specifier|protected
name|String
name|getOakPath
parameter_list|(
annotation|@
name|Nullable
name|String
name|jcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|jcrPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|oakPath
init|=
name|namePathMapper
operator|.
name|getOakPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakPath
operator|==
literal|null
operator|||
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|oakPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to resolve JCR path "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
return|return
name|oakPath
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|protected
name|Tree
name|getTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
name|long
name|permissions
parameter_list|,
name|boolean
name|checkAcContent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
init|=
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
else|:
name|root
operator|.
name|getTree
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"No tree at "
operator|+
name|oakPath
argument_list|)
throw|;
block|}
if|if
condition|(
name|permissions
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
condition|)
block|{
comment|// check permissions
name|checkPermissions
argument_list|(
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|tree
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
comment|// check if the tree defines access controlled content
if|if
condition|(
name|checkAcContent
operator|&&
name|config
operator|.
name|getContext
argument_list|()
operator|.
name|definesTree
argument_list|(
name|tree
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Tree "
operator|+
name|tree
operator|.
name|getPath
argument_list|()
operator|+
literal|" defines access control content."
argument_list|)
throw|;
block|}
return|return
name|tree
return|;
block|}
annotation|@
name|NotNull
specifier|protected
name|PermissionProvider
name|getPermissionProvider
parameter_list|()
block|{
if|if
condition|(
name|permissionProvider
operator|==
literal|null
condition|)
block|{
name|permissionProvider
operator|=
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
return|return
name|permissionProvider
return|;
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|NotNull
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|()
block|{
return|return
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
name|long
name|permissions
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
name|boolean
name|isGranted
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
name|isGranted
operator|=
name|getPermissionProvider
argument_list|()
operator|.
name|getRepositoryPermission
argument_list|()
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isGranted
operator|=
name|getPermissionProvider
argument_list|()
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isGranted
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Access denied."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|PermissionProvider
name|provider
parameter_list|,
name|long
name|permissions
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
decl_stmt|;
if|if
condition|(
name|absPath
operator|==
literal|null
condition|)
block|{
name|tree
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|permissions
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
condition|)
block|{
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tree
operator|=
name|getTree
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|permissions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|pNames
init|=
name|provider
operator|.
name|getPrivileges
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|pNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|privileges
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|pNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|pNames
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|namePathMapper
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privileges
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|privileges
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|Nullable
name|Privilege
index|[]
name|privileges
parameter_list|,
annotation|@
name|NotNull
name|PermissionProvider
name|provider
parameter_list|,
name|long
name|permissions
parameter_list|,
name|boolean
name|checkAcContent
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|tree
decl_stmt|;
if|if
condition|(
name|absPath
operator|==
literal|null
condition|)
block|{
name|tree
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|permissions
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
condition|)
block|{
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tree
operator|=
name|getTree
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|permissions
argument_list|,
name|checkAcContent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// null or empty privilege array -> return true
name|log
operator|.
name|debug
argument_list|(
literal|"No privileges passed -> allowed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|privilegeNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|privileges
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|privileges
control|)
block|{
name|privilegeNames
operator|.
name|add
argument_list|(
name|namePathMapper
operator|.
name|getOakName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|provider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|privilegeNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|privilegeNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

