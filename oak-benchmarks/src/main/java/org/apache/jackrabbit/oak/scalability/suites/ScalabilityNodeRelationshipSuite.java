begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|SynchronizedDescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|OakIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|util
operator|.
name|NodeTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The suite test will incrementally increase the load and execute searches.  * Each test run thus adds nodes and executes different benchmarks. This way we measure time  * taken for benchmark execution.  *  *<p>  * The following system JVM properties can be defined to configure the suite.  *<ul>  *<li>  *<code>nodeLevels</code> - Comma separated string property that governs the number of number of  *     different node relationships in the following order:  *<ul>  *<li>Users</li>  *<li>Groups</li>  *<li>User Relationships</li>  *<li>Activities</li>  *</ul>  *  *     Defaults to 10,5,2,1.  *</li>  *</ul>  *  */
end_comment

begin_class
specifier|public
class|class
name|ScalabilityNodeRelationshipSuite
extends|extends
name|ScalabilityNodeSuite
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScalabilityNodeRelationshipSuite
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_ACT_NODE_TYPE
init|=
literal|"ActivityType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_REL_NODE_TYPE
init|=
literal|"RelationshipType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVITIES
init|=
literal|"Activities"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RELATIONSHIPS
init|=
literal|"Relationships"
decl_stmt|;
comment|/**      * Node properties      */
specifier|public
specifier|static
specifier|final
name|String
name|CTX_USER
init|=
literal|"User"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CTX_GROUP
init|=
literal|"Group"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATED
init|=
literal|"jcr:created"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE_ID
init|=
literal|"sourceId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TARGET_ID
init|=
literal|"targetId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACTION
init|=
literal|"action"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOURCE
init|=
literal|"source"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJECT
init|=
literal|"object"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJECT_ID
init|=
literal|"objectId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TARGET
init|=
literal|"target"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NODE_LEVELS
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"nodeLevels"
argument_list|,
literal|"10,5,2,1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NODE_LEVELS_DEFAULT
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"10"
argument_list|,
literal|"5"
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_USERS
init|=
operator|(
name|NODE_LEVELS
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS_DEFAULT
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_GROUPS
init|=
operator|(
name|NODE_LEVELS
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS_DEFAULT
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RELATIONSHIPS
init|=
operator|(
name|NODE_LEVELS
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS_DEFAULT
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ACTIVITIES
init|=
operator|(
name|NODE_LEVELS
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|NODE_LEVELS_DEFAULT
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BUCKET_SIZE
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|actions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"act1"
argument_list|,
literal|"act2"
argument_list|,
literal|"act3"
argument_list|,
literal|"act4"
argument_list|,
literal|"act5"
argument_list|,
literal|"act6"
argument_list|,
literal|"act7"
argument_list|,
literal|"act8"
argument_list|,
literal|"act9"
argument_list|,
literal|"act10"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|objects
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"obj1"
argument_list|,
literal|"obj2"
argument_list|,
literal|"obj3"
argument_list|,
literal|"obj4"
argument_list|,
literal|"obj5"
argument_list|,
literal|"obj6"
argument_list|,
literal|"obj7"
argument_list|,
literal|"obj8"
argument_list|,
literal|"obj9"
argument_list|,
literal|"obj10"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|29
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Authorizable
argument_list|>
name|users
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Authorizable
argument_list|>
name|groups
decl_stmt|;
specifier|public
name|ScalabilityNodeRelationshipSuite
parameter_list|(
name|Boolean
name|storageEnabled
parameter_list|)
block|{
name|super
argument_list|(
name|storageEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|users
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|groups
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
if|if
condition|(
name|CUSTOM_TYPE
condition|)
block|{
name|NodeTypeUtils
operator|.
name|createNodeType
argument_list|(
name|session
argument_list|,
name|CUSTOM_ACT_NODE_TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
name|TITLE_PROP
block|,
name|CREATED
block|,
name|ACTION
block|,
name|SOURCE_ID
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|PropertyType
operator|.
name|STRING
block|,
name|PropertyType
operator|.
name|DATE
block|,
name|PropertyType
operator|.
name|STRING
block|,
name|PropertyType
operator|.
name|STRING
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeTypeUtils
operator|.
name|createNodeType
argument_list|(
name|session
argument_list|,
name|CUSTOM_REL_NODE_TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
name|CREATED
block|,
name|SOURCE_ID
block|,
name|TARGET_ID
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|PropertyType
operator|.
name|DATE
block|,
name|PropertyType
operator|.
name|STRING
block|,
name|PropertyType
operator|.
name|STRING
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nodeTypes
operator|.
name|add
argument_list|(
name|CUSTOM_ACT_NODE_TYPE
argument_list|)
expr_stmt|;
name|nodeTypes
operator|.
name|add
argument_list|(
name|CUSTOM_REL_NODE_TYPE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|INDEX
condition|)
block|{
name|createIndexes
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createIndexes
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orderedMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|persistencePath
init|=
literal|""
decl_stmt|;
comment|// define indexes on properties
switch|switch
condition|(
name|INDEX_TYPE
condition|)
block|{
case|case
name|PROPERTY
case|:
name|OakIndexUtils
operator|.
name|propertyIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexActivity"
argument_list|,
operator|new
name|String
index|[]
block|{
name|SOURCE_ID
block|}
argument_list|,
literal|false
argument_list|,
operator|(
operator|!
name|CUSTOM_TYPE
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
operator|new
name|String
index|[]
block|{
name|CUSTOM_ACT_NODE_TYPE
block|}
operator|)
argument_list|)
expr_stmt|;
name|OakIndexUtils
operator|.
name|propertyIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexRelationship"
argument_list|,
operator|new
name|String
index|[]
block|{
name|SOURCE_ID
block|}
argument_list|,
literal|false
argument_list|,
operator|(
operator|!
name|CUSTOM_TYPE
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
operator|new
name|String
index|[]
block|{
name|CUSTOM_REL_NODE_TYPE
block|}
operator|)
argument_list|)
expr_stmt|;
break|break;
comment|// define ordered indexes on properties
case|case
name|ORDERED
case|:
name|OakIndexUtils
operator|.
name|orderedIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexActivity"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|CREATED
block|}
argument_list|,
literal|false
argument_list|,
operator|(
operator|!
name|CUSTOM_TYPE
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
operator|new
name|String
index|[]
block|{
name|CUSTOM_ACT_NODE_TYPE
block|}
operator|)
argument_list|,
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|DESC
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
name|OakIndexUtils
operator|.
name|orderedIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexRelationship"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|CREATED
block|}
argument_list|,
literal|false
argument_list|,
operator|(
operator|!
name|CUSTOM_TYPE
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
operator|new
name|String
index|[]
block|{
name|CUSTOM_REL_NODE_TYPE
block|}
operator|)
argument_list|,
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|DESC
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
comment|// define lucene index on properties
case|case
name|LUCENE_FILE
case|:
name|persistencePath
operator|=
literal|"target"
operator|+
name|StandardSystemProperty
operator|.
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
literal|"lucene"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|OakIndexUtils
operator|.
name|luceneIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexActivity"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|SOURCE_ID
block|,
name|CREATED
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|PropertyType
operator|.
name|TYPENAME_STRING
block|,
name|PropertyType
operator|.
name|TYPENAME_DATE
block|}
argument_list|,
name|orderedMap
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
break|break;
case|case
name|LUCENE_FILE_DOC
case|:
name|persistencePath
operator|=
literal|"target"
operator|+
name|StandardSystemProperty
operator|.
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
literal|"lucene"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|LUCENE_DOC
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|orderedMap
operator|.
name|put
argument_list|(
name|CREATED
argument_list|,
name|propMap
argument_list|)
expr_stmt|;
case|case
name|LUCENE
case|:
name|OakIndexUtils
operator|.
name|luceneIndexDefinition
argument_list|(
name|session
argument_list|,
literal|"customIndexActivity"
argument_list|,
name|ASYNC_INDEX
argument_list|,
operator|new
name|String
index|[]
block|{
name|SOURCE_ID
block|,
name|CREATED
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|PropertyType
operator|.
name|TYPENAME_STRING
block|,
name|PropertyType
operator|.
name|TYPENAME_DATE
block|}
argument_list|,
name|orderedMap
argument_list|,
name|persistencePath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      * Executes before each test run      */
annotation|@
name|Override
specifier|public
name|void
name|beforeIteration
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started beforeIteration()"
argument_list|)
expr_stmt|;
block|}
comment|// Contextualize the node types being used
if|if
condition|(
name|nodeTypes
operator|!=
literal|null
operator|&&
operator|!
name|nodeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_ACT_NODE_TYPE_PROP
argument_list|,
name|nodeTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_REL_NODE_TYPE_PROP
argument_list|,
name|nodeTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|UserManager
name|userMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"PREV_ITER_USERS"
argument_list|,
name|users
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create Users and Groups based on the load for this iteration (cumulatively)
comment|// Add users
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|NUM_USERS
operator|*
name|context
operator|.
name|getIncrement
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|name
init|=
name|String
operator|.
name|valueOf
argument_list|(
call|(
name|char
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
argument_list|)
operator|+
name|CTX_USER
operator|+
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
literal|"_"
operator|+
name|idx
decl_stmt|;
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"User created : "
operator|+
name|name
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Add groups and include random number of members
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|NUM_GROUPS
operator|*
name|context
operator|.
name|getIncrement
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|name
init|=
name|String
operator|.
name|valueOf
argument_list|(
call|(
name|char
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
argument_list|)
operator|+
name|CTX_GROUP
operator|+
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
name|idx
decl_stmt|;
name|Group
name|group
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|int
name|groupMembers
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|users
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupMembers
condition|;
name|i
operator|++
control|)
block|{
name|group
operator|.
name|addMember
argument_list|(
name|users
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|users
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// create the load for this iteration
name|createLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|long
name|loadFinish
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_ROOT_NODE_NAME_PROP
argument_list|,
name|ROOT_NODE_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_USER
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|CTX_GROUP
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|waitBeforeIterationFinish
argument_list|(
name|loadFinish
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished beforeIteration()"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Writer
name|getWriter
parameter_list|(
name|ExecutionContext
name|context
parameter_list|,
name|SynchronizedDescriptiveStatistics
name|writeStats
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|int
name|numUsers
init|=
operator|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|*
name|NUM_USERS
operator|)
operator|/
name|LOADERS
decl_stmt|;
return|return
operator|new
name|ActivityWriter
argument_list|(
operator|(
name|context
operator|.
name|getIncrement
argument_list|()
operator|+
literal|"-"
operator|+
name|idx
operator|)
argument_list|,
name|numUsers
argument_list|,
name|idx
operator|*
name|numUsers
argument_list|,
name|writeStats
argument_list|)
return|;
block|}
comment|/**      * The users are created with the nomenclature {@code [a-z]User<INCREMENT>_<ID>}      *      *<p>      *      * Creates a node hierarchy similar to the node structure below.      * Here for example aUser0_1 and cUser0_5 are 2 users and aUser0_1 has a relationship structure to user cUser0_5.      *      *<pre>      * {@code      * /home      *  /a      *      /aUser0_1      *          /Relationships      *              /cUser0_5      *                  jcr:primaryType :<oak:Unstructured|descendantType|nt:unstructured>      *                  jcr:created :<DATE>      *                  sourceId : aUser0_1      *                  targetId : cUser0_5      *          /Activities      *             /2015      *                 /06      *                     /03      *                         /@1      *                             /<UUID>      *                                 jcr:primaryType :<oak:Unstructured|descendantType|nt:unstructured>      *                                 title :<sourceId targetId>      *                                 action :<act*>      *                                 sourceId : aUser0_1      *                                 /source      *                                     sourceId : aUser0_1      *                                 /object      *                                     objectId:<obj*>      *                                 /target      *                                     targetId: cUser0_5      * }      *</pre>      *</p>      */
class|class
name|ActivityWriter
extends|extends
name|Writer
block|{
specifier|private
name|int
name|startIdx
decl_stmt|;
name|ActivityWriter
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|numUsers
parameter_list|,
name|int
name|startIdx
parameter_list|,
name|SynchronizedDescriptiveStatistics
name|writeStats
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|numUsers
argument_list|,
name|writeStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|startIdx
operator|=
name|startIdx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|idx
init|=
name|startIdx
decl_stmt|;
while|while
condition|(
name|idx
operator|<
operator|(
name|maxAssets
operator|+
name|startIdx
operator|)
condition|)
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Current User
name|int
name|userIdx
init|=
operator|(
name|Integer
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"PREV_ITER_USERS"
argument_list|)
operator|+
name|idx
decl_stmt|;
name|Authorizable
name|user
init|=
name|users
operator|.
name|get
argument_list|(
name|userIdx
argument_list|)
decl_stmt|;
name|Node
name|activitiesParentNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|ACTIVITIES
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|Node
name|relationshipsParentNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|RELATIONSHIPS
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|createRelationships
argument_list|(
name|user
argument_list|,
name|relationshipsParentNode
argument_list|,
name|activitiesParentNode
argument_list|)
expr_stmt|;
name|createActivities
argument_list|(
name|user
argument_list|,
name|activitiesParentNode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|+
literal|1
operator|)
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread "
operator|+
name|id
operator|+
literal|" - Processed Users : "
operator|+
operator|(
name|counter
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in load creation "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Create activities for a use. The number of activities is governed by          * {# NODE_LEVELS.get(3)}          *          * @param user                 the user for who activities are to be created          * @param activitiesParentNode the parent node for all the user activities          * @throws RepositoryException          */
specifier|private
name|void
name|createActivities
parameter_list|(
name|Authorizable
name|user
parameter_list|,
name|Node
name|activitiesParentNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ACTIVITIES
condition|;
name|i
operator|++
control|)
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|createActivity
argument_list|(
name|activitiesParentNode
argument_list|,
name|user
operator|.
name|getID
argument_list|()
operator|+
literal|" "
operator|+
name|i
argument_list|,
name|actions
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|objects
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|objects
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Record time taken for creation
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createActivity
parameter_list|(
name|Node
name|activitiesParentNode
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|source
parameter_list|,
name|String
name|object
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|activityNode
init|=
name|getActivityParentNode
argument_list|(
name|activitiesParentNode
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|activityMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|activityMap
operator|.
name|put
argument_list|(
name|TITLE_PROP
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|activityMap
operator|.
name|put
argument_list|(
name|ACTION
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|activityMap
operator|.
name|put
argument_list|(
name|SOURCE_ID
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|activityMap
operator|.
name|put
argument_list|(
name|OBJECT_ID
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|activityMap
operator|.
name|put
argument_list|(
name|TARGET_ID
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|createActivityNode
argument_list|(
name|activityNode
argument_list|,
name|activityMap
argument_list|)
expr_stmt|;
block|}
comment|/**          * Creates the activity node structure.          */
specifier|private
name|void
name|createActivityNode
parameter_list|(
name|Node
name|activityParent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|activityParent
operator|.
name|setProperty
argument_list|(
name|TITLE_PROP
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|TITLE_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|activityParent
operator|.
name|setProperty
argument_list|(
name|CREATED
argument_list|,
name|generateDate
argument_list|()
argument_list|)
expr_stmt|;
name|activityParent
operator|.
name|setProperty
argument_list|(
name|ACTION
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|ACTION
argument_list|)
argument_list|)
expr_stmt|;
name|activityParent
operator|.
name|setProperty
argument_list|(
name|SOURCE_ID
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|SOURCE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|sourceNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|activityParent
argument_list|,
name|SOURCE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|sourceNode
operator|.
name|setProperty
argument_list|(
name|SOURCE_ID
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|SOURCE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|objNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|activityParent
argument_list|,
name|OBJECT
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|objNode
operator|.
name|setProperty
argument_list|(
name|OBJECT_ID
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|OBJECT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|targetNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|activityParent
argument_list|,
name|TARGET
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|targetNode
operator|.
name|setProperty
argument_list|(
name|TARGET_ID
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|TARGET_ID
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Activity created for User : "
operator|+
name|props
operator|.
name|get
argument_list|(
name|SOURCE_ID
argument_list|)
operator|+
literal|" "
operator|+
name|activityParent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Creates bucketed parent node for the activity.          */
specifier|private
name|Node
name|getActivityParentNode
parameter_list|(
name|Node
name|activitiesParentNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Node
name|yearNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|activitiesParentNode
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|month
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|month
operator|=
name|month
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|?
name|month
else|:
literal|"0"
operator|+
name|month
expr_stmt|;
name|Node
name|monthNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|yearNode
argument_list|,
name|month
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|day
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|)
decl_stmt|;
name|day
operator|=
name|day
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|?
name|day
else|:
literal|"0"
operator|+
name|day
expr_stmt|;
name|Node
name|dayNode
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|monthNode
argument_list|,
name|day
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// find bucket
name|Node
name|parentNode
init|=
name|dayNode
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|dayNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|iterator
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|BUCKET_SIZE
condition|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|int
name|maxNum
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|size
operator|++
expr_stmt|;
name|Node
name|child
init|=
name|iterator
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'@'
condition|)
block|{
name|int
name|buckNum
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buckNum
operator|>
name|maxNum
condition|)
block|{
name|maxNum
operator|=
name|buckNum
expr_stmt|;
name|parentNode
operator|=
name|child
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|size
operator|>
name|BUCKET_SIZE
condition|)
block|{
comment|// check if last bucket has enough space
if|if
condition|(
name|maxNum
operator|<
literal|0
operator|||
name|numChildNodes
argument_list|(
name|parentNode
argument_list|)
operator|>=
name|BUCKET_SIZE
condition|)
block|{
name|parentNode
operator|=
name|dayNode
operator|.
name|addNode
argument_list|(
literal|"@"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|maxNum
operator|+
literal|1
argument_list|)
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// create activity node
return|return
name|JcrUtils
operator|.
name|getOrCreateUniqueByPath
argument_list|(
name|parentNode
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getType
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|numChildNodes
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeIterator
name|iterator
init|=
name|node
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|getSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
return|return
name|iterator
operator|.
name|getSize
argument_list|()
return|;
block|}
else|else
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|num
operator|<
name|BUCKET_SIZE
condition|)
block|{
name|iterator
operator|.
name|nextNode
argument_list|()
expr_stmt|;
name|num
operator|++
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
block|}
comment|/**          * Create relationships to other users. The number of relationships is governed by          * {# NODE_LEVELS.get(2)}          *          * @param user                    the source user of the relationships          * @param relationshipsParentNode the node where the relationships are recorded  @throws          *                                RepositoryException          * @param activitiesParentNode the parent node for all the user activities          */
specifier|private
name|void
name|createRelationships
parameter_list|(
name|Authorizable
name|user
parameter_list|,
name|Node
name|relationshipsParentNode
parameter_list|,
name|Node
name|activitiesParentNode
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|usersIdx
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|users
operator|.
name|size
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|usersIdx
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RELATIONSHIPS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|usersIdx
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|otherUser
init|=
name|users
operator|.
name|get
argument_list|(
name|usersIdx
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|usersIdx
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getID
argument_list|()
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|nameHint
init|=
name|Text
operator|.
name|getName
argument_list|(
name|otherUser
argument_list|)
decl_stmt|;
name|Node
name|rNode
init|=
name|relationshipsParentNode
operator|.
name|addNode
argument_list|(
name|nameHint
argument_list|,
name|getType
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|CREATED
argument_list|,
name|generateDate
argument_list|()
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|SOURCE_ID
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setProperty
argument_list|(
name|TARGET_ID
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Relationship created for User : "
operator|+
name|user
operator|.
name|getID
argument_list|()
operator|+
literal|" "
operator|+
name|rNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|createActivity
argument_list|(
name|activitiesParentNode
argument_list|,
name|user
operator|.
name|getID
argument_list|()
operator|+
literal|" "
operator|+
name|otherUser
argument_list|,
name|actions
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|,
name|objects
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|otherUser
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Order of precedence is custom type or oak:Unstructured          *          * @return the type          * @throws RepositoryException the repository exception          */
specifier|protected
name|String
name|getType
parameter_list|(
name|int
name|typeIdx
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|typeOfNode
init|=
operator|(
name|typeIdx
operator|==
literal|0
condition|?
name|CTX_ACT_NODE_TYPE_PROP
else|:
name|CTX_REL_NODE_TYPE_PROP
operator|)
decl_stmt|;
name|String
name|type
init|=
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|typeOfNode
argument_list|)
condition|)
block|{
name|type
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|typeOfNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|put
argument_list|(
name|typeOfNode
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
block|}
end_class

end_unit

