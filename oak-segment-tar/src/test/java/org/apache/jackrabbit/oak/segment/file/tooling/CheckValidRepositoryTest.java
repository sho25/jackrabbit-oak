begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Check
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for {@link CheckCommand}  */
end_comment

begin_class
specifier|public
class|class
name|CheckValidRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CheckValidRepositoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStore
name|fileStore
init|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|256
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
literal|64
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|addChildWithBlobProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addChildWithBlobProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"b"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|addChildWithBlobProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"c"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|addChildWithProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"d"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addChildWithProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|addChildWithProperties
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|,
literal|"f"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuccessfulCheckWithBinaryTraversal
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|strOut
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StringWriter
name|strErr
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|outWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|strOut
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrintWriter
name|errWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|strErr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Check
operator|.
name|builder
argument_list|()
operator|.
name|withPath
argument_list|(
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withJournal
argument_list|(
literal|"journal.log"
argument_list|)
operator|.
name|withDebugInterval
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|withCheckBinaries
argument_list|(
literal|true
argument_list|)
operator|.
name|withIOStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|withOutWriter
argument_list|(
name|outWriter
argument_list|)
operator|.
name|withErrWriter
argument_list|(
name|errWriter
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|errWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertExpectedOutput
argument_list|(
name|strOut
operator|.
name|toString
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Searched through 1 revisions"
argument_list|,
literal|"Checked 7 nodes and 45 properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpectedOutput
argument_list|(
name|strErr
operator|.
name|toString
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuccessfulCheckWithoutBinaryTraversal
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|strOut
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StringWriter
name|strErr
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|outWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|strOut
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PrintWriter
name|errWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|strErr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Check
operator|.
name|builder
argument_list|()
operator|.
name|withPath
argument_list|(
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withJournal
argument_list|(
literal|"journal.log"
argument_list|)
operator|.
name|withDebugInterval
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|withIOStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|withOutWriter
argument_list|(
name|outWriter
argument_list|)
operator|.
name|withErrWriter
argument_list|(
name|errWriter
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|errWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertExpectedOutput
argument_list|(
name|strOut
operator|.
name|toString
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Searched through 1 revisions"
argument_list|,
literal|"Checked 7 nodes and 15 properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpectedOutput
argument_list|(
name|strErr
operator|.
name|toString
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertExpectedOutput
parameter_list|(
name|String
name|message
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|assertMessages
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Assert message: {}"
argument_list|,
name|assertMessages
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Message logged: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|msg
range|:
name|assertMessages
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addChildWithBlobProperties
parameter_list|(
name|SegmentNodeStore
name|nodeStore
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|childName
parameter_list|,
name|int
name|propCount
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|child
argument_list|(
name|childName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propCount
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
name|childName
operator|+
name|i
argument_list|,
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|2000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addChildWithProperties
parameter_list|(
name|SegmentNodeStore
name|nodeStore
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|childName
parameter_list|,
name|int
name|propCount
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|child
argument_list|(
name|childName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propCount
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
name|childName
operator|+
name|i
argument_list|,
name|childName
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

