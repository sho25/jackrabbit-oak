begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|LuceneIndexDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
import|;
end_import

begin_class
specifier|public
class|class
name|IndexDumper
block|{
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_DUMPS_DIR
init|=
literal|"index-dumps"
decl_stmt|;
specifier|private
specifier|final
name|IndexHelper
name|indexHelper
decl_stmt|;
specifier|private
specifier|final
name|File
name|outDir
decl_stmt|;
specifier|public
name|IndexDumper
parameter_list|(
name|IndexHelper
name|indexHelper
parameter_list|,
name|File
name|outDir
parameter_list|)
block|{
name|this
operator|.
name|indexHelper
operator|=
name|indexHelper
expr_stmt|;
name|this
operator|.
name|outDir
operator|=
name|outDir
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeState
name|root
init|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|File
name|indexDumpDir
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|INDEX_DUMPS_DIR
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|indexDumpDir
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|int
name|indexCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexHelper
operator|.
name|getIndexPathService
argument_list|()
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
name|NodeState
name|indexState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TYPE_LUCENE
operator|.
name|equals
argument_list|(
name|indexState
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LuceneIndexDumper
name|dumper
init|=
operator|new
name|LuceneIndexDumper
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|,
name|indexDumpDir
argument_list|)
decl_stmt|;
try|try
block|{
name|dumper
operator|.
name|dump
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"    - %s (%s)%n"
argument_list|,
name|indexPath
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|dumper
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Error occurred while performing consistency check for index [%s]%n"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|indexCount
operator|++
expr_stmt|;
name|totalSize
operator|+=
name|dumper
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Dumped index data of %d indexes (%s) to %s%n"
argument_list|,
name|indexCount
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|totalSize
argument_list|)
argument_list|,
name|IndexCommand
operator|.
name|getPath
argument_list|(
name|indexDumpDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

