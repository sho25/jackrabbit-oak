begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link NodeDelegate} and {@link PropertyDelegate}  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ItemDelegate
block|{
specifier|protected
specifier|final
name|SessionDelegate
name|sessionDelegate
decl_stmt|;
comment|/**      * The session update count. Used to avoid the overhead of extra      * {@link #exists()} calls every time this item is accessed.      *      * @see #checkAlive()      */
specifier|private
name|long
name|updateCount
decl_stmt|;
name|ItemDelegate
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|)
block|{
name|this
operator|.
name|sessionDelegate
operator|=
name|checkNotNull
argument_list|(
name|sessionDelegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateCount
operator|=
name|sessionDelegate
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks whether the session has changed since this delegate instance      * was last accessed, thus triggering an {@link #update() update} of the      * internal state of this delegate.      *      * @return {@code true} if the session was recently updated,      *         {@code false} if not      */
specifier|protected
name|boolean
name|checkUpdate
parameter_list|()
block|{
name|long
name|sessionCount
init|=
name|sessionDelegate
operator|.
name|getUpdateCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateCount
operator|!=
name|sessionCount
condition|)
block|{
name|updateCount
operator|=
name|sessionCount
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Called by {@link #checkUpdate()} to update the internal state of this      * delegate.      */
specifier|protected
name|void
name|update
parameter_list|()
block|{     }
comment|/**      * Performs a sanity check on this item and the associated session.      *      * @throws RepositoryException if this item has been rendered invalid      *                             for some reason or the associated session      *                             has been logged out      */
specifier|public
specifier|synchronized
name|void
name|checkAlive
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|checkAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkUpdate
argument_list|()
operator|&&
operator|!
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"This item does not exist anymore"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the name of this item      * @return oak name of this item      */
annotation|@
name|Nonnull
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * Get the path of this item      * @return oak path of this item      */
annotation|@
name|Nonnull
specifier|public
specifier|abstract
name|String
name|getPath
parameter_list|()
function_decl|;
comment|/**      * Get the parent of this item or {@code null}.      * @return  parent of this item or {@code null} for root or if the parent      * is not accessible.      */
annotation|@
name|CheckForNull
specifier|public
specifier|abstract
name|NodeDelegate
name|getParent
parameter_list|()
function_decl|;
comment|/**      * Get the status of this item.      * @return  {@link Status} of this item or {@code null} if not available.      */
annotation|@
name|CheckForNull
specifier|public
specifier|abstract
name|Status
name|getStatus
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isProtected
parameter_list|()
throws|throws
name|InvalidItemStateException
function_decl|;
comment|/**      * Determine whether the underlying item exists      * @return  {@code true} the underlying tree exists, {@code false} otherwise.      */
specifier|public
specifier|abstract
name|boolean
name|exists
parameter_list|()
function_decl|;
comment|/**      * Removes this item.      *      * @return {@code true} if this item was removed;      *         or {@code false} if this is the root node that can't be removed      */
specifier|public
specifier|abstract
name|boolean
name|remove
parameter_list|()
throws|throws
name|InvalidItemStateException
function_decl|;
comment|/**      * Save the subtree rooted at this item.      *      * @throws RepositoryException      */
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|sessionDelegate
operator|.
name|save
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

