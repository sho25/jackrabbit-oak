begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ReadPreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|CachedNodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|StableRevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|CachingDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|ForwardingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|NodeDocOffHeapCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|OffHeapCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Striped
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * A document store that uses MongoDB as the backend.  */
end_comment

begin_class
specifier|public
class|class
name|MongoDocumentStore
implements|implements
name|CachingDocumentStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDocumentStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|LOG_TIME
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DBObject
name|BY_ID_ASC
init|=
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|static
enum|enum
name|DocumentReadPreference
block|{
name|PRIMARY
block|,
name|PREFER_PRIMARY
block|,
name|PREFER_SECONDARY
block|,
name|PREFER_SECONDARY_IF_OLD_ENOUGH
block|}
specifier|public
specifier|static
specifier|final
name|int
name|IN_CLAUSE_BATCH_SIZE
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|nodes
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|clusterNodes
decl_stmt|;
specifier|private
specifier|final
name|DBCollection
name|settings
decl_stmt|;
comment|/**      * The sum of all milliseconds this class waited for MongoDB.      */
specifier|private
name|long
name|timeSum
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|nodesCache
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|cacheStats
decl_stmt|;
comment|/**      * Locks to ensure cache consistency on reads, writes and invalidation.      */
specifier|private
specifier|final
name|Striped
argument_list|<
name|Lock
argument_list|>
name|locks
init|=
name|Striped
operator|.
name|lock
argument_list|(
literal|128
argument_list|)
decl_stmt|;
comment|/**      * ReadWriteLocks to synchronize cache access when child documents are      * requested from MongoDB and put into the cache. Accessing a single      * document in the cache will acquire a read (shared) lock for the parent      * key in addition to the lock (from {@link #locks}) for the individual      * document. Reading multiple sibling documents will acquire a write      * (exclusive) lock for the parent key. See OAK-1897.      */
specifier|private
specifier|final
name|Striped
argument_list|<
name|ReadWriteLock
argument_list|>
name|parentLocks
init|=
name|Striped
operator|.
name|readWriteLock
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|/**      * Comparator for maps with {@link Revision} keys. The maps are ordered      * descending, newest revisions first!      */
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Revision
argument_list|>
name|comparator
init|=
name|StableRevisionComparator
operator|.
name|REVERSE
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxReplicationLagMillis
decl_stmt|;
specifier|private
name|String
name|lastReadWriteMode
decl_stmt|;
specifier|public
name|MongoDocumentStore
parameter_list|(
name|DB
name|db
parameter_list|,
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|checkVersion
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|NODES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|clusterNodes
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|CLUSTER_NODES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|Collection
operator|.
name|SETTINGS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|maxReplicationLagMillis
operator|=
name|builder
operator|.
name|getMaxReplicationLagMillis
argument_list|()
expr_stmt|;
comment|// indexes:
comment|// the _id field is the primary key, so we don't need to define it
name|DBObject
name|index
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// modification time (descending)
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|DBObject
name|options
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// index on the _bin flag to faster access nodes with binaries for GC
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|HAS_BINARY_FLAG
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"sparse"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodes
operator|.
name|ensureIndex
argument_list|(
name|index
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// TODO expire entries if the parent was changed
if|if
condition|(
name|builder
operator|.
name|useOffHeapCache
argument_list|()
condition|)
block|{
name|nodesCache
operator|=
name|createOffHeapCache
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesCache
operator|=
name|builder
operator|.
name|buildCache
argument_list|(
name|builder
operator|.
name|getDocumentCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|nodesCache
argument_list|,
literal|"Document-Documents"
argument_list|,
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|,
name|builder
operator|.
name|getDocumentCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkVersion
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|String
name|version
init|=
name|db
operator|.
name|command
argument_list|(
literal|"buildInfo"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)\\.(\\d+)\\..*"
argument_list|)
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Malformed MongoDB version: "
operator|+
name|version
argument_list|)
throw|;
block|}
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|>
literal|2
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|minor
operator|<
literal|6
condition|)
block|{
name|String
name|msg
init|=
literal|"MongoDB version 2.6.0 or higher required. "
operator|+
literal|"Currently connected to a MongoDB with version: "
operator|+
name|version
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|createOffHeapCache
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|ForwardingListener
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|listener
init|=
name|ForwardingListener
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|primaryCache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|weigher
argument_list|(
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|builder
operator|.
name|getDocumentCacheSize
argument_list|()
argument_list|)
operator|.
name|removalListener
argument_list|(
name|listener
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeDocOffHeapCache
argument_list|(
name|primaryCache
argument_list|,
name|listener
argument_list|,
name|builder
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|start
parameter_list|()
block|{
return|return
name|LOG_TIME
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
literal|0
return|;
block|}
specifier|private
name|void
name|end
parameter_list|(
name|String
name|message
parameter_list|,
name|long
name|start
parameter_list|)
block|{
if|if
condition|(
name|LOG_TIME
condition|)
block|{
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|t
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|message
operator|+
literal|": "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|timeSum
operator|+=
name|t
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
comment|// TODO should not be needed, but it seems
comment|// oak-jcr doesn't call dispose()
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invalidateCache
parameter_list|()
block|{
comment|//TODO Check if we should use LinearInvalidator for small cache sizes as
comment|//that would lead to lesser number of queries
name|CacheInvalidator
operator|.
name|createHierarchicalInvalidator
argument_list|(
name|this
argument_list|)
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|invalidateCache
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|TreeLock
name|lock
init|=
name|acquire
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|nodesCache
operator|.
name|invalidate
argument_list|(
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|invalidateCache
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
name|int
name|maxCacheAge
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
literal|false
argument_list|,
name|maxCacheAge
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
name|boolean
name|preferCached
parameter_list|,
specifier|final
name|int
name|maxCacheAge
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|findUncached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|DocumentReadPreference
operator|.
name|PRIMARY
argument_list|)
return|;
block|}
name|CacheValue
name|cacheKey
init|=
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
decl_stmt|;
if|if
condition|(
name|maxCacheAge
operator|>
literal|0
operator|||
name|preferCached
condition|)
block|{
comment|// first try without lock
name|doc
operator|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|preferCached
operator|||
name|getTime
argument_list|()
operator|-
name|doc
operator|.
name|getCreated
argument_list|()
operator|<
name|maxCacheAge
condition|)
block|{
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|T
operator|)
name|doc
return|;
block|}
block|}
block|}
try|try
block|{
name|TreeLock
name|lock
init|=
name|acquire
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|maxCacheAge
operator|==
literal|0
condition|)
block|{
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|doc
operator|=
name|nodesCache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|Callable
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDocument
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeDocument
name|doc
init|=
operator|(
name|NodeDocument
operator|)
name|findUncached
argument_list|(
name|collection
argument_list|,
name|key
argument_list|,
name|getReadPreference
argument_list|(
name|maxCacheAge
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
name|NodeDocument
operator|.
name|NULL
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxCacheAge
operator|==
literal|0
operator|||
name|preferCached
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|getTime
argument_list|()
operator|-
name|doc
operator|.
name|getCreated
argument_list|()
operator|<
name|maxCacheAge
condition|)
block|{
break|break;
block|}
comment|// too old: invalidate, try again
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
name|T
operator|)
name|doc
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to load document with "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findUncached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|,
name|DocumentReadPreference
name|docReadPref
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|ReadPreference
name|readPreference
init|=
name|getMongoReadPreference
argument_list|(
name|collection
argument_list|,
name|Utils
operator|.
name|getParentId
argument_list|(
name|key
argument_list|)
argument_list|,
name|docReadPref
argument_list|)
decl_stmt|;
if|if
condition|(
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Routing call to secondary for fetching [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|obj
init|=
name|dbCollection
operator|.
name|findOne
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|readPreference
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
operator|&&
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
comment|//In case secondary read preference is used and node is not found
comment|//then check with primary again as it might happen that node document has not been
comment|//replicated. This is required for case like SplitDocument where the SplitDoc is fetched with
comment|//maxCacheAge == Integer.MAX_VALUE which results in readPreference of secondary.
comment|//In such a case we know that document with such an id must exist
comment|//but possibly dut to replication lag it has not reached to secondary. So in that case read again
comment|//from primary
name|obj
operator|=
name|dbCollection
operator|.
name|findOne
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ReadPreference
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|doc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
finally|finally
block|{
name|end
argument_list|(
literal|"findUncached"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|collection
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|fromKey
parameter_list|,
name|String
name|toKey
parameter_list|,
name|String
name|indexedProperty
parameter_list|,
name|long
name|startValue
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|log
argument_list|(
literal|"query"
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|greaterThan
argument_list|(
name|fromKey
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|lessThan
argument_list|(
name|toKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexedProperty
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|and
argument_list|(
name|indexedProperty
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|greaterThanEquals
argument_list|(
name|startValue
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
name|Utils
operator|.
name|getParentIdFromLowerLimit
argument_list|(
name|fromKey
argument_list|)
decl_stmt|;
name|TreeLock
name|lock
init|=
name|acquireExclusive
argument_list|(
name|parentId
operator|!=
literal|null
condition|?
name|parentId
else|:
literal|""
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|DBCursor
name|cursor
init|=
name|dbCollection
operator|.
name|find
argument_list|(
name|query
argument_list|)
operator|.
name|sort
argument_list|(
name|BY_ID_ASC
argument_list|)
decl_stmt|;
name|ReadPreference
name|readPreference
init|=
name|getMongoReadPreference
argument_list|(
name|collection
argument_list|,
name|parentId
argument_list|,
name|getDefaultReadPreference
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|readPreference
operator|.
name|isSlaveOk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Routing call to secondary for fetching children from [{}] to [{}]"
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|)
expr_stmt|;
block|}
name|cursor
operator|.
name|setReadPreference
argument_list|(
name|readPreference
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
operator|&&
name|cursor
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DBObject
name|o
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|T
name|doc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
operator|&&
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
name|String
name|id
init|=
name|doc
operator|.
name|getId
argument_list|()
decl_stmt|;
name|CacheValue
name|cacheKey
init|=
operator|new
name|StringValue
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// do not overwrite document in cache if the
comment|// existing one in the cache is newer
name|NodeDocument
name|cached
init|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|!=
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
comment|// check mod count
name|Number
name|cachedModCount
init|=
name|cached
operator|.
name|getModCount
argument_list|()
decl_stmt|;
name|Number
name|modCount
init|=
name|doc
operator|.
name|getModCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedModCount
operator|==
literal|null
operator|||
name|modCount
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing "
operator|+
name|Document
operator|.
name|MOD_COUNT
argument_list|)
throw|;
block|}
if|if
condition|(
name|modCount
operator|.
name|longValue
argument_list|()
operator|>
name|cachedModCount
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|nodesCache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
operator|(
name|NodeDocument
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodesCache
operator|.
name|put
argument_list|(
name|cacheKey
argument_list|,
operator|(
name|NodeDocument
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|end
argument_list|(
literal|"query"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|log
argument_list|(
literal|"remove"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteResult
name|writeResult
init|=
name|dbCollection
operator|.
name|remove
argument_list|(
name|getByKeyQuery
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Remove failed: "
operator|+
name|writeResult
operator|.
name|getError
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|end
argument_list|(
literal|"remove"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|remove
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|keyBatch
range|:
name|Lists
operator|.
name|partition
argument_list|(
name|keys
argument_list|,
name|IN_CLAUSE_BATCH_SIZE
argument_list|)
control|)
block|{
name|DBObject
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|keyBatch
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|WriteResult
name|writeResult
init|=
name|dbCollection
operator|.
name|remove
argument_list|(
name|query
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|collection
argument_list|,
name|keyBatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Remove failed: "
operator|+
name|writeResult
operator|.
name|getError
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|CheckForNull
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndModify
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|checkConditions
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
comment|// make sure we don't modify the original updateOp
name|updateOp
operator|=
name|updateOp
operator|.
name|copy
argument_list|()
expr_stmt|;
name|DBObject
name|update
init|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|)
decl_stmt|;
name|TreeLock
name|lock
init|=
name|acquire
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
comment|// get modCount of cached document
name|Number
name|modCount
init|=
literal|null
decl_stmt|;
name|T
name|cachedDoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|doc
init|=
operator|(
name|T
operator|)
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|StringValue
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cachedDoc
operator|=
name|doc
expr_stmt|;
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
condition|)
block|{
name|modCount
operator|=
name|cachedDoc
operator|.
name|getModCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|// perform a conditional update with limited result
comment|// if we have a matching modCount
if|if
condition|(
name|modCount
operator|!=
literal|null
condition|)
block|{
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|updateOp
argument_list|,
name|checkConditions
argument_list|)
decl_stmt|;
name|query
operator|.
name|and
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
operator|.
name|is
argument_list|(
name|modCount
argument_list|)
expr_stmt|;
name|DBObject
name|fields
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// return _id only
name|fields
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DBObject
name|oldNode
init|=
name|dbCollection
operator|.
name|findAndModify
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|fields
argument_list|,
literal|null
comment|/*sort*/
argument_list|,
literal|false
comment|/*remove*/
argument_list|,
name|update
argument_list|,
literal|false
comment|/*returnNew*/
argument_list|,
literal|false
comment|/*upsert*/
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|!=
literal|null
condition|)
block|{
comment|// success, update cached document
name|applyToCache
argument_list|(
name|collection
argument_list|,
name|cachedDoc
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
comment|// return previously cached document
return|return
name|cachedDoc
return|;
block|}
block|}
comment|// conditional update failed or not possible
comment|// perform operation and get complete document
name|QueryBuilder
name|query
init|=
name|createQueryForUpdate
argument_list|(
name|updateOp
argument_list|,
name|checkConditions
argument_list|)
decl_stmt|;
name|DBObject
name|oldNode
init|=
name|dbCollection
operator|.
name|findAndModify
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
comment|/*sort*/
argument_list|,
literal|false
comment|/*remove*/
argument_list|,
name|update
argument_list|,
literal|false
comment|/*returnNew*/
argument_list|,
name|upsert
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkConditions
operator|&&
name|oldNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|oldDoc
init|=
name|convertFromDBObject
argument_list|(
name|collection
argument_list|,
name|oldNode
argument_list|)
decl_stmt|;
name|applyToCache
argument_list|(
name|collection
argument_list|,
name|oldDoc
argument_list|,
name|updateOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
name|oldDoc
operator|.
name|seal
argument_list|()
expr_stmt|;
block|}
return|return
name|oldDoc
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|end
argument_list|(
literal|"findAndModify"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|createOrUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|log
argument_list|(
literal|"createOrUpdate"
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|T
name|doc
init|=
name|findAndModify
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"createOrUpdate returns "
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|findAndUpdate
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|UpdateOp
name|update
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|log
argument_list|(
literal|"findAndUpdate"
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|T
name|doc
init|=
name|findAndModify
argument_list|(
name|collection
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"findAndUpdate returns "
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|boolean
name|create
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updateOps
parameter_list|)
block|{
name|log
argument_list|(
literal|"create"
argument_list|,
name|updateOps
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|DBObject
index|[]
name|inserts
init|=
operator|new
name|DBObject
index|[
name|updateOps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updateOps
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|inserts
index|[
name|i
index|]
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
name|UpdateOp
name|update
init|=
name|updateOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|T
name|target
init|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|target
argument_list|,
name|update
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|update
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|SET
case|:
case|case
name|MAX
case|:
case|case
name|INCREMENT
case|:
block|{
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SET_MAP_ENTRY
case|:
block|{
name|Revision
name|r
init|=
name|k
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"SET_MAP_ENTRY must not have null revision"
argument_list|)
throw|;
block|}
name|DBObject
name|value
init|=
operator|new
name|RevisionEntry
argument_list|(
name|r
argument_list|,
name|op
operator|.
name|value
argument_list|)
decl_stmt|;
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVE_MAP_ENTRY
case|:
comment|// nothing to do for new entries
break|break;
case|case
name|CONTAINS_MAP_ENTRY
case|:
comment|// no effect
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|inserts
index|[
name|i
index|]
operator|.
name|containsField
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|)
condition|)
block|{
name|inserts
index|[
name|i
index|]
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|target
operator|.
name|put
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|WriteResult
name|writeResult
init|=
name|dbCollection
operator|.
name|insert
argument_list|(
name|inserts
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
for|for
control|(
name|T
name|doc
range|:
name|docs
control|)
block|{
name|TreeLock
name|lock
init|=
name|acquire
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|addToCache
argument_list|(
operator|(
name|NodeDocument
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|end
argument_list|(
literal|"create"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|update
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|UpdateOp
name|updateOp
parameter_list|)
block|{
name|DBCollection
name|dbCollection
init|=
name|getDBCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|QueryBuilder
name|query
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|in
argument_list|(
name|keys
argument_list|)
decl_stmt|;
comment|// make sure we don't modify the original updateOp
name|updateOp
operator|=
name|updateOp
operator|.
name|copy
argument_list|()
expr_stmt|;
name|DBObject
name|update
init|=
name|createUpdate
argument_list|(
name|updateOp
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|start
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|cachedDocs
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|cachedDocs
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|cachedDocs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|WriteResult
name|writeResult
init|=
name|dbCollection
operator|.
name|update
argument_list|(
name|query
operator|.
name|get
argument_list|()
argument_list|,
name|update
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeResult
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Update failed: "
operator|+
name|writeResult
operator|.
name|getError
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
comment|// update cache
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
name|entry
range|:
name|cachedDocs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreeLock
name|lock
init|=
name|acquire
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// make sure concurrently loaded document is invalidated
name|nodesCache
operator|.
name|invalidate
argument_list|(
operator|new
name|StringValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|applyToCache
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|updateOp
operator|.
name|shallowCopy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|end
argument_list|(
literal|"update"
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
block|}
name|DocumentReadPreference
name|getReadPreference
parameter_list|(
name|int
name|maxCacheAge
parameter_list|)
block|{
if|if
condition|(
name|maxCacheAge
operator|>=
literal|0
operator|&&
name|maxCacheAge
operator|<
name|maxReplicationLagMillis
condition|)
block|{
return|return
name|DocumentReadPreference
operator|.
name|PRIMARY
return|;
block|}
elseif|else
if|if
condition|(
name|maxCacheAge
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY
return|;
block|}
else|else
block|{
return|return
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY_IF_OLD_ENOUGH
return|;
block|}
block|}
name|DocumentReadPreference
name|getDefaultReadPreference
parameter_list|(
name|Collection
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
name|Collection
operator|.
name|NODES
condition|?
name|DocumentReadPreference
operator|.
name|PREFER_SECONDARY_IF_OLD_ENOUGH
else|:
name|DocumentReadPreference
operator|.
name|PRIMARY
return|;
block|}
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|ReadPreference
name|getMongoReadPreference
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|parentId
parameter_list|,
name|DocumentReadPreference
name|preference
parameter_list|)
block|{
switch|switch
condition|(
name|preference
condition|)
block|{
case|case
name|PRIMARY
case|:
return|return
name|ReadPreference
operator|.
name|primary
argument_list|()
return|;
case|case
name|PREFER_PRIMARY
case|:
return|return
name|ReadPreference
operator|.
name|primaryPreferred
argument_list|()
return|;
case|case
name|PREFER_SECONDARY
case|:
return|return
name|getConfiguredReadPreference
argument_list|(
name|collection
argument_list|)
return|;
case|case
name|PREFER_SECONDARY_IF_OLD_ENOUGH
case|:
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|ReadPreference
operator|.
name|primary
argument_list|()
return|;
block|}
comment|//Default to primary preferred such that in case primary is being elected
comment|//we can still read from secondary
comment|//TODO REVIEW Would that be safe
name|ReadPreference
name|readPreference
init|=
name|ReadPreference
operator|.
name|primaryPreferred
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
name|long
name|replicationSafeLimit
init|=
name|getTime
argument_list|()
operator|-
name|maxReplicationLagMillis
decl_stmt|;
name|NodeDocument
name|cachedDoc
init|=
operator|(
name|NodeDocument
operator|)
name|getIfCached
argument_list|(
name|collection
argument_list|,
name|parentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedDoc
operator|!=
literal|null
operator|&&
operator|!
name|cachedDoc
operator|.
name|hasBeenModifiedSince
argument_list|(
name|replicationSafeLimit
argument_list|)
condition|)
block|{
comment|//If parent has been modified loooong time back then there children
comment|//would also have not be modified. In that case we can read from secondary
name|readPreference
operator|=
name|getConfiguredReadPreference
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|readPreference
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported usage "
operator|+
name|preference
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retrieves the ReadPreference specified for the Mongo DB in use irrespective of      * DBCollection. Depending on deployments the user can tweak the default references      * to read from secondary and in that also tag secondaries      *      * @return db level ReadPreference      */
name|ReadPreference
name|getConfiguredReadPreference
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
return|return
name|getDBCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getReadPreference
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|protected
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|convertFromDBObject
parameter_list|(
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
annotation|@
name|Nullable
name|DBObject
name|n
parameter_list|)
block|{
name|T
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|n
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|o
init|=
name|n
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|BasicDBObject
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|convertMongoMap
argument_list|(
operator|(
name|BasicDBObject
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|convertMongoMap
parameter_list|(
annotation|@
name|Nonnull
name|BasicDBObject
name|obj
parameter_list|)
block|{
name|Map
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Object
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|obj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|DBCollection
name|getDBCollection
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
name|nodes
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|CLUSTER_NODES
condition|)
block|{
return|return
name|clusterNodes
return|;
block|}
elseif|else
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|SETTINGS
condition|)
block|{
return|return
name|settings
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown collection: "
operator|+
name|collection
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|QueryBuilder
name|getByKeyQuery
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|QueryBuilder
operator|.
name|start
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
operator|.
name|is
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MongoDB time: "
operator|+
name|timeSum
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|getDB
argument_list|()
operator|.
name|getMongo
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodesCache
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|nodesCache
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while closing Off Heap Cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|CacheStats
name|getCacheStats
parameter_list|()
block|{
return|return
name|cacheStats
return|;
block|}
name|Iterable
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|CacheValue
argument_list|,
name|?
extends|extends
name|CachedNodeDocument
argument_list|>
argument_list|>
name|getCacheEntries
parameter_list|()
block|{
if|if
condition|(
name|nodesCache
operator|instanceof
name|OffHeapCache
condition|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|nodesCache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
operator|(
operator|(
name|OffHeapCache
operator|)
name|nodesCache
operator|)
operator|.
name|offHeapEntriesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
return|return
name|nodesCache
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
return|;
block|}
name|CachedNodeDocument
name|getCachedNodeDoc
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|nodesCache
operator|instanceof
name|OffHeapCache
condition|)
block|{
return|return
operator|(
operator|(
name|OffHeapCache
operator|)
name|nodesCache
operator|)
operator|.
name|getCachedDocument
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|StringValue
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|argList
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|length
argument_list|()
operator|>
literal|10000
condition|)
block|{
name|argList
operator|=
name|argList
operator|.
name|length
argument_list|()
operator|+
literal|": "
operator|+
name|argList
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|message
operator|+
name|argList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|getIfCached
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|!=
name|Collection
operator|.
name|NODES
condition|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|doc
init|=
operator|(
name|T
operator|)
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Applies an update to the nodes cache. This method does not acquire      * a lock for the document. The caller must ensure it holds a lock for      * the updated document. See striped {@link #locks}.      *      * @param<T> the document type.      * @param collection the document collection.      * @param oldDoc the old document or<code>null</code> if the update is for      *               a new document (insert).      * @param updateOp the update operation.      */
specifier|private
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|void
name|applyToCache
parameter_list|(
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
annotation|@
name|Nullable
name|T
name|oldDoc
parameter_list|,
annotation|@
name|Nonnull
name|UpdateOp
name|updateOp
parameter_list|)
block|{
comment|// cache the new document
if|if
condition|(
name|collection
operator|==
name|Collection
operator|.
name|NODES
condition|)
block|{
name|CacheValue
name|key
init|=
operator|new
name|StringValue
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeDocument
name|newDoc
init|=
operator|(
name|NodeDocument
operator|)
name|collection
operator|.
name|newDocument
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDoc
operator|!=
literal|null
condition|)
block|{
comment|// we can only update the cache based on the oldDoc if we
comment|// still have the oldDoc in the cache, otherwise we may
comment|// update the cache with an outdated document
name|NodeDocument
name|cached
init|=
name|nodesCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|==
literal|null
condition|)
block|{
comment|// cannot use oldDoc to update cache
return|return;
block|}
name|oldDoc
operator|.
name|deepCopy
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
block|}
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|newDoc
argument_list|,
name|updateOp
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|newDoc
operator|.
name|seal
argument_list|()
expr_stmt|;
name|NodeDocument
name|cached
init|=
name|addToCache
argument_list|(
name|newDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|==
name|newDoc
condition|)
block|{
comment|// successful
return|return;
block|}
if|if
condition|(
name|oldDoc
operator|==
literal|null
condition|)
block|{
comment|// this is an insert and some other thread was quicker
comment|// loading it into the cache -> return now
return|return;
block|}
comment|// this is an update (oldDoc != null)
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|cached
operator|.
name|getModCount
argument_list|()
argument_list|,
name|oldDoc
operator|.
name|getModCount
argument_list|()
argument_list|)
condition|)
block|{
name|nodesCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the cache entry was modified by some other thread in
comment|// the meantime. the updated cache entry may or may not
comment|// include this update. we cannot just apply our update
comment|// on top of the cached entry.
comment|// therefore we must invalidate the cache entry
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds a document to the {@link #nodesCache} iff there is no document      * in the cache with the document key. This method does not acquire a lock      * from {@link #locks}! The caller must ensure a lock is held for the      * given document.      *      * @param doc the document to add to the cache.      * @return either the given<code>doc</code> or the document already present      *          in the cache.      */
annotation|@
name|Nonnull
specifier|private
name|NodeDocument
name|addToCache
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeDocument
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|==
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"doc must not be NULL document"
argument_list|)
throw|;
block|}
name|doc
operator|.
name|seal
argument_list|()
expr_stmt|;
comment|// make sure we only cache the document if it wasn't
comment|// changed and cached by some other thread in the
comment|// meantime. That is, use get() with a Callable,
comment|// which is only used when the document isn't there
try|try
block|{
name|CacheValue
name|key
init|=
operator|new
name|StringValue
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|NodeDocument
name|cached
init|=
name|nodesCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDocument
name|call
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
name|NodeDocument
operator|.
name|NULL
condition|)
block|{
return|return
name|cached
return|;
block|}
else|else
block|{
name|nodesCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// will never happen because call() just returns
comment|// the already available doc
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|QueryBuilder
name|createQueryForUpdate
parameter_list|(
name|UpdateOp
name|updateOp
parameter_list|,
name|boolean
name|checkConditions
parameter_list|)
block|{
name|QueryBuilder
name|query
init|=
name|getByKeyQuery
argument_list|(
name|updateOp
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|updateOp
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|CONTAINS_MAP_ENTRY
case|:
block|{
if|if
condition|(
name|checkConditions
condition|)
block|{
name|query
operator|.
name|and
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
comment|/**      * Creates a MongoDB update object from the given UpdateOp.      *      * @param updateOp the update op.      * @return the DBObject.      */
annotation|@
name|Nonnull
specifier|private
specifier|static
name|DBObject
name|createUpdate
parameter_list|(
name|UpdateOp
name|updateOp
parameter_list|)
block|{
name|BasicDBObject
name|setUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|maxUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|incUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|BasicDBObject
name|unsetUpdates
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
comment|// always increment modCount
name|updateOp
operator|.
name|increment
argument_list|(
name|Document
operator|.
name|MOD_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// other updates
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|updateOp
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Key
name|k
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|ID
argument_list|)
condition|)
block|{
comment|// avoid exception "Mod on _id not allowed"
continue|continue;
block|}
name|Operation
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|SET
case|:
case|case
name|SET_MAP_ENTRY
case|:
block|{
name|setUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAX
case|:
block|{
name|maxUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INCREMENT
case|:
block|{
name|incUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|op
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REMOVE_MAP_ENTRY
case|:
block|{
name|unsetUpdates
operator|.
name|append
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|BasicDBObject
name|update
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|setUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$set"
argument_list|,
name|setUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|maxUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$max"
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$inc"
argument_list|,
name|incUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unsetUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|update
operator|.
name|append
argument_list|(
literal|"$unset"
argument_list|,
name|unsetUpdates
argument_list|)
expr_stmt|;
block|}
return|return
name|update
return|;
block|}
comment|/**      * Returns the parent id for the given id. An empty String is returned if      * the given value is the id of the root document or the id for a long path.      *      * @param id an id for a document.      * @return the id of the parent document or the empty String.      */
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|getParentId
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
block|{
name|String
name|parentId
init|=
name|Utils
operator|.
name|getParentId
argument_list|(
name|checkNotNull
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentId
operator|==
literal|null
condition|)
block|{
name|parentId
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|parentId
return|;
block|}
comment|/**      * Acquires a log for the given key. The returned tree lock will also hold      * a shared lock on the parent key.      *      * @param key a key.      * @return the acquired lock for the given key.      */
specifier|private
name|TreeLock
name|acquire
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|TreeLock
operator|.
name|shared
argument_list|(
name|parentLocks
operator|.
name|get
argument_list|(
name|getParentId
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|locks
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Acquires an exclusive lock on the given parent key. Use this method to      * block cache access for child keys of the given parent key.      *      * @param parentKey the parent key.      * @return the acquired lock for the given parent key.      */
specifier|private
name|TreeLock
name|acquireExclusive
parameter_list|(
name|String
name|parentKey
parameter_list|)
block|{
return|return
name|TreeLock
operator|.
name|exclusive
argument_list|(
name|parentLocks
operator|.
name|get
argument_list|(
name|parentKey
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadWriteMode
parameter_list|(
name|String
name|readWriteMode
parameter_list|)
block|{
if|if
condition|(
name|readWriteMode
operator|==
literal|null
operator|||
name|readWriteMode
operator|.
name|equals
argument_list|(
name|lastReadWriteMode
argument_list|)
condition|)
block|{
return|return;
block|}
name|lastReadWriteMode
operator|=
name|readWriteMode
expr_stmt|;
try|try
block|{
name|String
name|rwModeUri
init|=
name|readWriteMode
decl_stmt|;
if|if
condition|(
operator|!
name|readWriteMode
operator|.
name|startsWith
argument_list|(
literal|"mongodb://"
argument_list|)
condition|)
block|{
name|rwModeUri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mongodb://localhost/?%s"
argument_list|,
name|readWriteMode
argument_list|)
expr_stmt|;
block|}
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|rwModeUri
argument_list|)
decl_stmt|;
name|ReadPreference
name|readPref
init|=
name|uri
operator|.
name|getOptions
argument_list|()
operator|.
name|getReadPreference
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|readPref
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getReadPreference
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|setReadPreference
argument_list|(
name|readPref
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using ReadPreference {} "
argument_list|,
name|readPref
argument_list|)
expr_stmt|;
block|}
name|WriteConcern
name|writeConcern
init|=
name|uri
operator|.
name|getOptions
argument_list|()
operator|.
name|getWriteConcern
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|writeConcern
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|getWriteConcern
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|setWriteConcern
argument_list|(
name|writeConcern
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using WriteConcern "
operator|+
name|writeConcern
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error setting readWriteMode "
operator|+
name|readWriteMode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getTime
parameter_list|()
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|TreeLock
block|{
specifier|private
specifier|final
name|Lock
name|parentLock
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
specifier|private
name|TreeLock
parameter_list|(
name|Lock
name|parentLock
parameter_list|,
name|Lock
name|lock
parameter_list|)
block|{
name|this
operator|.
name|parentLock
operator|=
name|parentLock
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
block|}
specifier|static
name|TreeLock
name|shared
parameter_list|(
name|ReadWriteLock
name|parentLock
parameter_list|,
name|Lock
name|lock
parameter_list|)
block|{
return|return
operator|new
name|TreeLock
argument_list|(
name|parentLock
operator|.
name|readLock
argument_list|()
argument_list|,
name|lock
argument_list|)
operator|.
name|lock
argument_list|()
return|;
block|}
specifier|static
name|TreeLock
name|exclusive
parameter_list|(
name|ReadWriteLock
name|parentLock
parameter_list|)
block|{
return|return
operator|new
name|TreeLock
argument_list|(
name|parentLock
operator|.
name|writeLock
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|lock
argument_list|()
return|;
block|}
specifier|private
name|TreeLock
name|lock
parameter_list|()
block|{
name|parentLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|unlock
parameter_list|()
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|parentLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

