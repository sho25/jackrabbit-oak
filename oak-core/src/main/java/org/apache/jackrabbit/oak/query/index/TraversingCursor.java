begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * A cursor that reads all nodes in a given subtree.  */
end_comment

begin_class
specifier|public
class|class
name|TraversingCursor
implements|implements
name|Cursor
block|{
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|private
specifier|final
name|String
name|revisionId
decl_stmt|;
specifier|private
specifier|final
name|int
name|childBlockSize
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|NodeCursor
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeCursor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|currentPath
decl_stmt|;
specifier|private
name|NodeImpl
name|currentNode
decl_stmt|;
specifier|public
name|TraversingCursor
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|childBlockSize
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
name|this
operator|.
name|childBlockSize
operator|=
name|childBlockSize
expr_stmt|;
name|currentPath
operator|=
name|path
expr_stmt|;
block|}
specifier|private
name|boolean
name|loadChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|String
name|s
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|,
name|childBlockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeCursor
name|c
init|=
operator|new
name|NodeCursor
argument_list|()
decl_stmt|;
name|c
operator|.
name|node
operator|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|c
operator|.
name|node
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|c
operator|.
name|pos
operator|=
name|offset
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|child
init|=
name|c
operator|.
name|node
operator|.
name|getChildNodeName
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|child
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeImpl
name|currentNode
parameter_list|()
block|{
if|if
condition|(
name|currentNode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|currentPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|s
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|currentPath
argument_list|,
name|revisionId
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|currentNode
operator|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|currentNode
operator|.
name|setPath
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
block|}
return|return
name|currentNode
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|currentPath
parameter_list|()
block|{
return|return
name|currentPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
name|currentNode
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
name|currentPath
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mk
operator|.
name|nodeExists
argument_list|(
name|currentPath
argument_list|,
name|revisionId
argument_list|)
condition|)
block|{
name|nodes
operator|=
literal|null
expr_stmt|;
name|currentPath
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
name|loadChildren
argument_list|(
name|currentPath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
while|while
condition|(
operator|!
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// next child node in the deepest level
name|NodeCursor
name|c
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|currentPath
operator|=
name|c
operator|.
name|node
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|long
name|pos
init|=
name|c
operator|.
name|pos
operator|++
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
name|c
operator|.
name|node
operator|.
name|getTotalChildNodeCount
argument_list|()
condition|)
block|{
comment|// there are no more child nodes
name|nodes
operator|.
name|remove
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pos
operator|>
literal|0
operator|&&
name|pos
operator|%
name|childBlockSize
operator|==
literal|0
condition|)
block|{
comment|// need to load a new block
name|nodes
operator|.
name|remove
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadChildren
argument_list|(
name|currentPath
argument_list|,
name|pos
argument_list|)
condition|)
block|{
name|c
operator|=
name|nodes
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|pos
operator|++
expr_stmt|;
block|}
block|}
name|String
name|childName
init|=
name|c
operator|.
name|node
operator|.
name|getChildNodeName
argument_list|(
name|pos
operator|%
name|childBlockSize
argument_list|)
decl_stmt|;
name|currentPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|childName
argument_list|)
expr_stmt|;
name|loadChildren
argument_list|(
name|currentPath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|nodes
operator|=
literal|null
expr_stmt|;
name|currentPath
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|static
class|class
name|NodeCursor
block|{
name|NodeImpl
name|node
decl_stmt|;
name|long
name|pos
decl_stmt|;
block|}
block|}
end_class

end_unit

