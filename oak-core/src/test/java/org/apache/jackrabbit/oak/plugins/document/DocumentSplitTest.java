begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Check correct splitting of documents (OAK-926& OAK-1342).  */
end_comment

begin_class
specifier|public
class|class
name|DocumentSplitTest
extends|extends
name|BaseDocumentMKTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|splitRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|addAll
argument_list|(
name|doc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}+\"bar\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// create nodes
while|while
condition|(
name|revisions
operator|.
name|size
argument_list|()
operator|<=
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo/node-"
operator|+
name|revisions
operator|.
name|size
argument_list|()
operator|+
literal|"\":{}"
operator|+
literal|"+\"bar/node-"
operator|+
name|revisions
operator|.
name|size
argument_list|()
operator|+
literal|"\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|revs
init|=
name|doc
operator|.
name|getLocalRevisions
argument_list|()
decl_stmt|;
comment|// one remaining in the local revisions map
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|revisions
control|)
block|{
name|assertTrue
argument_list|(
name|doc
operator|.
name|containsRevision
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if document is still there
name|assertNotNull
argument_list|(
name|ns
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|head
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
name|prevDoc
init|=
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|DEFAULT
argument_list|,
name|prevDoc
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"baz\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mk
operator|.
name|backgroundWrite
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|splitDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|addAll
argument_list|(
name|doc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|create
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|revisions
operator|.
name|size
argument_list|()
operator|<=
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|)
block|{
if|if
condition|(
name|create
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"foo\""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|create
operator|=
operator|!
name|create
expr_stmt|;
block|}
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|doc
operator|.
name|getLocalDeleted
argument_list|()
decl_stmt|;
comment|// one remaining in the local deleted map
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|revisions
control|)
block|{
name|assertTrue
argument_list|(
literal|"document should contain revision (or have revision in commit root path):"
operator|+
name|rev
argument_list|,
name|doc
operator|.
name|containsRevision
argument_list|(
name|rev
argument_list|)
operator|||
name|doc
operator|.
name|getCommitRootPath
argument_list|(
name|rev
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DocumentNodeState
name|node
init|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/foo"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|head
argument_list|)
argument_list|)
decl_stmt|;
comment|// check status of node
if|if
condition|(
name|create
condition|)
block|{
name|assertNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|splitCommitRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}+\"bar\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|commitRoots
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|commitRoots
operator|.
name|addAll
argument_list|(
name|doc
operator|.
name|getLocalCommitRoot
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// create nodes
while|while
condition|(
name|commitRoots
operator|.
name|size
argument_list|()
operator|<=
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|)
block|{
name|commitRoots
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"foo/prop\":"
operator|+
name|commitRoots
operator|.
name|size
argument_list|()
operator|+
literal|"^\"bar/prop\":"
operator|+
name|commitRoots
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commits
init|=
name|doc
operator|.
name|getLocalCommitRoot
argument_list|()
decl_stmt|;
comment|// one remaining in the local commit root map
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|commitRoots
control|)
block|{
name|assertTrue
argument_list|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|splitPropertyRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
comment|// create nodes
while|while
condition|(
name|revisions
operator|.
name|size
argument_list|()
operator|<=
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|)
block|{
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"foo/prop\":"
operator|+
name|revisions
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|localRevs
init|=
name|doc
operator|.
name|getLocalRevisions
argument_list|()
decl_stmt|;
comment|// one remaining in the local revisions map
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localRevs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|revisions
control|)
block|{
name|assertTrue
argument_list|(
name|doc
operator|.
name|isCommitted
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all revisions in the prop map
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"prop"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|revisions
operator|.
name|size
argument_list|()
argument_list|,
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// one remaining revision in the local map
name|valueMap
operator|=
name|doc
operator|.
name|getLocalMap
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cluster
parameter_list|()
block|{
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|DocumentMK
operator|.
name|Builder
name|builder
decl_stmt|;
name|builder
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DocumentMK
name|mk1
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
literal|1
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"prop1\":0}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// make sure the new node is visible to other DocumentMK instances
name|mk1
operator|.
name|backgroundWrite
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DocumentMK
name|mk2
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
literal|2
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DocumentMK
name|mk3
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
literal|3
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|mk1
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"test/prop1\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk2
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"test/prop2\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk3
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"test/prop3\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|mk1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|mk3
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|revs
init|=
name|doc
operator|.
name|getLocalRevisions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|revs
operator|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"_revisions"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|revs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTimeThenClusterId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|mk1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mk3
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// OAK-1233
specifier|public
name|void
name|manyRevisions
parameter_list|()
block|{
specifier|final
name|int
name|numMKs
init|=
literal|3
decl_stmt|;
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentMK
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numMKs
condition|;
name|i
operator|++
control|)
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DocumentMK
name|mk
init|=
name|builder
operator|.
name|setClusterId
argument_list|(
name|i
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|mks
operator|.
name|add
argument_list|(
name|mk
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|propNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"prop1"
argument_list|,
literal|"prop2"
argument_list|,
literal|"prop3"
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|mkIdx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|mks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// pick mk
name|DocumentMK
name|mk
init|=
name|mks
operator|.
name|get
argument_list|(
name|mkIdx
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// pick property name to update
name|String
name|name
init|=
name|propNames
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|propNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// need to sync?
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|changes
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|c
init|=
name|changes
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|syncMKs
argument_list|(
name|mks
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// read current value
name|NodeDocument
name|doc
init|=
name|ds
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Revision
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Revision
name|lastRev
init|=
name|ns
operator|.
name|getPendingModifications
argument_list|()
operator|.
name|get
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|n
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|,
name|head
argument_list|,
name|lastRev
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|n
operator|.
name|getPropertyAsString
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// set or increment
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"^\""
operator|+
name|name
operator|+
literal|"\":"
operator|+
name|value
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|changes
operator|.
name|get
argument_list|(
name|mkIdx
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DocumentMK
name|mk
range|:
name|mks
control|)
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitRootInPrevious
parameter_list|()
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"node\":{}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"foo\":{}+\"bar\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"^\"foo/prop\":0^\"bar/prop\":0"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|String
name|rev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test/foo"
argument_list|,
literal|"^\"prop\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|doc
operator|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DocumentNodeState
name|node
init|=
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitDocNoChild
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"node\":{}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"foo\":{}+\"bar\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/test/foo"
argument_list|,
literal|"^\"prop\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|prevDocs
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prevDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|DEFAULT_NO_CHILD
argument_list|,
name|prevDocs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitPropAndCommitOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|//Commit on a node which has a child and where the commit root
comment|// is parent
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|b1
operator|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ns
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|prevDocs
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prevDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|PROP_COMMIT_ONLY
argument_list|,
name|prevDocs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cascadingSplit
parameter_list|()
block|{
name|cascadingSplit
argument_list|(
literal|"/test/node"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cascadingSplitLongPath
parameter_list|()
block|{
name|String
name|p
init|=
literal|"/"
decl_stmt|;
while|while
condition|(
operator|!
name|Utils
operator|.
name|isLongPath
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|p
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
literal|"long-path-element"
argument_list|)
expr_stmt|;
block|}
name|cascadingSplit
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cascadingSplit
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// use a store without sync delay
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mk
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
literal|null
decl_stmt|;
name|String
name|p
init|=
literal|"/"
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
name|p
argument_list|,
literal|"+\""
operator|+
name|name
operator|+
literal|"\":{}"
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|p
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|PREV_SPLIT_FACTOR
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|doc
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
condition|;
name|j
operator|++
control|)
block|{
name|int
name|value
init|=
operator|(
name|i
operator|*
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
operator|+
name|j
operator|)
decl_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
name|path
argument_list|,
literal|"^\"prop\":"
operator|+
name|value
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|revs
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|doc
operator|.
name|getPreviousRanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|prevDocs
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
comment|//1 intermediate and 11 previous doc
name|assertEquals
argument_list|(
literal|1
operator|+
literal|11
argument_list|,
name|prevDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|any
argument_list|(
name|prevDocs
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getSplitDocType
argument_list|()
operator|==
name|SplitDocType
operator|.
name|INTERMEDIATE
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|revs
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|prev
init|=
name|doc
operator|.
name|getPreviousDocs
argument_list|(
literal|"prop"
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|prev
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeDocument
name|d
range|:
name|prev
control|)
block|{
name|assertTrue
argument_list|(
name|d
operator|.
name|containsRevision
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numPrev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDocument
name|prev
range|:
name|doc
operator|.
name|getPreviousDocs
argument_list|(
literal|"prop"
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|numPrev
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|prev
operator|.
name|getValueMap
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numPrev
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
literal|null
decl_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"prop"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|ns
operator|.
name|isRevisionNewer
argument_list|(
name|previous
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|numValues
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|valueMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|revs
operator|.
name|size
argument_list|()
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|revs
operator|.
name|size
argument_list|()
argument_list|,
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mainPath
parameter_list|()
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r1-0-1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"/test"
block|,
literal|"/test/path"
block|}
control|)
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|path
argument_list|,
name|r
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|NodeDocument
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|doc
operator|.
name|getMainPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|syncMKs
parameter_list|(
name|List
argument_list|<
name|DocumentMK
argument_list|>
name|mks
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|mks
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|!=
name|i
condition|)
block|{
name|mks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

