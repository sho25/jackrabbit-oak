begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositePatternTest
block|{
specifier|private
specifier|final
name|RestrictionPattern
name|alwaysMatching
init|=
name|CompositePattern
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|,
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RestrictionPattern
name|neverMatching
init|=
name|CompositePattern
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|,
name|TestRestrictionPatter
operator|.
name|INSTANCE_FALSE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromEmptyList
parameter_list|()
block|{
name|RestrictionPattern
name|rp
init|=
name|CompositePattern
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
expr|<
name|RestrictionPattern
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromSingletonList
parameter_list|()
block|{
name|RestrictionPattern
name|rp
init|=
name|CompositePattern
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromList
parameter_list|()
block|{
name|RestrictionPattern
name|rp
init|=
name|CompositePattern
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TestRestrictionPatter
operator|.
name|INSTANCE_TRUE
argument_list|,
name|TestRestrictionPatter
operator|.
name|INSTANCE_FALSE
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|CompositePattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatches
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|alwaysMatching
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|neverMatching
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesPath
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b/c"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertTrue
argument_list|(
name|alwaysMatching
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|neverMatching
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesTree
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|alwaysMatching
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|neverMatching
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesTreeProperty
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|alwaysMatching
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|neverMatching
operator|.
name|matches
argument_list|(
name|tree
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestRestrictionPatter
implements|implements
name|RestrictionPattern
block|{
specifier|private
specifier|static
name|RestrictionPattern
name|INSTANCE_TRUE
init|=
operator|new
name|TestRestrictionPatter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RestrictionPattern
name|INSTANCE_FALSE
init|=
operator|new
name|TestRestrictionPatter
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|matches
decl_stmt|;
specifier|private
name|TestRestrictionPatter
parameter_list|(
name|boolean
name|matches
parameter_list|)
block|{
name|this
operator|.
name|matches
operator|=
name|matches
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|matches
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
return|return
name|matches
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|matches
return|;
block|}
block|}
block|}
end_class

end_unit

