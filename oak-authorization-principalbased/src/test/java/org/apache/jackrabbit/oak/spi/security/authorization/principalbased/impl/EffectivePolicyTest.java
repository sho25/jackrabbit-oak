begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EffectivePolicyTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|PrincipalBasedAccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|Principal
name|validPrincipal
decl_stmt|;
specifier|private
name|Principal
name|validPrincipal2
decl_stmt|;
specifier|private
name|String
name|jcrEffectivePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|testBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|jcrEffectivePath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|validPrincipal2
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
literal|"anotherValidPrincipal"
argument_list|,
name|INTERMEDIATE_PATH
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|validPrincipal
operator|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
comment|// create 2 entries for 'validPrincipal'
comment|// - jcrEffectivePath : read, write
comment|// - null : namespaceMgt
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|validPrincipal
argument_list|,
name|jcrEffectivePath
argument_list|,
name|JCR_READ
argument_list|,
name|REP_WRITE
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
literal|null
argument_list|,
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
expr_stmt|;
comment|// create 2 entries for 'validPrincipal2'
comment|// - jcrEffectivePath : read
comment|// - root : lifecycleMgt
name|policy
operator|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|validPrincipal2
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
literal|"/*/glob"
argument_list|)
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|jcrEffectivePath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|restrictions
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ntJcrName
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|JcrConstants
operator|.
name|NT_RESOURCE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|REP_NT_NAMES
argument_list|)
argument_list|,
operator|new
name|Value
index|[]
block|{
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|ntJcrName
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|mvRestrictions
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|effective
index|[
literal|0
index|]
operator|instanceof
name|ImmutablePrincipalPolicy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
operator|(
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|effective
index|[
literal|0
index|]
operator|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrincipalAccessControlList
operator|.
name|Entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validPrincipal
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|REP_WRITE
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jcrEffectivePath
argument_list|,
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyByPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|validPrincipal2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|effective
index|[
literal|0
index|]
operator|instanceof
name|ImmutablePrincipalPolicy
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
operator|(
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|effective
index|[
literal|0
index|]
operator|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrincipalAccessControlList
operator|.
name|Entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validPrincipal2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jcrEffectivePath
argument_list|,
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validPrincipal2
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlPolicy
name|policy
range|:
name|effective
control|)
block|{
name|assertTrue
argument_list|(
name|policy
operator|instanceof
name|ImmutablePrincipalPolicy
argument_list|)
expr_stmt|;
name|ImmutablePrincipalPolicy
name|effectivePolicy
init|=
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|policy
decl_stmt|;
comment|// filter expected entries: only entries that take effect at the target path should be taken into consideration
name|ImmutablePrincipalPolicy
name|byPrincipal
init|=
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|effectivePolicy
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|Set
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|byPrincipal
operator|.
name|getEntries
argument_list|()
argument_list|,
name|entry
lambda|->
block|{
name|String
name|effectivePath
init|=
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entry
operator|)
operator|.
name|getEffectivePath
argument_list|()
decl_stmt|;
return|return
name|effectivePath
operator|!=
literal|null
operator|&&
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|effectivePath
argument_list|,
name|path
argument_list|)
return|;
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|effectivePolicy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|effectivePolicy
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|JackrabbitAccessControlEntry
name|entry
range|:
name|expected
control|)
block|{
name|assertTrue
argument_list|(
name|entries
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyByPathVerifiesPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalManager
name|principalMgr
init|=
name|mock
argument_list|(
name|PrincipalManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|principalMgr
operator|.
name|getPrincipal
argument_list|(
name|validPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|principalMgr
operator|.
name|getPrincipal
argument_list|(
name|validPrincipal2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|validPrincipal2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MgrProvider
name|provider
init|=
name|mock
argument_list|(
name|MgrProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|provider
operator|.
name|getPrincipalManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalMgr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|provider
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|provider
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|provider
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalBasedAccessControlManager
name|acm
init|=
operator|new
name|PrincipalBasedAccessControlManager
argument_list|(
name|provider
argument_list|,
name|getFilterProvider
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acm
operator|.
name|getEffectivePolicies
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|TEST_OAK_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyByNullPath
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|effective
index|[
literal|0
index|]
operator|instanceof
name|ImmutablePrincipalPolicy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validPrincipal
argument_list|,
operator|(
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|effective
index|[
literal|0
index|]
operator|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
operator|(
operator|(
name|ImmutablePrincipalPolicy
operator|)
name|effective
index|[
literal|0
index|]
operator|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrincipalAccessControlList
operator|.
name|Entry
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|PrincipalAccessControlList
operator|.
name|Entry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|validPrincipal
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

