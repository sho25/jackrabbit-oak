begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|blob
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link CommandExecutor} interface.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultCommandExecutor
implements|implements
name|CommandExecutor
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
name|Command
argument_list|<
name|T
argument_list|>
name|command
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|executeCommand
argument_list|(
name|command
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|executeCommand
parameter_list|(
name|Command
argument_list|<
name|T
argument_list|>
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|T
name|result
init|=
literal|null
decl_stmt|;
name|int
name|numOfRetries
init|=
name|command
operator|.
name|getNumOfRetries
argument_list|()
decl_stmt|;
name|int
name|currentRetry
init|=
literal|0
decl_stmt|;
name|boolean
name|needsRetry
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|currentRetry
operator|<=
name|numOfRetries
operator|)
operator|&&
name|needsRetry
condition|)
block|{
try|try
block|{
name|result
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|needsRetry
operator|=
name|command
operator|.
name|needsRetry
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|needsRetry
operator|=
name|command
operator|.
name|needsRetry
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needsRetry
operator|||
name|currentRetry
operator|>=
name|numOfRetries
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
operator|++
name|currentRetry
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

