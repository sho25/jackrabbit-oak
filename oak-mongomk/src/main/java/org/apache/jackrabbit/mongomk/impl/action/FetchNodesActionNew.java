begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_comment
comment|/**  * An action for fetching nodes.  */
end_comment

begin_class
specifier|public
class|class
name|FetchNodesActionNew
extends|extends
name|BaseAction
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
argument_list|>
block|{
comment|/**      * Trunk commits within this time frame are considered in doubt and are      * checked more thoroughly whether they are valid.      */
specifier|private
specifier|static
specifier|final
name|long
name|IN_DOUBT_TIME_FRAME
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LIMITLESS_DEPTH
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FetchNodesActionNew
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|paths
decl_stmt|;
specifier|private
name|long
name|revisionId
decl_stmt|;
specifier|private
name|String
name|branchId
decl_stmt|;
specifier|private
name|int
name|depth
init|=
name|LIMITLESS_DEPTH
decl_stmt|;
comment|/**      * Maps valid commit revisionId to the baseRevId of the commit.      */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|validCommits
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new {@code FetchNodesAction} to fetch a node and optionally      * its descendants under the specified path.      *      * @param nodeStore Node store.      * @param path The path.      * @param depth The depth.      * @param revisionId The revision id.      */
specifier|public
name|FetchNodesActionNew
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|revisionId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|revisionId
operator|>=
literal|0
argument_list|,
literal|"revisionId must be>= 0"
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code FetchNodesAction} to fetch nodes with the exact      * specified paths.      *      * @param nodeStore Node store.      * @param paths The exact paths to fetch nodes for.      * @param revisionId The revision id.      */
specifier|public
name|FetchNodesActionNew
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|long
name|revisionId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|revisionId
operator|>=
literal|0
argument_list|,
literal|"revisionId must be>= 0"
argument_list|)
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|revisionId
operator|=
name|revisionId
expr_stmt|;
block|}
comment|/**      * Sets the branchId for the query.      *      * @param branchId Branch id.      */
specifier|public
name|void
name|setBranchId
parameter_list|(
name|String
name|branchId
parameter_list|)
block|{
name|this
operator|.
name|branchId
operator|=
name|branchId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|execute
parameter_list|()
block|{
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|// FIXME - Should deal with multiple paths as long as depth = 0
if|if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|depth
operator|==
literal|0
condition|)
block|{
name|String
name|path
init|=
name|paths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|MongoNode
name|node
init|=
name|nodeStore
operator|.
name|getFromCache
argument_list|(
name|path
argument_list|,
name|branchId
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
block|}
name|DBCursor
name|dbCursor
init|=
name|performQuery
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|nodes
init|=
name|getMostRecentValidNodes
argument_list|(
name|dbCursor
argument_list|)
decl_stmt|;
for|for
control|(
name|MongoNode
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeStore
operator|.
name|cache
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
specifier|private
name|DBCursor
name|performQuery
parameter_list|()
block|{
name|QueryBuilder
name|queryBuilder
init|=
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoNode
operator|.
name|KEY_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|in
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|path
init|=
name|paths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|is
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Pattern
name|pattern
init|=
name|createPrefixRegExp
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|regex
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
comment|// FIXME - This needs to be improved to not fetch all revisions of a path.
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|MongoNode
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|lessThanEquals
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|branchId
operator|==
literal|null
condition|)
block|{
name|DBObject
name|query
init|=
operator|new
name|BasicDBObject
argument_list|(
name|MongoNode
operator|.
name|KEY_BRANCH_ID
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"$exists"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not only return nodes in the branch but also nodes in the trunk
comment|// before the branch was created.
name|long
name|headBranchRevisionId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|branchId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|branchId
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DBObject
name|branchQuery
init|=
name|QueryBuilder
operator|.
name|start
argument_list|()
operator|.
name|or
argument_list|(
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoNode
operator|.
name|KEY_BRANCH_ID
argument_list|)
operator|.
name|is
argument_list|(
name|branchId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|QueryBuilder
operator|.
name|start
argument_list|()
operator|.
name|and
argument_list|(
name|QueryBuilder
operator|.
name|start
argument_list|(
name|MongoNode
operator|.
name|KEY_REVISION_ID
argument_list|)
operator|.
name|lessThanEquals
argument_list|(
name|headBranchRevisionId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|MongoNode
operator|.
name|KEY_BRANCH_ID
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"$exists"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|queryBuilder
operator|=
name|queryBuilder
operator|.
name|and
argument_list|(
name|branchQuery
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|orderBy
init|=
operator|new
name|BasicDBObject
argument_list|()
decl_stmt|;
name|orderBy
operator|.
name|put
argument_list|(
name|MongoNode
operator|.
name|KEY_PATH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|orderBy
operator|.
name|put
argument_list|(
name|MongoNode
operator|.
name|KEY_REVISION_ID
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|DBObject
name|query
init|=
name|queryBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing query: {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|getNodeCollection
argument_list|()
operator|.
name|find
argument_list|(
name|query
argument_list|)
operator|.
name|sort
argument_list|(
name|orderBy
argument_list|)
return|;
block|}
specifier|private
name|Pattern
name|createPrefixRegExp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|StringBuilder
name|regex
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|regex
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|regex
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regex
operator|.
name|append
argument_list|(
literal|"(/[^/]*)"
argument_list|)
expr_stmt|;
name|regex
operator|.
name|append
argument_list|(
literal|"{0,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|regex
operator|.
name|append
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
name|regex
operator|.
name|append
argument_list|(
literal|"}$"
argument_list|)
expr_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|getMostRecentValidNodes
parameter_list|(
name|DBCursor
name|dbCursor
parameter_list|)
block|{
name|int
name|numberOfNodesToFetch
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|numberOfNodesToFetch
operator|=
name|paths
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
name|numberOfNodesToFetch
operator|=
literal|1
expr_stmt|;
block|}
comment|// make sure we read from a valid commit
name|MongoCommit
name|commit
init|=
name|fetchCommit
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|validCommits
operator|.
name|put
argument_list|(
name|revisionId
argument_list|,
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Invalid revision: "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MongoNode
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|dbCursor
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|numberOfNodesToFetch
operator|==
operator|-
literal|1
operator|||
name|nodes
operator|.
name|size
argument_list|()
operator|<
name|numberOfNodesToFetch
operator|)
condition|)
block|{
name|MongoNode
name|node
init|=
operator|(
name|MongoNode
operator|)
name|dbCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// Assuming that revision ids are ordered and nodes are fetched in
comment|// sorted order, first check if the path is already in the map.
if|if
condition|(
name|nodes
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converted node @{} with path {} was not put into map"
operator|+
literal|" because a newer version is available"
argument_list|,
name|node
operator|.
name|getRevisionId
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|revisionId
init|=
name|node
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValid
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converted node @{} with path {} was put into map"
argument_list|,
name|revisionId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node will not be converted as it is not part of a valid commit {} ({})"
argument_list|,
name|path
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dbCursor
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|nodes
return|;
block|}
comment|/**      * @param node the node to check.      * @return<code>true</code> if the given node is from a valid commit;      *<code>false</code> otherwise.      */
specifier|private
name|boolean
name|isValid
parameter_list|(
annotation|@
name|Nonnull
name|MongoNode
name|node
parameter_list|)
block|{
name|long
name|revisionId
init|=
name|node
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|validCommits
operator|.
name|containsKey
argument_list|(
name|revisionId
argument_list|)
operator|&&
name|nodeStore
operator|.
name|getFromCache
argument_list|(
name|revisionId
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|branchId
operator|==
literal|null
condition|)
block|{
comment|// check if the given revisionId is a valid trunk commit
return|return
name|isValidTrunkCommit
argument_list|(
name|revisionId
argument_list|)
return|;
block|}
else|else
block|{
comment|// for branch commits we only check the failed flag and
comment|// assume there are no concurrent branch commits
comment|// FIXME: may need to revisit this
name|MongoCommit
name|commit
init|=
name|fetchCommit
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|validCommits
operator|.
name|put
argument_list|(
name|revisionId
argument_list|,
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Checks if the given<code>revisionId</code> is from a valid trunk      * commit.      *      * @param revisionId the commit revision.      * @return whether the revisionId is valid.      */
specifier|private
name|boolean
name|isValidTrunkCommit
parameter_list|(
name|long
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|validCommits
operator|.
name|containsKey
argument_list|(
name|revisionId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// if there is a lower valid revision than revisionId, we
comment|// know it is invalid
if|if
condition|(
operator|!
name|validCommits
operator|.
name|headMap
argument_list|(
name|revisionId
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// at this point we know the validCommits does not go
comment|// back in history far enough to know if the revisionId is valid.
comment|// need to fetch base commit of oldest valid commit
name|long
name|inDoubt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|IN_DOUBT_TIME_FRAME
decl_stmt|;
name|MongoCommit
name|commit
decl_stmt|;
do|do
block|{
comment|// base revision of the oldest known valid commit
name|long
name|baseRev
init|=
name|validCommits
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|commit
operator|=
name|fetchCommit
argument_list|(
name|baseRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|validCommits
operator|.
name|put
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|,
name|commit
operator|.
name|getBaseRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// end of commit history
block|}
if|if
condition|(
name|commit
operator|.
name|getRevisionId
argument_list|()
operator|==
name|revisionId
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|commit
operator|.
name|getRevisionId
argument_list|()
operator|<
name|revisionId
condition|)
block|{
comment|// given revisionId is between two valid revisions -> invalid
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
name|commit
operator|.
name|getTimestamp
argument_list|()
operator|>
name|inDoubt
condition|)
do|;
comment|// revisionId is past in doubt time frame
comment|// perform simple check
return|return
name|fetchCommit
argument_list|(
name|revisionId
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Fetches the commit with the given revisionId.      *      * @param revisionId the revisionId of a commit.      * @return the commit or<code>null</code> if the commit does not exist or      *         is marked as failed.      */
annotation|@
name|CheckForNull
specifier|private
name|MongoCommit
name|fetchCommit
parameter_list|(
name|long
name|revisionId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetching commit @{}"
argument_list|,
name|revisionId
argument_list|)
expr_stmt|;
name|FetchCommitAction
name|action
init|=
operator|new
name|FetchCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|action
operator|.
name|execute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not a valid commit
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

