begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ClusterNodeInfoComparatorTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MACHINE_ID
init|=
literal|"machine"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_1
init|=
literal|"node-1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_2
init|=
literal|"node-2"
decl_stmt|;
specifier|private
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
specifier|private
name|ClusterNodeInfoComparator
name|comparator
init|=
operator|new
name|ClusterNodeInfoComparator
argument_list|(
name|MACHINE_ID
argument_list|,
name|INSTANCE_1
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|lowerClusterIdFirst
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|ClusterNodeInfo
argument_list|>
name|infos
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|1
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|3
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|2
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|4
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idList
argument_list|(
name|infos
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lowerClusterIdFirstNonMatchingEnvironment
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|ClusterNodeInfo
argument_list|>
name|infos
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|1
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|3
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|2
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|4
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idList
argument_list|(
name|infos
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingEnvironmentFirst
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|ClusterNodeInfo
argument_list|>
name|infos
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|1
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|2
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|3
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|4
argument_list|,
name|INSTANCE_1
argument_list|)
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|newClusterNodeInfo
argument_list|(
literal|5
argument_list|,
name|INSTANCE_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idList
argument_list|(
name|infos
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|idList
parameter_list|(
name|Set
argument_list|<
name|ClusterNodeInfo
argument_list|>
name|infos
parameter_list|)
block|{
return|return
name|infos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ClusterNodeInfo
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ClusterNodeInfo
name|newClusterNodeInfo
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|instanceId
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|ClusterNodeInfo
argument_list|>
name|ctr
init|=
name|ClusterNodeInfo
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|DocumentStore
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctr
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|ctr
operator|.
name|newInstance
argument_list|(
name|id
argument_list|,
name|store
argument_list|,
name|MACHINE_ID
argument_list|,
name|instanceId
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

