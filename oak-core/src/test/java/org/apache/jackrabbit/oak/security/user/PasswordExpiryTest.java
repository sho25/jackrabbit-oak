begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|CredentialExpiredException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * @see<a href="https://issues.apache.org/jira/browse/OAK-1922">OAK-1922</a>  */
end_comment

begin_class
specifier|public
class|class
name|PasswordExpiryTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|String
name|userId
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userId
operator|=
name|getTestUser
argument_list|()
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
name|ConfigurationParameters
name|userConfig
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_PASSWORD_MAX_AGE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|userConfig
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newUserId
init|=
literal|"newuser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|User
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createUser
argument_list|(
name|newUserId
argument_list|,
name|newUserId
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|pwdTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pwdTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|pwdTree
argument_list|,
name|UserConstants
operator|.
name|NT_REP_PASSWORD
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ReadOnlyNodeTypeManager
name|ntMgr
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ntMgr
operator|.
name|getDefinition
argument_list|(
name|pwdTree
operator|.
name|getParent
argument_list|()
argument_list|,
name|pwdTree
argument_list|)
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
name|pwdTree
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// protected properties must not be exposed by User#hasProperty
name|assertFalse
argument_list|(
name|user
operator|.
name|hasProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
operator|+
literal|"/"
operator|+
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangePassword
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|PropertyState
name|p1
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
decl_stmt|;
name|long
name|oldModTime
init|=
name|p1
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|oldModTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|waitForSystemTimeIncrement
argument_list|(
name|oldModTime
argument_list|)
expr_stmt|;
name|user
operator|.
name|changePassword
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PropertyState
name|p2
init|=
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
decl_stmt|;
name|long
name|newModTime
init|=
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newModTime
operator|>
name|oldModTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticatePasswordExpiredNewUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|a
init|=
operator|new
name|UserAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// during user creation pw last modified is set, thus it shouldn't expire
name|a
operator|.
name|authenticate
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticatePasswordExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|a
init|=
operator|new
name|UserAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// set password last modified to beginning of epoch
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|a
operator|.
name|authenticate
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Credentials should be expired"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CredentialExpiredException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticateBeforePasswordExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|a
init|=
operator|new
name|UserAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// set password last modified to beginning of epoch
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|a
operator|.
name|authenticate
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
literal|"wrong"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CredentialExpiredException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Login should fail before expiry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
comment|// success - userId/pw mismatch takes precedence over expiry
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthenticatePasswordExpiredChangePassword
parameter_list|()
throws|throws
name|Exception
block|{
name|Authentication
name|a
init|=
operator|new
name|UserAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
decl_stmt|;
comment|// set password last modified to beginning of epoch
name|root
operator|.
name|getTree
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getChild
argument_list|(
name|UserConstants
operator|.
name|REP_PWD
argument_list|)
operator|.
name|setProperty
argument_list|(
name|UserConstants
operator|.
name|REP_PASSWORD_LAST_MODIFIED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// changing the password should reset the pw last mod and the pw no longer be expired
name|getTestUser
argument_list|()
operator|.
name|changePassword
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|authenticate
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

