begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Tests the query engine using the default index implementation: the  * {@link TraversingIndex}  */
end_comment

begin_class
specifier|public
class|class
name|TraversingIndexQueryTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql1
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql1.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullTextTerm
parameter_list|()
throws|throws
name|Exception
block|{
comment|//OAK-1024 allow '/' in a full-text query
name|Tree
name|node
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'text/plain')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullTextTermName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"testFullTextTermNameSimple"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"testFullTextTermNameFile.txt"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'testFullTextTermNameSimple')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/testFullTextTermNameSimple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'testFullTextTermNameFile.txt')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/testFullTextTermNameFile.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"value"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[@prop != 'value']"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|,
literal|"/content/three"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAndEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop = 'aaa' and @prop = 'bbb' and @prop = 'ccc')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAndLike
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaaBoom"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|,
literal|"cccBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(jcr:like(@prop, 'aaa%') and jcr:like(@prop, 'bbb%') and jcr:like(@prop, 'ccc%'))]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubPropertyMultiAndEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(child/@prop = 'aaa' and child/@prop = 'bbb' and child/@prop = 'ccc')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubPropertyMultiAndLike
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaaBoom"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|,
literal|"cccBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(jcr:like(child/@prop, 'aaa%') and jcr:like(child/@prop, 'bbb%') and jcr:like(child/@prop, 'ccc%'))]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

