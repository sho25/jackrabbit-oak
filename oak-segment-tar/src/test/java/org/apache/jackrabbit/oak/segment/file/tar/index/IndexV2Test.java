begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|IndexV2Test
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetUUIDs
parameter_list|()
throws|throws
name|Exception
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|2
operator|*
name|IndexEntryV2
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|2
argument_list|)
operator|.
name|putInt
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
operator|.
name|putInt
argument_list|(
literal|6
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|putLong
argument_list|(
literal|7
argument_list|)
operator|.
name|putLong
argument_list|(
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
literal|9
argument_list|)
operator|.
name|putInt
argument_list|(
literal|10
argument_list|)
operator|.
name|putInt
argument_list|(
literal|11
argument_list|)
operator|.
name|putInt
argument_list|(
literal|12
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|IndexV2
argument_list|(
name|buffer
argument_list|)
operator|.
name|getUUIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|4
operator|*
name|IndexEntryV2
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|putLong
argument_list|(
literal|3
argument_list|)
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|putLong
argument_list|(
literal|3
argument_list|)
operator|.
name|putLong
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|IndexV2
name|index
init|=
operator|new
name|IndexV2
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|index
operator|.
name|findEntry
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
name|IndexEntryV2
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|2
argument_list|)
operator|.
name|putInt
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
operator|.
name|putInt
argument_list|(
literal|6
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexEntryV2
operator|.
name|SIZE
operator|+
name|IndexV2
operator|.
name|FOOTER_SIZE
argument_list|,
operator|new
name|IndexV2
argument_list|(
name|buffer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|2
operator|*
name|IndexEntryV2
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|2
argument_list|)
operator|.
name|putInt
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
operator|.
name|putInt
argument_list|(
literal|6
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|putLong
argument_list|(
literal|7
argument_list|)
operator|.
name|putLong
argument_list|(
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
literal|9
argument_list|)
operator|.
name|putInt
argument_list|(
literal|10
argument_list|)
operator|.
name|putInt
argument_list|(
literal|11
argument_list|)
operator|.
name|putInt
argument_list|(
literal|12
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|new
name|IndexV2
argument_list|(
name|buffer
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
name|IndexEntryV2
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|duplicate
argument_list|()
operator|.
name|putLong
argument_list|(
literal|1
argument_list|)
operator|.
name|putLong
argument_list|(
literal|2
argument_list|)
operator|.
name|putInt
argument_list|(
literal|3
argument_list|)
operator|.
name|putInt
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
operator|.
name|putInt
argument_list|(
literal|6
argument_list|)
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|IndexEntryV2
name|entry
init|=
operator|new
name|IndexV2
argument_list|(
name|buffer
argument_list|)
operator|.
name|entry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getMsb
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entry
operator|.
name|getLsb
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entry
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|entry
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|entry
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|entry
operator|.
name|getFullGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|entry
operator|.
name|isCompacted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

