begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ReadWithGlobRestrictionTest
extends|extends
name|AbstractEvaluationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|jcrPrimaryType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|readPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
expr_stmt|;
name|String
name|propPath
init|=
name|path
operator|+
literal|'/'
operator|+
name|jcrPrimaryType
decl_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propPath
argument_list|)
argument_list|)
expr_stmt|;
name|propPath
operator|=
name|childNPath
operator|+
literal|'/'
operator|+
name|jcrPrimaryType
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|propPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|group2
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group2_"
argument_list|)
argument_list|)
decl_stmt|;
name|Group
name|group3
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group3_"
argument_list|)
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlManager
operator|)
name|acMgr
operator|)
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|,
name|readPrivs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlManager
operator|)
name|acMgr
operator|)
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|principals
argument_list|,
name|readPrivs
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|group2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|group3
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|group2
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group2_"
argument_list|)
argument_list|)
decl_stmt|;
name|Group
name|group3
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group3_"
argument_list|)
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivs
argument_list|,
literal|true
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|getTestGroup
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlManager
operator|)
name|acMgr
operator|)
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|principals
argument_list|,
name|readPrivs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlManager
operator|)
name|acMgr
operator|)
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|principals
argument_list|,
name|readPrivs
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|group2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|group3
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction4
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|a
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/anotherpath"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|aPath
init|=
name|a
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|aPath
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|aPath
argument_list|)
decl_stmt|;
name|Node
name|test
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|hasNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|test
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|isSame
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction5
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|a
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/anotherpath"
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|,
name|repWritePrivileges
argument_list|)
expr_stmt|;
name|String
name|aPath
init|=
name|a
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|aPath
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|aPath
argument_list|)
decl_stmt|;
name|Node
name|test
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|hasNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|test
operator|.
name|getNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|isSame
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction6
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPrivs
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|readPrivs
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivs
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|path
operator|+
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childPPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-2412">OAK-2412</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyGlobRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|grandchild
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|String
name|ccPath
init|=
name|grandchild
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// first deny access to 'path' (read-access is granted in the test setup)
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|ccPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childchildPPath
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|childNPath
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|ccPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childchildPPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childNPath
operator|+
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|ccPath
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|ccPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|ccPath
operator|+
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-2412">OAK-2412</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyGlobRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|grandchild
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|String
name|ccPath
init|=
name|grandchild
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// first deny access to 'path' (read-access is granted in the test setup)
name|deny
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|ccPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childchildPPath
argument_list|)
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|readPrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|ccPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childchildPPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|propertyExists
argument_list|(
name|childNPath
operator|+
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-2412">OAK-2412</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyGlobRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|group1
init|=
name|getTestGroup
argument_list|()
decl_stmt|;
name|Group
name|group2
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group2_"
argument_list|)
argument_list|)
decl_stmt|;
name|group2
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|Group
name|group3
init|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
operator|.
name|createGroup
argument_list|(
name|generateId
argument_list|(
literal|"group3_"
argument_list|)
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|group1
operator|.
name|isDeclaredMember
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group2
operator|.
name|isDeclaredMember
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group3
operator|.
name|isDeclaredMember
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|path
argument_list|,
name|group1
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|group1
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|,
literal|true
argument_list|,
name|createGlobRestriction
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|childNPath
argument_list|,
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|childNPath
argument_list|,
name|group2
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|,
literal|true
argument_list|,
name|createGlobRestriction
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|childNPath2
argument_list|,
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|childNPath2
argument_list|,
name|group3
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readPrivileges
argument_list|,
literal|true
argument_list|,
name|createGlobRestriction
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// need to recreate testUser session to force subject being populated
comment|// with membership that has been added _after_ the testSession creation.
name|Session
name|userSession
init|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|userSession
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|userSession
argument_list|,
name|childNPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|userSession
argument_list|,
name|childNPath2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|group2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|group3
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoWildCards
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
decl_stmt|;
name|Node
name|n100
init|=
name|n
operator|.
name|addNode
argument_list|(
literal|"100"
argument_list|)
decl_stmt|;
name|Node
name|n110
init|=
name|n100
operator|.
name|addNode
argument_list|(
literal|"110"
argument_list|)
decl_stmt|;
name|Node
name|n120
init|=
name|n100
operator|.
name|addNode
argument_list|(
literal|"120"
argument_list|)
decl_stmt|;
name|Node
name|n111
init|=
name|n110
operator|.
name|addNode
argument_list|(
literal|"111"
argument_list|)
decl_stmt|;
name|Node
name|n112
init|=
name|n110
operator|.
name|addNode
argument_list|(
literal|"112"
argument_list|)
decl_stmt|;
name|Node
name|n121
init|=
name|n120
operator|.
name|addNode
argument_list|(
literal|"121"
argument_list|)
decl_stmt|;
name|Node
name|n122
init|=
name|n120
operator|.
name|addNode
argument_list|(
literal|"122"
argument_list|)
decl_stmt|;
name|deny
argument_list|(
name|childNPath
argument_list|,
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*/110/*"
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n100
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n110
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n111
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n112
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n120
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n121
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canReadNode
argument_list|(
name|testSession
argument_list|,
name|n122
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

