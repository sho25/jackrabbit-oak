begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|models
operator|.
name|simplifiedroles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|ReadOnly
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_class
class|class
name|ThreeRolesPermissionProvider
implements|implements
name|AggregatedPermissionProvider
implements|,
name|ThreeRolesConstants
block|{
specifier|private
specifier|static
specifier|final
name|PrivilegeBits
name|SUPPORTED_PRIVBITS
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|principalNames
decl_stmt|;
specifier|private
specifier|final
name|String
name|supportedPath
decl_stmt|;
specifier|private
specifier|final
name|Context
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|RootProvider
name|rootProvider
decl_stmt|;
specifier|private
name|Root
name|readOnlyRoot
decl_stmt|;
name|ThreeRolesPermissionProvider
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|Nonnull
name|String
name|supportedPath
parameter_list|,
annotation|@
name|Nonnull
name|Context
name|ctx
parameter_list|,
annotation|@
name|Nonnull
name|RootProvider
name|rootProvider
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|principalNames
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|principals
argument_list|,
operator|(
name|Function
argument_list|<
name|Principal
argument_list|,
name|String
argument_list|>
operator|)
name|Principal
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|supportedPath
operator|=
name|supportedPath
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|rootProvider
operator|=
name|rootProvider
expr_stmt|;
name|this
operator|.
name|readOnlyRoot
operator|=
name|rootProvider
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|PrivilegeBits
name|supportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|PrivilegeBits
name|pb
decl_stmt|;
if|if
condition|(
name|privilegeBits
operator|==
literal|null
condition|)
block|{
name|pb
operator|=
name|SUPPORTED_PRIVBITS
expr_stmt|;
block|}
else|else
block|{
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|privilegeBits
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|SUPPORTED_PRIVBITS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pb
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
name|pb
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
comment|// repository level permissions are not supported
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
name|long
name|supported
init|=
name|permissions
operator|&
name|SUPPORTED_PERMISSIONS
decl_stmt|;
if|if
condition|(
name|supported
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
operator|&&
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|supported
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
name|long
name|supported
init|=
name|permissions
operator|&
name|SUPPORTED_PERMISSIONS
decl_stmt|;
if|if
condition|(
name|supported
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
operator|&&
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|supported
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nonnull
name|TreePermission
name|treePermission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
name|long
name|supported
init|=
name|permissions
operator|&
name|SUPPORTED_PERMISSIONS
decl_stmt|;
if|if
condition|(
name|supported
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
operator|&&
operator|(
name|treePermission
operator|instanceof
name|ThreeRolesTreePermission
operator|)
condition|)
block|{
return|return
name|supported
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|location
operator|.
name|getProperty
argument_list|()
decl_stmt|;
return|return
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tp
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
else|:
name|tp
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|,
name|property
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreeType
name|type
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
comment|// EXERCISE : currently this implementation ignores TreeType -> complete implementation
return|return
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|parentPermission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|this
operator|.
name|readOnlyRoot
operator|=
name|rootProvider
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|instanceof
name|ThreeRolesTreePermission
condition|)
block|{
return|return
operator|(
operator|(
name|ThreeRolesTreePermission
operator|)
name|tp
operator|)
operator|.
name|getRole
argument_list|()
operator|.
name|getPrivilegeNames
argument_list|()
return|;
block|}
block|}
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
return|return
name|getPrivileges
argument_list|(
name|tree
argument_list|)
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
return|return
name|RepositoryPermission
operator|.
name|EMPTY
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
if|if
condition|(
name|parentPermission
operator|instanceof
name|ThreeRolesTreePermission
condition|)
block|{
comment|// nested policies are not supported => within a given tree defined
comment|// by a ThreeRolePolicy all items share the same permission setup.
return|return
name|parentPermission
return|;
block|}
name|String
name|path
init|=
name|tree
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|Tree
name|t
init|=
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|hasChild
argument_list|(
name|REP_3_ROLES_POLICY
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThreeRolesTreePermission
argument_list|(
name|getRole
argument_list|(
name|t
argument_list|)
argument_list|,
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TreePermission
operator|.
name|EMPTY
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isAncestor
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|TreePermission
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
name|TreePermission
operator|.
name|NO_RECOURSE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|tree
argument_list|)
decl_stmt|;
return|return
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tp
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
else|:
name|tp
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|,
name|property
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|jcrActions
parameter_list|)
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|readOnlyRoot
argument_list|,
name|oakPath
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|tl
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|tl
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|isGranted
argument_list|(
name|tl
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|boolean
name|isAncestor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
return|return
name|Text
operator|.
name|isDescendant
argument_list|(
name|path
argument_list|,
name|supportedPath
argument_list|)
return|;
block|}
specifier|private
name|Role
name|getRole
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
name|Tree
name|policy
init|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_3_ROLES_POLICY
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|containsAny
argument_list|(
name|policy
argument_list|,
name|REP_OWNERS
argument_list|)
condition|)
block|{
return|return
name|Role
operator|.
name|OWNER
return|;
block|}
elseif|else
if|if
condition|(
name|containsAny
argument_list|(
name|policy
argument_list|,
name|REP_EDITORS
argument_list|)
condition|)
block|{
return|return
name|Role
operator|.
name|EDITOR
return|;
block|}
elseif|else
if|if
condition|(
name|containsAny
argument_list|(
name|policy
argument_list|,
name|REP_READERS
argument_list|)
condition|)
block|{
return|return
name|Role
operator|.
name|READER
return|;
block|}
block|}
return|return
name|Role
operator|.
name|NONE
return|;
block|}
specifier|private
name|boolean
name|containsAny
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|policyTree
parameter_list|,
annotation|@
name|Nonnull
name|String
name|propName
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|policyTree
argument_list|,
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|principalName
range|:
name|names
control|)
block|{
if|if
condition|(
name|principalNames
operator|.
name|contains
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Tree
name|getReadOnlyTree
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|instanceof
name|ReadOnly
condition|)
block|{
return|return
name|tree
return|;
block|}
else|else
block|{
return|return
name|readOnlyRoot
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|readOnlyTree
parameter_list|)
block|{
name|Tree
name|t
init|=
name|readOnlyTree
decl_stmt|;
while|while
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|hasChild
argument_list|(
name|REP_3_ROLES_POLICY
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThreeRolesTreePermission
argument_list|(
name|getRole
argument_list|(
name|t
argument_list|)
argument_list|,
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
name|t
operator|=
name|t
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|TreePermission
operator|.
name|EMPTY
return|;
block|}
specifier|private
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|)
block|{
name|TreeLocation
name|l
init|=
name|location
decl_stmt|;
while|while
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|l
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|Tree
name|tree
init|=
name|location
operator|.
name|getTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|tree
operator|!=
literal|null
condition|)
block|{
return|return
name|getTreePermission
argument_list|(
name|getReadOnlyTree
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
name|l
operator|=
name|l
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|TreePermission
operator|.
name|EMPTY
return|;
block|}
block|}
end_class

end_unit

