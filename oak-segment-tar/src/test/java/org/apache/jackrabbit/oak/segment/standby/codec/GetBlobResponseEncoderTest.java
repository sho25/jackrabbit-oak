begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|StandbyTestUtils
operator|.
name|hash
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|GetBlobResponseEncoderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|encodeResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|blobData
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|String
name|blobId
init|=
literal|"blobId"
decl_stmt|;
name|byte
index|[]
name|blobIdBytes
init|=
name|blobId
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|GetBlobResponseEncoder
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|writeOutbound
argument_list|(
operator|new
name|GetBlobResponse
argument_list|(
literal|"clientId"
argument_list|,
name|blobId
argument_list|,
name|blobData
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuf
name|buffer
init|=
operator|(
name|ByteBuf
operator|)
name|channel
operator|.
name|readOutbound
argument_list|()
decl_stmt|;
name|ByteBuf
name|expected
init|=
name|Unpooled
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|expected
operator|.
name|writeInt
argument_list|(
literal|1
operator|+
literal|4
operator|+
name|blobIdBytes
operator|.
name|length
operator|+
literal|8
operator|+
name|blobData
operator|.
name|length
argument_list|)
expr_stmt|;
name|expected
operator|.
name|writeByte
argument_list|(
name|Messages
operator|.
name|HEADER_BLOB
argument_list|)
expr_stmt|;
name|expected
operator|.
name|writeInt
argument_list|(
name|blobIdBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|expected
operator|.
name|writeBytes
argument_list|(
name|blobIdBytes
argument_list|)
expr_stmt|;
name|expected
operator|.
name|writeLong
argument_list|(
name|hash
argument_list|(
name|blobData
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|writeBytes
argument_list|(
name|blobData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

