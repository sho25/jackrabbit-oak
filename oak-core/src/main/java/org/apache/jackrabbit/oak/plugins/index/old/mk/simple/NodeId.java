begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_comment
comment|/**  * A node id.  */
end_comment

begin_class
specifier|public
class|class
name|NodeId
block|{
specifier|public
specifier|static
specifier|final
name|NodeId
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|NodeId
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|final
name|long
name|x
decl_stmt|;
specifier|private
name|byte
index|[]
name|hash
decl_stmt|;
specifier|protected
name|NodeId
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
block|}
specifier|public
specifier|static
name|NodeId
name|get
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|x
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeId
name|getInline
parameter_list|(
name|NodeImpl
name|n
parameter_list|)
block|{
return|return
operator|new
name|NodeIdInline
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|NodeMap
name|map
parameter_list|)
block|{
return|return
name|map
operator|.
name|getNode
argument_list|(
name|x
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|x
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|x
return|;
block|}
specifier|public
name|boolean
name|isInline
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|byte
index|[]
name|getHash
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
specifier|public
name|void
name|setHash
parameter_list|(
name|byte
index|[]
name|hash
parameter_list|)
block|{
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
comment|/**      * An node id of an inline node (a node that is stored within the parent).      */
specifier|private
specifier|static
class|class
name|NodeIdInline
extends|extends
name|NodeId
block|{
specifier|private
specifier|final
name|NodeImpl
name|node
decl_stmt|;
specifier|protected
name|NodeIdInline
parameter_list|(
name|NodeImpl
name|node
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|NodeMap
name|map
parameter_list|)
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|node
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInline
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

