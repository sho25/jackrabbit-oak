begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Tests the query engine using the default index implementation: the  * {@link TraversingIndex}  */
end_comment

begin_class
specifier|public
class|class
name|TraversingIndexQueryTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql1
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql1.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sql2
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"sql2.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-2050"
argument_list|)
specifier|public
name|void
name|testFullTextTerm
parameter_list|()
throws|throws
name|Exception
block|{
comment|//OAK-1024 allow '/' in a full-text query
name|Tree
name|node
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'text/plain')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-2050"
argument_list|)
specifier|public
name|void
name|testFullTextTermName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"testFullTextTermNameSimple"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"testFullTextTermNameFile.txt"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'testFullTextTermNameSimple')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/testFullTextTermNameSimple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:contains(., 'testFullTextTermNameFile.txt')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/testFullTextTermNameFile.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"value"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[@prop != 'value']"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|,
literal|"/content/three"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAndEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop = 'aaa' and @prop = 'bbb' and @prop = 'ccc')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAndLike
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaaBoom"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|,
literal|"cccBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(jcr:like(@prop, 'aaa%') and jcr:like(@prop, 'bbb%') and jcr:like(@prop, 'ccc%'))]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubPropertyMultiAndEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaa"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(child/@prop = 'aaa' and child/@prop = 'bbb' and child/@prop = 'ccc')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubPropertyMultiAndLike
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|c
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"one"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"aaaBoom"
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"two"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|,
literal|"cccBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|c
operator|.
name|addChild
argument_list|(
literal|"three"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"aaaBoom"
argument_list|,
literal|"bbbBoom"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(jcr:like(child/@prop, 'aaa%') and jcr:like(child/@prop, 'bbb%') and jcr:like(child/@prop, 'ccc%'))]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOak1301
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t1
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"home"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"users"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testing"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"socialgraph_test_user_4"
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"rep:User"
argument_list|)
expr_stmt|;
name|t1
operator|.
name|setProperty
argument_list|(
literal|"rep:authorizableId"
argument_list|,
literal|"socialgraph_test_user_4"
argument_list|)
expr_stmt|;
name|Tree
name|s
init|=
name|t1
operator|.
name|addChild
argument_list|(
literal|"social"
argument_list|)
decl_stmt|;
name|s
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"sling:Folder"
argument_list|)
expr_stmt|;
name|Tree
name|r
init|=
name|s
operator|.
name|addChild
argument_list|(
literal|"relationships"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"sling:Folder"
argument_list|)
expr_stmt|;
name|Tree
name|f
init|=
name|r
operator|.
name|addChild
argument_list|(
literal|"friend"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"sling:Folder"
argument_list|)
expr_stmt|;
name|Tree
name|sg
init|=
name|f
operator|.
name|addChild
argument_list|(
literal|"socialgraph_test_group"
argument_list|)
decl_stmt|;
name|sg
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setProperty
argument_list|(
literal|"id"
argument_list|,
literal|"socialgraph_test_group"
argument_list|)
expr_stmt|;
name|Tree
name|t2
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"home"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"groups"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"testing"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"socialgraph_test_group"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// select [jcr:path], [jcr:score], * from [nt:base] as a where [id/*] =
comment|// 'socialgraph_test_group' and isdescendantnode(a, '/home') /* xpath:
comment|// /jcr:root/home//*[id='socialgraph_test_group'] */
name|assertQuery
argument_list|(
literal|"/jcr:root/home//*[@id='socialgraph_test_group']"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/home/users/testing/socialgraph_test_user_4/social/relationships/friend/socialgraph_test_group"
argument_list|)
argument_list|)
expr_stmt|;
comment|// sql2 select c.[jcr:path] as [jcr:path], c.[jcr:score] as [jcr:score],
comment|// c.* from [nt:base] as a inner join [nt:base] as b on ischildnode(b,
comment|// a) inner join [nt:base] as c on isdescendantnode(c, b) where name(a)
comment|// = 'social' and isdescendantnode(a, '/home') and name(b) =
comment|// 'relationships' and c.[id/*] = 'socialgraph_test_group' /* xpath:
comment|// /jcr:root/home//social/relationships//*[id='socialgraph_test_group']
comment|// */
name|assertQuery
argument_list|(
literal|"/jcr:root/home//social/relationships//*[@id='socialgraph_test_group']"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/home/users/testing/socialgraph_test_user_4/social/relationships/friend/socialgraph_test_group"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativeProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 1)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 2)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 100)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 200)]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(@prop> 1000)]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 1)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 2)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 100)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 200)]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[(*/@prop> 1000)]"
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// OAK-2062
specifier|public
name|void
name|testRelativeProperties2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|t
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|a
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|c
init|=
name|b
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|d1
init|=
name|c
operator|.
name|addChild
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
name|d1
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|d1
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|d2
init|=
name|c
operator|.
name|addChild
argument_list|(
literal|"d2"
argument_list|)
decl_stmt|;
name|d2
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|d2
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|d3
init|=
name|c
operator|.
name|addChild
argument_list|(
literal|"d3"
argument_list|)
decl_stmt|;
name|d3
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|d3
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 15)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 15)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/nodes/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests range queries, long comparisons and relative properties       * @throws CommitFailedException       */
annotation|@
name|Test
comment|// OAK-2062
specifier|public
name|void
name|testRangeRelativeProperties
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|emptyList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|property
init|=
literal|"prop"
decl_stmt|;
name|Tree
name|contentNodes
decl_stmt|,
name|t
decl_stmt|;
name|contentNodes
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"nodes"
argument_list|)
expr_stmt|;
comment|/* creating content structure          * content : {          *   nodes : {          *     a9 {          *       b : {          *         c : {          *           d9 : {          *             prop : 9          *           }          *         }          *       }          *     },          *     a10 {          *       b : {          *         c : {          *           d10 : {          *             prop : 10          *           }          *         }          *       }          *     },          *     a20 {          *       b : {          *         c : {          *           d20 : {          *             prop : 20          *           }          *         }          *       }          *     },          *     a30 {          *       b : {          *         c : {          *           d30 : {          *             prop : 30          *           }          *         }          *       }          *     },          *   }          * }          *           */
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|contentNodes
argument_list|,
literal|"a9"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"d9"
argument_list|,
name|property
argument_list|,
literal|9L
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|contentNodes
argument_list|,
literal|"a10"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"d10"
argument_list|,
name|property
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|contentNodes
argument_list|,
literal|"a20"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"d20"
argument_list|,
name|property
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|contentNodes
argument_list|,
literal|"a30"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|addNtUnstructuredChild
argument_list|(
name|t
argument_list|,
literal|"d30"
argument_list|,
name|property
argument_list|,
literal|30L
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop>= 40)]"
argument_list|,
literal|"xpath"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop<= 8)]"
argument_list|,
literal|"xpath"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop<= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop<= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop<= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//*[(*/*/*/@prop<= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop>= 40)]"
argument_list|,
literal|"xpath"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop<= 8)]"
argument_list|,
literal|"xpath"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop<= 9)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop<= 10)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop<= 20)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root/content/nodes//element(*, nt:unstructured)[(*/*/*/@prop<= 30)]"
argument_list|,
literal|"xpath"
argument_list|,
name|of
argument_list|(
literal|"/content/nodes/a9"
argument_list|,
literal|"/content/nodes/a10"
argument_list|,
literal|"/content/nodes/a20"
argument_list|,
literal|"/content/nodes/a30"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * adds a child of type {@link JcrConstants#NT_UNSTRUCTURED} under the provided {@code parent}      * with the provided {@code name} and an optional {@code propertyName} and {@code value}. If      * either {@code propertyName} or {@code value} are null the property won't be set.      *       * @param parent      * @param name      * @param propertyName      * @param value      * @return      */
specifier|private
specifier|static
name|Tree
name|addNtUnstructuredChild
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Tree
name|parent
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|propertyName
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Long
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Tree
name|ret
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyName
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|,
name|LONG
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRelativeProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"a"
argument_list|,
literal|"1280"
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"b"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
literal|10.3
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
operator|-
literal|10.3
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"c"
argument_list|,
literal|9.8
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"d"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"d"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|content
operator|.
name|addChild
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"d"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@a> 2]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@a> '1']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@a> 'abd']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@a = 'abc']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this may be unexpected: it is evaluated as
comment|// ['128', 'abc', '1280']>= 'abc'
name|assertQuery
argument_list|(
literal|"//*[*/@a>= 'abc']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@b> 2]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@b> 2048]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@b> '1']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@b = 128]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@c> 10]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@c> 11]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@c> '1']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@c = 9.8]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@d> 10]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@d> 11]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@d> '1']"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[*/@d = 10]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this may be unexpected: it is evaluated as
comment|// ['x', 'y', '10', '1', '2']< '3'
name|assertQuery
argument_list|(
literal|"//*[*/@d< 3]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLowercaseOnArrays
parameter_list|()
throws|throws
name|Exception
block|{
comment|// OAK-1829
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
name|content
operator|.
name|setProperty
argument_list|(
literal|"array"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"X"
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//*[jcr:like(fn:lower-case(@array), '%x%')]"
argument_list|,
literal|"xpath"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

