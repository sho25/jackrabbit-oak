begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Partially based on json-simple  * Limitation: arrays can only have primitive members (i.e. no arrays nor objects)  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JsonBuilder
block|{
specifier|final
name|Appendable
name|writer
decl_stmt|;
specifier|private
name|JsonBuilder
parameter_list|(
name|Appendable
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
specifier|public
specifier|static
name|JsonObjectBuilder
name|create
parameter_list|(
name|Appendable
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonBuilder
argument_list|(
name|writer
argument_list|)
operator|.
operator|new
name|JsonObjectBuilder
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|final
class|class
name|JsonObjectBuilder
block|{
specifier|private
specifier|final
name|JsonObjectBuilder
name|parent
decl_stmt|;
specifier|private
name|boolean
name|hasKeys
decl_stmt|;
specifier|public
name|JsonObjectBuilder
parameter_list|(
name|JsonObjectBuilder
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|valueEncoded
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|Number
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|value
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|nil
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|String
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|int
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|long
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|float
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|double
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|Number
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|key
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|array
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|writeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
operator|new
name|JsonArrayBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|object
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|writeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
operator|new
name|JsonObjectBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|void
name|optionalComma
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasKeys
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasKeys
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|quote
argument_list|(
name|escape
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|write
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
class|class
name|JsonArrayBuilder
block|{
specifier|private
specifier|final
name|JsonObjectBuilder
name|parent
decl_stmt|;
specifier|private
name|boolean
name|hasValues
decl_stmt|;
specifier|public
name|JsonArrayBuilder
parameter_list|(
name|JsonObjectBuilder
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|Number
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|value
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonArrayBuilder
name|nil
parameter_list|()
throws|throws
name|IOException
block|{
name|optionalComma
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|JsonObjectBuilder
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|void
name|optionalComma
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasValues
condition|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasValues
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Escape quotes, \, /, \r, \n, \b, \f, \t and other control characters (U+0000 through U+001F).      */
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|string
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'"'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\b'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\b"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\f'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\f"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\t"
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//Reference: http://www.unicode.org/versions/Unicode5.1.0/
if|if
condition|(
name|ch
operator|>=
literal|'\u0000'
operator|&&
name|ch
operator|<=
literal|'\u001F'
operator|||
name|ch
operator|>=
literal|'\u007F'
operator|&&
name|ch
operator|<=
literal|'\u009F'
operator|||
name|ch
operator|>=
literal|'\u2000'
operator|&&
name|ch
operator|<=
literal|'\u20FF'
condition|)
block|{
name|String
name|ss
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\u"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|4
operator|-
name|ss
operator|.
name|length
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ss
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|'"'
operator|+
name|string
operator|+
literal|'"'
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|quote
argument_list|(
name|escape
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|float
name|value
parameter_list|)
block|{
comment|// TODO silently losing data, should probably throw an exception instead
return|return
name|Float
operator|.
name|isInfinite
argument_list|(
name|value
argument_list|)
operator|||
name|Float
operator|.
name|isNaN
argument_list|(
name|value
argument_list|)
condition|?
literal|"null"
else|:
name|Float
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|double
name|value
parameter_list|)
block|{
comment|// TODO silently losing data, should probably throw an exception instead
return|return
name|Double
operator|.
name|isInfinite
argument_list|(
name|value
argument_list|)
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|value
argument_list|)
condition|?
literal|"null"
else|:
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|Number
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|float
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|float
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|Number
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|Number
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|boolean
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

