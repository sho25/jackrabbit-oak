begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ReplayingDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|ReplyDecoder
operator|.
name|DecodingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hasher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|ReplyDecoder
extends|extends
name|ReplayingDecoder
argument_list|<
name|DecodingState
argument_list|>
block|{
annotation|@
name|Deprecated
specifier|public
enum|enum
name|DecodingState
block|{
annotation|@
name|Deprecated
name|HEADER
block|,
annotation|@
name|Deprecated
name|SEGMENT
block|,
annotation|@
name|Deprecated
name|BLOB
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplyDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|byte
name|type
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|ReplyDecoder
parameter_list|(
name|SegmentStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|DecodingState
operator|.
name|HEADER
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|checkpoint
argument_list|(
name|DecodingState
operator|.
name|HEADER
argument_list|)
expr_stmt|;
name|length
operator|=
operator|-
literal|1
expr_stmt|;
name|type
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|state
argument_list|()
condition|)
block|{
case|case
name|HEADER
case|:
block|{
name|length
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Messages
operator|.
name|HEADER_SEGMENT
case|:
name|checkpoint
argument_list|(
name|DecodingState
operator|.
name|SEGMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|Messages
operator|.
name|HEADER_BLOB
case|:
name|checkpoint
argument_list|(
name|DecodingState
operator|.
name|BLOB
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return;
block|}
case|case
name|SEGMENT
case|:
block|{
name|Segment
name|s
init|=
name|decodeSegment
argument_list|(
name|in
argument_list|,
name|length
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|SegmentReply
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|fireUserEventTriggered
argument_list|(
operator|new
name|SegmentReply
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
case|case
name|BLOB
case|:
block|{
name|IdArrayBasedBlob
name|b
init|=
name|decodeBlob
argument_list|(
name|in
argument_list|,
name|length
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|SegmentReply
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|fireUserEventTriggered
argument_list|(
operator|new
name|SegmentReply
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown decoding state: "
operator|+
name|state
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Segment
name|decodeSegment
parameter_list|(
name|ByteBuf
name|in
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|long
name|msb
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|hash
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
comment|// #readBytes throws a 'REPLAY' exception if there are not enough bytes
comment|// available for reading
name|ByteBuf
name|data
init|=
name|in
operator|.
name|readBytes
argument_list|(
name|len
operator|-
literal|25
argument_list|)
decl_stmt|;
name|byte
index|[]
name|segment
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|segment
operator|=
name|data
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|segment
operator|=
operator|new
name|byte
index|[
name|len
operator|-
literal|25
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|long
name|check
init|=
name|hasher
operator|.
name|putBytes
argument_list|(
name|segment
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|padToLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|==
name|check
condition|)
block|{
name|SegmentId
name|id
init|=
operator|new
name|SegmentId
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
name|Segment
name|s
init|=
operator|new
name|Segment
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|id
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|segment
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"received segment with id {} and size {}"
argument_list|,
name|id
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"received corrupted segment {}, ignoring"
argument_list|,
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|IdArrayBasedBlob
name|decodeBlob
parameter_list|(
name|ByteBuf
name|in
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|int
name|inIdLen
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bid
init|=
operator|new
name|byte
index|[
name|inIdLen
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|bid
argument_list|)
expr_stmt|;
name|String
name|id
init|=
operator|new
name|String
argument_list|(
name|bid
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|hash
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
comment|// #readBytes throws a 'REPLAY' exception if there are not enough bytes
comment|// available for reading
name|ByteBuf
name|data
init|=
name|in
operator|.
name|readBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|blob
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|blob
operator|=
name|data
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|blob
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|data
operator|.
name|readBytes
argument_list|(
name|blob
argument_list|)
expr_stmt|;
block|}
name|Hasher
name|hasher
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|newHasher
argument_list|()
decl_stmt|;
name|long
name|check
init|=
name|hasher
operator|.
name|putBytes
argument_list|(
name|blob
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|padToLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|==
name|check
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"received blob with id {} and size {}"
argument_list|,
name|id
argument_list|,
name|blob
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|IdArrayBasedBlob
argument_list|(
name|blob
argument_list|,
name|id
argument_list|)
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"received corrupted binary {}, ignoring"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

