begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|MIX_ATOMIC_COUNTER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_comment
comment|/**  *<p>  * Manages a node as<em>Atomic Counter</em>: a node which will handle at low level a protected  * property ({@link #PROP_COUNTER}) in an atomic way. This will represent an increment or decrement  * of a counter in the case, for example, of<em>Likes</em> or<em>Voting</em>.  *</p>  *   *<p>  * Whenever you add a {@link NodeTypeConstants#MIX_ATOMIC_COUNTER} mixin to a node it will turn it  * into an atomic counter. Then in order to increment or decrement the {@code oak:counter} property  * you'll need to set the {@code oak:increment} one ({@link #PROP_INCREMENT). Please note that the  *<strong>{@code oak:incremement} will never be saved</strong>, only the {@code oak:counter} will  * be amended accordingly.  *</p>  *   *<p>  *  So in order to deal with the counter from a JCR point of view you'll do something as follows   *</p>  *   *<pre>  *  Session session = ...  *    *  // creating a counter node  *  Node counter = session.getRootNode().addNode("mycounter");  *  counter.addMixin("mix:atomicCounter"); // or use the NodeTypeConstants  *  session.save();  *    *  // Will output 0. the default value  *  System.out.println("counter now: " + counter.getProperty("oak:counter").getLong());  *    *  // incrementing by 5 the counter  *  counter.setProperty("oak:increment", 5);  *  session.save();  *    *  // Will output 5  *  System.out.println("counter now: " + counter.getProperty("oak:counter").getLong());  *    *  // decreasing by 1  *  counter.setProperty("oak:increment", -1);  *  session.save();  *    *  // Will output 4  *  System.out.println("counter now: " + counter.getProperty("oak:counter").getLong());  *    *  session.logout();  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|AtomicCounterEditor
extends|extends
name|DefaultEditor
block|{
comment|/**      * property to be set for incrementing/decrementing the counter      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_INCREMENT
init|=
literal|"oak:increment"
decl_stmt|;
comment|/**      * property with the consolidated counter      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_COUNTER
init|=
literal|"oak:counter"
decl_stmt|;
comment|/**      * prefix used internally for tracking the counting requests      */
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX_PROP_COUNTER
init|=
literal|":oak-counter-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AtomicCounterEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
comment|/**      * instruct whether to update the node on leave.      */
specifier|private
name|boolean
name|update
decl_stmt|;
specifier|public
name|AtomicCounterEditor
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
argument_list|(
literal|""
argument_list|,
name|checkNotNull
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AtomicCounterEditor
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|shallWeProcessProperty
parameter_list|(
specifier|final
name|PropertyState
name|property
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|boolean
name|process
init|=
literal|false
decl_stmt|;
name|PropertyState
name|mixin
init|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixin
operator|!=
literal|null
operator|&&
name|PROP_INCREMENT
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|Iterators
operator|.
name|contains
argument_list|(
name|mixin
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|MIX_ATOMIC_COUNTER
argument_list|)
condition|)
block|{
if|if
condition|(
name|LONG
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|process
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"although the {} property is set is not of the right value: LONG. Not processing node: {}."
argument_list|,
name|PROP_INCREMENT
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|process
return|;
block|}
comment|/**      *<p>      * consolidate the {@link #PREFIX_PROP_COUNTER} properties and sum them into the      * {@link #PROP_COUNTER}      *</p>      *       *<p>      * The passed in {@code NodeBuilder} must have      * {@link org.apache.jackrabbit.JcrConstants#JCR_MIXINTYPES JCR_MIXINTYPES} with      * {@link org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants#MIX_ATOMIC_COUNTER MIX_ATOMIC_COUNTER}.      * If not it will be silently ignored.      *</p>      *       * @param builder the builder to work on. Cannot be null.      */
specifier|public
specifier|static
name|void
name|consolidateCount
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|long
name|count
init|=
name|builder
operator|.
name|hasProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
condition|?
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
else|:
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|builder
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
condition|)
block|{
name|count
operator|+=
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|removeProperty
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_COUNTER
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUniqueCounter
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|update
operator|=
literal|true
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PREFIX_PROP_COUNTER
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|,
name|value
argument_list|,
name|LONG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
specifier|final
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|shallWeProcessProperty
argument_list|(
name|after
argument_list|,
name|path
argument_list|,
name|builder
argument_list|)
condition|)
block|{
name|setUniqueCounter
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|removeProperty
argument_list|(
name|PROP_INCREMENT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|AtomicCounterEditor
argument_list|(
name|path
operator|+
literal|'/'
operator|+
name|name
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NodeState
name|before
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|AtomicCounterEditor
argument_list|(
name|path
operator|+
literal|'/'
operator|+
name|name
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
specifier|final
name|NodeState
name|before
parameter_list|,
specifier|final
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|update
condition|)
block|{
comment|// TODO here is where the Async check could be done
name|consolidateCount
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

