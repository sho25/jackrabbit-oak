begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_comment
comment|/**  * A utility class that allows to copy a new state (including children).  */
end_comment

begin_class
specifier|public
class|class
name|NodeStateCopyUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OAK_CHILD_ORDER
init|=
literal|":childOrder"
decl_stmt|;
specifier|public
specifier|static
name|void
name|copyToTree
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
name|tree
operator|.
name|setOrderableChildren
argument_list|(
name|state
operator|.
name|hasProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
expr_stmt|;
name|copyProps
argument_list|(
name|state
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|Tree
name|src
init|=
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|state
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|srcChild
range|:
name|src
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|childName
init|=
name|srcChild
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Tree
name|child
init|=
name|tree
operator|.
name|addChild
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|copyToTree
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|copyToNode
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|copyProps
argument_list|(
name|state
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|Tree
name|src
init|=
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|state
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|srcChild
range|:
name|src
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|childName
init|=
name|srcChild
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|childName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|NodeState
name|childState
init|=
name|state
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|JcrUtils
operator|.
name|getOrAddNode
argument_list|(
name|node
argument_list|,
name|childName
argument_list|,
name|primaryType
argument_list|(
name|childState
argument_list|)
argument_list|)
decl_stmt|;
name|copyToNode
argument_list|(
name|childState
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copyProps
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|Tree
name|tree
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ps
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|copyProps
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ValueFactory
name|vf
init|=
name|node
operator|.
name|getSession
argument_list|()
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ps
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|n
range|:
name|ps
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
control|)
block|{
name|node
operator|.
name|addMixin
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Value
index|[]
name|values
init|=
operator|new
name|Value
index|[
name|ps
operator|.
name|count
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|createValue
argument_list|(
name|vf
argument_list|,
name|ps
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|createValue
argument_list|(
name|vf
argument_list|,
name|ps
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Value
name|createValue
parameter_list|(
name|ValueFactory
name|vf
parameter_list|,
name|PropertyState
name|ps
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|Blob
name|blob
init|=
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|BINARY
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|Binary
name|bin
init|=
name|vf
operator|.
name|createBinary
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|bin
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|DATE
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|PATH
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|WEAKREFERENCE
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|URI
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|vf
operator|.
name|createValue
argument_list|(
name|getValue
argument_list|(
name|ps
argument_list|,
name|Type
operator|.
name|DECIMAL
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported type "
operator|+
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|PropertyState
name|ps
parameter_list|,
name|Type
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|index
operator|<
literal|0
condition|?
name|ps
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|type
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|primaryType
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|state
operator|.
name|getName
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
literal|"jcr:primaryType not defined for %s"
argument_list|,
name|state
argument_list|)
return|;
block|}
block|}
end_class

end_unit

