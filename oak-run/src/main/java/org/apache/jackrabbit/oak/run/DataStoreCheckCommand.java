begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoURI
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|ArgumentAcceptingOptionSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpecBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|FileFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|FileLineDifferenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|FILE_SEPARATOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|JAVA_IO_TMPDIR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
operator|.
name|createStarted
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
operator|.
name|close
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|forceDelete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|listFiles
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeAsLine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|EscapeUtils
operator|.
name|escapeLineBreak
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentNodeStoreBuilder
operator|.
name|newMongoDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_comment
comment|/**  * Command to check data store consistency and also optionally retrieve ids  * and references.  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreCheckCommand
implements|implements
name|Command
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FDS
init|=
literal|"--fds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|S3DS
init|=
literal|"--s3ds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AZUREDS
init|=
literal|"--azureblobds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DASH
init|=
literal|"-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HASH
init|=
literal|"#"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|idComparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|allowsUnrecognizedOptions
argument_list|()
expr_stmt|;
name|String
name|helpStr
init|=
literal|"datastorecheck [--id] [--ref] [--consistency] [--store<path>|<mongo_uri>] "
operator|+
literal|"[--s3ds<s3ds_config>|--fds<fds_config>|--azureblobds<azureblobds_config>|--nods]"
operator|+
literal|" [--dump<path>] [--repoHome<repo_home>] [--track] [--verbose]"
decl_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Options for operations requested
name|OptionSpecBuilder
name|idOp
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"id"
argument_list|,
literal|"Get ids"
argument_list|)
decl_stmt|;
name|OptionSpecBuilder
name|refOp
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"ref"
argument_list|,
literal|"Get references"
argument_list|)
decl_stmt|;
name|OptionSpecBuilder
name|consistencyOp
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"consistency"
argument_list|,
literal|"Check consistency"
argument_list|)
decl_stmt|;
comment|// Node Store - needed for --ref, --consistency
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|store
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"store"
argument_list|,
literal|"Node Store"
argument_list|)
operator|.
name|requiredIf
argument_list|(
name|refOp
argument_list|,
name|consistencyOp
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Optional argument to specify the dump path
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|dump
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"dump"
argument_list|,
literal|"Dump Path"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Optional argument to specify tracking
name|OptionSpecBuilder
name|trackOverride
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"track"
argument_list|,
literal|"Force override tracked ids"
argument_list|)
decl_stmt|;
comment|// Required argument for --consistency to specify tracking folder (otherwise can have inconsistencies)
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|repoHome
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"repoHome"
argument_list|,
literal|"Local repository home folder"
argument_list|)
operator|.
name|requiredIf
argument_list|(
name|trackOverride
argument_list|,
name|consistencyOp
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Optional argument to specify tracking
name|OptionSpecBuilder
name|verbose
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"verbose"
argument_list|,
literal|"Output backend formatted ids/paths"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|help
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
comment|// Required rules (any one of --id, --ref, --consistency)
name|idOp
operator|.
name|requiredUnless
argument_list|(
name|refOp
argument_list|,
name|consistencyOp
argument_list|)
expr_stmt|;
name|refOp
operator|.
name|requiredUnless
argument_list|(
name|idOp
argument_list|,
name|consistencyOp
argument_list|)
expr_stmt|;
name|consistencyOp
operator|.
name|requiredUnless
argument_list|(
name|idOp
argument_list|,
name|refOp
argument_list|)
expr_stmt|;
name|trackOverride
operator|.
name|availableIf
argument_list|(
name|idOp
argument_list|,
name|consistencyOp
argument_list|)
expr_stmt|;
name|OptionSet
name|options
init|=
literal|null
decl_stmt|;
try|try
block|{
name|options
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options :"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|help
argument_list|)
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|dumpPath
init|=
name|JAVA_IO_TMPDIR
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|dump
argument_list|)
condition|)
block|{
name|dumpPath
operator|=
name|options
operator|.
name|valueOf
argument_list|(
name|dump
argument_list|)
expr_stmt|;
block|}
name|GarbageCollectableBlobStore
name|blobStore
init|=
literal|null
decl_stmt|;
name|BlobReferenceRetriever
name|marker
init|=
literal|null
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|store
argument_list|)
condition|)
block|{
name|String
name|source
init|=
name|options
operator|.
name|valueOf
argument_list|(
name|store
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|startsWith
argument_list|(
name|MongoURI
operator|.
name|MONGODB_PREFIX
argument_list|)
condition|)
block|{
name|MongoClientURI
name|uri
init|=
operator|new
name|MongoClientURI
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|MongoClient
name|client
init|=
operator|new
name|MongoClient
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|DocumentNodeStore
name|docNodeStore
init|=
name|newMongoDocumentNodeStoreBuilder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|client
operator|.
name|getDB
argument_list|(
name|uri
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|Utils
operator|.
name|asCloseable
argument_list|(
name|docNodeStore
argument_list|)
argument_list|)
expr_stmt|;
name|blobStore
operator|=
operator|(
name|GarbageCollectableBlobStore
operator|)
name|docNodeStore
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
name|marker
operator|=
operator|new
name|DocumentBlobReferenceRetriever
argument_list|(
name|docNodeStore
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|docNodeStore
expr_stmt|;
block|}
else|else
block|{
name|FileStore
name|fileStore
init|=
name|fileStoreBuilder
argument_list|(
operator|new
name|File
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|withStrictVersionCheck
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|marker
operator|=
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Initialize S3/FileDataStore if configured
name|String
name|dsType
init|=
literal|""
decl_stmt|;
name|GarbageCollectableBlobStore
name|dataStore
init|=
name|Utils
operator|.
name|bootstrapDataStore
argument_list|(
name|args
argument_list|,
name|closer
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataStore
operator|!=
literal|null
condition|)
block|{
name|dsType
operator|=
name|getDSType
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|blobStore
operator|=
name|dataStore
expr_stmt|;
block|}
comment|// blob store still not initialized means configuration not supported
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Operation not defined for SegmentNodeStore without external datastore"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileRegister
name|register
init|=
operator|new
name|FileRegister
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|register
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|idOp
argument_list|)
operator|||
name|options
operator|.
name|has
argument_list|(
name|consistencyOp
argument_list|)
condition|)
block|{
name|File
name|idTemp
init|=
name|createTempFile
argument_list|(
literal|"ids"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|forceDelete
argument_list|(
name|idTemp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|dumpFile
init|=
name|register
operator|.
name|createFile
argument_list|(
name|idOp
argument_list|,
name|dumpPath
argument_list|)
decl_stmt|;
name|retrieveBlobIds
argument_list|(
name|blobStore
argument_list|,
name|idTemp
argument_list|)
expr_stmt|;
comment|// If track path and track override specified copy the file to the location
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|repoHome
argument_list|)
operator|&&
name|options
operator|.
name|has
argument_list|(
name|trackOverride
argument_list|)
condition|)
block|{
name|String
name|trackPath
init|=
name|options
operator|.
name|valueOf
argument_list|(
name|repoHome
argument_list|)
decl_stmt|;
name|File
name|trackingFileParent
init|=
operator|new
name|File
argument_list|(
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|trackPath
argument_list|,
literal|"blobids"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|trackingFile
init|=
operator|new
name|File
argument_list|(
name|trackingFileParent
argument_list|,
literal|"blob-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|".gen"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|idTemp
argument_list|,
name|trackingFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|verbose
argument_list|)
condition|)
block|{
name|verboseIds
argument_list|(
name|closer
argument_list|,
name|dsType
argument_list|,
name|idTemp
argument_list|,
name|dumpFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|idTemp
argument_list|,
name|dumpFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|refOp
argument_list|)
operator|||
name|options
operator|.
name|has
argument_list|(
name|consistencyOp
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|verbose
argument_list|)
operator|&&
operator|(
name|nodeStore
operator|instanceof
name|SegmentNodeStore
operator|||
name|nodeStore
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
operator|)
condition|)
block|{
name|NodeTraverser
name|traverser
init|=
operator|new
name|NodeTraverser
argument_list|(
name|nodeStore
argument_list|,
name|dsType
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|traverser
argument_list|)
expr_stmt|;
name|traverser
operator|.
name|traverse
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|traverser
operator|.
name|references
argument_list|,
name|register
operator|.
name|createFile
argument_list|(
name|refOp
argument_list|,
name|dumpPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retrieveBlobReferences
argument_list|(
name|blobStore
argument_list|,
name|marker
argument_list|,
name|register
operator|.
name|createFile
argument_list|(
name|refOp
argument_list|,
name|dumpPath
argument_list|)
argument_list|,
name|dsType
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|verbose
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|consistencyOp
argument_list|)
condition|)
block|{
name|checkConsistency
argument_list|(
name|register
operator|.
name|get
argument_list|(
name|idOp
argument_list|)
argument_list|,
name|register
operator|.
name|get
argument_list|(
name|refOp
argument_list|)
argument_list|,
name|register
operator|.
name|createFile
argument_list|(
name|consistencyOp
argument_list|,
name|dumpPath
argument_list|)
argument_list|,
name|options
operator|.
name|valueOf
argument_list|(
name|repoHome
argument_list|)
argument_list|,
name|dsType
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|verboseIds
parameter_list|(
name|Closer
name|closer
parameter_list|,
specifier|final
name|String
name|dsType
parameter_list|,
name|File
name|readFile
parameter_list|,
name|File
name|writeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LineIterator
name|idIterator
init|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|readFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create a temp file to write real ids and register with closer
name|File
name|longIdTemp
init|=
name|createTempFile
argument_list|(
literal|"longids"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|forceDelete
argument_list|(
name|longIdTemp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Read and write the converted ids
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|idIterator
argument_list|,
name|longIdTemp
argument_list|,
literal|false
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|encodeId
argument_list|(
name|input
argument_list|,
name|dsType
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|longIdTemp
argument_list|,
name|writeFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|idIterator
operator|!=
literal|null
condition|)
block|{
name|idIterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getDSType
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|argList
operator|.
name|contains
argument_list|(
name|S3DS
argument_list|)
condition|)
block|{
return|return
name|S3DS
return|;
block|}
elseif|else
if|if
condition|(
name|argList
operator|.
name|contains
argument_list|(
name|FDS
argument_list|)
condition|)
block|{
return|return
name|FDS
return|;
block|}
elseif|else
if|if
condition|(
name|argList
operator|.
name|contains
argument_list|(
name|AZUREDS
argument_list|)
condition|)
block|{
return|return
name|AZUREDS
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|static
name|String
name|encodeId
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|dsType
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|idLengthSepList
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|HASH
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|idLengthSepList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsType
operator|.
name|equals
argument_list|(
name|FDS
argument_list|)
condition|)
block|{
return|return
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
operator|+
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
operator|+
name|blobId
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|dsType
operator|.
name|equals
argument_list|(
name|S3DS
argument_list|)
operator|||
name|dsType
operator|.
name|equals
argument_list|(
name|AZUREDS
argument_list|)
condition|)
block|{
return|return
operator|(
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|DASH
operator|+
name|blobId
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
operator|)
return|;
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|String
name|decodeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|FILE_SEPARATOR
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|pathStrippedId
init|=
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
operator|.
name|join
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
name|DASH
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|splitToList
argument_list|(
name|pathStrippedId
argument_list|)
argument_list|)
return|;
block|}
specifier|static
class|class
name|FileRegister
implements|implements
name|Closeable
block|{
name|Map
argument_list|<
name|OptionSpec
argument_list|,
name|File
argument_list|>
name|opFiles
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|OptionSet
name|options
decl_stmt|;
specifier|public
name|FileRegister
parameter_list|(
name|OptionSet
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|File
name|createFile
parameter_list|(
name|OptionSpec
name|spec
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|spec
operator|.
name|toString
argument_list|()
operator|+
name|suffix
argument_list|)
decl_stmt|;
name|opFiles
operator|.
name|put
argument_list|(
name|spec
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|public
name|File
name|get
parameter_list|(
name|OptionSpec
name|spec
parameter_list|)
block|{
return|return
name|opFiles
operator|.
name|get
argument_list|(
name|spec
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|OptionSpec
argument_list|,
name|File
argument_list|>
argument_list|>
name|iterator
init|=
name|opFiles
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|OptionSpec
argument_list|,
name|File
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|f
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|forceDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkConsistency
parameter_list|(
name|File
name|ids
parameter_list|,
name|File
name|refs
parameter_list|,
name|File
name|missing
parameter_list|,
name|String
name|trackRoot
parameter_list|,
name|String
name|dsType
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting consistency check"
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|createStarted
argument_list|()
decl_stmt|;
name|FileLineDifferenceIterator
name|iter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|ids
argument_list|,
name|refs
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// write the candidates identified to a temp file
name|File
name|candTemp
init|=
name|createTempFile
argument_list|(
literal|"candTemp"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|candidates
init|=
name|writeStrings
argument_list|(
name|iter
argument_list|,
name|candTemp
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
comment|// retrieve the .del file from track directory
name|File
name|trackingFileParent
init|=
operator|new
name|File
argument_list|(
name|FilenameUtils
operator|.
name|concat
argument_list|(
name|trackRoot
argument_list|,
literal|"blobids"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|trackingFileParent
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|File
argument_list|>
name|files
init|=
name|listFiles
argument_list|(
name|trackingFileParent
argument_list|,
name|FileFilterUtils
operator|.
name|suffixFileFilter
argument_list|(
literal|".del"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// If a delete file is present filter the tracked deleted ids
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|delFile
init|=
name|files
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|FileLineDifferenceIterator
name|filteringIter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|delFile
argument_list|,
name|candTemp
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|encodeId
argument_list|(
name|decodeId
argument_list|(
name|input
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|dsType
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|candidates
operator|=
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|filteringIter
argument_list|,
name|missing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping active deleted tracked as parameter [repoHome] : ["
operator|+
name|trackRoot
operator|+
literal|"] incorrect"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|candTemp
argument_list|,
name|missing
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|candTemp
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Consistency check found "
operator|+
name|candidates
operator|+
literal|" missing blobs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidates
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Consistency check failure for the data store"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|retrieveBlobReferences
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|File
name|marked
parameter_list|,
name|String
name|dsType
parameter_list|,
name|boolean
name|isVerbose
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|marked
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
specifier|final
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
specifier|final
name|GarbageCollectableBlobStore
name|finalBlobStore
init|=
name|blobStore
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting dump of blob references"
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|createStarted
argument_list|()
decl_stmt|;
name|marker
operator|.
name|collectReferences
argument_list|(
operator|new
name|ReferenceCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|blobId
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|finalBlobStore
operator|.
name|resolveChunks
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isVerbose
condition|)
block|{
name|id
operator|=
name|encodeId
argument_list|(
name|id
argument_list|,
name|dsType
argument_list|)
expr_stmt|;
block|}
name|String
name|combinedId
init|=
name|delimJoiner
operator|.
name|join
argument_list|(
name|id
argument_list|,
name|escapeLineBreak
argument_list|(
name|nodeId
argument_list|)
argument_list|)
decl_stmt|;
name|count
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|combinedId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in retrieving references"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|marked
argument_list|,
name|idComparator
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|count
operator|.
name|get
argument_list|()
operator|+
literal|" blob references found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|writer
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|retrieveBlobIds
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|File
name|blob
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting dump of blob ids"
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|createStarted
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|blobIter
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|writeStrings
argument_list|(
name|blobIter
argument_list|,
name|blob
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|count
operator|+
literal|" blob ids found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|NodeTraverser
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|String
name|dsType
decl_stmt|;
specifier|private
specifier|final
name|File
name|references
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
specifier|public
name|NodeTraverser
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|String
name|dsType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|references
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"traverseref"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|dsType
operator|=
name|dsType
expr_stmt|;
block|}
specifier|private
name|void
name|binaryProperties
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
name|BufferedWriter
name|writer
parameter_list|,
name|AtomicInteger
name|count
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|p
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|getLine
argument_list|(
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|,
name|propPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
operator|&&
name|p
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Blob
argument_list|>
name|iterator
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|String
name|id
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|getLine
argument_list|(
name|id
argument_list|,
name|propPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error in retrieving blob id for path "
operator|+
name|propPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getLine
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|delimJoiner
operator|.
name|join
argument_list|(
name|encodeId
argument_list|(
name|id
argument_list|,
name|dsType
argument_list|)
argument_list|,
name|escapeLineBreak
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|traverseChildren
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|,
name|BufferedWriter
name|writer
parameter_list|,
name|AtomicInteger
name|count
parameter_list|)
block|{
name|binaryProperties
argument_list|(
name|state
argument_list|,
name|path
argument_list|,
name|writer
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|c
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|traverseChildren
argument_list|(
name|c
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|writer
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|traverse
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting dump of blob references by traversing"
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|Files
operator|.
name|newWriter
argument_list|(
name|references
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|traverseChildren
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|writer
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|references
argument_list|,
name|idComparator
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|count
operator|.
name|get
argument_list|()
operator|+
literal|" blob references found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|writer
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|references
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

