begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|collection
operator|.
name|IsIterableContainingInAnyOrder
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|ChangeSetBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|basicMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSetBuilder
name|cb2
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb2
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cb2
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"p-1"
argument_list|,
literal|"p-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nn-1"
argument_list|,
literal|"nn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pnt-1"
argument_list|,
literal|"pnt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pn-1"
argument_list|,
literal|"pn-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addedChangeSetAlreadyOverflown
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeSet
name|mcs1
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|mcs1
operator|.
name|getParentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mcs1
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowPath
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nn-1"
argument_list|,
literal|"nn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pnt-1"
argument_list|,
literal|"pnt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pn-1"
argument_list|,
literal|"pn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs2
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|,
literal|"p-3"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|=
name|cb1
operator|.
name|add
argument_list|(
name|cs2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowParentNodeName
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pnt-1"
argument_list|,
literal|"pnt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pn-1"
argument_list|,
literal|"pn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs2
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|,
literal|"nn-3"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|=
name|cb1
operator|.
name|add
argument_list|(
name|cs2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowParentNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"p-1"
argument_list|,
literal|"p-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nn-1"
argument_list|,
literal|"nn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pn-1"
argument_list|,
literal|"pn-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowPropertyNames
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"nt-2"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"p-1"
argument_list|,
literal|"p-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nt-1"
argument_list|,
literal|"nt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nn-1"
argument_list|,
literal|"nn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pnt-1"
argument_list|,
literal|"pnt-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overflowAllNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|cb1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs1
init|=
operator|new
name|ChangeSet
argument_list|(
literal|2
argument_list|,
name|of
argument_list|(
literal|"p-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"nn-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pnt-2"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"pn-2"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|add
argument_list|(
name|cs1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|cs
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"p-1"
argument_list|,
literal|"p-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"nn-1"
argument_list|,
literal|"nn-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pnt-1"
argument_list|,
literal|"pnt-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"pn-1"
argument_list|,
literal|"pn-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathDepth
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cb
operator|.
name|addParentPath
argument_list|(
literal|"/a/b"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addParentPath
argument_list|(
literal|"/x"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addParentPath
argument_list|(
literal|"/p/q/r"
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs
init|=
name|cb
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeSetDepthMoreThanBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/x"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/x/y"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/x/y/z"
argument_list|)
expr_stmt|;
name|ChangeSetBuilder
name|cb2
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/p"
argument_list|)
expr_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/p/q"
argument_list|)
expr_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/p/q/r"
argument_list|)
expr_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/a/b/x/y/z"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|add
argument_list|(
name|cb2
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/x"
argument_list|,
literal|"/x/y"
argument_list|,
literal|"/x/y/z"
argument_list|,
literal|"/p"
argument_list|,
literal|"/p/q"
argument_list|,
literal|"/p/q/r"
argument_list|,
literal|"/a/b/c"
argument_list|,
literal|"/a/b/x"
comment|//Chopped paths
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cb1
operator|.
name|getMaxPrefilterPathDepth
argument_list|()
argument_list|,
name|cs
operator|.
name|getMaxPrefilterPathDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderDepthMoreThanChangeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeSetBuilder
name|cb1
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/p"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/p/q"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/p/q/r"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|addParentPath
argument_list|(
literal|"/a/b/x/y/z"
argument_list|)
expr_stmt|;
name|ChangeSetBuilder
name|cb2
init|=
operator|new
name|ChangeSetBuilder
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/x"
argument_list|)
expr_stmt|;
name|cb2
operator|.
name|addParentPath
argument_list|(
literal|"/x/y"
argument_list|)
expr_stmt|;
name|cb1
operator|.
name|add
argument_list|(
name|cb2
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeSet
name|cs
init|=
name|cb1
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cs
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"/x"
argument_list|,
literal|"/x/y"
argument_list|,
literal|"/p"
argument_list|,
literal|"/p/q"
argument_list|,
literal|"/a/b"
comment|//Chopped paths
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cb2
operator|.
name|getMaxPrefilterPathDepth
argument_list|()
argument_list|,
name|cs
operator|.
name|getMaxPrefilterPathDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|ChangeSetBuilder
name|cb
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|cb
operator|.
name|addNodeType
argument_list|(
literal|"nt-"
operator|+
name|suffix
argument_list|)
operator|.
name|addParentPath
argument_list|(
literal|"p-"
operator|+
name|suffix
argument_list|)
operator|.
name|addParentNodeName
argument_list|(
literal|"nn-"
operator|+
name|suffix
argument_list|)
operator|.
name|addParentNodeType
argument_list|(
literal|"pnt-"
operator|+
name|suffix
argument_list|)
operator|.
name|addPropertyName
argument_list|(
literal|"pn-"
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

