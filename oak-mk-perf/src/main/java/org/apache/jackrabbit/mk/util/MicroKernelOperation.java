begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Useful methods for building node structure.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|MicroKernelOperation
block|{
comment|/**      * Builds a diff representing a pyramid node structure.      *       * @param The      *            path where the first node will be added.      * @param index      * @param numberOfChildren      *            The number of children that each node must have.      * @param nodesNumber      *            Total number of nodes.      * @param nodePrefixName      *            The node name prefix.      * @param diff      *            The string where the diff is builded.Put an empty string for      *            creating a new structure.      * @return      */
specifier|public
specifier|static
name|StringBuilder
name|buildPyramidDiff
parameter_list|(
name|String
name|startingPoint
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|numberOfChildren
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodePrefixName
parameter_list|,
name|StringBuilder
name|diff
parameter_list|)
block|{
if|if
condition|(
name|numberOfChildren
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesNumber
condition|;
name|i
operator|++
control|)
name|diff
operator|.
name|append
argument_list|(
name|addNodeToDiff
argument_list|(
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|diff
return|;
block|}
if|if
condition|(
name|index
operator|>=
name|nodesNumber
condition|)
return|return
name|diff
return|;
name|diff
operator|.
name|append
argument_list|(
name|addNodeToDiff
argument_list|(
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println("Create node "+ index);
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfChildren
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|startingPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|startingPoint
operator|=
name|startingPoint
operator|+
literal|"/"
expr_stmt|;
name|buildPyramidDiff
argument_list|(
name|startingPoint
operator|+
name|nodePrefixName
operator|+
name|index
argument_list|,
name|index
operator|*
name|numberOfChildren
operator|+
name|i
argument_list|,
name|numberOfChildren
argument_list|,
name|nodesNumber
argument_list|,
name|nodePrefixName
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
specifier|private
specifier|static
name|String
name|addNodeToDiff
parameter_list|(
name|String
name|startingPoint
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|startingPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|startingPoint
operator|=
name|startingPoint
operator|+
literal|"/"
expr_stmt|;
return|return
operator|(
literal|"+\""
operator|+
name|startingPoint
operator|+
name|nodeName
operator|+
literal|"\" : {\"key\":\"00000000000000000000\"} \n"
operator|)
return|;
block|}
block|}
end_class

end_unit

