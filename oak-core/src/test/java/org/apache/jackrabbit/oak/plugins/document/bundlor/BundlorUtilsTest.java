begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
operator|.
name|DocumentBundlor
operator|.
name|META_PROP_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
operator|.
name|DocumentBundlor
operator|.
name|META_PROP_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|BundlorUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|matchingProperties_Simple
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|result
init|=
name|BundlorUtils
operator|.
name|getMatchingProperties
argument_list|(
name|create
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Matcher
operator|.
name|NON_MATCHING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingProperties_BaseLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|Matcher
name|m
init|=
operator|new
name|Include
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|createMatcher
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|result
init|=
name|BundlorUtils
operator|.
name|getMatchingProperties
argument_list|(
name|create
argument_list|(
literal|"a"
argument_list|,
name|concat
argument_list|(
literal|"jcr:content"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|,
literal|"jcr:content/jcr:data"
argument_list|,
literal|"jcr:primaryType"
argument_list|,
name|META_PROP_PATTERN
argument_list|)
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"a"
argument_list|,
literal|"jcr:primaryType"
argument_list|,
name|META_PROP_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingProperties_FirstLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|Matcher
name|m
init|=
operator|new
name|Include
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|createMatcher
argument_list|()
operator|.
name|next
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|result
init|=
name|BundlorUtils
operator|.
name|getMatchingProperties
argument_list|(
name|create
argument_list|(
literal|"a"
argument_list|,
name|concat
argument_list|(
literal|"jcr:content"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|,
literal|"jcr:content/jcr:data"
argument_list|,
literal|"jcr:content/metadata/format"
argument_list|,
literal|"jcr:primaryType"
argument_list|,
name|META_PROP_PATTERN
argument_list|)
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"jcr:data"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jcr:data"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"jcr:data"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|testData
init|=
name|asList
argument_list|(
literal|"x"
argument_list|,
name|concat
argument_list|(
literal|"jcr:content"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|,
literal|"jcr:content/jcr:data"
argument_list|,
name|concat
argument_list|(
literal|"jcr:content/metadata"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|,
literal|"jcr:content/metadata/format"
argument_list|,
name|concat
argument_list|(
literal|"jcr:content/comments"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|,
name|concat
argument_list|(
literal|"jcr:content/renditions/original"
argument_list|,
name|META_PROP_NODE
argument_list|)
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
operator|new
name|Include
argument_list|(
literal|"jcr:content/*"
argument_list|)
operator|.
name|createMatcher
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|BundlorUtils
operator|.
name|getChildNodeNames
argument_list|(
name|testData
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|,
name|hasItem
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|BundlorUtils
operator|.
name|getChildNodeNames
argument_list|(
name|testData
argument_list|,
name|m
operator|.
name|next
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|,
name|hasItems
argument_list|(
literal|"metadata"
argument_list|,
literal|"comments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|create
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keyNames
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|key
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

