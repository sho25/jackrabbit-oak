begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_interface
specifier|public
interface|interface
name|Whiteboard
block|{
comment|/**      * Publishes the given service to the whiteboard. Use the returned      * registration object to unregister the service.      *      * @param type type of the service      * @param service service instance      * @param properties service properties      * @return service registration      */
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
function_decl|;
comment|/**      * Starts tracking services of the given type.      *      * @param type type of the services to track      * @return service tracker      */
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
function_decl|;
comment|/**      * Starts tracking services of the given type, with given attributes.      *      * @param type type of the services to track      * @param filterProperties only services with these properties will be tracked.      *                         Null keys are not permitted. Null values means that      *                         the property should be absent.      * @return service tracker      */
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

