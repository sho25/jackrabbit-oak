begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|reverse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
operator|.
name|fromString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Utils
operator|.
name|newBasicReadOnlyBlobStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Utils
operator|.
name|readRevisions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentIdProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Shows the differences between two head states.  */
end_comment

begin_class
specifier|public
class|class
name|Diff
implements|implements
name|Runnable
block|{
comment|/**      * Create a builder for the {@link Diff} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link Diff} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|path
decl_stmt|;
specifier|private
name|String
name|interval
decl_stmt|;
specifier|private
name|boolean
name|incremental
decl_stmt|;
specifier|private
name|File
name|out
decl_stmt|;
specifier|private
name|String
name|filter
decl_stmt|;
specifier|private
name|boolean
name|ignoreMissingSegments
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The two node records to diff specified as a record ID interval. This          * parameter is required.          *<p>          * The interval is specified as two record IDs separated by two full          * stops ({@code ..}). In example, {@code 333dc24d-438f-4cca-8b21-3ebf67c05856:12345..46116fda-7a72-4dbc-af88-a09322a7753a:67890}.          * Instead of using a full record ID, it is possible to use the special          * placeholder {@code head}. This placeholder is translated to the          * record ID of the most recent head state.          *          * @param interval an interval between two node record IDs.          * @return this builder.          */
specifier|public
name|Builder
name|withInterval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|checkNotNull
argument_list|(
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether or not to perform an incremental diff of the specified          * interval. An incremental diff shows every change between the two          * records at every revision available to the segment store. This          * parameter is not mandatory and defaults to {@code false}.          *          * @param incremental {@code true} to perform an incremental diff,          *                    {@code false} otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withIncremental
parameter_list|(
name|boolean
name|incremental
parameter_list|)
block|{
name|this
operator|.
name|incremental
operator|=
name|incremental
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The file where the output of this command is stored. this parameter          * is mandatory.          *          * @param file the output file.          * @return this builder.          */
specifier|public
name|Builder
name|withOutput
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|checkNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to a subtree. If specified, this parameter allows to          * restrict the diff to the specified subtree. This parameter is not          * mandatory and defaults to the entire tree.          *          * @param filter a path used as as filter for the resulting diff.          * @return this builder.          */
specifier|public
name|Builder
name|withFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|checkNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore exceptions caused by missing segments in the          * segment store. This parameter is not mandatory and defaults to {@code          * false}.          *          * @param ignoreMissingSegments {@code true} to ignore exceptions caused          *                              by missing segments, {@code false}          *                              otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withIgnoreMissingSegments
parameter_list|(
name|boolean
name|ignoreMissingSegments
parameter_list|)
block|{
name|this
operator|.
name|ignoreMissingSegments
operator|=
name|ignoreMissingSegments
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link Diff} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|Runnable
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
operator|new
name|Diff
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|File
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|interval
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|incremental
decl_stmt|;
specifier|private
specifier|final
name|File
name|out
decl_stmt|;
specifier|private
specifier|final
name|String
name|filter
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ignoreMissingSegments
decl_stmt|;
specifier|private
name|Diff
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|builder
operator|.
name|interval
expr_stmt|;
name|this
operator|.
name|incremental
operator|=
name|builder
operator|.
name|incremental
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|builder
operator|.
name|out
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|builder
operator|.
name|filter
expr_stmt|;
name|this
operator|.
name|ignoreMissingSegments
operator|=
name|builder
operator|.
name|ignoreMissingSegments
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|diff
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|diff
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Store "
operator|+
name|path
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing diff to "
operator|+
name|out
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|interval
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\.\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error parsing revision interval '"
operator|+
name|interval
operator|+
literal|"'."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
init|(
name|ReadOnlyFileStore
name|store
init|=
name|fileStoreBuilder
argument_list|(
name|path
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|newBasicReadOnlyBlobStore
argument_list|()
argument_list|)
operator|.
name|buildReadOnly
argument_list|()
init|)
block|{
name|SegmentIdProvider
name|idProvider
init|=
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
decl_stmt|;
name|RecordId
name|idL
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"head"
argument_list|)
condition|)
block|{
name|idL
operator|=
name|store
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|idL
operator|=
name|fromString
argument_list|(
name|idProvider
argument_list|,
name|tokens
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid left endpoint for interval "
operator|+
name|interval
argument_list|)
expr_stmt|;
return|return;
block|}
name|RecordId
name|idR
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tokens
index|[
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"head"
argument_list|)
condition|)
block|{
name|idR
operator|=
name|store
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|idR
operator|=
name|fromString
argument_list|(
name|idProvider
argument_list|,
name|tokens
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid left endpoint for interval "
operator|+
name|interval
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
init|)
block|{
if|if
condition|(
name|incremental
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|readRevisions
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating diff between "
operator|+
name|idL
operator|+
literal|" and "
operator|+
name|idR
operator|+
literal|" incrementally. Found "
operator|+
name|revs
operator|.
name|size
argument_list|()
operator|+
literal|" revisions."
argument_list|)
expr_stmt|;
name|int
name|s
init|=
name|revs
operator|.
name|indexOf
argument_list|(
name|idL
operator|.
name|toString10
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|e
init|=
name|revs
operator|.
name|indexOf
argument_list|(
name|idR
operator|.
name|toString10
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
operator|-
literal|1
operator|||
name|e
operator|==
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to match input revisions with FileStore."
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|revDiffs
init|=
name|revs
operator|.
name|subList
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|s
argument_list|,
name|e
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|s
argument_list|,
name|e
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>
name|e
condition|)
block|{
comment|// reverse list
name|revDiffs
operator|=
name|reverse
argument_list|(
name|revDiffs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revDiffs
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nothing to diff: "
operator|+
name|revDiffs
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|revDiffsIt
init|=
name|revDiffs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|RecordId
name|idLt
init|=
name|fromString
argument_list|(
name|idProvider
argument_list|,
name|revDiffsIt
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|revDiffsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RecordId
name|idRt
init|=
name|fromString
argument_list|(
name|idProvider
argument_list|,
name|revDiffsIt
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|good
init|=
name|diff
argument_list|(
name|store
argument_list|,
name|idLt
argument_list|,
name|idRt
argument_list|,
name|pw
argument_list|)
decl_stmt|;
name|idLt
operator|=
name|idRt
expr_stmt|;
if|if
condition|(
operator|!
name|good
operator|&&
operator|!
name|ignoreMissingSegments
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Generating diff between "
operator|+
name|idL
operator|+
literal|" and "
operator|+
name|idR
argument_list|)
expr_stmt|;
name|diff
argument_list|(
name|store
argument_list|,
name|idL
argument_list|,
name|idR
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|dur
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
name|dur
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|diff
parameter_list|(
name|ReadOnlyFileStore
name|store
parameter_list|,
name|RecordId
name|idL
parameter_list|,
name|RecordId
name|idR
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"rev "
operator|+
name|idL
operator|+
literal|".."
operator|+
name|idR
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeState
name|before
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|idL
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|idR
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|filter
argument_list|)
control|)
block|{
name|before
operator|=
name|before
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|after
operator|=
name|after
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|PrintingDiff
argument_list|(
name|pw
argument_list|,
name|filter
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"#SNFE "
operator|+
name|ex
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

