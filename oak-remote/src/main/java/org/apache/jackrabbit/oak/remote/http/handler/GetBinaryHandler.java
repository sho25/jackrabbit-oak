begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteBinaryFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteBinaryId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendBadRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendInternalServerError
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendNotFound
import|;
end_import

begin_class
class|class
name|GetBinaryHandler
implements|implements
name|Handler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_RANGE_HEADER
init|=
literal|"Content-Range"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RANGE_HEADER
init|=
literal|"Range"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|RANGE_HEADER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*bytes\\s*=\\s*(.*)\\s*$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|RANGE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d*)\\s*(?:\\s*-\\s*(\\d*))?\\s*$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPART_DELIMITER
init|=
literal|"MULTIPART-DELIMITER"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REQUEST_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^/binaries/(.*)$"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|RemoteSession
name|session
init|=
operator|(
name|RemoteSession
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sendInternalServerError
argument_list|(
name|response
argument_list|,
literal|"session not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|providedBinaryId
init|=
name|readBinaryId
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|providedBinaryId
operator|==
literal|null
condition|)
block|{
name|sendBadRequest
argument_list|(
name|response
argument_list|,
literal|"unable to read the provided binary ID"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteBinaryId
name|binaryId
init|=
name|session
operator|.
name|readBinaryId
argument_list|(
name|providedBinaryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|binaryId
operator|==
literal|null
condition|)
block|{
name|sendNotFound
argument_list|(
name|response
argument_list|,
literal|"binary ID not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|RemoteBinaryFilters
argument_list|>
name|contentRanges
init|=
name|parseRequestRanges
argument_list|(
name|request
argument_list|,
name|session
argument_list|,
name|binaryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentRanges
operator|==
literal|null
condition|)
block|{
name|handleFile
argument_list|(
name|response
argument_list|,
name|session
argument_list|,
name|binaryId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentRanges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|handleSingleRange
argument_list|(
name|response
argument_list|,
name|session
argument_list|,
name|binaryId
argument_list|,
name|contentRanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleMultipleRanges
argument_list|(
name|response
argument_list|,
name|session
argument_list|,
name|binaryId
argument_list|,
name|contentRanges
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * RFC7233      *<p/>      * This handler sends a 200 OK http status, the Content-Length header and      * the entire file/binary content. This is used when the request Range      * header is missing or it contains a malformed value.      */
specifier|private
name|void
name|handleFile
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|RemoteSession
name|session
parameter_list|,
name|RemoteBinaryId
name|binaryId
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|session
operator|.
name|readBinary
argument_list|(
name|binaryId
argument_list|,
operator|new
name|RemoteBinaryFilters
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|session
operator|.
name|readBinaryLength
argument_list|(
name|binaryId
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
operator|(
name|int
operator|)
name|length
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * RFC7233      *<p/>      * This handler sends a 206 Partial Content http status, the Content-Length      * header, the Content-Range header and the requested binary fragment. This      * is used when the request Range header contains only one range.      */
specifier|private
name|void
name|handleSingleRange
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|RemoteSession
name|session
parameter_list|,
name|RemoteBinaryId
name|binaryId
parameter_list|,
name|RemoteBinaryFilters
name|range
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|session
operator|.
name|readBinary
argument_list|(
name|binaryId
argument_list|,
name|range
argument_list|)
decl_stmt|;
name|long
name|fileLength
init|=
name|session
operator|.
name|readBinaryLength
argument_list|(
name|binaryId
argument_list|)
decl_stmt|;
name|long
name|rangeStart
init|=
name|range
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|long
name|rangeEnd
init|=
name|rangeStart
operator|+
name|range
operator|.
name|getCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PARTIAL_CONTENT
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|CONTENT_RANGE_HEADER
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%d-%d/%d"
argument_list|,
name|rangeStart
argument_list|,
name|rangeEnd
argument_list|,
name|fileLength
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
call|(
name|int
call|)
argument_list|(
name|rangeEnd
operator|-
name|rangeStart
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * RFC7233      *<p/>      * This handler sends a 206 Partial Content http status, the Content-Length      * header, Content-Type multipart/byteranges The payload contains all the      * requested binary fragments.      *<p/>      * This handler is used when multiple ranges are requested.      */
specifier|private
name|void
name|handleMultipleRanges
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|RemoteSession
name|session
parameter_list|,
name|RemoteBinaryId
name|binaryId
parameter_list|,
name|List
argument_list|<
name|RemoteBinaryFilters
argument_list|>
name|ranges
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|header
decl_stmt|;
name|long
name|rangeStart
decl_stmt|,
name|rangeEnd
decl_stmt|,
name|fileLength
decl_stmt|,
name|contentLength
decl_stmt|;
name|fileLength
operator|=
name|session
operator|.
name|readBinaryLength
argument_list|(
name|binaryId
argument_list|)
expr_stmt|;
comment|// Compute response content length
comment|// Create multipart headers
name|contentLength
operator|=
literal|0
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|multipartHeaders
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteBinaryFilters
name|range
range|:
name|ranges
control|)
block|{
name|rangeStart
operator|=
name|range
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|rangeEnd
operator|=
name|rangeStart
operator|+
name|range
operator|.
name|getCount
argument_list|()
operator|-
literal|1
expr_stmt|;
name|header
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"\n"
operator|+
literal|"--%s\n"
operator|+
literal|"Content-Type: application/octet-stream"
operator|+
literal|"Content-Content-Range: %d-%d/%d\n\n"
argument_list|,
name|MULTIPART_DELIMITER
argument_list|,
name|rangeStart
argument_list|,
name|rangeEnd
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|multipartHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|contentLength
operator|+=
name|header
operator|.
name|getBytes
argument_list|()
operator|.
name|length
expr_stmt|;
name|contentLength
operator|+=
name|range
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
comment|// Send response status and headers
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PARTIAL_CONTENT
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
operator|(
name|int
operator|)
name|contentLength
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"multipart/byteranges; boundary="
operator|+
name|MULTIPART_DELIMITER
argument_list|)
expr_stmt|;
comment|// Send requested ranges
name|RemoteBinaryFilters
name|range
decl_stmt|;
name|InputStream
name|in
decl_stmt|;
name|OutputStream
name|out
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RemoteBinaryFilters
argument_list|>
name|rangeIt
init|=
name|ranges
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|headerIt
init|=
name|multipartHeaders
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rangeIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|headerIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|range
operator|=
name|rangeIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|header
operator|=
name|headerIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|header
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
name|session
operator|.
name|readBinary
argument_list|(
name|binaryId
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Extract binary id from request path and return it      */
specifier|private
name|String
name|readBinaryId
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|REQUEST_PATTERN
operator|.
name|matcher
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"handler bound at the wrong path"
argument_list|)
throw|;
block|}
comment|/**      * This method parses the request Range header a list of ranges as      * RemoteBinaryFilters ( or null when the header is missing or contains      * invalid/malformed values      */
specifier|private
name|List
argument_list|<
name|RemoteBinaryFilters
argument_list|>
name|parseRequestRanges
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RemoteSession
name|session
parameter_list|,
name|RemoteBinaryId
name|binaryId
parameter_list|)
block|{
comment|// Check header exists
name|String
name|headerValue
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|RANGE_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Check header is bytes=*
name|Matcher
name|matcher
init|=
name|RANGE_HEADER_PATTERN
operator|.
name|matcher
argument_list|(
name|headerValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Iterate requested ranges
name|headerValue
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|headerValue
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteBinaryFilters
argument_list|>
name|ranges
init|=
operator|new
name|LinkedList
argument_list|<
name|RemoteBinaryFilters
argument_list|>
argument_list|()
decl_stmt|;
name|RemoteBinaryFilters
name|range
decl_stmt|;
name|long
name|fileLength
init|=
name|session
operator|.
name|readBinaryLength
argument_list|(
name|binaryId
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|range
operator|=
name|parseRange
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
comment|/**      * Parse a range extracted from the Range header and return a wrapped      * RemoteBinaryFilters instance for the range or null if the range is not      * valid or malformed.      *<p/>      * The returned RemoteBinaryFilters object will never return -1 in      * getCount.      */
specifier|private
name|RemoteBinaryFilters
name|parseRange
parameter_list|(
name|String
name|range
parameter_list|,
name|long
name|fileLength
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|RANGE_PATTERN
operator|.
name|matcher
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|long
name|start
decl_stmt|;
specifier|final
name|long
name|end
decl_stmt|;
comment|// Content-Range: X
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|==
literal|null
operator|||
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|start
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|end
operator|=
name|fileLength
operator|-
literal|1
expr_stmt|;
block|}
comment|// Content-Range: -X
elseif|else
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|end
operator|=
name|fileLength
operator|-
literal|1
expr_stmt|;
name|start
operator|=
name|end
operator|-
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
comment|// Content-Range: X-Y
else|else
block|{
name|start
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|end
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Simple range validation
if|if
condition|(
name|start
operator|<
literal|0
operator|||
name|end
argument_list|<
literal|0
operator|||
name|start
argument_list|>
name|end
operator|||
name|end
operator|>=
name|fileLength
operator|||
name|start
operator|>=
name|fileLength
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RemoteBinaryFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|end
operator|-
name|start
operator|+
literal|1
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

