begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|SegmentTarFixture
operator|.
name|SegmentTarFixtureBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentNodeStoreBuilder
operator|.
name|newRDBDocumentNodeStoreBuilder
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|OakFixture
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OAK_MEMORY
init|=
literal|"Oak-Memory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_MEMORY_NS
init|=
literal|"Oak-MemoryNS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_MONGO
init|=
literal|"Oak-Mongo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_MONGO_DS
init|=
literal|"Oak-Mongo-DS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_MONGO_NS
init|=
literal|"Oak-MongoNS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_RDB
init|=
literal|"Oak-RDB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_RDB_DS
init|=
literal|"Oak-RDB-DS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_SEGMENT_TAR
init|=
literal|"Oak-Segment-Tar"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_SEGMENT_TAR_DS
init|=
literal|"Oak-Segment-Tar-DS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_SEGMENT_TAR_COLD
init|=
literal|"Oak-Segment-Tar-Cold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_COMPOSITE_STORE
init|=
literal|"Oak-Composite-Store"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_COMPOSITE_MEMORY_STORE
init|=
literal|"Oak-Composite-Memory-Store"
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|String
name|unique
decl_stmt|;
specifier|protected
name|OakFixture
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|unique
operator|=
name|getUniqueDatabaseName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getUniqueDatabaseName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%d"
argument_list|,
name|name
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|Oak
name|getOak
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
specifier|abstract
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
specifier|abstract
name|void
name|tearDownCluster
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMemory
parameter_list|(
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMemory
argument_list|(
name|OAK_MEMORY
argument_list|,
name|cacheSize
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMemoryNS
parameter_list|(
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMemory
argument_list|(
name|OAK_MEMORY_NS
argument_list|,
name|cacheSize
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMemory
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|)
block|{
return|return
operator|new
name|OakFixture
argument_list|(
name|name
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Oak
name|getOak
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|Exception
block|{
name|Oak
name|oak
decl_stmt|;
name|oak
operator|=
name|newOak
argument_list|(
operator|new
name|MemoryNodeStore
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|oak
return|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|Oak
index|[]
name|cluster
init|=
operator|new
name|Oak
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Oak
name|oak
decl_stmt|;
name|oak
operator|=
name|newOak
argument_list|(
operator|new
name|MemoryNodeStore
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
index|[
name|i
index|]
operator|=
name|oak
expr_stmt|;
block|}
return|return
name|cluster
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDownCluster
parameter_list|()
block|{
comment|// nothing to do
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongo
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|dropDBAfterTest
parameter_list|,
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMongo
argument_list|(
name|OAK_MONGO
argument_list|,
name|uri
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongo
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|database
parameter_list|,
name|boolean
name|dropDBAfterTest
parameter_list|,
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMongo
argument_list|(
name|OAK_MONGO
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|database
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongoNS
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|dropDBAfterTest
parameter_list|,
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMongo
argument_list|(
name|OAK_MONGO_NS
argument_list|,
name|uri
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongoNS
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|database
parameter_list|,
name|boolean
name|dropDBAfterTest
parameter_list|,
name|long
name|cacheSize
parameter_list|)
block|{
return|return
name|getMongo
argument_list|(
name|OAK_MONGO_NS
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|database
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongo
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
name|String
name|database
parameter_list|,
specifier|final
name|boolean
name|dropDBAfterTest
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|,
specifier|final
name|boolean
name|useFileDataStore
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|fdsCacheInMB
parameter_list|)
block|{
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
name|database
operator|=
name|getUniqueDatabaseName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|String
name|uri
init|=
literal|"mongodb://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/"
operator|+
name|database
decl_stmt|;
return|return
name|getMongo
argument_list|(
name|name
argument_list|,
name|uri
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
name|useFileDataStore
argument_list|,
name|base
argument_list|,
name|fdsCacheInMB
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getMongo
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|boolean
name|dropDBAfterTest
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|,
specifier|final
name|boolean
name|useDataStore
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|)
block|{
return|return
operator|new
name|MongoFixture
argument_list|(
name|name
argument_list|,
name|uri
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
name|useDataStore
argument_list|,
name|base
argument_list|,
name|dsCacheInMB
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getRDB
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|jdbcuri
parameter_list|,
specifier|final
name|String
name|jdbcuser
parameter_list|,
specifier|final
name|String
name|jdbcpasswd
parameter_list|,
specifier|final
name|String
name|tablePrefix
parameter_list|,
specifier|final
name|boolean
name|dropDBAfterTest
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|,
specifier|final
name|int
name|vgcMaxAge
parameter_list|)
block|{
return|return
name|getRDB
argument_list|(
name|name
argument_list|,
name|jdbcuri
argument_list|,
name|jdbcuser
argument_list|,
name|jdbcpasswd
argument_list|,
name|tablePrefix
argument_list|,
name|dropDBAfterTest
argument_list|,
name|cacheSize
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|vgcMaxAge
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getRDB
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|jdbcuri
parameter_list|,
specifier|final
name|String
name|jdbcuser
parameter_list|,
specifier|final
name|String
name|jdbcpasswd
parameter_list|,
specifier|final
name|String
name|tablePrefix
parameter_list|,
specifier|final
name|boolean
name|dropDBAfterTest
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|,
specifier|final
name|boolean
name|useDataStore
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|,
specifier|final
name|int
name|vgcMaxAge
parameter_list|)
block|{
return|return
operator|new
name|OakFixture
argument_list|(
name|name
argument_list|)
block|{
specifier|private
name|DocumentNodeStore
index|[]
name|nodeStores
decl_stmt|;
specifier|private
name|VersionGarbageCollectionJob
name|versionGarbageCollectionJob
init|=
literal|null
decl_stmt|;
specifier|private
name|BlobStoreFixture
name|blobStoreFixture
decl_stmt|;
specifier|private
name|RDBOptions
name|getOptions
parameter_list|(
name|boolean
name|dropDBAFterTest
parameter_list|,
name|String
name|tablePrefix
parameter_list|)
block|{
return|return
operator|new
name|RDBOptions
argument_list|()
operator|.
name|dropTablesOnClose
argument_list|(
name|dropDBAfterTest
argument_list|)
operator|.
name|tablePrefix
argument_list|(
name|tablePrefix
argument_list|)
return|;
block|}
specifier|private
name|BlobStore
name|getBlobStore
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|useDataStore
condition|)
block|{
name|initializeBlobStoreFixture
argument_list|(
name|statsProvider
argument_list|)
expr_stmt|;
return|return
name|blobStoreFixture
operator|.
name|setUp
argument_list|()
return|;
block|}
else|else
block|{
name|DataSource
name|ds
init|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|jdbcuri
argument_list|,
name|jdbcuser
argument_list|,
name|jdbcpasswd
argument_list|)
decl_stmt|;
return|return
operator|new
name|RDBBlobStore
argument_list|(
name|ds
argument_list|,
name|getOptions
argument_list|(
name|dropDBAfterTest
argument_list|,
name|tablePrefix
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Oak
name|getOak
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|Exception
block|{
name|DataSource
name|ds
init|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|jdbcuri
argument_list|,
name|jdbcuser
argument_list|,
name|jdbcpasswd
argument_list|)
decl_stmt|;
name|DocumentNodeStoreBuilder
name|builder
init|=
name|newRDBDocumentNodeStoreBuilder
argument_list|()
operator|.
name|setRDBConnection
argument_list|(
name|ds
argument_list|,
name|getOptions
argument_list|(
name|dropDBAfterTest
argument_list|,
name|tablePrefix
argument_list|)
argument_list|)
operator|.
name|memoryCacheSize
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setLogging
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|getBlobStore
argument_list|(
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
return|return
name|newOak
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|Oak
index|[]
name|cluster
init|=
operator|new
name|Oak
index|[
name|n
index|]
decl_stmt|;
name|nodeStores
operator|=
operator|new
name|DocumentNodeStore
index|[
name|cluster
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlobStore
name|blobStore
init|=
name|getBlobStore
argument_list|(
name|statsProvider
argument_list|)
decl_stmt|;
name|DataSource
name|ds
init|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|jdbcuri
argument_list|,
name|jdbcuser
argument_list|,
name|jdbcpasswd
argument_list|)
decl_stmt|;
name|DocumentNodeStoreBuilder
name|builder
init|=
name|newRDBDocumentNodeStoreBuilder
argument_list|()
operator|.
name|setRDBConnection
argument_list|(
name|ds
argument_list|,
name|getOptions
argument_list|(
name|dropDBAfterTest
argument_list|,
name|tablePrefix
argument_list|)
argument_list|)
operator|.
name|memoryCacheSize
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|setStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
comment|// FIXME: OAK-3389
operator|.
name|setLeaseCheck
argument_list|(
literal|false
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|setLogging
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
name|nodeStores
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
index|[
name|i
index|]
operator|=
name|newOak
argument_list|(
name|nodeStores
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vgcMaxAge
operator|>
literal|0
operator|&&
name|nodeStores
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|versionGarbageCollectionJob
operator|=
operator|new
name|VersionGarbageCollectionJob
argument_list|(
name|nodeStores
index|[
literal|0
index|]
argument_list|,
name|vgcMaxAge
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|versionGarbageCollectionJob
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|cluster
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDownCluster
parameter_list|()
block|{
name|String
name|dropped
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|versionGarbageCollectionJob
operator|!=
literal|null
condition|)
block|{
name|versionGarbageCollectionJob
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|DocumentNodeStore
name|ns
range|:
name|nodeStores
control|)
block|{
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|instanceof
name|RDBDocumentStore
condition|)
block|{
name|dropped
operator|+=
operator|(
operator|(
name|RDBDocumentStore
operator|)
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|)
operator|.
name|getDroppedTables
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dropDBAfterTest
condition|)
block|{
if|if
condition|(
name|blobStoreFixture
operator|!=
literal|null
condition|)
block|{
name|blobStoreFixture
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dropped
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"dropdb was set, but tables have not been dropped"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|initializeBlobStoreFixture
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
if|if
condition|(
name|useDataStore
operator|&&
name|blobStoreFixture
operator|==
literal|null
condition|)
block|{
name|blobStoreFixture
operator|=
name|BlobStoreFixture
operator|.
name|create
argument_list|(
name|base
argument_list|,
literal|true
argument_list|,
name|dsCacheInMB
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|VersionGarbageCollectionJob
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OakFixture
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|final
name|VersionGarbageCollector
name|vgc
decl_stmt|;
specifier|final
name|long
name|maxAge
decl_stmt|;
specifier|public
name|VersionGarbageCollectionJob
parameter_list|(
name|DocumentNodeStore
name|dns
parameter_list|,
name|long
name|maxAge
parameter_list|)
block|{
name|this
operator|.
name|vgc
operator|=
name|dns
operator|.
name|getVersionGarbageCollector
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAge
operator|=
name|maxAge
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
try|try
block|{
name|VersionGCStats
name|stats
init|=
name|this
operator|.
name|vgc
operator|.
name|gc
argument_list|(
name|maxAge
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"vgc: "
operator|+
name|stats
argument_list|)
expr_stmt|;
comment|// org.apache.jackrabbit.oak.plugins.document.NodeDocument.MODIFIED_IN_SECS_RESOLUTION
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"While running GC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|vgc
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|OakFixture
name|getSegmentTar
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|maxFileSizeMB
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|,
specifier|final
name|boolean
name|memoryMapping
parameter_list|,
specifier|final
name|boolean
name|useBlobStore
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|,
specifier|final
name|boolean
name|withColdStandby
parameter_list|,
specifier|final
name|int
name|syncInterval
parameter_list|,
specifier|final
name|boolean
name|shareBlobStore
parameter_list|)
block|{
name|SegmentTarFixtureBuilder
name|builder
init|=
name|SegmentTarFixtureBuilder
operator|.
name|segmentTarFixtureBuilder
argument_list|(
name|name
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withMaxFileSize
argument_list|(
name|maxFileSizeMB
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|cacheSizeMB
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|useBlobStore
argument_list|)
operator|.
name|withDSCacheSize
argument_list|(
name|dsCacheInMB
argument_list|)
expr_stmt|;
return|return
operator|new
name|SegmentTarFixture
argument_list|(
name|builder
argument_list|,
name|withColdStandby
argument_list|,
name|syncInterval
argument_list|,
name|shareBlobStore
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getVanillaSegmentTar
parameter_list|(
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|maxFileSizeMB
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|,
specifier|final
name|boolean
name|memoryMapping
parameter_list|)
block|{
return|return
name|getSegmentTar
argument_list|(
name|OakFixture
operator|.
name|OAK_SEGMENT_TAR
argument_list|,
name|base
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getSegmentTarWithDataStore
parameter_list|(
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|maxFileSizeMB
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|,
specifier|final
name|boolean
name|memoryMapping
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|)
block|{
return|return
name|getSegmentTar
argument_list|(
name|OakFixture
operator|.
name|OAK_SEGMENT_TAR_DS
argument_list|,
name|base
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|,
literal|true
argument_list|,
name|dsCacheInMB
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getSegmentTarWithColdStandby
parameter_list|(
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|maxFileSizeMB
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|,
specifier|final
name|boolean
name|memoryMapping
parameter_list|,
specifier|final
name|boolean
name|useBlobStore
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|,
specifier|final
name|int
name|syncInterval
parameter_list|,
specifier|final
name|boolean
name|shareBlobStore
parameter_list|)
block|{
return|return
name|getSegmentTar
argument_list|(
name|OakFixture
operator|.
name|OAK_SEGMENT_TAR_COLD
argument_list|,
name|base
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|,
name|useBlobStore
argument_list|,
name|dsCacheInMB
argument_list|,
literal|true
argument_list|,
name|syncInterval
argument_list|,
name|shareBlobStore
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getCompositeStore
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|maxFileSizeMB
parameter_list|,
specifier|final
name|int
name|cacheSizeMB
parameter_list|,
specifier|final
name|boolean
name|memoryMapping
parameter_list|,
specifier|final
name|int
name|mounts
parameter_list|,
specifier|final
name|int
name|pathsPerMount
parameter_list|)
block|{
return|return
operator|new
name|CompositeStoreFixture
argument_list|(
name|name
argument_list|,
name|base
argument_list|,
name|maxFileSizeMB
argument_list|,
name|cacheSizeMB
argument_list|,
name|memoryMapping
argument_list|,
name|mounts
argument_list|,
name|pathsPerMount
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OakFixture
name|getCompositeMemoryStore
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|mounts
parameter_list|,
specifier|final
name|int
name|pathsPerMount
parameter_list|)
block|{
return|return
operator|new
name|CompositeStoreFixture
argument_list|(
name|name
argument_list|,
name|mounts
argument_list|,
name|pathsPerMount
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|MongoFixture
extends|extends
name|OakFixture
block|{
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|dropDBAfterTest
decl_stmt|;
specifier|private
specifier|final
name|long
name|cacheSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useDataStore
decl_stmt|;
specifier|private
specifier|final
name|File
name|base
decl_stmt|;
specifier|private
specifier|final
name|int
name|dsCacheInMB
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|BlobStoreFixture
name|blobStoreFixture
decl_stmt|;
specifier|public
name|MongoFixture
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|boolean
name|dropDBAfterTest
parameter_list|,
specifier|final
name|long
name|cacheSize
parameter_list|,
specifier|final
name|boolean
name|useDataStore
parameter_list|,
specifier|final
name|File
name|base
parameter_list|,
specifier|final
name|int
name|dsCacheInMB
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|dropDBAfterTest
operator|=
name|dropDBAfterTest
expr_stmt|;
name|this
operator|.
name|cacheSize
operator|=
name|cacheSize
expr_stmt|;
name|this
operator|.
name|useDataStore
operator|=
name|useDataStore
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|dsCacheInMB
operator|=
name|dsCacheInMB
expr_stmt|;
block|}
specifier|public
name|DocumentNodeStoreBuilder
name|getBuilder
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|MongoConnection
name|mongo
init|=
operator|new
name|MongoConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|DocumentNodeStoreBuilder
name|builder
init|=
operator|new
name|MongoDocumentNodeStoreBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeStore
name|build
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|super
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeStores
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|ns
return|;
block|}
block|}
operator|.
name|setMongoDB
argument_list|(
name|mongo
operator|.
name|getDB
argument_list|()
argument_list|)
operator|.
name|memoryCacheSize
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setLogging
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|configurePersistentCache
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|setupBlobStore
argument_list|(
name|builder
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
name|getOak
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newOak
argument_list|(
name|getBuilder
argument_list|(
name|clusterId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|DocumentNodeStoreBuilder
index|[]
name|builders
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|Oak
index|[]
name|cluster
init|=
operator|new
name|Oak
index|[
name|builders
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cluster
index|[
name|i
index|]
operator|=
name|newOak
argument_list|(
name|builders
index|[
name|i
index|]
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cluster
return|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentNodeStoreBuilder
index|[]
name|builders
init|=
operator|new
name|DocumentNodeStoreBuilder
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|getBuilder
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|setUpCluster
argument_list|(
name|builders
argument_list|,
name|statsProvider
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDownCluster
parameter_list|()
block|{
for|for
control|(
name|DocumentNodeStore
name|ns
range|:
name|nodeStores
control|)
block|{
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|nodeStores
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dropDBAfterTest
condition|)
block|{
try|try
block|{
name|MongoConnection
name|mongo
init|=
operator|new
name|MongoConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|mongo
operator|.
name|getDB
argument_list|()
operator|.
name|dropDatabase
argument_list|()
expr_stmt|;
name|mongo
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|blobStoreFixture
operator|!=
literal|null
condition|)
block|{
name|blobStoreFixture
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|setupBlobStore
parameter_list|(
name|DocumentNodeStoreBuilder
name|builder
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
name|initializeBlobStoreFixture
argument_list|(
name|statsProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobStoreFixture
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBlobStore
argument_list|(
name|blobStoreFixture
operator|.
name|setUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeBlobStoreFixture
parameter_list|(
name|StatisticsProvider
name|statsProvider
parameter_list|)
block|{
if|if
condition|(
name|blobStoreFixture
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|useDataStore
condition|)
block|{
name|blobStoreFixture
operator|=
name|BlobStoreFixture
operator|.
name|create
argument_list|(
name|base
argument_list|,
literal|true
argument_list|,
name|dsCacheInMB
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configurePersistentCache
parameter_list|(
name|DocumentNodeStoreBuilder
name|builder
parameter_list|)
block|{
comment|//TODO Persistent cache should be removed in teardown
name|builder
operator|.
name|setPersistentCache
argument_list|(
literal|"target/persistentCache,time"
argument_list|)
expr_stmt|;
name|String
name|persistentCacheIncludes
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"persistentCacheIncludes"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|persistentCacheIncludes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|persistentCacheIncludes
argument_list|)
control|)
block|{
name|p
operator|=
name|p
operator|!=
literal|null
condition|?
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|p
operator|.
name|trim
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|PathFilter
name|pf
init|=
operator|new
name|PathFilter
argument_list|(
name|paths
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Configuring persistent cache to only cache nodes under paths "
operator|+
name|paths
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|cachePredicate
init|=
name|path
lambda|->
name|path
operator|!=
literal|null
operator|&&
name|pf
operator|.
name|filter
argument_list|(
name|path
argument_list|)
operator|==
name|PathFilter
operator|.
name|Result
operator|.
name|INCLUDE
decl_stmt|;
name|builder
operator|.
name|setNodeCachePredicate
argument_list|(
name|cachePredicate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|Oak
name|newOak
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
return|return
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

