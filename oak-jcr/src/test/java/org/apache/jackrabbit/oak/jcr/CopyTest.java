begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CopyTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|public
name|CopyTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
name|session
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Node
name|foo
init|=
name|root
operator|.
name|addNode
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"stringProp"
argument_list|,
literal|"stringVal"
argument_list|)
expr_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"intProp"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"mvProp"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
block|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|2
argument_list|)
block|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|3
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/copied"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/copied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-915"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testCopyReferenceableNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/copied"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/copied"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|copy
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"target/copied"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|isNodeType
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|copy
operator|.
name|getUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNode
argument_list|(
literal|"source/node"
argument_list|)
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-915"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testCopyReferenceableChildNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"source"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"child"
argument_list|)
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|node
operator|.
name|addNode
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|copy
argument_list|(
name|TEST_PATH
operator|+
literal|"/source/node"
argument_list|,
name|TEST_PATH
operator|+
literal|"/target/copied"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"source/node"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|hasNode
argument_list|(
literal|"target/copied"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|childCopy
init|=
name|node
operator|.
name|getNode
argument_list|(
literal|"target/copied/child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childCopy
operator|.
name|isNodeType
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|childCopy
operator|.
name|getUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNode
argument_list|(
literal|"source/node/child"
argument_list|)
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

