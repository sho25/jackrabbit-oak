begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * A value with a timestamp.  *  * @param<T> the value type  */
end_comment

begin_class
specifier|public
class|class
name|Timestamped
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|T
name|value
decl_stmt|;
specifier|private
specifier|final
name|long
name|operationTimestamp
decl_stmt|;
specifier|public
name|Timestamped
parameter_list|(
name|T
name|value
parameter_list|,
name|long
name|operationTimestamp
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|operationTimestamp
operator|=
name|operationTimestamp
expr_stmt|;
block|}
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|long
name|getOperationTimestamp
parameter_list|()
block|{
return|return
name|operationTimestamp
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Function
argument_list|<
name|Timestamped
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|getExtractFunction
parameter_list|()
block|{
return|return
operator|new
name|Function
argument_list|<
name|Timestamped
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|apply
parameter_list|(
name|Timestamped
argument_list|<
name|T
argument_list|>
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|input
operator|.
name|value
return|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"Timestamped["
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|operationTimestamp
argument_list|)
operator|.
name|append
argument_list|(
literal|")]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

