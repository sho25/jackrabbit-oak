begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_comment
comment|/**  * Memory cache for segments.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentCache
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MEMORY_CACHE_SIZE
init|=
literal|1
operator|<<
literal|28
decl_stmt|;
comment|// 256MB
specifier|protected
specifier|final
name|int
name|maximumSize
decl_stmt|;
specifier|protected
name|int
name|currentSize
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|segments
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
argument_list|(
literal|1000
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|eldest
parameter_list|)
block|{
if|if
condition|(
name|currentSize
operator|>
name|maximumSize
condition|)
block|{
name|currentSize
operator|-=
name|eldest
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|currentlyLoading
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|SegmentCache
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
name|this
operator|.
name|maximumSize
operator|=
name|maximumSize
expr_stmt|;
block|}
specifier|public
specifier|static
name|SegmentCache
name|create
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|DEFAULT_MEMORY_CACHE_SIZE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SegmentCache
name|create
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.segmentCacheLIRS"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|SegmentCacheLIRS
argument_list|(
name|maximumSize
argument_list|)
return|;
block|}
return|return
operator|new
name|SegmentCache
argument_list|(
name|maximumSize
argument_list|)
return|;
block|}
specifier|public
name|Segment
name|getSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|,
name|Callable
argument_list|<
name|Segment
argument_list|>
name|loader
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Segment
name|segment
init|=
name|segments
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
while|while
condition|(
name|segment
operator|==
literal|null
operator|&&
name|currentlyLoading
operator|.
name|contains
argument_list|(
name|segmentId
argument_list|)
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
name|segment
operator|=
name|segments
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
return|return
name|segment
return|;
block|}
else|else
block|{
name|currentlyLoading
operator|.
name|add
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
block|}
block|}
name|Segment
name|segment
init|=
name|loader
operator|.
name|call
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|segments
operator|.
name|put
argument_list|(
name|segmentId
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|currentSize
operator|+=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
name|currentlyLoading
operator|.
name|remove
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|segment
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addSegment
parameter_list|(
name|Segment
name|segment
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|segments
operator|.
name|containsKey
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
name|currentlyLoading
operator|.
name|contains
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|.
name|put
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|currentSize
operator|+=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|currentlyLoading
operator|.
name|contains
argument_list|(
name|segmentId
argument_list|)
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|Segment
name|segment
init|=
name|segments
operator|.
name|remove
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|currentSize
operator|-=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|currentlyLoading
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|segments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentSize
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * A segment cache that internally uses the LIRS cache.      */
specifier|static
class|class
name|SegmentCacheLIRS
extends|extends
name|SegmentCache
block|{
specifier|private
name|CacheLIRS
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|SegmentCacheLIRS
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
name|super
argument_list|(
name|maximumSize
argument_list|)
expr_stmt|;
name|cache
operator|=
name|CacheLIRS
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
name|maximumSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Segment
name|getSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|,
name|Callable
argument_list|<
name|Segment
argument_list|>
name|loader
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|segmentId
argument_list|,
name|loader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSegment
parameter_list|(
name|Segment
name|segment
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSegment
parameter_list|(
name|UUID
name|segmentId
parameter_list|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

