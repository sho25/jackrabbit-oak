begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_comment
comment|/**  * UserProvider deals with with creating and resolving repository content  * associated with {@code User}s and {@code Group}s.  */
end_comment

begin_interface
specifier|public
interface|interface
name|UserProvider
block|{
annotation|@
name|Nonnull
name|Tree
name|createUser
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|intermediateJcrPath
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
annotation|@
name|Nonnull
name|Tree
name|createGroup
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|intermediateJcrPath
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
annotation|@
name|CheckForNull
name|Tree
name|getAuthorizable
parameter_list|(
name|String
name|authorizableId
parameter_list|)
function_decl|;
annotation|@
name|CheckForNull
name|Tree
name|getAuthorizable
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|Type
name|authorizableType
parameter_list|)
function_decl|;
annotation|@
name|CheckForNull
name|Tree
name|getAuthorizableByPath
parameter_list|(
name|String
name|authorizableOakPath
parameter_list|)
function_decl|;
annotation|@
name|CheckForNull
name|Tree
name|getAuthorizableByPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
function_decl|;
annotation|@
name|CheckForNull
name|String
name|getAuthorizableId
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|,
name|Type
name|authorizableType
parameter_list|)
function_decl|;
comment|/**      * Find the authorizable trees matching the following search parameters within      * the sub-tree defined by an authorizable tree:      *      * @param propertyRelPaths An array of property names or relative paths      * pointing to properties within the tree defined by a given authorizable node.      * @param value The property value to look for.      * @param ntNames An array of node type names to restrict the search within      * the authorizable tree to a subset of nodes that match any of the node      * type names; {@code null} indicates that no filtering by node type is      * desired. Specifying a node type name that defines an authorizable node      * )e.g. {@link UserConstants#NT_REP_USER rep:User} will limit the search to      * properties defined with the authorizable node itself instead of searching      * the complete sub-tree.      * @param exact A boolean flag indicating if the value must match exactly or not.s      * @param maxSize The maximal number of search results to look for.      * @param authorizableType Filter the search results to only return authorizable      * trees of a given type. Passing {@link Type#AUTHORIZABLE} indicates that      * no filtering for a specific authorizable type is desired. However, properties      * might still be search in the complete sub-tree of authorizables depending      * on the other query parameters.      * @return An iterator of authorizable trees that match the specified      * search parameters and filters or an empty iterator if no result can be      * found.      */
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
index|[]
name|propertyRelPaths
parameter_list|,
name|String
name|value
parameter_list|,
name|String
index|[]
name|ntNames
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|Type
name|authorizableType
parameter_list|)
function_decl|;
name|boolean
name|isAuthorizableType
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|,
name|Type
name|authorizableType
parameter_list|)
function_decl|;
name|boolean
name|isAdminUser
parameter_list|(
name|Tree
name|userTree
parameter_list|)
function_decl|;
name|void
name|setProtectedProperty
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|propertyType
parameter_list|)
function_decl|;
name|void
name|setProtectedProperty
parameter_list|(
name|Tree
name|v
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|int
name|propertyType
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

