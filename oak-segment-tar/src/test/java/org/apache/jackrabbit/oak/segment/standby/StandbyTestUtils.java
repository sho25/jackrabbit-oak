begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentIdProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_class
specifier|public
class|class
name|StandbyTestUtils
block|{
specifier|private
name|StandbyTestUtils
parameter_list|()
block|{
comment|// Prevent instantiation.
block|}
specifier|public
specifier|static
name|RecordId
name|mockRecordId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|new
name|RecordId
argument_list|(
operator|new
name|SegmentId
argument_list|(
name|mock
argument_list|(
name|SegmentStore
operator|.
name|class
argument_list|)
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|)
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Segment
name|mockSegment
parameter_list|(
name|UUID
name|uuid
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|SegmentStore
name|store
init|=
name|mock
argument_list|(
name|SegmentStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|SegmentIdProvider
name|idProvider
init|=
name|mock
argument_list|(
name|SegmentIdProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|SegmentReader
name|reader
init|=
name|mock
argument_list|(
name|SegmentReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|msb
init|=
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
name|SegmentId
name|id
init|=
operator|new
name|SegmentId
argument_list|(
name|store
argument_list|,
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
return|return
operator|new
name|Segment
argument_list|(
name|idProvider
argument_list|,
name|reader
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putBytes
argument_list|(
name|data
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|padToLong
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|hash
parameter_list|(
name|byte
name|mask
parameter_list|,
name|long
name|blobLength
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putByte
argument_list|(
name|mask
argument_list|)
operator|.
name|putLong
argument_list|(
name|blobLength
argument_list|)
operator|.
name|putBytes
argument_list|(
name|data
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|padToLong
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
name|createMask
parameter_list|(
name|int
name|currentChunk
parameter_list|,
name|int
name|totalChunks
parameter_list|)
block|{
name|byte
name|mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|currentChunk
operator|==
literal|1
condition|)
block|{
name|mask
operator|=
call|(
name|byte
call|)
argument_list|(
name|mask
operator||
operator|(
literal|1
operator|<<
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentChunk
operator|==
name|totalChunks
condition|)
block|{
name|mask
operator|=
call|(
name|byte
call|)
argument_list|(
name|mask
operator||
operator|(
literal|1
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mask
return|;
block|}
specifier|public
specifier|static
name|ByteBuf
name|createBlobChunkBuffer
parameter_list|(
name|byte
name|header
parameter_list|,
name|long
name|blobLength
parameter_list|,
name|String
name|blobId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|byte
name|mask
parameter_list|)
block|{
name|byte
index|[]
name|blobIdBytes
init|=
name|blobId
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|Unpooled
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|writeInt
argument_list|(
literal|1
operator|+
literal|1
operator|+
literal|8
operator|+
literal|4
operator|+
name|blobIdBytes
operator|.
name|length
operator|+
literal|8
operator|+
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeByte
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeByte
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeLong
argument_list|(
name|blobLength
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeInt
argument_list|(
name|blobIdBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|blobIdBytes
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeLong
argument_list|(
name|hash
argument_list|(
name|mask
argument_list|,
name|blobLength
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_class

end_unit

