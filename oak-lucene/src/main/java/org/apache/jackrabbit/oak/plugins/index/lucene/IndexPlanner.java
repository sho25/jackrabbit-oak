begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|FacetHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|ValuePatternUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextContains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SCORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getAncestorPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getDepth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|OrderEntry
import|;
end_import

begin_class
class|class
name|IndexPlanner
block|{
specifier|public
specifier|static
name|int
name|DEFAULT_PROPERTY_WEIGHT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.lucene.defaultPropertyWeight"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FLAG_ENTRY_COUNT
init|=
literal|"oak.lucene.useActualEntryCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexPlanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
decl_stmt|;
specifier|private
name|IndexNode
name|indexNode
decl_stmt|;
specifier|private
name|PlanResult
name|result
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useActualEntryCount
init|=
literal|false
decl_stmt|;
static|static
block|{
name|useActualEntryCount
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|FLAG_ENTRY_COUNT
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useActualEntryCount
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"System property {} found to be false. IndexPlanner would use a default entryCount of 1000 instead"
operator|+
literal|" of using the actual entry count"
argument_list|,
name|FLAG_ENTRY_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|IndexPlanner
parameter_list|(
name|IndexNode
name|indexNode
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|)
block|{
name|this
operator|.
name|indexNode
operator|=
name|indexNode
expr_stmt|;
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|indexNode
operator|.
name|getDefinition
argument_list|()
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|sortOrder
operator|=
name|sortOrder
expr_stmt|;
block|}
name|IndexPlan
name|getPlan
parameter_list|()
block|{
name|IndexPlan
operator|.
name|Builder
name|builder
init|=
name|getPlanBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|isTestMode
argument_list|()
condition|)
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|notSupportedFeature
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"No plan found for filter [%s] "
operator|+
literal|"while using definition [%s] and testMode is found to be enabled"
argument_list|,
name|filter
argument_list|,
name|definition
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
name|builder
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|1
argument_list|)
operator|.
name|setCostPerExecution
argument_list|(
literal|1e-3
argument_list|)
operator|.
name|setCostPerEntry
argument_list|(
literal|1e-3
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|!=
literal|null
condition|?
name|builder
operator|.
name|build
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IndexPlanner{"
operator|+
literal|"indexPath='"
operator|+
name|indexPath
operator|+
literal|'\''
operator|+
literal|", filter="
operator|+
name|filter
operator|+
literal|", sortOrder="
operator|+
name|sortOrder
operator|+
literal|'}'
return|;
block|}
comment|//For tests
specifier|static
name|void
name|setUseActualEntryCount
parameter_list|(
name|boolean
name|useActualEntryCount
parameter_list|)
block|{
name|IndexPlanner
operator|.
name|useActualEntryCount
operator|=
name|useActualEntryCount
expr_stmt|;
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|getPlanBuilder
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Evaluating plan with index definition {}"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrongIndex
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|definition
operator|.
name|getVersion
argument_list|()
operator|.
name|isAtLeast
argument_list|(
name|IndexFormatVersion
operator|.
name|V2
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Index is old format. Not supported"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//Query Fulltext and Index does not support fulltext
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexingRule
name|indexingRule
init|=
name|getApplicableRule
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexingRule
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//Query Fulltext and indexing rule does not support fulltext
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|indexingRule
operator|.
name|isFulltextEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|checkForQueryPaths
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Opting out due mismatch between path restriction {} and query paths {}"
argument_list|,
name|filter
operator|.
name|getPath
argument_list|()
argument_list|,
name|definition
operator|.
name|getQueryPaths
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|result
operator|=
operator|new
name|PlanResult
argument_list|(
name|indexPath
argument_list|,
name|definition
argument_list|,
name|indexingRule
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|hasFunctionDefined
argument_list|()
operator|&&
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|definition
operator|.
name|getFunctionName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|getNativeFunctionPlanBuilder
argument_list|(
name|indexingRule
operator|.
name|getBaseNodeType
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|indexedProps
init|=
name|newArrayListWithCapacity
argument_list|(
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|functionIndex
range|:
name|indexingRule
operator|.
name|getFunctionRestrictions
argument_list|()
control|)
block|{
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
name|String
name|f
init|=
name|functionIndex
operator|.
name|function
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|propertyName
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|indexedProps
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|result
operator|.
name|propDefns
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|functionIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Optimization - Go further only if any of the property is configured
comment|//for property index
name|List
argument_list|<
name|String
argument_list|>
name|facetFields
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|ntBaseRule
init|=
name|NT_BASE
operator|.
name|equals
argument_list|(
name|indexingRule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|relativePropDefns
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexingRule
operator|.
name|propertyIndexEnabled
condition|)
block|{
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
if|if
condition|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|QueryConstants
operator|.
name|FUNCTION_RESTRICTION_PREFIX
argument_list|)
condition|)
block|{
comment|// function-based indexes were handled before
continue|continue;
block|}
if|if
condition|(
name|QueryConstants
operator|.
name|REP_FACET
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|facetFields
operator|.
name|add
argument_list|(
name|FacetHelper
operator|.
name|parseFacetField
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
decl_stmt|;
name|boolean
name|relativeProps
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
operator|&&
name|ntBaseRule
condition|)
block|{
comment|//Direct match not possible. Check for relative property definition
comment|//i.e. if no match found for jcr:content/@keyword then check if
comment|//property definition exists for 'keyword'
name|pd
operator|=
name|getSimpleProperty
argument_list|(
name|indexingRule
argument_list|,
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|relativeProps
operator|=
name|pd
operator|!=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|propertyIndexEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|isNullRestriction
argument_list|()
operator|&&
operator|!
name|pd
operator|.
name|nullCheckEnabled
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|matchesValuePattern
argument_list|(
name|pr
argument_list|,
name|pd
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//A property definition with weight == 0 is only meant to be used
comment|//with some other definitions
if|if
condition|(
name|pd
operator|.
name|weight
operator|!=
literal|0
operator|&&
operator|!
name|relativeProps
condition|)
block|{
name|indexedProps
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relativeProps
condition|)
block|{
name|relativePropDefns
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|propDefns
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|evalNodeTypeRestrictions
init|=
name|canEvalNodeTypeRestrictions
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|evalPathRestrictions
init|=
name|canEvalPathRestrictions
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|canEvalAlFullText
init|=
name|canEvalAllFullText
argument_list|(
name|indexingRule
argument_list|,
name|ft
argument_list|)
decl_stmt|;
name|boolean
name|canEvalNodeNameRestriction
init|=
name|canEvalNodeNameRestriction
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
operator|!
name|canEvalAlFullText
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|indexedProps
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|relativePropDefns
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|canEvalAlFullText
condition|)
block|{
name|indexedProps
operator|=
name|planForRelativeProperties
argument_list|(
name|relativePropDefns
argument_list|)
expr_stmt|;
block|}
comment|//Fulltext expression can also be like jcr:contains(jcr:content/metadata/@format, 'image')
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
init|=
name|createSortOrder
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
name|boolean
name|canSort
init|=
name|canSortByProperty
argument_list|(
name|sortOrder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexedProps
operator|.
name|isEmpty
argument_list|()
operator|||
name|canSort
operator|||
name|ft
operator|!=
literal|null
operator|||
name|evalPathRestrictions
operator|||
name|evalNodeTypeRestrictions
operator|||
name|canEvalNodeNameRestriction
condition|)
block|{
name|int
name|costPerEntryFactor
init|=
literal|1
decl_stmt|;
name|costPerEntryFactor
operator|+=
name|sortOrder
operator|.
name|size
argument_list|()
expr_stmt|;
name|IndexPlan
operator|.
name|Builder
name|plan
init|=
name|defaultPlan
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plan
operator|.
name|setSortOrder
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|facetFields
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|plan
operator|.
name|setAttribute
argument_list|(
name|FacetHelper
operator|.
name|ATTR_FACET_FIELDS
argument_list|,
name|facetFields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|enableNonFullTextConstraints
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|evalNodeTypeRestrictions
condition|)
block|{
name|result
operator|.
name|enableNodeTypeEvaluation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|canEvalNodeNameRestriction
condition|)
block|{
name|result
operator|.
name|enableNodeNameRestriction
argument_list|()
expr_stmt|;
block|}
comment|// Set a index based guess here. Unique would set its own value below
if|if
condition|(
name|useActualEntryCount
operator|&&
operator|!
name|definition
operator|.
name|isEntryCountDefined
argument_list|()
condition|)
block|{
name|int
name|maxPossibleNumDocs
init|=
name|getMaxPossibleNumDocs
argument_list|(
name|result
operator|.
name|propDefns
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxPossibleNumDocs
operator|>=
literal|0
condition|)
block|{
name|plan
operator|.
name|setEstimatedEntryCount
argument_list|(
name|maxPossibleNumDocs
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sortOrder
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ft
operator|==
literal|null
condition|)
block|{
name|boolean
name|uniqueIndexFound
init|=
name|planForSyncIndexes
argument_list|(
name|indexingRule
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueIndexFound
condition|)
block|{
comment|//For unique index there would be at max 1 entry
name|plan
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plan
operator|.
name|setCostPerEntry
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
operator|/
name|costPerEntryFactor
argument_list|)
return|;
block|}
comment|//TODO Support for property existence queries
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|matchesValuePattern
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|,
name|PropertyDefinition
name|pd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pd
operator|.
name|valuePattern
operator|.
name|matchesAll
argument_list|()
condition|)
block|{
comment|//So we have a valuePattern defined. So determine if
comment|//this index can return a plan based on values
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|ValuePatternUtil
operator|.
name|getAllValues
argument_list|(
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
comment|// "is not null" condition, but we have a value pattern
comment|// that doesn't match everything
comment|// case of like search
name|String
name|prefix
init|=
name|ValuePatternUtil
operator|.
name|getLongestPrefix
argument_list|(
name|filter
argument_list|,
name|pr
operator|.
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pd
operator|.
name|valuePattern
operator|.
name|matchesPrefix
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
comment|// region match which is not fully in the pattern
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// we have a value pattern, for example (a|b),
comment|// but we search (also) for 'c': can't match
if|if
condition|(
operator|!
name|pd
operator|.
name|valuePattern
operator|.
name|matchesAll
argument_list|(
name|values
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|wrongIndex
parameter_list|()
block|{
comment|// REMARK: similar code is used in oak-core, PropertyIndex
comment|// skip index if "option(index ...)" doesn't match
name|PropertyRestriction
name|indexName
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|IndexConstants
operator|.
name|INDEX_NAME_OPTION
argument_list|)
decl_stmt|;
name|boolean
name|wrong
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|indexName
operator|!=
literal|null
operator|&&
name|indexName
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|indexName
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|String
name|thisName
init|=
name|definition
operator|.
name|getIndexName
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisName
operator|!=
literal|null
condition|)
block|{
name|thisName
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|thisName
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// index name specified, and matches
return|return
literal|false
return|;
block|}
block|}
name|wrong
operator|=
literal|true
expr_stmt|;
block|}
name|PropertyRestriction
name|indexTag
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|IndexConstants
operator|.
name|INDEX_TAG_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexTag
operator|!=
literal|null
operator|&&
name|indexTag
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
comment|// index tag specified
name|String
index|[]
name|tags
init|=
name|definition
operator|.
name|getIndexTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|tags
operator|==
literal|null
condition|)
block|{
comment|// no tag
return|return
literal|true
return|;
block|}
name|String
name|tag
init|=
name|indexTag
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tags
control|)
block|{
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
comment|// tag matches
return|return
literal|false
return|;
block|}
block|}
comment|// no tag matches
return|return
literal|true
return|;
block|}
comment|// no tag specified
return|return
name|wrong
return|;
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|getNativeFunctionPlanBuilder
parameter_list|(
name|String
name|indexingRuleBaseNodeType
parameter_list|)
block|{
name|boolean
name|canHandleNativeFunction
init|=
literal|true
decl_stmt|;
name|PropertyValue
name|pv
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|definition
operator|.
name|getFunctionName
argument_list|()
argument_list|)
operator|.
name|first
decl_stmt|;
name|String
name|query
init|=
name|pv
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"suggest?term="
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isSuggestEnabled
argument_list|()
condition|)
block|{
name|canHandleNativeFunction
operator|=
name|indexingRuleBaseNodeType
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canHandleNativeFunction
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"spellcheck?term="
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isSpellcheckEnabled
argument_list|()
condition|)
block|{
name|canHandleNativeFunction
operator|=
name|indexingRuleBaseNodeType
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canHandleNativeFunction
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//Suggestion and SpellCheck use virtual paths which is same for all results
if|if
condition|(
name|canHandleNativeFunction
condition|)
block|{
name|result
operator|.
name|disableUniquePaths
argument_list|()
expr_stmt|;
block|}
comment|//If native function can be handled by this index then ensure
comment|// that lowest cost if returned
return|return
name|canHandleNativeFunction
condition|?
name|defaultPlan
argument_list|()
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Check if there is a mismatch between QueryPaths associated with index      * and path restriction specified in query       * @return true if QueryPaths and path restrictions do not have any conflict      */
specifier|private
name|boolean
name|checkForQueryPaths
parameter_list|()
block|{
name|String
index|[]
name|queryPaths
init|=
name|definition
operator|.
name|getQueryPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryPaths
operator|==
literal|null
condition|)
block|{
comment|//No explicit value specified. Assume '/' which results in true
return|return
literal|true
return|;
block|}
name|String
name|pathRestriction
init|=
name|filter
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queryPath
range|:
name|queryPaths
control|)
block|{
if|if
condition|(
name|queryPath
operator|.
name|equals
argument_list|(
name|pathRestriction
argument_list|)
operator|||
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|queryPath
argument_list|,
name|pathRestriction
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|canEvalNodeNameRestriction
parameter_list|(
name|IndexingRule
name|indexingRule
parameter_list|)
block|{
name|PropertyRestriction
name|pr
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|indexingRule
operator|.
name|isNodeNameIndexed
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|canSortByProperty
parameter_list|(
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|)
block|{
if|if
condition|(
name|sortOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If jcr:score is the only sort order then opt out
if|if
condition|(
name|sortOrder
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|JCR_SCORE
operator|.
name|equals
argument_list|(
name|sortOrder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|canEvalAllFullText
parameter_list|(
specifier|final
name|IndexingRule
name|indexingRule
parameter_list|,
name|FullTextExpression
name|ft
parameter_list|)
block|{
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|relPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|nonIndexedPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|relativeParentsFound
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|nodeScopedCondition
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ft
operator|.
name|accept
argument_list|(
operator|new
name|FullTextVisitor
operator|.
name|FullTextVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextContains
name|contains
parameter_list|)
block|{
name|visitTerm
argument_list|(
name|contains
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|FullTextTerm
name|term
parameter_list|)
block|{
name|visitTerm
argument_list|(
name|term
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|visitTerm
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|p
init|=
name|propertyName
decl_stmt|;
name|String
name|propertyPath
init|=
literal|null
decl_stmt|;
name|String
name|nodePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|relPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|relativeParentsFound
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDepth
argument_list|(
name|p
argument_list|)
operator|>
literal|1
condition|)
block|{
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|LucenePropertyIndex
operator|.
name|isNodePath
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|nodePath
operator|=
name|parent
expr_stmt|;
block|}
else|else
block|{
name|propertyPath
operator|=
name|p
expr_stmt|;
block|}
name|relPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyPath
operator|=
name|p
expr_stmt|;
name|relPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodePath
operator|!=
literal|null
operator|&&
operator|!
name|indexingRule
operator|.
name|isAggregated
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
name|nonIndexedPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyPath
operator|!=
literal|null
condition|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
comment|//If given prop is not analyzed then its
comment|//not indexed
if|if
condition|(
name|pd
operator|==
literal|null
condition|)
block|{
name|nonIndexedPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pd
operator|.
name|analyzed
condition|)
block|{
name|nonIndexedPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeScopedTerm
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|nodeScopedCondition
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeScopedCondition
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|indexingRule
operator|.
name|isNodeFullTextIndexed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|relativeParentsFound
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Relative parents found {} which are not supported"
argument_list|,
name|relPaths
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//where contains('jcr:content/bar', 'mountain OR valley') and contains('jcr:content/foo', 'mountain OR valley')
comment|//above query can be evaluated by index which indexes foo and bar with restriction that both belong to same node
comment|//by displacing the query path to evaluate on contains('bar', ...) and filter out those parents which do not
comment|//have jcr:content as parent. So ensure that relPaths size is 1 or 0
if|if
condition|(
operator|!
name|nonIndexedPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|relPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Following relative  property paths are not index"
argument_list|,
name|relPaths
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|.
name|setParentPath
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|relPaths
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|//Such non indexed path can possibly be evaluated via any rule on nt:base
comment|//which can possibly index everything
name|IndexingRule
name|rule
init|=
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|p
range|:
name|nonIndexedPaths
control|)
block|{
comment|//Index can only evaluate a node search jcr:content/*
comment|//if it indexes node scope indexing is enabled
if|if
condition|(
name|LucenePropertyIndex
operator|.
name|isNodePath
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|rule
operator|.
name|isNodeFullTextIndexed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|//Index can only evaluate a property like jcr:content/type
comment|//if it indexes 'type' and that too analyzed
name|String
name|propertyName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|rule
operator|.
name|getConfig
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|pd
operator|.
name|analyzed
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
else|else
block|{
name|result
operator|.
name|setParentPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Computes the indexedProps which can be part of query by virtue of relativizing i.e.      * if query is on jcr:content/keyword then perform search on keyword and change parent      * path to jcr:content      * @param relativePropDefns property definitions for such relative properties. The key      *                          would be actual property name as in query i.e. jcr:content/keyword      *                          while property definition would be for 'keyword'      * @return list of properties which are included in query issued to Lucene      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|planForRelativeProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|relativePropDefns
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
argument_list|>
name|relpaths
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
name|String
name|maxCountedParent
init|=
literal|null
decl_stmt|;
comment|//Collect the relative properties grouped by parent path
comment|//and track the parent having maximum properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|e
range|:
name|relativePropDefns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|relativePropertyPath
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|getParentPath
argument_list|(
name|relativePropertyPath
argument_list|)
decl_stmt|;
name|relpaths
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|relpaths
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|maxSize
condition|)
block|{
name|maxSize
operator|=
name|count
expr_stmt|;
name|maxCountedParent
operator|=
name|parent
expr_stmt|;
block|}
block|}
comment|//Set the parent path to one which is present in most prop. In case of tie any one
comment|//such path would be picked
name|result
operator|.
name|setParentPath
argument_list|(
name|maxCountedParent
argument_list|)
expr_stmt|;
comment|//Now add only those properties to plan which have the maxCountedParent
name|List
argument_list|<
name|String
argument_list|>
name|indexedProps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|maxSize
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|e
range|:
name|relpaths
operator|.
name|get
argument_list|(
name|maxCountedParent
argument_list|)
control|)
block|{
name|String
name|relativePropertyPath
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|result
operator|.
name|propDefns
operator|.
name|put
argument_list|(
name|relativePropertyPath
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|relPropMapping
operator|.
name|put
argument_list|(
name|relativePropertyPath
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
name|relativePropertyPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|weight
operator|!=
literal|0
condition|)
block|{
name|indexedProps
operator|.
name|add
argument_list|(
name|relativePropertyPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indexedProps
return|;
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|PropertyDefinition
name|getSimpleProperty
parameter_list|(
name|IndexingRule
name|indexingRule
parameter_list|,
name|String
name|relativePropertyName
parameter_list|)
block|{
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|relativePropertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|relativePropertyName
argument_list|)
condition|)
block|{
comment|//Not a relative property
return|return
literal|null
return|;
block|}
comment|//Properties using ../ or ./ notation not support. The relative property path
comment|//must be fixed
if|if
condition|(
name|relativePropertyName
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|relativePropertyName
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|planForSyncIndexes
parameter_list|(
name|IndexingRule
name|indexingRule
parameter_list|)
block|{
comment|//If no sync index involved then return right away
if|if
condition|(
operator|!
name|definition
operator|.
name|hasSyncPropertyDefinitions
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|result
operator|.
name|propDefns
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|PropertyIndexResult
argument_list|>
name|unique
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PropertyIndexResult
argument_list|>
name|nonUnique
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
name|String
name|propertyName
init|=
name|result
operator|.
name|getPropertyName
argument_list|(
name|pr
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|pd
init|=
name|result
operator|.
name|propDefns
operator|.
name|get
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
condition|)
block|{
name|PropertyIndexResult
name|e
init|=
operator|new
name|PropertyIndexResult
argument_list|(
name|propertyName
argument_list|,
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|unique
condition|)
block|{
name|unique
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonUnique
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Pick the first index (if multiple). For unique its fine
comment|//For non unique we can probably later add support for cost
comment|//based selection
name|boolean
name|uniqueIndexFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|unique
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|propertyIndexResult
operator|=
name|unique
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|uniqueIndexFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|nonUnique
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|propertyIndexResult
operator|=
name|nonUnique
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|propertyIndexResult
operator|==
literal|null
operator|&&
name|result
operator|.
name|evaluateNodeTypeRestriction
argument_list|()
condition|)
block|{
name|PropertyDefinition
name|pd
init|=
name|indexingRule
operator|.
name|getConfig
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|sync
condition|)
block|{
name|result
operator|.
name|syncNodeTypeRestrictions
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|uniqueIndexFound
return|;
block|}
specifier|private
name|boolean
name|canEvalPathRestrictions
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
comment|//Opt out if one is looking for all children for '/' as its equivalent to
comment|//NO_RESTRICTION
if|if
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|NO_RESTRICTION
operator|||
operator|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
operator|&&
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|filter
operator|.
name|getPath
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//If no other restrictions is provided and query is pure
comment|//path restriction based then need to be sure that index definition at least
comment|//allows indexing all the path for given nodeType
return|return
name|definition
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|&&
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|canEvalNodeTypeRestrictions
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
comment|//No need to handle nt:base
if|if
condition|(
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//Only opt in if rule is not derived from nt:base otherwise it would
comment|//get used when there a full text index on all nodes
return|return
name|rule
operator|.
name|indexesAllNodesOfMatchingType
argument_list|()
operator|&&
operator|!
name|rule
operator|.
name|isBasedOnNtBase
argument_list|()
return|;
block|}
specifier|private
name|IndexPlan
operator|.
name|Builder
name|defaultPlan
parameter_list|()
block|{
return|return
operator|new
name|IndexPlan
operator|.
name|Builder
argument_list|()
operator|.
name|setCostPerExecution
argument_list|(
name|definition
operator|.
name|getCostPerExecution
argument_list|()
argument_list|)
operator|.
name|setCostPerEntry
argument_list|(
name|definition
operator|.
name|getCostPerEntry
argument_list|()
argument_list|)
operator|.
name|setFulltextIndex
argument_list|(
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
argument_list|)
operator|.
name|setIncludesNodeData
argument_list|(
literal|false
argument_list|)
comment|// we should not include node data
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|setPathPrefix
argument_list|(
name|getPathPrefix
argument_list|()
argument_list|)
operator|.
name|setSupportsPathRestriction
argument_list|(
name|definition
operator|.
name|evaluatePathRestrictions
argument_list|()
argument_list|)
operator|.
name|setDelayed
argument_list|(
literal|true
argument_list|)
comment|//Lucene is always async
operator|.
name|setAttribute
argument_list|(
name|LucenePropertyIndex
operator|.
name|ATTR_PLAN_RESULT
argument_list|,
name|result
argument_list|)
operator|.
name|setEstimatedEntryCount
argument_list|(
name|estimatedEntryCount
argument_list|()
argument_list|)
operator|.
name|setPlanName
argument_list|(
name|indexPath
argument_list|)
return|;
block|}
specifier|private
name|long
name|estimatedEntryCount
parameter_list|()
block|{
name|int
name|numOfDocs
init|=
name|getNumDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|useActualEntryCount
condition|)
block|{
return|return
name|definition
operator|.
name|isEntryCountDefined
argument_list|()
condition|?
name|definition
operator|.
name|getEntryCount
argument_list|()
else|:
name|numOfDocs
return|;
block|}
else|else
block|{
return|return
name|estimatedEntryCount_Compat
argument_list|(
name|numOfDocs
argument_list|)
return|;
block|}
block|}
specifier|private
name|long
name|estimatedEntryCount_Compat
parameter_list|(
name|int
name|numOfDocs
parameter_list|)
block|{
comment|//Other index only compete in case of property indexes. For fulltext
comment|//index return true count so as to allow multiple property indexes
comment|//to be compared fairly
name|FullTextExpression
name|ft
init|=
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|isFullTextEnabled
argument_list|()
condition|)
block|{
return|return
name|definition
operator|.
name|getFulltextEntryCount
argument_list|(
name|numOfDocs
argument_list|)
return|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|definition
operator|.
name|getEntryCount
argument_list|()
argument_list|,
name|numOfDocs
argument_list|)
return|;
block|}
specifier|private
name|String
name|getPathPrefix
parameter_list|()
block|{
comment|// 2 = /oak:index/<index name>
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|indexPath
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|parentPath
argument_list|)
condition|?
literal|""
else|:
name|parentPath
return|;
block|}
specifier|private
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|indexNode
operator|.
name|getIndexStatistics
argument_list|()
operator|.
name|numDocs
argument_list|()
return|;
block|}
specifier|private
name|int
name|getMaxPossibleNumDocs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|propDefns
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|IndexStatistics
name|indexStatistics
init|=
name|indexNode
operator|.
name|getIndexStatistics
argument_list|()
decl_stmt|;
name|int
name|minNumDocs
init|=
name|indexStatistics
operator|.
name|numDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|propDef
range|:
name|propDefns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|propDef
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|relPropMapping
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|getName
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|int
name|docCntForField
init|=
name|indexStatistics
operator|.
name|getDocCountFor
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|docCntForField
operator|==
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
name|int
name|weight
init|=
name|propDef
operator|.
name|getValue
argument_list|()
operator|.
name|weight
decl_stmt|;
name|PropertyRestriction
name|pr
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// don't use weight for "is not null" restrictions
name|weight
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|weight
operator|>
literal|1
condition|)
block|{
comment|// for non-equality conditions such as
comment|// where x> 1, x< 2, x like y,...:
comment|// use a maximum weight of 3,
comment|// so assume we read at least 30%
if|if
condition|(
operator|!
name|isEqualityRestriction
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|weight
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|weight
operator|>
literal|1
condition|)
block|{
comment|// use it to scale down the doc count - in broad strokes, we can think of weight
comment|// as number of terms for the field with all terms getting equal share of
comment|// the documents in this field
name|double
name|scaledDocCnt
init|=
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|docCntForField
operator|/
name|weight
argument_list|)
decl_stmt|;
if|if
condition|(
name|minNumDocs
operator|<
name|scaledDocCnt
condition|)
block|{
continue|continue;
block|}
comment|// since, we've already taken care that scaled cost is lower than minCost,
comment|// we can safely cast without risking overflow
name|minNumDocs
operator|=
operator|(
name|int
operator|)
name|scaledDocCnt
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docCntForField
operator|<
name|minNumDocs
condition|)
block|{
name|minNumDocs
operator|=
name|docCntForField
expr_stmt|;
block|}
block|}
return|return
name|minNumDocs
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEqualityRestriction
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|==
name|pr
operator|.
name|last
return|;
block|}
specifier|private
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|createSortOrder
parameter_list|(
name|IndexingRule
name|rule
parameter_list|)
block|{
if|if
condition|(
name|sortOrder
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|orderEntries
init|=
name|newArrayListWithCapacity
argument_list|(
name|sortOrder
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OrderEntry
name|o
range|:
name|sortOrder
control|)
block|{
name|PropertyDefinition
name|pd
init|=
name|rule
operator|.
name|getConfig
argument_list|(
name|o
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|ordered
operator|&&
name|o
operator|.
name|getPropertyType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|o
operator|.
name|getPropertyType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|orderEntries
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//Lucene can manage any order desc/asc
name|result
operator|.
name|sortedProperties
operator|.
name|add
argument_list|(
name|pd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|.
name|getPropertyName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexDefinition
operator|.
name|NATIVE_SORT_ORDER
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Supports jcr:score descending natively
name|orderEntries
operator|.
name|add
argument_list|(
name|IndexDefinition
operator|.
name|NATIVE_SORT_ORDER
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PropertyDefinition
name|functionIndex
range|:
name|rule
operator|.
name|getFunctionRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getPropertyName
argument_list|()
operator|.
name|equals
argument_list|(
name|functionIndex
operator|.
name|function
argument_list|)
condition|)
block|{
comment|// Lucene can manage any order desc/asc
name|orderEntries
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|result
operator|.
name|sortedProperties
operator|.
name|add
argument_list|(
name|functionIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//TODO Should we return order entries only when all order clauses are satisfied
return|return
name|orderEntries
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|IndexingRule
name|getApplicableRule
parameter_list|()
block|{
if|if
condition|(
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
return|return
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
return|;
block|}
else|else
block|{
comment|//TODO May be better if filter.getSuperTypes returned a list which maintains
comment|//inheritance order and then we iterate over that
for|for
control|(
name|IndexingRule
name|rule
range|:
name|definition
operator|.
name|getDefinedRules
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|getSupertypes
argument_list|()
operator|.
name|contains
argument_list|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
condition|)
block|{
comment|//Theoretically there may be multiple rules for same nodeType with
comment|//some condition defined. So again find a rule which applies
name|IndexingRule
name|matchingRule
init|=
name|definition
operator|.
name|getApplicableIndexingRule
argument_list|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingRule
operator|==
literal|null
operator|&&
name|rule
operator|.
name|getNodeTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getNodeType
argument_list|()
argument_list|)
condition|)
block|{
comment|//In case nodetype registry in IndexDefinition is stale then it would not populate
comment|//rules for new nodetype even though at indexing time it was able to index (due to
comment|//use of latest nodetype reg nodestate)
comment|//In such a case if the rule name and nodetype name for query matches then it is
comment|//considered a match.
comment|//This would though not work for the case where rule is related to nodetype as used
comment|//in query matched via some inheritance chain
comment|//TODO Need a way to check if nodetype reg as seen by IndexDefinition is old then
comment|//IndexNode is reopened
name|matchingRule
operator|=
name|rule
expr_stmt|;
block|}
if|if
condition|(
name|matchingRule
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Applicable IndexingRule found {}"
argument_list|,
name|matchingRule
argument_list|)
expr_stmt|;
return|return
name|rule
return|;
block|}
block|}
comment|//nt:base is applicable for all. This specific condition is
comment|//required to support mixin case as filter.getSupertypes() for mixin based
comment|//query only includes the mixin type and not nt:base
if|if
condition|(
name|rule
operator|.
name|getNodeTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|JcrConstants
operator|.
name|NT_BASE
argument_list|)
condition|)
block|{
return|return
name|rule
return|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"No applicable IndexingRule found for any of the superTypes {}"
argument_list|,
name|filter
operator|.
name|getSupertypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|notSupportedFeature
parameter_list|()
block|{
if|if
condition|(
name|filter
operator|.
name|getPathRestriction
argument_list|()
operator|==
name|Filter
operator|.
name|PathRestriction
operator|.
name|NO_RESTRICTION
operator|&&
name|filter
operator|.
name|matchesAllTypes
argument_list|()
operator|&&
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//This mode includes name(), localname() queries
comment|//OrImpl [a/name] = 'Hello' or [b/name] = 'World'
comment|//Relative parent properties where [../foo1] is not null
return|return
literal|true
return|;
block|}
name|boolean
name|failTestOnMissingFunctionIndex
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|failTestOnMissingFunctionIndex
condition|)
block|{
comment|// this means even just function restrictions fail the test
comment|// (for example "where upper(name) = 'X'",
comment|// if a matching function-based index is missing
return|return
literal|false
return|;
block|}
comment|// the following would ensure the test doesn't fail in that case:
for|for
control|(
name|PropertyRestriction
name|r
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|propertyName
operator|.
name|startsWith
argument_list|(
name|QueryConstants
operator|.
name|FUNCTION_RESTRICTION_PREFIX
argument_list|)
condition|)
block|{
comment|// not a function restriction
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Determine if the propertyName of a fulltext term indicates current node      * @param propertyName property name in the full text term clause      */
specifier|private
specifier|static
name|boolean
name|nodeScopedTerm
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|propertyName
operator|==
literal|null
operator|||
literal|"."
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|//~--------------------------------------------------------< PlanResult>
specifier|public
specifier|static
class|class
name|PlanResult
block|{
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|final
name|IndexDefinition
name|indexDefinition
decl_stmt|;
specifier|final
name|IndexingRule
name|indexingRule
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|sortedProperties
init|=
name|newArrayList
argument_list|()
decl_stmt|;
comment|//Map of actual property name as present in our property definitions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|propDefns
init|=
name|newHashMap
argument_list|()
decl_stmt|;
comment|//Map of property restriction name -> property definition name
comment|//like 'jcr:content/status' -> 'status'
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|relPropMapping
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|nonFullTextConstraints
decl_stmt|;
specifier|private
name|int
name|parentDepth
decl_stmt|;
specifier|private
name|String
name|parentPathSegment
decl_stmt|;
specifier|private
name|boolean
name|relativize
decl_stmt|;
specifier|private
name|boolean
name|nodeTypeRestrictions
decl_stmt|;
specifier|private
name|boolean
name|nodeNameRestriction
decl_stmt|;
specifier|private
name|boolean
name|uniquePathsRequired
init|=
literal|true
decl_stmt|;
specifier|private
name|PropertyIndexResult
name|propertyIndexResult
decl_stmt|;
specifier|private
name|boolean
name|syncNodeTypeRestrictions
decl_stmt|;
specifier|public
name|PlanResult
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|IndexDefinition
name|defn
parameter_list|,
name|IndexingRule
name|indexingRule
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|indexDefinition
operator|=
name|defn
expr_stmt|;
name|this
operator|.
name|indexingRule
operator|=
name|indexingRule
expr_stmt|;
block|}
specifier|public
name|PropertyDefinition
name|getPropDefn
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|propDefns
operator|.
name|get
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
return|;
block|}
comment|/**          * Returns the property name to be used for query for given PropertyRestriction          * The name can be same as one for property restriction or it can be a mapped one          */
specifier|public
name|String
name|getPropertyName
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|)
block|{
return|return
name|relPropMapping
operator|.
name|getOrDefault
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|,
name|pr
operator|.
name|propertyName
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|propDefns
operator|.
name|containsKey
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|public
name|PropertyDefinition
name|getOrderedProperty
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|sortedProperties
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPathTransformed
parameter_list|()
block|{
return|return
name|relativize
return|;
block|}
specifier|public
name|boolean
name|isUniquePathsRequired
parameter_list|()
block|{
return|return
name|uniquePathsRequired
return|;
block|}
comment|/**          * Transforms the given path if the query involved relative properties and index          * is not making use of aggregated properties. If the path          *          * @param path path to transform          * @return transformed path. Returns null if the path does not confirm to relative          * path requirements          */
annotation|@
name|Nullable
specifier|public
name|String
name|transformPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|isPathTransformed
argument_list|()
condition|)
block|{
comment|// get the base path
comment|// ensure the path ends with the given
comment|// relative path
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|parentPathSegment
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getAncestorPath
argument_list|(
name|path
argument_list|,
name|parentDepth
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
specifier|public
name|boolean
name|evaluateNonFullTextConstraints
parameter_list|()
block|{
return|return
name|nonFullTextConstraints
return|;
block|}
specifier|public
name|boolean
name|evaluateNodeTypeRestriction
parameter_list|()
block|{
return|return
name|nodeTypeRestrictions
return|;
block|}
specifier|public
name|boolean
name|evaluateSyncNodeTypeRestriction
parameter_list|()
block|{
return|return
name|syncNodeTypeRestrictions
return|;
block|}
specifier|public
name|boolean
name|evaluateNodeNameRestriction
parameter_list|()
block|{
return|return
name|nodeNameRestriction
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|PropertyIndexResult
name|getPropertyIndexResult
parameter_list|()
block|{
return|return
name|propertyIndexResult
return|;
block|}
specifier|public
name|boolean
name|hasPropertyIndexResult
parameter_list|()
block|{
return|return
name|propertyIndexResult
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|setParentPath
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
name|parentPathSegment
operator|=
literal|"/"
operator|+
name|relativePath
expr_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we only restrict non-full-text conditions if there is
comment|// no relative property in the full-text constraint
name|enableNonFullTextConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|relativize
operator|=
literal|true
expr_stmt|;
name|parentDepth
operator|=
name|getDepth
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|enableNonFullTextConstraints
parameter_list|()
block|{
name|nonFullTextConstraints
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|enableNodeTypeEvaluation
parameter_list|()
block|{
name|nodeTypeRestrictions
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|enableNodeNameRestriction
parameter_list|()
block|{
name|nodeNameRestriction
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|disableUniquePaths
parameter_list|()
block|{
name|uniquePathsRequired
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PropertyIndexResult
block|{
specifier|final
name|String
name|propertyName
decl_stmt|;
specifier|final
name|PropertyRestriction
name|pr
decl_stmt|;
specifier|public
name|PropertyIndexResult
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|pr
operator|=
name|pr
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

