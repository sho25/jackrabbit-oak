begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CancelableDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|StandbyDiff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandbyDiff
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|FileStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|StandbyClient
name|client
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|running
decl_stmt|;
specifier|private
specifier|final
name|BlobProcessor
name|blobProcessor
decl_stmt|;
name|StandbyDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|FileStore
name|store
parameter_list|,
name|StandbyClient
name|client
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|running
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|store
argument_list|,
name|client
argument_list|,
literal|"/"
argument_list|,
name|running
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|BlobProcessor
name|newBinaryFetcher
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|StandbyClient
name|client
parameter_list|)
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
return|return
parameter_list|(
name|blob
parameter_list|)
lambda|->
block|{}
return|;
block|}
return|return
operator|new
name|RemoteBlobProcessor
argument_list|(
name|blobStore
argument_list|,
name|client
operator|::
name|getBlob
argument_list|)
return|;
block|}
specifier|private
name|StandbyDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|FileStore
name|store
parameter_list|,
name|StandbyClient
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|running
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
name|this
operator|.
name|blobProcessor
operator|=
name|newBinaryFetcher
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|builder
operator|.
name|removeProperty
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|SegmentNodeState
name|processed
init|=
name|process
argument_list|(
name|name
argument_list|,
name|EMPTY_NODE
argument_list|,
name|after
argument_list|,
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|processed
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|SegmentNodeState
name|processed
init|=
name|process
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|processed
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|,
name|processed
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|SegmentNodeState
name|process
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|onto
parameter_list|)
block|{
return|return
operator|new
name|StandbyDiff
argument_list|(
name|onto
argument_list|,
name|store
argument_list|,
name|client
argument_list|,
name|path
operator|+
name|name
operator|+
literal|"/"
argument_list|,
name|running
argument_list|)
operator|.
name|diff
argument_list|(
name|name
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
name|SegmentNodeState
name|diff
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|after
operator|instanceof
name|SegmentNodeState
condition|)
block|{
if|if
condition|(
literal|"checkpoints"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// if we're on the /checkpoints path, there's no need for a deep
comment|// traversal to verify binaries
return|return
operator|(
name|SegmentNodeState
operator|)
name|after
return|;
block|}
if|if
condition|(
name|store
operator|.
name|getBlobStore
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|SegmentNodeState
operator|)
name|after
return|;
block|}
comment|// has external data store, we need a deep
comment|// traversal to verify binaries
for|for
control|(
name|PropertyState
name|propertyState
range|:
name|after
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|processBinary
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|CancelableDiff
argument_list|(
name|this
argument_list|,
name|newCanceledSupplier
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
return|return
operator|(
name|SegmentNodeState
operator|)
name|after
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|newCanceledSupplier
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|!
name|running
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|PropertyState
name|processBinary
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BINARY
condition|)
block|{
name|processBinary
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|BINARIES
condition|)
block|{
for|for
control|(
name|Blob
name|blob
range|:
name|property
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
control|)
block|{
name|processBinary
argument_list|(
name|blob
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|property
return|;
block|}
specifier|private
name|void
name|processBinary
parameter_list|(
name|Blob
name|b
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
try|try
block|{
name|blobProcessor
operator|.
name|processBinary
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlobFetchTimeoutException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load remote blob %s at %s#%s in %dms. Please increase the timeout and try again."
argument_list|,
name|e
operator|.
name|getBlobId
argument_list|()
argument_list|,
name|path
argument_list|,
name|propertyName
argument_list|,
name|client
operator|.
name|getReadTimeoutMs
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BlobWriteException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to persist blob %s at %s#%s"
argument_list|,
name|e
operator|.
name|getBlobId
argument_list|()
argument_list|,
name|path
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BlobTypeUnknownException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unknown Blob {} at {}, ignoring"
argument_list|,
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
operator|+
literal|"#"
operator|+
name|propertyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

