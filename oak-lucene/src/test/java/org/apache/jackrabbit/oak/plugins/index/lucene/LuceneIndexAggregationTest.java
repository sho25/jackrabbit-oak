begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FOLDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|AggregateIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|NodeAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|aggregate
operator|.
name|SimpleNodeAggregator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|BinaryPropertyState
operator|.
name|binaryProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexAggregationTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|createTestIndexNode
argument_list|(
name|index
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|AggregateIndexProvider
operator|.
name|wrap
argument_list|(
operator|new
name|LowCostLuceneIndexProvider
argument_list|()
operator|.
name|with
argument_list|(
name|getNodeAggregator
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
comment|/**      *<code>      *<aggregate primaryType="nt:file">       *<include>jcr:content</include>      *<include>jcr:content/*</include>      *<include-property>jcr:content/jcr:lastModified</include-property>      *</aggregate>      *<code>      *       */
specifier|private
specifier|static
name|NodeAggregator
name|getNodeAggregator
parameter_list|()
block|{
return|return
operator|new
name|SimpleNodeAggregator
argument_list|()
operator|.
name|newRuleWithName
argument_list|(
name|NT_FILE
argument_list|,
name|newArrayList
argument_list|(
name|JCR_CONTENT
argument_list|,
name|JCR_CONTENT
operator|+
literal|"/*"
argument_list|)
argument_list|)
operator|.
name|newRuleWithName
argument_list|(
name|NT_FOLDER
argument_list|,
name|newArrayList
argument_list|(
literal|"myFile"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * simple index aggregation from jcr:content to nt:file      *       */
annotation|@
name|Test
specifier|public
name|void
name|testNtFileAggregate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlBase
init|=
literal|"SELECT * FROM [nt:file] as f WHERE"
decl_stmt|;
name|String
name|sqlCat
init|=
name|sqlBase
operator|+
literal|" CONTAINS (f.*, 'cat')"
decl_stmt|;
name|String
name|sqlDog
init|=
name|sqlBase
operator|+
literal|" CONTAINS (f.*, 'dog')"
decl_stmt|;
name|Tree
name|file
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlDog
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// update jcr:data
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy cat."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlDog
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlCat
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// replace jcr:content with unstructured
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|Tree
name|unstrContent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|unstrContent
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|foo
init|=
name|unstrContent
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|foo
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlDog
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlCat
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove foo
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlDog
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlCat
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// replace jcr:content again with resource
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|resource
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"myFile"
argument_list|)
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy cat."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlDog
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|sqlCat
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeWithOr
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|file
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|matchContentSimple
init|=
literal|"//element(*, nt:file)[(jcr:contains(jcr:content, 'dog'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContentSimple
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchContent
init|=
literal|" //element(*, nt:file)[(jcr:contains(jcr:content, 'dog') or jcr:contains(jcr:content/@jcr:title, 'invalid') or jcr:contains(jcr:content/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContent
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchTitle
init|=
literal|" //element(*, nt:file)[(jcr:contains(jcr:content, 'invalid') or jcr:contains(jcr:content/@jcr:title, 'title') or jcr:contains(jcr:content/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchTitle
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchDesc
init|=
literal|" //element(*, nt:file)[(jcr:contains(jcr:content, 'invalid') or jcr:contains(jcr:content/@jcr:title, 'invalid') or jcr:contains(jcr:content/@jcr:description, 'description'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchDesc
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchNone
init|=
literal|" //element(*, nt:file)[(jcr:contains(jcr:content, 'invalid') or jcr:contains(jcr:content/@jcr:title, 'invalid') or jcr:contains(jcr:content/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchNone
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeWithOrComposite
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|folder
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFolder"
argument_list|)
decl_stmt|;
name|folder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FOLDER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|file
init|=
name|folder
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|matchContentSimple
init|=
literal|"//element(*, nt:folder)[(jcr:contains(myFile, 'dog'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContentSimple
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchContent
init|=
literal|" //element(*, nt:folder)[(jcr:contains(myFile, 'dog') or jcr:contains(myFile/@jcr:title, 'invalid') or jcr:contains(myFile/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContent
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchTitle
init|=
literal|" //element(*, nt:folder)[(jcr:contains(myFile, 'invalid') or jcr:contains(myFile/@jcr:title, 'title') or jcr:contains(myFile/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchTitle
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchDesc
init|=
literal|" //element(*, nt:folder)[(jcr:contains(myFile, 'invalid') or jcr:contains(myFile/@jcr:title, 'invalid') or jcr:contains(myFile/@jcr:description, 'description'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchDesc
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchNone
init|=
literal|" //element(*, nt:folder)[(jcr:contains(myFile, 'invalid') or jcr:contains(myFile/@jcr:title, 'invalid') or jcr:contains(myFile/@jcr:description, 'invalid'))]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchNone
argument_list|,
literal|"xpath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|matchOnlyTitleOr
init|=
literal|" //element(*, nt:folder)[(jcr:contains(myFile/@jcr:title, 'title') or jcr:contains(myFile/@jcr:title, 'unknown') )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchOnlyTitleOr
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNodeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|folder
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFolder"
argument_list|)
decl_stmt|;
name|folder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FOLDER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|file
init|=
name|folder
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|matchContentSimple
init|=
literal|"//*[( jcr:contains(., 'dog') and @jcr:primaryType = 'nt:file' )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContentSimple
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchContentDouble
init|=
literal|"//*[( jcr:contains(., 'dog') and (@jcr:primaryType = 'nt:file' or @jcr:primaryType = 'nt:folder') )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchContentDouble
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder"
argument_list|,
literal|"/myFolder/myFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChildNodeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|file
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|matchChildSimple
init|=
literal|"//*[( jcr:contains(@jcr:title, 'title') )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchChildSimple
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|matchChildWithStar
init|=
literal|"//*[( jcr:contains(., 'dog') and jcr:contains(@jcr:title, 'title') )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchChildWithStar
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreventDoubleAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|file
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"fox"
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|matchChildSimple
init|=
literal|"//element(*, nt:file)[( jcr:contains(., 'fox') )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|matchChildSimple
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"OAK-828"
argument_list|)
specifier|public
name|void
name|testDifferentNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|folder
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"myFolder"
argument_list|)
decl_stmt|;
name|folder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FOLDER
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|file
init|=
name|folder
operator|.
name|addChild
argument_list|(
literal|"myFile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FILE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|file
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|Tree
name|resource
init|=
name|file
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:resource"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:lastModified"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setProperty
argument_list|(
name|binaryProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//element(*, nt:file)[jcr:contains(., 'dog')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//element(*, nt:file)[jcr:contains(., 'title')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder/myFile"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"//element(*, nt:file)[jcr:contains(., 'dog') and jcr:contains(., 'title')]"
argument_list|,
literal|"xpath"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/myFolder/myFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

