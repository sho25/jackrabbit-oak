begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Group Membership  * -----------------------------------------------------------------------------  *  * Goal:  * After having completed this exercise you should be able to manage group  * membership relations using the Jackrabbit User Management API and understand  * the basic design on how group membership is store and handled in the  * Oak repository.  *  * Exercises:  *  * - Overview  *   Take a look at the Jackrabbit User Management API and how group membership  *   is being edited (in {@link org.apache.jackrabbit.api.security.user.Group}  *   and discovered in both directions on {@link org.apache.jackrabbit.api.security.user.Group}  *   and {@link org.apache.jackrabbit.api.security.user.Authorizable}.  *  * - {@link #testAddRemoveMembers()}  *   Add (and remove) members to the predefined groups such that the test passes.  *  * - {@link #testDeclaredMembership()}  *   This test illustrates how declared members are retrieved from a group and  *   how to obtain the declared group membership of a given authorizable (user or  *   group).  *  *   Question: This test is executed with full permission. Can you elaborate  *   what happens if the editing session has limited read access on the user/group  *   tree(s)?  *  * - {@link #testInheritedMembership()}  *   This test illustrates how all members of a group are retrieved and  *   how to obtain full group membership of a given authorizable (user or  *   group). Complete the test such that it passes.  *  * - {@link #testMembersContentStructure()}  *   In order to complete this exercise look at the built-in node types and  *   identify those types that deal with group membership.  *   Once you are familiar with the node type definitions look at  *> {@link org.apache.jackrabbit.oak.security.user.MembershipProvider} and  *> {@link org.apache.jackrabbit.oak.security.user.MembershipWriter}  *   and how they deal with massive amount of members on a given group.  *   Finally fix the test case :-)  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * As you can see from the API calls present as of Jackrabbit API 2.10 you  * currently need to have an existing authorizable at hand in order to add  * (or remove) it as member of a given group.  * Since group membership is stored as {@link javax.jcr.PropertyType#WEAKREFERENCE}  * the repository is not obligated to enforce the validity of the references  * and thus might choose to create membership references that cannot (yet) be  * resolved.  *  * Look at the following unit tests present with the oak-jcr module and observe  * how the configured {@link org.apache.jackrabbit.oak.spi.xml.ImportBehavior}  * affects the import of group-membership information that cannot be resolved  * to an existing authorizable:  *  * - {@link org.apache.jackrabbit.oak.jcr.security.user.GroupImportBestEffortTest#testImportNonExistingMemberBestEffort()}  * - {@link org.apache.jackrabbit.oak.jcr.security.user.GroupImportAbortTest#testImportNonExistingMemberAbort()}  * - {@link org.apache.jackrabbit.oak.jcr.security.user.GroupImportIgnoreTest#testImportNonExistingMemberIgnore()} ()}  *  * Exercises  *  * 1. Walk through the XML import and take a close look at  *    {@link org.apache.jackrabbit.oak.security.user.UserImporter}, where the XML  *    of the protected items defined with the various authorizable node types  *    are being handled. Compare the differences wrt to the import behavior.  *  * 2. Discuss possible use-cases where creating a group with members that don't  *    (yet) exist (anymore) might be helpful (or even required).  *  *  * Advanced Exercise:  * -----------------------------------------------------------------------------  *  * Having completed the additional exercises wrt {@link org.apache.jackrabbit.oak.spi.xml.ImportBehavior}  * and the XML import of non-existing group members, you may want to complete  * following exercise.  *  * Question: How might the implementation of the API extensions proposed in  *<a href="https://issues.apache.org/jira/browse/JCR-3880">JCR-3880</a> could  * look like such that the implementation both matches the API contract and  * is consistent with the XML import?  *  *</pre>  *  * @see org.apache.jackrabbit.api.security.user.Authorizable#declaredMemberOf()  * @see org.apache.jackrabbit.api.security.user.Authorizable#memberOf()  * @see org.apache.jackrabbit.api.security.user.Group#isMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see org.apache.jackrabbit.api.security.user.Group#isDeclaredMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see org.apache.jackrabbit.api.security.user.Group#getMembers()  * @see org.apache.jackrabbit.api.security.user.Group#getDeclaredMembers()  * @see org.apache.jackrabbit.api.security.user.Group#addMember(org.apache.jackrabbit.api.security.user.Authorizable)  * @see org.apache.jackrabbit.api.security.user.Group#removeMember(org.apache.jackrabbit.api.security.user.Authorizable)  */
end_comment

begin_class
specifier|public
class|class
name|L8_MembershipTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|User
name|user
decl_stmt|;
specifier|private
name|Group
name|group
decl_stmt|;
specifier|private
name|Group
name|group2
decl_stmt|;
specifier|private
name|Group
name|group3
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Authorizable
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|Authorizable
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|user
operator|=
operator|(
name|User
operator|)
name|createNewAuthorizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|group
operator|=
operator|(
name|Group
operator|)
name|createNewAuthorizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group2
operator|=
operator|(
name|Group
operator|)
name|createNewAuthorizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group3
operator|=
operator|(
name|Group
operator|)
name|createNewAuthorizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|Authorizable
name|a
range|:
name|toRemove
control|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Authorizable
name|createNewAuthorizable
parameter_list|(
name|boolean
name|isGroup
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
operator|(
name|isGroup
operator|)
condition|?
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
name|uMgr
argument_list|)
else|:
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|uMgr
argument_list|)
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRemoveMembers
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// EXERCISE: add group members such that the following test-cases passes.
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group2
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group3
operator|.
name|isDeclaredMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group2
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group3
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|isDeclaredMember
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|isDeclaredMember
argument_list|,
name|group
operator|.
name|isDeclaredMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|isDeclaredMember
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|isDeclaredMember
argument_list|,
name|group3
operator|.
name|isDeclaredMember
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|isMember
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|isMember
argument_list|,
name|group
operator|.
name|isMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|isMember
operator|=
literal|null
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|isMember
argument_list|,
name|group3
operator|.
name|isMember
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: now change the group membership such that the following assertions pass
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group3
operator|.
name|isMember
argument_list|(
name|group2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group3
operator|.
name|isMember
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group3
operator|.
name|isMember
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeclaredMembership
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|group
operator|.
name|addMember
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|group2
operator|.
name|addMember
argument_list|(
name|group3
argument_list|)
expr_stmt|;
name|group3
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Group
argument_list|>
name|expectedGroups
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|user
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|groups
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|expectedGroups
operator|.
name|remove
argument_list|(
name|groups
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedGroups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Authorizable
argument_list|>
name|expectedMembers
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|memberIterator
init|=
name|group
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|memberIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|expectedMembers
operator|.
name|remove
argument_list|(
name|memberIterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedMembers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedMembership
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|group
operator|.
name|addMember
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|group
operator|.
name|addMember
argument_list|(
name|group3
argument_list|)
expr_stmt|;
name|group3
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Group
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groupIterator
init|=
name|user
operator|.
name|memberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|groupIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|gr
init|=
name|groupIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|remove
argument_list|(
name|gr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|groups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Authorizable
argument_list|>
name|expectedMembers
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|memberIterator
init|=
name|group
operator|.
name|getMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|memberIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|expectedMembers
operator|.
name|remove
argument_list|(
name|memberIterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedMembers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMembersContentStructure
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|int
name|size
init|=
literal|500
decl_stmt|;
comment|//MembershipWriter.DEFAULT_MEMBERSHIP_THRESHHOLD * 5;
name|List
argument_list|<
name|String
argument_list|>
name|memberUuids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Authorizable
name|user
init|=
name|createNewAuthorizable
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
decl_stmt|;
comment|//assertNotNull(uuid);
name|memberUuids
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|group
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|groupTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|group
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|values
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|memberUuids
operator|.
name|remove
argument_list|(
name|values
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|memberUuids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: retrieve the rest of the member-information stored with the group
comment|// EXERCISE: by looking at the tree structure created by the MembershipWriter
name|assertTrue
argument_list|(
name|memberUuids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

