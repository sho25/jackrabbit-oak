begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|split
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|LocalJournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|SplitJournalFileTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|JournalFile
name|roFile
decl_stmt|;
specifier|private
name|JournalFile
name|rwFile
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|prepareJournals
parameter_list|()
throws|throws
name|IOException
block|{
name|roFile
operator|=
operator|new
name|LocalJournalFile
argument_list|(
name|temporaryFolder
operator|.
name|newFile
argument_list|()
argument_list|)
expr_stmt|;
name|rwFile
operator|=
operator|new
name|LocalJournalFile
argument_list|(
name|temporaryFolder
operator|.
name|newFile
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|JournalFileWriter
name|writer
init|=
name|roFile
operator|.
name|openJournalWriter
argument_list|()
init|)
block|{
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 3a"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 3b"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 3c"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|JournalFileWriter
name|writer
init|=
name|rwFile
operator|.
name|openJournalWriter
argument_list|()
init|)
block|{
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 4"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 5"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeLine
argument_list|(
literal|"line 6"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIgnoreNewRoLines
parameter_list|()
throws|throws
name|IOException
block|{
name|SplitJournalFile
name|splitJournalFile
init|=
operator|new
name|SplitJournalFile
argument_list|(
name|roFile
argument_list|,
name|rwFile
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"line 3"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|JournalFileReader
name|reader
init|=
name|splitJournalFile
operator|.
name|openJournalReader
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|>=
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
literal|"line "
operator|+
name|i
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIgnoreWholeRoJournal
parameter_list|()
throws|throws
name|IOException
block|{
name|SplitJournalFile
name|splitJournalFile
init|=
operator|new
name|SplitJournalFile
argument_list|(
name|roFile
argument_list|,
name|rwFile
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|JournalFileReader
name|reader
init|=
name|splitJournalFile
operator|.
name|openJournalReader
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
literal|"line 6"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line 5"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"line 4"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

