begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * Record within a segment.  */
end_comment

begin_class
class|class
name|Record
block|{
specifier|static
name|boolean
name|fastEquals
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|instanceof
name|Record
operator|&&
name|fastEquals
argument_list|(
operator|(
name|Record
operator|)
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|fastEquals
parameter_list|(
annotation|@
name|Nonnull
name|Record
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|b
operator|instanceof
name|Record
operator|&&
name|fastEquals
argument_list|(
name|a
argument_list|,
operator|(
name|Record
operator|)
name|b
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|fastEquals
parameter_list|(
annotation|@
name|Nonnull
name|Record
name|a
parameter_list|,
annotation|@
name|Nonnull
name|Record
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|b
operator|||
operator|(
name|a
operator|.
name|recordNumber
operator|==
name|b
operator|.
name|recordNumber
operator|&&
name|a
operator|.
name|segmentId
operator|.
name|equals
argument_list|(
name|b
operator|.
name|segmentId
argument_list|)
operator|)
return|;
block|}
comment|/**      * Identifier of the segment that contains this record.      */
specifier|private
specifier|final
name|SegmentId
name|segmentId
decl_stmt|;
comment|/**      * Segment recordNumber of this record.      */
specifier|private
specifier|final
name|int
name|recordNumber
decl_stmt|;
comment|/**      * Creates a new object for the identified record.      *      * @param id record identified      */
specifier|protected
name|Record
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|id
operator|.
name|getRecordNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Record
parameter_list|(
annotation|@
name|Nonnull
name|SegmentId
name|segmentId
parameter_list|,
name|int
name|recordNumber
parameter_list|)
block|{
name|this
operator|.
name|segmentId
operator|=
name|segmentId
expr_stmt|;
name|this
operator|.
name|recordNumber
operator|=
name|recordNumber
expr_stmt|;
block|}
comment|/**      * Returns the segment that contains this record.      *      * @return segment that contains this record      */
specifier|protected
name|Segment
name|getSegment
parameter_list|()
block|{
return|return
name|segmentId
operator|.
name|getSegment
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getRecordNumber
parameter_list|()
block|{
return|return
name|recordNumber
return|;
block|}
comment|/**      * Returns the identifier of this record.      *      * @return record identifier      */
specifier|public
name|RecordId
name|getRecordId
parameter_list|()
block|{
return|return
operator|new
name|RecordId
argument_list|(
name|segmentId
argument_list|,
name|recordNumber
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
return|return
name|fastEquals
argument_list|(
name|this
argument_list|,
name|that
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|segmentId
operator|.
name|hashCode
argument_list|()
operator|^
name|recordNumber
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getRecordId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

