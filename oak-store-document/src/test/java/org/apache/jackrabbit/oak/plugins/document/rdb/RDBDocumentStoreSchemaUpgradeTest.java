begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
operator|.
name|RDBTableMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RDBDocumentStoreSchemaUpgradeTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|DocumentStoreFixture
name|candidates
index|[]
init|=
operator|new
name|DocumentStoreFixture
index|[]
block|{
name|DocumentStoreFixture
operator|.
name|RDB_H2
block|,
name|DocumentStoreFixture
operator|.
name|RDB_DERBY
block|,
name|DocumentStoreFixture
operator|.
name|RDB_PG
block|,
name|DocumentStoreFixture
operator|.
name|RDB_DB2
block|,
name|DocumentStoreFixture
operator|.
name|RDB_MYSQL
block|,
name|DocumentStoreFixture
operator|.
name|RDB_ORACLE
block|,
name|DocumentStoreFixture
operator|.
name|RDB_MSSQL
block|}
decl_stmt|;
for|for
control|(
name|DocumentStoreFixture
name|dsf
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|dsf
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|dsf
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|DataSource
name|ds
decl_stmt|;
specifier|public
name|RDBDocumentStoreSchemaUpgradeTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|this
operator|.
name|ds
operator|=
name|dsf
operator|.
name|getRDBDataSource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|initDefault
parameter_list|()
block|{
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T00"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init01
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to DB level 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T01"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
name|RDBDocumentStore
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init0then1
parameter_list|()
block|{
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T0T1"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb0
init|=
literal|null
decl_stmt|;
name|RDBDocumentStore
name|rdb1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb0
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta0
init|=
name|rdb0
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|meta0
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|rdb1
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T0T1"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta1
init|=
name|rdb1
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|testInsert
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rdb1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testInsert
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rdb1
operator|!=
literal|null
condition|)
block|{
name|rdb1
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rdb0
operator|!=
literal|null
condition|)
block|{
name|rdb0
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init0then2
parameter_list|()
block|{
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T0T2"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb0
init|=
literal|null
decl_stmt|;
name|RDBDocumentStore
name|rdb1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb0
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta0
init|=
name|rdb0
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|meta0
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|rdb1
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T0T2"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta1
init|=
name|rdb1
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|testInsert
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testInsert
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rdb1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testInsert
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that old instance can read a new entry
name|NodeDocument
name|check
init|=
name|rdb0
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|check
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|check
operator|.
name|get
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rdb1
operator|!=
literal|null
condition|)
block|{
name|rdb1
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rdb0
operator|!=
literal|null
condition|)
block|{
name|rdb0
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init12
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to DB level 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T12"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|2
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasSplitDocs
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|statementsPerTable
init|=
literal|5
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
name|statementsPerTable
operator|*
name|RDBDocumentStore
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init01fail
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Attempted to upgrade"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|ds
operator|instanceof
name|RDBDataSourceWrapper
argument_list|)
expr_stmt|;
name|RDBDataSourceWrapper
name|wds
init|=
operator|(
name|RDBDataSourceWrapper
operator|)
name|ds
decl_stmt|;
name|wds
operator|.
name|setFailAlterTableAddColumnStatements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T01F"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
name|RDBDocumentStore
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|testInsert
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rdb
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testInsert
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wds
operator|.
name|setFailAlterTableAddColumnStatements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init11
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to DB level 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T11"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|0
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init22
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to DB level"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T"
operator|+
literal|"22"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|2
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|2
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasSplitDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
literal|0
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|init12fail
parameter_list|()
block|{
name|LogCustomizer
name|logCustomizer
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|RDBDocumentStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Attempted to upgrade"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logCustomizer
operator|.
name|starting
argument_list|()
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|ds
operator|instanceof
name|RDBDataSourceWrapper
argument_list|)
expr_stmt|;
name|RDBDataSourceWrapper
name|wds
init|=
operator|(
name|RDBDataSourceWrapper
operator|)
name|ds
decl_stmt|;
name|wds
operator|.
name|setFailAlterTableAddColumnStatements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T12F"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|2
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected # of log entries: "
operator|+
name|logCustomizer
operator|.
name|getLogs
argument_list|()
argument_list|,
name|RDBDocumentStore
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|,
name|logCustomizer
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|UpdateOp
name|testInsert
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rdb
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|testInsert
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
name|testUpdate
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|testUpdate
operator|.
name|set
argument_list|(
literal|"p"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rdb
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|testUpdate
argument_list|)
argument_list|)
expr_stmt|;
name|rdb
operator|.
name|getNodeDocumentCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|rdb
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SplitDocType
operator|.
name|NONE
argument_list|,
name|doc
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wds
operator|.
name|setFailAlterTableAddColumnStatements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logCustomizer
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionGCOnOldDB
parameter_list|()
block|{
name|RDBOptions
name|op
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"T11"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RDBDocumentStore
name|rdb
init|=
literal|null
decl_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|garbage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rdb
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|op
operator|.
name|getTablePrefix
argument_list|()
operator|+
literal|"_NODES"
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RDBVersionGCSupport
name|vgc
init|=
operator|new
name|RDBVersionGCSupport
argument_list|(
name|rdb
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NodeDocument
operator|.
name|SplitDocType
argument_list|>
name|gctypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SplitDocType
operator|.
name|DEFAULT_LEAF
argument_list|,
name|SplitDocType
operator|.
name|COMMIT_ROOT_ONLY
argument_list|,
name|SplitDocType
operator|.
name|DEFAULT_NO_BRANCH
argument_list|)
decl_stmt|;
name|garbage
operator|=
name|vgc
operator|.
name|identifyGarbage
argument_list|(
name|gctypes
argument_list|,
operator|new
name|RevisionVector
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDocument
name|g
range|:
name|garbage
control|)
block|{
comment|// get rid of compiler warning about g not being used
if|if
condition|(
name|g
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|cnt
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|garbage
operator|!=
literal|null
condition|)
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|garbage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rdb
operator|!=
literal|null
condition|)
block|{
name|rdb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionGCOnMixedModeDB
parameter_list|()
block|{
name|long
name|sdmaxrev
init|=
literal|1L
decl_stmt|;
name|RDBDocumentStore
name|rdb0
init|=
literal|null
decl_stmt|;
name|RDBDocumentStore
name|rdb1
init|=
literal|null
decl_stmt|;
name|RDBDocumentStore
name|rdb2
init|=
literal|null
decl_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|garbage
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create schema-0 ds and write one split document and one regular document
block|{
name|RDBOptions
name|options
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"TMIXED"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|rdb0
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb0
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|hasSplitDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateOp
name|op01
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"1:p/a"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op01
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
name|SplitDocType
operator|.
name|DEFAULT_LEAF
operator|.
name|typeCode
argument_list|()
argument_list|)
expr_stmt|;
name|op01
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_MAX_REV_TIME_IN_SECS
argument_list|,
name|sdmaxrev
argument_list|)
expr_stmt|;
name|UpdateOp
name|op02
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/regular"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op01
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|op02
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rdb0
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|ops
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|op01
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// upgrade to schema 1 and write one split document
block|{
name|RDBOptions
name|options
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"TMIXED"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|1
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|rdb1
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta
init|=
name|rdb1
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|hasSplitDocs
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|op1
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"1:p/b"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op1
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
name|SplitDocType
operator|.
name|DEFAULT_LEAF
operator|.
name|typeCode
argument_list|()
argument_list|)
expr_stmt|;
name|op1
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_MAX_REV_TIME_IN_SECS
argument_list|,
name|sdmaxrev
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rdb1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|op1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|op1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// upgrade to schema 2, add another split document
block|{
name|RDBOptions
name|options2
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|tablePrefix
argument_list|(
literal|"TMIXED"
argument_list|)
operator|.
name|initialSchema
argument_list|(
literal|0
argument_list|)
operator|.
name|upgradeToSchema
argument_list|(
literal|2
argument_list|)
operator|.
name|dropTablesOnClose
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|rdb2
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|this
operator|.
name|ds
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|,
name|options2
argument_list|)
expr_stmt|;
name|RDBTableMetaData
name|meta2
init|=
name|rdb2
operator|.
name|getTable
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|meta2
operator|.
name|hasVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta2
operator|.
name|hasSplitDocs
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateOp
name|op2
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"1:p/c"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op2
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_TYPE
argument_list|,
name|SplitDocType
operator|.
name|COMMIT_ROOT_ONLY
operator|.
name|typeCode
argument_list|()
argument_list|)
expr_stmt|;
name|op2
operator|.
name|set
argument_list|(
name|NodeDocument
operator|.
name|SD_MAX_REV_TIME_IN_SECS
argument_list|,
name|sdmaxrev
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rdb2
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|op2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|op2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// GC should find both
name|RDBVersionGCSupport
name|vgc
init|=
operator|new
name|RDBVersionGCSupport
argument_list|(
name|rdb2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NodeDocument
operator|.
name|SplitDocType
argument_list|>
name|gctypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SplitDocType
operator|.
name|DEFAULT_LEAF
argument_list|,
name|SplitDocType
operator|.
name|COMMIT_ROOT_ONLY
argument_list|,
name|SplitDocType
operator|.
name|DEFAULT_NO_BRANCH
argument_list|)
decl_stmt|;
name|garbage
operator|=
name|vgc
operator|.
name|identifyGarbage
argument_list|(
name|gctypes
argument_list|,
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|sdmaxrev
operator|*
literal|1000
operator|+
literal|10000
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|found
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|g
range|:
name|garbage
control|)
block|{
name|found
operator|.
name|add
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|garbage
operator|!=
literal|null
condition|)
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|garbage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rdb2
operator|!=
literal|null
condition|)
block|{
name|rdb2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rdb1
operator|!=
literal|null
condition|)
block|{
name|rdb1
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rdb0
operator|!=
literal|null
condition|)
block|{
name|rdb0
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

