begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
operator|.
name|MongoNodeState
import|;
end_import

begin_comment
comment|/**  * MongoMK specific utility class.  */
end_comment

begin_class
specifier|public
class|class
name|MongoUtil
block|{
specifier|public
specifier|static
name|String
name|fromMongoRepresentation
parameter_list|(
name|Long
name|revisionId
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|revisionId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Long
name|toMongoRepresentation
parameter_list|(
name|String
name|revisionId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|revisionId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|revisionId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid revision id: "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|NodeState
name|wrap
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
name|node
operator|!=
literal|null
condition|?
operator|new
name|MongoNodeState
argument_list|(
name|node
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|adjustPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|"/"
else|:
name|path
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFiltered
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|fromMongoPropertyKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"[dollar]"
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|replaceFirst
argument_list|(
literal|"\\[dollar\\]"
argument_list|,
literal|"\\$"
argument_list|)
return|;
block|}
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
literal|"[dot]"
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|replaceAll
argument_list|(
literal|"\\[dot\\]"
argument_list|,
literal|"\\."
argument_list|)
return|;
block|}
return|return
name|key
return|;
block|}
specifier|public
specifier|static
name|String
name|toMongoPropertyKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|replaceFirst
argument_list|(
literal|"\\$"
argument_list|,
literal|"[dollar]"
argument_list|)
return|;
block|}
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"[dot]"
argument_list|)
return|;
block|}
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

