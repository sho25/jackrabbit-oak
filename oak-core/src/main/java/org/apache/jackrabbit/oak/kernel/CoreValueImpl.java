begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * CoreValueImpl... TODO: javadoc  */
end_comment

begin_class
class|class
name|CoreValueImpl
implements|implements
name|CoreValue
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreValueImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
comment|/**      * Create a new instance.      *      * @param value The value.      * @param type The property type.      * @throws IllegalArgumentException if the passed {@code value} is {@code null}.      */
specifier|private
name|CoreValueImpl
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null value"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @param type      * @throws IllegalArgumentException if the specified type cannot be created      * from a string value.      */
name|CoreValueImpl
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null value"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|NAME
case|:
case|case
name|PropertyType
operator|.
name|PATH
case|:
case|case
name|PropertyType
operator|.
name|DATE
case|:
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
case|case
name|PropertyType
operator|.
name|URI
case|:
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
name|this
operator|.
name|value
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|this
operator|.
name|value
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|this
operator|.
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|this
operator|.
name|value
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// undefined property type or binary.
comment|// NOTE: binary must be constructed using BinaryValue -> see CoreValueFactory
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @throws IllegalArgumentException if the passed {@code value}      * is {@code null}.      */
name|CoreValueImpl
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @throws IllegalArgumentException if the passed {@code value}      * is {@code null}.      */
name|CoreValueImpl
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @throws IllegalArgumentException if the passed {@code value}      * is {@code null}.      */
name|CoreValueImpl
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @throws IllegalArgumentException if the passed {@code value}      * is {@code null}.      */
name|CoreValueImpl
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance.      *      * @param value      * @throws IllegalArgumentException if the passed {@code value}      * is {@code null}.      */
name|CoreValueImpl
parameter_list|(
name|BinaryValue
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
name|PropertyType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------------------------------------< CoreValue>---
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
name|long
name|l
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|l
operator|=
operator|(
name|Long
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|l
operator|=
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|l
operator|=
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
break|break;
default|default:
name|l
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
name|double
name|d
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|d
operator|=
operator|(
name|Double
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|d
operator|=
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|d
operator|=
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
break|break;
default|default:
name|d
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|()
block|{
name|boolean
name|b
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
name|b
operator|=
operator|(
name|Boolean
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|b
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported conversion."
argument_list|)
throw|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|BigDecimal
name|getDecimal
parameter_list|()
block|{
name|BigDecimal
name|decimal
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
name|decimal
operator|=
operator|(
name|BigDecimal
operator|)
name|value
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
name|decimal
operator|=
operator|new
name|BigDecimal
argument_list|(
name|getDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PropertyType
operator|.
name|LONG
case|:
name|decimal
operator|=
operator|new
name|BigDecimal
argument_list|(
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|decimal
operator|=
operator|new
name|BigDecimal
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|decimal
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
name|InputStream
name|in
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|in
operator|=
operator|(
operator|(
name|BinaryValue
operator|)
name|value
operator|)
operator|.
name|getStream
argument_list|()
expr_stmt|;
break|break;
default|default:
try|try
block|{
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|getString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// TODO: proper log output and exception handling
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|in
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
name|long
name|length
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|length
operator|=
operator|(
operator|(
name|BinaryValue
operator|)
name|value
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
break|break;
default|default:
name|length
operator|=
name|getString
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
comment|//---------------------------------------------------------< Comparable>---
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CoreValue
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|type
operator|!=
name|o
operator|.
name|getType
argument_list|()
condition|)
block|{
comment|// TODO convert?
return|return
name|type
operator|-
name|o
operator|.
name|getType
argument_list|()
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getDecimal
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getBoolean
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|value
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|type
operator|^
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|CoreValueImpl
condition|)
block|{
name|CoreValueImpl
name|other
init|=
operator|(
name|CoreValueImpl
operator|)
name|o
decl_stmt|;
return|return
name|type
operator|==
name|other
operator|.
name|type
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

