begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|LineBasedFrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|compression
operator|.
name|SnappyFramedEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|string
operator|.
name|StringDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|util
operator|.
name|SelfSignedCertificate
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|RecordIdEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|codec
operator|.
name|SegmentEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|jmx
operator|.
name|StandbyStatusMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|standby
operator|.
name|store
operator|.
name|CommunicationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_class
specifier|public
class|class
name|StandbyServer
implements|implements
name|StandbyStatusMBean
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandbyServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|EventLoopGroup
name|bossGroup
decl_stmt|;
specifier|private
specifier|final
name|EventLoopGroup
name|workerGroup
decl_stmt|;
specifier|private
specifier|final
name|ServerBootstrap
name|b
decl_stmt|;
specifier|private
specifier|final
name|CommunicationObserver
name|observer
decl_stmt|;
specifier|private
specifier|final
name|StandbyServerHandler
name|handler
decl_stmt|;
specifier|private
name|SslContext
name|sslContext
decl_stmt|;
specifier|private
name|ChannelFuture
name|channelFuture
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|public
name|StandbyServer
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|SegmentStore
name|store
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|SSLException
block|{
name|this
argument_list|(
name|port
argument_list|,
name|store
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServer
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|SegmentStore
name|store
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|SSLException
block|{
name|this
argument_list|(
name|port
argument_list|,
name|store
argument_list|,
literal|null
argument_list|,
name|secure
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServer
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|SegmentStore
name|store
parameter_list|,
name|String
index|[]
name|allowedClientIPRanges
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|SSLException
block|{
name|this
argument_list|(
name|port
argument_list|,
name|store
argument_list|,
name|allowedClientIPRanges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServer
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|SegmentStore
name|store
parameter_list|,
name|String
index|[]
name|allowedClientIPRanges
parameter_list|,
name|boolean
name|secure
parameter_list|)
throws|throws
name|CertificateException
throws|,
name|SSLException
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
if|if
condition|(
name|secure
condition|)
block|{
name|SelfSignedCertificate
name|ssc
init|=
operator|new
name|SelfSignedCertificate
argument_list|()
decl_stmt|;
name|sslContext
operator|=
name|SslContext
operator|.
name|newServerContext
argument_list|(
name|ssc
operator|.
name|certificate
argument_list|()
argument_list|,
name|ssc
operator|.
name|privateKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|observer
operator|=
operator|new
name|CommunicationObserver
argument_list|(
literal|"primary"
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|StandbyServerHandler
argument_list|(
name|store
argument_list|,
name|observer
argument_list|,
name|allowedClientIPRanges
argument_list|)
expr_stmt|;
name|bossGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|workerGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|()
expr_stmt|;
specifier|final
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
try|try
block|{
name|jmxServer
operator|.
name|registerMBean
argument_list|(
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|StandbyStatusMBean
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|this
operator|.
name|getMBeanName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can't register standby status mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|b
operator|=
operator|new
name|ServerBootstrap
argument_list|()
expr_stmt|;
name|b
operator|.
name|group
argument_list|(
name|bossGroup
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
name|b
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|b
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|childHandler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|p
init|=
name|ch
operator|.
name|pipeline
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslContext
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|addLast
argument_list|(
name|sslContext
operator|.
name|newHandler
argument_list|(
name|ch
operator|.
name|alloc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|LineBasedFrameDecoder
argument_list|(
literal|8192
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|StringDecoder
argument_list|(
name|CharsetUtil
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|SnappyFramedEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|RecordIdEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|SegmentEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMBeanName
parameter_list|()
block|{
return|return
name|StandbyStatusMBean
operator|.
name|JMX_NAME
operator|+
literal|",id="
operator|+
name|this
operator|.
name|port
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|handler
operator|.
name|state
operator|=
name|STATUS_CLOSING
expr_stmt|;
name|observer
operator|.
name|unregister
argument_list|()
expr_stmt|;
specifier|final
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
try|try
block|{
name|jmxServer
operator|.
name|unregisterMBean
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|this
operator|.
name|getMBeanName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can unregister standby status mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bossGroup
operator|!=
literal|null
operator|&&
operator|!
name|bossGroup
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|bossGroup
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|workerGroup
operator|!=
literal|null
operator|&&
operator|!
name|workerGroup
operator|.
name|isShuttingDown
argument_list|()
condition|)
block|{
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
name|handler
operator|.
name|state
operator|=
name|STATUS_CLOSED
expr_stmt|;
block|}
specifier|private
name|void
name|start
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{
if|if
condition|(
name|running
condition|)
return|return;
name|running
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|handler
operator|.
name|state
operator|=
name|STATUS_STARTING
expr_stmt|;
specifier|final
name|Thread
name|close
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|channelFuture
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
operator|.
name|closeFuture
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|StandbyServer
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|startup
init|=
name|bossGroup
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//netty 4.0.20 has a race condition issue with
comment|//asynchronous channel registration. As a workaround
comment|//we bind asynchronously from the boss event group to make
comment|//the channel registration synchronous.
comment|//Note that now this method will return immediately.
name|channelFuture
operator|=
name|b
operator|.
name|bind
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|close
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|startup
operator|.
name|awaitUninterruptibly
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Server failed to start within 10 seconds and will be canceled"
argument_list|)
expr_stmt|;
name|startup
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wait
condition|)
block|{
try|try
block|{
name|close
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
block|}
specifier|public
name|void
name|startAndWait
parameter_list|()
block|{
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|start
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
literal|"primary"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|running
condition|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|handler
operator|.
name|state
operator|=
name|STATUS_STOPPED
expr_stmt|;
name|channelFuture
operator|.
name|channel
argument_list|()
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|handler
operator|==
literal|null
condition|?
name|STATUS_INITIALIZING
else|:
name|handler
operator|.
name|state
return|;
block|}
block|}
end_class

end_unit

