begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|MicroKernelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|ExceptionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * A microkernel prototype implementation that distributes nodes based on the path,  * using a fixed configuration.  * All mounted repositories contains the configuration as follows:  * /:mount/rep1 { url: "mk:...", paths: "/a,/b" }.  */
end_comment

begin_class
specifier|public
class|class
name|VirtualRepositoryWrapper
extends|extends
name|WrapperBase
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"virtual:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MOUNT
init|=
literal|"/:mount"
decl_stmt|;
comment|/**      * The 'main' (wrapped) implementation.      */
specifier|private
specifier|final
name|Wrapper
name|mk
decl_stmt|;
comment|/**      * Path map.      * Key: path, value: mount name      */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dir
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Pending commit map.      * Key: mount name, value: the builder that contains the pending commit.      */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsopWriter
argument_list|>
name|builders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsopWriter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Mount map.      * Key: mount name, value: microkernel implementation.      */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Wrapper
argument_list|>
name|mounts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Wrapper
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Head revision map.      * Key: mount name, value: the head revision for this mount.      */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeMap
name|map
init|=
operator|new
name|NodeMap
argument_list|()
decl_stmt|;
specifier|private
name|VirtualRepositoryWrapper
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|WrapperBase
operator|.
name|wrap
argument_list|(
name|mk
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|VirtualRepositoryWrapper
name|get
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|String
name|urlMeta
init|=
name|url
operator|.
name|substring
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|MicroKernel
name|mk
init|=
name|MicroKernelFactory
operator|.
name|getInstance
argument_list|(
name|urlMeta
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|VirtualRepositoryWrapper
name|vm
init|=
operator|new
name|VirtualRepositoryWrapper
argument_list|(
name|mk
argument_list|)
decl_stmt|;
if|if
condition|(
name|mk
operator|.
name|nodeExists
argument_list|(
name|MOUNT
argument_list|,
name|head
argument_list|)
condition|)
block|{
name|String
name|mounts
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|MOUNT
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|NodeMap
name|map
init|=
operator|new
name|NodeMap
argument_list|()
decl_stmt|;
name|JsopReader
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|mounts
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|map
argument_list|,
name|t
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|pos
init|=
literal|0
init|;
condition|;
name|pos
operator|++
control|)
block|{
name|String
name|childName
init|=
name|n
operator|.
name|getChildNodeName
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|childName
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|NodeImpl
name|mount
init|=
name|n
operator|.
name|getNode
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|String
name|mountUrl
init|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|mount
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|paths
init|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|mount
operator|.
name|getProperty
argument_list|(
literal|"paths"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|vm
operator|.
name|addMount
argument_list|(
name|childName
argument_list|,
name|mountUrl
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|vm
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|vm
return|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|addMount
parameter_list|(
name|String
name|mount
parameter_list|,
name|String
name|url
parameter_list|,
name|String
index|[]
name|paths
parameter_list|)
block|{
name|MicroKernel
name|mk
init|=
name|MicroKernelFactory
operator|.
name|getInstance
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|mounts
operator|.
name|put
argument_list|(
name|mount
argument_list|,
name|WrapperBase
operator|.
name|wrap
argument_list|(
name|mk
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|dir
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|mount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|commitStream
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopTokenizer
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|String
name|path
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|NodeImpl
name|n
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|map
argument_list|,
name|t
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|diff
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|diff
operator|.
name|encodedValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'-'
case|:
block|{
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopTokenizer
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'>'
case|:
block|{
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|JsopWriter
name|diff
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|String
name|position
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|to
argument_list|)
condition|)
block|{
name|to
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|tag
argument_list|(
literal|'>'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|diff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|diff
operator|.
name|value
argument_list|(
name|to
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|to
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|to
argument_list|)
condition|)
block|{
name|to
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|rootPath
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|tag
argument_list|(
literal|'>'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|diff
operator|.
name|value
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
name|buffer
argument_list|(
name|path
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"token: "
operator|+
operator|(
name|char
operator|)
name|t
operator|.
name|getTokenType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|String
name|revision
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsopWriter
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|mount
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MicroKernel
name|m
init|=
name|mounts
operator|.
name|get
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|String
name|jsop
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|revision
operator|=
name|m
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
argument_list|,
name|revisionId
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|mount
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|getHeadRevision
argument_list|()
return|;
block|}
specifier|private
name|String
name|getMount
parameter_list|(
name|String
name|path
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|mount
init|=
name|dir
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mount
operator|!=
literal|null
condition|)
block|{
return|return
name|mount
return|;
block|}
comment|// check parent
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|buffer
parameter_list|(
name|String
name|path
parameter_list|,
name|JsopWriter
name|diff
parameter_list|)
block|{
name|String
name|mount
init|=
name|getMount
argument_list|(
literal|"/"
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mount
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|m
range|:
name|mounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|getBuilder
argument_list|(
name|m
argument_list|)
operator|.
name|append
argument_list|(
name|diff
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|getBuilder
argument_list|(
name|mount
argument_list|)
operator|.
name|append
argument_list|(
name|diff
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|JsopWriter
name|getBuilder
parameter_list|(
name|String
name|mount
parameter_list|)
block|{
name|JsopWriter
name|builder
init|=
name|builders
operator|.
name|get
argument_list|(
name|mount
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|builders
operator|.
name|put
argument_list|(
name|mount
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
for|for
control|(
name|MicroKernel
name|m
range|:
name|mounts
operator|.
name|values
argument_list|()
control|)
block|{
name|m
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHeadRevision
parameter_list|()
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisions
operator|.
name|size
argument_list|()
operator|!=
name|mounts
operator|.
name|size
argument_list|()
condition|)
block|{
name|revisions
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Wrapper
argument_list|>
name|e
range|:
name|mounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|m
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|r
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|revisions
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|revisions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|JsopReader
name|getJournalStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
return|return
name|mk
operator|.
name|getJournalStream
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|diffStream
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
return|return
name|mk
operator|.
name|diffStream
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
name|mk
operator|.
name|getLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getNodesStream
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
return|return
name|getNodesStream
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|JsopReader
name|getNodesStream
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|String
name|mount
init|=
name|getMount
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mount
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not mapped: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|rev
init|=
name|getRevision
argument_list|(
name|mount
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|Wrapper
name|mk
init|=
name|mounts
operator|.
name|get
argument_list|(
name|mount
argument_list|)
decl_stmt|;
return|return
name|mk
operator|.
name|getNodesStream
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|private
name|String
name|getRevision
parameter_list|(
name|String
name|mount
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
for|for
control|(
name|String
name|rev
range|:
name|revisionId
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|rev
operator|.
name|startsWith
argument_list|(
name|mount
operator|+
literal|":"
argument_list|)
condition|)
block|{
return|return
name|rev
operator|.
name|substring
argument_list|(
name|mount
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Unknown revision: "
operator|+
name|revisionId
operator|+
literal|" mount: "
operator|+
name|mount
argument_list|)
throw|;
block|}
specifier|public
name|JsopReader
name|getRevisionsStream
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
return|return
name|mk
operator|.
name|getRevisionsStream
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|String
name|mount
init|=
name|getMount
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mount
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not mapped: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|rev
init|=
name|getRevision
argument_list|(
name|mount
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|MicroKernel
name|mk
init|=
name|mounts
operator|.
name|get
argument_list|(
name|mount
argument_list|)
decl_stmt|;
return|return
name|mk
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
return|;
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|String
name|mount
init|=
name|getMount
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mount
operator|==
literal|null
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Not mapped: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|rev
init|=
name|getRevision
argument_list|(
name|mount
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|MicroKernel
name|mk
init|=
name|mounts
operator|.
name|get
argument_list|(
name|mount
argument_list|)
decl_stmt|;
return|return
name|mk
operator|.
name|getChildNodeCount
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|mk
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevision
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|mk
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevision
argument_list|,
name|maxWaitMillis
argument_list|)
return|;
block|}
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|mk
operator|.
name|write
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
end_class

end_unit

