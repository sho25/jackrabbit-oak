begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
operator|.
name|FileLineDifferenceIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|FileLineDifferenceIteratorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testRandomized
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|marked
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|all
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|diff
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|size
condition|;
name|a
operator|++
control|)
block|{
name|marked
operator|.
name|add
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|size
condition|;
name|a
operator|++
control|)
block|{
name|all
operator|.
name|add
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|addAll
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|diff
operator|.
name|removeAll
argument_list|(
name|marked
argument_list|)
expr_stmt|;
name|String
name|m
init|=
name|marked
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[ \\[\\]]"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|a
init|=
name|all
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[ \\[\\]]"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertDiff
argument_list|(
name|m
argument_list|,
name|a
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|assertDiff
argument_list|(
literal|"a,b,c"
argument_list|,
literal|"a,b,c"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"a,b,c,d,f"
argument_list|,
literal|"a,b,f"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|assertDiff
argument_list|(
literal|"a,b"
argument_list|,
literal|"a,b,c"
argument_list|,
name|asList
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"a,b"
argument_list|,
literal|""
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|,
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|""
argument_list|,
literal|"a, b"
argument_list|,
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffWithExtraEntriesInMarked
parameter_list|()
throws|throws
name|IOException
block|{
name|assertDiff
argument_list|(
literal|"a,b"
argument_list|,
literal|"a,b,c, e, h"
argument_list|,
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"a,b,d,e"
argument_list|,
literal|"a,b,c"
argument_list|,
name|asList
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"a,b,d,e,f"
argument_list|,
literal|"a,b,c,f"
argument_list|,
name|asList
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"a,b,d,e,f"
argument_list|,
literal|"a,b,c,f, h"
argument_list|,
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDiff
argument_list|(
literal|"3,7"
argument_list|,
literal|"2,3,5,9"
argument_list|,
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"5"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarkedDiffWithExtraEntriesInMarked
parameter_list|()
throws|throws
name|IOException
block|{
name|assertReverseDiff
argument_list|(
literal|"a,b,c,e,h"
argument_list|,
literal|"a,b,c"
argument_list|,
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertReverseDiff
argument_list|(
literal|"a,b,d,e"
argument_list|,
literal|"a,b,c"
argument_list|,
name|asList
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertReverseDiff
argument_list|(
literal|"a,b,d"
argument_list|,
literal|"a,b,d"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertReverseDiff
argument_list|(
literal|"a,0xb,d,e,f"
argument_list|,
literal|"a,d"
argument_list|,
name|asList
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertReverseDiff
argument_list|(
literal|"a,0xb,d,e,f"
argument_list|,
literal|"a,d,e,f,g"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertReverseDiff
parameter_list|(
name|String
name|marked
parameter_list|,
name|String
name|all
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|diff
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|createItr
argument_list|(
name|all
argument_list|,
name|marked
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"marked: "
operator|+
name|marked
operator|+
literal|" all: "
operator|+
name|all
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|itr
argument_list|)
argument_list|,
name|is
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertDiff
parameter_list|(
name|String
name|marked
parameter_list|,
name|String
name|all
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|diff
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|createItr
argument_list|(
name|marked
argument_list|,
name|all
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"marked: "
operator|+
name|marked
operator|+
literal|" all: "
operator|+
name|all
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|itr
argument_list|)
argument_list|,
name|is
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|createItr
parameter_list|(
name|String
name|marked
parameter_list|,
name|String
name|all
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|lineItr
argument_list|(
name|marked
argument_list|)
argument_list|,
name|lineItr
argument_list|(
name|all
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|LineIterator
name|lineItr
parameter_list|(
name|String
name|seq
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|seqItr
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|seq
argument_list|)
decl_stmt|;
name|String
name|lines
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|seqItr
argument_list|)
decl_stmt|;
return|return
operator|new
name|LineIterator
argument_list|(
operator|new
name|StringReader
argument_list|(
name|lines
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

