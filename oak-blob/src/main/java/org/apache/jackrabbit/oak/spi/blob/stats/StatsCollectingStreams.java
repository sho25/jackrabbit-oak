begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|StatsCollectingStreams
block|{
specifier|public
specifier|static
name|InputStream
name|wrap
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|BlobStatsCollector
name|collector
parameter_list|,
specifier|final
name|String
name|blobId
parameter_list|,
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|StatsCollectingStreams
operator|.
name|wrap
argument_list|(
name|collector
argument_list|,
name|blobId
argument_list|,
name|in
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|wrap
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|BlobStatsCollector
name|collector
parameter_list|,
specifier|final
name|String
name|blobId
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
specifier|final
name|CountingInputStream
name|cin
init|=
operator|new
name|CountingInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterInputStream
argument_list|(
name|cin
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//We rely on close to determine how much was downloaded
comment|//as once an InputStream is exposed its not possible to
comment|//determine if the stream is actually used
comment|//Download time might not be accurate as reading code might
comment|//be processing also as it moved further in stream. So that
comment|//overhead would add to the download time
name|collector
operator|.
name|downloaded
argument_list|(
name|blobId
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|cin
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|collector
operator|.
name|downloadCompleted
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

