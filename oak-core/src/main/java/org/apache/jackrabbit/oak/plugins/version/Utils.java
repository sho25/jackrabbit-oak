begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * {@code Utils} provide some utility methods.  */
end_comment

begin_class
specifier|final
class|class
name|Utils
block|{
specifier|private
name|Utils
parameter_list|()
block|{     }
comment|/**      * Returns the jcr:uuid value of given {@code node}.      *      * @param node a referenceable node.      * @return the value of the jcr:uuid property.      * @throws IllegalArgumentException if the node is not referenceable.      */
annotation|@
name|Nonnull
specifier|static
name|String
name|uuidFromNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|node
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|uuidFromNode
argument_list|(
name|node
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|static
name|String
name|uuidFromNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|node
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|checkNotNull
argument_list|(
name|node
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not referenceable"
argument_list|)
throw|;
block|}
return|return
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
comment|/**      * Returns the {@code jcr:primaryType} value of the given      * {@code node}.      *      * @param node a node.      * @return the {@code jcr:primaryType} value.      * @throws IllegalStateException if the node does not have a {@code jcr:primaryType}      *                               property.      */
annotation|@
name|Nonnull
specifier|static
name|String
name|primaryTypeOf
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|node
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|String
name|primaryType
init|=
name|checkNotNull
argument_list|(
name|node
argument_list|)
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Node does not have a jcr:primaryType"
argument_list|)
throw|;
block|}
return|return
name|primaryType
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|throwProtected
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|100
argument_list|,
literal|"Item is protected: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

