begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ValueConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ValueConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ValueConverter
parameter_list|()
block|{}
specifier|public
specifier|static
name|boolean
name|canConvert
parameter_list|(
name|int
name|sourceType
parameter_list|,
name|int
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|sourceType
operator|==
name|targetType
operator|||
name|sourceType
operator|==
name|PropertyType
operator|.
name|UNDEFINED
operator|||
name|targetType
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|targetType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
case|case
name|PropertyType
operator|.
name|DATE
case|:
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
case|case
name|PropertyType
operator|.
name|LONG
case|:
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
literal|true
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
case|case
name|PropertyType
operator|.
name|PATH
case|:
case|case
name|PropertyType
operator|.
name|URI
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|NAME
case|:
case|case
name|PropertyType
operator|.
name|PATH
case|:
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
literal|true
return|;
block|}
break|break;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
literal|true
return|;
block|}
break|break;
block|}
if|if
condition|(
name|sourceType
operator|==
name|PropertyType
operator|.
name|STRING
operator|||
name|sourceType
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Converts the given value to a value of the specified target type. The      * conversion is performed according to the rules described in      * "3.6.4 Property Type Conversion" in the JCR 2.0 specification.      *      * @param value the value to convert      * @param targetType the target property type      * @param mapper the name mapper or {@code null} if no name/path mapping is required.      * @return the converted value      * @throws IllegalArgumentException if mapping is illegal      */
specifier|public
specifier|static
name|PropertyValue
name|convert
parameter_list|(
annotation|@
name|Nonnull
name|PropertyValue
name|value
parameter_list|,
name|int
name|targetType
parameter_list|,
annotation|@
name|Nullable
name|NamePathMapper
name|mapper
parameter_list|)
block|{
name|int
name|sourceType
init|=
name|value
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceType
operator|==
name|targetType
condition|)
block|{
return|return
name|value
return|;
block|}
switch|switch
condition|(
name|targetType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
name|Blob
name|blob
init|=
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
decl_stmt|;
return|return
name|PropertyValues
operator|.
name|newBinary
argument_list|(
name|blob
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|PropertyValues
operator|.
name|newBoolean
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|PropertyValues
operator|.
name|newDate
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|PropertyValues
operator|.
name|newDouble
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|PropertyValues
operator|.
name|newLong
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|PropertyValues
operator|.
name|newDecimal
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
argument_list|)
return|;
block|}
comment|// for other types, the value is first converted to a string
name|String
name|v
init|=
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|targetType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|PropertyValues
operator|.
name|newString
argument_list|(
name|v
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|PropertyValues
operator|.
name|newPath
argument_list|(
name|v
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// uri contains scheme
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to convert URI "
operator|+
name|v
operator|+
literal|" to PATH"
argument_list|)
throw|;
block|}
name|String
name|p
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyValues
operator|.
name|newPath
argument_list|(
name|v
argument_list|)
return|;
block|}
break|break;
case|case
name|PropertyType
operator|.
name|NAME
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|PATH
case|:
comment|// path might be a name (relative path of length 1)
comment|// try conversion via string
return|return
name|PropertyValues
operator|.
name|newName
argument_list|(
name|getOakPath
argument_list|(
name|v
argument_list|,
name|mapper
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// uri contains scheme
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to convert URI "
operator|+
name|v
operator|+
literal|" to PATH"
argument_list|)
throw|;
block|}
name|String
name|p
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyValues
operator|.
name|newName
argument_list|(
name|getOakPath
argument_list|(
name|v
argument_list|,
name|mapper
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|PropertyValues
operator|.
name|newReference
argument_list|(
name|v
argument_list|)
return|;
block|}
break|break;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|PropertyValues
operator|.
name|newWeakReference
argument_list|(
name|v
argument_list|)
return|;
block|}
break|break;
case|case
name|PropertyType
operator|.
name|URI
case|:
switch|switch
condition|(
name|sourceType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|PropertyValues
operator|.
name|newUri
argument_list|(
name|v
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
comment|// prefix name with "./" (JCR 2.0 spec 3.6.4.8)
return|return
name|PropertyValues
operator|.
name|newUri
argument_list|(
literal|"./"
operator|+
name|v
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
comment|// prefix name with "./" (JCR 2.0 spec 3.6.4.9)
return|return
name|PropertyValues
operator|.
name|newUri
argument_list|(
literal|"./"
operator|+
name|v
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported conversion from property type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|sourceType
argument_list|)
operator|+
literal|" to property type "
operator|+
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|targetType
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|String
name|getOakPath
parameter_list|(
annotation|@
name|Nonnull
name|String
name|jcrPath
parameter_list|,
annotation|@
name|CheckForNull
name|NamePathMapper
name|mapper
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
comment|// to simplify testing, a getNamePathMapper isn't required
return|return
name|jcrPath
return|;
block|}
name|String
name|p
init|=
name|mapper
operator|.
name|getOakPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid JCR path: "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

