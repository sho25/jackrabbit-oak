begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|ActiveDeletedBlobCollectorMBeanImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveDeletedBlobDisabledTest
block|{
specifier|private
name|void
name|test
parameter_list|(
specifier|final
name|boolean
name|disabled
parameter_list|)
block|{
name|String
name|property
init|=
literal|"oak.active.deletion.disabled"
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
literal|""
operator|+
name|disabled
argument_list|)
expr_stmt|;
name|NodeStore
name|store
init|=
literal|null
decl_stmt|;
name|IndexPathService
name|indexPathService
init|=
literal|null
decl_stmt|;
name|AsyncIndexInfoService
name|asyncIndexInfoService
init|=
literal|null
decl_stmt|;
name|Executor
name|executor
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ActiveDeletedBlobCollectorMBeanImpl
name|b
init|=
operator|new
name|ActiveDeletedBlobCollectorMBeanImpl
argument_list|(
name|ActiveDeletedBlobCollectorFactory
operator|.
name|NOOP
argument_list|,
operator|new
name|DefaultWhiteboard
argument_list|()
argument_list|,
name|store
argument_list|,
name|indexPathService
argument_list|,
name|asyncIndexInfoService
argument_list|,
operator|new
name|MemoryBlobStore
argument_list|()
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|b
operator|.
name|isActiveDeletionUnsafe
argument_list|()
expr_stmt|;
name|b
operator|.
name|isDisabled
argument_list|()
expr_stmt|;
name|CompositeData
name|d
init|=
name|b
operator|.
name|startActiveCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|disabled
condition|)
block|{
comment|// none
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"code"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Active deletion is disabled"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// failed
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"code"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Active lucene index blobs collection couldn't be run as a safe timestamp for purging lucene index blobs couldn't be evaluated"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisabled
parameter_list|()
block|{
name|test
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnabled
parameter_list|()
block|{
name|test
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

