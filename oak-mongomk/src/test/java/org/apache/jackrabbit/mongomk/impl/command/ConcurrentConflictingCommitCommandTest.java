begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoMicroKernelTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for concurrent conflicting commit scenarios.  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentConflictingCommitCommandTest
extends|extends
name|BaseMongoMicroKernelTest
block|{
comment|/**      * Test that concurrent update to root ends up with a conflict exception.      */
annotation|@
name|Test
specifier|public
name|void
name|rootUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|2
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|n
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd1
init|=
operator|new
name|WaitingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd2
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future1
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd1
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future2
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// cmd2 updated root by adding /a2, so this is expected.
block|}
block|}
comment|/**      * Test that a commit does not end up with a conflict exception when there      * is another concurrent commit with a disjoint affected path.      */
annotation|@
name|Test
specifier|public
name|void
name|subPathUpdate1
parameter_list|()
throws|throws
name|Exception
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|2
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|n
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd1
init|=
operator|new
name|WaitingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd2
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future1
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd1
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future2
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expected: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that a commit does not end up with a conflict exception when there      * are two concurrent commits with disjoint affected paths.      */
annotation|@
name|Test
specifier|public
name|void
name|subPathUpdate2
parameter_list|()
throws|throws
name|Exception
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a3\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|3
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|n
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd1
init|=
operator|new
name|WaitingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd2
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd3
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a3/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future1
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd1
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future2
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd2
argument_list|)
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future3
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd3
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
name|future3
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expected: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that a commit ends up with a conflict exception when there are two      * concurrent commits with one disjoint but other overlapping affected path.      */
annotation|@
name|Test
specifier|public
name|void
name|subPathUpdate3
parameter_list|()
throws|throws
name|Exception
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2\" : {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|3
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|n
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd1
init|=
operator|new
name|WaitingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd2
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a2/b1\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|CommitCommand
name|cmd3
init|=
operator|new
name|NotifyingCommitCommand
argument_list|(
name|getNodeStore
argument_list|()
argument_list|,
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a1/b2\" : {}"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future1
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd1
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future2
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd2
argument_list|)
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Long
argument_list|>
name|future3
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|CommitCallable
argument_list|(
name|cmd3
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
name|future3
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// cmd1 and cmd3 update the same root, so this is expected.
block|}
block|}
comment|/**      * A CommitCommand that simply waits on the waitLock until notified.      */
specifier|private
specifier|static
class|class
name|WaitingCommitCommand
extends|extends
name|CommitCommand
block|{
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
specifier|public
name|WaitingCommitCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|Commit
name|commit
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|saveAndSetHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|saveAndSetHeadRevision
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**      * A CommitCommand that notifies on the waitLock.      */
specifier|private
specifier|static
class|class
name|NotifyingCommitCommand
extends|extends
name|CommitCommand
block|{
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
specifier|public
name|NotifyingCommitCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|Commit
name|commit
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|saveAndSetHeadRevision
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|result
init|=
name|super
operator|.
name|saveAndSetHeadRevision
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A Callable test simply executes the command.      */
specifier|private
specifier|static
class|class
name|CommitCallable
implements|implements
name|Callable
argument_list|<
name|Long
argument_list|>
block|{
specifier|private
specifier|final
name|CommitCommand
name|command
decl_stmt|;
specifier|public
name|CommitCallable
parameter_list|(
name|CommitCommand
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|command
operator|.
name|execute
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

