begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|MultiDataStoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|RandomInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test base class for {@link DataStore} which covers all scenarios.  * Copied from {@link org.apache.jackrabbit.core.data.TestCaseBase}.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDataStoreTest
block|{
comment|/**      * Logger      */
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractDataStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * length of record to be added      */
specifier|protected
name|int
name|dataLength
init|=
literal|123456
decl_stmt|;
comment|/**      * datastore directory path      */
specifier|protected
name|String
name|dataStoreDir
decl_stmt|;
specifier|protected
name|DataStore
name|ds
decl_stmt|;
comment|/**      * Random number generator to populate data      */
specifier|protected
name|Random
name|randomGen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**      * Delete temporary directory.      */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|dataStoreDir
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|ds
operator|=
name|createDataStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error in close ds"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#addRecord(InputStream)} API.      */
annotation|@
name|Test
specifier|public
name|void
name|testAddRecord
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#addRecord, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doAddRecordTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#addRecord finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#getRecord(DataIdentifier)} API.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetRecord
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testGetRecord, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doGetRecordTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testGetRecord finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#getAllIdentifiers()} API.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetAllIdentifiers
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testGetAllIdentifiers, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doGetAllIdentifiersTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testGetAllIdentifiers finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#updateModifiedDateOnAccess(long)}      * API.      */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateLastModifiedOnAccess
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testUpdateLastModifiedOnAccess, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doUpdateLastModifiedOnAccessTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testUpdateLastModifiedOnAccess finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate      * {@link MultiDataStoreAware#deleteRecord(DataIdentifier)}.API.      */
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRecord
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testDeleteRecord, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doDeleteRecordTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testDeleteRecord finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#deleteAllOlderThan(long)} API.      */
annotation|@
name|Test
specifier|public
name|void
name|testDeleteAllOlderThan
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testDeleteAllOlderThan, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doDeleteAllOlderThan
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testDeleteAllOlderThan finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate {@link DataStore#getRecordFromReference(String)}      */
annotation|@
name|Test
specifier|public
name|void
name|testReference
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testReference, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doReferenceTest
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testReference finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate mixed scenario use of {@link DataStore}.      */
annotation|@
name|Test
specifier|public
name|void
name|testSingleThread
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testSingleThread, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doTestSingleThread
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testSingleThread finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Testcase to validate mixed scenario use of {@link DataStore} in      * multi-threaded concurrent environment.      */
annotation|@
name|Test
specifier|public
name|void
name|testMultiThreaded
parameter_list|()
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testMultiThreaded, testDir="
operator|+
name|dataStoreDir
argument_list|)
expr_stmt|;
name|doTestMultiThreaded
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"#testMultiThreaded finished, time taken = ["
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|DataStore
name|createDataStore
parameter_list|()
throws|throws
name|RepositoryException
function_decl|;
comment|/**      * Test {@link DataStore#addRecord(InputStream)} and assert length of added      * record.      */
specifier|protected
name|void
name|doAddRecordTest
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link DataStore#getRecord(DataIdentifier)} and assert length and      * inputstream.      */
specifier|protected
name|void
name|doGetRecordTest
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rec
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link MultiDataStoreAware#deleteRecord(DataIdentifier)}.      */
specifier|protected
name|void
name|doDeleteRecordTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|randomGen
decl_stmt|;
name|byte
index|[]
name|data1
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|DataRecord
name|rec1
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data1
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data2
argument_list|)
expr_stmt|;
name|DataRecord
name|rec2
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data2
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data3
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data3
argument_list|)
expr_stmt|;
name|DataRecord
name|rec3
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data3
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MultiDataStoreAware
operator|)
name|ds
operator|)
operator|.
name|deleteRecord
argument_list|(
name|rec1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"rec1 should be null"
argument_list|,
name|ds
operator|.
name|getRecordIfStored
argument_list|(
name|rec1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data2
argument_list|)
argument_list|,
name|ds
operator|.
name|getRecord
argument_list|(
name|rec2
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data3
argument_list|)
argument_list|,
name|ds
operator|.
name|getRecord
argument_list|(
name|rec3
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link DataStore#getAllIdentifiers()} and asserts all identifiers      * are returned.      */
specifier|protected
name|void
name|doGetAllIdentifiersTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DataIdentifier
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
name|randomGen
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|rec
operator|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|rec
operator|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|itr
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ds
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"record found on list"
argument_list|,
name|list
operator|.
name|remove
argument_list|(
name|itr
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that timestamp of all records accessed after      * {@link DataStore#updateModifiedDateOnAccess(long)} invocation.      */
specifier|protected
name|void
name|doUpdateLastModifiedOnAccessTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|randomGen
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec1
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec2
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"rec2 timestamp="
operator|+
name|rec2
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
comment|// sleep for some time to ensure that async upload completes in backend.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|long
name|updateTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"updateTime="
operator|+
name|updateTime
argument_list|)
expr_stmt|;
name|ds
operator|.
name|updateModifiedDateOnAccess
argument_list|(
name|updateTime
argument_list|)
expr_stmt|;
comment|// sleep to workaround System.currentTimeMillis granularity.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec3
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec4
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rec1
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec1 touched"
argument_list|,
literal|true
argument_list|,
name|rec1
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"rec2 timestamp="
operator|+
name|rec2
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec2 not touched"
argument_list|,
literal|true
argument_list|,
name|rec2
operator|.
name|getLastModified
argument_list|()
operator|<
name|updateTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec3 touched"
argument_list|,
literal|true
argument_list|,
name|rec3
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec4 touched"
argument_list|,
literal|true
argument_list|,
name|rec4
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that {@link DataStore#deleteAllOlderThan(long)} only deleted      * records older than argument passed.      */
specifier|protected
name|void
name|doDeleteAllOlderThan
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|randomGen
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec1
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec2
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
comment|// sleep for some time to ensure that async upload completes in backend.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|long
name|updateTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ds
operator|.
name|updateModifiedDateOnAccess
argument_list|(
name|updateTime
argument_list|)
expr_stmt|;
comment|// sleep to workaround System.currentTimeMillis granularity.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec3
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLength
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec4
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rec1
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"only rec2 should be deleted"
argument_list|,
literal|1
argument_list|,
name|ds
operator|.
name|deleteAllOlderThan
argument_list|(
name|updateTime
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"rec2 should be null"
argument_list|,
name|ds
operator|.
name|getRecordIfStored
argument_list|(
name|rec2
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|itr
init|=
name|ds
operator|.
name|getAllIdentifiers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DataIdentifier
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec3
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec4
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"record found on list"
argument_list|,
name|list
operator|.
name|remove
argument_list|(
name|itr
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"touched records found"
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec1 touched"
argument_list|,
literal|true
argument_list|,
name|rec1
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec3 touched"
argument_list|,
literal|true
argument_list|,
name|rec3
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rec4 touched"
argument_list|,
literal|true
argument_list|,
name|rec4
operator|.
name|getLastModified
argument_list|()
operator|>
name|updateTime
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test if record can be accessed via      * {@link DataStore#getRecordFromReference(String)}      */
specifier|protected
name|void
name|doReferenceTest
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|reference
decl_stmt|;
name|DataRecord
name|record
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|reference
operator|=
name|record
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|assertReference
argument_list|(
name|data
argument_list|,
name|reference
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method to validate mixed scenario use of {@link DataStore}.      */
specifier|protected
name|void
name|doTestSingleThread
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultiThreaded
argument_list|(
name|ds
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method to validate mixed scenario use of {@link DataStore} in      * multi-threaded concurrent environment.      */
specifier|protected
name|void
name|doTestMultiThreaded
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultiThreaded
argument_list|(
name|ds
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method to assert record with byte array.      */
specifier|protected
name|void
name|assertRecord
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|DataRecord
name|record
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|InputStream
name|stream
init|=
name|record
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Method to run {@link AbstractDataStoreTest#doTest(DataStore, int)} in multiple      * concurrent threads.      */
specifier|protected
name|void
name|doTestMultiThreaded
parameter_list|(
specifier|final
name|DataStore
name|ds
parameter_list|,
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Exception
index|[]
name|exception
init|=
operator|new
name|Exception
index|[
literal|1
index|]
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|x
init|=
name|i
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doTest
argument_list|(
name|ds
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
index|[
literal|0
index|]
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exception
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
index|[
literal|0
index|]
throw|;
block|}
block|}
comment|/**      * Assert randomly read stream from record.      */
name|void
name|doTest
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|DataRecord
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataRecord
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|DataRecord
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|DataRecord
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|size
init|=
literal|100000
operator|-
operator|(
name|i
operator|*
literal|100
operator|)
decl_stmt|;
name|RandomInputStream
name|in
init|=
operator|new
name|RandomInputStream
argument_list|(
name|size
operator|+
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|rec
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|DataRecord
name|rec
init|=
name|list
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|map
operator|.
name|get
argument_list|(
name|rec
argument_list|)
decl_stmt|;
name|rec
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|size
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|RandomInputStream
name|expected
init|=
operator|new
name|RandomInputStream
argument_list|(
name|size
operator|+
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|rec
operator|.
name|getStream
argument_list|()
decl_stmt|;
comment|// Workaround for race condition that can happen with low cache size relative to the test
comment|// read immediately
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|SequenceInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|in
operator|=
name|readInputStreamRandomly
argument_list|(
name|in
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
name|InputStream
name|readInputStreamRandomly
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8000
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|x
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|offset
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|buffer
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|buffer
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Assert two inputstream      */
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|InputStream
name|a
parameter_list|,
name|InputStream
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|assertTrue
argument_list|(
literal|"binary not equal"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|contentEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
try|try
block|{
name|b
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
block|}
block|}
comment|/**      * Assert inputstream read from reference.      */
specifier|protected
name|void
name|assertReference
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|String
name|reference
parameter_list|,
name|DataStore
name|store
parameter_list|)
throws|throws
name|Exception
block|{
name|DataRecord
name|record
init|=
name|store
operator|.
name|getRecordFromReference
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|record
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|record
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
literal|"binary not equal"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|contentEquals
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|expected
argument_list|)
argument_list|,
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Utility method to stop execution for duration time.      *       * @param duration      *            time in milli seconds      */
specifier|protected
name|void
name|sleep
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|long
name|expected
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|expected
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{              }
block|}
block|}
block|}
end_class

end_unit

