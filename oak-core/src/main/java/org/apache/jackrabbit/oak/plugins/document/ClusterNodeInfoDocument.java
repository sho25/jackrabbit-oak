begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|ClusterNodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|ClusterNodeInfo
operator|.
name|RecoverLockState
import|;
end_import

begin_comment
comment|/**  * A document storing cluster node info. See also {@link ClusterNodeInfo}.  */
end_comment

begin_class
specifier|public
class|class
name|ClusterNodeInfoDocument
extends|extends
name|Document
block|{
comment|/**      * All ClusterNodeInfoDocument ID value would be greater than this value      * It can be used as startKey in DocumentStore#query methods      */
specifier|private
specifier|static
specifier|final
name|String
name|MIN_ID_VALUE
init|=
literal|"0"
decl_stmt|;
comment|/**      * All ClusterNodeInfoDocument ID value would be less than this value      * It can be used as endKey in DocumentStore#query methods      */
specifier|private
specifier|static
specifier|final
name|String
name|MAX_ID_VALUE
init|=
literal|"a"
decl_stmt|;
comment|/**      * The timestamp when this document was created.      */
specifier|private
specifier|final
name|long
name|created
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
comment|/**      * @return the timestamp when this document was created.      */
specifier|public
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
specifier|public
name|long
name|getLeaseEndTime
parameter_list|()
block|{
return|return
name|checkNotNull
argument_list|(
operator|(
name|Long
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|LEASE_END_KEY
argument_list|)
argument_list|,
literal|"Lease End Time not set"
argument_list|)
return|;
block|}
comment|/**      * @return the time when this cluster node was started or {@code -1} if not      *          available.      */
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
name|Long
name|startTime
init|=
operator|(
name|Long
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|START_TIME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|==
literal|null
condition|)
block|{
name|startTime
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|startTime
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|getState
argument_list|()
operator|==
name|ClusterNodeState
operator|.
name|ACTIVE
return|;
block|}
comment|/**      * @return {@code true} if the recovery lock state is      *          {@link RecoverLockState#ACQUIRED ACQUIRED}.      */
specifier|public
name|boolean
name|isBeingRecovered
parameter_list|()
block|{
return|return
name|getRecoveryState
argument_list|()
operator|==
name|RecoverLockState
operator|.
name|ACQUIRED
return|;
block|}
comment|/**      * Returns {@code true} if the cluster node represented by this document      * is currently being recovered by the given {@code clusterId}.      *      * @param clusterId the id of a cluster node.      * @return {@code true} if being recovered by the given id; {@code false}      *          otherwise.      */
specifier|public
name|boolean
name|isBeingRecoveredBy
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|clusterId
argument_list|)
operator|.
name|equals
argument_list|(
name|getRecoveryBy
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return the id of the cluster node performing recovery or {@code null} if      *          currently not set.      */
annotation|@
name|CheckForNull
specifier|public
name|Long
name|getRecoveryBy
parameter_list|()
block|{
return|return
operator|(
name|Long
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|REV_RECOVERY_BY
argument_list|)
return|;
block|}
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|format
argument_list|()
return|;
block|}
comment|/**      * Returns all cluster node info documents currently available in the given      * document store.      *      * @param store the document store.      * @return list of cluster node info documents.      */
specifier|public
specifier|static
name|List
argument_list|<
name|ClusterNodeInfoDocument
argument_list|>
name|all
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
comment|// keys between "0" and "a" includes all possible numbers
return|return
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|CLUSTER_NODES
argument_list|,
name|MIN_ID_VALUE
argument_list|,
name|MAX_ID_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|//-----------------------< internal>---------------------------------------
specifier|private
name|ClusterNodeState
name|getState
parameter_list|()
block|{
return|return
name|ClusterNodeState
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|STATE
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RecoverLockState
name|getRecoveryState
parameter_list|()
block|{
return|return
name|RecoverLockState
operator|.
name|fromString
argument_list|(
operator|(
name|String
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|REV_RECOVERY_LOCK
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * the root-revision of the last background write (of unsaved modifications)      **/
specifier|public
name|String
name|getLastWrittenRootRev
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|get
argument_list|(
name|ClusterNodeInfo
operator|.
name|LAST_WRITTEN_ROOT_REV_KEY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

