begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Utility class containing type safe counterparts for some of the predicates of  * commons-collections.  */
end_comment

begin_class
specifier|public
class|class
name|Predicates
block|{
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|?
argument_list|>
name|NOT_NULL
init|=
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|!=
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Predicates
parameter_list|()
block|{     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Predicate
argument_list|<
name|T
argument_list|>
name|nonNull
parameter_list|()
block|{
return|return
operator|(
name|Predicate
argument_list|<
name|T
argument_list|>
operator|)
name|NOT_NULL
return|;
block|}
block|}
end_class

end_unit

