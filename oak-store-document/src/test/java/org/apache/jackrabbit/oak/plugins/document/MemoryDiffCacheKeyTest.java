begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryDiffCacheKeyTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|asString
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|RevisionVector
name|from
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r3-0-1"
argument_list|)
decl_stmt|;
name|RevisionVector
name|to
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r7-0-1"
argument_list|)
decl_stmt|;
name|MemoryDiffCache
operator|.
name|Key
name|key
init|=
operator|new
name|MemoryDiffCache
operator|.
name|Key
argument_list|(
name|p
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"r3-0-1/foo/bar@r7-0-1"
argument_list|,
name|key
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fromString
parameter_list|()
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|fromString
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|RevisionVector
name|from
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r3-0-1"
argument_list|)
decl_stmt|;
name|RevisionVector
name|to
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
literal|"r7-0-1"
argument_list|)
decl_stmt|;
name|MemoryDiffCache
operator|.
name|Key
name|expected
init|=
operator|new
name|MemoryDiffCache
operator|.
name|Key
argument_list|(
name|p
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"r3-0-1/foo/bar@r7-0-1"
decl_stmt|;
name|MemoryDiffCache
operator|.
name|Key
name|key
init|=
name|MemoryDiffCache
operator|.
name|Key
operator|.
name|fromString
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|fromStringIllegalArgumentException
parameter_list|()
block|{
name|MemoryDiffCache
operator|.
name|Key
operator|.
name|fromString
argument_list|(
literal|"foo@r7-0-1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

