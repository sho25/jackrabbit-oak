begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * An index of binary references.  */
end_comment

begin_class
specifier|public
class|class
name|BinaryReferencesIndex
block|{
comment|/**      * A consumer of entries from a binary references index.      */
specifier|public
interface|interface
name|EntryConsumer
block|{
comment|/**          * Consume an entry from a binary references index.          *          * @param generation The generation of the segment containing the binary          *                   reference.          * @param full       The full generation of the segment containing the          *                   binary reference.          * @param compacted  {@code true} if the segment was created by a          *                   compaction operation.          * @param segment    The identifier of the segment containing the binary          *                   reference.          * @param reference  The binary reference.          */
name|void
name|consume
parameter_list|(
name|int
name|generation
parameter_list|,
name|int
name|full
parameter_list|,
name|boolean
name|compacted
parameter_list|,
name|UUID
name|segment
parameter_list|,
name|String
name|reference
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|Generation
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|references
decl_stmt|;
name|BinaryReferencesIndex
parameter_list|(
name|Map
argument_list|<
name|Generation
argument_list|,
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|references
parameter_list|)
block|{
name|this
operator|.
name|references
operator|=
name|references
expr_stmt|;
block|}
comment|/**      * Iterate over every entry in this index.      *      * @param consumer An instance of {@link EntryConsumer}.      */
specifier|public
name|void
name|forEach
parameter_list|(
name|EntryConsumer
name|consumer
parameter_list|)
block|{
name|references
operator|.
name|forEach
argument_list|(
parameter_list|(
name|generation
parameter_list|,
name|entries
parameter_list|)
lambda|->
block|{
name|entries
operator|.
name|forEach
argument_list|(
parameter_list|(
name|segment
parameter_list|,
name|references
parameter_list|)
lambda|->
block|{
name|references
operator|.
name|forEach
argument_list|(
name|reference
lambda|->
block|{
name|consumer
operator|.
name|consume
argument_list|(
name|generation
operator|.
name|generation
argument_list|,
name|generation
operator|.
name|full
argument_list|,
name|generation
operator|.
name|compacted
argument_list|,
name|segment
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

