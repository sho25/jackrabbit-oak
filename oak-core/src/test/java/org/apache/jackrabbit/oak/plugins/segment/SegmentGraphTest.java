begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|parseSegmentGraph
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
operator|.
name|CleanupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
operator|.
name|ReadOnlyStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentGraphTest
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|segments
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|references
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|gcGenerations
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|gcReferences
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|File
name|storeDir
decl_stmt|;
specifier|private
name|void
name|addSegment
parameter_list|(
name|SegmentNodeState
name|node
parameter_list|)
block|{
name|segments
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addReference
parameter_list|(
name|SegmentNodeState
name|from
parameter_list|,
name|SegmentNodeState
name|to
parameter_list|)
block|{
name|addReference
argument_list|(
name|references
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addReference
parameter_list|(
name|Map
argument_list|<
name|UUID
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|map
parameter_list|,
name|SegmentNodeState
name|from
parameter_list|,
name|SegmentNodeState
name|to
parameter_list|)
block|{
name|UUID
name|fromUUID
init|=
name|from
operator|.
name|getRecordId
argument_list|()
operator|.
name|asUUID
argument_list|()
decl_stmt|;
name|UUID
name|toUUID
init|=
name|to
operator|.
name|getRecordId
argument_list|()
operator|.
name|asUUID
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|tos
init|=
name|map
operator|.
name|get
argument_list|(
name|fromUUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tos
operator|==
literal|null
condition|)
block|{
name|tos
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|fromUUID
argument_list|,
name|tos
argument_list|)
expr_stmt|;
block|}
name|tos
operator|.
name|add
argument_list|(
name|toUUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|storeDir
operator|=
name|createTempFile
argument_list|(
name|SegmentGraph
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storeDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|storeDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|FileStore
name|store
init|=
name|FileStore
operator|.
name|newFileStore
argument_list|(
name|storeDir
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|CompactionStrategy
name|strategy
init|=
operator|new
name|CompactionStrategy
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|CleanupType
operator|.
name|CLEAN_NONE
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|compacted
parameter_list|(
annotation|@
name|Nonnull
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|setHead
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setHead
operator|.
name|call
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|strategy
operator|.
name|setPersistCompactionMap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCompactionStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|addSegment
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentWriter
name|writer
init|=
name|store
operator|.
name|createSegmentWriter
argument_list|(
literal|"testWriter"
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|node1
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
decl_stmt|;
name|addSegment
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|SegmentNodeState
name|node2
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
decl_stmt|;
name|addSegment
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|addReference
argument_list|(
name|node2
argument_list|,
name|node1
argument_list|)
expr_stmt|;
comment|// Through the respective templates, which are de-duplicated
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"foo"
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"bar"
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node3
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|addSegment
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|addReference
argument_list|(
name|node3
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|addReference
argument_list|(
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|store
operator|.
name|setHead
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|node3
argument_list|)
expr_stmt|;
name|store
operator|.
name|compact
argument_list|()
expr_stmt|;
name|addSegment
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|node3
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node4
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|addReference
argument_list|(
name|node4
argument_list|,
name|node3
argument_list|)
expr_stmt|;
name|addSegment
argument_list|(
name|node4
argument_list|)
expr_stmt|;
name|store
operator|.
name|setHead
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|node4
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|gcGenerations
operator|.
name|add
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|gcGenerations
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|gcReferences
operator|.
name|put
argument_list|(
literal|"0"
argument_list|,
name|singleton
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|gcReferences
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|singleton
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|storeDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSegmentGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|ReadOnlyStore
name|store
init|=
operator|new
name|ReadOnlyStore
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
try|try
block|{
name|Graph
argument_list|<
name|UUID
argument_list|>
name|segmentGraph
init|=
name|parseSegmentGraph
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segments
argument_list|,
name|segmentGraph
operator|.
name|vertices
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|references
argument_list|,
name|segmentGraph
operator|.
name|edges
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGCGraph
parameter_list|()
throws|throws
name|IOException
block|{
name|ReadOnlyStore
name|store
init|=
operator|new
name|ReadOnlyStore
argument_list|(
name|storeDir
argument_list|)
decl_stmt|;
try|try
block|{
name|Graph
argument_list|<
name|String
argument_list|>
name|gcGraph
init|=
name|SegmentGraph
operator|.
name|parseGCGraph
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gcGenerations
argument_list|,
name|gcGraph
operator|.
name|vertices
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gcReferences
argument_list|,
name|gcGraph
operator|.
name|edges
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

