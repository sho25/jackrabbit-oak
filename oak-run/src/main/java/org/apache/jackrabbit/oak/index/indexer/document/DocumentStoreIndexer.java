begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|IndexHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|IndexerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentTraverser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CloseableIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|NodeTraversalCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|progress
operator|.
name|IndexingProgressReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|progress
operator|.
name|MetricRateEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|metric
operator|.
name|MetricStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentStoreIndexer
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|traversalLog
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentStoreIndexer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".traversal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IndexHelper
name|indexHelper
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeStateIndexerProvider
argument_list|>
name|indexerProviders
decl_stmt|;
specifier|private
specifier|final
name|IndexerSupport
name|indexerSupport
decl_stmt|;
specifier|private
specifier|final
name|IndexingProgressReporter
name|progressReporter
init|=
operator|new
name|IndexingProgressReporter
argument_list|(
name|IndexUpdateCallback
operator|.
name|NOOP
argument_list|,
name|NodeTraversalCallback
operator|.
name|NOOP
argument_list|)
decl_stmt|;
specifier|public
name|DocumentStoreIndexer
parameter_list|(
name|IndexHelper
name|indexHelper
parameter_list|,
name|IndexerSupport
name|indexerSupport
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexHelper
operator|=
name|indexHelper
expr_stmt|;
name|this
operator|.
name|indexerSupport
operator|=
name|indexerSupport
expr_stmt|;
name|this
operator|.
name|indexerProviders
operator|=
name|createProviders
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reindex
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
name|configureEstimators
argument_list|()
expr_stmt|;
comment|//TODO Support for adding new index definition
name|CompositeIndexer
name|indexer
init|=
name|prepareIndexers
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|closer
operator|.
name|register
argument_list|(
name|indexer
argument_list|)
expr_stmt|;
comment|//TODO How to ensure we can safely read from secondary
name|NodeState
name|checkpointedState
init|=
name|indexerSupport
operator|.
name|retrieveNodeStateForCheckpoint
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|rootDocumentState
init|=
operator|(
name|DocumentNodeState
operator|)
name|checkpointedState
decl_stmt|;
name|DocumentNodeStore
name|nodeStore
init|=
operator|(
name|DocumentNodeStore
operator|)
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|progressReporter
operator|.
name|reindexingTraversalStart
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|getIncludedDocs
argument_list|(
name|indexer
argument_list|)
control|)
block|{
name|String
name|path
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|nodeState
init|=
name|nodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rootDocumentState
operator|.
name|getRootRevision
argument_list|()
argument_list|)
decl_stmt|;
comment|//At DocumentNodeState api level the nodeState can be null
if|if
condition|(
name|nodeState
operator|==
literal|null
operator|||
operator|!
name|nodeState
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|NodeStateEntry
name|entry
init|=
operator|new
name|NodeStateEntry
argument_list|(
name|nodeState
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|entry
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentNodeState
name|bundledState
range|:
name|nodeState
operator|.
name|getAllBundledNodesStates
argument_list|()
control|)
block|{
name|indexer
operator|.
name|index
argument_list|(
operator|new
name|NodeStateEntry
argument_list|(
name|bundledState
argument_list|,
name|bundledState
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|progressReporter
operator|.
name|reindexingTraversalEnd
argument_list|()
expr_stmt|;
name|progressReporter
operator|.
name|logReport
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|configureEstimators
parameter_list|()
block|{
name|StatisticsProvider
name|statsProvider
init|=
name|indexHelper
operator|.
name|getStatisticsProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|statsProvider
operator|instanceof
name|MetricStatisticsProvider
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|MetricStatisticsProvider
operator|)
name|statsProvider
operator|)
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|progressReporter
operator|.
name|setTraversalRateEstimator
argument_list|(
operator|new
name|MetricRateEstimator
argument_list|(
literal|"async"
argument_list|,
name|registry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MongoConnection
name|mongoConnection
init|=
name|indexHelper
operator|.
name|getService
argument_list|(
name|MongoConnection
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mongoConnection
operator|!=
literal|null
condition|)
block|{
name|long
name|nodesCount
init|=
name|mongoConnection
operator|.
name|getDB
argument_list|()
operator|.
name|getCollection
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|progressReporter
operator|.
name|setNodeCountEstimator
argument_list|(
parameter_list|(
name|String
name|basePath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|)
lambda|->
name|nodesCount
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Estimated number of documents in Mongo are {}"
argument_list|,
name|nodesCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getIncludedDocs
parameter_list|(
name|CompositeIndexer
name|indexer
parameter_list|)
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|getDocsFilteredByPath
argument_list|(
name|indexer
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|doc
lambda|->
operator|!
name|doc
operator|.
name|isSplitDocument
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|indexer
operator|::
name|shouldInclude
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getDocsFilteredByPath
parameter_list|(
name|CompositeIndexer
name|indexer
parameter_list|)
block|{
name|CloseableIterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|findAllDocuments
argument_list|(
name|indexer
argument_list|)
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|docs
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
specifier|private
name|CloseableIterable
argument_list|<
name|NodeDocument
argument_list|>
name|findAllDocuments
parameter_list|(
name|CompositeIndexer
name|indexer
parameter_list|)
block|{
name|MongoDocumentStore
name|mds
init|=
name|indexHelper
operator|.
name|getService
argument_list|(
name|MongoDocumentStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|mds
argument_list|)
expr_stmt|;
return|return
operator|new
name|MongoDocumentTraverser
argument_list|(
name|mds
argument_list|)
operator|.
name|getAllDocuments
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
lambda|->
name|includeId
argument_list|(
name|id
argument_list|,
name|indexer
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|includeId
parameter_list|(
name|String
name|id
parameter_list|,
name|NodeStateIndexer
name|indexer
parameter_list|)
block|{
name|reportDocumentRead
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//Cannot interpret long paths as they are hashed. So let them
comment|//be included
if|if
condition|(
name|Utils
operator|.
name|isIdFromLongPath
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//Not easy to determine path for previous docs
comment|//Given there count is pretty low compared to others
comment|//include them all
if|if
condition|(
name|Utils
operator|.
name|isPreviousDocId
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//Exclude hidden nodes from index data
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHiddenPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|indexer
operator|.
name|shouldInclude
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|void
name|reportDocumentRead
parameter_list|(
name|String
name|id
parameter_list|)
block|{
try|try
block|{
name|progressReporter
operator|.
name|traversedNode
argument_list|(
parameter_list|()
lambda|->
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|traversalLog
operator|.
name|trace
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CompositeIndexer
name|prepareIndexers
parameter_list|()
block|{
name|NodeState
name|root
init|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeStateIndexer
argument_list|>
name|indexers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexHelper
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
name|NodeState
name|indexState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|indexState
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No 'type' property found on indexPath [{}]. Skipping it"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|NodeStateIndexerProvider
name|indexerProvider
range|:
name|indexerProviders
control|)
block|{
name|NodeStateIndexer
name|indexer
init|=
name|indexerProvider
operator|.
name|getIndexer
argument_list|(
name|type
argument_list|,
name|indexPath
argument_list|,
name|indexState
argument_list|,
name|root
argument_list|,
name|progressReporter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexer
operator|!=
literal|null
condition|)
block|{
name|indexers
operator|.
name|add
argument_list|(
name|indexer
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|indexer
argument_list|)
expr_stmt|;
name|progressReporter
operator|.
name|registerIndex
argument_list|(
name|indexPath
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|CompositeIndexer
argument_list|(
name|indexers
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|NodeStateIndexerProvider
argument_list|>
name|createProviders
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|NodeStateIndexerProvider
argument_list|>
name|providers
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|createLuceneIndexProvider
argument_list|()
argument_list|)
decl_stmt|;
name|providers
operator|.
name|forEach
argument_list|(
name|closer
operator|::
name|register
argument_list|)
expr_stmt|;
return|return
name|providers
return|;
block|}
specifier|private
name|NodeStateIndexerProvider
name|createLuceneIndexProvider
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|LuceneIndexerProvider
argument_list|(
name|indexHelper
argument_list|,
name|indexerSupport
argument_list|)
return|;
block|}
block|}
end_class

end_unit

