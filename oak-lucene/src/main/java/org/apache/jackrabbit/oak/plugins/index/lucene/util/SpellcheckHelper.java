begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|DirectSpellChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import

begin_comment
comment|/**  * Helper class for getting spellcheck results for a given term, calling a {@link DirectSpellChecker}  * under the hood.  */
end_comment

begin_class
specifier|public
class|class
name|SpellcheckHelper
block|{
specifier|private
specifier|static
specifier|final
name|DirectSpellChecker
name|spellChecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|SuggestWord
index|[]
name|getSpellcheck
parameter_list|(
name|SpellcheckQuery
name|spellcheckQuery
parameter_list|)
block|{
try|try
block|{
return|return
name|spellChecker
operator|.
name|suggestSimilar
argument_list|(
name|spellcheckQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|spellcheckQuery
operator|.
name|getCount
argument_list|()
argument_list|,
name|spellcheckQuery
operator|.
name|getReader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"could not handle Spellcheck query "
operator|+
name|spellcheckQuery
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SpellcheckQuery
name|getSpellcheckQuery
parameter_list|(
name|String
name|spellcheckQueryString
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|String
name|text
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|spellcheckQueryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|keyValuePair
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValuePair
operator|.
name|length
operator|!=
literal|2
operator|||
name|keyValuePair
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|keyValuePair
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unparsable native Lucene Spellcheck query: "
operator|+
name|spellcheckQueryString
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
literal|"term"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|text
operator|=
name|keyValuePair
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SpellcheckHelper
operator|.
name|SpellcheckQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|SPELLCHECK
argument_list|,
name|text
argument_list|)
argument_list|,
literal|10
argument_list|,
name|reader
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|SpellcheckQuery
block|{
specifier|private
specifier|final
name|Term
name|term
decl_stmt|;
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
specifier|public
name|SpellcheckQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|count
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
specifier|public
name|Term
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|IndexReader
name|getReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SpellcheckQuery{"
operator|+
literal|"term="
operator|+
name|term
operator|+
literal|", count="
operator|+
name|count
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

