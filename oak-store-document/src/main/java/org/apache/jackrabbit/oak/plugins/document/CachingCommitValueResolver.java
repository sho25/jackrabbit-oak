begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
operator|.
name|newBuilder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_comment
comment|/**  * Resolves the commit value for a given change revision on a document.  */
end_comment

begin_class
specifier|final
class|class
name|CachingCommitValueResolver
implements|implements
name|CommitValueResolver
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|COMMIT_ROOT_OR_REVISIONS
init|=
name|of
argument_list|(
name|NodeDocument
operator|.
name|COMMIT_ROOT
argument_list|,
name|NodeDocument
operator|.
name|REVISIONS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|commitValueCache
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|RevisionVector
argument_list|>
name|sweepRevisions
decl_stmt|;
name|CachingCommitValueResolver
parameter_list|(
name|int
name|cacheSize
parameter_list|,
name|Supplier
argument_list|<
name|RevisionVector
argument_list|>
name|sweepRevisions
parameter_list|)
block|{
name|this
operator|.
name|commitValueCache
operator|=
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|sweepRevisions
operator|=
name|sweepRevisions
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|resolve
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|changeRevision
parameter_list|,
annotation|@
name|Nonnull
name|NodeDocument
name|doc
parameter_list|)
block|{
comment|// check cache first
name|String
name|value
init|=
name|commitValueCache
operator|.
name|getIfPresent
argument_list|(
name|changeRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
comment|// need to determine the commit value
name|doc
operator|=
name|resolveDocument
argument_list|(
name|doc
argument_list|,
name|changeRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|// the document including its history does not contain a change
comment|// for the given revision
return|return
literal|null
return|;
block|}
comment|// at this point 'doc' is guaranteed to have a local entry
comment|// for the given change revision
if|if
condition|(
name|sweepRevisions
operator|.
name|get
argument_list|()
operator|.
name|isRevisionNewer
argument_list|(
name|changeRevision
argument_list|)
condition|)
block|{
comment|// change revision is newer than sweep revision
comment|// resolve the commit value without any short cuts
name|value
operator|=
name|doc
operator|.
name|resolveCommitValue
argument_list|(
name|changeRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// change revision is equal or older than sweep revision
comment|// there are different cases:
comment|// - doc is a main document and we have a guarantee that a
comment|//   potential branch commit is marked accordingly
comment|// - doc is a split document and the revision is guaranteed
comment|//   to be committed. the remaining question is whether the
comment|//   revision is from a branch commit
name|NodeDocument
operator|.
name|SplitDocType
name|sdt
init|=
name|doc
operator|.
name|getSplitDocType
argument_list|()
decl_stmt|;
if|if
condition|(
name|sdt
operator|==
name|NodeDocument
operator|.
name|SplitDocType
operator|.
name|NONE
condition|)
block|{
comment|// sweeper ensures that all changes on main document
comment|// before the sweep revision are properly marked with
comment|// branch commit entry if applicable
if|if
condition|(
name|doc
operator|.
name|getLocalBranchCommits
argument_list|()
operator|.
name|contains
argument_list|(
name|changeRevision
argument_list|)
condition|)
block|{
comment|// resolve the commit value the classic way
name|value
operator|=
name|doc
operator|.
name|resolveCommitValue
argument_list|(
name|changeRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
literal|"c"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sdt
operator|==
name|NodeDocument
operator|.
name|SplitDocType
operator|.
name|DEFAULT_NO_BRANCH
condition|)
block|{
comment|// split document without branch commits, we don't have
comment|// to check the commit root, the commit value is always 'c'
name|value
operator|=
literal|"c"
expr_stmt|;
block|}
else|else
block|{
comment|// some other split document type introduced
comment|// before Oak 1.8 and we don't know if this is a branch
comment|// commit. first try to resolve
name|value
operator|=
name|doc
operator|.
name|resolveCommitValue
argument_list|(
name|changeRevision
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// then it must be a non-branch commit and the
comment|// split document with the commit value was
comment|// already garbage collected
name|value
operator|=
literal|"c"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Utils
operator|.
name|isCommitted
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// only cache committed states
comment|// e.g. branch commits may be merged later and
comment|// the commit value will change
name|commitValueCache
operator|.
name|put
argument_list|(
name|changeRevision
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Resolves to the document that contains the change with the given      * revision. If the given document contains a local change for the given      * revision, then the passed document is returned. Otherwise this method      * looks up previous documents and returns one with a change for the given      * revision. This method returns {@code null} if neither the passed document      * nor any of its previous documents contains a change for the given      * revision.      *      * @param doc the document to resolve for the given change revision.      * @param changeRevision the revision of a change.      * @return the document with the change or {@code null} if there is no      *      document with such a change.      */
annotation|@
name|CheckForNull
specifier|private
name|NodeDocument
name|resolveDocument
parameter_list|(
annotation|@
name|Nonnull
name|NodeDocument
name|doc
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|changeRevision
parameter_list|)
block|{
comment|// check if the document contains the change or we need to
comment|// look up previous documents for the actual change
if|if
condition|(
name|doc
operator|.
name|getLocalCommitRoot
argument_list|()
operator|.
name|containsKey
argument_list|(
name|changeRevision
argument_list|)
operator|||
name|doc
operator|.
name|getLocalRevisions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|changeRevision
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
comment|// find the previous document with this change
comment|// first check if there is a commit root entry for this revision
name|NodeDocument
name|d
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|COMMIT_ROOT_OR_REVISIONS
control|)
block|{
for|for
control|(
name|NodeDocument
name|prev
range|:
name|doc
operator|.
name|getPreviousDocs
argument_list|(
name|p
argument_list|,
name|changeRevision
argument_list|)
control|)
block|{
name|d
operator|=
name|prev
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|d
return|;
block|}
block|}
end_class

end_unit

