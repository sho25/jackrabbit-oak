begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableNodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|WhiteboardAuthorizableNodeNameTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ID
init|=
literal|"testID"
decl_stmt|;
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WhiteboardAuthorizableNodeName
name|authorizableNodeName
init|=
operator|new
name|WhiteboardAuthorizableNodeName
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|authorizableNodeName
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthorizableNodeName
operator|.
name|DEFAULT
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|,
name|authorizableNodeName
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStarted
parameter_list|()
block|{
name|authorizableNodeName
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthorizableNodeName
operator|.
name|DEFAULT
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|,
name|authorizableNodeName
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisteredImplementation
parameter_list|()
block|{
name|authorizableNodeName
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|AuthorizableNodeName
name|registered
init|=
operator|new
name|AuthorizableNodeName
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|generateNodeName
parameter_list|(
annotation|@
name|Nonnull
name|String
name|authorizableId
parameter_list|)
block|{
return|return
literal|"generated"
return|;
block|}
block|}
decl_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|,
name|registered
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registered
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|,
name|authorizableNodeName
operator|.
name|generateNodeName
argument_list|(
name|TEST_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

