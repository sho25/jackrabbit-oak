begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PREFIX_PROP_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|atomic
operator|.
name|AtomicCounterEditor
operator|.
name|PROP_INCREMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|MIX_ATOMIC_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AtomicCounterEditorTest
block|{
annotation|@
name|Test
annotation|@
name|Ignore
comment|// FIXME fix test expectations
specifier|public
name|void
name|childNodeAdded
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Editor
name|editor
init|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"without the mixin we should not process"
argument_list|,
name|editor
operator|.
name|childNodeAdded
argument_list|(
literal|"foo"
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"with the mixin set we should get a proper Editor"
argument_list|,
name|editor
operator|.
name|childNodeAdded
argument_list|(
literal|"foo"
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
operator|instanceof
name|AtomicCounterEditor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|increment
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|Editor
name|editor
decl_stmt|;
name|PropertyState
name|property
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|property
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertNoCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|property
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"the oak:increment should never be set"
argument_list|,
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_INCREMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTotalCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consolidate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
decl_stmt|;
name|Editor
name|editor
decl_stmt|;
name|PropertyState
name|property
decl_stmt|;
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|=
name|setMixin
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|AtomicCounterEditor
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|property
operator|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|PROP_INCREMENT
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertTotalCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|editor
operator|.
name|propertyAdded
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|assertTotalCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|AtomicCounterEditor
operator|.
name|consolidateCount
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|builder
operator|.
name|getProperty
argument_list|(
name|PROP_COUNTER
argument_list|)
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoCounters
argument_list|(
name|builder
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * that a list of properties does not contains any property with name starting with      * {@link AtomicCounterEditor#PREFIX_PROP_COUNTER}      *       * @param properties      */
specifier|private
specifier|static
name|void
name|assertNoCounters
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|properties
control|)
block|{
name|assertFalse
argument_list|(
literal|"there should be no counter property"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * assert the total amount of {@link AtomicCounterEditor#PREFIX_PROP_COUNTER}      *       * @param properties      */
specifier|private
specifier|static
name|void
name|assertTotalCounters
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|checkNotNull
argument_list|(
name|properties
argument_list|)
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX_PROP_COUNTER
argument_list|)
condition|)
block|{
name|total
operator|+=
name|p
operator|.
name|getValue
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"the total amount of :oak-counter properties does not match"
argument_list|,
name|expected
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|setMixin
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|builder
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|of
argument_list|(
name|MIX_ATOMIC_COUNTER
argument_list|)
argument_list|,
name|NAMES
argument_list|)
return|;
block|}
block|}
end_class

end_unit

