begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  *<code>DocumentStoreException</code> is a runtime exception for  * {@code DocumentStore} implementations to signal unexpected problems like  * a communication exception.  */
end_comment

begin_class
specifier|public
class|class
name|DocumentStoreException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4135594565927443068L
decl_stmt|;
specifier|public
enum|enum
name|Type
block|{
comment|/**          * A generic type of {@code DocumentStoreException}. This type is used          * when no explicit type is given when a {@code DocumentStoreException}          * is constructed.          */
name|GENERIC
block|,
comment|/**          * A {@code DocumentStoreException} caused by a transient problem. E.g.          * a network issue. This type of exception indicates a future invocation          * of the same operation may succeed if the underlying problem gets          * resolved.          */
name|TRANSIENT
block|}
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
comment|/**      * Creates a {@link Type#GENERIC} {@code DocumentStoreException} with the      * given message.      *      * @param message the exception message.      */
specifier|public
name|DocumentStoreException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@link Type#GENERIC} {@code DocumentStoreException} with the      * given cause. The message of the exception is the value returned by      * {@code cause.toString()} if available, otherwise {@code null}.      *      * @param cause the cause or {@code null} if nonexistent or unknown.      */
specifier|public
name|DocumentStoreException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|this
argument_list|(
name|getMessage
argument_list|(
name|cause
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@link Type#GENERIC} {@code DocumentStoreException} with the      * given message and cause.      *      * @param message the exception message.      * @param cause the cause or {@code null} if nonexistent or unknown.      */
specifier|public
name|DocumentStoreException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
name|cause
argument_list|,
name|Type
operator|.
name|GENERIC
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@code DocumentStoreException} with the given message, cause      * and type.      *      * @param message the exception message.      * @param cause the cause or {@code null} if nonexistent or unknown.      * @param type the type of this exception.      */
specifier|public
name|DocumentStoreException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the given {@code Throwable} into a {@link Type#GENERIC}      * {@code DocumentStoreException}. If the {@code Throwable} is an instance      * of {@code DocumentStoreException} this method returns the given      * {@code Throwable} as is, otherwise it will be used as the cause of the      * returned {@code DocumentStoreException}. The returned      * {@code DocumentStoreException} will have the same message as the given      * {@code Throwable}.      *      * @param t a {@code Throwable}.      * @return a {@link Type#GENERIC} DocumentStoreException.      */
specifier|public
specifier|static
name|DocumentStoreException
name|convert
parameter_list|(
annotation|@
name|NotNull
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@code Throwable} into a {@link Type#GENERIC}      * {@code DocumentStoreException}. If the {@code Throwable} is an instance      * of {@code DocumentStoreException} this method returns the given      * {@code Throwable} as is, otherwise it will be used as the cause of the      * returned {@code DocumentStoreException}. The returned      * {@code DocumentStoreException} will have the given message, unless the      * {@code Throwable} already is a {@code DocumentStoreException}.      *      * @param t a {@code Throwable}.      * @param msg a message for the {@code DocumentStoreException}.      * @return a {@link Type#GENERIC} DocumentStoreException.      */
specifier|public
specifier|static
name|DocumentStoreException
name|convert
parameter_list|(
annotation|@
name|NotNull
name|Throwable
name|t
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
return|return
name|asDocumentStoreException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|,
name|Type
operator|.
name|GENERIC
argument_list|,
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@code Throwable} into a {@link Type#GENERIC}      * {@code DocumentStoreException}. If the {@code Throwable} is an instance      * of {@code DocumentStoreException} this method returns the given      * {@code Throwable} as is, otherwise it will be used as the cause of the      * returned {@code DocumentStoreException}. The returned      * {@code DocumentStoreException} will have the same message as the given      * {@code Throwable} appended with the list of {@code ids}.      *      * @param t a {@code Throwable}.      * @param ids a list of {@code DocumentStore} IDs associated with the      *            operation that triggered this exception.      * @return a {@link Type#GENERIC} DocumentStoreException.      */
specifier|public
specifier|static
name|DocumentStoreException
name|convert
parameter_list|(
annotation|@
name|NotNull
name|Throwable
name|t
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
return|return
name|asDocumentStoreException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|,
name|Type
operator|.
name|GENERIC
argument_list|,
name|ids
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@code Throwable} into a {@code DocumentStoreException}.      * If the {@code Throwable} is an instance of {@code DocumentStoreException}      * this method returns the given {@code Throwable} as is, otherwise it will      * be used as the cause of the returned {@code DocumentStoreException}.      * The {@code ids} will be appended to the given {@code message} and used      * for the returned {@code DocumentStoreException}.      *      * @param message a message for the {@code DocumentStoreException}.      * @param t a {@code Throwable}.      * @param type the type of this exception.      * @param ids a list of {@code DocumentStore} IDs associated with the      *            operation that triggered this exception.      * @return a {@link Type#GENERIC} DocumentStoreException.      */
specifier|public
specifier|static
name|DocumentStoreException
name|asDocumentStoreException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|Type
name|type
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|String
name|msg
init|=
name|message
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|msg
operator|+=
literal|" "
operator|+
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|DocumentStoreException
condition|)
block|{
return|return
operator|(
name|DocumentStoreException
operator|)
name|t
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
comment|/**      * @return the type of this exception.      */
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Nullable
specifier|private
specifier|static
name|String
name|getMessage
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

