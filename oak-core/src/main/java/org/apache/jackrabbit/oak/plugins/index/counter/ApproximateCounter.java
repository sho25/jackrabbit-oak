begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * An approximate counter algorithm.  */
end_comment

begin_class
specifier|public
class|class
name|ApproximateCounter
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COUNT_PROPERTY_PREFIX
init|=
literal|":count_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COUNT_RESOLUTION
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COUNT_MAX
init|=
literal|10000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|ApproximateCounter
parameter_list|()
block|{     }
comment|/**      * Calculate the approximate offset from a given offset. The offset is the      * number of added or removed entries. The result is 0 in most of the cases,      * but sometimes it is a (positive or negative) multiple of the resolution,      * such that on average, the sum of the returned value matches the sum of      * the passed offsets.      *       * @param offset the high-resolution input offset      * @param resolution the resolution      * @return the low-resolution offset (most of the time 0)      */
specifier|public
specifier|static
name|long
name|calculateOffset
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
operator|||
name|resolution
operator|<=
literal|1
condition|)
block|{
return|return
name|offset
return|;
block|}
name|int
name|add
init|=
name|resolution
decl_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
name|offset
operator|=
operator|-
name|offset
expr_stmt|;
name|add
operator|=
operator|-
name|add
expr_stmt|;
block|}
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|resolution
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|+=
name|add
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * This method ensures that the new approximate count (the old count plus      * the calculated offset) does not go below 0.      *       * Also, for large counts and resolutions larger than 10, it reduces the      * resolution by a factor of 10 (further reducing the number of updates      * needed by a factor of 10).      *       * @param oldCount the old count      * @param calculatedOffset the calculated offset (may not be 0)      * @param resolution the new (lower) resolution      * @return the new offset      */
specifier|public
specifier|static
name|long
name|adjustOffset
parameter_list|(
name|long
name|oldCount
parameter_list|,
name|long
name|calculatedOffset
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
name|oldCount
operator|+
name|calculatedOffset
operator|<
literal|0
condition|)
block|{
return|return
operator|-
name|oldCount
return|;
block|}
if|if
condition|(
name|resolution
operator|<=
literal|10
operator|||
name|oldCount
operator|<
name|resolution
operator|*
literal|10
condition|)
block|{
return|return
name|calculatedOffset
return|;
block|}
return|return
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|?
name|calculatedOffset
operator|*
literal|10
else|:
literal|0
return|;
block|}
comment|/**      * Set the seed of the random number generator (used for testing).      *       * @param seed the new seed      */
specifier|static
name|void
name|setSeed
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|RANDOM
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adjust a counter in the given node. This method supports concurrent      * changes. It uses multiple properties, and is less accurate, but can be      * used in a multi-threaded environment, as it uses unique property names.      *       * @param builder the node builder      * @param offset the offset      */
specifier|public
specifier|static
name|void
name|adjustCountSync
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|added
init|=
name|offset
operator|>
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|offset
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|adjustCountSync
argument_list|(
name|builder
argument_list|,
name|added
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|adjustCountSync
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
if|if
condition|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|COUNT_RESOLUTION
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|max
init|=
name|getMaxCount
argument_list|(
name|builder
argument_list|,
name|added
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|>=
name|COUNT_MAX
condition|)
block|{
return|return;
block|}
comment|// TODO is this the right approach? divide by count_resolution
name|int
name|x
init|=
name|Math
operator|.
name|max
argument_list|(
name|COUNT_RESOLUTION
argument_list|,
name|max
operator|*
literal|2
argument_list|)
operator|/
name|COUNT_RESOLUTION
decl_stmt|;
if|if
condition|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|x
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|long
name|value
init|=
name|x
operator|*
name|COUNT_RESOLUTION
decl_stmt|;
name|String
name|propertyName
init|=
name|COUNT_PROPERTY_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|added
condition|?
name|value
else|:
operator|-
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getMaxCount
parameter_list|(
name|NodeBuilder
name|node
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|long
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|COUNT_PROPERTY_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|x
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
operator|==
name|x
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|max
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|max
return|;
block|}
comment|/**      * Get the count estimation.      *      * @param node the node      * @return the estimation (-1 if no estimation is available)      */
specifier|public
specifier|static
name|long
name|getCountSync
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
name|boolean
name|hasCountProperty
init|=
literal|false
decl_stmt|;
name|long
name|added
init|=
literal|0
decl_stmt|;
name|long
name|removed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|COUNT_PROPERTY_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|hasCountProperty
operator|=
literal|true
expr_stmt|;
name|long
name|x
init|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
name|added
operator|+=
name|x
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|-=
name|x
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasCountProperty
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|added
operator|/
literal|2
argument_list|,
name|added
operator|-
name|removed
argument_list|)
return|;
block|}
block|}
end_class

end_unit

