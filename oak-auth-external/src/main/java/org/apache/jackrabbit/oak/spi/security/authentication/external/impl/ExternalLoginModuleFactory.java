begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|jaas
operator|.
name|LoginModuleFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
operator|.
name|SyncMBeanImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
operator|.
name|SynchronizationMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Implements a LoginModuleFactory that creates {@link ExternalLoginModule}s and allows to configure login modules  * via OSGi config.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|label
operator|=
literal|"Apache Jackrabbit Oak External Login Module"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ExternalLoginModuleFactory
implements|implements
name|LoginModuleFactory
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalLoginModuleFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|50
argument_list|,
name|label
operator|=
literal|"JAAS Ranking"
argument_list|,
name|description
operator|=
literal|"Specifying the ranking (i.e. sort order) of this login module entry. The entries are sorted "
operator|+
literal|"in a descending order (i.e. higher value ranked configurations come first)."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|JAAS_RANKING
init|=
name|LoginModuleFactory
operator|.
name|JAAS_RANKING
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"SUFFICIENT"
argument_list|,
name|label
operator|=
literal|"JAAS Control Flag"
argument_list|,
name|description
operator|=
literal|"Property specifying whether or not a LoginModule is REQUIRED, REQUISITE, SUFFICIENT or "
operator|+
literal|"OPTIONAL.Refer to the JAAS configuration documentation for more details around the meaning of "
operator|+
literal|"these flags."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|JAAS_CONTROL_FLAG
init|=
name|LoginModuleFactory
operator|.
name|JAAS_CONTROL_FLAG
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"JAAS Realm"
argument_list|,
name|description
operator|=
literal|"The realm name (or application name) against which the LoginModule  is be registered. If no "
operator|+
literal|"realm name is provided then LoginModule is registered with a default realm as configured in "
operator|+
literal|"the Felix JAAS configuration."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|JAAS_REALM_NAME
init|=
name|LoginModuleFactory
operator|.
name|JAAS_REALM_NAME
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Identity Provider Name"
argument_list|,
name|description
operator|=
literal|"Name of the identity provider (for example: 'ldap')."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_IDP_NAME
init|=
name|ExternalLoginModule
operator|.
name|PARAM_IDP_NAME
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
literal|"default"
argument_list|,
name|label
operator|=
literal|"Sync Handler Name"
argument_list|,
name|description
operator|=
literal|"Name of the sync handler."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_SYNC_HANDLER_NAME
init|=
name|ExternalLoginModule
operator|.
name|PARAM_SYNC_HANDLER_NAME
decl_stmt|;
annotation|@
name|Reference
name|SyncManager
name|syncManager
decl_stmt|;
annotation|@
name|Reference
name|ExternalIdentityProviderManager
name|idpManager
decl_stmt|;
annotation|@
name|Reference
name|SecurityProvider
name|securityProvider
decl_stmt|;
annotation|@
name|Reference
name|Repository
name|repository
decl_stmt|;
comment|/**      * default configuration for the login modules      */
specifier|private
name|ConfigurationParameters
name|osgiConfig
decl_stmt|;
comment|/**      * whiteboard registration handle of the manager mbean      */
specifier|private
name|Registration
name|mbeanRegistration
decl_stmt|;
comment|/**      * Activates the LoginModuleFactory service      * @param context the component context      */
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
comment|//noinspection unchecked
name|osgiConfig
operator|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|idpName
init|=
name|osgiConfig
operator|.
name|getConfigValue
argument_list|(
name|PARAM_IDP_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|sncName
init|=
name|osgiConfig
operator|.
name|getConfigValue
argument_list|(
name|PARAM_SYNC_HANDLER_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Whiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|SyncMBeanImpl
name|bean
init|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|repository
argument_list|,
name|syncManager
argument_list|,
name|sncName
argument_list|,
name|idpManager
argument_list|,
name|idpName
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"UserManagement"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"External Identity Synchronization Management"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"handler"
argument_list|,
name|ObjectName
operator|.
name|quote
argument_list|(
name|sncName
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"idp"
argument_list|,
name|ObjectName
operator|.
name|quote
argument_list|(
name|idpName
argument_list|)
argument_list|)
expr_stmt|;
name|mbeanRegistration
operator|=
name|whiteboard
operator|.
name|register
argument_list|(
name|SynchronizationMBean
operator|.
name|class
argument_list|,
name|bean
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"jmx.objectname"
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.jackrabbit.oak"
argument_list|,
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to register SynchronizationMBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|mbeanRegistration
operator|!=
literal|null
condition|)
block|{
name|mbeanRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|mbeanRegistration
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      *      * @return a new {@link ExternalLoginModule} instance.      */
annotation|@
name|Override
specifier|public
name|LoginModule
name|createLoginModule
parameter_list|()
block|{
return|return
operator|new
name|ExternalLoginModule
argument_list|(
name|osgiConfig
argument_list|)
return|;
block|}
block|}
end_class

end_unit

