begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
operator|.
name|ChangeTree
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|state
operator|.
name|ChangeTree
operator|.
name|NodeDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_comment
comment|/**  * {@code TransientSpace} instances use a {@link org.apache.jackrabbit.oak.jcr.state.ChangeTree} to  * record transient changes in a JCR hierarchy. Changes can be persisted by calling  * {@link #save()}. A transient space is bound to a specific revision. Calling  * {@link #refresh(boolean)} updates the revision to the latest.  */
end_comment

begin_class
specifier|public
class|class
name|TransientSpace
block|{
specifier|private
specifier|final
name|MicroKernel
name|microkernel
decl_stmt|;
specifier|private
specifier|final
name|String
name|workspace
decl_stmt|;
specifier|private
specifier|final
name|ChangeLog
name|changeLog
init|=
operator|new
name|ChangeLog
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Listener
name|changeTreeListener
init|=
operator|new
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|added
parameter_list|(
name|NodeDelta
name|nodeDelta
parameter_list|)
block|{
name|changeLog
operator|.
name|addNode
argument_list|(
name|nodeDelta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removed
parameter_list|(
name|NodeDelta
name|nodeDelta
parameter_list|)
block|{
name|changeLog
operator|.
name|removeNode
argument_list|(
name|nodeDelta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moved
parameter_list|(
name|Path
name|source
parameter_list|,
name|NodeDelta
name|nodeDelta
parameter_list|)
block|{
name|changeLog
operator|.
name|moveNode
argument_list|(
name|source
argument_list|,
name|nodeDelta
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|PropertyState
name|state
parameter_list|)
block|{
name|changeLog
operator|.
name|setProperty
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|NodeDelta
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|changeLog
operator|.
name|removeProperty
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|ChangeTree
name|changeTree
decl_stmt|;
specifier|private
name|String
name|revision
decl_stmt|;
comment|/**      * Create a new transient space for the given {@code workspace}, {@code microkernel}      * and {@code revision}.      * @param workspace      * @param microkernel      * @param revision      */
specifier|public
name|TransientSpace
parameter_list|(
specifier|final
name|String
name|workspace
parameter_list|,
specifier|final
name|MicroKernel
name|microkernel
parameter_list|,
specifier|final
name|String
name|revision
parameter_list|)
block|{
name|this
operator|.
name|microkernel
operator|=
name|microkernel
expr_stmt|;
name|this
operator|.
name|workspace
operator|=
name|workspace
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|changeTree
operator|=
name|createChangeTree
argument_list|(
name|workspace
argument_list|,
name|changeTreeListener
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param path      * @return the node delta for the given {@code path}. This is either a persisted node in the      * revision currently bound to this transient space or a transient node or {@code null}      * if no such node delta exists.      */
specifier|public
name|NodeDelta
name|getNodeDelta
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|changeTree
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Atomically persist all transient changes      * @return  the new revision resulting from saving all transient changes.      * @throws javax.jcr.RepositoryException      */
specifier|public
name|String
name|save
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|revision
operator|=
name|microkernel
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
name|changeLog
operator|.
name|toJsop
argument_list|()
argument_list|,
name|revision
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeTree
operator|=
name|createChangeTree
argument_list|(
name|workspace
argument_list|,
name|changeTreeListener
argument_list|)
expr_stmt|;
return|return
name|revision
return|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Refresh to the latest revision of the persistence store. If {@code keepChanges}      * is {@code true} transient changes are kept, other wise transient changes are discarded.      *<em>Note</em>: Keeping transient changes might cause conflicts on subsequent save operations.      * @param keepChanges      * @return the new revision      */
specifier|public
name|String
name|refresh
parameter_list|(
name|boolean
name|keepChanges
parameter_list|)
block|{
name|revision
operator|=
name|microkernel
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|keepChanges
condition|)
block|{
name|changeLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeTree
operator|=
name|createChangeTree
argument_list|(
name|workspace
argument_list|,
name|changeTreeListener
argument_list|)
expr_stmt|;
block|}
return|return
name|revision
return|;
block|}
comment|/**      * @return {@code true} iff the transient space contains transient changes.      */
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|changeTree
operator|.
name|hasChanges
argument_list|()
return|;
block|}
comment|//------------------------------------------< private>---
specifier|private
name|ChangeTree
name|createChangeTree
parameter_list|(
specifier|final
name|String
name|workspace
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
return|return
operator|new
name|ChangeTree
argument_list|(
name|Path
operator|.
name|create
argument_list|(
name|workspace
argument_list|)
argument_list|,
name|listener
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|microkernel
operator|.
name|nodeExists
argument_list|(
name|path
operator|.
name|toMkPath
argument_list|()
argument_list|,
name|revision
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

