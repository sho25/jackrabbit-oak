begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
operator|.
name|close
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|randomUUID
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|getBlobStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNoException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeThat
import|;
end_import

begin_comment
comment|/**  * Test for BlobIdTracker simulating a cluster and a shared data store scenarios  * to test addition, retrieval and removal of blob ids.  */
end_comment

begin_class
specifier|public
class|class
name|BlobIdTrackerClusterSharedTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobIdTrackerClusterSharedTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|root
decl_stmt|;
name|Cluster
name|cluster1
decl_stmt|;
name|Cluster
name|cluster2
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assumeThat
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SharedDataStore
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test simulating add, remove, retrieve scenarios for blobId tracker on a 2 node cluster.      *      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|addRetrieveCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clusterRepoId
init|=
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cluster1
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterRepoId
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|(
literal|"cluster1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|cluster2
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterRepoId
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|(
literal|"cluster2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adds
init|=
name|newHashSet
argument_list|()
decl_stmt|;
comment|// Add some on cluster 2& simulate snapshot
name|adds
operator|.
name|addAll
argument_list|(
name|cluster2
operator|.
name|doAdd
argument_list|(
name|range
argument_list|(
literal|5
argument_list|,
literal|9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|forceSnapshot
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done force snapshot for cluster2"
argument_list|)
expr_stmt|;
comment|// Add some on cluster1& simulate snapshot
name|adds
operator|.
name|addAll
argument_list|(
name|cluster1
operator|.
name|doAdd
argument_list|(
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster1
operator|.
name|forceSnapshot
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done force snapshot for cluster1"
argument_list|)
expr_stmt|;
comment|// Get on cluster 1
name|Set
argument_list|<
name|String
argument_list|>
name|retrieves
init|=
name|cluster1
operator|.
name|doRetrieve
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Retrieves not correct"
argument_list|,
name|adds
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done retrieve on cluster1"
argument_list|)
expr_stmt|;
name|cluster1
operator|.
name|doRemove
argument_list|(
name|adds
argument_list|,
name|range
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done remove on cluster1"
argument_list|)
expr_stmt|;
name|retrieves
operator|=
name|cluster1
operator|.
name|doRetrieve
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done retrieve on cluster1 again"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Retrieves not correct after remove"
argument_list|,
name|adds
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test simulating add, remove, retrieve scenarios for blobId tracker on a 2 node shared      * repository.      *      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|addRetrieveShared
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster1
operator|=
operator|new
name|Cluster
argument_list|(
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|(
literal|"cluster1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|cluster2
operator|=
operator|new
name|Cluster
argument_list|(
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|(
literal|"cluster2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|folder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|adds
init|=
name|newHashSet
argument_list|()
decl_stmt|;
comment|// Add some on cluster1& simulate snapshot
name|adds
operator|.
name|addAll
argument_list|(
name|cluster1
operator|.
name|doAdd
argument_list|(
name|range
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster1
operator|.
name|forceSnapshot
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done force snapshot for cluster1"
argument_list|)
expr_stmt|;
comment|// Add some on cluster 2& simulate shapshot
name|adds
operator|.
name|addAll
argument_list|(
name|cluster2
operator|.
name|doAdd
argument_list|(
name|range
argument_list|(
literal|5
argument_list|,
literal|9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|forceSnapshot
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done force snapshot for cluster2"
argument_list|)
expr_stmt|;
comment|// Get on cluster 1
name|Set
argument_list|<
name|String
argument_list|>
name|retrieves
init|=
name|cluster1
operator|.
name|doRetrieve
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Retrieves not correct"
argument_list|,
name|adds
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done retrieve on cluster1"
argument_list|)
expr_stmt|;
name|cluster1
operator|.
name|doRemove
argument_list|(
name|adds
argument_list|,
name|range
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done remove on cluster1"
argument_list|)
expr_stmt|;
name|retrieves
operator|=
name|cluster1
operator|.
name|doRetrieve
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Done retrieve on cluster1 again"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Retrieves not correct after remove"
argument_list|,
name|adds
argument_list|,
name|retrieves
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logical instance.      */
class|class
name|Cluster
block|{
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
name|BlobIdTracker
name|tracker
decl_stmt|;
name|TemporaryFolder
name|folder
decl_stmt|;
name|SharedDataStore
name|dataStore
decl_stmt|;
name|Cluster
parameter_list|(
name|String
name|repoId
parameter_list|,
name|String
name|path
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|dataStore
operator|=
name|getBlobStore
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
operator|new
name|BlobIdTracker
argument_list|(
name|path
argument_list|,
name|repoId
argument_list|,
literal|100
operator|*
literal|60
argument_list|,
name|dataStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|folder
operator|=
name|folder
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|doAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|add
argument_list|(
name|tracker
argument_list|,
name|ints
argument_list|)
return|;
block|}
name|void
name|doRemove
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|adds
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|removes
parameter_list|)
throws|throws
name|IOException
block|{
name|remove
argument_list|(
name|tracker
argument_list|,
name|folder
operator|.
name|newFile
argument_list|()
argument_list|,
name|adds
argument_list|,
name|removes
argument_list|)
expr_stmt|;
block|}
name|void
name|forceSnapshot
parameter_list|()
block|{
try|try
block|{
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|scheduler
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in snapshot"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|doRetrieve
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|retrieve
argument_list|(
name|tracker
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ExecutorCloser
argument_list|(
name|scheduler
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DataStoreBlobStore
operator|)
name|dataStore
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error closing blobstore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster1
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster2
operator|.
name|close
argument_list|()
expr_stmt|;
name|folder
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|add
parameter_list|(
name|BlobTracker
name|tracker
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rec
range|:
name|ints
control|)
block|{
name|tracker
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|retrieve
parameter_list|(
name|BlobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|tracker
operator|.
name|get
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"retrieving blob ids"
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retrieved
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iter
operator|instanceof
name|Closeable
condition|)
block|{
name|close
argument_list|(
operator|(
name|Closeable
operator|)
name|iter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|retrieved
return|;
block|}
specifier|private
specifier|static
name|void
name|remove
parameter_list|(
name|BlobIdTracker
name|tracker
parameter_list|,
name|File
name|temp
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|initAdd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStrings
argument_list|(
name|ints
operator|.
name|iterator
argument_list|()
argument_list|,
name|temp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initAdd
operator|.
name|removeAll
argument_list|(
name|ints
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|range
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<=
name|max
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

