begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|SynchronousBundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_class
specifier|public
class|class
name|RunnableJobTracker
extends|extends
name|ServiceTracker
argument_list|<
name|Runnable
argument_list|,
name|Future
argument_list|>
implements|implements
name|Closeable
implements|,
name|SynchronousBundleListener
block|{
comment|/**      * Lazily loaded executor      */
specifier|private
specifier|final
name|Supplier
argument_list|<
name|ScheduledExecutorService
argument_list|>
name|executor
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
operator|new
name|Supplier
argument_list|<
name|ScheduledExecutorService
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ScheduledExecutorService
name|get
parameter_list|()
block|{
return|return
name|Oak
operator|.
name|defaultScheduledExecutor
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
name|RunnableJobTracker
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|createFilter
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|open
argument_list|()
expr_stmt|;
name|context
operator|.
name|addBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|Runnable
argument_list|>
name|reference
parameter_list|)
block|{
name|Runnable
name|runnable
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|long
name|period
init|=
name|PropertiesUtil
operator|.
name|toLong
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
literal|"scheduler.period"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|concurrent
init|=
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
literal|"scheduler.concurrent"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Future
name|future
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|period
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|concurrent
condition|)
block|{
name|future
operator|=
name|getExecutor
argument_list|()
operator|.
name|scheduleAtFixedRate
argument_list|(
name|runnable
argument_list|,
name|period
argument_list|,
name|period
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|=
name|getExecutor
argument_list|()
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
name|period
argument_list|,
name|period
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|future
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Future
name|future
parameter_list|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|getExecutor
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|bundleEvent
parameter_list|)
block|{
comment|//Look for close event of system bundle to shutdown executor
comment|//Ideally we should listen to FrameworkEvent but PojoSR
comment|//currently does not emit framework event
if|if
condition|(
name|bundleEvent
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
literal|0
operator|&&
name|bundleEvent
operator|.
name|getType
argument_list|()
operator|==
name|bundleEvent
operator|.
name|STOPPED
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ScheduledExecutorService
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Filter
name|createFilter
parameter_list|()
block|{
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
literal|"(&(objectclass=java.lang.Runnable)(scheduler.period=*))"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

