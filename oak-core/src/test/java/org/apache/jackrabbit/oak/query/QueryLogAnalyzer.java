begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A simple standalone tool to analyze a log file and list slow queries.  */
end_comment

begin_class
specifier|public
class|class
name|QueryLogAnalyzer
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java ...<logFile> [<logFile2> ...]"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|analyze
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|analyze
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|LineNumberReader
name|r
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|totalLineCount
init|=
literal|0
decl_stmt|,
name|traversedLineCount
init|=
literal|0
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|QueryStats
argument_list|>
name|queries
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|QueryStats
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|totalLineCount
operator|++
expr_stmt|;
name|String
name|number
init|=
name|retrieve
argument_list|(
name|line
argument_list|,
literal|"Traversed "
argument_list|,
literal|" nodes "
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|traversedLineCount
operator|++
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"Traversed "
operator|+
name|number
operator|+
literal|" nodes "
argument_list|)
argument_list|)
expr_stmt|;
comment|// String index = retrieve(line, "nodes using index ", " with filter");
name|String
name|rawQuery
init|=
name|retrieve
argument_list|(
name|line
argument_list|,
literal|"Filter(query="
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|filterParams
argument_list|(
name|rawQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown line: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|String
name|xpath
init|=
name|retrieve
argument_list|(
name|query
argument_list|,
literal|"/* xpath: "
argument_list|,
literal|"*/, "
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|query
decl_stmt|;
if|if
condition|(
name|xpath
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|xpath
expr_stmt|;
name|int
name|index
init|=
name|query
operator|.
name|indexOf
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
name|query
operator|=
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|+
name|query
operator|.
name|substring
argument_list|(
name|index
operator|+
name|xpath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryStats
name|q
init|=
name|queries
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
operator|new
name|QueryStats
argument_list|()
expr_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|q
operator|.
name|xpath
operator|=
name|xpath
expr_stmt|;
block|}
name|q
operator|.
name|lineCount
operator|++
expr_stmt|;
name|int
name|nodes
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|>
name|q
operator|.
name|maxNodeCount
condition|)
block|{
name|q
operator|.
name|longestQuery
operator|=
name|rawQuery
expr_stmt|;
name|q
operator|.
name|maxNodeCount
operator|=
name|nodes
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|.
name|lastNodeCount
operator|==
literal|0
operator|||
name|nodes
operator|<
name|q
operator|.
name|lastNodeCount
condition|)
block|{
comment|// start
name|q
operator|.
name|runCount
operator|++
expr_stmt|;
name|q
operator|.
name|lastNodeCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// continuation
block|}
name|q
operator|.
name|nodeCount
operator|+=
name|nodes
operator|-
name|q
operator|.
name|lastNodeCount
expr_stmt|;
name|q
operator|.
name|lastNodeCount
operator|=
name|nodes
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File: "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Lines: "
operator|+
name|totalLineCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Lines with 'Traversed': "
operator|+
name|traversedLineCount
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|QueryStats
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryStats
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|queries
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryStats
name|q
range|:
name|list
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|xpath
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  XPath: "
operator|+
name|q
operator|.
name|xpath
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  SQL-2: "
operator|+
name|q
operator|.
name|query
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Longest: "
operator|+
name|q
operator|.
name|longestQuery
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"  %,d nodes traversed; "
operator|+
literal|"ran %,d times, max %,d nodes, %,d lines\n"
argument_list|,
name|q
operator|.
name|nodeCount
argument_list|,
name|q
operator|.
name|runCount
argument_list|,
name|q
operator|.
name|maxNodeCount
argument_list|,
name|q
operator|.
name|lineCount
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|filterParams
parameter_list|(
name|String
name|x
parameter_list|)
block|{
comment|// uuid
name|x
operator|=
name|x
operator|.
name|replaceAll
argument_list|(
literal|"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
argument_list|,
literal|"<uuid>"
argument_list|)
expr_stmt|;
comment|// timestamp
name|x
operator|=
name|x
operator|.
name|replaceAll
argument_list|(
literal|"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]*[Z]"
argument_list|,
literal|"<timestamp>"
argument_list|)
expr_stmt|;
comment|// number
name|x
operator|=
name|x
operator|.
name|replaceAll
argument_list|(
literal|"[0-9]+"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// timestamp
name|x
operator|=
name|x
operator|.
name|replaceAll
argument_list|(
literal|"<timestamp>"
argument_list|,
literal|"2000-01-01T00:00:00.000Z"
argument_list|)
expr_stmt|;
comment|// uuid
name|x
operator|=
name|x
operator|.
name|replaceAll
argument_list|(
literal|"<uuid>"
argument_list|,
literal|"12345678-1234-1234-123456789012"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|private
specifier|static
name|String
name|retrieve
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|int
name|start
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|start
operator|+=
name|prefix
operator|.
name|length
argument_list|()
expr_stmt|;
name|int
name|end
decl_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
block|{
name|end
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|s
operator|.
name|indexOf
argument_list|(
name|suffix
argument_list|,
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|s
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|static
class|class
name|QueryStats
implements|implements
name|Comparable
argument_list|<
name|QueryStats
argument_list|>
block|{
name|String
name|xpath
decl_stmt|;
name|String
name|query
decl_stmt|;
name|String
name|longestQuery
decl_stmt|;
name|int
name|lastNodeCount
decl_stmt|;
name|int
name|lineCount
decl_stmt|;
name|int
name|nodeCount
decl_stmt|;
name|int
name|runCount
decl_stmt|;
name|int
name|maxNodeCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|QueryStats
name|o
parameter_list|)
block|{
name|int
name|comp
init|=
name|Long
operator|.
name|signum
argument_list|(
name|o
operator|.
name|nodeCount
operator|-
name|nodeCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|Long
operator|.
name|signum
argument_list|(
name|o
operator|.
name|runCount
operator|-
name|runCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|o
operator|.
name|query
operator|.
name|compareTo
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|comp
return|;
block|}
block|}
block|}
end_class

end_unit

