begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|NodeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|SessionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|operation
operator|.
name|SessionOperation
import|;
end_import

begin_comment
comment|/**  * Abstract base class for locking operations.  *  * @param<T> return type of the {@link #perform()} method  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LockOperation
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SessionOperation
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
specifier|final
name|SessionDelegate
name|session
decl_stmt|;
specifier|private
specifier|final
name|NodeDelegate
name|node
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|LockOperation
parameter_list|(
name|SessionDelegate
name|session
parameter_list|,
name|NodeDelegate
name|node
parameter_list|)
throws|throws
name|PathNotFoundException
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|LockOperation
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
block|{
name|this
operator|.
name|session
operator|=
name|context
operator|.
name|getSessionDelegate
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|context
operator|.
name|getOakPathOrThrowNotFound
argument_list|(
name|absPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRefresh
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|perform
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
name|NodeDelegate
name|node
init|=
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|perform
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
literal|"Node "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|T
name|perform
parameter_list|(
name|NodeDelegate
name|node
parameter_list|)
throws|throws
name|RepositoryException
function_decl|;
block|}
end_class

end_unit

