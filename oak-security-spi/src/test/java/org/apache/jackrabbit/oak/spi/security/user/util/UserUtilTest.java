begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|UserUtilTest
block|{
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|createTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|ntName
parameter_list|)
block|{
return|return
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|createTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|ntName
parameter_list|,
annotation|@
name|Nullable
name|String
name|id
parameter_list|)
block|{
return|return
name|createTree
argument_list|(
name|ntName
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|createTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|ntName
parameter_list|,
annotation|@
name|Nullable
name|String
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|nodeName
parameter_list|)
block|{
name|Tree
name|t
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|ntName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|,
name|id
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeName
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdmin
parameter_list|()
block|{
name|String
name|altAdminId
init|=
literal|"test"
decl_stmt|;
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_ADMIN_ID
argument_list|,
name|altAdminId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|altAdminId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|config
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UserUtil
operator|.
name|isAdmin
argument_list|(
name|config
argument_list|,
name|altAdminId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAdminId
parameter_list|()
block|{
name|String
name|altAdminId
init|=
literal|"test"
decl_stmt|;
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_ADMIN_ID
argument_list|,
name|altAdminId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|,
name|UserUtil
operator|.
name|getAdminId
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|altAdminId
argument_list|,
name|UserUtil
operator|.
name|getAdminId
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAnonymousId
parameter_list|()
block|{
name|String
name|altAnonymousId
init|=
literal|"test"
decl_stmt|;
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_ANONYMOUS_ID
argument_list|,
name|altAnonymousId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
argument_list|,
name|UserUtil
operator|.
name|getAnonymousId
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|altAnonymousId
argument_list|,
name|UserUtil
operator|.
name|getAnonymousId
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTypeNullTree
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isType
argument_list|(
literal|null
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isType
argument_list|(
literal|null
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isType
argument_list|(
literal|null
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTypeGroupFromTree
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
literal|false
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
literal|false
argument_list|,
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|UserUtil
operator|.
name|isType
argument_list|(
name|createTree
argument_list|(
name|key
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTypeUserFromTree
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
literal|false
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|expected
init|=
name|test
operator|.
name|get
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntName
argument_list|,
name|expected
argument_list|,
name|UserUtil
operator|.
name|isType
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTypeAuthorizableFromTree
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|expected
init|=
name|test
operator|.
name|get
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntName
argument_list|,
name|expected
argument_list|,
name|UserUtil
operator|.
name|isType
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeFromTree
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AuthorizableType
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AuthorizableType
name|expected
init|=
name|test
operator|.
name|get
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntName
argument_list|,
name|expected
argument_list|,
name|UserUtil
operator|.
name|getType
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeFromTree2
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|test
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
control|)
block|{
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getType
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeFromNt
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
name|UserUtil
operator|.
name|getType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
name|UserUtil
operator|.
name|getType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
name|UserUtil
operator|.
name|getType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeFromNtReturnsNull
parameter_list|()
block|{
comment|// abstract primary type 'rep:Authorizable'
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getType
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// another node type name
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getType
argument_list|(
name|JcrConstants
operator|.
name|NT_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// null or empty name
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getType
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getType
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSystemUserNullTree
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|UserUtil
operator|.
name|isSystemUser
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSystemUser
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
literal|false
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
literal|false
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
literal|true
argument_list|,
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
literal|false
argument_list|,
name|JcrConstants
operator|.
name|NT_FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|expected
init|=
name|test
operator|.
name|get
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ntName
argument_list|,
name|expected
argument_list|,
name|UserUtil
operator|.
name|isSystemUser
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableRootPathDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rep:security/rep:authorizables"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableRootPath
parameter_list|()
block|{
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
literal|"/groups"
argument_list|,
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
literal|"/users"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/groups"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/users"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|config
argument_list|,
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableRootPathNullType
parameter_list|()
block|{
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getAuthorizableRootPath
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableIdNullTree
parameter_list|()
block|{
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableId
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|test
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
control|)
block|{
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableIdFallback
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|test
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
control|)
block|{
name|assertEquals
argument_list|(
literal|"nName"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|null
argument_list|,
literal|"nName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableIdNoAuthorizableType
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|test
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|test
control|)
block|{
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableIdWithType
parameter_list|()
block|{
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
index|[]
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
expr|<
name|AuthorizableType
decl_stmt|,
name|String
index|[]
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_USER
block|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
block|}
argument_list|)
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_USER
block|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
block|,
name|UserConstants
operator|.
name|NT_REP_GROUP
block|}
argument_list|)
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_GROUP
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|AuthorizableType
name|type
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|get
argument_list|(
name|type
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableIdWithTypeFallback
parameter_list|()
block|{
name|Map
argument_list|<
name|AuthorizableType
argument_list|,
name|String
index|[]
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
expr|<
name|AuthorizableType
decl_stmt|,
name|String
index|[]
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|USER
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_USER
block|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
block|}
argument_list|)
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|AUTHORIZABLE
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_USER
block|,
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
block|,
name|UserConstants
operator|.
name|NT_REP_GROUP
block|}
argument_list|)
decl|.
name|put
argument_list|(
name|AuthorizableType
operator|.
name|GROUP
argument_list|,
operator|new
name|String
index|[]
block|{
name|UserConstants
operator|.
name|NT_REP_GROUP
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|AuthorizableType
name|type
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|ntName
range|:
name|test
operator|.
name|get
argument_list|(
name|type
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"nodeName"
argument_list|,
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|ntName
argument_list|,
literal|null
argument_list|,
literal|"nodeName"
argument_list|)
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableIdTypeNotGroup
parameter_list|()
block|{
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|UserConstants
operator|.
name|NT_REP_USER
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableIdWithTypeNotGrou
parameter_list|()
block|{
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|UserConstants
operator|.
name|NT_REP_SYSTEM_USER
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableIdWithTypeNotUser
parameter_list|()
block|{
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|UserConstants
operator|.
name|NT_REP_GROUP
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetAuthorizableIdTypeNotUser
parameter_list|()
block|{
name|UserUtil
operator|.
name|getAuthorizableId
argument_list|(
name|createTree
argument_list|(
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|AuthorizableType
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastNullAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
literal|null
argument_list|,
name|User
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
literal|null
argument_list|,
name|Group
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCastNullClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCastUserToGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCastGroupToUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCastAuthorizableToUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AuthorizableTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCastAuthorizableToGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastUserToUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastUserToAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|,
name|Authorizable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastGroupToGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastGroupToAuthorizable
parameter_list|()
throws|throws
name|Exception
block|{
name|UserUtil
operator|.
name|castAuthorizable
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
argument_list|,
name|Authorizable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetImportBehavior
parameter_list|()
block|{
name|Map
argument_list|<
name|ConfigurationParameters
argument_list|,
name|Integer
argument_list|>
name|testMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|ImportBehavior
operator|.
name|IGNORE
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
literal|"anyString"
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|ABORT
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_BESTEFFORT
argument_list|)
argument_list|,
name|ImportBehavior
operator|.
name|BESTEFFORT
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ConfigurationParameters
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|testMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|UserUtil
operator|.
name|getImportBehavior
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

