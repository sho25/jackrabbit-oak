begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobTrackingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMKBuilderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|union
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|forceDelete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|readStringsAsSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|createFDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|getBlobStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
operator|.
name|getCurrentTimestamp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
operator|.
name|EMPTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
operator|.
name|INSTANCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNoException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeThat
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreTrackerGCTest
block|{
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|private
name|File
name|blobStoreRoot
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|check
parameter_list|()
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
literal|"./target/blobstore"
argument_list|)
decl_stmt|;
try|try
block|{
name|BlobStore
name|store
init|=
name|getBlobStore
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assumeThat
argument_list|(
name|store
argument_list|,
name|instanceOf
argument_list|(
name|BlobTrackingStore
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|forceDelete
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|clock
operator|=
name|getTestClock
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|setRevisionClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStoreRoot
operator|=
name|folder
operator|.
name|newFolder
argument_list|(
literal|"blobstore"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|resetClock
parameter_list|()
block|{
name|TestUtils
operator|.
name|resetRevisionClockToDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// All blobs added should be tracked now
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcReconcileActiveDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Simulate creation and active deletion after init without version gc to enable references to hang around
name|List
argument_list|<
name|String
argument_list|>
name|addlAdded
init|=
name|doActiveDelete
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
operator|(
name|DataStoreBlobStore
operator|)
name|cluster
operator|.
name|blobStore
argument_list|,
name|tracker
argument_list|,
name|folder
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlPresent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|activeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the delete tracker is refreshed
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|activeDeleted
argument_list|)
argument_list|,
name|retrieveActiveDeleteTracked
argument_list|(
name|tracker
argument_list|,
name|folder
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcReconcileActiveDeletionMarkCleared
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
comment|// Simulate active deletion before the init to ensure that the references also cleared
name|List
argument_list|<
name|String
argument_list|>
name|addlAdded
init|=
name|doActiveDelete
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
operator|(
name|DataStoreBlobStore
operator|)
name|cluster
operator|.
name|blobStore
argument_list|,
name|tracker
argument_list|,
name|folder
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Force a snapshot of the tracker to refresh
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|f
argument_list|,
name|BlobTracker
operator|.
name|Options
operator|.
name|ACTIVE_DELETION
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlPresent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|activeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the delete tracker is refreshed
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|,
name|retrieveActiveDeleteTracked
argument_list|(
name|tracker
argument_list|,
name|folder
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckOnlyActiveDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlAdded
init|=
name|doActiveDelete
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
operator|(
name|DataStoreBlobStore
operator|)
name|cluster
operator|.
name|blobStore
argument_list|,
name|tracker
argument_list|,
name|folder
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlPresent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|activeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
comment|// Since datastore in consistent state and only active deletions the missing list should be empty
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|gc
operator|.
name|checkConsistency
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckDeletedWithActiveDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Directly delete from blobstore
name|ArrayList
argument_list|<
name|String
argument_list|>
name|blobs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|)
decl_stmt|;
name|String
name|removedId
init|=
name|blobs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DataStoreBlobStore
operator|)
name|s
operator|)
operator|.
name|deleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|removedId
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsPresent
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|blobs
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|writeStrings
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|removedId
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlAdded
init|=
name|doActiveDelete
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
operator|(
name|DataStoreBlobStore
operator|)
name|cluster
operator|.
name|blobStore
argument_list|,
name|tracker
argument_list|,
name|folder
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addlPresent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|addlAdded
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|addlAdded
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|addlPresent
argument_list|)
expr_stmt|;
comment|// Only the missing blob should be reported and not the active deletions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|gc
operator|.
name|checkConsistency
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|doActiveDelete
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|DataStoreBlobStore
name|blobStore
parameter_list|,
name|BlobIdTracker
name|tracker
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|,
name|int
name|delIdx
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|90
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cactive"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|b
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|INSTANCE
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|//a = nodeStore.getRoot().builder();
for|for
control|(
name|int
name|idx
init|=
name|delIdx
init|;
name|idx
operator|<
name|delIdx
operator|+
name|num
condition|;
name|idx
operator|++
control|)
block|{
name|blobStore
operator|.
name|deleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|set
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deleted
operator|.
name|add
argument_list|(
name|set
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cactive"
operator|+
name|idx
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|INSTANCE
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|writeStrings
argument_list|(
name|deleted
operator|.
name|iterator
argument_list|()
argument_list|,
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|f
argument_list|,
name|BlobTracker
operator|.
name|Options
operator|.
name|ACTIVE_DELETION
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcColdStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// No blobs should be found now as snapshot not done
name|assertNotEquals
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a snapshot
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc and the deleted should not get resurrected
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|retrieveActiveDeleteTracked
parameter_list|(
name|BlobIdTracker
name|tracker
parameter_list|,
name|TemporaryFolder
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|readStringsAsSet
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tracker
operator|.
name|getDeleteTracker
argument_list|()
operator|.
name|retrieve
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|retrieved
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|range
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<=
name|max
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|addNodeSpecialChars
parameter_list|(
name|DocumentNodeStore
name|ds
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|specialCharSets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"q\\%22afdg\\%22"
argument_list|,
literal|"a\nbcd"
argument_list|,
literal|"a\n\rabcd"
argument_list|,
literal|"012\\efg"
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|ds
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|toBeDeleted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specialCharSets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|ds
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|18432
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|n
init|=
name|a
operator|.
name|child
argument_list|(
literal|"cspecial"
operator|+
name|i
argument_list|)
decl_stmt|;
name|n
operator|.
name|child
argument_list|(
name|specialCharSets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
operator|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|ds
operator|.
name|getBlobStore
argument_list|()
operator|)
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|idIter
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBeDeleted
operator|!=
name|i
condition|)
block|{
name|set
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
name|ds
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// Delete one node again
name|a
operator|=
name|ds
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cspecial"
operator|+
literal|0
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|ds
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|INSTANCE
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|long
name|maxAge
init|=
literal|10
decl_stmt|;
comment|// minutes
comment|// 1. Go past GC age and check no GC done as nothing deleted
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
name|vGC
init|=
name|ds
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|VersionGarbageCollector
operator|.
name|VersionGCStats
name|stats
init|=
name|vGC
operator|.
name|gc
argument_list|(
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcForcedRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// All blobs added should be tracked now
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do addition and deletion which would not have been tracked as yet
name|Set
argument_list|<
name|String
argument_list|>
name|newBlobs
init|=
name|addNodeSpecialChars
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|)
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|newBlobs
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|newBlobs
argument_list|)
expr_stmt|;
comment|// The new blobs should not be found now as new snapshot not done
name|assertEquals
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
argument_list|,
name|newBlobs
argument_list|)
expr_stmt|;
comment|//force gc to retrieve blob ids from datastore
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc and also the additions after
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a snapshot
name|scheduledFuture
operator|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc and the deleted should not get resurrected
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcWithInlined
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|BlobStore
name|s
init|=
name|cluster
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|init
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|addInlined
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|)
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// All blobs added should be tracked now
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|addInlined
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|40
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cinline"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|private
name|void
name|clusterGCInternal
parameter_list|(
name|Cluster
name|cluster1
parameter_list|,
name|Cluster
name|cluster2
parameter_list|,
name|boolean
name|same
parameter_list|)
throws|throws
name|Exception
block|{
name|BlobStore
name|s1
init|=
name|cluster1
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker1
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s1
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|DataStoreState
name|state1
init|=
name|init
argument_list|(
name|cluster1
operator|.
name|nodeStore
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cluster1
operator|.
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture1
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker1
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture1
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Add blobs to cluster1
name|BlobStore
name|s2
init|=
name|cluster2
operator|.
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker2
init|=
call|(
name|BlobIdTracker
call|)
argument_list|(
operator|(
name|BlobTrackingStore
operator|)
name|s2
argument_list|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|cluster2
operator|.
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|DataStoreState
name|state2
init|=
name|init
argument_list|(
name|cluster2
operator|.
name|nodeStore
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|cluster2
operator|.
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|cluster1
operator|.
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture2
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker2
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture2
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Run first round of GC
comment|// If not same cluster need to mark references on other repositories
if|if
condition|(
operator|!
name|same
condition|)
block|{
name|cluster2
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// do a gc on cluster1 with sweep
name|cluster1
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|(
name|s1
argument_list|)
decl_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|union
argument_list|(
name|state1
operator|.
name|blobsPresent
argument_list|,
name|state2
operator|.
name|blobsPresent
argument_list|)
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
comment|// Tracked blobs should reflect deletions after gc
name|assertEquals
argument_list|(
name|union
argument_list|(
name|state1
operator|.
name|blobsPresent
argument_list|,
name|state2
operator|.
name|blobsPresent
argument_list|)
argument_list|,
name|retrieveTracked
argument_list|(
name|tracker1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Again create snapshots at both cluster nodes to synchronize the latest state of
comment|// local references with datastore at each node
name|scheduledFuture1
operator|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker1
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|scheduledFuture1
operator|.
name|get
argument_list|()
expr_stmt|;
name|scheduledFuture2
operator|=
name|newSingleThreadScheduledExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
name|tracker2
operator|.
expr|new
name|SnapshotJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|scheduledFuture2
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Capture logs for the second round of gc
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|MarkSweepGarbageCollector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Error occurred while deleting blob with id"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|same
condition|)
block|{
name|cluster2
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|cluster1
operator|.
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|existingAfterGC
operator|=
name|iterate
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
comment|// Check the state of the blob store after gc
name|assertEquals
argument_list|(
name|union
argument_list|(
name|state1
operator|.
name|blobsPresent
argument_list|,
name|state2
operator|.
name|blobsPresent
argument_list|)
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests GC twice on a 2 node shared datastore setup.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|differentClusterGC
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
name|cluster1
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1"
argument_list|)
decl_stmt|;
name|Cluster
name|cluster2
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster2"
argument_list|)
decl_stmt|;
name|clusterGCInternal
argument_list|(
name|cluster1
argument_list|,
name|cluster2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests GC twice on 2 node cluster setup.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|sameClusterGC
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|Cluster
name|cluster1
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1-1"
argument_list|,
literal|1
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|Cluster
name|cluster2
init|=
operator|new
name|Cluster
argument_list|(
literal|"cluster1-2"
argument_list|,
literal|2
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|clusterGCInternal
argument_list|(
name|cluster1
argument_list|,
name|cluster2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iterate
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cur
init|=
operator|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|retrieveTracked
parameter_list|(
name|BlobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|retrieved
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|tracker
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retrieved
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeQuietly
argument_list|(
operator|(
name|Closeable
operator|)
name|iter
argument_list|)
expr_stmt|;
return|return
name|retrieved
return|;
block|}
specifier|public
name|DataStoreState
name|init
parameter_list|(
name|DocumentNodeStore
name|s
parameter_list|,
name|int
name|idStart
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|a
init|=
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|10
decl_stmt|;
name|int
name|maxDeleted
init|=
literal|5
decl_stmt|;
comment|// track the number of the assets to be deleted
name|List
argument_list|<
name|Integer
argument_list|>
name|processed
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|47
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|idStart
init|;
name|i
operator|<
name|idStart
operator|+
name|maxDeleted
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|contains
argument_list|(
name|idStart
operator|+
name|n
argument_list|)
condition|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|idStart
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStoreState
name|state
init|=
operator|new
name|DataStoreState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|idStart
init|;
name|i
operator|<
name|idStart
operator|+
name|number
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|s
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|16516
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
operator|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|s
operator|.
name|getBlobStore
argument_list|()
operator|)
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|state
operator|.
name|blobsPresent
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// Add a duplicated entry
if|if
condition|(
name|i
operator|==
name|idStart
condition|)
block|{
name|a
operator|.
name|child
argument_list|(
literal|"cdup"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|INSTANCE
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|a
operator|=
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|processed
control|)
block|{
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|id
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|s
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|INSTANCE
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
name|long
name|maxAge
init|=
literal|10
decl_stmt|;
comment|// minutes
comment|// 1. Go past GC age and check no GC done as nothing deleted
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|maxAge
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
name|vGC
init|=
name|s
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|VersionGarbageCollector
operator|.
name|VersionGCStats
name|stats
init|=
name|vGC
operator|.
name|gc
argument_list|(
literal|0
argument_list|,
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
name|state
return|;
block|}
class|class
name|Cluster
implements|implements
name|Closeable
block|{
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
name|BlobStore
name|blobStore
decl_stmt|;
name|MarkSweepGarbageCollector
name|gc
decl_stmt|;
name|String
name|repoId
decl_stmt|;
name|BlobIdTracker
name|tracker
decl_stmt|;
specifier|public
name|Cluster
parameter_list|(
name|String
name|clusterName
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|clusterName
argument_list|,
literal|1
argument_list|,
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Cluster
parameter_list|(
name|String
name|clusterName
parameter_list|,
name|int
name|clusterId
parameter_list|,
name|MemoryDocumentStore
name|store
parameter_list|)
throws|throws
name|Exception
block|{
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|createFDS
argument_list|(
name|blobStoreRoot
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|trackerRoot
init|=
name|folder
operator|.
name|newFolder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|tracker
operator|=
operator|new
name|BlobIdTracker
argument_list|(
name|trackerRoot
argument_list|,
name|repoId
argument_list|,
literal|86400
argument_list|,
operator|(
name|SharedDataStore
operator|)
name|blobStore
argument_list|)
expr_stmt|;
comment|// add the tracker to the blobStore
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|addTracker
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
comment|// initialized the GC
name|gc
operator|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|DocumentBlobReferenceRetriever
argument_list|(
name|nodeStore
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
argument_list|,
name|newSingleThreadExecutor
argument_list|()
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|(
literal|"gc"
operator|+
name|clusterName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|nodeStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Clock
name|getTestClock
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|getCurrentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clock
return|;
block|}
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
class|class
name|DataStoreState
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|blobsAdded
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|blobsPresent
init|=
name|newHashSet
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

