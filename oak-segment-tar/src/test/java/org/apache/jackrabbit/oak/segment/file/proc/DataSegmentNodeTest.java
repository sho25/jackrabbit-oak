begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|NullInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DataSegmentNodeTest
block|{
specifier|private
specifier|static
name|Segment
name|mockSegment
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|segment
return|;
block|}
specifier|private
specifier|static
name|Backend
name|mockBackend
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|Backend
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveGenerationProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getGeneration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"generation"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveFullGenerationProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getFullGeneration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"fullGeneration"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveCompactedProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|isCompacted
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"compacted"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveLengthProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveDataProperty
parameter_list|()
block|{
name|InputStream
name|stream
init|=
operator|new
name|NullInputStream
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Backend
name|backend
init|=
name|mockBackend
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|backend
operator|.
name|getSegmentData
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|backend
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|stream
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|getNewStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveIdProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|mockSegment
argument_list|()
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveVersionProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveIsDataSegmentProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|mockSegment
argument_list|()
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"isDataSegment"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveInfoProperty
parameter_list|()
block|{
name|Segment
name|segment
init|=
name|mockSegment
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|segment
operator|.
name|getInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"info"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|segment
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"info"
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveExistsProperty
parameter_list|()
block|{
name|PropertyState
name|property
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|mockSegment
argument_list|()
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"exists"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldExposeReferences
parameter_list|()
block|{
name|NodeState
name|n
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|mockSegment
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|n
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
literal|"references"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldExposeRecordsNode
parameter_list|()
block|{
name|NodeState
name|n
init|=
operator|new
name|DataSegmentNode
argument_list|(
name|mockBackend
argument_list|()
argument_list|,
literal|"s"
argument_list|,
name|mockSegment
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|n
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
literal|"records"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

