begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|getInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|encode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A {@code PartialCompactionMap} implementation persisting its entries  * to segments.  *  * TODO In theory we could also compact the compaction map. Is there any need to do so?  */
end_comment

begin_class
specifier|public
class|class
name|PersistedCompactionMap
implements|implements
name|PartialCompactionMap
block|{
comment|/**      * Rough estimate of the number of bytes of disk space of a map entry.      * Used by the compaction gain estimator to offset its estimate.      */
specifier|public
specifier|static
specifier|final
name|int
name|BYTES_PER_ENTRY
init|=
name|getInteger
argument_list|(
literal|"bytes-per-entry"
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|/**      * Number of map entries to keep until compressing this map.      */
specifier|private
specifier|static
specifier|final
name|int
name|COMPRESS_INTERVAL
init|=
name|getInteger
argument_list|(
literal|"compress-interval"
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
comment|/**      * Key used to store meta data associated with the individual map generations. Tools      * can use this to grep across segments for finding the meta data and ultimately      * to find and parse the compaction map generations.      */
specifier|public
specifier|static
specifier|final
name|String
name|PERSISTED_COMPACTION_MAP
init|=
literal|"PersistedCompactionMap"
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|UUID
argument_list|,
name|RecordIdMap
argument_list|>
name|recent
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
specifier|private
name|int
name|recentCount
decl_stmt|;
specifier|private
name|long
name|recordCount
decl_stmt|;
specifier|private
name|MapRecord
name|entries
decl_stmt|;
name|PersistedCompactionMap
parameter_list|(
annotation|@
name|Nonnull
name|SegmentWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasCompactedTo
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|before
parameter_list|,
annotation|@
name|Nonnull
name|RecordId
name|after
parameter_list|)
block|{
return|return
operator|(
name|after
operator|.
name|equals
argument_list|(
name|get
argument_list|(
name|before
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasCompacted
parameter_list|(
annotation|@
name|Nonnull
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|recent
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
operator|||
name|entries
operator|!=
literal|null
operator|&&
name|entries
operator|.
name|getEntry
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
specifier|static
name|UUID
name|asUUID
parameter_list|(
annotation|@
name|Nonnull
name|SegmentId
name|id
parameter_list|)
block|{
return|return
operator|new
name|UUID
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|RecordId
name|get
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|before
parameter_list|)
block|{
name|UUID
name|uuid
init|=
name|asUUID
argument_list|(
name|before
operator|.
name|getSegmentId
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|offset
init|=
name|encode
argument_list|(
name|before
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|RecordId
name|recordId
init|=
name|get
argument_list|(
name|recent
argument_list|,
name|uuid
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordId
operator|!=
literal|null
condition|)
block|{
return|return
name|recordId
return|;
block|}
return|return
name|get
argument_list|(
name|writer
operator|.
name|getTracker
argument_list|()
argument_list|,
name|entries
argument_list|,
name|uuid
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|RecordId
name|get
parameter_list|(
annotation|@
name|Nonnull
name|Map
argument_list|<
name|UUID
argument_list|,
name|RecordIdMap
argument_list|>
name|map
parameter_list|,
annotation|@
name|Nonnull
name|UUID
name|uuid
parameter_list|,
name|short
name|offset
parameter_list|)
block|{
name|RecordIdMap
name|newSegment
init|=
name|map
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSegment
operator|!=
literal|null
condition|)
block|{
return|return
name|newSegment
operator|.
name|get
argument_list|(
name|offset
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
specifier|static
name|RecordId
name|get
parameter_list|(
annotation|@
name|Nonnull
name|SegmentTracker
name|tracker
parameter_list|,
annotation|@
name|Nullable
name|MapRecord
name|map
parameter_list|,
annotation|@
name|Nonnull
name|UUID
name|uuid
parameter_list|,
name|short
name|offset
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MapEntry
name|newSegmentId
init|=
name|map
operator|.
name|getEntry
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSegmentId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MapRecord
name|newSegment
init|=
operator|new
name|MapRecord
argument_list|(
name|newSegmentId
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|MapEntry
name|newRecordId
init|=
name|newSegment
operator|.
name|getEntry
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|offset
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRecordId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|RecordId
operator|.
name|fromString
argument_list|(
name|tracker
argument_list|,
name|Segment
operator|.
name|readString
argument_list|(
name|newRecordId
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|before
parameter_list|,
annotation|@
name|Nonnull
name|RecordId
name|after
parameter_list|)
block|{
if|if
condition|(
name|get
argument_list|(
name|before
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|UUID
name|uuid
init|=
name|asUUID
argument_list|(
name|before
operator|.
name|getSegmentId
argument_list|()
argument_list|)
decl_stmt|;
name|RecordIdMap
name|entry
init|=
name|recent
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|RecordIdMap
argument_list|()
expr_stmt|;
name|recent
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|put
argument_list|(
name|encode
argument_list|(
name|before
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|recentCount
operator|>
name|COMPRESS_INTERVAL
condition|)
block|{
name|recentCount
operator|=
literal|0
expr_stmt|;
name|compress
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
parameter_list|)
block|{
name|compress
argument_list|(
name|uuids
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compress
parameter_list|()
block|{
name|compress
argument_list|(
name|Collections
operator|.
expr|<
name|UUID
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSegmentCount
parameter_list|()
block|{
return|return
name|entries
operator|==
literal|null
condition|?
literal|0
else|:
name|entries
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRecordCount
parameter_list|()
block|{
return|return
name|recordCount
return|;
block|}
specifier|private
name|void
name|compress
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|removed
parameter_list|)
block|{
if|if
condition|(
name|recent
operator|.
name|isEmpty
argument_list|()
operator|&&
name|removed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|segmentIdMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|RecordIdMap
argument_list|>
name|recentEntry
range|:
name|recent
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UUID
name|uuid
init|=
name|recentEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RecordIdMap
name|newSegment
init|=
name|recentEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|removed
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|MapRecord
name|base
decl_stmt|;
name|MapEntry
name|baseEntry
init|=
name|entries
operator|==
literal|null
condition|?
literal|null
else|:
name|entries
operator|.
name|getEntry
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|base
operator|=
name|baseEntry
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|MapRecord
argument_list|(
name|baseEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|offsetMap
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|newSegment
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|offsetMap
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|newSegment
operator|.
name|getKey
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|,
name|writer
operator|.
name|writeString
argument_list|(
name|newSegment
operator|.
name|getRecordId
argument_list|(
name|k
argument_list|)
operator|.
name|toString10
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|newEntryId
init|=
name|writer
operator|.
name|writeMap
argument_list|(
name|base
argument_list|,
name|offsetMap
argument_list|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|segmentIdMap
operator|.
name|put
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|,
name|newEntryId
argument_list|)
expr_stmt|;
name|recordCount
operator|+=
name|offsetMap
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|removed
control|)
block|{
name|MapEntry
name|toRemove
init|=
name|entries
operator|.
name|getEntry
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRemove
operator|!=
literal|null
condition|)
block|{
name|segmentIdMap
operator|.
name|put
argument_list|(
name|uuid
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|recordCount
operator|-=
operator|new
name|MapRecord
argument_list|(
name|toRemove
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|RecordId
name|previousBaseId
init|=
name|entries
operator|==
literal|null
condition|?
literal|null
else|:
name|entries
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|entries
operator|=
name|writer
operator|.
name|writeMap
argument_list|(
name|entries
argument_list|,
name|segmentIdMap
argument_list|)
expr_stmt|;
name|entries
operator|.
name|getSegment
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|pin
argument_list|()
expr_stmt|;
name|String
name|mapInfo
init|=
name|PERSISTED_COMPACTION_MAP
operator|+
literal|'{'
operator|+
literal|"id="
operator|+
name|entries
operator|.
name|getRecordId
argument_list|()
operator|+
literal|", baseId="
operator|+
name|previousBaseId
operator|+
literal|'}'
decl_stmt|;
name|writer
operator|.
name|writeString
argument_list|(
name|mapInfo
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recent
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return 0      */
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedWeight
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

