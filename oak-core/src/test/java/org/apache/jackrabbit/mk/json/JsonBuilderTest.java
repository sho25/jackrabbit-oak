begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsonBuilder
operator|.
name|JsonArrayBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsonBuilder
operator|.
name|JsonObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|JsonBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|jsonBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JsonBuilder
operator|.
name|create
argument_list|(
name|sw
argument_list|)
operator|.
name|value
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|value
argument_list|(
literal|"int"
argument_list|,
literal|3
argument_list|)
operator|.
name|value
argument_list|(
literal|"float"
argument_list|,
literal|3f
argument_list|)
operator|.
name|object
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|value
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
operator|.
name|nil
argument_list|(
literal|"nil"
argument_list|)
operator|.
name|array
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|value
argument_list|(
literal|2.0d
argument_list|)
operator|.
name|value
argument_list|(
literal|"42"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|array
argument_list|(
literal|"string array"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"1"
block|,
literal|"foo"
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"int array"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"long array"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"float array"
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"double array"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"boolean array"
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
operator|.
name|array
argument_list|(
literal|"number array"
argument_list|,
operator|new
name|BigDecimal
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|21
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|42
argument_list|)
block|}
argument_list|)
operator|.
name|value
argument_list|(
literal|"some"
argument_list|,
literal|"more"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|json
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"foo\":\"bar\",\"int\":3,\"float\":3.0,\"obj\":{\"boolean\":true,\"nil\":null,"
operator|+
literal|"\"arr\":[1,2.0,2.0,\"42\"]},\"string array\":[\"\",\"1\",\"foo\"],\"int array\":[1,2,3],"
operator|+
literal|"\"long array\":[1,2,3],\"float array\":[1.0,2.0,3.0],\"double array\":[1.0,2.0,3.0],"
operator|+
literal|"\"boolean array\":[true,false],\"number array\":[21,42],\"some\":\"more\"}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|escape
parameter_list|()
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JsonBuilder
operator|.
name|create
argument_list|(
name|sw
argument_list|)
operator|.
name|value
argument_list|(
literal|"back\\slash"
argument_list|,
literal|"\\"
argument_list|)
operator|.
name|value
argument_list|(
literal|"back\\\\slash"
argument_list|,
literal|"\\\\"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|json
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"back\\\\slash\":\"\\\\\",\"back\\\\\\\\slash\":\"\\\\\\\\\"}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fixedPoint
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|InputStream
name|one
init|=
name|JsonBuilderTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.json"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|String
name|s1
init|=
name|fix
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|fix
argument_list|(
name|s1
argument_list|)
decl_stmt|;
comment|// fix == fix fix
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------< private>---
specifier|private
specifier|static
name|String
name|fix
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
name|reader
argument_list|,
operator|new
name|JsonHandler
argument_list|(
name|JsonBuilder
operator|.
name|create
argument_list|(
name|sw
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|fix
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
return|return
name|fix
argument_list|(
operator|new
name|StringReader
argument_list|(
name|string
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|JsonHandler
implements|implements
name|ContentHandler
block|{
specifier|private
name|JsonObjectBuilder
name|objectBuilder
decl_stmt|;
specifier|private
name|JsonArrayBuilder
name|arrayBuilder
decl_stmt|;
specifier|private
name|String
name|currentKey
decl_stmt|;
specifier|public
name|JsonHandler
parameter_list|(
name|JsonObjectBuilder
name|objectBuilder
parameter_list|)
block|{
name|this
operator|.
name|objectBuilder
operator|=
name|objectBuilder
expr_stmt|;
block|}
specifier|public
name|void
name|startJSON
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
comment|// ignore
block|}
specifier|public
name|void
name|endJSON
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
comment|// ignore
block|}
specifier|public
name|boolean
name|startObject
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
if|if
condition|(
name|currentKey
operator|!=
literal|null
condition|)
block|{
name|objectBuilder
operator|=
name|objectBuilder
operator|.
name|object
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|endObject
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|objectBuilder
operator|=
name|objectBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startObjectEntry
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|currentKey
operator|=
name|key
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|endObjectEntry
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startArray
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|arrayBuilder
operator|=
name|objectBuilder
operator|.
name|array
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|endArray
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|objectBuilder
operator|=
name|arrayBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|arrayBuilder
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|primitive
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
if|if
condition|(
name|arrayBuilder
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|objectBuilder
operator|.
name|nil
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|objectBuilder
operator|.
name|value
argument_list|(
name|currentKey
argument_list|,
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|arrayBuilder
operator|.
name|nil
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|arrayBuilder
operator|.
name|value
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

