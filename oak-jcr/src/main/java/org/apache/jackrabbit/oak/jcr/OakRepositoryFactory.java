begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|SecurityProviderImpl
import|;
end_import

begin_class
specifier|public
class|class
name|OakRepositoryFactory
implements|implements
name|RepositoryFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_URI
init|=
literal|"org.apache.jackrabbit.repository.uri"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|Map
name|parameters
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Object
name|value
init|=
name|parameters
operator|==
literal|null
condition|?
literal|null
else|:
name|parameters
operator|.
name|get
argument_list|(
name|REPOSITORY_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jcr-oak"
argument_list|)
condition|)
block|{
return|return
name|getRepository
argument_list|(
name|uri
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ignore
parameter_list|)
block|{             }
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Repository
name|getRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO correctly interpret uri
return|return
operator|new
name|RepositoryImpl
argument_list|(
operator|new
name|MicroKernelImpl
argument_list|()
argument_list|,
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|SecurityProviderImpl
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

