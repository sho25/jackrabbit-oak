begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|VersionGCOptions
block|{
specifier|public
specifier|final
name|int
name|overflowToDiskThreshold
decl_stmt|;
specifier|public
specifier|final
name|long
name|collectLimit
decl_stmt|;
specifier|public
specifier|final
name|long
name|precisionMs
decl_stmt|;
specifier|public
specifier|final
name|int
name|maxIterations
decl_stmt|;
specifier|public
specifier|final
name|long
name|maxDurationMs
decl_stmt|;
specifier|public
specifier|final
name|double
name|delayFactor
decl_stmt|;
specifier|public
name|VersionGCOptions
parameter_list|()
block|{
name|this
argument_list|(
literal|100000
argument_list|,
literal|100000
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VersionGCOptions
parameter_list|(
name|int
name|overflow
parameter_list|,
name|long
name|collectLimit
parameter_list|,
name|long
name|precisionMs
parameter_list|,
name|int
name|maxIterations
parameter_list|,
name|long
name|maxDurationMs
parameter_list|,
name|double
name|delayFactor
parameter_list|)
block|{
name|this
operator|.
name|overflowToDiskThreshold
operator|=
name|overflow
expr_stmt|;
name|this
operator|.
name|collectLimit
operator|=
name|collectLimit
expr_stmt|;
name|this
operator|.
name|precisionMs
operator|=
name|precisionMs
expr_stmt|;
name|this
operator|.
name|maxIterations
operator|=
name|maxIterations
expr_stmt|;
name|this
operator|.
name|maxDurationMs
operator|=
name|maxDurationMs
expr_stmt|;
name|this
operator|.
name|delayFactor
operator|=
name|delayFactor
expr_stmt|;
block|}
comment|/**      * Set the limit of number of resource id+_modified strings (not length) held in memory during      * a collection run. Any more will be stored and sorted in a temporary file.      * @param overflowToDiskThreshold limit after which to use file based storage for candidate ids      */
specifier|public
name|VersionGCOptions
name|withOverflowToDiskThreshold
parameter_list|(
name|int
name|overflowToDiskThreshold
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|overflowToDiskThreshold
argument_list|,
name|this
operator|.
name|collectLimit
argument_list|,
name|this
operator|.
name|precisionMs
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|this
operator|.
name|maxDurationMs
argument_list|,
name|this
operator|.
name|delayFactor
argument_list|)
return|;
block|}
comment|/**      * Sets the absolute limit on number of resource ids collected in one run. This does not count      * nodes which can be deleted immediately. When this limit is exceeded, the run either fails or      * is attempted with different parameters, depending on other settings. Note that if the inspected      * time interval is equal or less than {@link #precisionMs}, the collection limit will be ignored.      *      * @param limit the absolute limit of resources collected in one run      */
specifier|public
name|VersionGCOptions
name|withCollectLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|this
operator|.
name|overflowToDiskThreshold
argument_list|,
name|limit
argument_list|,
name|this
operator|.
name|precisionMs
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|this
operator|.
name|maxDurationMs
argument_list|,
name|this
operator|.
name|delayFactor
argument_list|)
return|;
block|}
comment|/**      * Set the minimum duration that is used for time based searches. This should at minimum be the      * precision available on modification dates of documents, but can be set larger to avoid querying      * the database too often. Note however that {@link #collectLimit} will not take effect for runs      * that query equal or shorter than precision duration.      *      * @param unit time unit used for duration      * @param t    the number of units in the duration      */
specifier|public
name|VersionGCOptions
name|withPrecisionMs
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|long
name|t
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|this
operator|.
name|overflowToDiskThreshold
argument_list|,
name|this
operator|.
name|collectLimit
argument_list|,
name|unit
operator|.
name|toMillis
argument_list|(
name|t
argument_list|)
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|this
operator|.
name|maxDurationMs
argument_list|,
name|this
operator|.
name|delayFactor
argument_list|)
return|;
block|}
comment|/**      * Set the maximum duration in elapsed time that the garbage collection shall take. Setting this      * to 0 means that there is no limit imposed. A positive duration will impose a soft limit, e.g.      * the collection might take longer, but no next iteration will be attempted afterwards. See      * {@link #withMaxIterations(int)} on how to control the behaviour.      *      * @param unit time unit used for duration      * @param t    the number of units in the duration      */
specifier|public
name|VersionGCOptions
name|withMaxDuration
parameter_list|(
name|TimeUnit
name|unit
parameter_list|,
name|long
name|t
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|this
operator|.
name|overflowToDiskThreshold
argument_list|,
name|this
operator|.
name|collectLimit
argument_list|,
name|this
operator|.
name|precisionMs
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|unit
operator|.
name|toMillis
argument_list|(
name|t
argument_list|)
argument_list|,
name|this
operator|.
name|delayFactor
argument_list|)
return|;
block|}
comment|/**      * Set the maximum number of iterations that shall be attempted in a single run. A value      * of 0 means that there is no limit. Since the garbage collector uses iterations to find      * suitable time intervals and set sizes for cleanups, limiting the iterations is only      * recommended for setups where the collector is called often.      *      * @param max the maximum number of iterations allowed      */
specifier|public
name|VersionGCOptions
name|withMaxIterations
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|this
operator|.
name|overflowToDiskThreshold
argument_list|,
name|this
operator|.
name|collectLimit
argument_list|,
name|this
operator|.
name|precisionMs
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|max
argument_list|,
name|this
operator|.
name|delayFactor
argument_list|)
return|;
block|}
comment|/**      * Set a delay factor between batched database modifications. This rate limits the writes      * to the database by a garbage collector. 0, e.g. no delay, is the default. This is recommended      * when garbage collection is done during a maintenance time when other system load is low.      *<p>      * For factory&gt; 0, the actual delay is the duration of the last batch modification times      * the factor. Example: 0.25 would result in a 25% delay, e.g. a batch modification running      * 10 seconds would be followed by a sleep of 2.5 seconds.      *      * @param f the factor used to calculate batch modification delays      */
specifier|public
name|VersionGCOptions
name|withDelayFactor
parameter_list|(
name|double
name|f
parameter_list|)
block|{
return|return
operator|new
name|VersionGCOptions
argument_list|(
name|this
operator|.
name|overflowToDiskThreshold
argument_list|,
name|this
operator|.
name|collectLimit
argument_list|,
name|this
operator|.
name|precisionMs
argument_list|,
name|this
operator|.
name|maxIterations
argument_list|,
name|this
operator|.
name|maxDurationMs
argument_list|,
name|f
argument_list|)
return|;
block|}
block|}
end_class

end_unit

