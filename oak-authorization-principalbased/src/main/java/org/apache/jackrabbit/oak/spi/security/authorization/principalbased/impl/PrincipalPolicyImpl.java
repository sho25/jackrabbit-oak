begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AbstractAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|PrincipalPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_class
class|class
name|PrincipalPolicyImpl
extends|extends
name|AbstractAccessControlList
implements|implements
name|PrincipalPolicy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrincipalPolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|EntryImpl
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Principal
name|principal
decl_stmt|;
specifier|private
specifier|final
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBitsProvider
name|privilegeBitsProvider
decl_stmt|;
name|PrincipalPolicyImpl
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|MgrProvider
name|mgrProvider
parameter_list|)
block|{
name|super
argument_list|(
name|oakPath
argument_list|,
name|mgrProvider
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|restrictionProvider
operator|=
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
expr_stmt|;
name|this
operator|.
name|privilegeManager
operator|=
name|mgrProvider
operator|.
name|getPrivilegeManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|privilegeBitsProvider
operator|=
name|mgrProvider
operator|.
name|getPrivilegeBitsProvider
argument_list|()
expr_stmt|;
block|}
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|entryTree
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|oakPath
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|entryTree
argument_list|,
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|bits
init|=
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|entryTree
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|restrictionProvider
operator|.
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|entryTree
argument_list|)
decl_stmt|;
return|return
name|addEntry
argument_list|(
operator|new
name|EntryImpl
argument_list|(
name|oakPath
argument_list|,
name|bits
argument_list|,
name|restrictions
argument_list|)
argument_list|)
return|;
block|}
comment|//------------------------------------------< AbstractAccessControlList>---
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|List
argument_list|<
name|EntryImpl
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|restrictionProvider
return|;
block|}
comment|//----------------------------------------------------< PrincipalPolicy>---
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|addEntry
argument_list|(
name|effectivePath
argument_list|,
name|privileges
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|Nullable
name|String
name|effectivePath
parameter_list|,
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
operator|(
name|effectivePath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|effectivePath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|rs
init|=
name|validateRestrictions
argument_list|(
name|oakPath
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|privilegeBits
init|=
name|validatePrivileges
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
return|return
name|addEntry
argument_list|(
operator|new
name|EntryImpl
argument_list|(
name|oakPath
argument_list|,
name|privilegeBits
argument_list|,
name|rs
argument_list|)
argument_list|)
return|;
block|}
comment|//----------------------------------------< JackrabbitAccessControlList>---
annotation|@
name|Override
specifier|public
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|principal
operator|.
name|equals
argument_list|(
name|principal
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Principal must be the one associated with the principal based policy."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAllow
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Principal based access control does not support DENY access control entries."
argument_list|)
throw|;
block|}
name|String
name|jcrNodePathName
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|AccessControlConstants
operator|.
name|REP_NODE_PATH
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|extractPathFromRestrictions
argument_list|(
name|restrictions
argument_list|,
name|jcrNodePathName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|filteredRestrictions
init|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|restrictions
argument_list|,
name|entry
lambda|->
operator|!
name|jcrNodePathName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addEntry
argument_list|(
name|path
argument_list|,
name|privileges
argument_list|,
name|filteredRestrictions
argument_list|,
operator|(
name|mvRestrictions
operator|==
literal|null
operator|)
condition|?
name|Collections
operator|.
name|emptyMap
argument_list|()
else|:
name|mvRestrictions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|orderBefore
parameter_list|(
annotation|@
name|NotNull
name|AccessControlEntry
name|srcEntry
parameter_list|,
annotation|@
name|Nullable
name|AccessControlEntry
name|destEntry
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|EntryImpl
name|src
init|=
name|validateEntry
argument_list|(
name|srcEntry
argument_list|)
decl_stmt|;
name|EntryImpl
name|dest
init|=
operator|(
name|destEntry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|validateEntry
argument_list|(
name|destEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"'srcEntry' equals 'destEntry' -> no reordering."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|index
operator|=
name|entries
operator|.
name|indexOf
argument_list|(
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Destination entry not contained in this AccessControlList."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|entries
operator|.
name|remove
argument_list|(
name|src
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entries
operator|.
name|add
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Source entry not contained in this AccessControlList"
argument_list|)
throw|;
block|}
block|}
comment|//--------------------------------------------------< AccessControlList>---
annotation|@
name|Override
specifier|public
name|void
name|removeAccessControlEntry
parameter_list|(
name|AccessControlEntry
name|ace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|validateEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|remove
argument_list|(
name|ace
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"AccessControlEntry "
operator|+
name|ace
operator|+
literal|" not contained in AccessControlList"
argument_list|)
throw|;
block|}
block|}
comment|//--------------------------------------------------------------------------
annotation|@
name|NotNull
specifier|private
name|String
name|getOakName
parameter_list|(
annotation|@
name|NotNull
name|String
name|jcrName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getNamePathMapper
argument_list|()
operator|.
name|getOakName
argument_list|(
name|jcrName
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Set
argument_list|<
name|Restriction
argument_list|>
name|validateRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|effectiveOakPath
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|getRestrictionProvider
argument_list|()
operator|.
name|getSupportedRestrictions
argument_list|(
name|getOakPath
argument_list|()
argument_list|)
control|)
block|{
name|String
name|jcrName
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isMandatory
argument_list|()
condition|)
block|{
name|boolean
name|containsMandatory
init|=
operator|(
name|def
operator|.
name|getRequiredType
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|?
name|mvRestrictions
operator|.
name|containsKey
argument_list|(
name|jcrName
argument_list|)
else|:
name|restrictions
operator|.
name|containsKey
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containsMandatory
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Mandatory restriction "
operator|+
name|jcrName
operator|+
literal|" is missing."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|computeRestrictions
argument_list|(
name|effectiveOakPath
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Set
argument_list|<
name|Restriction
argument_list|>
name|computeRestrictions
parameter_list|(
annotation|@
name|Nullable
name|String
name|effectiveOakPath
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|Restriction
argument_list|>
name|rs
decl_stmt|;
if|if
condition|(
name|restrictions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mvRestrictions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rs
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RestrictionProvider
name|rp
init|=
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|rs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|entry
range|:
name|restrictions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|rp
operator|.
name|createRestriction
argument_list|(
name|effectiveOakPath
argument_list|,
name|getOakName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|entry
range|:
name|mvRestrictions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|rp
operator|.
name|createRestriction
argument_list|(
name|effectiveOakPath
argument_list|,
name|getOakName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rs
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|extractPathFromRestrictions
parameter_list|(
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|NotNull
name|String
name|jcrName
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|restrictions
operator|==
literal|null
operator|||
operator|!
name|restrictions
operator|.
name|containsKey
argument_list|(
name|jcrName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Entries in principal based access control need to have a path specified. Add rep:nodePath restriction or use PrincipalPolicy.addEntry(String, Privilege[], Map, Map) instead."
argument_list|)
throw|;
block|}
comment|// retrieve path from restrictions and filter that restriction entry for further processing
return|return
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|restrictions
operator|.
name|get
argument_list|(
name|jcrName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|PrivilegeBits
name|validatePrivileges
parameter_list|(
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|privileges
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Privileges may not be an empty array"
argument_list|)
throw|;
block|}
for|for
control|(
name|Privilege
name|p
range|:
name|privileges
control|)
block|{
name|Privilege
name|pv
init|=
name|privilegeManager
operator|.
name|getPrivilege
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pv
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Privilege "
operator|+
name|p
operator|+
literal|" is abstract."
argument_list|)
throw|;
block|}
block|}
return|return
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|privileges
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|EntryImpl
name|validateEntry
parameter_list|(
annotation|@
name|Nullable
name|AccessControlEntry
name|entry
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|entry
operator|instanceof
name|EntryImpl
condition|)
block|{
return|return
operator|(
name|EntryImpl
operator|)
name|entry
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid AccessControlEntry "
operator|+
name|entry
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|addEntry
parameter_list|(
annotation|@
name|NotNull
name|EntryImpl
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|//--------------------------------------------------------------< Entry>---
specifier|final
class|class
name|EntryImpl
extends|extends
name|ACE
implements|implements
name|Entry
block|{
specifier|private
specifier|final
name|String
name|oakPath
decl_stmt|;
specifier|private
name|int
name|hashCode
decl_stmt|;
specifier|private
name|EntryImpl
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|PrivilegeBits
name|privilegeBits
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|super
argument_list|(
name|principal
argument_list|,
name|privilegeBits
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|oakPath
operator|=
name|oakPath
expr_stmt|;
block|}
annotation|@
name|Nullable
name|String
name|getOakPath
parameter_list|()
block|{
return|return
name|oakPath
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|String
name|getEffectivePath
parameter_list|()
block|{
return|return
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|oakPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|privilegeBitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|privilegesFromOakNames
argument_list|(
name|names
argument_list|,
name|privilegeManager
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hashCode
operator|==
literal|0
condition|)
block|{
name|hashCode
operator|=
name|Objects
operator|.
name|hashCode
argument_list|(
name|oakPath
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|getPrivilegeBits
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|getRestrictions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|EntryImpl
condition|)
block|{
name|EntryImpl
name|other
init|=
operator|(
name|EntryImpl
operator|)
name|obj
decl_stmt|;
return|return
name|equivalentPath
argument_list|(
name|other
operator|.
name|oakPath
argument_list|)
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|equivalentPath
parameter_list|(
annotation|@
name|Nullable
name|String
name|otherPath
parameter_list|)
block|{
return|return
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
name|otherPath
operator|==
literal|null
else|:
name|oakPath
operator|.
name|equals
argument_list|(
name|otherPath
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

