begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_comment
comment|/**  * The base class for all abstract syntax tree nodes.  */
end_comment

begin_class
specifier|abstract
class|class
name|AstElement
block|{
specifier|protected
name|QueryImpl
name|query
decl_stmt|;
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
function_decl|;
specifier|protected
name|String
name|protect
parameter_list|(
name|Object
name|expression
parameter_list|)
block|{
name|String
name|str
init|=
name|expression
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|'('
operator|+
name|str
operator|+
literal|')'
return|;
block|}
else|else
block|{
return|return
name|str
return|;
block|}
block|}
specifier|protected
name|String
name|quote
parameter_list|(
name|String
name|pathOrName
parameter_list|)
block|{
name|pathOrName
operator|=
name|pathOrName
operator|.
name|replaceAll
argument_list|(
literal|"]"
argument_list|,
literal|"]]"
argument_list|)
expr_stmt|;
return|return
literal|'['
operator|+
name|pathOrName
operator|+
literal|']'
return|;
block|}
specifier|protected
name|String
name|quoteJson
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|'"'
operator|+
name|string
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"\"\""
argument_list|)
operator|+
literal|'"'
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|QueryImpl
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/**      * Normalize the property name (including namespace remapping).      * Asterisks are kept.      *      * @param propertyName the property name to normalize      * @return the normalized (oak-) property name      */
specifier|protected
name|String
name|normalizePropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
comment|// TODO normalize the path (remove superfluous ".." and "."
comment|// where possible)
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|propertyName
return|;
block|}
if|if
condition|(
name|propertyName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|slash
init|=
name|propertyName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|<
literal|0
condition|)
block|{
return|return
name|normalizeNonRelativePropertyName
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|// relative properties
name|String
name|relativePath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relativePath
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|p
operator|=
name|query
operator|.
name|getOakPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|relativePath
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|relativePath
operator|=
name|query
operator|.
name|getOakPath
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
block|}
name|propertyName
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|propertyName
operator|=
name|normalizeNonRelativePropertyName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|relativePath
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
specifier|private
name|String
name|normalizeNonRelativePropertyName
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
name|propertyName
return|;
block|}
return|return
name|query
operator|.
name|getOakPath
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|/**      * Validate and normalize the path.      *      * @param path the path to validate      * @return the validated and normalized path      */
specifier|protected
name|String
name|normalizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// TODO normalize the path (remove superfluous ".." and "."
comment|// where possible)
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
name|query
operator|.
name|getOakPath
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|protected
name|PropertyValue
name|convertValueToType
parameter_list|(
name|PropertyValue
name|v
parameter_list|,
name|PropertyValue
name|targetType
parameter_list|)
block|{
if|if
condition|(
name|targetType
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|v
return|;
block|}
name|int
name|type
init|=
name|targetType
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|type
condition|)
block|{
return|return
name|v
return|;
block|}
try|try
block|{
return|return
name|PropertyValues
operator|.
name|convert
argument_list|(
name|v
argument_list|,
name|type
argument_list|,
name|query
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// not possible to convert
return|return
name|v
return|;
block|}
block|}
comment|/**      * Calculate the session local path (the path excluding the workspace name)      * if possible.      *      * @param path the absolute path      * @return the session local path, or null if not within this workspace      */
specifier|protected
name|String
name|getLocalPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

