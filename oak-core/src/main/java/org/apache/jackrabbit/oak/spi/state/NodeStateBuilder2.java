begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|CoreValueMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * TODO: this is very raw POC implementation only. WIP  *  * Builder for node states based on decorating base node states.  * Since each decorator is only concerned with a single change, the  * chain of all decorators also resembles a list of all the changes  * done to the ultimate base node state. This allows for reconstruction  * of the operations (i.e. into a JSON diff). Since the order of the  * operations is preserved, it should also be possible to generate move  * operations from delete followed by add operation (not currently  * implemented).  * Also note, that JSON diff does not have a operation for setNode.  * These are currently modelled by remove followed by add. The generated  * change log may thus be overly long. A subsequent consolidation phase  * on the change log will however greatly reduce the size of such change  * logs.  *  * Distinguishing feature of this approach:  *  *   * All changes are kept local within each node.  *   * Each node can queried for its change log.  *   * Moves into/out of a subtree will result in add/remove node operations  *   * Moves within a subtree result in move operations  *   * Cannot cope detect copy operations. This is not a problem though  *     since these do not occur transiently.  *  * TODO: improve the way setNode created JSON diff (i.e. by consolidation)  * TODO: detect remove immediately followed by add and replace with move  */
end_comment

begin_class
specifier|public
class|class
name|NodeStateBuilder2
block|{
specifier|private
name|NodeStateBuilder2
parameter_list|()
block|{}
specifier|static
name|NodeState
name|setNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|child
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SetNodeDecorator
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|child
argument_list|)
return|;
block|}
specifier|static
name|NodeState
name|addNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|child
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
operator|new
name|AddNodeDecorator
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|child
argument_list|)
else|:
literal|null
return|;
block|}
specifier|static
name|NodeState
name|addNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
operator|new
name|AddNodeDecorator
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|)
else|:
literal|null
return|;
block|}
specifier|static
name|NodeState
name|removeNode
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RemoveNodeDecorator
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|static
name|NodeState
name|setProperty
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
operator|new
name|AddPropertyDecorator
argument_list|(
name|parent
argument_list|,
name|property
argument_list|)
else|:
operator|new
name|SetPropertyDecorator
argument_list|(
name|parent
argument_list|,
name|property
argument_list|)
return|;
block|}
specifier|static
name|NodeState
name|removeProperty
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|parent
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|RemovePropertyDecorator
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
interface|interface
name|Listener
block|{
name|void
name|node
parameter_list|(
name|NodeState
name|node
parameter_list|)
function_decl|;
name|void
name|addNode
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
name|void
name|removeNode
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
name|void
name|setProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|PropertyState
name|propertyState
parameter_list|)
function_decl|;
name|void
name|setNode
parameter_list|(
name|String
name|concat
parameter_list|)
function_decl|;
block|}
specifier|static
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|node
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|NodeDecorator
condition|)
block|{
operator|(
operator|(
name|NodeDecorator
operator|)
name|node
operator|)
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|node
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|NodeDecorator
extends|extends
name|AbstractNodeState
block|{
specifier|final
name|NodeState
name|decorate
decl_stmt|;
specifier|protected
name|NodeDecorator
parameter_list|(
name|NodeState
name|decorate
parameter_list|)
block|{
name|this
operator|.
name|decorate
operator|=
name|decorate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|decorate
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|decorate
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|decorate
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|decorate
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|decorate
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
name|decorate
operator|.
name|getChildNodeEntries
argument_list|()
return|;
block|}
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|NodeStateBuilder2
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|decorate
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator adding a new node state.      */
specifier|static
class|class
name|AddNodeDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|String
name|childName
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|node
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code node} added          * as new child with name {@code childName}.          * @param parent          * @param childName          * @param node          * @return          */
specifier|public
name|AddNodeDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|childName
parameter_list|,
name|NodeState
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|childName
operator|=
name|childName
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|node
else|:
name|super
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
literal|1
operator|+
name|super
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|chain
argument_list|(
name|AddNodeDecorator
operator|.
name|super
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|Iterators
operator|.
name|singleton
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|childName
argument_list|,
name|node
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|addNode
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStateBuilder2
operator|.
name|toJsop
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|,
name|node
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator modifying an existing node state to a new node state.      */
specifier|static
class|class
name|SetNodeDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|String
name|childName
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|node
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with child node state          * {@code childName} replaced with {@code node}.          * @param parent          * @param childName          * @param node          * @return          */
specifier|public
name|SetNodeDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|childName
parameter_list|,
name|NodeState
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|childName
operator|=
name|childName
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|node
else|:
name|super
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|SetNodeDecorator
operator|.
name|super
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|ChildNodeEntry
argument_list|,
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
name|ChildNodeEntry
name|cne
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|childName
argument_list|,
name|node
argument_list|)
else|:
name|cne
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setNode
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStateBuilder2
operator|.
name|toJsop
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|,
name|node
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator removing a node state      */
specifier|static
class|class
name|RemoveNodeDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|String
name|childName
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with child node state          * {@code childName} removed.          * @param parent          * @param childName          * @return          */
specifier|public
name|RemoveNodeDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|childName
operator|=
name|childName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|childName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|super
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getChildNodeCount
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|RemoveNodeDecorator
operator|.
name|super
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ChildNodeEntry
name|cne
parameter_list|)
block|{
return|return
operator|!
name|childName
operator|.
name|equals
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|removeNode
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator adding a new property state      */
specifier|static
class|class
name|AddPropertyDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|PropertyState
name|property
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code property}          * added.          * @param parent          * @param property          * @return          */
specifier|public
name|AddPropertyDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|property
else|:
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getPropertyCount
argument_list|()
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|chain
argument_list|(
name|AddPropertyDecorator
operator|.
name|super
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|Iterators
operator|.
name|singleton
argument_list|(
name|property
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator modifying an existing property state.      */
specifier|static
class|class
name|SetPropertyDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|PropertyState
name|property
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code property}          * replaced.          * @param parent          * @param property          * @return          */
specifier|public
name|SetPropertyDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|property
else|:
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|map
argument_list|(
name|SetPropertyDecorator
operator|.
name|super
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function1
argument_list|<
name|PropertyState
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|apply
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
return|return
name|property
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|property
else|:
name|state
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@code NodeState} decorator removing an existing property state.      */
specifier|static
class|class
name|RemovePropertyDecorator
extends|extends
name|NodeDecorator
block|{
specifier|private
specifier|final
name|String
name|propertyName
decl_stmt|;
comment|/**          * Construct a new {@code NodeState} from {@code parent} with {@code propertyName}          * removed.          * @param parent          * @param propertyName          * @return          */
specifier|public
name|RemovePropertyDecorator
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getPropertyCount
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|RemovePropertyDecorator
operator|.
name|super
operator|.
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyState
name|prop
parameter_list|)
block|{
return|return
operator|!
name|propertyName
operator|.
name|equals
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toJsop
parameter_list|(
name|String
name|path
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|super
operator|.
name|toJsop
argument_list|(
name|path
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setProperty
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toJson
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
else|else
block|{
return|return
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|CoreValueMapper
operator|.
name|toJsonArray
argument_list|(
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|CoreValueMapper
operator|.
name|toJsonValue
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toJson
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
name|StringBuilder
name|json
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buildJson
argument_list|(
name|node
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|buildJson
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|StringBuilder
name|json
parameter_list|)
block|{
name|json
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|String
name|comma
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|json
operator|.
name|append
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|json
operator|.
name|append
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|toJson
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|","
expr_stmt|;
block|}
name|comma
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|node
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|json
operator|.
name|append
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|json
operator|.
name|append
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buildJson
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|","
expr_stmt|;
block|}
name|json
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
name|MemoryNodeState
operator|.
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|NodeState
name|base
init|=
operator|new
name|MemoryNodeState
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|PropertyState
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
comment|//        NodeState r = addNode(base, "copy", removeNode(base, "a"));
comment|//        NodeState r = addNode(base, "copy", removeNode(base, "a"));
comment|//        r = setNode(r, "copy", addNode(base, "c"));
comment|//>a:b/a
name|NodeState
name|a
init|=
name|base
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeState
name|b
init|=
name|base
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|NodeState
name|r
init|=
name|removeNode
argument_list|(
name|base
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|r
operator|=
name|setNode
argument_list|(
name|r
argument_list|,
literal|"b"
argument_list|,
name|addNode
argument_list|(
name|b
argument_list|,
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|//>b:c
comment|//        NodeState b = base.getChildNode("b");
comment|//        NodeState r = removeNode(base, "b");
comment|//        r = addNode(r, "c", b);
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|toJsop
argument_list|(
literal|"/"
argument_list|,
name|r
argument_list|,
operator|new
name|Listener
argument_list|()
block|{
name|boolean
name|include
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|node
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
if|if
condition|(
name|include
condition|)
block|{
comment|// first call is always base
name|sb
operator|.
name|append
argument_list|(
name|toJson
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|include
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|PropertyState
name|propertyState
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"^\""
argument_list|)
operator|.
name|append
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|toJson
argument_list|(
name|propertyState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"+\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

