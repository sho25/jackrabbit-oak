begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Permission Evaluation)  * =============================================================================  *  * Title: PermissionDiscoveryTest  * -----------------------------------------------------------------------------  *  * Goal:  * Become familiar with the permission discovery as provided by {@link javax.jcr.Session}.  *  * Exercises:  *  * - Overview  *   Look at {@link javax.jcr.Session} and list the action constants that may  *   be used to test permissions of the editing session.  *   Compare this list with the built-in privileges defined in {@link javax.jcr.security.Privilege}  *   and explain the discrepancy.  *  *   Question: Can you find out with the predefined actions if you can lock an existing node?  *   Question: Can you find out with the predefined actions if you can register a new namespace?  *  * - {@link #testReadAccess()}  *   While there exists {@link javax.jcr.Session#ACTION_READ}, you can equally  *   use the direct methods to test for existance of a given item.  *   Use the test-case to learn about the difference and when using  *   {@link Session#hasPermission(String, String)} could actually make sense.  *  * - {@link #testModifyPermissions()}  *   Test illustrating the usage of {@link Session#ACTION_SET_PROPERTY}. Fill  *   in the expected values and explain why.  *  *   Question: How is {@link Session#ACTION_SET_PROPERTY} mapped to the internal permissions?  *   Question: Can make a table illustrating the effect of the individual permissions  *             (granted/denied) on the result depending on whether the item exists or not?  *  * - {@link #testRemovePermissions()}  *   Test illustrating the usage of {@link Session#ACTION_REMOVE}. Fill  *   in the expected values and explain why.  *  *   Question: How is {@link Session#ACTION_REMOVE} mapped to the internal permissions?  *   Question: Can make a table illustrating the effect of the individual permissions  *             (granted/denied) on the result depending on whether the item exists or not?  *   Question: Discuss what is special about the removal of nodes when  *             comparing the action, the privileges and the internal permissions  *  * - {@link #testAddPermissions()}  *   Test illustrating the usage of {@link Session#ACTION_ADD_NODE} and {@link Session#ACTION_SET_PROPERTY}  *   if used to create a new non-existing property. Fill in the expected values and explain why.  *  *   Question: How is {@link Session#ACTION_ADD_NODE} mapped to the internal permissions?  *   Question: Can make a table illustrating the effect of the individual permissions  *             (granted/denied) on the result depending on whether the item exists or not?  *   Question: Discuss what is special about the creation of new nodes when  *             comparing the action, the privileges and the internal permissions  *  * - {@link #testOakPermissions()}  *   The default permission implementation in Oak also allows for passing  *   string representation of the permission constants as 'actions'.  *   Adjust the test such that it passes.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - Session.checkPermission  *   Apart from {@link javax.jcr.Session#hasPermission(String, String)} there also  *   exists {@link javax.jcr.Session#checkPermission(String, String)}.  *  *   Question: Can you explain why it is generally recommended to use the non-throwing variant?  *  * - Explict vs. Builtin Permission Test  *  *   Question: Discuss why it is generally preferrable to leave the permission  *             evaluation to the repository instead of doing this manually in the application?  *   Question: Can you identify use-cases where this is nevertheless required?  *             How could they be avoided?  *  *</pre>  *  * @see javax.jcr.Session#hasPermission(String, String)  * @see javax.jcr.Session#checkPermission(String, String)  */
end_comment

begin_class
specifier|public
class|class
name|L2_PermissionDiscoveryTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|String
name|propertyPath
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Property
name|p
init|=
name|testRootNode
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
name|propertyPath
operator|=
name|p
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Node
name|child
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|User
name|testUser
init|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
decl_stmt|;
name|testPrincipal
operator|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs2
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
operator|||
operator|!
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|childPath
argument_list|,
name|testPrincipal
argument_list|,
name|privs2
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testUser
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Boolean
index|[]
name|existsAndHasPermission
parameter_list|(
name|Boolean
name|expectedExists
parameter_list|,
name|Boolean
name|expectedHasPermission
parameter_list|)
block|{
return|return
operator|new
name|Boolean
index|[]
block|{
name|expectedExists
block|,
name|expectedHasPermission
block|}
return|;
block|}
specifier|public
name|void
name|testReadAccess
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
index|[]
argument_list|>
name|nodeTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|testRoot
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|childPath
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodePath
range|:
name|nodeTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Boolean
index|[]
name|expected
init|=
name|nodeTests
operator|.
name|get
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
literal|0
index|]
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|nodePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
literal|1
index|]
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|nodePath
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
index|[]
argument_list|>
name|propertyTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/jcr:primaryType"
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|propertyPath
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
name|existsAndHasPermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|propertyTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Boolean
index|[]
name|expected
init|=
name|propertyTests
operator|.
name|get
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
literal|0
index|]
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|nodeExists
argument_list|(
name|pPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
literal|1
index|]
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|pPath
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testModifyPermissions
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|modifyPropertyTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/jcr:primaryType"
argument_list|,
literal|null
argument_list|,
name|testRoot
argument_list|,
literal|null
argument_list|,
name|propertyPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|modifyPropertyTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|canModifyProperty
init|=
name|modifyPropertyTests
operator|.
name|get
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canModifyProperty
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|pPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRemovePermissions
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|removePropertyTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/jcr:primaryType"
argument_list|,
literal|null
argument_list|,
name|propertyPath
argument_list|,
literal|null
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|removePropertyTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|canRemoveProperty
init|=
name|removePropertyTests
operator|.
name|get
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canRemoveProperty
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|pPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|removeNodesTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|,
name|testRoot
argument_list|,
literal|null
argument_list|,
name|childPath
argument_list|,
literal|null
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodePath
range|:
name|removeNodesTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|canRemoveNode
init|=
name|removeNodesTests
operator|.
name|get
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canRemoveNode
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|nodePath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXERCISE : change the permission setup such that the following tests succeed.
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|childPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE : change the permission setup such that the following tests succeed.
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getProperty
argument_list|(
name|propertyPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testAddPermissions
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|addPropertyTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/propertyName1"
argument_list|,
literal|null
argument_list|,
name|testRoot
argument_list|,
literal|null
argument_list|,
name|propertyPath
argument_list|,
literal|null
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pPath
range|:
name|addPropertyTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|canAddProperty
init|=
name|addPropertyTests
operator|.
name|get
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canAddProperty
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|pPath
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXERCISE: fill in the expected values
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|addNodesTests
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"/childNode"
argument_list|,
literal|null
argument_list|,
name|testRoot
argument_list|,
literal|null
argument_list|,
name|testRoot
operator|+
literal|"/new"
argument_list|,
literal|null
argument_list|,
name|childPath
argument_list|,
literal|null
argument_list|,
name|childPath
operator|+
literal|"/new"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childPath
range|:
name|addNodesTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|canAddNode
init|=
name|addNodesTests
operator|.
name|get
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canAddNode
argument_list|,
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childPath
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXERCISE : change the permission setup such that the following tests succeed.
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|testRoot
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testOakPermissions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|modifyPropertyPermissions
init|=
literal|null
decl_stmt|;
comment|// EXERCISE:
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|modifyPropertyPermissions
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE : modify the permission setup such that the following tests pass
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|modifyPropertyPermissions
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|propertyPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|REMOVE_PROPERTY
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|addItemPermissions
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childPath
argument_list|,
name|addItemPermissions
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|permissions
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childPath
argument_list|,
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE : modify the permission setup such that the following tests pass
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|testRoot
argument_list|,
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childPath
argument_list|,
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|cNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|cNode
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|cNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|cNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

