begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Simple abstraction of the version storage.  */
end_comment

begin_class
specifier|public
class|class
name|VersionStorage
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_STORAGE_PATH
init|=
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_SYSTEM
operator|+
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|public
name|VersionStorage
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|versionStorageRoot
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|versionStorageRoot
expr_stmt|;
block|}
name|Root
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
comment|/**      * The version storage tree. I.e. the tree at path      *<code>/jcr:system/jcr:versionStorage</code>, though the returned      * tree instance may not necessarily return this path on      * {@link Tree#getPath()}!      *      * @return the version storage tree.      */
name|Tree
name|getTree
parameter_list|()
block|{
return|return
name|getVersionStorageTree
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/**      * Reverts all changes made to the version storage tree.      */
name|void
name|refresh
parameter_list|()
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the version storage tree for the given workspace.      * @param workspaceRoot the root of the workspace.      * @return the version storage tree.      */
specifier|private
specifier|static
name|Tree
name|getVersionStorageTree
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|workspaceRoot
parameter_list|)
block|{
comment|// TODO: this assumes the version store is in the same workspace.
return|return
name|checkNotNull
argument_list|(
name|workspaceRoot
argument_list|)
operator|.
name|getTree
argument_list|(
name|VERSION_STORAGE_PATH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

