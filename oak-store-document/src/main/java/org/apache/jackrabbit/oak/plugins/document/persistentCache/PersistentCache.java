begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
operator|.
name|DynamicBroadcastConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|async
operator|.
name|CacheActionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
operator|.
name|Broadcaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
operator|.
name|InMemoryBroadcaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
operator|.
name|TCPBroadcaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|broadcast
operator|.
name|UDPBroadcaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVStoreTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|WriteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_comment
comment|/**  * A persistent cache for the document store.  */
end_comment

begin_class
specifier|public
class|class
name|PersistentCache
implements|implements
name|Broadcaster
operator|.
name|Listener
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PersistentCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PREFIX
init|=
literal|"cache-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SUFFIX
init|=
literal|".data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|cacheNodes
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|cacheChildren
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|cacheDiff
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|cacheLocalDiff
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|cachePrevDocs
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|compactOnClose
decl_stmt|;
specifier|private
name|boolean
name|compress
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|asyncCache
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|asyncDiffCache
init|=
literal|false
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|CacheType
argument_list|,
name|GenerationCache
argument_list|>
name|caches
init|=
operator|new
name|HashMap
argument_list|<
name|CacheType
argument_list|,
name|GenerationCache
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|directory
decl_stmt|;
specifier|private
name|MapFactory
name|writeStore
decl_stmt|;
specifier|private
name|MapFactory
name|readStore
decl_stmt|;
specifier|private
name|int
name|maxSizeMB
init|=
literal|1024
decl_stmt|;
specifier|private
name|int
name|memCache
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|readGeneration
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|writeGeneration
decl_stmt|;
specifier|private
name|int
name|autoCompact
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|appendOnly
decl_stmt|;
specifier|private
name|boolean
name|manualCommit
decl_stmt|;
specifier|private
name|Broadcaster
name|broadcaster
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|WriteBuffer
argument_list|>
name|writeBuffer
init|=
operator|new
name|ThreadLocal
argument_list|<
name|WriteBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|broadcastId
decl_stmt|;
specifier|private
name|DynamicBroadcastConfig
name|broadcastConfig
decl_stmt|;
specifier|private
name|CacheActionDispatcher
name|writeDispatcher
decl_stmt|;
specifier|private
name|Thread
name|writeDispatcherThread
decl_stmt|;
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
decl_stmt|;
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|bb
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|broadcastId
operator|=
name|bb
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|exceptionCount
decl_stmt|;
specifier|public
name|PersistentCache
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"start, url={}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|url
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|dir
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|broadcast
init|=
literal|"disabled"
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|parts
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"+docs"
argument_list|)
condition|)
block|{
name|logUnsupportedWarning
argument_list|(
literal|"docs"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-prevDocs"
argument_list|)
condition|)
block|{
name|cachePrevDocs
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"+docChildren"
argument_list|)
condition|)
block|{
name|logUnsupportedWarning
argument_list|(
literal|"docChildren"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-nodes"
argument_list|)
condition|)
block|{
name|cacheNodes
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-children"
argument_list|)
condition|)
block|{
name|cacheChildren
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-diff"
argument_list|)
condition|)
block|{
name|cacheDiff
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-localDiff"
argument_list|)
condition|)
block|{
name|cacheLocalDiff
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"+all"
argument_list|)
condition|)
block|{
name|logUnsupportedWarning
argument_list|(
literal|"all"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-compact"
argument_list|)
condition|)
block|{
name|compactOnClose
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"+compact"
argument_list|)
condition|)
block|{
name|compactOnClose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-compress"
argument_list|)
condition|)
block|{
name|compress
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|endsWith
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
name|dir
operator|+=
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"-"
operator|+
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"size="
argument_list|)
condition|)
block|{
name|maxSizeMB
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"memCache="
argument_list|)
condition|)
block|{
name|memCache
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"binary="
argument_list|)
condition|)
block|{
name|logUnsupportedWarning
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"autoCompact="
argument_list|)
condition|)
block|{
name|autoCompact
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"appendOnly"
argument_list|)
condition|)
block|{
name|appendOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"manualCommit"
argument_list|)
condition|)
block|{
name|manualCommit
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"broadcast="
argument_list|)
condition|)
block|{
name|broadcast
operator|=
name|p
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"-async"
argument_list|)
condition|)
block|{
name|asyncCache
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"+asyncDiff"
argument_list|)
condition|)
block|{
name|asyncDiffCache
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|directory
operator|=
name|dir
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|readGeneration
operator|=
operator|-
literal|1
expr_stmt|;
name|writeGeneration
operator|=
literal|0
expr_stmt|;
name|writeStore
operator|=
name|createMapFactory
argument_list|(
name|writeGeneration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|dr
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dr
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dr
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dr
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dr
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A file exists at cache directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
index|[]
name|list
init|=
name|dr
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|generations
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|list
control|)
block|{
name|String
name|fn
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fn
operator|.
name|startsWith
argument_list|(
name|FILE_PREFIX
argument_list|)
operator|&&
name|fn
operator|.
name|endsWith
argument_list|(
name|FILE_SUFFIX
argument_list|)
condition|)
block|{
name|String
name|g
init|=
name|fn
operator|.
name|substring
argument_list|(
name|FILE_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|fn
operator|.
name|indexOf
argument_list|(
name|FILE_SUFFIX
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|gen
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|gen
operator|>=
literal|0
condition|)
block|{
name|File
name|f2
init|=
operator|new
name|File
argument_list|(
name|getFileName
argument_list|(
name|gen
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|.
name|equals
argument_list|(
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// ignore things like "cache-000.data"
name|generations
operator|.
name|add
argument_list|(
name|gen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore this file
block|}
block|}
block|}
block|}
while|while
condition|(
name|generations
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|Integer
name|oldest
init|=
name|generations
operator|.
name|first
argument_list|()
decl_stmt|;
name|File
name|oldFile
init|=
operator|new
name|File
argument_list|(
name|getFileName
argument_list|(
name|oldest
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldFile
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring old, read-only generation "
operator|+
name|oldFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing old generation "
operator|+
name|oldFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|oldFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|generations
operator|.
name|remove
argument_list|(
name|oldest
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|readGeneration
operator|=
name|generations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|generations
operator|.
name|first
argument_list|()
else|:
operator|-
literal|1
expr_stmt|;
name|writeGeneration
operator|=
name|generations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|generations
operator|.
name|last
argument_list|()
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|readGeneration
operator|>=
literal|0
condition|)
block|{
name|readStore
operator|=
name|createMapFactory
argument_list|(
name|readGeneration
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|writeStore
operator|=
name|createMapFactory
argument_list|(
name|writeGeneration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initBroadcast
argument_list|(
name|broadcast
argument_list|)
expr_stmt|;
name|writeDispatcher
operator|=
operator|new
name|CacheActionDispatcher
argument_list|()
expr_stmt|;
name|writeDispatcherThread
operator|=
operator|new
name|Thread
argument_list|(
name|writeDispatcher
argument_list|,
literal|"Oak CacheWriteQueue"
argument_list|)
expr_stmt|;
name|writeDispatcherThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeDispatcherThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|// OAK-8052: cleanup stores in case of failure
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during PersistentCache instantiation for {}."
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|logUnsupportedWarning
parameter_list|(
name|String
name|configKey
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Support for '{}' has been removed from persistent cache. "
operator|+
literal|"Please update the configuration."
argument_list|,
name|configKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initBroadcast
parameter_list|(
name|String
name|broadcast
parameter_list|)
block|{
if|if
condition|(
name|broadcast
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|broadcast
operator|.
name|equals
argument_list|(
literal|"disabled"
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|broadcast
operator|.
name|equals
argument_list|(
literal|"inMemory"
argument_list|)
condition|)
block|{
name|broadcaster
operator|=
name|InMemoryBroadcaster
operator|.
name|INSTANCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|broadcast
operator|.
name|startsWith
argument_list|(
literal|"udp:"
argument_list|)
condition|)
block|{
name|String
name|config
init|=
name|broadcast
operator|.
name|substring
argument_list|(
literal|"udp:"
operator|.
name|length
argument_list|()
argument_list|,
name|broadcast
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|broadcaster
operator|=
operator|new
name|UDPBroadcaster
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|broadcast
operator|.
name|startsWith
argument_list|(
literal|"tcp:"
argument_list|)
condition|)
block|{
name|String
name|config
init|=
name|broadcast
operator|.
name|substring
argument_list|(
literal|"tcp:"
operator|.
name|length
argument_list|()
argument_list|,
name|broadcast
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|broadcaster
operator|=
operator|new
name|TCPBroadcaster
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown broadcaster type "
operator|+
name|broadcast
argument_list|)
throw|;
block|}
name|broadcaster
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getFileName
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|directory
operator|+
literal|"/"
operator|+
name|FILE_PREFIX
operator|+
name|generation
operator|+
name|FILE_SUFFIX
return|;
block|}
specifier|private
name|MapFactory
name|createMapFactory
parameter_list|(
specifier|final
name|int
name|generation
parameter_list|,
specifier|final
name|boolean
name|readOnly
parameter_list|)
block|{
name|MapFactory
name|f
init|=
operator|new
name|MapFactory
argument_list|()
block|{
specifier|final
name|String
name|fileName
init|=
name|getFileName
argument_list|(
name|generation
argument_list|)
decl_stmt|;
name|MVStore
name|store
decl_stmt|;
annotation|@
name|Override
name|void
name|openStore
parameter_list|()
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|MVStore
operator|.
name|Builder
name|builder
init|=
operator|new
name|MVStore
operator|.
name|Builder
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|compress
condition|)
block|{
name|builder
operator|.
name|compress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|manualCommit
condition|)
block|{
name|builder
operator|.
name|autoCommitDisabled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|fileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|memCache
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|cacheSize
argument_list|(
name|memCache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readOnly
condition|)
block|{
name|builder
operator|.
name|readOnly
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxSizeMB
operator|<
literal|10
condition|)
block|{
name|builder
operator|.
name|cacheSize
argument_list|(
name|maxSizeMB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoCompact
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|autoCompactFillRate
argument_list|(
name|autoCompact
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|backgroundExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error in the background thread of the persistent cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in the background thread of the persistent cache: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|store
operator|=
name|builder
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|appendOnly
condition|)
block|{
name|store
operator|.
name|setReuseSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open the store "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|synchronized
name|void
name|closeStore
parameter_list|()
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|compact
init|=
name|compactOnClose
decl_stmt|;
try|try
block|{
if|if
condition|(
name|store
operator|.
name|getFileStore
argument_list|()
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|compact
operator|=
literal|false
expr_stmt|;
block|}
comment|// clear the interrupted flag, if set
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not close the store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not close the store: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|store
operator|.
name|closeImmediately
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compact
condition|)
block|{
try|try
block|{
name|MVStoreTool
operator|.
name|compact
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not compact the store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not compact the store: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|store
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|openMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
return|return
name|store
operator|.
name|openMap
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|store
operator|.
name|openMap
argument_list|(
name|name
argument_list|,
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not open the map"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
name|long
name|getFileSize
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|FileStore
name|fs
init|=
name|store
operator|.
name|getFileStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|fs
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not retrieve the map size"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
decl_stmt|;
name|f
operator|.
name|openStore
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|writeDispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|writeDispatcherThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't join the {}"
argument_list|,
name|writeDispatcherThread
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeStore
operator|!=
literal|null
condition|)
block|{
name|writeStore
operator|.
name|closeStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|readStore
operator|!=
literal|null
condition|)
block|{
name|readStore
operator|.
name|closeStore
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|broadcaster
operator|!=
literal|null
condition|)
block|{
name|broadcaster
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|broadcaster
operator|.
name|close
argument_list|()
expr_stmt|;
name|broadcaster
operator|=
literal|null
expr_stmt|;
block|}
name|writeBuffer
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|wrap
parameter_list|(
name|DocumentNodeStore
name|docNodeStore
parameter_list|,
name|DocumentStore
name|docStore
parameter_list|,
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|base
parameter_list|,
name|CacheType
name|type
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|docNodeStore
argument_list|,
name|docStore
argument_list|,
name|base
argument_list|,
name|type
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|wrap
parameter_list|(
name|DocumentNodeStore
name|docNodeStore
parameter_list|,
name|DocumentStore
name|docStore
parameter_list|,
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|base
parameter_list|,
name|CacheType
name|type
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|boolean
name|wrap
decl_stmt|;
name|boolean
name|async
init|=
name|asyncCache
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NODE
case|:
name|wrap
operator|=
name|cacheNodes
expr_stmt|;
break|break;
case|case
name|CHILDREN
case|:
name|wrap
operator|=
name|cacheChildren
expr_stmt|;
break|break;
case|case
name|DIFF
case|:
name|wrap
operator|=
name|cacheDiff
expr_stmt|;
name|async
operator|=
name|asyncDiffCache
expr_stmt|;
break|break;
case|case
name|LOCAL_DIFF
case|:
name|wrap
operator|=
name|cacheLocalDiff
expr_stmt|;
name|async
operator|=
name|asyncDiffCache
expr_stmt|;
break|break;
case|case
name|PREV_DOCUMENT
case|:
name|wrap
operator|=
name|cachePrevDocs
expr_stmt|;
break|break;
default|default:
name|wrap
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|NodeCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|c
init|=
operator|new
name|NodeCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|docNodeStore
argument_list|,
name|docStore
argument_list|,
name|type
argument_list|,
name|writeDispatcher
argument_list|,
name|statisticsProvider
argument_list|,
name|async
argument_list|)
decl_stmt|;
name|initGenerationCache
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
return|return
name|base
return|;
block|}
specifier|private
name|void
name|initGenerationCache
parameter_list|(
name|GenerationCache
name|c
parameter_list|)
block|{
name|caches
operator|.
name|put
argument_list|(
name|c
operator|.
name|getType
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|readGeneration
operator|>=
literal|0
condition|)
block|{
name|c
operator|.
name|addGeneration
argument_list|(
name|readGeneration
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|addGeneration
argument_list|(
name|writeGeneration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|openMap
parameter_list|(
name|int
name|generation
parameter_list|,
name|String
name|name
parameter_list|,
name|MVMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|builder
parameter_list|)
block|{
name|MapFactory
name|s
decl_stmt|;
if|if
condition|(
name|generation
operator|==
name|readGeneration
condition|)
block|{
name|s
operator|=
name|readStore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|generation
operator|==
name|writeGeneration
condition|)
block|{
name|s
operator|=
name|writeStore
expr_stmt|;
block|}
else|else
block|{
name|exceptionCount
operator|++
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown generation: "
operator|+
name|generation
argument_list|)
throw|;
block|}
return|return
operator|new
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|s
argument_list|,
name|name
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
name|void
name|switchGenerationIfNeeded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|needSwitch
argument_list|()
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// maybe another thread already switched,
comment|// so we need to check again
if|if
condition|(
operator|!
name|needSwitch
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|oldReadGeneration
init|=
name|readGeneration
decl_stmt|;
name|MapFactory
name|oldRead
init|=
name|readStore
decl_stmt|;
name|readStore
operator|=
name|writeStore
expr_stmt|;
name|readGeneration
operator|=
name|writeGeneration
expr_stmt|;
name|MapFactory
name|w
init|=
name|createMapFactory
argument_list|(
name|writeGeneration
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|writeStore
operator|=
name|w
expr_stmt|;
name|writeGeneration
operator|++
expr_stmt|;
for|for
control|(
name|GenerationCache
name|c
range|:
name|caches
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|addGeneration
argument_list|(
name|writeGeneration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldReadGeneration
operator|>=
literal|0
condition|)
block|{
name|c
operator|.
name|removeGeneration
argument_list|(
name|oldReadGeneration
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldRead
operator|!=
literal|null
condition|)
block|{
name|oldRead
operator|.
name|closeStore
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|getFileName
argument_list|(
name|oldReadGeneration
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|needSwitch
parameter_list|()
block|{
name|long
name|size
init|=
name|writeStore
operator|.
name|getFileSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|/
literal|1024
operator|/
literal|1024
operator|<=
name|maxSizeMB
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSizeMB
return|;
block|}
specifier|public
name|int
name|getOpenCount
parameter_list|()
block|{
return|return
name|writeStore
operator|.
name|getOpenCount
argument_list|()
return|;
block|}
specifier|public
name|int
name|getExceptionCount
parameter_list|()
block|{
return|return
name|exceptionCount
return|;
block|}
name|void
name|broadcast
parameter_list|(
name|CacheType
name|type
parameter_list|,
name|Function
argument_list|<
name|WriteBuffer
argument_list|,
name|Void
argument_list|>
name|writer
parameter_list|)
block|{
name|Broadcaster
name|b
init|=
name|broadcaster
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|WriteBuffer
name|buff
init|=
name|writeBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|buff
operator|==
literal|null
condition|)
block|{
name|buff
operator|=
operator|new
name|WriteBuffer
argument_list|()
expr_stmt|;
name|writeBuffer
operator|.
name|set
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// space for the length
name|buff
operator|.
name|putInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|put
argument_list|(
name|broadcastId
argument_list|)
expr_stmt|;
name|buff
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|apply
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|ByteBuffer
name|byteBuff
init|=
name|buff
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|byteBuff
operator|.
name|position
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Buffer
operator|)
name|byteBuff
operator|)
operator|.
name|limit
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// write length
name|byteBuff
operator|.
name|putInt
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Buffer
operator|)
name|byteBuff
operator|)
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|b
operator|.
name|send
argument_list|(
name|byteBuff
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|receive
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|int
name|end
init|=
name|buff
operator|.
name|position
argument_list|()
operator|+
name|buff
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|broadcastId
operator|.
name|length
index|]
decl_stmt|;
name|buff
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|broadcastId
argument_list|)
condition|)
block|{
comment|// process only messages from other senders
name|receiveMessage
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Buffer
operator|)
name|buff
operator|)
operator|.
name|position
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|PersistentCacheStats
name|getPersistentCacheStats
parameter_list|(
name|Cache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|cache
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|instanceof
name|NodeCache
condition|)
block|{
return|return
operator|(
operator|(
name|NodeCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cache
operator|)
operator|.
name|getPersistentCacheStats
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|receiveMessage
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
block|{
name|CacheType
name|type
init|=
name|CacheType
operator|.
name|VALUES
index|[
name|buff
operator|.
name|get
argument_list|()
index|]
decl_stmt|;
name|GenerationCache
name|cache
init|=
name|caches
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|cache
operator|.
name|receive
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DynamicBroadcastConfig
name|getBroadcastConfig
parameter_list|()
block|{
return|return
name|broadcastConfig
return|;
block|}
specifier|public
name|void
name|setBroadcastConfig
parameter_list|(
name|DynamicBroadcastConfig
name|broadcastConfig
parameter_list|)
block|{
name|this
operator|.
name|broadcastConfig
operator|=
name|broadcastConfig
expr_stmt|;
if|if
condition|(
name|broadcaster
operator|!=
literal|null
condition|)
block|{
name|broadcaster
operator|.
name|setBroadcastConfig
argument_list|(
name|broadcastConfig
argument_list|)
expr_stmt|;
block|}
block|}
interface|interface
name|GenerationCache
block|{
name|void
name|addGeneration
parameter_list|(
name|int
name|writeGeneration
parameter_list|,
name|boolean
name|b
parameter_list|)
function_decl|;
name|CacheType
name|getType
parameter_list|()
function_decl|;
name|void
name|receive
parameter_list|(
name|ByteBuffer
name|buff
parameter_list|)
function_decl|;
name|void
name|removeGeneration
parameter_list|(
name|int
name|oldReadGeneration
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

