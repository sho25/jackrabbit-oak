begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|types
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/**  * Utility methods.  */
end_comment

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|static
name|int
name|pathDepth
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|0
else|:
name|path
operator|.
name|replaceAll
argument_list|(
literal|"[^/]"
argument_list|,
literal|""
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMap
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|int
name|getMapSize
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|size
operator|+=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|size
operator|+=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|size
operator|+=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|size
operator|+=
literal|8
operator|+
name|getMapSize
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
comment|/**      * Generate a unique cluster id, similar to the machine id field in MongoDB ObjectId objects.      *       * @return the unique machine id      */
specifier|public
specifier|static
name|int
name|getUniqueClusterId
parameter_list|()
block|{
name|ObjectId
name|objId
init|=
operator|new
name|ObjectId
argument_list|()
decl_stmt|;
return|return
name|objId
operator|.
name|_machine
argument_list|()
return|;
block|}
block|}
end_class

end_unit

