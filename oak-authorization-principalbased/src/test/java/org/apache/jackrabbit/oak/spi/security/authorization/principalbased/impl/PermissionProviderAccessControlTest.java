begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_EFFECTIVE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionProviderAccessControlTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|PrincipalBasedPermissionProvider
name|permissionProvider
decl_stmt|;
specifier|private
name|String
name|contentPath
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|String
name|grandchildPath
decl_stmt|;
specifier|private
name|String
name|child2Path
decl_stmt|;
specifier|private
name|String
name|accessControlledPath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|setupContentTrees
argument_list|(
literal|"/oak:content/child2/grandchild2"
argument_list|)
expr_stmt|;
name|contentPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|childPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|grandchildPath
operator|=
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
name|TEST_OAK_PATH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child2Path
operator|=
literal|"/oak:content/child2"
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|contentPath
argument_list|)
argument_list|,
name|JCR_READ
argument_list|)
decl_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|childPath
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|addPrincipalBasedEntry
argument_list|(
name|policy
argument_list|,
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|child2Path
argument_list|)
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|accessControlledPath
operator|=
name|policy
operator|.
name|getOakPath
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|=
name|createPermissionProvider
argument_list|(
name|root
argument_list|,
name|testPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|NamePathMapper
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|oakPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|oakPath
argument_list|)
control|)
block|{
name|tree
operator|=
name|tree
operator|.
name|getChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|tp
operator|=
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|AbstractTreePermission
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
operator|(
operator|(
name|AbstractTreePermission
operator|)
name|tp
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnAccessControlledTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|accessControlledTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|accessControlledPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|accessControlledTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|accessControlledTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|accessControlledTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnPolicyTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnPolicyTreePrincipalReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnPolicyTreePrincipalAccessControlReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnEntryTree
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnEntryTreeAccessControlModifiable
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child2Path
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnEntryTreeAccessMgt
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
name|child
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child2Path
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnNonExistingRestrictionTree
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Tree
name|restr
init|=
name|child
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|PropertyState
name|propertyState
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|REP_GLOB
argument_list|,
literal|"any"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
name|propertyState
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
name|propertyState
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child2Path
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restr
argument_list|,
name|propertyState
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedOnRestrictionTree
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPolicyImpl
name|policy
init|=
name|getPrincipalPolicyImpl
argument_list|(
name|testPrincipal
argument_list|,
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restr
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|REP_GLOB
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
operator|.
name|createValue
argument_list|(
name|REP_RESTRICTIONS
operator|+
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|accessControlledPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|restr
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|hasChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
condition|)
block|{
name|Tree
name|restrTree
init|=
name|child
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restrTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restrTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restrTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|restrTree
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|restrTree
argument_list|,
name|ps
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|accessControlledPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|accessControlledPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|policyPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|policyPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
operator||
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|root
operator|.
name|getTree
argument_list|(
name|policyPath
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|childPath
init|=
name|child
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child2Path
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|isGranted
argument_list|(
name|childPath
argument_list|,
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|accessControlledPath
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|policyTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPrivNames
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|accessControlledPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|expectedPrivNames
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|accessControlledPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setupPrincipalBasedAccessControl
argument_list|(
name|testPrincipal
argument_list|,
name|accessControlledPath
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|permissionProvider
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|expectedPrivNames
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|accessControlledPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|accessControlledPath
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPrivNames
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|String
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childPath
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child2Path
operator|.
name|equals
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|permissionProvider
operator|.
name|getPrivileges
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

