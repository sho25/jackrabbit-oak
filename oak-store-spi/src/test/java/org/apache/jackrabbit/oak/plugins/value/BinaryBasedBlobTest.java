begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryBasedBlobTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getStream
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
literal|"just a test"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|TestBinary
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
operator|new
name|BinaryBasedBlob
argument_list|(
name|binary
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
argument_list|,
name|blob
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|expected
init|=
name|binary
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|InputStream
name|actual
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|e
init|=
name|expected
operator|.
name|read
argument_list|()
init|;
name|e
operator|!=
operator|-
literal|1
condition|;
name|e
operator|=
name|expected
operator|.
name|read
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|e
argument_list|,
name|actual
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getStreamWithError
parameter_list|()
throws|throws
name|IOException
block|{
name|Blob
name|blob
init|=
operator|new
name|BinaryBasedBlob
argument_list|(
operator|new
name|FailingBinary
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|blob
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|ins
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ins
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
finally|finally
block|{
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestBinary
implements|implements
name|Binary
block|{
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|TestBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
return|return
name|getStream
argument_list|()
operator|.
name|read
argument_list|(
name|b
argument_list|,
operator|(
name|int
operator|)
name|position
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{ }
block|}
specifier|private
specifier|static
class|class
name|FailingBinary
implements|implements
name|Binary
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"no stream"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"no stream"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{ }
block|}
block|}
end_class

end_unit

