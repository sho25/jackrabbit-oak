begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|TemporarySystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|CopyOnReadDirectory
operator|.
name|WAIT_OTHER_COPY_SYSPROP_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|INDEX_DATA_CHILD_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ConcurrentCopyOnReadDirectoryTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporarySystemProperty
name|tempSysProp
init|=
operator|new
name|TemporarySystemProperty
argument_list|()
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
init|=
literal|null
decl_stmt|;
specifier|private
name|Directory
name|remote
decl_stmt|;
specifier|private
name|IndexCopier
name|copier
decl_stmt|;
specifier|private
name|Directory
name|firstCoR
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|leechingCoRFutures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Directory
argument_list|>
name|leechingCoRs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|CountDownLatch
name|firstCoRBlocker
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|String
argument_list|>
name|firstCoRFutre
decl_stmt|;
specifier|private
name|LuceneIndexDefinition
name|defn
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REMOTE_INPUT_PREFIX
init|=
literal|"Remote - "
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|WAIT_OTHER_COPY_SYSPROP_NAME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|30
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// normal remote directory
name|remote
operator|=
operator|new
name|RAMDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|ret
init|=
name|spy
argument_list|(
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|REMOTE_INPUT_PREFIX
operator|+
name|invocationOnMock
operator|.
name|callRealMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
expr_stmt|;
name|IndexOutput
name|output
init|=
name|remote
operator|.
name|createOutput
argument_list|(
literal|"file"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|remoteInput
init|=
name|remote
operator|.
name|openInput
argument_list|(
literal|"file"
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|remoteInput
operator|.
name|length
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|copier
operator|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
decl_stmt|;
name|defn
operator|=
operator|new
name|LuceneIndexDefinition
argument_list|(
name|root
argument_list|,
name|root
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// This is no-op usually but would save us in case first CoR is stuck in wait
name|firstCoRBlocker
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup one primary CoR and 2 subsequent ones to read. Each would run concurrently.
name|setupCopiers
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// let of go of CoR1 to finish its work
name|firstCoRBlocker
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"First CoR must not throw exception"
argument_list|,
name|firstCoRFutre
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|waitForLeechingCoRsToFinish
argument_list|()
expr_stmt|;
for|for
control|(
name|Directory
name|d
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|firstCoR
argument_list|)
argument_list|,
name|leechingCoRs
argument_list|)
control|)
block|{
name|IndexInput
name|input
init|=
name|d
operator|.
name|openInput
argument_list|(
literal|"file"
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|d
operator|+
literal|" must not be reading from remote"
argument_list|,
name|input
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REMOTE_INPUT_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentPrefetchWithTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup one primary CoR and 2 subsequent ones to read. Each would run concurrently.
name|setupCopiers
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// don't unblock firstCor so that leeching CoRs time out
name|waitForLeechingCoRsToFinish
argument_list|()
expr_stmt|;
comment|// let it go now as leeching CoRs have finished
name|firstCoRBlocker
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"First CoR must not throw exception"
argument_list|,
name|firstCoRFutre
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IndexInput
name|input
init|=
name|firstCoR
operator|.
name|openInput
argument_list|(
literal|"file"
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|firstCoR
operator|+
literal|" must not be reading from remote"
argument_list|,
name|input
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REMOTE_INPUT_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Directory
name|d
range|:
name|leechingCoRs
control|)
block|{
name|input
operator|=
name|d
operator|.
name|openInput
argument_list|(
literal|"file"
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|+
literal|" must be reading from remote"
argument_list|,
name|input
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REMOTE_INPUT_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupCopiers
parameter_list|(
name|int
name|numLeechers
parameter_list|)
throws|throws
name|Exception
block|{
comment|// 1 thread each for leeching copier and another one for the first one
name|executorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numLeechers
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setupFirstCoR
argument_list|()
expr_stmt|;
name|setupLeechingCoRs
argument_list|(
name|numLeechers
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupFirstCoR
parameter_list|()
throws|throws
name|Exception
block|{
name|firstCoRBlocker
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CountDownLatch
name|firstCoRWaiter
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Create a blocking remote for CoR1 to signal how open input progresses
name|Directory
name|blockingRemote
init|=
name|spy
argument_list|(
name|remote
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|IndexInput
name|input
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|(
name|IndexInput
operator|)
name|invocationOnMock
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// signal that input has been opened
name|firstCoRWaiter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|// wait while we're signalled that we can be done with opening input
name|boolean
name|wait
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|wait
condition|)
block|{
try|try
block|{
comment|// block until we are signalled to call super
name|firstCoRBlocker
operator|.
name|await
argument_list|()
expr_stmt|;
name|wait
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|input
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|blockingRemote
argument_list|)
operator|.
name|openInput
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// create CoR instance to start pre-fetching in a separate thread as we want to block it mid-way
name|firstCoRFutre
operator|=
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|String
name|description
init|=
literal|"firstCoR"
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|firstCoR
operator|=
name|openCoR
argument_list|(
name|copier
argument_list|,
name|blockingRemote
argument_list|,
name|defn
argument_list|,
name|description
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|getThrowableAsString
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// wait for CoR to start fetching which we're blocking its completion via cor1Blocker latch
name|firstCoRWaiter
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupLeechingCoRs
parameter_list|(
name|int
name|numLeechers
parameter_list|)
throws|throws
name|Exception
block|{
name|CountDownLatch
name|leechingCoRsWaiter
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numLeechers
argument_list|)
decl_stmt|;
comment|// Create a blocking copier for leeching CoRs to signal when it starts to wait for it to wait for copy completion
name|IndexCopier
name|blockingCopier
init|=
name|spy
argument_list|(
name|copier
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|leechingCoRsWaiter
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|invocationOnMock
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|blockingCopier
argument_list|)
operator|.
name|isCopyInProgress
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLeechers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|leecherName
init|=
literal|"CoR-"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|leechingCoRFutures
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|createLeechingCoR
argument_list|(
name|blockingCopier
argument_list|,
name|defn
argument_list|,
name|leecherName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for leeching CoRs to start
name|leechingCoRsWaiter
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|createLeechingCoR
parameter_list|(
name|IndexCopier
name|blockingCopier
parameter_list|,
name|LuceneIndexDefinition
name|defn
parameter_list|,
name|String
name|threadName
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
comment|// get another directory instance with normal remote while the previous is blocked by us
try|try
block|{
name|CopyOnReadDirectory
name|dir
init|=
operator|(
name|CopyOnReadDirectory
operator|)
name|openCoR
argument_list|(
name|blockingCopier
argument_list|,
name|remote
argument_list|,
name|defn
argument_list|,
name|threadName
argument_list|)
decl_stmt|;
name|leechingCoRs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|getThrowableAsString
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|waitForLeechingCoRsToFinish
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Future
argument_list|<
name|String
argument_list|>
name|corFuture
range|:
name|leechingCoRFutures
control|)
block|{
name|assertNull
argument_list|(
literal|"Leeching CoR must not throw exception"
argument_list|,
name|corFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Directory
name|openCoR
parameter_list|(
name|IndexCopier
name|copier
parameter_list|,
name|Directory
name|remote
parameter_list|,
name|LuceneIndexDefinition
name|defn
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|d
init|=
name|spy
argument_list|(
name|copier
operator|.
name|wrapForRead
argument_list|(
literal|"/oak:index/foo"
argument_list|,
name|defn
argument_list|,
name|remote
argument_list|,
name|INDEX_DATA_CHILD_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|d
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|description
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|private
specifier|static
name|String
name|getThrowableAsString
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sw
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

