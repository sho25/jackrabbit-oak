begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|ExceptionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
operator|.
name|ChildVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * A large list of nodes, using a data structure similar to a trie.  */
end_comment

begin_class
specifier|public
class|class
name|NodeListTrie
implements|implements
name|NodeList
block|{
name|ArrayList
argument_list|<
name|Child
argument_list|>
name|children
decl_stmt|;
specifier|private
specifier|final
name|int
name|prefixLength
decl_stmt|;
specifier|private
specifier|final
name|NodeMap
name|map
decl_stmt|;
specifier|private
specifier|final
name|long
name|revId
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|NodeListTrie
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|ArrayList
argument_list|<
name|Child
argument_list|>
name|children
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
name|this
operator|.
name|revId
operator|=
name|revId
expr_stmt|;
for|for
control|(
name|Child
name|c
range|:
name|children
control|)
block|{
name|size
operator|+=
name|getList
argument_list|(
name|c
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|NodeListTrie
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|NodeList
name|list
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|Child
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|revId
operator|=
name|revId
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|len
operator|==
literal|0
condition|;
name|j
operator|++
control|)
block|{
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|list
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|String
name|p
init|=
name|getPrefix
argument_list|(
name|n
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|p
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
block|{
name|len
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
block|}
name|this
operator|.
name|prefixLength
operator|=
name|len
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|list
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|add
argument_list|(
name|n
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|private
name|String
name|getPrefix
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
block|{
return|return
name|name
operator|+
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|len
operator|-
name|name
operator|.
name|length
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|private
name|void
name|addChild
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeListSmall
name|partList
parameter_list|)
block|{
if|if
condition|(
name|partList
operator|.
name|size
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Child
name|c
init|=
operator|new
name|Child
argument_list|()
decl_stmt|;
name|c
operator|.
name|prefix
operator|=
name|getPrefix
argument_list|(
name|name
argument_list|,
name|prefixLength
argument_list|)
expr_stmt|;
name|NodeImpl
name|n
init|=
operator|new
name|NodeImpl
argument_list|(
name|map
argument_list|,
name|revId
argument_list|)
decl_stmt|;
name|n
operator|.
name|setNodeList
argument_list|(
name|partList
argument_list|)
expr_stmt|;
name|c
operator|.
name|id
operator|=
name|map
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|getChildIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|getList
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
name|NodeList
name|getList
parameter_list|(
name|Child
name|c
parameter_list|)
block|{
return|return
name|c
operator|.
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
operator|.
name|getNodeList
argument_list|()
return|;
block|}
name|NodeList
name|getListClone
parameter_list|(
name|Child
name|c
parameter_list|)
block|{
name|NodeImpl
name|n
init|=
name|c
operator|.
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|n
operator|=
name|n
operator|.
name|createClone
argument_list|(
name|revId
argument_list|)
expr_stmt|;
name|c
operator|.
name|id
operator|=
name|map
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|n
operator|.
name|getNodeList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|getChildIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
block|}
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|getList
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|getList
argument_list|(
name|c
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|pos
condition|)
block|{
name|NodeList
name|list
init|=
name|getList
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|getName
argument_list|(
name|pos
argument_list|)
return|;
block|}
name|pos
operator|-=
name|size
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|maxCount
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|getList
argument_list|(
name|c
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|offset
condition|)
block|{
break|break;
block|}
name|offset
operator|-=
name|size
expr_stmt|;
block|}
specifier|final
name|int
name|start
init|=
name|i
decl_stmt|;
specifier|final
name|long
name|off
init|=
name|offset
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|int
name|pos
init|=
name|start
decl_stmt|;
name|int
name|remaining
init|=
name|maxCount
decl_stmt|;
name|long
name|offset
init|=
name|off
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
name|pos
operator|<
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|it
operator|=
name|getList
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|pos
operator|++
argument_list|)
argument_list|)
operator|.
name|getNames
argument_list|(
name|offset
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|remaining
operator|--
expr_stmt|;
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
return|return
name|it
return|;
block|}
specifier|private
name|int
name|getChildIndex
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|name
argument_list|,
name|prefixLength
argument_list|)
decl_stmt|;
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|min
operator|<=
name|max
condition|)
block|{
name|int
name|test
init|=
operator|(
name|min
operator|+
name|max
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|compare
init|=
name|children
operator|.
name|get
argument_list|(
name|test
argument_list|)
operator|.
name|prefix
operator|.
name|compareTo
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
return|return
name|test
return|;
block|}
if|if
condition|(
name|compare
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|test
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compare
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|test
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|// not found: return negative insertion point
return|return
operator|-
operator|(
name|min
operator|+
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeId
name|x
parameter_list|)
block|{
name|int
name|index
init|=
name|getChildIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|1
expr_stmt|;
name|NodeListSmall
name|list
init|=
operator|new
name|NodeListSmall
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|getListClone
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|size
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replace
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeId
name|x
parameter_list|)
block|{
name|int
name|index
init|=
name|getChildIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|getListClone
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|list
operator|.
name|replace
argument_list|(
name|name
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|getChildIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Node not found: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|Child
name|c
init|=
name|children
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|getListClone
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * A child entry.      */
specifier|static
class|class
name|Child
block|{
name|NodeId
name|id
decl_stmt|;
name|String
name|prefix
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|createClone
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|long
name|revId
parameter_list|)
block|{
if|if
condition|(
name|revId
operator|==
name|this
operator|.
name|revId
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|size
operator|<
name|map
operator|.
name|getMaxMemoryChildren
argument_list|()
operator|/
literal|2
condition|)
block|{
name|NodeListSmall
name|s
init|=
operator|new
name|NodeListSmall
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|getNames
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|n
argument_list|,
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
name|ArrayList
argument_list|<
name|Child
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Child
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Child
name|c
range|:
name|children
control|)
block|{
name|Child
name|c2
init|=
operator|new
name|Child
argument_list|()
decl_stmt|;
name|c2
operator|.
name|id
operator|=
name|map
operator|.
name|addNode
argument_list|(
name|c
operator|.
name|id
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|.
name|prefix
operator|=
name|c
operator|.
name|prefix
expr_stmt|;
name|len
operator|=
name|Math
operator|.
name|max
argument_list|(
name|len
argument_list|,
name|c
operator|.
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|newChildren
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
name|NodeListTrie
name|result
init|=
operator|new
name|NodeListTrie
argument_list|(
name|map
argument_list|,
name|newChildren
argument_list|,
name|len
argument_list|,
name|revId
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
name|map
operator|.
name|getMaxMemoryChildren
argument_list|()
condition|)
block|{
return|return
operator|new
name|NodeListTrie
argument_list|(
name|map
argument_list|,
name|result
argument_list|,
name|size
argument_list|,
name|revId
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|ChildVisitor
name|v
parameter_list|)
block|{
for|for
control|(
name|Child
name|c
range|:
name|children
control|)
block|{
name|v
operator|.
name|accept
argument_list|(
name|c
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|JsopWriter
name|json
parameter_list|,
name|NodeMap
name|map
parameter_list|)
block|{
for|for
control|(
name|Child
name|c
range|:
name|children
control|)
block|{
name|json
operator|.
name|key
argument_list|(
name|NodeImpl
operator|.
name|CHILDREN
argument_list|)
expr_stmt|;
name|NodeId
name|x
init|=
name|c
operator|.
name|id
decl_stmt|;
name|NodeId
name|y
init|=
name|map
operator|.
name|getId
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
name|y
condition|)
block|{
name|c
operator|.
name|id
operator|=
name|y
expr_stmt|;
block|}
name|json
operator|.
name|encodedValue
argument_list|(
name|map
operator|.
name|formatId
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|key
argument_list|(
name|NodeImpl
operator|.
name|NAMES
argument_list|)
operator|.
name|value
argument_list|(
name|c
operator|.
name|prefix
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|key
argument_list|(
name|NodeImpl
operator|.
name|COUNT
argument_list|)
operator|.
name|value
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read a large child node list.      *      * @param t the tokenizer      * @param map the node map      * @param firstNodeId the node id of the first child      * @return the node list      */
specifier|static
name|NodeListTrie
name|read
parameter_list|(
name|JsopTokenizer
name|t
parameter_list|,
name|NodeMap
name|map
parameter_list|,
name|String
name|firstNodeId
parameter_list|)
block|{
name|Child
name|c
init|=
operator|new
name|Child
argument_list|()
decl_stmt|;
name|c
operator|.
name|id
operator|=
name|map
operator|.
name|parseId
argument_list|(
name|firstNodeId
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Child
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|Child
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
block|{
name|String
name|k
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|.
name|endsWith
argument_list|(
name|NodeImpl
operator|.
name|COUNT
argument_list|)
condition|)
block|{
name|size
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|t
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|NodeImpl
operator|.
name|CHILDREN
argument_list|)
condition|)
block|{
name|String
name|nodeId
init|=
name|t
operator|.
name|readRawValue
argument_list|()
decl_stmt|;
name|c
operator|=
operator|new
name|Child
argument_list|()
expr_stmt|;
name|c
operator|.
name|id
operator|=
name|map
operator|.
name|parseId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|NodeImpl
operator|.
name|NAMES
argument_list|)
condition|)
block|{
name|c
operator|.
name|prefix
operator|=
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|len
operator|=
name|Math
operator|.
name|max
argument_list|(
name|len
argument_list|,
name|c
operator|.
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ExceptionFactory
operator|.
name|get
argument_list|(
literal|"Unexpected "
operator|+
name|k
argument_list|)
throw|;
block|}
block|}
name|NodeListTrie
name|list
init|=
operator|new
name|NodeListTrie
argument_list|(
name|map
argument_list|,
name|children
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|list
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|children
operator|.
name|size
argument_list|()
operator|*
literal|100
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateHash
parameter_list|(
name|NodeMap
name|map
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Child
name|c
range|:
name|children
control|)
block|{
name|byte
index|[]
name|hash
init|=
name|c
operator|.
name|id
operator|.
name|getHash
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|c
operator|.
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|==
literal|null
condition|)
block|{
name|hash
operator|=
name|map
operator|.
name|getNode
argument_list|(
name|c
operator|.
name|id
operator|.
name|getLong
argument_list|()
argument_list|)
operator|.
name|getHash
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

