begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|split
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzuriteDockerRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|BinaryReferencesIndexLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|binaries
operator|.
name|InvalidBinaryReferencesIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|SplitPersistenceTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|AzuriteDockerRule
name|azurite
init|=
operator|new
name|AzuriteDockerRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|base
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|split
decl_stmt|;
specifier|private
name|FileStore
name|baseFileStore
decl_stmt|;
specifier|private
name|FileStore
name|splitFileStore
decl_stmt|;
specifier|private
name|SegmentNodeStorePersistence
name|splitPersistence
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
throws|,
name|CommitFailedException
throws|,
name|URISyntaxException
throws|,
name|InvalidKeyException
throws|,
name|StorageException
block|{
name|SegmentNodeStorePersistence
name|sharedPersistence
init|=
operator|new
name|AzurePersistence
argument_list|(
name|azurite
operator|.
name|getContainer
argument_list|(
literal|"oak-test"
argument_list|)
operator|.
name|getDirectoryReference
argument_list|(
literal|"oak"
argument_list|)
argument_list|)
decl_stmt|;
name|baseFileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|sharedPersistence
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|base
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|baseFileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|base
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|base
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|baseFileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|SegmentNodeStorePersistence
name|localPersistence
init|=
operator|new
name|TarPersistence
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
decl_stmt|;
name|splitPersistence
operator|=
operator|new
name|SplitPersistence
argument_list|(
name|sharedPersistence
argument_list|,
name|localPersistence
argument_list|)
expr_stmt|;
name|splitFileStore
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|splitPersistence
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|split
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|splitFileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|splitFileStore
operator|!=
literal|null
condition|)
block|{
name|splitFileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseFileStore
operator|!=
literal|null
condition|)
block|{
name|baseFileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBaseNodeAvailable
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|split
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangesAreLocalForBaseRepository
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|base
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|base
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|split
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangesAreLocalForSplitRepository
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|split
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
name|split
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|base
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryReferencesAreNotNull
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidBinaryReferencesIndexException
block|{
name|splitFileStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|splitFileStore
operator|=
literal|null
expr_stmt|;
name|SegmentArchiveManager
name|manager
init|=
name|splitPersistence
operator|.
name|createArchiveManager
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|IOMonitorAdapter
argument_list|()
argument_list|,
operator|new
name|FileStoreMonitorAdapter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|archive
range|:
name|manager
operator|.
name|listArchives
argument_list|()
control|)
block|{
name|SegmentArchiveReader
name|reader
init|=
name|manager
operator|.
name|open
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|BinaryReferencesIndexLoader
operator|.
name|parseBinaryReferencesIndex
argument_list|(
name|reader
operator|.
name|getBinaryReferences
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

