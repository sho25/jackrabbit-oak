begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|TYPENAME_STRING
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANALYZERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_FILTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ANL_TOKENIZER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PERSISTENCE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorContext
operator|.
name|getIndexWriterConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorContext
operator|.
name|newIndexDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|NT_TEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|createNodeWithType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|newLuceneIndexDefinitionV2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLuceneIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
operator|.
name|newLucenePropertyIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|score
operator|.
name|ScorerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|score
operator|.
name|ScorerProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvancedQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CustomScoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CustomScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ConstantConditions"
argument_list|)
specifier|public
class|class
name|LuceneIndexTest
block|{
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|IndexTracker
name|tracker
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testLuceneV1NonExistentProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|defn
init|=
name|newLuceneIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"String"
argument_list|)
argument_list|)
decl_stmt|;
name|defn
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V1
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"value-with-dash"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LuceneIndex
argument_list|(
name|tracker
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"foo"
argument_list|,
literal|"value-with*"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now perform a query against a field which does not exist
name|FilterImpl
name|filter2
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter2
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|filter2
operator|.
name|setFullTextConstraint
argument_list|(
name|FullTextParser
operator|.
name|parse
argument_list|(
literal|"baz"
argument_list|,
literal|"value-with*"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans2
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter2
argument_list|,
literal|null
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Cursor
name|cursor2
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cursor2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLucene
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLuceneLazyCursor
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LuceneIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|child
argument_list|(
literal|"child"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|copyOf
argument_list|(
name|transform
argument_list|(
name|cursor
argument_list|,
operator|new
name|Function
argument_list|<
name|IndexRow
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|IndexRow
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LuceneIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|+
literal|1
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLucene2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// filter.restrictPath("/", Filter.PathRestriction.EXACT);
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLucene3
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooProp
init|=
name|rules
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_INCLUDED_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// filter.restrictPath("/", Filter.PathRestriction.EXACT);
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCursorStability
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooProp
init|=
name|rules
operator|.
name|child
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//1. Create 60 nodes
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|int
name|noOfDocs
init|=
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|+
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfDocs
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
comment|//Perform query and get hold of cursor
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newLong
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
comment|//Trigger loading of cursor
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now before traversing further go ahead and delete all but 10 nodes
name|before
operator|=
name|indexed
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfDocs
operator|-
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Ensure that Lucene actually removes deleted docs
name|NodeBuilder
name|idx
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"lucene"
argument_list|)
decl_stmt|;
name|purgeDeletedDocs
argument_list|(
name|idx
argument_list|,
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDeletes
init|=
name|getDeletedDocCount
argument_list|(
name|idx
argument_list|,
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numDeletes
argument_list|)
expr_stmt|;
comment|//Update the IndexSearcher
name|tracker
operator|.
name|update
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|//its hard to get correct size estimate as post deletion cursor
comment|// would have already picked up 50 docs which would not be considered
comment|//deleted by QE for the revision at which query was triggered
comment|//So just checking for>
name|List
argument_list|<
name|String
argument_list|>
name|resultPaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resultPaths
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|uniquePaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|resultPaths
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultPaths
operator|.
name|size
argument_list|()
argument_list|,
name|uniquePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|uniquePaths
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|purgeDeletedDocs
parameter_list|(
name|NodeBuilder
name|idx
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|newIndexDirectory
argument_list|(
name|definition
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getIndexWriterConfig
argument_list|(
name|definition
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|forceMergeDeletes
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getDeletedDocCount
parameter_list|(
name|NodeBuilder
name|idx
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|newIndexDirectory
argument_list|(
name|definition
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numDeletes
init|=
name|reader
operator|.
name|numDeletedDocs
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|numDeletes
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyNonExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|TestUtil
operator|.
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|propNode
init|=
name|rules
operator|.
name|child
argument_list|(
name|NT_TEST
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooProp
init|=
name|propNode
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"a"
argument_list|,
name|NT_TEST
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"b"
argument_list|,
name|NT_TEST
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"c"
argument_list|,
name|NT_TEST
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_TEST
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|TestUtil
operator|.
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|propNode
init|=
name|rules
operator|.
name|child
argument_list|(
name|NT_TEST
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|NodeBuilder
name|fooProp
init|=
name|propNode
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fooProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NOT_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"a"
argument_list|,
name|NT_TEST
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"b"
argument_list|,
name|NT_TEST
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"c"
argument_list|,
name|NT_TEST
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_TEST
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|NOT_EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativePropertyNonExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|TestUtil
operator|.
name|registerTestNodeType
argument_list|(
name|builder
argument_list|)
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|propNode
init|=
name|rules
operator|.
name|child
argument_list|(
name|NT_TEST
argument_list|)
operator|.
name|child
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
decl_stmt|;
name|propNode
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:content/bar"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a1
init|=
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"a1"
argument_list|,
name|NT_TEST
argument_list|)
decl_stmt|;
name|a1
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|b1
init|=
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"b1"
argument_list|,
name|NT_TEST
argument_list|)
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_TEST
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/b1"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b1"
argument_list|)
operator|.
name|child
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
name|NT_TEST
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"jcr:content/bar"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|idx
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createTestFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createTestFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/a1"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createTestFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createTestFilter
argument_list|()
expr_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/b"
argument_list|,
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeNameIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|rules
init|=
name|index
operator|.
name|child
argument_list|(
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|ruleNode
init|=
name|rules
operator|.
name|child
argument_list|(
name|NT_FILE
argument_list|)
decl_stmt|;
name|ruleNode
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_NODE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"foo"
argument_list|,
name|NT_FILE
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|builder
argument_list|,
literal|"camelCase"
argument_list|,
name|NT_FILE
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_FILE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
name|NT_FILE
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
argument_list|,
name|Operator
operator|.
name|LIKE
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"camelCase"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|createFilter
argument_list|(
name|NT_FILE
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|QueryConstants
operator|.
name|RESTRICTION_LOCAL_NAME
argument_list|,
name|Operator
operator|.
name|LIKE
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"camel%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FilterImpl
name|createTestFilter
parameter_list|()
block|{
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzerWithStopWords
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox jumping"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
operator|new
name|FullTextTerm
argument_list|(
literal|null
argument_list|,
literal|"fox jumping"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|//No stop word configured so default analyzer would also check for 'was'
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
operator|new
name|FullTextTerm
argument_list|(
literal|null
argument_list|,
literal|"fox was jumping"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|//Change the default analyzer to use the default stopword set
comment|//and trigger a reindex such that new analyzer is used
name|NodeBuilder
name|anlnb
init|=
name|nb
operator|.
name|child
argument_list|(
name|ANALYZERS
argument_list|)
operator|.
name|child
argument_list|(
name|ANL_DEFAULT
argument_list|)
decl_stmt|;
name|anlnb
operator|.
name|child
argument_list|(
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|anlnb
operator|.
name|child
argument_list|(
name|ANL_FILTERS
argument_list|)
operator|.
name|child
argument_list|(
literal|"stop"
argument_list|)
expr_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|before
operator|=
name|after
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|queryIndex
operator|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
operator|new
name|FullTextTerm
argument_list|(
literal|null
argument_list|,
literal|"fox jumping"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now this should get passed as the analyzer would ignore 'was'
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
operator|new
name|FullTextTerm
argument_list|(
literal|null
argument_list|,
literal|"fox was jumping"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|customScoreQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nb
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_SCORER_PROVIDER
argument_list|,
literal|"testScorer"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:createdBy"
argument_list|,
literal|"bar bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:createdBy"
argument_list|,
literal|"foo bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|SimpleScorerFactory
name|factory
init|=
operator|new
name|SimpleScorerFactory
argument_list|()
decl_stmt|;
name|ScorerProvider
name|provider
init|=
operator|new
name|ScorerProvider
argument_list|()
block|{
name|String
name|scorerName
init|=
literal|"testScorer"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|scorerName
return|;
block|}
annotation|@
name|Override
specifier|public
name|CustomScoreQuery
name|createCustomScoreQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
return|return
operator|new
name|ModifiedCustomScoreQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
class|class
name|ModifiedCustomScoreQuery
extends|extends
name|CustomScoreQuery
block|{
specifier|private
name|Query
name|query
decl_stmt|;
specifier|public
name|ModifiedCustomScoreQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CustomScoreProvider
name|getCustomScoreProvider
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|CustomScoreProvider
argument_list|(
name|context
argument_list|)
block|{
specifier|public
name|float
name|customScore
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|subQueryScore
parameter_list|,
name|float
name|valSrcScore
parameter_list|)
block|{
name|AtomicReader
name|atomicReader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
try|try
block|{
name|Document
name|document
init|=
name|atomicReader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// boosting docs created by foo
name|String
name|fieldValue
init|=
name|document
operator|.
name|get
argument_list|(
literal|"full:jcr:createdBy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
operator|&&
name|fieldValue
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
name|valSrcScore
operator|*=
literal|2.0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|subQueryScore
operator|*
name|valSrcScore
return|;
block|}
return|return
name|subQueryScore
operator|*
name|valSrcScore
return|;
block|}
block|}
return|;
block|}
block|}
block|}
decl_stmt|;
name|factory
operator|.
name|providers
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getName
argument_list|()
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFullTextConstraint
argument_list|(
operator|new
name|FullTextTerm
argument_list|(
literal|null
argument_list|,
literal|"bar"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|asList
argument_list|(
literal|"/b"
argument_list|,
literal|"/a"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokens
parameter_list|()
block|{
name|Analyzer
name|analyzer
init|=
name|LuceneIndexConstants
operator|.
name|ANALYZER
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"parent"
argument_list|,
literal|"child"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"/parent/child"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"p1234"
argument_list|,
literal|"p5678"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"/p1234/p5678"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"first_second"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"first1"
argument_list|,
literal|"second2"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"first1_second2"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"first. second"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"first.second"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"hello-world"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"hello"
argument_list|,
literal|"wor*"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"hello-wor*"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"*llo"
argument_list|,
literal|"world"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"*llo-world"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"*llo"
argument_list|,
literal|"wor*"
argument_list|)
argument_list|,
name|LuceneIndex
operator|.
name|tokenize
argument_list|(
literal|"*llo-wor*"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|luceneWithFSDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Issue is not reproducible with MemoryNodeBuilder and
comment|//MemoryNodeState as they cannot determine change in childNode without
comment|//entering
name|NodeStore
name|nodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
operator|new
name|MemoryStore
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|nodeStore
operator|)
operator|.
name|addObserver
argument_list|(
operator|new
name|Observer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
block|{
name|tracker
operator|.
name|update
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
comment|//Also initialize the NodeType registry required for Lucene index to work
name|builder
operator|.
name|setChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|,
name|INITIAL_CONTENT
operator|.
name|getChildNode
argument_list|(
name|JCR_SYSTEM
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|idxb
init|=
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|idxb
operator|.
name|setProperty
argument_list|(
name|PERSISTENCE_NAME
argument_list|,
name|PERSISTENCE_FILE
argument_list|)
expr_stmt|;
name|idxb
operator|.
name|setProperty
argument_list|(
name|PERSISTENCE_PATH
argument_list|,
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|indexed
init|=
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|HOOK
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|HOOK
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|luceneWithCopyOnReadDir
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|File
name|indexRootDir
init|=
operator|new
name|File
argument_list|(
name|getIndexDir
argument_list|()
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|(
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|indexRootDir
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|indexed
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|luceneWithCopyOnReadDirAndReindex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//1. Create index in two increments
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|IndexCopier
name|copier
init|=
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|getIndexDir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|(
name|copier
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copier
operator|.
name|getInvalidFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|indexed
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copier
operator|.
name|getInvalidFileCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//2. Reindex. This would create index with different index content
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|child
argument_list|(
literal|"lucene"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|indexed
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
comment|//If reindex case handled properly then invalid count should be zero
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copier
operator|.
name|getInvalidFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copier
operator|.
name|getIndexDir
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//3. Update again. Now with close of previous reader
comment|//orphaned directory must be removed
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|indexed
argument_list|,
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|copier
operator|.
name|getInvalidFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copier
operator|.
name|getIndexDir
argument_list|(
literal|"/oak:index/lucene"
argument_list|)
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiValuesForOrderedIndexShouldNotThrow
parameter_list|()
block|{
name|NodeBuilder
name|index
init|=
name|newLuceneIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"lucene"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeBuilder
name|singleProp
init|=
name|TestUtil
operator|.
name|child
argument_list|(
name|index
argument_list|,
literal|"indexRules/nt:base/properties/single"
argument_list|)
decl_stmt|;
name|singleProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|singleProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ORDERED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|singleProp
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_INCLUDED_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"single"
argument_list|,
name|asList
argument_list|(
literal|"baz"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
try|try
block|{
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception thrown when indexing invalid content"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexNodeLockHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|()
expr_stmt|;
comment|//Create 2 indexes. /oak:index/lucene and /test/oak:index/lucene
comment|//The way LuceneIndexLookup works is. It collect child first and then
comment|//parent
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|nb
init|=
name|newLuceneIndexDefinitionV2
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nb
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
name|NodeBuilder
name|nb2
init|=
name|newLuceneIndexDefinitionV2
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|of
argument_list|(
name|TYPENAME_STRING
argument_list|)
argument_list|)
decl_stmt|;
name|nb2
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nb2
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox is jumping"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|QueryIndex
operator|.
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/test"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|dir
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|child
argument_list|(
literal|"lucene"
argument_list|)
operator|.
name|child
argument_list|(
literal|":data"
argument_list|)
decl_stmt|;
comment|//Mutate the blob to fail on access i.e. create corrupt index
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
operator|new
name|ArrayList
argument_list|<
name|Blob
argument_list|>
argument_list|()
decl_stmt|;
name|Blob
name|b
init|=
name|dir
operator|.
name|child
argument_list|(
literal|"segments_1"
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FailingBlob
name|fb
init|=
operator|new
name|FailingBlob
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|b
operator|.
name|getNewStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|blobs
operator|.
name|add
argument_list|(
name|fb
argument_list|)
expr_stmt|;
name|dir
operator|.
name|child
argument_list|(
literal|"segments_1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
name|blobs
argument_list|,
name|BINARIES
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
try|try
block|{
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting UnsupportedOperationException exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ignore
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexNameIsIndexPath
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|IndexDefinition
name|defn
init|=
operator|new
name|IndexDefinition
argument_list|(
name|root
argument_list|,
name|indexed
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"lucene"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/oak:index/lucene"
argument_list|,
name|defn
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/oak:index/lucene"
argument_list|,
name|defn
operator|.
name|getIndexPathFromConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-4431"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|luceneWithCopyOnReadDir_Compat
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|newLucenePropertyIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"lucene"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|builder
operator|=
name|indexed
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"lucene"
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|IndexConstants
operator|.
name|INDEX_PATH
argument_list|)
expr_stmt|;
name|indexed
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|File
name|indexRootDir
init|=
operator|new
name|File
argument_list|(
name|getIndexDir
argument_list|()
argument_list|)
decl_stmt|;
name|tracker
operator|=
operator|new
name|IndexTracker
argument_list|(
operator|new
name|IndexCopier
argument_list|(
name|sameThreadExecutor
argument_list|()
argument_list|,
name|indexRootDir
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|update
argument_list|(
name|indexed
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|tracker
argument_list|,
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|File
name|d
range|:
name|dirs
control|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FilterImpl
name|createFilter
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|nodeTypes
operator|.
name|getNodeTypeInfo
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertQuery
parameter_list|(
name|IndexTracker
name|tracker
parameter_list|,
name|NodeState
name|indexed
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|AdvancedQueryIndex
name|queryIndex
init|=
operator|new
name|LucenePropertyIndex
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
name|FilterImpl
name|filter
init|=
name|createFilter
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|filter
operator|.
name|restrictPath
argument_list|(
literal|"/"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|EXACT
argument_list|)
expr_stmt|;
name|filter
operator|.
name|restrictProperty
argument_list|(
name|key
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cursor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|assertFilter
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|AdvancedQueryIndex
name|queryIndex
parameter_list|,
name|NodeState
name|indexed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|)
block|{
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|expected
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected path "
operator|+
name|p
operator|+
literal|" not found"
argument_list|,
name|paths
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Result set size is different \nExpected: "
operator|+
name|expected
operator|+
literal|"\nActual: "
operator|+
name|paths
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|assertFilter
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|AdvancedQueryIndex
name|queryIndex
parameter_list|,
name|NodeState
name|indexed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|boolean
name|ordered
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ordered
condition|)
block|{
return|return
name|assertFilter
argument_list|(
name|filter
argument_list|,
name|queryIndex
argument_list|,
name|indexed
argument_list|,
name|expected
argument_list|)
return|;
block|}
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|plans
init|=
name|queryIndex
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
literal|null
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|Cursor
name|cursor
init|=
name|queryIndex
operator|.
name|query
argument_list|(
name|plans
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|expected
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected path "
operator|+
name|p
operator|+
literal|" not found"
argument_list|,
name|paths
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Result set size is different"
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|paths
return|;
block|}
specifier|private
name|String
name|getIndexDir
parameter_list|()
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"indexdir"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|SimpleScorerFactory
implements|implements
name|ScorerProviderFactory
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScorerProvider
argument_list|>
name|providers
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ScorerProvider
name|getScorerProvider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|providers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FailingBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|public
name|FailingBlob
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

