begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Node
operator|.
name|Children
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Simple test to measure how much memory a certain object uses.  */
end_comment

begin_class
specifier|public
class|class
name|MeasureMemory
block|{
specifier|static
specifier|final
name|boolean
name|TRACE
init|=
literal|false
decl_stmt|;
specifier|static
specifier|final
name|int
name|TEST_COUNT
init|=
literal|10000
decl_stmt|;
specifier|static
specifier|final
name|int
name|OVERHEAD
init|=
literal|24
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|overhead
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
block|{
literal|""
block|,
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|node
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|Node
name|n
init|=
name|generateNode
argument_list|(
literal|5
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|n
operator|.
name|getMemory
argument_list|()
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeWithoutProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|Node
name|n
init|=
name|generateNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|n
operator|.
name|getMemory
argument_list|()
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicObject
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|BasicDBObject
name|n
init|=
name|generateBasicObject
argument_list|(
literal|15
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|Utils
operator|.
name|estimateMemoryUsage
argument_list|(
name|n
argument_list|)
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicObjectWithoutProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|BasicDBObject
name|n
init|=
name|generateBasicObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|Utils
operator|.
name|estimateMemoryUsage
argument_list|(
name|n
argument_list|)
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeChildManyChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|Children
name|n
init|=
name|generateNodeChild
argument_list|(
literal|100
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|n
operator|.
name|getMemory
argument_list|()
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeChild
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|Children
name|n
init|=
name|generateNodeChild
argument_list|(
literal|5
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|n
operator|.
name|getMemory
argument_list|()
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeChildWithoutChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|measureMemory
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|call
parameter_list|()
block|{
name|Children
name|n
init|=
name|generateNodeChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|n
block|,
name|n
operator|.
name|getMemory
argument_list|()
operator|+
name|OVERHEAD
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|measureMemory
parameter_list|(
name|Callable
argument_list|<
name|Object
index|[]
argument_list|>
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|base
init|=
name|getMemoryUsed
argument_list|()
decl_stmt|;
name|long
name|mem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|om
init|=
name|c
operator|.
name|call
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|om
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mem
operator|+=
operator|(
name|Integer
operator|)
name|om
index|[
literal|1
index|]
expr_stmt|;
block|}
name|long
name|used
init|=
name|getMemoryUsed
argument_list|()
operator|-
name|base
decl_stmt|;
name|int
name|estimation
init|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|mem
operator|/
name|used
argument_list|)
decl_stmt|;
name|String
name|message
init|=
operator|new
name|Error
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|1
index|]
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"used: "
operator|+
name|used
operator|+
literal|" calculated: "
operator|+
name|mem
operator|+
literal|"\n"
operator|+
literal|"estimation is "
operator|+
name|estimation
operator|+
literal|"%\n"
decl_stmt|;
if|if
condition|(
name|TRACE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|estimation
argument_list|<
literal|80
operator|||
name|estimation
argument_list|>
literal|160
condition|)
block|{
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// need to keep the reference until here, otherwise
comment|// the list might be garbage collected too early
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|static
name|Node
name|generateNode
parameter_list|(
name|int
name|propertyCount
parameter_list|)
block|{
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
operator|new
name|String
argument_list|(
literal|"/hello/world"
argument_list|)
argument_list|,
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
literal|"property"
operator|+
name|i
argument_list|,
literal|"values "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|n
operator|.
name|setLastRevision
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
specifier|static
name|BasicDBObject
name|generateBasicObject
parameter_list|(
name|int
name|propertyCount
parameter_list|)
block|{
name|BasicDBObject
name|n
init|=
operator|new
name|BasicDBObject
argument_list|(
operator|new
name|String
argument_list|(
literal|"_id"
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
literal|"/hello/world"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|.
name|append
argument_list|(
literal|"property"
operator|+
name|i
argument_list|,
literal|"values "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
specifier|static
name|Children
name|generateNodeChild
parameter_list|(
name|int
name|childCount
parameter_list|)
block|{
name|Children
name|n
init|=
operator|new
name|Children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCount
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|.
name|children
operator|.
name|add
argument_list|(
literal|"child"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
specifier|private
specifier|static
name|long
name|getMemoryUsed
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

