begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|p2
operator|.
name|Property2IndexLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  *<code>NodeTypeIndexLookup</code> uses {@link PropertyIndexLookup} internally  * for cost calculation and queries.  */
end_comment

begin_class
class|class
name|NodeTypeIndexLookup
implements|implements
name|JcrConstants
block|{
specifier|private
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|public
name|NodeTypeIndexLookup
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if a node type index lookup exists at the given      *<code>path</code> or further up the tree.      *      * @param path the path to check.      * @return<code>true</code> if a node type index exists;<code>false</code>      *         otherwise.      */
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Property2IndexLookup
name|lookup
init|=
operator|new
name|Property2IndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookup
operator|.
name|isIndexed
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|path
argument_list|)
operator|&&
name|lookup
operator|.
name|isIndexed
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|slash
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NodeState
name|child
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeTypeIndexLookup
argument_list|(
name|child
argument_list|)
operator|.
name|isIndexed
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|slash
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|double
name|getCost
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|nodeTypes
parameter_list|)
block|{
name|PropertyValue
name|ntNames
init|=
name|PropertyValues
operator|.
name|newName
argument_list|(
name|nodeTypes
argument_list|)
decl_stmt|;
name|Property2IndexLookup
name|lookup
init|=
operator|new
name|Property2IndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
name|lookup
operator|.
name|getCost
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|ntNames
argument_list|)
operator|+
name|lookup
operator|.
name|getCost
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|ntNames
argument_list|)
return|;
block|}
comment|/**      * Returns the paths that match the given node types.      *      * @param filter the filter (used for logging)      * @param nodeTypes the names of the node types to match.      * @return the matched paths (the result might contain duplicate entries)      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|nodeTypes
parameter_list|)
block|{
specifier|final
name|PropertyValue
name|ntNames
init|=
name|PropertyValues
operator|.
name|newName
argument_list|(
name|nodeTypes
argument_list|)
decl_stmt|;
name|Property2IndexLookup
name|lookup
init|=
operator|new
name|Property2IndexLookup
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|JCR_PRIMARYTYPE
argument_list|,
name|ntNames
argument_list|)
argument_list|,
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|JCR_MIXINTYPES
argument_list|,
name|ntNames
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

