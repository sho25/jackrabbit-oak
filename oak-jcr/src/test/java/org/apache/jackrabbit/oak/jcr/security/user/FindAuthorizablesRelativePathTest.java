begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the query API exposed by {@link UserManager}.  */
end_comment

begin_class
specifier|public
class|class
name|FindAuthorizablesRelativePathTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|Principal
name|p
decl_stmt|;
specifier|private
name|Group
name|gr
decl_stmt|;
specifier|private
name|String
name|relPath
decl_stmt|;
specifier|private
name|String
name|relPath2
decl_stmt|;
specifier|private
name|String
name|relPath3
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|p
operator|=
name|getTestPrincipal
argument_list|()
expr_stmt|;
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[]
block|{
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"v1"
argument_list|)
block|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"v2"
argument_list|)
block|}
decl_stmt|;
name|relPath
operator|=
literal|"relPath/"
operator|+
name|propertyName1
expr_stmt|;
name|relPath2
operator|=
literal|"another/"
operator|+
name|propertyName1
expr_stmt|;
name|relPath3
operator|=
literal|"relPath/child/"
operator|+
name|propertyName1
expr_stmt|;
name|gr
operator|.
name|setProperty
argument_list|(
name|relPath
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setProperty
argument_list|(
name|relPath2
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setProperty
argument_list|(
name|relPath3
argument_list|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSingleResult
parameter_list|(
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
parameter_list|,
name|String
name|expectedId
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|result
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no more results"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV1ByName
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath = "prop1", v = "v1" -> should find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName1
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV3ByName
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath = "prop1", v = "v3" -> should find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|propertyName1
argument_list|,
literal|"v3"
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV1ByRelativePath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath = "relPath/prop1", v = "v1" -> should find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|relPath
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV1ByAltRelativePath
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath = "another/prop1", v = "v1" -> should find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
name|relPath2
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV1AtGroupNode
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath : "./prop1", v = "v1" -> should not find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
literal|"./"
operator|+
name|propertyName1
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindV3AtGroupNode
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
comment|// relPath : "./prop1", v = "v3" -> should not find the target group
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
literal|"./"
operator|+
name|propertyName1
argument_list|,
literal|"v3"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"expected result"
argument_list|,
name|result
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

