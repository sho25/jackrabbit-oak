begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|FilteringNodeState
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|assertExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|assertMissing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|create
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|commit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|createNodeStoreWithContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|NodeStateTestUtils
operator|.
name|getNodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|TreeConstants
operator|.
name|OAK_CHILD_ORDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|FilteringNodeStateTest
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_INCLUDES
init|=
name|FilteringNodeState
operator|.
name|ALL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_EXCLUDES
init|=
name|FilteringNodeState
operator|.
name|NONE
decl_stmt|;
specifier|private
name|NodeState
name|rootNodeState
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
throws|,
name|IOException
block|{
specifier|final
name|NodeStore
name|nodeStore
init|=
name|createNodeStoreWithContent
argument_list|(
literal|"/content/foo/de"
argument_list|,
literal|"/content/foo/en"
argument_list|,
literal|"/content/football/en"
argument_list|,
literal|"/apps/foo/install"
argument_list|,
literal|"/libs/foo/install"
argument_list|)
decl_stmt|;
specifier|final
name|PropertyState
name|childOrder
init|=
name|createProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"football"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
decl_stmt|;
specifier|final
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|create
argument_list|(
name|builder
argument_list|,
literal|"/content"
argument_list|,
name|childOrder
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|nodeStore
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|rootNodeState
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateForNullArgs
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"root should be identical to decorated"
argument_list|,
name|rootNodeState
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateForDefaultIncludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|DEFAULT_INCLUDES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"root should be identical to decorated"
argument_list|,
name|rootNodeState
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateForDefaultExcludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|DEFAULT_EXCLUDES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"root should be identical to decorated"
argument_list|,
name|rootNodeState
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateForDefaultIncludesAndExcludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|DEFAULT_INCLUDES
argument_list|,
name|DEFAULT_EXCLUDES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"root should be identical to decorated"
argument_list|,
name|rootNodeState
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateIncludedPath
parameter_list|()
block|{
specifier|final
name|NodeState
name|content
init|=
name|getNodeState
argument_list|(
name|rootNodeState
argument_list|,
literal|"/content"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/content"
argument_list|,
name|content
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"content should be identical to decorated"
argument_list|,
name|content
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldNotDecorateIncludedDescendants
parameter_list|()
block|{
specifier|final
name|NodeState
name|foo
init|=
name|getNodeState
argument_list|(
name|rootNodeState
argument_list|,
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/content/foo"
argument_list|,
name|foo
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"foo should be identical to decorated"
argument_list|,
name|foo
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDecorateAncestorOfExcludedDescendants
parameter_list|()
block|{
specifier|final
name|NodeState
name|foo
init|=
name|getNodeState
argument_list|(
name|rootNodeState
argument_list|,
literal|"/content/foo"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/content/foo"
argument_list|,
name|foo
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/content/foo/de"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"foo should not be identical to decorated"
argument_list|,
name|foo
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
name|assertMissing
argument_list|(
name|decorated
argument_list|,
literal|"de"
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
name|decorated
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"child nodes \"de\" should not be equal"
argument_list|,
name|getNodeState
argument_list|(
name|foo
argument_list|,
literal|"de"
argument_list|)
operator|.
name|equals
argument_list|(
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"de"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|en
init|=
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"child nodes \"en\" should be equal"
argument_list|,
name|getNodeState
argument_list|(
name|foo
argument_list|,
literal|"en"
argument_list|)
argument_list|,
name|en
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"child node \"en\" should not be decorated"
argument_list|,
operator|!
operator|(
name|en
operator|instanceof
name|FilteringNodeState
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHaveCorrectChildOrderProperty
parameter_list|()
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeState
name|content
init|=
name|rootNodeState
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/content"
argument_list|,
name|content
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|decorated
operator|.
name|hasProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
expr_stmt|;
block|{
comment|// access via getProperty()
specifier|final
name|PropertyState
name|childOrder
init|=
name|decorated
operator|.
name|getProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|childOrder
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"football"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// access via getProperties()
specifier|final
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
name|isChildOrderProperty
init|=
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyState
name|propertyState
parameter_list|)
block|{
return|return
name|OAK_CHILD_ORDER
operator|.
name|equals
argument_list|(
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|PropertyState
name|childOrder
init|=
name|Iterables
operator|.
name|find
argument_list|(
name|decorated
operator|.
name|getProperties
argument_list|()
argument_list|,
name|isChildOrderProperty
argument_list|)
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|childOrder
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"football"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDecorateExcludedNode
parameter_list|()
block|{
specifier|final
name|NodeState
name|decoratedRoot
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/content/foo/de"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|de
init|=
name|getNodeState
argument_list|(
name|rootNodeState
argument_list|,
literal|"/content/foo/de"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|getNodeState
argument_list|(
name|decoratedRoot
argument_list|,
literal|"/content/foo/de"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"de should not be equal to decorated"
argument_list|,
name|de
operator|.
name|equals
argument_list|(
name|decorated
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"decorated should not exist"
argument_list|,
name|decorated
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDecorateImplicitlyExcludedNode
parameter_list|()
block|{
specifier|final
name|NodeState
name|content
init|=
name|getNodeState
argument_list|(
name|rootNodeState
argument_list|,
literal|"/content"
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/content"
argument_list|,
name|content
argument_list|,
name|of
argument_list|(
literal|"/apps"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"content should not be identical to decorated"
argument_list|,
name|content
argument_list|,
name|decorated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideExcludedPathsViaExists
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/apps"
argument_list|,
literal|"/libs"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMissing
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissing
argument_list|(
name|decorated
argument_list|,
literal|"libs/foo/install"
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
name|decorated
argument_list|,
literal|"content/foo/de"
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
name|decorated
argument_list|,
literal|"content/foo/en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideExcludedPathsViaHasChildNode
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/apps"
argument_list|,
literal|"/libs"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"libs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideExcludedPathsViaGetChildNodeNames
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/apps"
argument_list|,
literal|"/libs"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"libs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideMissingIncludedPathsViaExists
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMissing
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissing
argument_list|(
name|decorated
argument_list|,
literal|"libs/foo/install"
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
name|decorated
argument_list|,
literal|"content/foo/de"
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
name|decorated
argument_list|,
literal|"content/foo/en"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideMissingIncludedPathsViaHasChildNode
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissingHasChildNode
argument_list|(
name|decorated
argument_list|,
literal|"libs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHideMissingIncludedPathsViaGetChildNodeNames
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"apps"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"libs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldGivePrecedenceForExcludesOverIncludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|conflictingRules
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|conflictingRules
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|overlappingRules
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|overlappingRules
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|overlappingRules
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
specifier|final
name|NodeState
name|overlappingRules2
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
name|of
argument_list|(
literal|"/content"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|overlappingRules2
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|overlappingRules2
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRespectPathBoundariesForIncludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"football"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRespectPathBoundariesForExcludes
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
name|assertMissingChildNodeName
argument_list|(
name|decorated
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertExistingChildNodeName
argument_list|(
name|decorated
operator|.
name|getChildNode
argument_list|(
literal|"content"
argument_list|)
argument_list|,
literal|"football"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDelegatePropertyCount
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo/de"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content"
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content/foo"
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDelegateGetProperty
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|NodeState
name|content
init|=
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
operator|.
name|getProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|content
operator|.
name|getProperty
argument_list|(
literal|"nonexisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldDelegateHasProperty
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo/de"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content"
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
block|{
specifier|final
name|NodeState
name|decorated
init|=
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|rootNodeState
argument_list|,
literal|null
argument_list|,
name|of
argument_list|(
literal|"/content/foo"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/content should exist and be visible"
argument_list|,
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"/content/foo should be hidden"
argument_list|,
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/content/foo"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"/nonexisting should not exist"
argument_list|,
name|getNodeState
argument_list|(
name|decorated
argument_list|,
literal|"/nonexisting"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertExistingHasChildNode
parameter_list|(
name|NodeState
name|decorated
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"should have child \""
operator|+
name|name
operator|+
literal|"\""
argument_list|,
name|decorated
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMissingHasChildNode
parameter_list|(
name|NodeState
name|decorated
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"should not have child \""
operator|+
name|name
operator|+
literal|"\""
argument_list|,
name|decorated
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertExistingChildNodeName
parameter_list|(
name|NodeState
name|decorated
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|decorated
operator|.
name|getChildNodeNames
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should list child \""
operator|+
name|name
operator|+
literal|"\""
argument_list|,
name|Iterables
operator|.
name|contains
argument_list|(
name|childNodeNames
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMissingChildNodeName
parameter_list|(
name|NodeState
name|decorated
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|decorated
operator|.
name|getChildNodeNames
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"should not list child \""
operator|+
name|name
operator|+
literal|"\""
argument_list|,
name|Iterables
operator|.
name|contains
argument_list|(
name|childNodeNames
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

