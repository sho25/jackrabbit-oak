begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|QueryEngineSettingsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|WhiteboardUtilsTest
block|{
specifier|private
name|List
argument_list|<
name|Registration
argument_list|>
name|regs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|unregisterRegs
parameter_list|()
block|{
operator|new
name|CompositeRegistration
argument_list|(
name|regs
argument_list|)
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|jmxBeanRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
decl_stmt|;
name|Hello
name|hello
init|=
operator|new
name|Hello
argument_list|()
decl_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|HelloMBean
operator|.
name|class
argument_list|,
name|hello
argument_list|,
literal|"test"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.jackrabbit.oak:type=test,name=hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|jmxBeanRegistrationDuplicate
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
decl_stmt|;
name|Hello
name|hello
init|=
operator|new
name|Hello
argument_list|()
decl_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|HelloMBean
operator|.
name|class
argument_list|,
name|hello
argument_list|,
literal|"test"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Second one would trigger a warning log but no affect on caller
name|regs
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|HelloMBean
operator|.
name|class
argument_list|,
name|hello
argument_list|,
literal|"test"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.jackrabbit.oak:type=test,name=hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stdMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
decl_stmt|;
name|Hello
name|hello
init|=
operator|new
name|HelloTest
argument_list|()
decl_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|HelloMBean
operator|.
name|class
argument_list|,
name|hello
argument_list|,
literal|"test"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.jackrabbit.oak:type=test,name=hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
decl_stmt|;
name|QueryEngineSettings
name|settings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|regs
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|QueryEngineSettingsMBean
operator|.
name|class
argument_list|,
name|settings
argument_list|,
literal|"query"
argument_list|,
literal|"settings"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|server
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.jackrabbit.oak:type=query,name=settings"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scheduledJobWithPoolName
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|props
operator|.
name|set
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|service
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|wb
argument_list|,
operator|new
name|TestRunnable
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|props
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"scheduler.threadPool"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|wb
argument_list|,
operator|new
name|TestRunnable
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|props
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"scheduler.threadPool"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SINGLE"
argument_list|,
name|props
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"scheduler.runOn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scheduledJobWithExtraProps
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|props
operator|.
name|set
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|service
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|wb
argument_list|,
operator|new
name|TestRunnable
argument_list|()
argument_list|,
name|config
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|props
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"scheduler.threadPool"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|props
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
interface|interface
name|HelloMBean
block|{
name|boolean
name|isRunning
parameter_list|()
function_decl|;
name|int
name|getCount
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|Hello
implements|implements
name|HelloMBean
block|{
name|int
name|count
decl_stmt|;
name|boolean
name|running
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HelloTest
extends|extends
name|Hello
block|{      }
specifier|private
specifier|static
class|class
name|TestRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{          }
block|}
block|}
end_class

end_unit

