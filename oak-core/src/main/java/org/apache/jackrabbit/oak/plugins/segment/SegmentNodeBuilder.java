begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
class|class
name|SegmentNodeBuilder
extends|extends
name|MemoryNodeBuilder
block|{
specifier|protected
name|NodeState
name|base
decl_stmt|;
specifier|protected
name|long
name|baseRevision
decl_stmt|;
specifier|protected
name|SegmentNodeBuilder
parameter_list|(
name|SegmentNodeState
name|base
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|baseRevision
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|SegmentNodeBuilder
parameter_list|(
name|SegmentNodeBuilder
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|parent
operator|.
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseRevision
operator|=
name|parent
operator|.
name|baseRevision
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SegmentNodeBuilder
name|createChildBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|SegmentNodeBuilder
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getBaseState
parameter_list|()
block|{
comment|// TODO: Use the head mechanism in MemoryNodeBuilder instead of
comment|// overriding base state tracking
if|if
condition|(
name|baseRevision
operator|!=
operator|(
operator|(
name|SegmentNodeBuilder
operator|)
name|rootBuilder
operator|)
operator|.
name|baseRevision
condition|)
block|{
name|base
operator|=
name|parent
operator|.
name|getBaseState
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|baseRevision
operator|=
operator|(
operator|(
name|SegmentNodeBuilder
operator|)
name|rootBuilder
operator|)
operator|.
name|baseRevision
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
block|}
end_class

end_unit

