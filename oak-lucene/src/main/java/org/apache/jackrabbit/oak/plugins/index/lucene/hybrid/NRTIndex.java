begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|LuceneIndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|IndexWriterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|LuceneIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|HistogramStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|AnalyzingInfixSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|DirectoryUtils
operator|.
name|dirSize
import|;
end_import

begin_class
specifier|public
class|class
name|NRTIndex
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NRTIndex
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Prefix used for naming the directory created for NRT indexes      */
specifier|public
specifier|static
specifier|final
name|String
name|NRT_DIR_PREFIX
init|=
literal|"nrt-"
decl_stmt|;
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
specifier|final
name|IndexCopier
name|indexCopier
decl_stmt|;
specifier|private
specifier|final
name|IndexUpdateListener
name|refreshPolicy
decl_stmt|;
specifier|private
specifier|final
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|refreshTimer
decl_stmt|;
specifier|private
specifier|final
name|HistogramStats
name|sizeHisto
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
operator|.
name|Context
name|openTime
decl_stmt|;
specifier|private
specifier|final
name|NRTDirectoryFactory
name|directoryFactory
decl_stmt|;
specifier|private
name|NRTIndex
name|previous
decl_stmt|;
specifier|private
name|IndexWriter
name|indexWriter
decl_stmt|;
specifier|private
name|NRTIndexWriter
name|nrtIndexWriter
decl_stmt|;
specifier|private
name|File
name|indexDir
decl_stmt|;
specifier|private
name|Directory
name|directory
decl_stmt|;
specifier|private
name|DirectoryReader
name|dirReader
decl_stmt|;
specifier|private
name|DirectoryReader
name|dirReaderUsedForPrevious
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|boolean
name|previousModeEnabled
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IndexReader
argument_list|>
name|openedReaders
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|assertAllReadersClosed
decl_stmt|;
specifier|public
name|NRTIndex
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|IndexCopier
name|indexCopier
parameter_list|,
name|IndexUpdateListener
name|refreshPolicy
parameter_list|,
annotation|@
name|Nullable
name|NRTIndex
name|previous
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|,
name|NRTDirectoryFactory
name|directoryFactory
parameter_list|,
name|boolean
name|assertAllReadersClosed
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
name|this
operator|.
name|indexCopier
operator|=
name|indexCopier
expr_stmt|;
name|this
operator|.
name|refreshPolicy
operator|=
name|refreshPolicy
expr_stmt|;
name|this
operator|.
name|previous
operator|=
name|previous
expr_stmt|;
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
name|this
operator|.
name|directoryFactory
operator|=
name|directoryFactory
expr_stmt|;
name|this
operator|.
name|assertAllReadersClosed
operator|=
name|assertAllReadersClosed
expr_stmt|;
name|this
operator|.
name|openedReaders
operator|=
name|assertAllReadersClosed
condition|?
operator|new
name|LinkedList
argument_list|<>
argument_list|()
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|refreshTimer
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|metricName
argument_list|(
literal|"REFRESH_TIME"
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|sizeHisto
operator|=
name|statisticsProvider
operator|.
name|getHistogram
argument_list|(
name|metricName
argument_list|(
literal|"SIZE"
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|openTime
operator|=
name|statisticsProvider
operator|.
name|getTimer
argument_list|(
name|metricName
argument_list|(
literal|"OPEN_TIME"
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
operator|.
name|time
argument_list|()
expr_stmt|;
block|}
comment|/**      * Note that this method is called from a different NRTIndex instance getReaders      * call. So "dirReader" instance changed here is different      */
annotation|@
name|Nullable
specifier|private
name|LuceneIndexReader
name|getPrimaryReader
parameter_list|()
block|{
name|DirectoryReader
name|latestReader
init|=
name|createReader
argument_list|(
name|dirReaderUsedForPrevious
argument_list|)
decl_stmt|;
while|while
condition|(
name|latestReader
operator|!=
literal|null
operator|&&
operator|!
name|latestReader
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
name|latestReader
operator|=
name|createReader
argument_list|(
name|dirReaderUsedForPrevious
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|latestReader
operator|!=
name|dirReaderUsedForPrevious
condition|)
block|{
name|decrementReaderUseCount
argument_list|(
name|dirReaderUsedForPrevious
argument_list|)
expr_stmt|;
name|dirReaderUsedForPrevious
operator|=
name|latestReader
expr_stmt|;
block|}
return|return
name|latestReader
operator|!=
literal|null
condition|?
operator|new
name|NRTReader
argument_list|(
name|latestReader
argument_list|,
name|directory
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|LuceneIndexWriter
name|getWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrtIndexWriter
operator|==
literal|null
condition|)
block|{
name|nrtIndexWriter
operator|=
name|createWriter
argument_list|()
expr_stmt|;
block|}
return|return
name|nrtIndexWriter
return|;
block|}
comment|/**      * Returns the list of LuceneIndexReader. If the writer has not received      * any updates between 2 calls to this method then same list would be      * returned.      */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|getReaders
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
name|previousModeEnabled
argument_list|)
expr_stmt|;
name|DirectoryReader
name|latestReader
init|=
name|createReader
argument_list|(
name|dirReader
argument_list|)
decl_stmt|;
comment|//reader not changed i.e. no change in index
comment|//reuse old readers
if|if
condition|(
name|latestReader
operator|==
name|dirReader
operator|&&
name|readers
operator|!=
literal|null
condition|)
block|{
return|return
name|readers
return|;
block|}
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|newReaders
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|latestReader
operator|!=
literal|null
condition|)
block|{
name|newReaders
operator|.
name|add
argument_list|(
operator|new
name|NRTReader
argument_list|(
name|latestReader
argument_list|,
name|directory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Old reader should be added later
name|LuceneIndexReader
name|previousReader
init|=
name|previous
operator|!=
literal|null
condition|?
name|previous
operator|.
name|getPrimaryReader
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|previousReader
operator|!=
literal|null
condition|)
block|{
name|newReaders
operator|.
name|add
argument_list|(
name|previousReader
argument_list|)
expr_stmt|;
block|}
name|decrementReaderUseCount
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|dirReader
operator|=
name|latestReader
expr_stmt|;
name|readers
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|newReaders
argument_list|)
expr_stmt|;
return|return
name|readers
return|;
block|}
specifier|public
name|ReaderRefreshPolicy
name|getRefreshPolicy
parameter_list|()
block|{
return|return
name|refreshPolicy
return|;
block|}
comment|/**      * Disconnects the previous reader used by this NRTIndex. Note that this would be      * different from 'dirReaderUsedForPrevious' which is meant to be used by newer NRTIndex      * which refers to this NRTIndex as previous      */
specifier|public
name|void
name|disconnectPrevious
parameter_list|()
block|{
name|decrementReaderUseCount
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|readers
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
comment|//From now onwards no caller should be invoked getReaders
comment|//only call for getPrimaryReader would be allowed
name|previousModeEnabled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Closing NRTIndex [{}]"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|decrementReaderUseCount
argument_list|(
name|dirReaderUsedForPrevious
argument_list|)
expr_stmt|;
comment|//'readers' already has dirReader so no need to close it explicitly
name|decrementReaderUseCount
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|assertAllReadersAreClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
comment|//TODO Close call can possibly be speeded up by
comment|//avoiding merge and dropping stuff in memory. To be explored
comment|//indexWrite.close(waitForMerges)
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|sizeHisto
operator|.
name|update
argument_list|(
name|dirSize
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Removed directory [{}]"
argument_list|,
name|this
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
comment|//Null the reference to previous so as to let it
comment|//garbage collect. It would not be accessed post close
name|previous
operator|=
literal|null
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|openTime
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
name|NRTIndex
name|getPrevious
parameter_list|()
block|{
return|return
name|previous
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s)"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|//For test
name|File
name|getIndexDir
parameter_list|()
block|{
return|return
name|indexDir
return|;
block|}
specifier|private
name|String
name|getName
parameter_list|()
block|{
return|return
name|indexDir
operator|!=
literal|null
condition|?
name|indexDir
operator|.
name|getName
argument_list|()
else|:
literal|"UNKNOWN"
return|;
block|}
specifier|private
name|void
name|assertAllReadersAreClosed
parameter_list|()
block|{
for|for
control|(
name|IndexReader
name|r
range|:
name|openedReaders
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRefCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unclosed reader found with refCount %d for index %s"
argument_list|,
name|r
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|decrementReaderUseCount
parameter_list|(
annotation|@
name|Nullable
name|List
argument_list|<
name|LuceneIndexReader
argument_list|>
name|readers
parameter_list|)
block|{
if|if
condition|(
name|readers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LuceneIndexReader
name|r
range|:
name|readers
control|)
block|{
name|decrementReaderUseCount
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|decrementReaderUseCount
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Error occurred while releasing reader instance {}"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If index was updated then a new reader would be returned otherwise      * existing reader would be returned      */
annotation|@
name|Nullable
specifier|private
specifier|synchronized
name|DirectoryReader
name|createReader
parameter_list|(
name|DirectoryReader
name|dirReader
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|closed
argument_list|)
expr_stmt|;
comment|//Its possible that readers are obtained
comment|//before anything gets indexed
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DirectoryReader
name|result
init|=
name|dirReader
decl_stmt|;
try|try
block|{
name|TimerStats
operator|.
name|Context
name|ctx
init|=
name|refreshTimer
operator|.
name|time
argument_list|()
decl_stmt|;
comment|//applyDeletes is false as layers above would take care of
comment|//stale result
if|if
condition|(
name|dirReader
operator|==
literal|null
operator|||
name|dirReader
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DirectoryReader
name|newReader
init|=
name|DirectoryReader
operator|.
name|openIfChanged
argument_list|(
name|dirReader
argument_list|,
name|indexWriter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReader
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|newReader
expr_stmt|;
block|}
block|}
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|assertAllReadersClosed
operator|&&
name|result
operator|!=
literal|null
operator|&&
name|result
operator|!=
name|dirReader
condition|)
block|{
name|openedReaders
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error opening index [{}]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|synchronized
name|NRTIndexWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|generateDirName
argument_list|()
decl_stmt|;
name|indexDir
operator|=
name|indexCopier
operator|.
name|getIndexDir
argument_list|(
name|definition
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|directory
operator|=
name|directoryFactory
operator|.
name|createNRTDir
argument_list|(
name|definition
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|config
init|=
name|IndexWriterUtils
operator|.
name|getIndexWriterConfig
argument_list|(
name|definition
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//TODO Explore following for optimizing indexing speed
comment|//config.setUseCompoundFile(false);
comment|//config.setRAMBufferSizeMB(1024*1024*25);
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Created NRTIndex [{}]"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|NRTIndexWriter
argument_list|(
name|indexWriter
argument_list|)
return|;
block|}
name|IndexReader
name|getPrimaryReaderForTest
parameter_list|()
block|{
return|return
name|getReaders
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReader
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|generateDirName
parameter_list|()
block|{
name|long
name|uniqueCount
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|COUNTER
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
return|return
name|NRT_DIR_PREFIX
operator|+
name|uniqueCount
return|;
block|}
specifier|private
specifier|static
class|class
name|NRTReader
implements|implements
name|LuceneIndexReader
block|{
specifier|private
specifier|final
name|IndexReader
name|indexReader
decl_stmt|;
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
specifier|public
name|NRTReader
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|Directory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|indexReader
operator|=
name|checkNotNull
argument_list|(
name|indexReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexReader
name|getReader
parameter_list|()
block|{
return|return
name|indexReader
return|;
block|}
annotation|@
name|Override
specifier|public
name|AnalyzingInfixSuggester
name|getLookup
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Directory
name|getSuggestDirectory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getIndexSize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dirSize
argument_list|(
name|directory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{          }
block|}
specifier|private
class|class
name|NRTIndexWriter
implements|implements
name|LuceneIndexWriter
block|{
specifier|private
specifier|final
name|IndexWriter
name|indexWriter
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|updateMeter
decl_stmt|;
specifier|public
name|NRTIndexWriter
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|)
block|{
name|this
operator|.
name|indexWriter
operator|=
name|indexWriter
expr_stmt|;
name|this
operator|.
name|updateMeter
operator|=
name|statisticsProvider
operator|.
name|getMeter
argument_list|(
name|metricName
argument_list|(
literal|"UPDATES"
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateDocument
parameter_list|(
name|String
name|path
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//For NRT case documents are never updated
comment|//instead they are just added. This would cause duplicates
comment|//That should be taken care at query side via unique cursor
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|refreshPolicy
operator|.
name|updated
argument_list|()
expr_stmt|;
name|updateMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Do not delete documents. Query side would handle it
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|close
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Close should not be called"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|metricName
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s_NRT_%s"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|,
name|suffix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

