begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|FileStoreMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|RemoteStoreMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentArchiveReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
class|class
name|FileStoreProcBackend
implements|implements
name|Backend
block|{
specifier|private
specifier|final
name|AbstractFileStore
name|fileStore
decl_stmt|;
specifier|private
specifier|final
name|SegmentNodeStorePersistence
name|persistence
decl_stmt|;
specifier|private
specifier|final
name|SegmentArchiveManager
name|archiveManager
decl_stmt|;
name|FileStoreProcBackend
parameter_list|(
name|AbstractFileStore
name|fileStore
parameter_list|,
name|SegmentNodeStorePersistence
name|persistence
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fileStore
operator|=
name|fileStore
expr_stmt|;
name|this
operator|.
name|persistence
operator|=
name|persistence
expr_stmt|;
name|this
operator|.
name|archiveManager
operator|=
name|persistence
operator|.
name|createArchiveManager
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|IOMonitorAdapter
argument_list|()
argument_list|,
operator|new
name|FileStoreMonitorAdapter
argument_list|()
argument_list|,
operator|new
name|RemoteStoreMonitorAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tarExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|archiveManager
operator|.
name|listArchives
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Long
argument_list|>
name|getTarSize
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
init|(
name|SegmentArchiveReader
name|reader
init|=
name|archiveManager
operator|.
name|open
argument_list|(
name|name
argument_list|)
init|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|reader
argument_list|)
operator|.
name|map
argument_list|(
name|SegmentArchiveReader
operator|::
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getTarNames
parameter_list|()
block|{
try|try
block|{
return|return
name|archiveManager
operator|.
name|listArchives
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|segmentExists
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|segmentId
parameter_list|)
block|{
try|try
init|(
name|SegmentArchiveReader
name|reader
init|=
name|archiveManager
operator|.
name|open
argument_list|(
name|name
argument_list|)
init|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|segmentExists
argument_list|(
name|reader
argument_list|,
name|UUID
operator|.
name|fromString
argument_list|(
name|segmentId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|segmentExists
parameter_list|(
name|SegmentArchiveReader
name|reader
parameter_list|,
name|UUID
name|id
parameter_list|)
block|{
return|return
name|reader
operator|.
name|containsSegment
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getSegmentIds
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
init|(
name|SegmentArchiveReader
name|reader
init|=
name|archiveManager
operator|.
name|open
argument_list|(
name|name
argument_list|)
init|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|getSegmentIds
argument_list|(
name|reader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getSegmentIds
parameter_list|(
name|SegmentArchiveReader
name|reader
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentArchiveEntry
name|entry
range|:
name|reader
operator|.
name|listSegments
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|entry
operator|.
name|getMsb
argument_list|()
argument_list|,
name|entry
operator|.
name|getLsb
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
argument_list|>
name|readSegment
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
argument_list|>
name|readSegment
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|fileStore
operator|.
name|getSegmentIdProvider
argument_list|()
operator|.
name|newSegmentId
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
argument_list|>
name|readSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|fileStore
operator|.
name|readSegment
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Segment
argument_list|>
name|getSegment
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|id
argument_list|)
operator|.
name|map
argument_list|(
name|segment
lambda|->
operator|new
name|Segment
argument_list|()
block|{
block|@Override             public int getGeneration(
argument_list|)
block|{
return|return
name|segment
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getGeneration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFullGeneration
parameter_list|()
block|{
return|return
name|segment
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|getFullGeneration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCompacted
parameter_list|()
block|{
return|return
name|segment
operator|.
name|getGcGeneration
argument_list|()
operator|.
name|isCompacted
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|segment
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|SegmentVersion
operator|.
name|asByte
argument_list|(
name|segment
operator|.
name|getSegmentVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDataSegment
parameter_list|()
block|{
return|return
name|segment
operator|.
name|getSegmentId
argument_list|()
operator|.
name|isDataSegmentId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getInfo
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|segment
operator|.
name|getSegmentInfo
argument_list|()
argument_list|)
return|;
block|}
block|}
block|)
class|;
end_class

begin_function
unit|}      @
name|Override
specifier|public
name|Optional
argument_list|<
name|InputStream
argument_list|>
name|getSegmentData
parameter_list|(
name|String
name|segmentId
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|segmentId
argument_list|)
operator|.
name|map
argument_list|(
name|segment
lambda|->
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|segment
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSegmentReferences
parameter_list|(
name|String
name|segmentId
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|segmentId
argument_list|)
operator|.
name|map
argument_list|(
name|segment
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|segment
operator|.
name|getReferencedSegmentIdCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segment
operator|.
name|getReferencedSegmentIdCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|references
operator|.
name|add
argument_list|(
name|segment
operator|.
name|getReferencedSegmentId
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|references
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Iterable
argument_list|<
name|Record
argument_list|>
argument_list|>
name|getSegmentRecords
parameter_list|(
name|String
name|segmentId
parameter_list|)
block|{
return|return
name|readSegment
argument_list|(
name|segmentId
argument_list|)
operator|.
name|map
argument_list|(
name|segment
lambda|->
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|segment
operator|.
name|forEachRecord
argument_list|(
parameter_list|(
name|number
parameter_list|,
name|type
parameter_list|,
name|offset
parameter_list|)
lambda|->
block|{
name|records
operator|.
name|add
argument_list|(
operator|new
name|Record
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSegmentId
parameter_list|()
block|{
return|return
name|segmentId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAddress
parameter_list|()
block|{
return|return
name|segment
operator|.
name|getAddress
argument_list|(
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|NodeState
argument_list|>
name|getRoot
parameter_list|()
block|{
if|if
condition|(
name|RecordType
operator|.
name|NODE
operator|==
name|type
condition|)
block|{
name|RecordId
name|id
init|=
operator|new
name|RecordId
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|number
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|fileStore
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|records
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|commitExists
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
name|long
name|timestamp
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|handle
argument_list|)
decl_stmt|;
try|try
init|(
name|JournalReader
name|reader
init|=
operator|new
name|JournalReader
argument_list|(
name|persistence
operator|.
name|getJournalFile
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|JournalEntry
name|entry
range|:
name|iterable
argument_list|(
name|reader
argument_list|)
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getTimestamp
argument_list|()
operator|==
name|timestamp
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|i
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
name|i
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getCommitHandles
parameter_list|()
block|{
try|try
init|(
name|JournalReader
name|reader
init|=
operator|new
name|JournalReader
argument_list|(
name|persistence
operator|.
name|getJournalFile
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|handles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JournalEntry
name|entry
range|:
name|iterable
argument_list|(
name|reader
argument_list|)
control|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|handles
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Commit
argument_list|>
name|getCommit
parameter_list|(
name|String
name|handle
parameter_list|)
block|{
name|JournalEntry
name|entry
decl_stmt|;
try|try
init|(
name|JournalReader
name|reader
init|=
operator|new
name|JournalReader
argument_list|(
name|persistence
operator|.
name|getJournalFile
argument_list|()
argument_list|)
init|)
block|{
name|entry
operator|=
name|getEntry
argument_list|(
name|reader
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|Commit
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getRevision
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|NodeState
argument_list|>
name|getRoot
parameter_list|()
block|{
name|RecordId
name|id
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|fileStore
operator|.
name|getSegmentIdProvider
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|fileStore
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|JournalEntry
name|getEntry
parameter_list|(
name|JournalReader
name|reader
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
for|for
control|(
name|JournalEntry
name|entry
range|:
name|iterable
argument_list|(
name|reader
argument_list|)
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getTimestamp
argument_list|()
operator|==
name|timestamp
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

