begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|IndexDefinitionPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
operator|.
name|stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_class
specifier|public
class|class
name|IndexDefinitionUpdater
block|{
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
name|IndexDefinitionUpdater
parameter_list|()
block|{
name|store
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
comment|// initialize as a JCR repo to register namespaces and create initial index structure (/oak:index for our use)
operator|new
name|Jcr
argument_list|(
name|store
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|accepts
argument_list|(
literal|"in"
argument_list|,
literal|"input index definition file"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|required
argument_list|()
expr_stmt|;
name|parser
operator|.
name|accepts
argument_list|(
literal|"out"
argument_list|,
literal|"output index definition file"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
expr_stmt|;
name|parser
operator|.
name|accepts
argument_list|(
literal|"initializer"
argument_list|,
literal|"implementation of RepositoryInitializer to update index definitions"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|required
argument_list|()
expr_stmt|;
name|OptionSet
name|optionSet
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|optionSet
operator|.
name|has
argument_list|(
literal|"in"
argument_list|)
argument_list|,
literal|"input index definition must be provided"
argument_list|)
expr_stmt|;
name|String
name|inFilePath
init|=
name|optionSet
operator|.
name|valueOf
argument_list|(
literal|"in"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|optionSet
operator|.
name|has
argument_list|(
literal|"initializer"
argument_list|)
argument_list|,
literal|"initializer class must be provided"
argument_list|)
expr_stmt|;
name|String
name|initializerClassName
init|=
name|optionSet
operator|.
name|valueOf
argument_list|(
literal|"initializer"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Class
name|repoInitClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|initializerClassName
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|repoInitClazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|obj
operator|instanceof
name|RepositoryInitializer
argument_list|,
name|repoInitClazz
operator|+
literal|" is not a RepositoryInitializer"
argument_list|)
expr_stmt|;
name|String
name|outFilePath
init|=
name|optionSet
operator|.
name|has
argument_list|(
literal|"out"
argument_list|)
condition|?
name|optionSet
operator|.
name|valueOf
argument_list|(
literal|"out"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
operator|new
name|IndexDefinitionUpdater
argument_list|()
operator|.
name|process
argument_list|(
name|inFilePath
argument_list|,
name|outFilePath
argument_list|,
operator|(
name|RepositoryInitializer
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|String
name|inFilePath
parameter_list|,
name|String
name|outFilePath
parameter_list|,
name|RepositoryInitializer
name|initializer
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeState
name|before
init|=
name|setupBaseState
argument_list|(
name|inFilePath
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
name|applyInitializer
argument_list|(
name|before
operator|.
name|builder
argument_list|()
argument_list|,
name|initializer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reindexingDefPaths
init|=
name|getReindexIndexPaths
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reindexingLuceneDefPaths
init|=
name|getLuceneIndexPaths
argument_list|(
name|reindexingDefPaths
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFilePath
operator|!=
literal|null
condition|)
block|{
name|writeReindexingLuceneDefs
argument_list|(
name|outFilePath
argument_list|,
name|reindexingLuceneDefPaths
argument_list|)
expr_stmt|;
block|}
name|dumpIndexDiff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|reindexingDefPaths
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|setupBaseState
parameter_list|(
name|String
name|inFilePath
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
operator|.
name|IndexDefinitionUpdater
name|indexDefinitionUpdater
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
operator|.
name|IndexDefinitionUpdater
argument_list|(
operator|new
name|File
argument_list|(
name|inFilePath
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|oiBuilder
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexDefinitionUpdater
operator|.
name|getIndexPaths
argument_list|()
control|)
block|{
name|oiBuilder
operator|.
name|setChildNode
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|indexPath
argument_list|)
argument_list|,
name|indexDefinitionUpdater
operator|.
name|getIndexState
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|merge
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|applyInitializer
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|RepositoryInitializer
name|initializer
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|initializer
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|merge
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeReindexingLuceneDefs
parameter_list|(
name|String
name|outFilePath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|reindexingLuceneDefPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexPathService
name|indexPathService
init|=
parameter_list|()
lambda|->
name|reindexingLuceneDefPaths
decl_stmt|;
name|IndexDefinitionPrinter
name|printer
init|=
operator|new
name|IndexDefinitionPrinter
argument_list|(
name|store
argument_list|,
name|indexPathService
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|FileUtils
operator|.
name|openOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|outFilePath
argument_list|)
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|printer
operator|.
name|print
argument_list|(
name|pw
argument_list|,
name|Format
operator|.
name|JSON
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getReindexIndexPaths
parameter_list|()
block|{
return|return
name|stream
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|filter
argument_list|(
name|cne
lambda|->
operator|!
name|cne
operator|.
name|getNodeState
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
operator|||
name|cne
operator|.
name|getNodeState
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|cne
lambda|->
name|cne
operator|.
name|getNodeState
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
name|cne
lambda|->
name|cne
operator|.
name|getNodeState
argument_list|()
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|cne
lambda|->
literal|"/"
operator|+
name|INDEX_DEFINITIONS_NAME
operator|+
literal|"/"
operator|+
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getLuceneIndexPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|indexDefPaths
parameter_list|)
block|{
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
return|return
name|indexDefPaths
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|path
lambda|->
literal|"lucene"
operator|.
name|equals
argument_list|(
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
operator|.
name|getString
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|merge
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|store
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|private
name|void
name|dumpIndexDiff
parameter_list|(
name|NodeState
name|beforeRoot
parameter_list|,
name|NodeState
name|afterRoot
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|reindexingLuceneDefPaths
parameter_list|)
block|{
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|indexPath
range|:
name|reindexingLuceneDefPaths
control|)
block|{
name|NodeState
name|before
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|beforeRoot
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|NodeState
name|after
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|afterRoot
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"------ "
operator|+
name|indexPath
operator|+
literal|" --------"
argument_list|)
expr_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|VisibleChangesDiff
argument_list|(
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|VisibleChangesDiff
implements|implements
name|NodeStateDiff
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"  "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Blob
argument_list|,
name|String
argument_list|>
name|BLOB_LENGTH
init|=
operator|new
name|Function
argument_list|<
name|Blob
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
return|return
name|safeGetLength
argument_list|(
name|b
argument_list|)
return|;
block|}
specifier|private
name|String
name|safeGetLength
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
try|try
block|{
return|return
name|byteCountToDisplaySize
argument_list|(
name|b
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// missing BlobStore probably
block|}
return|return
literal|"[N/A]"
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|pw
decl_stmt|;
specifier|private
specifier|final
name|String
name|indent
decl_stmt|;
specifier|private
name|boolean
name|isRoot
decl_stmt|;
name|VisibleChangesDiff
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|this
argument_list|(
name|pw
argument_list|,
name|INDENT
argument_list|)
expr_stmt|;
name|isRoot
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|VisibleChangesDiff
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|this
operator|.
name|pw
operator|=
name|pw
expr_stmt|;
name|this
operator|.
name|indent
operator|=
name|indent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|after
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"+ "
operator|+
name|toString
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"reindex"
argument_list|)
operator|&&
name|isRoot
condition|)
block|{
comment|// don't care if reindex changed on top level
return|return
literal|true
return|;
block|}
if|if
condition|(
name|before
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|propertyAdded
argument_list|(
name|after
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|after
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|propertyDeleted
argument_list|(
name|before
argument_list|)
return|;
block|}
else|else
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"^ "
operator|+
name|before
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"  - "
operator|+
name|toString
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"  + "
operator|+
name|toString
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|before
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"- "
operator|+
name|toString
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"+ "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|EMPTY_NODE
argument_list|,
operator|new
name|VisibleChangesDiff
argument_list|(
name|pw
argument_list|,
name|indent
operator|+
name|INDENT
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|boolean
name|ret
decl_stmt|;
try|try
init|(
name|PrintWriter
name|subPw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
init|)
block|{
name|ret
operator|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|VisibleChangesDiff
argument_list|(
name|subPw
argument_list|,
name|indent
operator|+
name|INDENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"^ "
operator|+
name|name
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|pw
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"- "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|MISSING_NODE
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|VisibleChangesDiff
argument_list|(
name|pw
argument_list|,
name|indent
operator|+
name|INDENT
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|PropertyState
name|ps
parameter_list|)
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|val
operator|.
name|append
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|BINARY
condition|)
block|{
name|String
name|v
init|=
name|BLOB_LENGTH
operator|.
name|apply
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|)
argument_list|)
decl_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|" = {"
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|BINARIES
condition|)
block|{
name|String
name|v
init|=
name|stream
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|BLOB_LENGTH
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|val
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|ps
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] = "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ps
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|ps
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] = "
argument_list|)
operator|.
name|append
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ps
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|ps
operator|.
name|getType
argument_list|()
operator|+
literal|">"
operator|+
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

