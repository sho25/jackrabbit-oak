begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|fulltext
package|;
end_package

begin_comment
comment|/**  * A group of full-text expressions that reflects a "contains(...)" expression,  * and allows to access the original (unparsed) full text term.  */
end_comment

begin_class
specifier|public
class|class
name|FullTextContains
extends|extends
name|FullTextExpression
block|{
specifier|private
specifier|final
name|String
name|propertyName
decl_stmt|;
specifier|private
specifier|final
name|String
name|rawText
decl_stmt|;
specifier|private
specifier|final
name|FullTextExpression
name|base
decl_stmt|;
specifier|public
name|FullTextContains
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|rawText
parameter_list|,
name|FullTextExpression
name|base
parameter_list|)
block|{
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|rawText
operator|=
name|rawText
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrecedence
parameter_list|()
block|{
return|return
name|base
operator|.
name|getPrecedence
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|base
operator|.
name|evaluate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
name|FullTextExpression
name|simplify
parameter_list|()
block|{
name|FullTextExpression
name|s
init|=
name|base
operator|.
name|simplify
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|base
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
operator|new
name|FullTextContains
argument_list|(
name|propertyName
argument_list|,
name|rawText
argument_list|,
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|base
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|FullTextVisitor
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|FullTextExpression
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
specifier|public
name|String
name|getRawText
parameter_list|()
block|{
return|return
name|rawText
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNot
parameter_list|()
block|{
return|return
name|base
operator|.
name|isNot
argument_list|()
return|;
block|}
block|}
end_class

end_unit

