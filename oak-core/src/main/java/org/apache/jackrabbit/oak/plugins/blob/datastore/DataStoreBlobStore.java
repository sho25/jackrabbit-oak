begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|transform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|MultiDataStoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * BlobStore wrapper for DataStore. Wraps Jackrabbit 2 DataStore and expose them as BlobStores  * It also handles inlining binaries if there size is smaller than  * {@link org.apache.jackrabbit.core.data.DataStore#getMinRecordLength()}  */
end_comment

begin_class
specifier|public
class|class
name|DataStoreBlobStore
implements|implements
name|DataStore
implements|,
name|SharedDataStore
implements|,
name|BlobStore
implements|,
name|GarbageCollectableBlobStore
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DataStore
name|delegate
decl_stmt|;
comment|/**      * If set to true then the blob length information would be encoded as part of blobId      * and thus no extra call would be made to DataStore to determine the length      *      *<b>Implementation Note</b>If enabled the length would be encoded in blobid by appending it at the end.      * This would be done for the methods which are part of BlobStore and GarbageCollectableBlobStore interface      *      * DataIdentifiers which are part of DataStore would not be affected by this as DataStore interface      * is not used in Oak and all access is via BlobStore interface      */
specifier|private
specifier|final
name|boolean
name|encodeLengthInId
decl_stmt|;
specifier|protected
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|cache
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_SIZE
init|=
literal|16
decl_stmt|;
comment|/**      * Max size of binary whose content would be cached. We keep it greater than      * Lucene blob size OakDirectory#BLOB_SIZE such that Lucene index blobs are cached      */
specifier|private
name|int
name|maxCachedBinarySize
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
name|DataStoreBlobStore
parameter_list|(
name|DataStore
name|delegate
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
literal|true
argument_list|,
name|DEFAULT_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataStoreBlobStore
parameter_list|(
name|DataStore
name|delegate
parameter_list|,
name|boolean
name|encodeLengthInId
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
name|encodeLengthInId
argument_list|,
name|DEFAULT_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataStoreBlobStore
parameter_list|(
name|DataStore
name|delegate
parameter_list|,
name|boolean
name|encodeLengthInId
parameter_list|,
name|int
name|cacheSizeInMB
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|encodeLengthInId
operator|=
name|encodeLengthInId
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|CacheLIRS
operator|.
expr|<
name|String
operator|,
name|byte
index|[]
operator|>
name|newBuilder
argument_list|()
operator|.
name|module
argument_list|(
literal|"DataStoreBlobStore"
argument_list|)
operator|.
name|maximumWeight
argument_list|(
operator|(
name|long
operator|)
name|cacheSizeInMB
operator|*
name|FileUtils
operator|.
name|ONE_MB
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|estimateMemoryUsage
argument_list|(
name|key
argument_list|)
operator|+
name|value
operator|.
name|length
return|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|//~----------------------------------< DataStore>
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordIfStored
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|isInMemoryRecord
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
return|return
name|getDataRecord
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|delegate
operator|.
name|getRecordIfStored
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|isInMemoryRecord
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
return|return
name|getDataRecord
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|delegate
operator|.
name|getRecord
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordFromReference
parameter_list|(
name|String
name|reference
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|delegate
operator|.
name|getRecordFromReference
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|addRecord
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
return|return
name|writeStream
argument_list|(
name|stream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateModifiedDateOnAccess
parameter_list|(
name|long
name|before
parameter_list|)
block|{
name|delegate
operator|.
name|updateModifiedDateOnAccess
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|deleteAllOlderThan
parameter_list|(
name|long
name|min
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|delegate
operator|.
name|deleteAllOlderThan
argument_list|(
name|min
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|delegate
operator|.
name|getAllIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"DataStore cannot be initialized again"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getMinRecordLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
comment|//~-------------------------------------------< BlobStore>
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|checkNotNull
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|DataRecord
name|dr
init|=
name|writeStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getBlobId
argument_list|(
name|dr
argument_list|)
decl_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
return|return
name|id
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//DataStore does not closes the stream internally
comment|//So close the stream explicitly
name|Closeables
operator|.
name|close
argument_list|(
name|stream
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|encodedBlobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|//This is inefficient as repeated calls for same blobId would involve opening new Stream
comment|//instead clients should directly access the stream from DataRecord by special casing for
comment|//BlobStore which implements DataStore
name|InputStream
name|stream
init|=
name|getInputStream
argument_list|(
name|encodedBlobId
argument_list|)
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|ByteStreams
operator|.
name|skipFully
argument_list|(
name|stream
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|int
name|readCount
init|=
name|stream
operator|.
name|read
argument_list|(
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
return|return
name|readCount
return|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|stream
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|encodedBlobId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|checkNotNull
argument_list|(
name|encodedBlobId
argument_list|,
literal|"BlobId must be specified"
argument_list|)
expr_stmt|;
name|BlobId
name|id
init|=
name|BlobId
operator|.
name|of
argument_list|(
name|encodedBlobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodeLengthInId
operator|&&
name|id
operator|.
name|hasLengthInfo
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|length
return|;
block|}
return|return
name|getDataRecord
argument_list|(
name|id
operator|.
name|blobId
argument_list|)
operator|.
name|getLength
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBlobId
parameter_list|(
annotation|@
name|Nonnull
name|String
name|reference
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|DataRecord
name|record
decl_stmt|;
try|try
block|{
name|record
operator|=
name|delegate
operator|.
name|getRecordFromReference
argument_list|(
name|reference
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
return|return
name|getBlobId
argument_list|(
name|record
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access the blobId for  [{}]"
argument_list|,
name|reference
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|encodedBlobId
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|encodedBlobId
argument_list|)
expr_stmt|;
name|String
name|blobId
init|=
name|extractBlobId
argument_list|(
name|encodedBlobId
argument_list|)
decl_stmt|;
comment|//Reference are not created for in memory record
if|if
condition|(
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataRecord
name|record
decl_stmt|;
try|try
block|{
name|record
operator|=
name|delegate
operator|.
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
return|return
name|record
operator|.
name|getReference
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No blob found for id [{}]"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access the blobId for  [{}]"
argument_list|,
name|blobId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
specifier|final
name|String
name|encodedBlobId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BlobId
name|blobId
init|=
name|BlobId
operator|.
name|of
argument_list|(
name|encodedBlobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|encodeLengthInId
operator|&&
name|blobId
operator|.
name|hasLengthInfo
argument_list|()
operator|&&
name|blobId
operator|.
name|length
operator|<=
name|maxCachedBinarySize
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|content
init|=
name|cache
operator|.
name|get
argument_list|(
name|blobId
operator|.
name|blobId
argument_list|,
operator|new
name|Callable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
name|InputStream
name|stream
init|=
name|getStream
argument_list|(
name|blobId
operator|.
name|blobId
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|result
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|stream
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while loading bytes from steam while fetching for id {}"
argument_list|,
name|encodedBlobId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getStream
argument_list|(
name|blobId
operator|.
name|blobId
argument_list|)
return|;
block|}
comment|//~-------------------------------------------< GarbageCollectableBlobStore>
annotation|@
name|Override
specifier|public
name|void
name|setBlockSize
parameter_list|(
name|int
name|x
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|String
name|tempFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|IOException
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{
name|delegate
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearCache
parameter_list|()
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlockSizeMin
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllChunkIds
parameter_list|(
specifier|final
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|transform
argument_list|(
name|filter
argument_list|(
name|transform
argument_list|(
name|delegate
operator|.
name|getAllIdentifiers
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|DataIdentifier
argument_list|,
name|DataRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|DataRecord
name|apply
parameter_list|(
annotation|@
name|Nullable
name|DataIdentifier
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|delegate
operator|.
name|getRecord
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while fetching DataRecord for identifier {}"
argument_list|,
name|input
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|DataRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|DataRecord
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
operator|&&
operator|(
name|maxLastModifiedTime
operator|<=
literal|0
operator|||
name|input
operator|.
name|getLastModified
argument_list|()
operator|<
name|maxLastModifiedTime
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|DataRecord
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DataRecord
name|input
parameter_list|)
block|{
if|if
condition|(
name|encodeLengthInId
condition|)
block|{
return|return
name|BlobId
operator|.
name|of
argument_list|(
name|input
argument_list|)
operator|.
name|encodedValue
argument_list|()
return|;
block|}
return|return
name|input
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|chunkIds
operator|.
name|size
argument_list|()
operator|==
name|countDeleteChunks
argument_list|(
name|chunkIds
argument_list|,
name|maxLastModifiedTime
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|countDeleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|delegate
operator|instanceof
name|MultiDataStoreAware
condition|)
block|{
for|for
control|(
name|String
name|chunkId
range|:
name|chunkIds
control|)
block|{
name|String
name|blobId
init|=
name|extractBlobId
argument_list|(
name|chunkId
argument_list|)
decl_stmt|;
name|DataIdentifier
name|identifier
init|=
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|DataRecord
name|dataRecord
init|=
name|delegate
operator|.
name|getRecord
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
operator|(
name|maxLastModifiedTime
operator|<=
literal|0
operator|)
operator|||
name|dataRecord
operator|.
name|getLastModified
argument_list|()
operator|<=
name|maxLastModifiedTime
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Deleting blob [{}] with last modified date [{}] : [{}]"
argument_list|,
name|blobId
argument_list|,
name|dataRecord
operator|.
name|getLastModified
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
operator|(
operator|(
name|MultiDataStoreAware
operator|)
name|delegate
operator|)
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Deleted blob [{}]"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|resolveChunks
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|blobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|delegate
operator|instanceof
name|SharedDataStore
condition|)
block|{
operator|(
operator|(
name|SharedDataStore
operator|)
name|delegate
operator|)
operator|.
name|addMetadataRecord
argument_list|(
name|stream
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|instanceof
name|SharedDataStore
condition|)
block|{
return|return
operator|(
operator|(
name|SharedDataStore
operator|)
name|delegate
operator|)
operator|.
name|getMetadataRecord
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataRecord
argument_list|>
name|getAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|instanceof
name|SharedDataStore
condition|)
block|{
return|return
operator|(
operator|(
name|SharedDataStore
operator|)
name|delegate
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|delegate
operator|instanceof
name|SharedDataStore
operator|&&
operator|(
operator|(
name|SharedDataStore
operator|)
name|delegate
operator|)
operator|.
name|deleteMetadataRecord
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|delegate
operator|instanceof
name|SharedDataStore
condition|)
block|{
operator|(
operator|(
name|SharedDataStore
operator|)
name|delegate
operator|)
operator|.
name|deleteAllMetadataRecords
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
if|if
condition|(
name|delegate
operator|instanceof
name|SharedDataStore
condition|)
block|{
return|return
name|Type
operator|.
name|SHARED
return|;
block|}
return|return
name|Type
operator|.
name|DEFAULT
return|;
block|}
comment|//~---------------------------------------------< Object>
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"DataStore backed BlobStore [%s]"
argument_list|,
name|delegate
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|//~---------------------------------------------< Properties>
specifier|public
name|DataStore
name|getDataStore
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
specifier|public
name|void
name|setMaxCachedBinarySize
parameter_list|(
name|int
name|maxCachedBinarySize
parameter_list|)
block|{
name|this
operator|.
name|maxCachedBinarySize
operator|=
name|maxCachedBinarySize
expr_stmt|;
block|}
comment|//~---------------------------------------------< Internal>
specifier|private
name|InputStream
name|getStream
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|InputStream
name|in
init|=
name|getDataRecord
argument_list|(
name|blobId
argument_list|)
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|BufferedInputStream
operator|)
condition|)
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DataRecord
name|getDataRecord
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|DataRecord
name|id
decl_stmt|;
if|if
condition|(
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|id
operator|=
name|InMemoryDataRecord
operator|.
name|getInstance
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|delegate
operator|.
name|getRecord
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkNotNull
argument_list|(
name|id
argument_list|,
literal|"No DataRecord found for blobId [%s]"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isInMemoryRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
block|{
return|return
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|identifier
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a BLOB value from in input stream. Small objects will create an in-memory object,      * while large objects are stored in the data store      *      * @param in the input stream      * @return the value      */
specifier|private
name|DataRecord
name|writeStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|int
name|maxMemorySize
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getMinRecordLength
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|maxMemorySize
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|len
init|=
name|maxMemorySize
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|maxMemorySize
condition|)
block|{
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|pos
operator|+=
name|l
expr_stmt|;
name|len
operator|-=
name|l
expr_stmt|;
block|}
name|DataRecord
name|record
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|maxMemorySize
condition|)
block|{
comment|// shrink the buffer
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|pos
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|record
operator|=
name|InMemoryDataRecord
operator|.
name|getInstance
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// a few bytes are already read, need to re-build the input stream
name|in
operator|=
operator|new
name|SequenceInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|record
operator|=
name|delegate
operator|.
name|addRecord
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|record
return|;
block|}
specifier|private
name|String
name|getBlobId
parameter_list|(
name|DataRecord
name|dr
parameter_list|)
block|{
if|if
condition|(
name|encodeLengthInId
condition|)
block|{
return|return
name|BlobId
operator|.
name|of
argument_list|(
name|dr
argument_list|)
operator|.
name|encodedValue
argument_list|()
return|;
block|}
return|return
name|dr
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|extractBlobId
parameter_list|(
name|String
name|encodedBlobId
parameter_list|)
block|{
if|if
condition|(
name|encodeLengthInId
condition|)
block|{
return|return
name|BlobId
operator|.
name|of
argument_list|(
name|encodedBlobId
argument_list|)
operator|.
name|blobId
return|;
block|}
return|return
name|encodedBlobId
return|;
block|}
specifier|static
class|class
name|BlobId
block|{
specifier|static
specifier|final
name|String
name|SEP
init|=
literal|"#"
decl_stmt|;
specifier|final
name|String
name|blobId
decl_stmt|;
specifier|final
name|long
name|length
decl_stmt|;
name|BlobId
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|blobId
operator|=
name|blobId
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
name|BlobId
parameter_list|(
name|DataRecord
name|dr
parameter_list|)
block|{
name|this
operator|.
name|blobId
operator|=
name|dr
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|long
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|dr
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
comment|//Cannot determine length
name|len
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|length
operator|=
name|len
expr_stmt|;
block|}
name|BlobId
parameter_list|(
name|String
name|encodedBlobId
parameter_list|)
block|{
name|int
name|indexOfSep
init|=
name|encodedBlobId
operator|.
name|lastIndexOf
argument_list|(
name|SEP
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfSep
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|blobId
operator|=
name|encodedBlobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfSep
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|encodedBlobId
operator|.
name|substring
argument_list|(
name|indexOfSep
operator|+
name|SEP
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|blobId
operator|=
name|encodedBlobId
expr_stmt|;
name|this
operator|.
name|length
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|String
name|encodedValue
parameter_list|()
block|{
if|if
condition|(
name|hasLengthInfo
argument_list|()
condition|)
block|{
return|return
name|blobId
operator|+
name|SEP
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|blobId
return|;
block|}
block|}
name|boolean
name|hasLengthInfo
parameter_list|()
block|{
return|return
name|length
operator|!=
operator|-
literal|1
return|;
block|}
specifier|static
name|boolean
name|isEncoded
parameter_list|(
name|String
name|encodedBlobId
parameter_list|)
block|{
return|return
name|encodedBlobId
operator|.
name|contains
argument_list|(
name|SEP
argument_list|)
return|;
block|}
specifier|static
name|BlobId
name|of
parameter_list|(
name|String
name|encodedValue
parameter_list|)
block|{
return|return
operator|new
name|BlobId
argument_list|(
name|encodedValue
argument_list|)
return|;
block|}
specifier|static
name|BlobId
name|of
parameter_list|(
name|DataRecord
name|dr
parameter_list|)
block|{
return|return
operator|new
name|BlobId
argument_list|(
name|dr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

