begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentIdProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|FileStoreUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStoreUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FileStoreUtil
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
comment|/**      * Traverse the journal until a record ID is found that exists in the      * provided segment store.      *      * @param store   An instance of {@link SegmentStore}.      * @param idProvider  The {@code SegmentIdProvider} of the {@code store}      * @param journal Path to the journal file.      * @return An instance of {@link RecordId}, or {@code null} if none could be      * found.      * @throws IOException If an I/O error occurs.      */
specifier|static
name|RecordId
name|findPersistedRecordId
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|SegmentIdProvider
name|idProvider
parameter_list|,
name|JournalFile
name|journalFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|JournalReader
name|journalReader
init|=
operator|new
name|JournalReader
argument_list|(
name|journalFile
argument_list|)
init|)
block|{
while|while
condition|(
name|journalReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JournalEntry
name|entry
init|=
name|journalReader
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|RecordId
name|id
init|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|idProvider
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|containsSegment
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|id
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access revision {}, rewinding..."
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Skipping invalid record id {}"
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

