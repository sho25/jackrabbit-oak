begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|AzurePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
operator|.
name|StandbyClientSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
operator|.
name|StandbyServerSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentTarFixture
extends|extends
name|OakFixture
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentTarFixture
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Listener instance doing nothing on a {@code SegmentNotFoundException}      */
name|SegmentNotFoundExceptionListener
name|IGNORE_SNFE
init|=
operator|new
name|SegmentNotFoundExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
annotation|@
name|NotNull
name|SegmentId
name|id
parameter_list|,
annotation|@
name|NotNull
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{ }
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|60_000
decl_stmt|;
specifier|static
class|class
name|SegmentTarFixtureBuilder
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|File
name|base
decl_stmt|;
specifier|private
name|int
name|maxFileSize
decl_stmt|;
specifier|private
name|int
name|segmentCacheSize
decl_stmt|;
specifier|private
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
name|boolean
name|useBlobStore
decl_stmt|;
specifier|private
name|int
name|dsCacheSize
decl_stmt|;
specifier|private
name|String
name|azureConnectionString
decl_stmt|;
specifier|private
name|String
name|azureContainerName
decl_stmt|;
specifier|private
name|String
name|azureRootPath
decl_stmt|;
specifier|public
specifier|static
name|SegmentTarFixtureBuilder
name|segmentTarFixtureBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
return|return
operator|new
name|SegmentTarFixtureBuilder
argument_list|(
name|name
argument_list|,
name|directory
argument_list|)
return|;
block|}
specifier|private
name|SegmentTarFixtureBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|base
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withMaxFileSize
parameter_list|(
name|int
name|maxFileSize
parameter_list|)
block|{
name|this
operator|.
name|maxFileSize
operator|=
name|maxFileSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withSegmentCacheSize
parameter_list|(
name|int
name|segmentCacheSize
parameter_list|)
block|{
name|this
operator|.
name|segmentCacheSize
operator|=
name|segmentCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withMemoryMapping
parameter_list|(
name|boolean
name|memoryMapping
parameter_list|)
block|{
name|this
operator|.
name|memoryMapping
operator|=
name|memoryMapping
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withBlobStore
parameter_list|(
name|boolean
name|useBlobStore
parameter_list|)
block|{
name|this
operator|.
name|useBlobStore
operator|=
name|useBlobStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withDSCacheSize
parameter_list|(
name|int
name|dsCacheSize
parameter_list|)
block|{
name|this
operator|.
name|dsCacheSize
operator|=
name|dsCacheSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixtureBuilder
name|withAzure
parameter_list|(
name|String
name|azureConnectionString
parameter_list|,
name|String
name|azureContainerName
parameter_list|,
name|String
name|azureRootPath
parameter_list|)
block|{
name|this
operator|.
name|azureConnectionString
operator|=
name|azureConnectionString
expr_stmt|;
name|this
operator|.
name|azureContainerName
operator|=
name|azureContainerName
expr_stmt|;
name|this
operator|.
name|azureRootPath
operator|=
name|azureRootPath
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SegmentTarFixture
name|build
parameter_list|()
block|{
return|return
operator|new
name|SegmentTarFixture
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|File
name|base
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|segmentCacheSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|memoryMapping
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useBlobStore
decl_stmt|;
specifier|private
specifier|final
name|int
name|dsCacheSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|withColdStandby
decl_stmt|;
specifier|private
specifier|final
name|int
name|syncInterval
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shareBlobStore
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|oneShotRun
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|secure
decl_stmt|;
specifier|private
specifier|final
name|String
name|azureConnectionString
decl_stmt|;
specifier|private
specifier|final
name|String
name|azureContainerName
decl_stmt|;
specifier|private
specifier|final
name|String
name|azureRootPath
decl_stmt|;
specifier|private
specifier|final
name|File
name|parentPath
decl_stmt|;
specifier|private
name|FileStore
index|[]
name|stores
decl_stmt|;
specifier|private
name|BlobStoreFixture
index|[]
name|blobStoreFixtures
decl_stmt|;
specifier|private
name|StandbyServerSync
index|[]
name|serverSyncs
decl_stmt|;
specifier|private
name|StandbyClientSync
index|[]
name|clientSyncs
decl_stmt|;
specifier|private
name|ScheduledExecutorService
index|[]
name|executors
decl_stmt|;
specifier|private
name|CloudBlobContainer
index|[]
name|containers
decl_stmt|;
specifier|public
name|SegmentTarFixture
parameter_list|(
name|SegmentTarFixtureBuilder
name|builder
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SegmentTarFixture
parameter_list|(
name|SegmentTarFixtureBuilder
name|builder
parameter_list|,
name|boolean
name|withColdStandby
parameter_list|,
name|int
name|syncInterval
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|withColdStandby
argument_list|,
name|syncInterval
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SegmentTarFixture
parameter_list|(
name|SegmentTarFixtureBuilder
name|builder
parameter_list|,
name|boolean
name|withColdStandby
parameter_list|,
name|int
name|syncInterval
parameter_list|,
name|boolean
name|shareBlobStore
parameter_list|,
name|boolean
name|oneShotRun
parameter_list|,
name|boolean
name|secure
parameter_list|)
block|{
name|super
argument_list|(
name|builder
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|builder
operator|.
name|base
expr_stmt|;
name|this
operator|.
name|parentPath
operator|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
name|unique
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|builder
operator|.
name|maxFileSize
expr_stmt|;
name|this
operator|.
name|segmentCacheSize
operator|=
name|builder
operator|.
name|segmentCacheSize
expr_stmt|;
name|this
operator|.
name|memoryMapping
operator|=
name|builder
operator|.
name|memoryMapping
expr_stmt|;
name|this
operator|.
name|useBlobStore
operator|=
name|builder
operator|.
name|useBlobStore
expr_stmt|;
name|this
operator|.
name|dsCacheSize
operator|=
name|builder
operator|.
name|dsCacheSize
expr_stmt|;
name|this
operator|.
name|azureConnectionString
operator|=
name|builder
operator|.
name|azureConnectionString
expr_stmt|;
name|this
operator|.
name|azureContainerName
operator|=
name|builder
operator|.
name|azureContainerName
expr_stmt|;
name|this
operator|.
name|azureRootPath
operator|=
name|builder
operator|.
name|azureRootPath
expr_stmt|;
name|this
operator|.
name|withColdStandby
operator|=
name|withColdStandby
expr_stmt|;
name|this
operator|.
name|syncInterval
operator|=
name|syncInterval
expr_stmt|;
name|this
operator|.
name|shareBlobStore
operator|=
name|shareBlobStore
expr_stmt|;
name|this
operator|.
name|oneShotRun
operator|=
name|oneShotRun
expr_stmt|;
name|this
operator|.
name|secure
operator|=
name|secure
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
name|getOak
parameter_list|(
name|int
name|clusterId
parameter_list|)
throws|throws
name|Exception
block|{
name|FileStoreBuilder
name|fileStoreBuilder
init|=
name|fileStoreBuilder
argument_list|(
name|parentPath
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|azureConnectionString
operator|!=
literal|null
condition|)
block|{
name|CloudStorageAccount
name|cloud
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|azureConnectionString
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|cloud
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|azureContainerName
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
name|CloudBlobDirectory
name|directory
init|=
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|azureRootPath
argument_list|)
decl_stmt|;
name|fileStoreBuilder
operator|.
name|withCustomPersistence
argument_list|(
operator|new
name|AzurePersistence
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useBlobStore
condition|)
block|{
name|FileDataStore
name|fds
init|=
operator|new
name|FileDataStore
argument_list|()
decl_stmt|;
name|fds
operator|.
name|setMinRecordLength
argument_list|(
literal|4092
argument_list|)
expr_stmt|;
name|fds
operator|.
name|init
argument_list|(
name|parentPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|BlobStore
name|blobStore
init|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|fds
argument_list|)
decl_stmt|;
name|fileStoreBuilder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|fs
init|=
name|fileStoreBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newOak
argument_list|(
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fs
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Oak
index|[]
name|setUpCluster
parameter_list|(
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Oak
index|[]
name|cluster
init|=
operator|new
name|Oak
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlobStore
name|blobStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useBlobStore
condition|)
block|{
name|blobStoreFixtures
index|[
name|i
index|]
operator|=
name|BlobStoreFixture
operator|.
name|create
argument_list|(
name|parentPath
argument_list|,
literal|true
argument_list|,
name|dsCacheSize
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
name|blobStore
operator|=
name|blobStoreFixtures
index|[
name|i
index|]
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
operator|new
name|File
argument_list|(
name|parentPath
argument_list|,
literal|"primary-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|azureConnectionString
operator|!=
literal|null
condition|)
block|{
name|CloudStorageAccount
name|cloud
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|azureConnectionString
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|container
init|=
name|cloud
operator|.
name|createCloudBlobClient
argument_list|()
operator|.
name|getContainerReference
argument_list|(
name|azureContainerName
argument_list|)
decl_stmt|;
name|container
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
name|containers
index|[
name|i
index|]
operator|=
name|container
expr_stmt|;
name|CloudBlobDirectory
name|directory
init|=
name|container
operator|.
name|getDirectoryReference
argument_list|(
name|azureRootPath
operator|+
literal|"/primary-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withCustomPersistence
argument_list|(
operator|new
name|AzurePersistence
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
name|stores
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|withMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
operator|.
name|withStrictVersionCheck
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|withColdStandby
condition|)
block|{
name|attachStandby
argument_list|(
name|i
argument_list|,
name|n
argument_list|,
name|statsProvider
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
block|}
name|cluster
index|[
name|i
index|]
operator|=
name|newOak
argument_list|(
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|stores
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cluster
return|;
block|}
comment|/**      * Attaches a standby instance located at index (n+i) in the cluster to the      * primary located at index i      *       * @param i      *            the primary index      * @param n      *            the number of primary instances in the cluster      * @param statsProvider      *            statistics provider for the file/blob store(s)      * @param blobStore      *            the blob store used by the primary (can be<code>null</code>)      * @throws InvalidFileStoreVersionException      *             if an incorrect oak-segment-tar version is used      * @throws IOException      *             if the file store manifest cannot be saved      */
specifier|private
name|void
name|attachStandby
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|,
name|StatisticsProvider
name|statsProvider
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
throws|,
name|IOException
block|{
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
operator|new
name|File
argument_list|(
name|parentPath
argument_list|,
literal|"standby-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|useBlobStore
condition|)
block|{
if|if
condition|(
name|shareBlobStore
condition|)
block|{
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blobStoreFixtures
index|[
name|n
operator|+
name|i
index|]
operator|=
name|BlobStoreFixture
operator|.
name|create
argument_list|(
name|parentPath
argument_list|,
literal|true
argument_list|,
name|dsCacheSize
argument_list|,
name|statsProvider
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStoreFixtures
index|[
name|n
operator|+
name|i
index|]
operator|.
name|setUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SegmentGCOptions
name|gcOptions
init|=
name|SegmentGCOptions
operator|.
name|defaultGCOptions
argument_list|()
operator|.
name|setRetainedGenerations
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|stores
index|[
name|n
operator|+
name|i
index|]
operator|=
name|builder
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|memoryMapping
argument_list|)
operator|.
name|withSnfeListener
argument_list|(
name|IGNORE_SNFE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|port
operator|=
name|socket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
name|serverSyncs
index|[
name|i
index|]
operator|=
name|StandbyServerSync
operator|.
name|builder
argument_list|()
operator|.
name|withPort
argument_list|(
name|port
argument_list|)
operator|.
name|withFileStore
argument_list|(
name|stores
index|[
name|i
index|]
argument_list|)
operator|.
name|withBlobChunkSize
argument_list|(
literal|1
operator|*
name|MB
argument_list|)
operator|.
name|withSecureConnection
argument_list|(
name|secure
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clientSyncs
index|[
name|i
index|]
operator|=
operator|new
name|StandbyClientSync
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|,
name|stores
index|[
name|n
operator|+
name|i
index|]
argument_list|,
name|secure
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|,
literal|false
argument_list|,
operator|new
name|File
argument_list|(
name|StandardSystemProperty
operator|.
name|JAVA_IO_TMPDIR
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oneShotRun
condition|)
block|{
name|serverSyncs
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientSyncs
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|executors
index|[
name|i
index|]
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executors
index|[
name|i
index|]
operator|.
name|scheduleAtFixedRate
argument_list|(
name|clientSyncs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|syncInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initializes various arrays holding internal references based on the      * settings provided (e.g. use data store or not, attach cold standby      * instance, etc.)      *       * @param n      *            number of primary instances in the cluster      */
specifier|private
name|void
name|init
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|fileStoresLength
init|=
name|n
decl_stmt|;
name|int
name|blobStoresLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|withColdStandby
condition|)
block|{
name|fileStoresLength
operator|=
literal|2
operator|*
name|n
expr_stmt|;
if|if
condition|(
name|useBlobStore
condition|)
block|{
if|if
condition|(
name|shareBlobStore
condition|)
block|{
name|blobStoresLength
operator|=
name|n
expr_stmt|;
block|}
else|else
block|{
name|blobStoresLength
operator|=
literal|2
operator|*
name|n
expr_stmt|;
block|}
block|}
name|serverSyncs
operator|=
operator|new
name|StandbyServerSync
index|[
name|n
index|]
expr_stmt|;
name|clientSyncs
operator|=
operator|new
name|StandbyClientSync
index|[
name|n
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|oneShotRun
condition|)
block|{
name|executors
operator|=
operator|new
name|ScheduledExecutorService
index|[
name|n
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|useBlobStore
condition|)
block|{
name|blobStoresLength
operator|=
name|n
expr_stmt|;
block|}
block|}
name|stores
operator|=
operator|new
name|FileStore
index|[
name|fileStoresLength
index|]
expr_stmt|;
name|blobStoreFixtures
operator|=
operator|new
name|BlobStoreFixture
index|[
name|blobStoresLength
index|]
expr_stmt|;
if|if
condition|(
name|azureConnectionString
operator|!=
literal|null
condition|)
block|{
name|containers
operator|=
operator|new
name|CloudBlobContainer
index|[
name|n
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDownCluster
parameter_list|()
block|{
if|if
condition|(
name|withColdStandby
condition|)
block|{
for|for
control|(
name|StandbyClientSync
name|clientSync
range|:
name|clientSyncs
control|)
block|{
name|clientSync
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|StandbyServerSync
name|serverSync
range|:
name|serverSyncs
control|)
block|{
name|serverSync
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oneShotRun
condition|)
block|{
for|for
control|(
name|ExecutorService
name|executor
range|:
name|executors
control|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|FileStore
name|store
range|:
name|stores
control|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blobStoreFixtures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BlobStoreFixture
name|bsf
range|:
name|blobStoreFixtures
control|)
block|{
name|bsf
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CloudBlobContainer
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|container
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't remove container"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BlobStoreFixture
index|[]
name|getBlobStoreFixtures
parameter_list|()
block|{
return|return
name|blobStoreFixtures
return|;
block|}
specifier|public
name|FileStore
index|[]
name|getStores
parameter_list|()
block|{
return|return
name|stores
return|;
block|}
specifier|public
name|StandbyServerSync
index|[]
name|getServerSyncs
parameter_list|()
block|{
return|return
name|serverSyncs
return|;
block|}
specifier|public
name|StandbyClientSync
index|[]
name|getClientSyncs
parameter_list|()
block|{
return|return
name|clientSyncs
return|;
block|}
block|}
end_class

end_unit

