begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|createIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|NodeCounterEditor
operator|.
name|COUNT_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
operator|.
name|PROP_EXCLUDED_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|filter
operator|.
name|PathFilter
operator|.
name|PROP_INCLUDED_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
operator|.
name|getNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|ContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|NodeStateNodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|SelectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|TraversingIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|read
operator|.
name|ListAppender
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|spi
operator|.
name|FilterReply
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Test the Property2 index mechanism.  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndexTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MANY
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EditorHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|costEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// disable the estimation
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|6.5
operator|&&
name|cost
operator|<=
literal|7.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|11.5
operator|&&
name|cost
operator|<=
literal|12.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|26.5
operator|&&
name|cost
operator|<=
literal|27.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|,
literal|"x6"
argument_list|,
literal|"x7"
argument_list|,
literal|"x8"
argument_list|,
literal|"x9"
argument_list|,
literal|"x0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|51.5
operator|&&
name|cost
operator|<=
literal|52.5
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is essentially same test as {@link #costEstimation()} with one difference that it uses      * path constraint in query and creates similar trees under 2 branches {@code path1} and {@code path2}.      * The cost estimation is then verified to be same as that in {@code costEstimation} for query under {@code path1}      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|pathBasedCostEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// disable the estimation
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|COUNT_PROPERTY_NAME
argument_list|,
operator|(
name|long
operator|)
name|MANY
operator|*
literal|2
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|path1
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"path1"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|path2
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"path2"
argument_list|)
decl_stmt|;
comment|// Add some content and process it through the property index hook
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|path1
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
name|path2
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"x"
operator|+
name|i
operator|%
literal|20
argument_list|)
expr_stmt|;
block|}
name|path1
operator|.
name|setProperty
argument_list|(
name|COUNT_PROPERTY_NAME
argument_list|,
operator|(
name|long
operator|)
name|MANY
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/path1"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|10
operator|&&
name|cost
operator|<=
literal|14
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|20
operator|&&
name|cost
operator|<=
literal|24
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|50
operator|&&
name|cost
operator|<=
literal|54
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|,
literal|"x6"
argument_list|,
literal|"x7"
argument_list|,
literal|"x8"
argument_list|,
literal|"x9"
argument_list|,
literal|"x0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
literal|120
operator|&&
name|cost
operator|<=
literal|124
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|costMaxEstimation
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// 100 nodes in the index:
comment|// with a single level /content cost is 121
comment|// adding a second level /content/data cost is133
comment|// 101 nodes in the index:
comment|// with a single level /content cost is 121
comment|// adding a second level /content/data cost is 133
comment|// 100 nodes, 12 levels deep, cost is 345
comment|// 101 nodes, 12 levels deep, cost is 345
comment|// threshold for estimation (PropertyIndexLookup.MAX_COST) is at 100
name|int
name|nodes
init|=
literal|101
decl_stmt|;
name|int
name|levels
init|=
literal|12
decl_stmt|;
name|NodeBuilder
name|data
init|=
name|builder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|=
name|data
operator|.
name|child
argument_list|(
literal|"l"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|data
operator|.
name|child
argument_list|(
literal|"c_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"azerty"
argument_list|)
expr_stmt|;
block|}
comment|// add more nodes (to make traversal more expensive)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|child
argument_list|(
literal|"cx_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|double
name|cost
init|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"azerty"
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|traversal
init|=
operator|new
name|TraversingIndex
argument_list|()
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Estimated cost for "
operator|+
name|nodes
operator|+
literal|" nodes should not be higher than traversal ("
operator|+
name|cost
operator|+
literal|"< "
operator|+
name|traversal
operator|+
literal|")"
argument_list|,
name|cost
operator|<
name|traversal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
operator|+
literal|2
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|cost
decl_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
name|cost
operator|=
name|lookup
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cost: "
operator|+
name|cost
argument_list|,
name|cost
operator|>=
name|MANY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathAwarePropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/a"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|find
parameter_list|(
name|PropertyIndexLookup
name|lookup
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|lookup
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|name
argument_list|,
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigPropertyLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
comment|// plus lots of dummy content to highlight the benefit of indexing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MANY
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|,
name|f
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"extrafoo"
argument_list|,
literal|"pqr"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-666">OAK-666:      *      Property2Index: node type is used when indexing, but ignored when      *      querying</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndexFile"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
specifier|private
specifier|static
name|FilterImpl
name|createFilter
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|NodeTypeInfo
name|type
init|=
name|nodeTypes
operator|.
name|getNodeTypeInfo
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
name|SelectorImpl
name|selector
init|=
operator|new
name|SelectorImpl
argument_list|(
name|type
argument_list|,
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterImpl
argument_list|(
name|selector
argument_list|,
literal|"SELECT * FROM ["
operator|+
name|nodeTypeName
operator|+
literal|"]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see<a href="https://issues.apache.org/jira/browse/OAK-666">OAK-666:      *      Property2Index: node type is used when indexing, but ignored when      *      querying</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCustomConfigNodeTypeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"extrafoo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndexFile"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"def"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"pqr"
argument_list|,
literal|"foo"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected: no index for "pqr"
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|valuePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|indexDef
init|=
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|VALUE_PATTERN
argument_list|,
literal|"(a.*|b)"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|PropertyIndex
name|pIndex
init|=
operator|new
name|PropertyIndex
argument_list|(
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"a"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"a1"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"b"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: no index for "is not null"
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPropertyAsList
argument_list|(
literal|"foo"
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|// expected: no index for value c
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|f
operator|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPropertyAsList
argument_list|(
literal|"foo"
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|// expected: no index for value a
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|<
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|valuePatternExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|indexDef
init|=
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|VALUE_EXCLUDED_PREFIXES
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|valuePatternExclude0
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|valuePatternExclude2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definitions
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|indexDef
init|=
name|createIndexDefinition
argument_list|(
name|index
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|IndexConstants
operator|.
name|VALUE_EXCLUDED_PREFIXES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
decl_stmt|;
name|indexDef
operator|.
name|setProperty
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|valuePatternExclude0
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|valuePatternExclude0
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add an index
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|PropertyIndex
name|pIndex
init|=
operator|new
name|PropertyIndex
argument_list|(
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"a"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"a1"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"b"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: no index for "is not null", "= 'test'", "like 't%'"
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|f
operator|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|LIKE
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"t%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|f
operator|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
comment|// expected: index for "like 'a%'"
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|<
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|f
operator|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
comment|// expected: index for value c
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPropertyAsList
argument_list|(
literal|"foo"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|<
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
comment|// expected: index for value a
name|f
operator|=
name|createFilter
argument_list|(
name|after
argument_list|,
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|restrictPropertyAsList
argument_list|(
literal|"foo"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pIndex
operator|.
name|getCost
argument_list|(
name|f
argument_list|,
name|indexed
argument_list|)
operator|<
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// should throw
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|done
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// remove, and then re-add the same node
name|builder
operator|=
name|done
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|after
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
comment|// apply the changes to the state before adding the entries
name|done
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// re-apply the changes
name|done
operator|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|done
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueByTypeOK
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeBar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should not throw
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUniqueByTypeKO
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueByTypeDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"fooIndex"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"typeFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeFoo"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"typeBar"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// should not throw
block|}
annotation|@
name|Test
specifier|public
name|void
name|traversalWarning
parameter_list|()
throws|throws
name|Exception
block|{
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|appender
init|=
name|createAndRegisterAppender
argument_list|()
decl_stmt|;
name|int
name|testDataSize
init|=
name|ContentMirrorStoreStrategy
operator|.
name|TRAVERSING_WARN
decl_stmt|;
name|NodeState
name|indexed
init|=
name|createTestData
argument_list|(
name|testDataSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testDataSize
argument_list|,
name|getResultSize
argument_list|(
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|appender
operator|.
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appender
operator|.
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testDataSize
operator|=
literal|100
expr_stmt|;
name|indexed
operator|=
name|createTestData
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDataSize
argument_list|,
name|getResultSize
argument_list|(
name|indexed
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Warning should not be logged for traversing "
operator|+
name|testDataSize
argument_list|,
name|appender
operator|.
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|deregisterAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathInclude
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test/a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test/b"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|//no path restriction, opt out
name|PropertyIndexPlan
name|plan
init|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
comment|//path restriction is not an ancestor of excluded path, index may be used
name|f
operator|.
name|setPath
argument_list|(
literal|"/test2"
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|!=
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
comment|//path restriction is an ancestor of excluded path, opt out
name|f
operator|.
name|setPath
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathIncludeExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a/b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"foo"
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test/a"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|//no path restriction, opt out
name|PropertyIndexPlan
name|plan
init|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
comment|//path restriction is not an ancestor of excluded path, index may be used
name|f
operator|.
name|setPath
argument_list|(
literal|"/test/a/x"
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|!=
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
comment|//path restriction is an ancestor of excluded path but no included path, opt out
name|f
operator|.
name|setPath
argument_list|(
literal|"/test/a/b"
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
comment|//path restriction is an ancestor of excluded path, opt out
name|f
operator|.
name|setPath
argument_list|(
literal|"/test/a"
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathExcludeInclude
parameter_list|()
throws|throws
name|Exception
block|{
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|IndexUpdate
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a/b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
try|try
block|{
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|String
name|expectedLogMessage
init|=
literal|"Unable to get Index Editor for index at /oak:index/foo . "
operator|+
literal|"Please correct the index definition and reindex after correction. "
operator|+
literal|"Additional Info : No valid include provided. Includes [/test/a/b], Excludes [/test/a]"
decl_stmt|;
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|customLogs
operator|.
name|getLogs
argument_list|()
argument_list|,
name|IsCollectionContaining
operator|.
name|hasItems
argument_list|(
name|expectedLogMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|unexpected
parameter_list|)
block|{
comment|// IllegalStateException not expected here now<OAK-8328>
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a/b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeState
name|indexed
init|=
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
name|f
operator|.
name|restrictPath
argument_list|(
literal|"/test2"
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|ALL_CHILDREN
argument_list|)
expr_stmt|;
name|PropertyIndexPlan
name|plan
init|=
operator|new
name|PropertyIndexPlan
argument_list|(
literal|"plan"
argument_list|,
name|root
argument_list|,
name|index
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
operator|==
name|plan
operator|.
name|getCost
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleMount
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"m"
argument_list|)
operator|.
name|child
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"m"
argument_list|)
operator|.
name|child
argument_list|(
literal|"n"
argument_list|)
operator|.
name|child
argument_list|(
literal|"o"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"m"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"foo"
argument_list|,
literal|"/a"
argument_list|,
literal|"/m/n"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Mount
name|fooMount
init|=
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Mount
name|defMount
init|=
name|mip
operator|.
name|getDefaultMount
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b/x"
argument_list|,
literal|"a/x"
argument_list|,
literal|"m"
argument_list|,
literal|"m/n"
argument_list|,
literal|"m/n/o"
argument_list|)
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|find
argument_list|(
name|lookup
argument_list|,
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
literal|"/oak:index/foo/:index"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//Separate node for mount
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
literal|"/oak:index/foo/"
operator|+
name|getNodeForMount
argument_list|(
name|fooMount
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//Index entries for paths in foo mount should go to :oak:foo-index
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/a"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/a/x"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/m/n"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/m/n/o"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/a"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/a/x"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/m/n"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/m/n/o"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//All other index entries should go to :index
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/b"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/b/x"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/m"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/b"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|fooMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/b/x"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println(NodeStateUtils.toString(getNode(indexed, "/oak:index/foo")));
block|}
annotation|@
name|Test
specifier|public
name|void
name|mountWithCommitInWritableMount
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"foo"
argument_list|,
literal|"/readOnly"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CompositeHook
name|hook
init|=
operator|new
name|CompositeHook
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|EditorHook
argument_list|(
operator|new
name|ValidatorProvider
argument_list|()
block|{
specifier|protected
name|Validator
name|getRootValidator
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|PrivateStoreValidator
argument_list|(
literal|"/"
argument_list|,
name|mip
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Mount
name|defMount
init|=
name|mip
operator|.
name|getDefaultMount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
name|pathInIndex
argument_list|(
name|defMount
argument_list|,
literal|"/oak:index/foo"
argument_list|,
literal|"/content"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mountWithCommitInWritableMountForUniqueIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|builder
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"foo"
argument_list|,
literal|"/readOnly"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CompositeHook
name|hook
init|=
operator|new
name|CompositeHook
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|EditorHook
argument_list|(
operator|new
name|ValidatorProvider
argument_list|()
block|{
specifier|protected
name|Validator
name|getRootValidator
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|PrivateStoreValidator
argument_list|(
literal|"/"
argument_list|,
name|mip
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|NodeState
name|indexed
init|=
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Mount
name|defMount
init|=
name|mip
operator|.
name|getDefaultMount
argument_list|()
decl_stmt|;
name|NodeState
name|indexedState
init|=
name|getNode
argument_list|(
name|indexed
argument_list|,
literal|"/oak:index/foo/"
operator|+
name|getNodeForMount
argument_list|(
name|defMount
argument_list|)
operator|+
literal|"/abc"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexedState
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|indexedState
operator|.
name|getStrings
argument_list|(
literal|"entry"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/content"
argument_list|,
name|Iterables
operator|.
name|getFirst
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Mount
name|roMount
init|=
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|getNode
argument_list|(
name|indexed
argument_list|,
literal|"/oak:index/foo/"
operator|+
name|getNodeForMount
argument_list|(
name|roMount
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mountAndUniqueIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"foo"
argument_list|,
literal|"/a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// should throw
name|hook
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|pathInIndex
parameter_list|(
name|Mount
name|mount
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|String
name|indexedPath
parameter_list|,
name|String
name|indexedValue
parameter_list|)
block|{
return|return
name|indexPath
operator|+
literal|"/"
operator|+
name|getNodeForMount
argument_list|(
name|mount
argument_list|)
operator|+
literal|"/"
operator|+
name|indexedValue
operator|+
name|indexedPath
return|;
block|}
specifier|private
specifier|static
name|String
name|getNodeForMount
parameter_list|(
name|Mount
name|mount
parameter_list|)
block|{
return|return
name|Multiplexers
operator|.
name|getNodeForMount
argument_list|(
name|mount
argument_list|,
name|INDEX_CONTENT_NODE_NAME
argument_list|)
return|;
block|}
specifier|private
name|int
name|getResultSize
parameter_list|(
name|NodeState
name|indexed
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|FilterImpl
name|f
init|=
name|createFilter
argument_list|(
name|indexed
argument_list|,
name|NT_BASE
argument_list|)
decl_stmt|;
comment|// Query the index
name|PropertyIndexLookup
name|lookup
init|=
operator|new
name|PropertyIndexLookup
argument_list|(
name|indexed
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|lookup
operator|.
name|query
argument_list|(
name|f
argument_list|,
name|name
argument_list|,
name|PropertyValues
operator|.
name|newString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|size
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|createTestData
parameter_list|(
name|int
name|entryCount
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
comment|// Add index definition
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|index
init|=
name|createIndexDefinition
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// disable the estimation
name|index
operator|.
name|setProperty
argument_list|(
literal|"entryCount"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
comment|// Add some content and process it through the property index hook
name|int
name|depth
init|=
name|ContentMirrorStoreStrategy
operator|.
name|TRAVERSING_WARN
operator|/
name|entryCount
operator|+
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entryCount
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|parentNode
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|depth
condition|;
name|j
operator|++
control|)
block|{
name|parentNode
operator|=
name|parentNode
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|parentNode
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
return|return
name|HOOK
operator|.
name|processCommit
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|createAndRegisterAppender
parameter_list|()
block|{
name|TraversingWarningFilter
name|filter
init|=
operator|new
name|TraversingWarningFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|start
argument_list|()
expr_stmt|;
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|appender
init|=
operator|new
name|ListAppender
argument_list|<>
argument_list|()
decl_stmt|;
name|appender
operator|.
name|setContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|appender
operator|.
name|setName
argument_list|(
literal|"TestLogCollector"
argument_list|)
expr_stmt|;
name|appender
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|appender
operator|.
name|start
argument_list|()
expr_stmt|;
name|rootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
return|return
name|appender
return|;
block|}
specifier|private
name|void
name|deregisterAppender
parameter_list|(
name|Appender
argument_list|<
name|ILoggingEvent
argument_list|>
name|appender
parameter_list|)
block|{
name|rootLogger
argument_list|()
operator|.
name|detachAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|LoggerContext
name|getContext
parameter_list|()
block|{
return|return
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
name|rootLogger
parameter_list|()
block|{
return|return
name|getContext
argument_list|()
operator|.
name|getLogger
argument_list|(
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
operator|.
name|ROOT_LOGGER_NAME
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TraversingWarningFilter
extends|extends
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|filter
operator|.
name|Filter
argument_list|<
name|ILoggingEvent
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|FilterReply
name|decide
parameter_list|(
name|ILoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|isGreaterOrEqual
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Traversed"
argument_list|)
condition|)
block|{
return|return
name|FilterReply
operator|.
name|ACCEPT
return|;
block|}
else|else
block|{
return|return
name|FilterReply
operator|.
name|DENY
return|;
block|}
block|}
block|}
specifier|private
class|class
name|PrivateStoreValidator
extends|extends
name|DefaultValidator
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|MountInfoProvider
name|mountInfoProvider
decl_stmt|;
specifier|public
name|PrivateStoreValidator
parameter_list|(
name|String
name|path
parameter_list|,
name|MountInfoProvider
name|mountInfoProvider
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|mountInfoProvider
operator|=
name|mountInfoProvider
expr_stmt|;
block|}
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|checkPrivateStoreCommit
argument_list|(
name|getCommitPath
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|checkPrivateStoreCommit
argument_list|(
name|getCommitPath
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|checkPrivateStoreCommit
argument_list|(
name|getCommitPath
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Validator
name|checkPrivateStoreCommit
parameter_list|(
name|String
name|commitPath
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Mount
name|mountInfo
init|=
name|mountInfoProvider
operator|.
name|getMountByPath
argument_list|(
name|commitPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mountInfo
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|UNSUPPORTED
argument_list|,
literal|0
argument_list|,
literal|"Unsupported commit to a read-only store "
operator|+
name|commitPath
argument_list|)
throw|;
block|}
return|return
operator|new
name|PrivateStoreValidator
argument_list|(
name|commitPath
argument_list|,
name|mountInfoProvider
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCommitPath
parameter_list|(
name|String
name|changeNodeName
parameter_list|)
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|changeNodeName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

