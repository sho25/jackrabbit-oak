begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * Unit test for simple App.  *   * Source copied from a publicly available library.  *   * @see<a  *      href="https://code.google.com/p/externalsortinginjava/">https://code.google.com/p/externalsortinginjava</a>  *   *      Goal: offer a generic external-memory sorting program in Java.  *   *      It must be : - hackable (easy to adapt) - scalable to large files -  *      sensibly efficient.  *   *      This software is in the public domain.  *   *      Usage: java org/apache/oak/commons/sort//ExternalSort somefile.txt  *      out.txt  *   *      You can change the default maximal number of temporary files with the -t  *      flag: java org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt  *      -t 3  *   *      You can change the default maximum memory available with the -m flag:  *      java org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt -m  *      8192  *   *      For very large files, you might want to use an appropriate flag to  *      allocate more memory to the Java VM: java -Xms2G  *      org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt  *   *      By (in alphabetical order) Philippe Beaudoin, Eleftherios Chetzakis, Jon  *      Elsas, Christan Grant, Daniel Haran, Daniel Lemire, Sugumaran  *      Harikrishnan, Jerry Yang, First published: April 2010 originally posted  *      at  *      http://lemire.me/blog/archives/2010/04/01/external-memory-sorting-in-java  */
end_comment

begin_class
specifier|public
class|class
name|ExternalSortTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE1_TXT
init|=
literal|"test-file-1.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE2_TXT
init|=
literal|"test-file-2.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE1_CSV
init|=
literal|"test-file-1.csv"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE2_CSV
init|=
literal|"test-file-2.csv"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_SORT_RESULTS
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"b"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"i"
block|,
literal|"m"
block|,
literal|"o"
block|,
literal|"u"
block|,
literal|"u"
block|,
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_MERGE_RESULTS
init|=
block|{
literal|"a"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|"g"
block|,
literal|"h"
block|,
literal|"i"
block|,
literal|"j"
block|,
literal|"k"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_MERGE_DISTINCT_RESULTS
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|"h"
block|,
literal|"i"
block|,
literal|"j"
block|,
literal|"k"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_HEADER_RESULTS
init|=
block|{
literal|"HEADER, HEADER"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|"h"
block|,
literal|"i"
block|,
literal|"j"
block|,
literal|"k"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_DISTINCT_RESULTS
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"i"
block|,
literal|"m"
block|,
literal|"o"
block|,
literal|"u"
block|,
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SAMPLE
init|=
block|{
literal|"f"
block|,
literal|"m"
block|,
literal|"b"
block|,
literal|"e"
block|,
literal|"i"
block|,
literal|"o"
block|,
literal|"u"
block|,
literal|"x"
block|,
literal|"a"
block|,
literal|"y"
block|,
literal|"z"
block|,
literal|"b"
block|,
literal|"u"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_CSV_DISTINCT_RESULTS
init|=
block|{
literal|"a,1"
block|,
literal|"b,2a"
block|,
literal|"e,3"
block|,
literal|"f,4"
block|,
literal|"i,5"
block|,
literal|"m,6"
block|,
literal|"o,7"
block|,
literal|"u,8a"
block|,
literal|"x,9"
block|,
literal|"y,10"
block|,
literal|"z,11"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXPECTED_CSV_RESULTS
init|=
block|{
literal|"a,1"
block|,
literal|"b,2a"
block|,
literal|"b,2b"
block|,
literal|"e,3"
block|,
literal|"f,4"
block|,
literal|"i,5"
block|,
literal|"m,6"
block|,
literal|"o,7"
block|,
literal|"u,8a"
block|,
literal|"u,8b"
block|,
literal|"x,9"
block|,
literal|"y,10"
block|,
literal|"z,11"
block|}
decl_stmt|;
specifier|private
name|File
name|file1
decl_stmt|;
specifier|private
name|File
name|file2
decl_stmt|;
specifier|private
name|File
name|csvFile
decl_stmt|;
specifier|private
name|File
name|csvFile2
decl_stmt|;
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|fileList
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * @throws Exception      */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|fileList
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|file1
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|TEST_FILE1_TXT
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|file2
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|TEST_FILE2_TXT
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|csvFile
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|TEST_FILE1_CSV
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|csvFile2
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|TEST_FILE2_CSV
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tmpFile1
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|file1
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|File
name|tmpFile2
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|file2
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|this
operator|.
name|file1
argument_list|,
name|tmpFile1
argument_list|)
expr_stmt|;
name|copyFile
argument_list|(
name|this
operator|.
name|file2
argument_list|,
name|tmpFile2
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileList
operator|.
name|add
argument_list|(
name|tmpFile1
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileList
operator|.
name|add
argument_list|(
name|tmpFile2
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|file1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|file2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|csvFile
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|this
operator|.
name|fileList
control|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|fileList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileList
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|sourceFile
parameter_list|,
name|File
name|destFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|destFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|FileChannel
name|source
init|=
literal|null
decl_stmt|;
name|FileChannel
name|destination
init|=
literal|null
decl_stmt|;
try|try
block|{
name|source
operator|=
operator|new
name|FileInputStream
argument_list|(
name|sourceFile
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|destination
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|destination
operator|.
name|transferFrom
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f1
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|File
name|f2
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|f1
argument_list|)
argument_list|,
name|f2
argument_list|)
expr_stmt|;
if|if
condition|(
name|f2
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"empty files should end up emtpy"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeSortedFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
name|BufferedReader
name|bf
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|this
operator|.
name|fileList
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bf
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bf
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|bf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_MERGE_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeSortedFilesDistinct
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
name|BufferedReader
name|bf
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|this
operator|.
name|fileList
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bf
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bf
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|bf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_MERGE_DISTINCT_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeSortedFilesAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
name|BufferedReader
name|bf
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|writeStringToFile
argument_list|(
name|out
argument_list|,
literal|"HEADER, HEADER\n"
argument_list|)
expr_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|this
operator|.
name|fileList
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bf
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bf
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|bf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_HEADER_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortAndSave
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
decl_stmt|;
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
name|BufferedReader
name|bf
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sample
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SAMPLE
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|f
operator|=
name|ExternalSort
operator|.
name|sortAndSave
argument_list|(
name|sample
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bf
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bf
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|bf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_SORT_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortAndSaveDistinct
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
decl_stmt|;
name|String
name|line
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
decl_stmt|;
name|BufferedReader
name|bf
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sample
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SAMPLE
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|f
operator|=
name|ExternalSort
operator|.
name|sortAndSave
argument_list|(
name|sample
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bf
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bf
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|bf
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_DISTINCT_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortInBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|listOfFiles
init|=
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|this
operator|.
name|csvFile
argument_list|,
name|cmp
argument_list|,
name|ExternalSort
operator|.
name|DEFAULTMAXTEMPFILES
argument_list|,
name|ExternalSort
operator|.
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listOfFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|readLines
argument_list|(
name|listOfFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_MERGE_DISTINCT_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sample case to sort csv file.      *       * @throws Exception      *       */
annotation|@
name|Test
specifier|public
name|void
name|testCSVSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|testCSVSortingWithParams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testCSVSortingWithParams
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSVKeyValueSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|testCSVSortKeyValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testCSVSortKeyValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sample case to sort csv file with key, value pair.      *      * @param distinct if distinct records need to be omitted      * @throws Exception      *      */
specifier|public
name|void
name|testCSVSortKeyValue
parameter_list|(
name|boolean
name|distinct
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|listOfFiles
init|=
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|this
operator|.
name|csvFile2
argument_list|,
name|cmp
argument_list|,
name|ExternalSort
operator|.
name|DEFAULTMAXTEMPFILES
argument_list|,
name|ExternalSort
operator|.
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
name|distinct
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// now merge with append
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|listOfFiles
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
name|distinct
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|readLines
argument_list|(
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|distinct
condition|)
block|{
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_CSV_DISTINCT_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_CSV_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sample case to sort csv file.      *       * @param usegzip use compression for temporary files      * @throws Exception      *       */
specifier|public
name|void
name|testCSVSortingWithParams
parameter_list|(
name|boolean
name|usegzip
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|o1
parameter_list|,
name|String
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// read header
name|FileReader
name|fr
init|=
operator|new
name|FileReader
argument_list|(
name|this
operator|.
name|csvFile
argument_list|)
decl_stmt|;
name|Scanner
name|scan
init|=
operator|new
name|Scanner
argument_list|(
name|fr
argument_list|)
decl_stmt|;
name|String
name|head
init|=
name|scan
operator|.
name|nextLine
argument_list|()
decl_stmt|;
comment|// write to the file
name|writeStringToFile
argument_list|(
name|out
argument_list|,
name|head
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// omit the first line, which is the header..
name|List
argument_list|<
name|File
argument_list|>
name|listOfFiles
init|=
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|this
operator|.
name|csvFile
argument_list|,
name|cmp
argument_list|,
name|ExternalSort
operator|.
name|DEFAULTMAXTEMPFILES
argument_list|,
name|ExternalSort
operator|.
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|usegzip
argument_list|)
decl_stmt|;
comment|// now merge with append
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|listOfFiles
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|usegzip
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|readLines
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|EXPECTED_HEADER_RESULTS
argument_list|,
name|result
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|customType
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|out
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|int
name|testCount
init|=
literal|1000
decl_stmt|;
name|List
argument_list|<
name|TestLine
argument_list|>
name|testLines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
name|testLines
operator|.
name|add
argument_list|(
operator|new
name|TestLine
argument_list|(
name|i
operator|+
literal|":"
operator|+
literal|"foo-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|testLines
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|TestLine
argument_list|>
name|cmp
init|=
name|Comparator
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
name|Charset
name|charset
init|=
name|Charsets
operator|.
name|UTF_8
decl_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|TestLine
argument_list|>
name|stringToType
init|=
name|line
lambda|->
name|line
operator|!=
literal|null
condition|?
operator|new
name|TestLine
argument_list|(
name|line
argument_list|)
else|:
literal|null
decl_stmt|;
name|Function
argument_list|<
name|TestLine
argument_list|,
name|String
argument_list|>
name|typeToString
init|=
name|tl
lambda|->
name|tl
operator|!=
literal|null
condition|?
name|tl
operator|.
name|line
else|:
literal|null
decl_stmt|;
name|String
name|testData
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|join
argument_list|(
name|transform
argument_list|(
name|testLines
argument_list|,
name|tl
lambda|->
name|tl
operator|.
name|line
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testData
argument_list|,
name|testFile
argument_list|,
name|charset
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|listOfFiles
init|=
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|testFile
argument_list|,
name|cmp
argument_list|,
name|ExternalSort
operator|.
name|DEFAULTMAXTEMPFILES
argument_list|,
literal|100
argument_list|,
name|charset
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|typeToString
argument_list|,
name|stringToType
argument_list|)
decl_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|listOfFiles
argument_list|,
name|out
argument_list|,
name|cmp
argument_list|,
name|charset
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|typeToString
argument_list|,
name|stringToType
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|testLines
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TestLine
argument_list|>
name|linesFromSortedFile
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Files
operator|.
name|readLines
argument_list|(
name|out
argument_list|,
name|charset
argument_list|)
operator|.
name|forEach
argument_list|(
name|line
lambda|->
name|linesFromSortedFile
operator|.
name|add
argument_list|(
operator|new
name|TestLine
argument_list|(
name|line
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testLines
argument_list|,
name|linesFromSortedFile
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestLine
implements|implements
name|Comparable
argument_list|<
name|TestLine
argument_list|>
block|{
specifier|final
name|String
name|line
decl_stmt|;
specifier|final
name|int
name|value
decl_stmt|;
specifier|public
name|TestLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|this
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TestLine
name|o
parameter_list|)
block|{
return|return
name|Ints
operator|.
name|compare
argument_list|(
name|value
argument_list|,
name|o
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TestLine
name|testLine
init|=
operator|(
name|TestLine
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|testLine
operator|.
name|value
condition|)
return|return
literal|false
return|;
return|return
name|line
operator|.
name|equals
argument_list|(
name|testLine
operator|.
name|line
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|line
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|value
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|line
return|;
block|}
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
specifier|static
name|void
name|writeStringToFile
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

