begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ID_BYTES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_class
class|class
name|MapLeaf
extends|extends
name|MapRecord
block|{
name|MapLeaf
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|RecordId
name|id
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
name|size
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|size
operator|+
literal|" "
operator|+
name|level
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|!=
literal|0
operator|||
name|level
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|<=
name|BUCKETS_PER_LEVEL
operator|||
name|level
operator|==
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|RecordId
name|getEntry
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|int
name|hash
init|=
name|key
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|size
operator|&&
name|getHash
argument_list|(
name|segment
argument_list|,
name|index
argument_list|)
operator|<
name|hash
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|index
operator|<
name|size
operator|&&
name|getHash
argument_list|(
name|segment
argument_list|,
name|index
argument_list|)
operator|==
name|hash
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|getKey
argument_list|(
name|segment
argument_list|,
name|index
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|getValue
argument_list|(
name|segment
argument_list|,
name|index
argument_list|)
return|;
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getKeyIterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getEntryIterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|//-----------------------------------------------------------< private>--
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getKeyIterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|int
name|i
init|=
name|index
operator|++
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|size
condition|)
block|{
return|return
name|getKey
argument_list|(
name|segment
argument_list|,
name|i
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|getEntryIterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Segment
name|segment
init|=
name|getSegment
argument_list|()
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|next
parameter_list|()
block|{
specifier|final
name|int
name|i
init|=
name|index
operator|++
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|size
condition|)
block|{
return|return
operator|new
name|Entry
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|MapLeaf
operator|.
name|this
operator|.
name|getKey
argument_list|(
name|segment
argument_list|,
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordId
name|getValue
parameter_list|()
block|{
return|return
name|MapLeaf
operator|.
name|this
operator|.
name|getValue
argument_list|(
name|segment
argument_list|,
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordId
name|setValue
parameter_list|(
name|RecordId
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
specifier|private
name|int
name|getHash
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
name|segment
argument_list|)
operator|.
name|readInt
argument_list|(
name|getOffset
argument_list|()
operator|+
literal|4
operator|+
name|index
operator|*
literal|4
argument_list|)
return|;
block|}
specifier|private
name|String
name|getKey
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|offset
init|=
name|getOffset
argument_list|()
operator|+
literal|4
operator|+
name|size
operator|*
literal|4
operator|+
name|index
operator|*
name|RECORD_ID_BYTES
decl_stmt|;
name|RecordId
name|id
init|=
name|checkNotNull
argument_list|(
name|segment
argument_list|)
operator|.
name|readRecordId
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|segment
operator|.
name|getSegmentId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
condition|)
block|{
comment|// the string is stored in another segment
name|segment
operator|=
name|store
operator|.
name|readSegment
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|segment
operator|.
name|readString
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|getValue
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|offset
init|=
name|getOffset
argument_list|()
operator|+
literal|4
operator|+
name|size
operator|*
literal|4
operator|+
name|size
operator|*
name|RECORD_ID_BYTES
operator|+
name|index
operator|*
name|RECORD_ID_BYTES
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|segment
argument_list|)
operator|.
name|readRecordId
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
end_class

end_unit

