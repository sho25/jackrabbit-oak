begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|j2ee
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_comment
comment|/**  * The RMI config hold information about RMI connection details.  *  * It supports the following properties and init parameters:  *<pre>  * +-------------------+--------------------+  * | Property Name     | Init-Param Name    |  * +-------------------+--------------------+  * | rmi.enable        | {rmi-port sepc.}   |  * | rmi.host          | rmi-host           |  * | rmi.port          | rmi-port           |  * | rmi.name          | {repository name}  |  * | rmi.url           | rmi-url            |  * +-------------------+--------------------+  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|RMIConfig
extends|extends
name|AbstractConfig
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RMIConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|rmiEnabled
decl_stmt|;
specifier|private
name|int
name|rmiPort
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|rmiHost
decl_stmt|;
specifier|private
name|String
name|rmiName
decl_stmt|;
specifier|private
name|String
name|rmiUri
decl_stmt|;
specifier|private
specifier|final
name|BootstrapConfig
name|parentConfig
decl_stmt|;
specifier|public
name|RMIConfig
parameter_list|(
name|BootstrapConfig
name|parentConfig
parameter_list|)
block|{
name|this
operator|.
name|parentConfig
operator|=
name|parentConfig
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|ctx
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
comment|// enable RMI if either port or url was defined
name|rmiEnabled
operator|=
name|rmiPort
operator|>=
literal|0
operator|||
name|rmiUri
operator|!=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getRmiName
parameter_list|()
block|{
return|return
name|rmiName
return|;
block|}
specifier|public
name|void
name|setRmiName
parameter_list|(
name|String
name|rmiName
parameter_list|)
block|{
name|this
operator|.
name|rmiName
operator|=
name|rmiName
expr_stmt|;
block|}
specifier|public
name|boolean
name|enabled
parameter_list|()
block|{
return|return
name|rmiEnabled
return|;
block|}
specifier|public
name|String
name|getRmiEnabled
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|rmiEnabled
argument_list|)
return|;
block|}
specifier|public
name|void
name|setRmiEnabled
parameter_list|(
name|String
name|rmiEnabled
parameter_list|)
block|{
name|this
operator|.
name|rmiEnabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|rmiEnabled
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|rmiPort
parameter_list|()
block|{
return|return
name|rmiPort
return|;
block|}
specifier|public
name|String
name|getRmiPort
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|rmiPort
argument_list|)
return|;
block|}
specifier|public
name|void
name|setRmiPort
parameter_list|(
name|String
name|rmiPort
parameter_list|)
block|{
name|this
operator|.
name|rmiPort
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|rmiPort
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRmiHost
parameter_list|()
block|{
return|return
name|rmiHost
return|;
block|}
specifier|public
name|void
name|setRmiHost
parameter_list|(
name|String
name|rmiHost
parameter_list|)
block|{
name|this
operator|.
name|rmiHost
operator|=
name|rmiHost
expr_stmt|;
block|}
specifier|public
name|String
name|getRmiUri
parameter_list|()
block|{
return|return
name|rmiUri
return|;
block|}
specifier|public
name|void
name|setRmiUri
parameter_list|(
name|String
name|rmiUri
parameter_list|)
block|{
name|this
operator|.
name|rmiUri
operator|=
name|rmiUri
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|rmiEnabled
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rmiUri
operator|!=
literal|null
operator|&&
name|rmiUri
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// URI takes precedences, so check whether the configuration has to
comment|// be set from the URI
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|rmiUri
argument_list|)
decl_stmt|;
comment|// extract values from the URI, check later
name|rmiHost
operator|=
name|uri
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|rmiPort
operator|=
name|uri
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|rmiName
operator|=
name|uri
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot parse RMI URI '"
operator|+
name|rmiUri
operator|+
literal|"'."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rmiUri
operator|=
literal|null
expr_stmt|;
comment|// clear RMI URI use another one
name|rmiHost
operator|=
literal|null
expr_stmt|;
comment|// use default host, ignore rmi-host param
block|}
comment|// cut of leading slash from name if defined at all
if|if
condition|(
name|rmiName
operator|!=
literal|null
operator|&&
name|rmiName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rmiName
operator|=
name|rmiName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check RMI port
if|if
condition|(
name|rmiPort
operator|==
operator|-
literal|1
operator|||
name|rmiPort
operator|==
literal|0
condition|)
block|{
comment|// accept -1 or 0 as a hint to use the default
name|rmiPort
operator|=
name|Registry
operator|.
name|REGISTRY_PORT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rmiPort
argument_list|<
operator|-
literal|1
operator|||
name|rmiPort
argument_list|>
literal|0xFFFF
condition|)
block|{
comment|// emit a warning if out of range, use defualt in this case
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid port in rmi-port param "
operator|+
name|rmiPort
operator|+
literal|". using default port."
argument_list|)
expr_stmt|;
name|rmiPort
operator|=
name|Registry
operator|.
name|REGISTRY_PORT
expr_stmt|;
block|}
comment|// check host - use an empty name if null (i.e. not configured)
if|if
condition|(
name|rmiHost
operator|==
literal|null
condition|)
block|{
name|rmiHost
operator|=
literal|""
expr_stmt|;
block|}
comment|// check name - use repositoryName if empty or null
if|if
condition|(
name|rmiName
operator|==
literal|null
operator|||
name|rmiName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|rmiName
operator|=
name|parentConfig
operator|.
name|getRepositoryName
argument_list|()
expr_stmt|;
block|}
comment|// reconstruct the rmiURI now because values might have been changed
name|rmiUri
operator|=
literal|"//"
operator|+
name|rmiHost
operator|+
literal|":"
operator|+
name|rmiPort
operator|+
literal|"/"
operator|+
name|rmiName
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

