begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFutureTask
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Mark and sweep garbage collector.  *   * Uses the file system to store internal state while in process to account for huge data.  * This class is not thread safe.  *   */
end_comment

begin_class
specifier|public
class|class
name|MarkSweepGarbageCollector
implements|implements
name|BlobGarbageCollector
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MarkSweepGarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEWLINE
init|=
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_DIR
init|=
name|StandardSystemProperty
operator|.
name|JAVA_IO_TMPDIR
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_COUNT
init|=
literal|2048
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|State
block|{
name|NOT_RUNNING
block|,
name|MARKING
block|,
name|SWEEPING
block|}
comment|/** The last modified time before current time of blobs to consider for garbage collection. */
specifier|private
specifier|final
name|long
name|maxLastModifiedInterval
decl_stmt|;
comment|/** Run concurrently when possible. */
specifier|private
specifier|final
name|boolean
name|runConcurrently
decl_stmt|;
comment|/** The blob store to be garbage collected. */
specifier|private
specifier|final
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
comment|/** Helper class to mark blob references which **/
specifier|private
specifier|final
name|BlobReferenceRetriever
name|marker
decl_stmt|;
comment|/** The garbage collector file state */
specifier|private
specifier|final
name|GarbageCollectorFileState
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
comment|/** The batch count. */
specifier|private
specifier|final
name|int
name|batchCount
decl_stmt|;
comment|/** Flag to indicate the state of the gc **/
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|NOT_RUNNING
decl_stmt|;
comment|/**      * Creates an instance of MarkSweepGarbageCollector      *      * @param marker BlobReferenceRetriever instanced used to fetch refereedd blob entries      * @param blobStore      * @param root the root absolute path of directory under which temporary      *             files would be created      * @param batchCount batch sized used for saving intermediate state      * @param runBackendConcurrently - run the backend iterate concurrently      * @param maxLastModifiedInterval - lastModifiedTime in millis. Only files with time      *                                less than this time would be considered for GC      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|public
name|MarkSweepGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|batchCount
parameter_list|,
name|boolean
name|runBackendConcurrently
parameter_list|,
name|long
name|maxLastModifiedInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|marker
operator|=
name|marker
expr_stmt|;
name|this
operator|.
name|batchCount
operator|=
name|batchCount
expr_stmt|;
name|this
operator|.
name|runConcurrently
operator|=
name|runBackendConcurrently
expr_stmt|;
name|this
operator|.
name|maxLastModifiedInterval
operator|=
name|maxLastModifiedInterval
expr_stmt|;
name|fs
operator|=
operator|new
name|GarbageCollectorFileState
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Instantiates a new blob garbage collector.      *       * @param marker      * @param blobStore      * @throws IOException Signals that an I/O exception has occurred.      */
specifier|public
name|MarkSweepGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|marker
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|TEMP_DIR
argument_list|,
name|DEFAULT_BATCH_COUNT
argument_list|,
literal|true
argument_list|,
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|24
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectGarbage
parameter_list|()
throws|throws
name|Exception
block|{
name|markAndSweep
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the state of the gc process.      *      * @return the state      */
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**      * Mark and sweep. Main method for GC.      *       * @throws Exception      *             the exception      */
specifier|private
name|void
name|markAndSweep
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Blob garbage collection"
argument_list|)
expr_stmt|;
name|mark
argument_list|()
expr_stmt|;
name|int
name|deleteCount
init|=
name|sweep
argument_list|()
decl_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blob garbage collection completed in {}. Number of blobs "
operator|+
literal|"deleted [{}]"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|deleteCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|fs
argument_list|,
name|threw
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|NOT_RUNNING
expr_stmt|;
block|}
block|}
comment|/**      * Mark phase of the GC.      */
specifier|private
name|void
name|mark
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|state
operator|=
name|State
operator|.
name|MARKING
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting mark phase of the garbage collector"
argument_list|)
expr_stmt|;
comment|// Find all blobs available in the blob store
name|ListenableFutureTask
argument_list|<
name|Integer
argument_list|>
name|blobIdRetriever
init|=
name|ListenableFutureTask
operator|.
name|create
argument_list|(
operator|new
name|BlobIdRetriever
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|runConcurrently
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|blobIdRetriever
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
name|blobIdRetriever
argument_list|)
expr_stmt|;
block|}
comment|// Find all blob references after iterating over the whole repository
name|iterateNodeTree
argument_list|()
expr_stmt|;
try|try
block|{
name|blobIdRetriever
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while fetching all the blobIds from the BlobStore. GC would "
operator|+
literal|"continue with the blobIds retrieved so far"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|difference
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending mark phase of the garbage collector"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Difference phase where the GC candidates are identified.      *       * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|private
name|void
name|difference
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting difference phase of the garbage collector"
argument_list|)
expr_stmt|;
name|FileLineDifferenceIterator
name|iter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
name|batchCount
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bufferWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bufferWriter
operator|=
name|Files
operator|.
name|newWriter
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expiredSet
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|numCandidates
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|expiredSet
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expiredSet
operator|.
name|size
argument_list|()
operator|>
name|getBatchCount
argument_list|()
condition|)
block|{
name|numCandidates
operator|+=
name|expiredSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|expiredSet
argument_list|,
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|expiredSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|numCandidates
operator|+=
name|expiredSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|expiredSet
argument_list|,
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found GC candidates - "
operator|+
name|numCandidates
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending difference phase of the garbage collector"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sweep phase of gc candidate deletion.      *       * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|private
name|int
name|sweep
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|state
operator|=
name|State
operator|.
name|SWEEPING
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting sweep phase of the garbage collector"
argument_list|)
expr_stmt|;
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
name|exceptionQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LineIterator
name|iterator
init|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|>
name|getBatchCount
argument_list|()
condition|)
block|{
name|count
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Sweeper
argument_list|(
name|ids
argument_list|,
name|exceptionQueue
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|count
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Sweeper
argument_list|(
name|ids
argument_list|,
name|exceptionQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|-=
name|exceptionQueue
operator|.
name|size
argument_list|()
expr_stmt|;
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|exceptionQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writer
operator|=
name|Files
operator|.
name|newWriter
argument_list|(
name|fs
operator|.
name|getGarbage
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|exceptionQueue
argument_list|)
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exceptionQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete some blob entries from the blob store. Details around such blob entries "
operator|+
literal|"can be found in [{}]"
argument_list|,
name|fs
operator|.
name|getGarbage
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending sweep phase of the garbage collector"
argument_list|)
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|private
name|int
name|getBatchCount
parameter_list|()
block|{
return|return
name|batchCount
return|;
block|}
comment|/**      * Save batch to file.      */
specifier|static
name|void
name|saveBatchToFile
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|BufferedWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
name|NEWLINE
argument_list|)
operator|.
name|join
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|NEWLINE
argument_list|)
expr_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sweeper thread.      */
class|class
name|Sweeper
implements|implements
name|Runnable
block|{
comment|/** The exception queue. */
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
name|exceptionQueue
decl_stmt|;
comment|/** The ids to sweep. */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
decl_stmt|;
specifier|public
name|Sweeper
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|ConcurrentLinkedQueue
argument_list|<
name|String
argument_list|>
name|exceptionQueue
parameter_list|)
block|{
name|this
operator|.
name|exceptionQueue
operator|=
name|exceptionQueue
expr_stmt|;
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob ids to be deleted {}"
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|blobStore
operator|.
name|deleteChunks
argument_list|(
name|ids
argument_list|,
operator|(
name|maxLastModifiedInterval
operator|>
literal|0
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|maxLastModifiedInterval
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|exceptionQueue
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while deleting blob with ids [{}]"
argument_list|,
name|ids
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exceptionQueue
operator|.
name|addAll
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Iterates the complete node tree and collect all blob references      */
specifier|private
name|void
name|iterateNodeTree
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
name|marker
operator|.
name|collectReferences
argument_list|(
operator|new
name|ReferenceCollector
argument_list|()
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idBatch
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|getBatchCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|debugMode
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
if|if
condition|(
name|debugMode
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"BlobId : {}"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|idBatch
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|idBatch
operator|.
name|size
argument_list|()
operator|>=
name|getBatchCount
argument_list|()
condition|)
block|{
name|saveBatchToFile
argument_list|(
name|idBatch
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|idBatch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|debugMode
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"chunkId : {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|idBatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveBatchToFile
argument_list|(
name|idBatch
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|idBatch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in retrieving references"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of valid blob references marked under mark phase of "
operator|+
literal|"Blob garbage collection [{}]"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// sort the marked references
name|fs
operator|.
name|sort
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * BlobIdRetriever class to retrieve all blob ids.      */
specifier|private
class|class
name|BlobIdRetriever
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting retrieve of all blobs"
argument_list|)
expr_stmt|;
name|BufferedWriter
name|bufferWriter
init|=
literal|null
decl_stmt|;
name|int
name|blobsCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|bufferWriter
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idsIter
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
name|maxLastModifiedInterval
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|idsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|idsIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|>
name|getBatchCount
argument_list|()
condition|)
block|{
name|blobsCount
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|ids
argument_list|,
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|blobsCount
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|ids
argument_list|,
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
comment|// sort the file
name|fs
operator|.
name|sort
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending retrieving all blobs : {}"
argument_list|,
name|blobsCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bufferWriter
argument_list|)
expr_stmt|;
block|}
return|return
name|blobsCount
return|;
block|}
block|}
comment|/**      * FileLineDifferenceIterator class which iterates over the difference of 2 files line by line.      */
specifier|static
class|class
name|FileLineDifferenceIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
comment|/** The marked references iterator. */
specifier|private
specifier|final
name|LineIterator
name|markedIter
decl_stmt|;
comment|/** The available references iter. */
specifier|private
specifier|final
name|LineIterator
name|allIter
decl_stmt|;
specifier|private
specifier|final
name|ArrayDeque
argument_list|<
name|String
argument_list|>
name|queue
decl_stmt|;
specifier|private
specifier|final
name|int
name|batchSize
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
comment|/** Temporary buffer. */
specifier|private
name|TreeSet
argument_list|<
name|String
argument_list|>
name|markedBuffer
decl_stmt|;
comment|/**          * Instantiates a new file line difference iterator.          */
specifier|public
name|FileLineDifferenceIterator
parameter_list|(
name|File
name|marked
parameter_list|,
name|File
name|available
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|markedIter
operator|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|marked
argument_list|)
expr_stmt|;
name|this
operator|.
name|allIter
operator|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
name|queue
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
name|markedBuffer
operator|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
expr_stmt|;
block|}
comment|/**          * Close.          */
specifier|private
name|void
name|close
parameter_list|()
block|{
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|markedIter
argument_list|)
expr_stmt|;
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|allIter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|markedIter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|allIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|difference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|nextDifference
argument_list|()
return|;
block|}
comment|/**          * Next difference.          *           * @return the string          */
specifier|public
name|String
name|nextDifference
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No more difference"
argument_list|)
throw|;
block|}
return|return
name|queue
operator|.
name|remove
argument_list|()
return|;
block|}
comment|/**          * Difference.          *           * @return the sets the          */
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|difference
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|gcSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Iterate till the gc candidate set is at least SAVE_BATCH_COUNT or
comment|// the
comment|// blob id set iteration is complete
while|while
condition|(
name|allIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|gcSet
operator|.
name|size
argument_list|()
operator|<
name|batchSize
condition|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|allBuffer
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|markedIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|markedBuffer
operator|.
name|size
argument_list|()
operator|<
name|batchSize
condition|)
block|{
name|String
name|stre
init|=
name|markedIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|markedBuffer
operator|.
name|add
argument_list|(
name|stre
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|allIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|allBuffer
operator|.
name|size
argument_list|()
operator|<
name|batchSize
condition|)
block|{
name|String
name|stre
init|=
name|allIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|allBuffer
operator|.
name|add
argument_list|(
name|stre
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|markedBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|gcSet
operator|=
name|allBuffer
expr_stmt|;
block|}
else|else
block|{
name|gcSet
operator|.
name|addAll
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|allBuffer
argument_list|,
name|markedBuffer
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|allBuffer
operator|.
name|last
argument_list|()
operator|.
name|compareTo
argument_list|(
name|markedBuffer
operator|.
name|last
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// filling markedLeftoverBuffer
name|TreeSet
argument_list|<
name|String
argument_list|>
name|markedLeftoverBuffer
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
name|markedLeftoverBuffer
operator|.
name|addAll
argument_list|(
name|markedBuffer
operator|.
name|tailSet
argument_list|(
name|allBuffer
operator|.
name|last
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|markedBuffer
operator|=
name|markedLeftoverBuffer
expr_stmt|;
name|markedLeftoverBuffer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|markedBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|gcSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

