begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ImportUUIDBehavior
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
operator|.
name|dispose
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Base class for user import related tests.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractImportTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADMINISTRATORS
init|=
literal|"administrators"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USERPATH
init|=
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|GROUPPATH
init|=
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
decl_stmt|;
specifier|private
name|Repository
name|repo
decl_stmt|;
specifier|protected
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|protected
name|Session
name|adminSession
decl_stmt|;
specifier|protected
name|UserManager
name|userMgr
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|preTestAuthorizables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigurationParameters
name|config
init|=
name|getConfigurationParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|securityProvider
operator|=
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|with
argument_list|(
name|config
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|securityProvider
operator|=
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|QueryEngineSettings
name|queryEngineSettings
init|=
operator|new
name|QueryEngineSettings
argument_list|()
decl_stmt|;
name|queryEngineSettings
operator|.
name|setFailTraversal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Jcr
name|jcr
init|=
operator|new
name|Jcr
argument_list|()
decl_stmt|;
name|jcr
operator|.
name|with
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|jcr
operator|.
name|with
argument_list|(
name|queryEngineSettings
argument_list|)
expr_stmt|;
name|repo
operator|=
name|jcr
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|adminSession
operator|=
name|repo
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_ADMIN_ID
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|adminSession
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|userMgr
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|adminSession
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
name|preTestAuthorizables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
literal|"rep:principalName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
name|preTestAuthorizables
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|// make sure the target node for group-import exists
name|Authorizable
name|administrators
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|ADMINISTRATORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|ADMINISTRATORS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|userMgr
operator|.
name|createGroup
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|ADMINISTRATORS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|administrators
operator|.
name|isGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Expected "
operator|+
name|administrators
operator|.
name|getID
argument_list|()
operator|+
literal|" to be a group."
argument_list|)
throw|;
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|adminSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|userMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
try|try
block|{
name|userMgr
operator|.
name|autoSave
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|userMgr
operator|.
name|findAuthorizables
argument_list|(
literal|"rep:principalName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|preTestAuthorizables
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
try|try
block|{
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// ignore
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"error removing "
operator|+
name|id
operator|+
literal|":"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|adminSession
operator|.
name|logout
argument_list|()
expr_stmt|;
name|repo
operator|=
name|dispose
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CheckForNull
specifier|protected
name|ConfigurationParameters
name|getConfigurationParameters
parameter_list|()
block|{
name|String
name|importBehavior
init|=
name|getImportBehavior
argument_list|()
decl_stmt|;
if|if
condition|(
name|importBehavior
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userParams
operator|.
name|put
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|getImportBehavior
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|UserConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|userParams
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|String
name|getImportBehavior
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getTargetPath
parameter_list|()
function_decl|;
specifier|protected
name|Session
name|getImportSession
parameter_list|()
block|{
return|return
name|adminSession
return|;
block|}
specifier|protected
name|UserManager
name|getUserManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|(
operator|(
name|JackrabbitSession
operator|)
name|getImportSession
argument_list|()
operator|)
operator|.
name|getUserManager
argument_list|()
return|;
block|}
specifier|protected
name|Node
name|getTargetNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getImportSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|getTargetPath
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getExistingUUID
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|adminSession
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|n
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
comment|//noinspection deprecation
return|return
name|n
operator|.
name|getUUID
argument_list|()
return|;
block|}
specifier|protected
name|void
name|doImport
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|doImport
argument_list|(
name|parentPath
argument_list|,
name|xml
argument_list|,
name|ImportUUIDBehavior
operator|.
name|IMPORT_UUID_COLLISION_THROW
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doImport
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|xml
parameter_list|,
name|int
name|importUUIDBehavior
parameter_list|)
throws|throws
name|Exception
block|{
name|doImport
argument_list|(
name|getImportSession
argument_list|()
argument_list|,
name|parentPath
argument_list|,
name|xml
argument_list|,
name|importUUIDBehavior
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doImport
parameter_list|(
name|Session
name|importSession
parameter_list|,
name|String
name|parentPath
parameter_list|,
name|String
name|xml
parameter_list|,
name|int
name|importUUIDBehavior
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|in
decl_stmt|;
if|if
condition|(
name|xml
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'<'
condition|)
block|{
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// uncomment to dump include XMLs
comment|// FileOutputStream out = new FileOutputStream(getTestXml());
comment|// out.write(xml.getBytes());
comment|// out.close();
block|}
else|else
block|{
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|importSession
operator|.
name|importXML
argument_list|(
name|parentPath
argument_list|,
name|in
argument_list|,
name|importUUIDBehavior
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|assertNotDeclaredMember
parameter_list|(
name|Group
name|gr
parameter_list|,
name|String
name|potentialID
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// declared members must not list the invalid entry.
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|it
init|=
name|gr
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|member
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|potentialID
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getNode
argument_list|(
name|member
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

