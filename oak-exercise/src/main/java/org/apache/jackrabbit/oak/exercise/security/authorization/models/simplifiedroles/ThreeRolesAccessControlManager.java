begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|models
operator|.
name|simplifiedroles
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AccessControlPolicyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|PolicyOwner
import|;
end_import

begin_class
class|class
name|ThreeRolesAccessControlManager
implements|implements
name|PolicyOwner
implements|,
name|AccessControlManager
block|{
specifier|private
specifier|final
name|String
name|supportedPath
decl_stmt|;
name|ThreeRolesAccessControlManager
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|String
name|supportedPath
parameter_list|,
annotation|@
name|Nonnull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|supportedPath
operator|=
name|supportedPath
expr_stmt|;
comment|// EXERCISE
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getSupportedPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|privilegeFromName
parameter_list|(
name|String
name|privilegeName
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
comment|/**      * See {@code L5_CustomAccessControlManagementTest.testGetPolicies}      */
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|AccessDeniedException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|AccessDeniedException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|AccessDeniedException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
return|return
operator|new
name|AccessControlPolicyIteratorAdapter
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|AccessControlException
throws|,
name|AccessDeniedException
throws|,
name|LockException
throws|,
name|VersionException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|AccessControlException
throws|,
name|AccessDeniedException
throws|,
name|LockException
throws|,
name|VersionException
throws|,
name|RepositoryException
block|{
comment|// EXERCISE
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|defines
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|Nonnull
name|AccessControlPolicy
name|accessControlPolicy
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isSupportedPath
argument_list|(
name|supportedPath
argument_list|,
name|absPath
argument_list|)
condition|)
block|{
comment|// EXERCISE
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

