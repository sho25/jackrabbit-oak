begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
operator|.
name|OakDirectory
operator|.
name|UNIQUE_KEY_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|StreamingOakDirectoryTest
extends|extends
name|OakDirectoryTestBase
block|{
annotation|@
name|Override
name|void
name|assertBlobSizeInWrite
parameter_list|(
name|PropertyState
name|jcrData
parameter_list|,
name|int
name|blobSize
parameter_list|,
name|int
name|fileSize
parameter_list|)
block|{
name|Blob
name|blob
init|=
name|jcrData
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fileSize
operator|+
name|UNIQUE_KEY_SIZE
argument_list|,
name|blob
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OakDirectoryBuilder
name|getOakDirectoryBuilder
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
return|return
operator|new
name|OakDirectoryBuilder
argument_list|(
name|builder
argument_list|,
name|indexDefinition
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
name|MemoryBlobStore
name|getBlackHoleBlobStore
parameter_list|()
block|{
return|return
operator|new
name|BlackHoleBlobStoreForLargeBlobs
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|BlackHoleBlobStoreForLargeBlobs
extends|extends
name|MemoryBlobStore
block|{
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|storeBlock
parameter_list|(
name|byte
index|[]
name|digest
parameter_list|,
name|int
name|level
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|String
name|id
init|=
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|digest
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|storeBlock
argument_list|(
name|digest
argument_list|,
name|level
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|readBlockFromBackend
parameter_list|(
name|BlockId
name|id
parameter_list|)
block|{
name|Integer
name|length
init|=
name|map
operator|.
name|get
argument_list|(
name|StringUtils
operator|.
name|convertBytesToHex
argument_list|(
name|id
operator|.
name|getDigest
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|byte
index|[
name|length
index|]
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|readBlockFromBackend
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

