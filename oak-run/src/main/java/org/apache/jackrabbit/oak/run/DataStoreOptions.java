begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBeanFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DataStoreOptions
implements|implements
name|OptionsBean
block|{
specifier|public
specifier|static
specifier|final
name|OptionsBeanFactory
name|FACTORY
init|=
name|DataStoreOptions
operator|::
operator|new
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|workDirOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|outputDirOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|collectGarbage
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|consistencyCheck
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|refOp
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|idOp
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|checkConsistencyAfterGC
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|batchCount
decl_stmt|;
specifier|private
name|OptionSet
name|options
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|OptionSpec
argument_list|>
name|actionOpts
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|operationNames
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Long
argument_list|>
name|blobGcMaxAgeInSecs
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|verbose
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|verboseRootPath
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|verbosePathInclusionRegex
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|resetLoggingConfig
decl_stmt|;
specifier|private
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|exportMetrics
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
specifier|public
name|DataStoreOptions
parameter_list|(
name|OptionParser
name|parser
parameter_list|)
block|{
name|collectGarbage
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"collect-garbage"
argument_list|,
literal|"Performs DataStore Garbage Collection on the repository/datastore defined. An option boolean specifying "
operator|+
literal|"'markOnly' required if only mark phase of garbage collection is to be executed"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|checkConsistencyAfterGC
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"check-consistency-gc"
argument_list|,
literal|"Performs a consistency check immediately after DSGC"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|consistencyCheck
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"check-consistency"
argument_list|,
literal|"Performs a consistency check on the repository/datastore defined"
argument_list|)
expr_stmt|;
name|refOp
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"dump-ref"
argument_list|,
literal|"Gets a dump of Blob References"
argument_list|)
expr_stmt|;
name|idOp
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"dump-id"
argument_list|,
literal|"Gets a dump of Blob Ids"
argument_list|)
expr_stmt|;
name|blobGcMaxAgeInSecs
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"max-age"
argument_list|,
literal|""
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|86400L
argument_list|)
expr_stmt|;
name|batchCount
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"batch"
argument_list|,
literal|"Batch count"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|workDirOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"work-dir"
argument_list|,
literal|"Directory used for storing temporary files"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"temp"
argument_list|)
argument_list|)
expr_stmt|;
name|outputDirOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"out-dir"
argument_list|,
literal|"Directory for storing output files"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"datastore-out"
argument_list|)
argument_list|)
expr_stmt|;
name|verbose
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"verbose"
argument_list|,
literal|"Option to get all the paths and implementation specific blob ids"
argument_list|)
expr_stmt|;
comment|// Option NOT available for garbage collection operation - we throw an
comment|// exception if both --collect-garbage and
comment|// --verboseRootPath are provided in the command.
name|verboseRootPath
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"verboseRootPath"
argument_list|,
literal|"Root path to output backend formatted ids/paths"
argument_list|)
operator|.
name|availableUnless
argument_list|(
name|collectGarbage
argument_list|)
operator|.
name|availableIf
argument_list|(
name|verbose
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|withValuesSeparatedBy
argument_list|(
name|DELIM
argument_list|)
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|verbosePathInclusionRegex
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"verbosePathInclusionRegex"
argument_list|,
literal|"Regex to provide an inclusion list for "
operator|+
literal|"nodes that will be scanned under the path provided with the option --verboseRootPath"
argument_list|)
operator|.
name|availableIf
argument_list|(
name|verboseRootPath
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|withValuesSeparatedBy
argument_list|(
name|DELIM
argument_list|)
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|resetLoggingConfig
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"reset-log-config"
argument_list|,
literal|"Reset logging config for testing purposes only"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|exportMetrics
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"export-metrics"
argument_list|,
literal|"type, URI to export the metrics and optional metadata all delimeted by semi-colon(;)"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
expr_stmt|;
comment|//Set of options which define action
name|actionOpts
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|collectGarbage
argument_list|,
name|consistencyCheck
argument_list|,
name|idOp
argument_list|,
name|refOp
argument_list|)
expr_stmt|;
name|operationNames
operator|=
name|collectionOperationNames
argument_list|(
name|actionOpts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|OptionSet
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|title
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"The datastore command supports the following operations."
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|order
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|operationNames
parameter_list|()
block|{
return|return
name|operationNames
return|;
block|}
specifier|public
name|boolean
name|anyActionSelected
parameter_list|()
block|{
for|for
control|(
name|OptionSpec
name|spec
range|:
name|actionOpts
control|)
block|{
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|spec
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|File
name|getWorkDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|workDir
init|=
name|workDirOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
return|return
name|workDir
return|;
block|}
specifier|public
name|File
name|getOutDir
parameter_list|()
block|{
return|return
name|outputDirOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|collectGarbage
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|collectGarbage
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkConsistency
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|consistencyCheck
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dumpRefs
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|refOp
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dumpIds
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|idOp
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|checkConsistencyAfterGC
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|checkConsistencyAfterGC
argument_list|)
operator|&&
name|checkConsistencyAfterGC
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|markOnly
parameter_list|()
block|{
return|return
name|collectGarbage
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|long
name|getBlobGcMaxAgeInSecs
parameter_list|()
block|{
return|return
name|blobGcMaxAgeInSecs
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|int
name|getBatchCount
parameter_list|()
block|{
return|return
name|batchCount
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isVerbose
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|verbose
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasVerboseRootPaths
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|verboseRootPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasVerboseInclusionRegex
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|verbosePathInclusionRegex
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isResetLoggingConfig
parameter_list|()
block|{
return|return
name|resetLoggingConfig
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|collectionOperationNames
parameter_list|(
name|Set
argument_list|<
name|OptionSpec
argument_list|>
name|actionOpts
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OptionSpec
name|spec
range|:
name|actionOpts
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|spec
operator|.
name|options
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|exportMetrics
parameter_list|()
block|{
return|return
name|options
operator|.
name|has
argument_list|(
name|exportMetrics
argument_list|)
return|;
block|}
specifier|public
name|String
name|exportMetricsArgs
parameter_list|()
block|{
return|return
name|exportMetrics
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getVerboseRootPaths
parameter_list|()
block|{
return|return
name|options
operator|.
name|valuesOf
argument_list|(
name|verboseRootPath
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getVerboseInclusionRegex
parameter_list|()
block|{
return|return
name|options
operator|.
name|valuesOf
argument_list|(
name|verbosePathInclusionRegex
argument_list|)
return|;
block|}
block|}
end_class

end_unit

