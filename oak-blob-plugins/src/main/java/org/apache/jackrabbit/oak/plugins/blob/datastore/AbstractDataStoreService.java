begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|stats
operator|.
name|BlobStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|CompositeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|PROP_SPLIT_BLOBSTORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|componentAbstract
operator|=
literal|true
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractDataStoreService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JR2_CACHING_PROP
init|=
literal|"oak.datastore.jr2caching"
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|JR2_CACHING
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|JR2_CACHING_PROP
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_HOME
init|=
literal|"repository.home"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_ENCODE_LENGTH
init|=
literal|"encodeLengthInId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_CACHE_SIZE
init|=
literal|"cacheSizeInMB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"oak.blobstore.description"
decl_stmt|;
specifier|private
name|ServiceRegistration
name|reg
decl_stmt|;
specifier|private
name|Registration
name|mbeanReg
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
decl_stmt|;
specifier|private
name|DataStoreBlobStore
name|dataStore
decl_stmt|;
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// change to mutable map. may be modified in createDS call
name|config
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|DataStore
name|ds
init|=
name|createDataStore
argument_list|(
name|context
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|boolean
name|encodeLengthInId
init|=
name|PropertiesUtil
operator|.
name|toBoolean
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_ENCODE_LENGTH
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|cacheSizeInMB
init|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_CACHE_SIZE
argument_list|)
argument_list|,
name|DataStoreBlobStore
operator|.
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
name|String
name|homeDir
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|PROP_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|homeDir
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing the DataStore with homeDir [{}]"
argument_list|,
name|homeDir
argument_list|)
expr_stmt|;
block|}
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|ds
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ds
operator|.
name|init
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|BlobStoreStats
name|stats
init|=
operator|new
name|BlobStoreStats
argument_list|(
name|getStatisticsProvider
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|dataStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|ds
argument_list|,
name|encodeLengthInId
argument_list|,
name|cacheSizeInMB
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataStore
operator|.
name|setBlobStatsCollector
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|dataStore
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|DESCRIPTION
argument_list|,
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_SPLIT_BLOBSTORE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|PROP_SPLIT_BLOBSTORE
argument_list|,
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_SPLIT_BLOBSTORE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|BlobStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|GarbageCollectableBlobStore
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|dataStore
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mbeanReg
operator|=
name|registerMBeans
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|dataStore
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|()
throws|throws
name|DataStoreException
block|{
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mbeanReg
operator|!=
literal|null
condition|)
block|{
name|mbeanReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|DataStore
name|createDataStore
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
function_decl|;
specifier|protected
name|StatisticsProvider
name|getStatisticsProvider
parameter_list|()
block|{
return|return
name|statisticsProvider
return|;
block|}
specifier|protected
name|String
index|[]
name|getDescription
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"type=unknown"
block|}
return|;
block|}
name|void
name|setStatisticsProvider
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
block|}
specifier|protected
specifier|static
name|String
name|lookup
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|String
name|property
parameter_list|)
block|{
comment|//Prefer property from BundleContext first
if|if
condition|(
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Registration
name|registerMBeans
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|DataStoreBlobStore
name|ds
parameter_list|,
name|BlobStoreStats
name|stats
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeRegistration
argument_list|(
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|BlobStoreStatsMBean
operator|.
name|class
argument_list|,
name|stats
argument_list|,
name|BlobStoreStatsMBean
operator|.
name|TYPE
argument_list|,
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|ds
operator|.
name|getCacheStats
argument_list|()
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|ds
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

