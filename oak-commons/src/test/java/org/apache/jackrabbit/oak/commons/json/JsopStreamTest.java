begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|StopWatch
import|;
end_import

begin_class
specifier|public
class|class
name|JsopStreamTest
extends|extends
name|TestCase
block|{
comment|// run the micro-benchmark
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|String
name|s
init|=
literal|"Hello \"World\" Hello \"World\" Hello \"World\" Hello \"World\" Hello \"World\" Hello \"World\" "
decl_stmt|;
name|StopWatch
name|timer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|JsopWriter
name|w
init|=
name|k
operator|%
literal|2
operator|==
literal|1
condition|?
operator|new
name|JsopBuilder
argument_list|()
else|:
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|resetWriter
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|w
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|timer
operator|.
name|seconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// JsopStream: 20
comment|// JsopBuilder: 1150
block|}
specifier|public
name|void
name|testNested
parameter_list|()
block|{
name|JsopStream
name|s
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|JsopStream
name|nested
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
operator|.
name|value
argument_list|(
literal|false
argument_list|)
operator|.
name|value
argument_list|(
literal|"Hello"
argument_list|)
operator|.
name|endArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|nested
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"x\":[1,null,true,false,\"Hello\"]"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRawValue
parameter_list|()
block|{
name|JsopStream
name|s
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"y"
argument_list|)
operator|.
name|array
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|array
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"x\":{\"y\":[1,[],2]}"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testRawValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|testRawValue
argument_list|(
operator|new
name|JsopTokenizer
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|testRawValue
parameter_list|(
name|JsopReader
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|s
operator|.
name|matches
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|matches
argument_list|(
literal|'+'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{"
argument_list|,
name|s
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|s
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1,[],2]"
argument_list|,
name|s
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|END
argument_list|)
expr_stmt|;
name|s
operator|.
name|resetReader
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testJsopReader
parameter_list|()
block|{
name|JsopStream
name|s
init|=
operator|new
name|JsopStream
argument_list|()
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"y"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|(
literal|"n"
argument_list|)
operator|.
name|value
argument_list|(
literal|""
argument_list|)
operator|.
name|key
argument_list|(
literal|"z"
argument_list|)
operator|.
name|encodedValue
argument_list|(
literal|"n10"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|s
operator|.
name|setLineLength
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"x\":{\"y\":1,\"n\":\"\",\"z\":n10}"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|matches
argument_list|(
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|matches
argument_list|(
literal|'+'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{"
argument_list|,
name|s
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|s
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|s
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"n"
argument_list|,
name|s
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"\""
argument_list|,
name|s
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"z"
argument_list|,
name|s
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"n10"
argument_list|,
name|s
operator|.
name|readRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTokenizer
parameter_list|()
block|{
name|test
argument_list|(
literal|"+ \"x\": {}"
argument_list|,
operator|new
name|JsopStream
argument_list|()
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|test
argument_list|(
literal|"[\"-1\": -1, "
operator|+
literal|"\"true\": true, "
operator|+
literal|"\"false\": false, "
operator|+
literal|"\"null\": null]"
argument_list|,
operator|new
name|JsopStream
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|key
argument_list|(
literal|"-1"
argument_list|)
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|key
argument_list|(
literal|"true"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
operator|.
name|key
argument_list|(
literal|"false"
argument_list|)
operator|.
name|value
argument_list|(
literal|false
argument_list|)
operator|.
name|key
argument_list|(
literal|"null"
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|endArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|test
parameter_list|(
name|String
name|expected
parameter_list|,
name|JsopReader
name|t
parameter_list|)
block|{
name|String
name|j2
init|=
name|prettyPrint
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|j2
argument_list|)
expr_stmt|;
name|j2
operator|=
name|prettyPrint
argument_list|(
operator|new
name|JsopTokenizer
argument_list|(
name|j2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|j2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|JsopReader
name|t
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|prettyPrint
argument_list|(
name|buff
argument_list|,
name|t
argument_list|,
literal|"  "
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getTokenType
argument_list|()
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|JsopReader
name|t
parameter_list|,
name|String
name|ident
parameter_list|)
block|{
name|String
name|space
init|=
literal|""
decl_stmt|;
name|boolean
name|inArray
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|token
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|JsopReader
operator|.
name|END
case|:
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
case|case
name|JsopReader
operator|.
name|STRING
case|:
name|buff
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|encode
argument_list|(
name|t
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|JsopReader
operator|.
name|NUMBER
case|:
case|case
name|JsopReader
operator|.
name|TRUE
case|:
case|case
name|JsopReader
operator|.
name|FALSE
case|:
case|case
name|JsopReader
operator|.
name|NULL
case|:
case|case
name|JsopReader
operator|.
name|IDENTIFIER
case|:
case|case
name|JsopReader
operator|.
name|ERROR
case|:
name|buff
operator|.
name|append
argument_list|(
name|t
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'{'
case|:
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
operator|.
name|append
argument_list|(
name|space
operator|+=
name|ident
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'}'
case|:
name|space
operator|=
name|space
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|space
operator|.
name|length
argument_list|()
operator|-
name|ident
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|space
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|inArray
operator|=
literal|true
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|inArray
operator|=
literal|false
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|','
case|:
if|if
condition|(
operator|!
name|inArray
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
operator|.
name|append
argument_list|(
name|space
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|buff
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|token
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|testBuilder
parameter_list|()
block|{
name|JsopWriter
name|buff
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|key
argument_list|(
literal|"int"
argument_list|)
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|key
argument_list|(
literal|"decimal"
argument_list|)
operator|.
name|encodedValue
argument_list|(
literal|"3.0"
argument_list|)
operator|.
name|key
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
operator|.
name|key
argument_list|(
literal|"null"
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|)
operator|.
name|key
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|array
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|"\u001f ~ \u007f \u0080"
argument_list|)
operator|.
name|value
argument_list|(
literal|"42"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|key
argument_list|(
literal|"some"
argument_list|)
operator|.
name|value
argument_list|(
literal|"more"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|json
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+{\"foo\":\"bar\",\"int\":3,\"decimal\":3.0,"
operator|+
literal|"\"obj\":{\"boolean\":true,\"null\":null,"
operator|+
literal|"\"arr\":[[1,\"\\u001f ~ \\u007f \\u0080\",\"42\"],[]]},\"some\":\"more\"}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|buff
operator|.
name|resetWriter
argument_list|()
expr_stmt|;
name|buff
operator|.
name|array
argument_list|()
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
operator|.
name|value
argument_list|(
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"y"
argument_list|)
operator|.
name|value
argument_list|(
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|json
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[{\"x\":\"1\"}\n,{\"y\":\"2\"}\n]"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|buff
operator|=
operator|new
name|JsopStream
argument_list|()
expr_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"x"
argument_list|)
operator|.
name|value
argument_list|(
literal|"1"
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"y"
argument_list|)
operator|.
name|value
argument_list|(
literal|"2"
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
name|buff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
literal|"z"
argument_list|)
operator|.
name|value
argument_list|(
literal|false
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
name|json
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+\"x\":\"1\"\n+\"y\":\"2\"\n+\"z\":false\n"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

