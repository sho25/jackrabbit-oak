begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|InvalidQueryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_comment
comment|/**  * The implementation of the corresponding JCR interface.  */
end_comment

begin_class
specifier|public
class|class
name|QueryImpl
implements|implements
name|Query
block|{
specifier|private
specifier|final
name|QueryManagerImpl
name|manager
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|bindVariableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
specifier|private
specifier|final
name|String
name|statement
decl_stmt|;
specifier|private
name|long
name|limit
decl_stmt|,
name|offset
decl_stmt|;
specifier|private
name|boolean
name|parsed
decl_stmt|;
name|QueryImpl
parameter_list|(
name|QueryManagerImpl
name|manager
parameter_list|,
name|String
name|statement
parameter_list|,
name|String
name|language
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bindValue
parameter_list|(
name|String
name|varName
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
name|bindVariableMap
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parse
parameter_list|()
throws|throws
name|InvalidQueryException
block|{
if|if
condition|(
name|parsed
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|manager
operator|.
name|parse
argument_list|(
name|statement
argument_list|,
name|language
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|names
control|)
block|{
name|bindVariableMap
operator|.
name|put
argument_list|(
name|n
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryResult
name|execute
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|manager
operator|.
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|language
argument_list|,
name|bindVariableMap
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getBindVariableNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|parse
argument_list|()
expr_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|bindVariableMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|bindVariableMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatement
parameter_list|()
block|{
return|return
name|statement
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStoredQueryPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO not implemented yet
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|storeAsNode
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO not implemented yet
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

