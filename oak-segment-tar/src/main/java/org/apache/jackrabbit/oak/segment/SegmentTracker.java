begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Tracker of references to segment identifiers and segment instances  * that are currently kept in memory and factory for creating {@link SegmentId}  * instances.  */
end_comment

begin_class
specifier|public
class|class
name|SegmentTracker
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|VERSION
init|=
operator|(
literal|0x4L
operator|<<
literal|12
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|LSB_MASK
init|=
operator|~
operator|(
literal|0xfL
operator|<<
literal|60
operator|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DATA
init|=
literal|0xAL
operator|<<
literal|60
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BULK
init|=
literal|0xBL
operator|<<
literal|60
decl_stmt|;
comment|/**      * The random number source for generating new segment identifiers.      */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
comment|/**      * Hash table of weak references to segment identifiers that are      * currently being accessed. The size of the table is always a power      * of two, which optimizes the {@code refresh()} operation. The table is      * indexed by the random identifier bits, which guarantees uniform      * distribution of entries. Each table entry is either {@code null}      * (when there are no matching identifiers) or a list of weak references      * to the matching identifiers.      */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentIdTable
index|[]
name|tables
init|=
operator|new
name|SegmentIdTable
index|[
literal|32
index|]
decl_stmt|;
comment|/**      * Number of segment tracked since this tracker was instantiated      */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|AtomicInteger
name|segmentCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|SegmentTracker
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tables
index|[
name|i
index|]
operator|=
operator|new
name|SegmentIdTable
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Number of segment tracked since this tracker was instantiated      * @return count      */
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentCounter
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Returns all segment identifiers that are currently referenced in memory.      *      * @return referenced segment identifiers      */
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|getReferencedSegmentIds
parameter_list|()
block|{
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|ids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentIdTable
name|table
range|:
name|tables
control|)
block|{
name|table
operator|.
name|collectReferencedIds
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
comment|/**      * Get an existing {@code SegmentId} with the given {@code msb} and {@code      * lsb} or create a new one if no such id exists with this tracker.      *      * @param msb   most significant bits of the segment id      * @param lsb   least  significant bits of the segment id      * @param maker A non-{@code null} instance of {@link SegmentIdFactory}.      * @return the segment id      */
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|getSegmentId
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|SegmentIdFactory
name|maker
parameter_list|)
block|{
name|int
name|index
init|=
operator|(
operator|(
name|int
operator|)
name|msb
operator|)
operator|&
operator|(
name|tables
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
return|return
name|tables
index|[
name|index
index|]
operator|.
name|getSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|maker
argument_list|)
return|;
block|}
comment|/**      * Create and track a new segment id for data segments.      *      * @param maker A non-{@code null} instance of {@link SegmentIdFactory}.      * @return the segment id      */
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newDataSegmentId
parameter_list|(
name|SegmentIdFactory
name|maker
parameter_list|)
block|{
return|return
name|newSegmentId
argument_list|(
name|DATA
argument_list|,
name|maker
argument_list|)
return|;
block|}
comment|/**      * Create and track a new segment id for bulk segments.      *      * @param maker A non-{@code null} instance of {@link SegmentIdFactory}.      * @return the segment id      */
annotation|@
name|Nonnull
specifier|public
name|SegmentId
name|newBulkSegmentId
parameter_list|(
name|SegmentIdFactory
name|maker
parameter_list|)
block|{
return|return
name|newSegmentId
argument_list|(
name|BULK
argument_list|,
name|maker
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|SegmentId
name|newSegmentId
parameter_list|(
name|long
name|type
parameter_list|,
name|SegmentIdFactory
name|maker
parameter_list|)
block|{
name|segmentCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|long
name|msb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|MSB_MASK
operator|)
operator||
name|VERSION
decl_stmt|;
name|long
name|lsb
init|=
operator|(
name|random
operator|.
name|nextLong
argument_list|()
operator|&
name|LSB_MASK
operator|)
operator||
name|type
decl_stmt|;
return|return
name|getSegmentId
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|,
name|maker
argument_list|)
return|;
block|}
comment|// FIXME OAK-4285: Align cleanup of segment id tables with the new cleanup strategy
comment|// ith clean brutal we need to remove those ids that have been cleaned
comment|// i.e. those whose segment was from an old generation
comment|// Instead of removing, mark affected ids as gc'ed so the SNFE caused by
comment|// any subsequent access can report a precise cause
specifier|public
specifier|synchronized
name|void
name|clearSegmentIdTables
parameter_list|(
name|Predicate
argument_list|<
name|SegmentId
argument_list|>
name|canRemove
parameter_list|)
block|{
for|for
control|(
name|SegmentIdTable
name|table
range|:
name|tables
control|)
block|{
name|table
operator|.
name|clearSegmentIdTables
argument_list|(
name|canRemove
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

