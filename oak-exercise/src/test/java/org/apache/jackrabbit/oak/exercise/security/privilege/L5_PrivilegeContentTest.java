begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|L4_PrivilegesAndPermissionsTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|L7_PermissionContentTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Privilege Management  * =============================================================================  *  * Title: Representation of Privileges in the Repository  * -----------------------------------------------------------------------------  *  * Goal:  * Understand how privileges are represented in the repository content.  *  * Exercises:  *  * - {@link #testPrivilegeRoot()}  *   This test retrieves the root node below which all registered privileges are  *   being stored. Make yourself familiar with the structure by looking at the  *   node type definitions in 'builtin-nodetypes.cnd' and complete the test case  *   such that it passes.  *  *   Question: What can you say about the structure of the privileges tree in the repository?  *   Question: Can you explain why it is located below /jcr:system ?  *   Question: Go back to {@link L4_CustomPrivilegeTest}  *   and take a closer look at the tree/node that stores your custom privilege.  *  * - {@link #testPrivilegeDefinition()}  *   Each tree/node presenting a privilege in fact just stores the basic definition  *   of the privilege. Use this exercise to compare the difference between the  *   definition (and it's tree) and the resulting privilege.  *  *   Question: What properties stored on the privilege definition tree are not exposed by  *             {@link org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeDefinition}?  *             -> see advanced exercises.  *  *  * Advanced Exercises  * -----------------------------------------------------------------------------  *  * - {@link #testPrivilegeBits()}  *   For internal handling of privileges the Oak repository doesn't use the  *   privilege names (and the expensive resolution of the aggregation) but  *   rather makes use of internal long representation of the privileges.  *   Use this exercise to become familiar with  *   - {@link org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBitsProvider}  *   - {@link org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits}  *   and how they are represented in the privilege content and how they are  *   used to internally deal with privileges.  *  *   Question: How are PrivilegeBits created from privilege name(s)  *   Question: How are they stored with the privilege definition?  *   Question: Can you also retrieve the PropertyState on the privilege trees that  *             effectively stores the long presentation as used in the PrivilegeBits?  *  * - {@link #testNext()}  *   This exercises aims to help you understand how the implementation keeps  *   track of the internal long representation of privileges and how those  *   long representations are being calculated for newly registered privileges.  *   Resolve the EXERCISE marks in the test-case and explain the behavior.  *  *   Question: Can you identify where 'rep:next' is being updated?  *   Question: Try to set the value of rep:next manually and explain what happens.  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L6_JcrAllTest}  * - {@link L4_PrivilegesAndPermissionsTest}  * - {@link L7_PermissionContentTest}  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L5_PrivilegeContentTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeRoot
parameter_list|()
block|{
name|Tree
name|privilegesRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|name
argument_list|,
name|privilegesRoot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|primaryType
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|primaryType
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|privilegesRoot
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE: look at the node type definition in the file 'builtin-nodetypes.cnd'
comment|// Question: can you predict how the tree defined the 'privilegesRoot' tree looks like?
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeDefinition
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Tree
name|repWriteTree
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getChild
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
decl_stmt|;
name|PrivilegeDefinition
name|def
init|=
name|PrivilegeUtil
operator|.
name|readDefinition
argument_list|(
name|repWriteTree
argument_list|)
decl_stmt|;
name|String
name|expectedName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedName
argument_list|,
name|def
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isAbstract
init|=
literal|false
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|isAbstract
argument_list|,
name|def
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedAggregates
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedAggregates
argument_list|,
name|def
operator|.
name|getDeclaredAggregateNames
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: compare the internal privilege definition (and it's tree representation) with the privilege itself.
name|Privilege
name|repWritePrivilege
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeBits
parameter_list|()
block|{
name|Tree
name|jcrReadTree
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getChild
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|Tree
name|repWriteTree
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getChild
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
decl_stmt|;
name|PrivilegeBitsProvider
name|provider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|privilegeBits
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|,
name|PrivilegeBits
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|readBits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|jcrReadTree
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|writeBits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|jcrReadTree
argument_list|)
decl_stmt|;
comment|// EXERCISE: play with 'PrivilegeBits' methods to compare 'privilegeBits' with 'readBits' and 'writeBits'
comment|// EXERCISE: retrieve the property that stores the long representation of each privilege above
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNext
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|PropertyState
name|next
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getProperty
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_NEXT
argument_list|)
decl_stmt|;
name|PrivilegeManager
name|privilegeManager
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Privilege
name|newPrivilege
init|=
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"myPrivilege"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// EXERCISE: compare the 'next' property state with rep:bits property of the newly created privilege.
name|PropertyState
name|nextAgain
init|=
name|PrivilegeUtil
operator|.
name|getPrivilegesTree
argument_list|(
name|root
argument_list|)
operator|.
name|getProperty
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_NEXT
argument_list|)
decl_stmt|;
comment|// EXERCISE: look at the new value of rep:next and explain it. Q: where did it get modified?
comment|// EXERCISE: try to modify rep:next manually and explain what happens.
block|}
block|}
end_class

end_unit

