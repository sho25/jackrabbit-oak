begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
operator|.
name|mk
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_comment
comment|/**  * A MicroKernel wrapper that provides limited support for branch and merge even  * if the underlying implementation does not support it.  */
end_comment

begin_class
specifier|public
class|class
name|BranchMergeMicroKernel
implements|implements
name|MicroKernel
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TRUNK
init|=
literal|"trunk"
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|base
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|knownBranches
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|nextBranch
decl_stmt|;
specifier|private
name|String
name|trunkHeadRevision
decl_stmt|;
specifier|private
name|String
name|busyBranch
decl_stmt|;
specifier|public
name|BranchMergeMicroKernel
parameter_list|(
name|MicroKernel
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
block|{
if|if
condition|(
name|trunkRevisionId
operator|==
literal|null
condition|)
block|{
name|trunkRevisionId
operator|=
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
name|String
name|head
init|=
name|base
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|branchId
init|=
name|getBranchId
argument_list|(
name|trunkRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TRUNK
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Cannot branch off a branch: "
operator|+
name|trunkRevisionId
argument_list|)
throw|;
block|}
name|trunkHeadRevision
operator|=
name|head
expr_stmt|;
name|String
name|branch
init|=
literal|"b"
operator|+
name|nextBranch
operator|++
decl_stmt|;
name|knownBranches
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|String
name|branchRev
init|=
name|branch
operator|+
literal|"-"
operator|+
name|getHeadRevision
argument_list|()
decl_stmt|;
name|busyBranch
operator|=
literal|null
expr_stmt|;
return|return
name|branchRev
return|;
block|}
specifier|private
specifier|synchronized
name|boolean
name|isKnownBranch
parameter_list|(
name|String
name|branchId
parameter_list|)
block|{
if|if
condition|(
name|TRUNK
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|knownBranches
operator|.
name|contains
argument_list|(
name|branchId
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getBranchId
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|==
literal|null
condition|)
block|{
return|return
name|TRUNK
return|;
block|}
name|int
name|idx
init|=
name|revisionId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<=
literal|0
condition|)
block|{
return|return
name|TRUNK
return|;
block|}
return|return
name|revisionId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getRevisionId
parameter_list|(
name|String
name|branchId
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|TRUNK
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
return|return
name|revisionId
return|;
block|}
return|return
name|revisionId
operator|.
name|substring
argument_list|(
name|branchId
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getCombinedRevisionId
parameter_list|(
name|String
name|branchId
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
if|if
condition|(
name|TRUNK
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
return|return
name|revisionId
return|;
block|}
return|return
name|branchId
operator|+
literal|"-"
operator|+
name|revisionId
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|revisionId
operator|==
literal|null
condition|)
block|{
name|revisionId
operator|=
name|getHeadRevision
argument_list|()
expr_stmt|;
block|}
name|String
name|branchId
init|=
name|getBranchId
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
comment|// if another branch is active, wait until it's changes are merged
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|TRUNK
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
operator|&&
operator|!
name|isKnownBranch
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Unknown branch: "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
if|if
condition|(
name|busyBranch
operator|==
literal|null
operator|||
name|branchId
operator|.
name|equals
argument_list|(
name|busyBranch
argument_list|)
condition|)
block|{
break|break;
block|}
try|try
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|busyBranch
operator|=
name|branchId
expr_stmt|;
name|String
name|rev
init|=
name|getRevisionId
argument_list|(
name|branchId
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|base
operator|.
name|commit
argument_list|(
name|path
argument_list|,
name|jsonDiff
argument_list|,
name|rev
argument_list|,
name|message
argument_list|)
decl_stmt|;
return|return
name|getCombinedRevisionId
argument_list|(
name|branchId
argument_list|,
name|rev2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|String
name|fromBranch
init|=
name|getBranchId
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|String
name|toBranch
init|=
name|getBranchId
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
name|String
name|from
init|=
name|getRevisionId
argument_list|(
name|fromBranch
argument_list|,
name|fromRevisionId
argument_list|)
decl_stmt|;
name|String
name|to
init|=
name|getRevisionId
argument_list|(
name|toBranch
argument_list|,
name|toRevisionId
argument_list|)
decl_stmt|;
return|return
name|base
operator|.
name|diff
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|path
argument_list|,
name|depth
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|String
name|branch
init|=
name|getBranchId
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|getRevisionId
argument_list|(
name|branch
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
return|return
name|base
operator|.
name|getChildNodeCount
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeadRevision
parameter_list|()
block|{
if|if
condition|(
name|trunkHeadRevision
operator|!=
literal|null
condition|)
block|{
return|return
name|trunkHeadRevision
return|;
block|}
return|return
name|base
operator|.
name|getHeadRevision
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevisionId
parameter_list|,
name|String
name|toRevisionId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|fromBranch
init|=
name|getBranchId
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|String
name|toBranch
init|=
name|getBranchId
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromBranch
operator|.
name|equals
argument_list|(
name|TRUNK
argument_list|)
operator|||
operator|!
name|toBranch
operator|.
name|equals
argument_list|(
name|TRUNK
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"This operation is not supported on branches: "
operator|+
name|fromRevisionId
operator|+
literal|" - "
operator|+
name|toRevisionId
argument_list|)
throw|;
block|}
return|return
name|base
operator|.
name|getJournal
argument_list|(
name|fromRevisionId
argument_list|,
name|toRevisionId
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
name|base
operator|.
name|getLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|String
name|branch
init|=
name|getBranchId
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|getRevisionId
argument_list|(
name|branch
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
return|return
name|base
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
name|depth
argument_list|,
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|base
operator|.
name|getRevisionHistory
argument_list|(
name|since
argument_list|,
name|maxEntries
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|String
name|branch
init|=
name|getBranchId
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|TRUNK
operator|.
name|equals
argument_list|(
name|branch
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Can not merge the trunk"
argument_list|)
throw|;
block|}
name|knownBranches
operator|.
name|remove
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|busyBranch
operator|=
literal|null
expr_stmt|;
name|trunkHeadRevision
operator|=
literal|null
expr_stmt|;
return|return
name|getHeadRevision
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
block|{
name|String
name|branch
init|=
name|getBranchId
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|getRevisionId
argument_list|(
name|branch
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
return|return
name|base
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|base
operator|.
name|read
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|String
name|branch
init|=
name|getBranchId
argument_list|(
name|oldHeadRevisionId
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|getRevisionId
argument_list|(
name|branch
argument_list|,
name|oldHeadRevisionId
argument_list|)
decl_stmt|;
return|return
name|base
operator|.
name|waitForCommit
argument_list|(
name|rev
argument_list|,
name|timeout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
return|return
name|base
operator|.
name|write
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|base
return|;
block|}
block|}
end_class

end_unit

