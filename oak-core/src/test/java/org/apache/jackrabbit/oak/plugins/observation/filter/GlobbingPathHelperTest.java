begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|GlobbingPathHelperTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|globSubPath1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMatches
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar"
argument_list|,
literal|"foo/zoo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"foo/bar/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"/foo/bar/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"/bar/foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"bar/foo/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/bar/**"
argument_list|,
literal|"/bar/foo/zoo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|globSubPath2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMatches
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertDoesntMatch
argument_list|(
literal|"foo"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**"
argument_list|,
literal|"foo/bar/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"*.html"
argument_list|,
literal|"foo.html"
argument_list|)
expr_stmt|;
name|assertDoesntMatch
argument_list|(
literal|"*.html"
argument_list|,
literal|"/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"bar/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"/bar/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"bar/zoo/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"**/*.html"
argument_list|,
literal|"/bar/zoo/foo.html"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|globPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"foo/bar/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**"
argument_list|,
literal|"/foo/bar/zoo"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"bar/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"/bar/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"bar/zoo/foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/**/*.html"
argument_list|,
literal|"/bar/zoo/foo.html"
argument_list|)
expr_stmt|;
name|assertDoesntMatch
argument_list|(
literal|"/*.html"
argument_list|,
literal|"foo.html"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"/*.html"
argument_list|,
literal|"/foo.html"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMatches
parameter_list|(
name|String
name|globPath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|GlobbingPathHelper
operator|.
name|globAsRegex
argument_list|(
name|globPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|globPath
operator|+
literal|"' does not match '"
operator|+
name|path
operator|+
literal|"'"
argument_list|,
name|p
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDoesntMatch
parameter_list|(
name|String
name|globPath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|GlobbingPathHelper
operator|.
name|globAsRegex
argument_list|(
name|globPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"'"
operator|+
name|globPath
operator|+
literal|"' does match '"
operator|+
name|path
operator|+
literal|"'"
argument_list|,
name|p
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

