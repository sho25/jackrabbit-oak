begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractAccessControlManagerTest
extends|extends
name|AbstractAccessControlTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"jr"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_URI
init|=
literal|"http://jackrabbit.apache.org"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testName
init|=
name|TEST_PREFIX
operator|+
literal|":testRoot"
decl_stmt|;
specifier|protected
specifier|final
name|String
name|testPath
init|=
literal|'/'
operator|+
name|testName
decl_stmt|;
specifier|protected
name|Principal
name|testPrincipal
decl_stmt|;
specifier|protected
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
specifier|protected
name|Root
name|testRoot
decl_stmt|;
specifier|protected
name|AbstractAccessControlManager
name|acMgr
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUtil
name|rootNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addChild
argument_list|(
name|testName
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testPrivileges
operator|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|testPrincipal
operator|=
name|getTestPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|testRoot
operator|!=
literal|null
condition|)
block|{
name|testRoot
operator|.
name|getContentSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|testRoot
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|AbstractAccessControlManager
name|createAccessControlManager
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
return|return
operator|new
name|TestAcMgr
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|AbstractAccessControlManager
name|getTestAccessControlManager
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|TestAcMgr
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getAcContentPaths
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO: create ac-content paths
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
specifier|protected
name|Root
name|getTestRoot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRoot
operator|==
literal|null
condition|)
block|{
name|testRoot
operator|=
name|createTestSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
return|return
name|testRoot
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getInvalidPaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:test/Root"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"./jcr:testRoot"
argument_list|)
expr_stmt|;
return|return
name|invalid
return|;
block|}
specifier|protected
specifier|static
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
name|ContentSession
name|session
parameter_list|)
block|{
return|return
name|session
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|Set
argument_list|<
name|Principal
argument_list|>
name|getEveryonePrincipalSet
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
comment|//--------------------------------------------------- protected methods>---
annotation|@
name|Test
specifier|public
name|void
name|testGetConfig
parameter_list|()
block|{
name|assertSame
argument_list|(
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|acMgr
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|root
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|createAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLatestRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotSame
argument_list|(
name|root
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|createAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamePathMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|,
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|,
name|createAccessControlManager
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeManager
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegeManager
name|privMgr
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|privMgr
argument_list|,
name|acMgr
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privMgr
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|acMgr
operator|.
name|getPrivilegeManager
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOakPathNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|acMgr
operator|.
name|getOakPath
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOakPathNotAbsolute
parameter_list|()
throws|throws
name|Exception
block|{
name|acMgr
operator|.
name|getOakPath
argument_list|(
literal|"a/rel/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOakPathInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|NamePathMapper
name|np
init|=
operator|new
name|NamePathMapper
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getOakPath
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
comment|// mock failing conversion from jcr to oak path
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|createAccessControlManager
argument_list|(
name|root
argument_list|,
name|np
argument_list|)
operator|.
name|getOakPath
argument_list|(
literal|"/any/abs/path"
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------< getSupportedPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/jcr:system"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|testPaths
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expects valid node path, found: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property path -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
literal|"/non/existing/node"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Nonexisting node -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//--------------------------------------------------< privilegeFromName>---
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|allPrivileges
control|)
block|{
name|Privilege
name|p
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"test:read"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromUnknownName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"unknownPrivilege"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|'{'
operator|+
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
operator|+
literal|"}unknown"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//------------------------------------------------------< hasPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testHasNullPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasEmptyPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesInvalidPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session (compatibility with the specification      * which was missing in jackrabbit).      */
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|AbstractAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|root
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesNoAccessToPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|// the test-session doesn't have sufficient permissions to read privilege set for admin session.
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesForEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|// the test-session doesn't have sufficient permissions to read privilege set.
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//------------------------------------------------------< getPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|propertyPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesInvalidPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|expected
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForPrincipalsAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|expected
init|=
operator|new
name|Privilege
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForNoPrincipalsAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|expected
init|=
operator|new
name|Privilege
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivilegesEveryonePrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getEveryonePrincipalSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivilegesEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestAcMgr
extends|extends
name|AbstractAccessControlManager
block|{
specifier|protected
name|TestAcMgr
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nonnull
name|NamePathMapper
name|namePathMapper
parameter_list|,
annotation|@
name|Nonnull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getApplicablePolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|set
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

