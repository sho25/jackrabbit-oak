begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|copy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|merge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|sort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
operator|.
name|writeStrings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFutureTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|FileLineDifferenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Mark and sweep garbage collector.  *  * Uses the file system to store internal state while in process to account for huge data.  * This class is not thread safe.  *  */
end_comment

begin_class
specifier|public
class|class
name|MarkSweepGarbageCollector
implements|implements
name|BlobGarbageCollector
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MarkSweepGarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_DIR
init|=
name|StandardSystemProperty
operator|.
name|JAVA_IO_TMPDIR
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_COUNT
init|=
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELIM
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transformer
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
decl_stmt|;
comment|/** The last modified time before current time of blobs to consider for garbage collection. */
specifier|private
specifier|final
name|long
name|maxLastModifiedInterval
decl_stmt|;
comment|/** The blob store to be garbage collected. */
specifier|private
specifier|final
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
comment|/** Flag to enable low cost consistency check after DSGC */
specifier|private
name|boolean
name|checkConsistencyAfterGc
decl_stmt|;
comment|/** Helper class to mark blob references which **/
specifier|private
specifier|final
name|BlobReferenceRetriever
name|marker
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
comment|/** The batch count. */
specifier|private
specifier|final
name|int
name|batchCount
decl_stmt|;
specifier|private
specifier|final
name|String
name|repoId
decl_stmt|;
specifier|private
specifier|final
name|String
name|root
decl_stmt|;
specifier|private
specifier|final
name|Whiteboard
name|whiteboard
decl_stmt|;
specifier|private
name|CheckpointMBean
name|checkpointMbean
decl_stmt|;
comment|/** Operation stats object **/
specifier|private
specifier|final
name|GarbageCollectionOperationStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|OperationStatsCollector
name|statsCollector
decl_stmt|;
comment|/** Operation consistency stats object **/
specifier|private
specifier|final
name|GarbageCollectionOperationStats
name|consistencyStats
decl_stmt|;
specifier|private
specifier|final
name|OperationStatsCollector
name|consistencyStatsCollector
decl_stmt|;
specifier|private
name|boolean
name|traceOutput
decl_stmt|;
comment|/**      * Creates an instance of MarkSweepGarbageCollector      *      * @param marker BlobReferenceRetriever instanced used to fetch refereed blob entries      * @param blobStore the blob store instance      * @param executor executor      * @param root the root absolute path of directory under which temporary      *             files would be created      * @param batchCount batch sized used for saving intermediate state      * @param maxLastModifiedInterval lastModifiedTime in millis. Only files with time      *                                less than this time would be considered for GC      * @param repositoryId unique repository id for this node      * @param whiteboard whiteboard instance      * @param statisticsProvider statistics provider instance      * @throws IOException      */
specifier|public
name|MarkSweepGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|batchCount
parameter_list|,
name|long
name|maxLastModifiedInterval
parameter_list|,
name|boolean
name|checkConsistencyAfterGc
parameter_list|,
annotation|@
name|Nullable
name|String
name|repositoryId
parameter_list|,
annotation|@
name|Nullable
name|Whiteboard
name|whiteboard
parameter_list|,
annotation|@
name|Nullable
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|checkConsistencyAfterGc
operator|=
name|checkConsistencyAfterGc
expr_stmt|;
name|checkNotNull
argument_list|(
name|blobStore
argument_list|,
literal|"BlobStore cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|marker
operator|=
name|marker
expr_stmt|;
name|this
operator|.
name|batchCount
operator|=
name|batchCount
expr_stmt|;
name|this
operator|.
name|maxLastModifiedInterval
operator|=
name|maxLastModifiedInterval
expr_stmt|;
name|this
operator|.
name|repoId
operator|=
name|repositoryId
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|whiteboard
operator|=
name|whiteboard
expr_stmt|;
if|if
condition|(
name|whiteboard
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|checkpointMbean
operator|=
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|whiteboard
argument_list|,
name|CheckpointMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// re-initialize the statsProvider if passed as parameter
if|if
condition|(
name|statisticsProvider
operator|==
literal|null
condition|)
block|{
name|statisticsProvider
operator|=
name|StatisticsProvider
operator|.
name|NOOP
expr_stmt|;
block|}
name|this
operator|.
name|stats
operator|=
operator|new
name|GarbageCollectionOperationStats
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|statsCollector
operator|=
name|stats
operator|.
name|getCollector
argument_list|()
expr_stmt|;
name|this
operator|.
name|consistencyStats
operator|=
operator|new
name|GarbageCollectionOperationStats
argument_list|(
name|statisticsProvider
argument_list|,
name|GarbageCollectionOperationStats
operator|.
name|CONSISTENCY_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|consistencyStatsCollector
operator|=
name|consistencyStats
operator|.
name|getCollector
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MarkSweepGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|batchCount
parameter_list|,
name|long
name|maxLastModifiedInterval
parameter_list|,
annotation|@
name|Nullable
name|String
name|repositoryId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|marker
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|root
argument_list|,
name|batchCount
argument_list|,
name|maxLastModifiedInterval
argument_list|,
literal|false
argument_list|,
name|repositoryId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Instantiates a new blob garbage collector.      */
specifier|public
name|MarkSweepGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|long
name|maxLastModifiedInterval
parameter_list|,
annotation|@
name|Nullable
name|String
name|repositoryId
parameter_list|,
annotation|@
name|Nullable
name|Whiteboard
name|whiteboard
parameter_list|,
annotation|@
name|Nullable
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|marker
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|TEMP_DIR
argument_list|,
name|DEFAULT_BATCH_COUNT
argument_list|,
name|maxLastModifiedInterval
argument_list|,
literal|false
argument_list|,
name|repositoryId
argument_list|,
name|whiteboard
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectGarbage
parameter_list|(
name|boolean
name|markOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|markAndSweep
argument_list|(
name|markOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collectGarbage
parameter_list|(
name|boolean
name|markOnly
parameter_list|,
name|boolean
name|forceBlobRetrieve
parameter_list|)
throws|throws
name|Exception
block|{
name|markAndSweep
argument_list|(
name|markOnly
argument_list|,
name|forceBlobRetrieve
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the stats related to GC for all repos      *      * @return a list of GarbageCollectionRepoStats objects      * @throws Exception      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|GarbageCollectionRepoStats
argument_list|>
name|getStats
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|GarbageCollectionRepoStats
argument_list|>
name|stats
init|=
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
comment|// Get all the references available
name|List
argument_list|<
name|DataRecord
argument_list|>
name|refFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|references
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|refFiles
argument_list|)
operator|.
name|index
argument_list|(
operator|new
name|Function
argument_list|<
name|DataRecord
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DataRecord
name|input
parameter_list|)
block|{
return|return
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getIdFromName
argument_list|(
name|input
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Get all the markers available
name|List
argument_list|<
name|DataRecord
argument_list|>
name|markerFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|markers
init|=
name|Maps
operator|.
name|uniqueIndex
argument_list|(
name|markerFiles
argument_list|,
operator|new
name|Function
argument_list|<
name|DataRecord
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|DataRecord
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getType
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Get all the repositories registered
name|List
argument_list|<
name|DataRecord
argument_list|>
name|repoFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataRecord
name|repoRec
range|:
name|repoFiles
control|)
block|{
name|String
name|id
init|=
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getIdFromName
argument_list|(
name|repoRec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|GarbageCollectionRepoStats
name|stat
init|=
operator|new
name|GarbageCollectionRepoStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setRepositoryId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|repoId
argument_list|)
condition|)
block|{
name|stat
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|references
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|ImmutableList
argument_list|<
name|DataRecord
argument_list|>
name|refRecs
init|=
name|references
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|DataRecord
name|refRec
range|:
name|refRecs
control|)
block|{
name|String
name|uniqueSessionId
init|=
name|refRec
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|stat
operator|.
name|setEndTime
argument_list|(
name|refRec
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setLength
argument_list|(
name|refRec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|markers
operator|.
name|containsKey
argument_list|(
name|uniqueSessionId
argument_list|)
condition|)
block|{
name|stat
operator|.
name|setStartTime
argument_list|(
name|markers
operator|.
name|get
argument_list|(
name|uniqueSessionId
argument_list|)
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LineNumberReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|refRec
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|readLine
argument_list|()
operator|!=
literal|null
condition|)
block|{                             }
name|stat
operator|.
name|setNumLines
argument_list|(
name|reader
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|stats
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationsStatsMBean
name|getOperationStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperationsStatsMBean
name|getConsistencyOperationStats
parameter_list|()
block|{
return|return
name|consistencyStats
return|;
block|}
comment|/**      * Mark and sweep. Main entry method for GC.      *      * @param markOnly whether to mark only      * @param forceBlobRetrieve force retrieve blob ids      * @throws Exception the exception      */
specifier|protected
name|void
name|markAndSweep
parameter_list|(
name|boolean
name|markOnly
parameter_list|,
name|boolean
name|forceBlobRetrieve
parameter_list|)
throws|throws
name|Exception
block|{
name|statsCollector
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
name|GarbageCollectorFileState
name|fs
init|=
operator|new
name|GarbageCollectorFileState
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Blob garbage collection with markOnly [{}]"
argument_list|,
name|markOnly
argument_list|)
expr_stmt|;
name|long
name|markStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|markFinish
decl_stmt|;
try|try
block|{
name|mark
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|markFinish
operator|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|statsCollector
operator|.
name|updateMarkDuration
argument_list|(
name|markFinish
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blob garbage collection Mark completed in {} ({} ms)."
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|markOnly
condition|)
block|{
name|long
name|deleteCount
decl_stmt|;
try|try
block|{
name|deleteCount
operator|=
name|sweep
argument_list|(
name|fs
argument_list|,
name|markStart
argument_list|,
name|forceBlobRetrieve
argument_list|)
expr_stmt|;
name|long
name|maxTime
init|=
name|getMaxModifiedTime
argument_list|(
name|markStart
argument_list|)
operator|>
literal|0
condition|?
name|getMaxModifiedTime
argument_list|(
name|markStart
argument_list|)
else|:
name|markStart
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blob garbage collection completed in {} ({} ms). Number of blobs deleted [{}] with max modification time of [{}]"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|deleteCount
argument_list|,
name|timestampToString
argument_list|(
name|maxTime
argument_list|)
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotAllRepositoryMarkedException
name|rm
parameter_list|)
block|{
name|statsCollector
operator|.
name|finishFailure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|statsCollector
operator|.
name|updateSweepDuration
argument_list|(
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|markFinish
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|statsCollector
operator|.
name|finishFailure
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Blob garbage collection error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|statsCollector
operator|.
name|updateDuration
argument_list|(
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
operator|!
name|traceOutput
condition|)
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|fs
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Mark phase of the GC.      * @param fs the garbage collector file state      */
specifier|protected
name|void
name|mark
parameter_list|(
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting mark phase of the garbage collector"
argument_list|)
expr_stmt|;
name|String
name|uniqueSuffix
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Create a time marker in the data store if applicable
name|GarbageCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|addMarkedStartMarker
argument_list|(
name|blobStore
argument_list|,
name|repoId
argument_list|,
name|uniqueSuffix
argument_list|)
expr_stmt|;
comment|// Mark all used references
name|iterateNodeTree
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Move the marked references file to the data store meta area if applicable
name|GarbageCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|addMarked
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|,
name|repoId
argument_list|,
name|uniqueSuffix
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending mark phase of the garbage collector"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Difference phase where the GC candidates are identified.      *      * @param fs the garbage collector file state      * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|private
name|void
name|difference
parameter_list|(
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting difference phase of the garbage collector"
argument_list|)
expr_stmt|;
name|FileLineDifferenceIterator
name|iter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
name|int
name|candidates
init|=
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|iter
argument_list|,
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found candidates - "
operator|+
name|candidates
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending difference phase of the garbage collector"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sweep phase of gc candidate deletion.      *<p>      * Performs the following steps depending upon the type of the blob store refer      * {@link org.apache.jackrabbit.oak.plugins.blob.SharedDataStore.Type}:      *      *<ul>      *<li>Shared</li>      *<li>      *<ul>      *<li> Merge all marked references (from the mark phase run independently) available in the data store meta      *          store (from all configured independent repositories).      *<li> Retrieve all blob ids available.      *<li> Diffs the 2 sets above to retrieve list of blob ids not used.      *<li> Deletes only blobs created after      *          (earliest time stamp of the marked references - #maxLastModifiedInterval) from the above set.      *</ul>      *</li>      *      *<li>Default</li>      *<li>      *<ul>      *<li> Mark phase already run.      *<li> Retrieve all blob ids available.      *<li> Diffs the 2 sets above to retrieve list of blob ids not used.      *<li> Deletes only blobs created after      *          (time stamp of the marked references - #maxLastModifiedInterval).      *</ul>      *</li>      *</ul>      *      * @return the number of blobs deleted      * @throws Exception the exception      * @param fs the garbage collector file state      * @param markStart the start time of mark to take as reference for deletion      * @param forceBlobRetrieve      */
specifier|protected
name|long
name|sweep
parameter_list|(
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|long
name|markStart
parameter_list|,
name|boolean
name|forceBlobRetrieve
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|earliestRefAvailTime
decl_stmt|;
comment|// Merge all the blob references available from all the reference files in the data store meta store
comment|// Only go ahead if merge succeeded
name|earliestRefAvailTime
operator|=
name|GarbageCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|mergeAllMarkedReferences
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Earliest reference available for timestamp [{}]"
argument_list|,
name|earliestRefAvailTime
argument_list|)
expr_stmt|;
name|earliestRefAvailTime
operator|=
operator|(
name|earliestRefAvailTime
operator|<
name|markStart
condition|?
name|earliestRefAvailTime
else|:
name|markStart
operator|)
expr_stmt|;
comment|// Find all blob references after iterating over the whole repository
operator|(
operator|new
name|BlobIdRetriever
argument_list|(
name|fs
argument_list|,
name|forceBlobRetrieve
argument_list|)
operator|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// Calculate the references not used
name|difference
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|maxModifiedTime
init|=
name|getMaxModifiedTime
argument_list|(
name|earliestRefAvailTime
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting sweep phase of the garbage collector"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sweeping blobs with modified time> than the configured max deleted time ({}). "
argument_list|,
name|timestampToString
argument_list|(
name|maxModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedWriter
name|removesWriter
init|=
literal|null
decl_stmt|;
name|LineIterator
name|iterator
init|=
literal|null
decl_stmt|;
name|long
name|deletedSize
init|=
literal|0
decl_stmt|;
name|int
name|numDeletedSizeAvailable
init|=
literal|0
decl_stmt|;
try|try
block|{
name|removesWriter
operator|=
name|Files
operator|.
name|newWriter
argument_list|(
name|fs
operator|.
name|getGarbage
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|ArrayDeque
argument_list|<
name|String
argument_list|>
name|removesQueue
init|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|iterator
operator|=
name|FileUtils
operator|.
name|lineIterator
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|iterator
argument_list|,
name|getBatchCount
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|partitions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|partitions
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|+=
name|ids
operator|.
name|size
argument_list|()
expr_stmt|;
name|deleted
operator|+=
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|sweepInternal
argument_list|(
name|blobStore
argument_list|,
name|ids
argument_list|,
name|removesQueue
argument_list|,
name|maxModifiedTime
argument_list|)
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|newArrayList
argument_list|(
name|removesQueue
argument_list|)
argument_list|,
name|removesWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|deletedId
range|:
name|removesQueue
control|)
block|{
comment|// Estimate the size of the blob
name|long
name|length
init|=
name|DataStoreBlobStore
operator|.
name|BlobId
operator|.
name|of
argument_list|(
name|deletedId
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|!=
operator|-
literal|1
condition|)
block|{
name|deletedSize
operator|+=
name|length
expr_stmt|;
name|numDeletedSizeAvailable
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|removesQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LineIterator
operator|.
name|closeQuietly
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|closeQuietly
argument_list|(
name|removesWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkConsistencyAfterGc
condition|)
block|{
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|checkConsistencyAfterGC
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|,
name|consistencyStatsCollector
argument_list|,
operator|new
name|File
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|handleRemoves
argument_list|(
name|blobStore
argument_list|,
name|fs
operator|.
name|getGarbage
argument_list|()
argument_list|,
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deleted only [{}] blobs entries from the [{}] candidates identified. This may happen if blob "
operator|+
literal|"modified time is> "
operator|+
literal|"than the max deleted time ({})"
argument_list|,
name|deleted
argument_list|,
name|count
argument_list|,
name|timestampToString
argument_list|(
name|maxModifiedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deletedSize
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Estimated size recovered for {} deleted blobs is {} ({} bytes)"
argument_list|,
name|numDeletedSizeAvailable
argument_list|,
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|deletedSize
argument_list|)
argument_list|,
name|deletedSize
argument_list|)
expr_stmt|;
block|}
name|statsCollector
operator|.
name|updateNumCandidates
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|statsCollector
operator|.
name|updateNumDeleted
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|statsCollector
operator|.
name|updateTotalSizeDeleted
argument_list|(
name|deletedSize
argument_list|)
expr_stmt|;
comment|// Remove all the merged marked references
name|GarbageCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|removeAllMarkedReferences
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ending sweep phase of the garbage collector"
argument_list|)
expr_stmt|;
return|return
name|deleted
return|;
block|}
specifier|private
name|int
name|getBatchCount
parameter_list|()
block|{
return|return
name|batchCount
return|;
block|}
comment|/**      * 3 possibilities      *  - If maxLastModifiedInterval<= 0 then return 0 which is interpreted as current by delete call      *      (For testing purposes only)      *  - If oldest checkpoint creation date> 0 then reference time is the earliest of that and the parameter      *      maxModificationReferenceTime      *  - Else the parameter maxModificationReferenceTime is used as the reference time      *      * @param maxModificationReferenceTime typically the mark phase start time (could be 0 for tests)      * @return max modified time of blobs to be considered for deletion      */
specifier|private
name|long
name|getMaxModifiedTime
parameter_list|(
name|long
name|maxModificationReferenceTime
parameter_list|)
block|{
if|if
condition|(
name|maxLastModifiedInterval
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|oldestCheckpoint
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|checkpointMbean
operator|!=
literal|null
condition|)
block|{
name|oldestCheckpoint
operator|=
name|checkpointMbean
operator|.
name|getOldestCheckpointCreationDate
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Oldest checkpoint data retrieved {} "
argument_list|,
name|oldestCheckpoint
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"maxModificationReferenceTime {} "
argument_list|,
name|maxModificationReferenceTime
argument_list|)
expr_stmt|;
name|maxModificationReferenceTime
operator|=
name|maxModificationReferenceTime
operator|<=
literal|0
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
name|maxModificationReferenceTime
expr_stmt|;
name|long
name|calculatedReferenceTime
init|=
operator|(
name|oldestCheckpoint
operator|<=
literal|0
condition|?
name|maxModificationReferenceTime
else|:
name|Math
operator|.
name|min
argument_list|(
name|maxModificationReferenceTime
argument_list|,
name|oldestCheckpoint
argument_list|)
operator|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calculated reference time {} "
argument_list|,
name|calculatedReferenceTime
argument_list|)
expr_stmt|;
return|return
operator|(
name|calculatedReferenceTime
operator|-
name|maxLastModifiedInterval
operator|)
return|;
block|}
comment|/**      * Save batch to file.      */
specifier|static
name|void
name|saveBatchToFile
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|BufferedWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|FileIOUtils
operator|.
name|writeAsLine
argument_list|(
name|writer
argument_list|,
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Iterates the complete node tree and collect all blob references      * @param fs the garbage collector file state      * @param logPath whether to log path in the file or not      */
specifier|protected
name|void
name|iterateNodeTree
parameter_list|(
name|GarbageCollectorFileState
name|fs
parameter_list|,
specifier|final
name|boolean
name|logPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
try|try
block|{
name|marker
operator|.
name|collectReferences
argument_list|(
operator|new
name|ReferenceCollector
argument_list|()
block|{
specifier|private
specifier|final
name|boolean
name|debugMode
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addReference
parameter_list|(
name|String
name|blobId
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|debugMode
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"BlobId : {}, NodeId : {}"
argument_list|,
name|blobId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
specifier|final
name|Joiner
name|delimJoiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
name|DELIM
argument_list|)
operator|.
name|skipNulls
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterators
operator|.
name|partition
argument_list|(
name|idIter
argument_list|,
name|getBatchCount
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|partitions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|idBatch
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|partitions
operator|.
name|next
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|logPath
condition|)
block|{
return|return
name|delimJoiner
operator|.
name|join
argument_list|(
name|id
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
return|return
name|id
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|debugMode
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"chunkIds : {}"
argument_list|,
name|idBatch
argument_list|)
expr_stmt|;
block|}
name|count
operator|.
name|getAndAdd
argument_list|(
name|idBatch
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|saveBatchToFile
argument_list|(
name|idBatch
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|%
name|getBatchCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Collected ({}) blob references"
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in retrieving references"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of valid blob references marked under mark phase of "
operator|+
literal|"Blob garbage collection [{}]"
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// sort the marked references with the first part of the key
name|sort
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks for the DataStore consistency and reports the number of missing blobs still referenced.      *      * @return the missing blobs      * @throws Exception      */
annotation|@
name|Override
specifier|public
name|long
name|checkConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|consistencyStatsCollector
operator|.
name|start
argument_list|()
expr_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
name|GarbageCollectorFileState
name|fs
init|=
operator|new
name|GarbageCollectorFileState
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|long
name|candidates
init|=
literal|0
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting blob consistency check"
argument_list|)
expr_stmt|;
comment|// Find all blobs available in the blob store
name|ListenableFutureTask
argument_list|<
name|Integer
argument_list|>
name|blobIdRetriever
init|=
name|ListenableFutureTask
operator|.
name|create
argument_list|(
operator|new
name|BlobIdRetriever
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|blobIdRetriever
argument_list|)
expr_stmt|;
comment|// Mark all used blob references
name|iterateNodeTree
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|updateMarkDuration
argument_list|(
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|blobIdRetriever
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while fetching all the blobIds from the BlobStore"
argument_list|)
expr_stmt|;
name|threw
operator|=
literal|false
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
comment|// Retrieve all other marked present in the datastore
name|List
argument_list|<
name|DataRecord
argument_list|>
name|refFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|refFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|File
name|temp
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|repoId
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|temp
argument_list|)
expr_stmt|;
comment|// List of files to be merged
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|temp
argument_list|)
expr_stmt|;
for|for
control|(
name|DataRecord
name|refFile
range|:
name|refFiles
control|)
block|{
name|File
name|file
init|=
name|copy
argument_list|(
name|refFile
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|files
argument_list|,
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|comparing
argument_list|(
name|s
lambda|->
name|s
operator|.
name|split
argument_list|(
name|DELIM
argument_list|)
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Starting difference phase of the consistency check"
argument_list|)
expr_stmt|;
name|FileLineDifferenceIterator
name|iter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
comment|// If tracking then also filter ids being tracked which are active deletions for lucene
name|candidates
operator|=
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|filter
argument_list|(
name|blobStore
argument_list|,
name|iter
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|GarbageCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|removeAllMarkedReferences
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ending difference phase of the consistency check"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consistency check found [{}] missing blobs"
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidates
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|LineIterator
name|lineIterator
init|=
operator|new
name|LineIterator
argument_list|(
operator|new
name|FileReader
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
name|lineIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing Blob [{}]"
argument_list|,
name|lineIterator
operator|.
name|nextLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Consistency check failure in the the blob store : {}, check missing candidates in file {}"
argument_list|,
name|blobStore
argument_list|,
name|fs
operator|.
name|getGcCandidates
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|finishFailure
argument_list|()
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|updateNumDeleted
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|traceOutput
operator|&&
operator|(
operator|!
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|candidates
operator|==
literal|0
operator|)
condition|)
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|fs
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|updateDuration
argument_list|(
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|candidates
return|;
block|}
specifier|public
name|void
name|setTraceOutput
parameter_list|(
name|boolean
name|trace
parameter_list|)
block|{
name|traceOutput
operator|=
name|trace
expr_stmt|;
block|}
comment|/**      * BlobIdRetriever class to retrieve all blob ids.      */
specifier|private
class|class
name|BlobIdRetriever
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|GarbageCollectorFileState
name|fs
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|forceRetrieve
decl_stmt|;
specifier|public
name|BlobIdRetriever
parameter_list|(
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|boolean
name|forceBlobRetrieve
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|forceRetrieve
operator|=
name|forceBlobRetrieve
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|forceRetrieve
condition|)
block|{
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|retrieve
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|,
name|getBatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Length of blob ids file retrieved from tracker {}"
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If the length is 0 then references not available from the tracker
comment|// retrieve from the data store
if|if
condition|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|BlobCollectionType
operator|.
name|DEFAULT
operator|.
name|retrieve
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|,
name|getBatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Length of blob ids file retrieved {}"
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|BlobCollectionType
operator|.
name|get
argument_list|(
name|blobStore
argument_list|)
operator|.
name|track
argument_list|(
name|blobStore
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Provides a readable string for given timestamp      */
specifier|private
specifier|static
name|String
name|timestampToString
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Timestamp
argument_list|(
name|timestamp
argument_list|)
operator|+
literal|"00"
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|)
return|;
block|}
comment|/**      * Defines different data store types from the garbage collection perspective and encodes the divergent behavior.      *<ul></ul>      */
enum|enum
name|GarbageCollectionType
block|{
name|SHARED
block|{
comment|/**              * Remove the maked references and the marked markers from the blob store root. Default NOOP.              *              * @param blobStore the blobStore instance              */
annotation|@
name|Override
name|void
name|removeAllMarkedReferences
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|deleteAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|deleteAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**              * Merge all marked references available from all repositories and return the earliest time of the references.              *              * @param blobStore the blob store              * @param fs the fs              * @return the long the earliest time of the available references              * @throws IOException Signals that an I/O exception has occurred.              * @throws DataStoreException the data store exception              */
annotation|@
name|Override
name|long
name|mergeAllMarkedReferences
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|refFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get all the repositories registered
name|List
argument_list|<
name|DataRecord
argument_list|>
name|repoFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// Retrieve repos for which reference files have not been created
name|Set
argument_list|<
name|String
argument_list|>
name|unAvailRepos
init|=
name|SharedDataStoreUtils
operator|.
name|refsNotAvailableFromRepos
argument_list|(
name|repoFiles
argument_list|,
name|refFiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|unAvailRepos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// List of files to be merged
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|DataRecord
name|refFile
range|:
name|refFiles
control|)
block|{
name|File
name|file
init|=
name|copy
argument_list|(
name|refFile
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|files
argument_list|,
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the timestamp to indicate the earliest mark phase start
name|List
argument_list|<
name|DataRecord
argument_list|>
name|markerFiles
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|getAllMetadataRecords
argument_list|(
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|earliestMarker
init|=
name|SharedDataStoreUtils
operator|.
name|getEarliestRecord
argument_list|(
name|markerFiles
argument_list|)
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Earliest marker timestamp {}"
argument_list|,
name|earliestMarker
argument_list|)
expr_stmt|;
name|long
name|earliestRef
init|=
name|SharedDataStoreUtils
operator|.
name|getEarliestRecord
argument_list|(
name|refFiles
argument_list|)
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Earliest ref timestamp {}"
argument_list|,
name|earliestRef
argument_list|)
expr_stmt|;
return|return
operator|(
name|earliestMarker
operator|<
name|earliestRef
condition|?
name|earliestMarker
else|:
name|earliestRef
operator|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Not all repositories have marked references available : {}"
argument_list|,
name|unAvailRepos
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotAllRepositoryMarkedException
argument_list|(
literal|"Not all repositories have marked references available"
argument_list|)
throw|;
block|}
block|}
comment|/**              * Adds the marked references to the blob store root. Default NOOP              *              * @param blobStore the blob store              * @param fs the fs              * @param repoId the repo id              * @param uniqueSuffix the unique session suffix              * @throws DataStoreException the data store exception              * @throws IOException Signals that an I/O exception has occurred.              */
annotation|@
name|Override
name|void
name|addMarked
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|uniqueSuffix
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|boolean
name|exists
init|=
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|metadataRecordExists
argument_list|(
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"References for repository id {} already exists. Creating a duplicate one. "
operator|+
literal|"Please check for inadvertent sharing of repository id by different repositories"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|SharedStoreRecordType
operator|.
name|REFERENCES
operator|.
name|getNameFromIdPrefix
argument_list|(
name|repoId
argument_list|,
name|uniqueSuffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMarkedStartMarker
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|uniqueSuffix
parameter_list|)
block|{
try|try
block|{
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedStoreRecordType
operator|.
name|MARKED_START_MARKER
operator|.
name|getNameFromIdPrefix
argument_list|(
name|repoId
argument_list|,
name|uniqueSuffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error creating marked time marker for repo : {}"
argument_list|,
name|repoId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|DEFAULT
block|;
name|void
name|removeAllMarkedReferences
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{}
name|void
name|addMarked
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|uniqueSuffix
parameter_list|)
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{}
name|long
name|mergeAllMarkedReferences
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
throws|,
name|DataStoreException
block|{
comment|// throw id the marked refs not available.
if|if
condition|(
operator|!
name|fs
operator|.
name|getMarkedRefs
argument_list|()
operator|.
name|exists
argument_list|()
operator|||
name|fs
operator|.
name|getMarkedRefs
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Marked references not available"
argument_list|)
throw|;
block|}
return|return
name|fs
operator|.
name|getMarkedRefs
argument_list|()
operator|.
name|lastModified
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|GarbageCollectionType
name|get
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
return|return
name|SHARED
return|;
block|}
return|return
name|DEFAULT
return|;
block|}
specifier|public
name|void
name|addMarkedStartMarker
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|String
name|repoId
parameter_list|,
name|String
name|uniqueSuffix
parameter_list|)
block|{}
block|}
comment|/**      * Defines different blob collection types and encodes the divergent behavior.      *<ul></ul>      */
specifier|private
enum|enum
name|BlobCollectionType
block|{
name|TRACKER
block|{
annotation|@
name|Override
name|void
name|retrieve
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|int
name|batchCount
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|getTracker
argument_list|()
operator|.
name|get
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|handleRemoves
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|File
name|removedIds
parameter_list|,
name|File
name|markedRefs
parameter_list|)
throws|throws
name|IOException
block|{
name|BlobTrackingStore
name|store
init|=
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
operator|(
name|BlobIdTracker
operator|)
name|store
operator|.
name|getTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|removedIds
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|getDeleteTracker
argument_list|()
operator|.
name|reconcile
argument_list|(
name|markedRefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|track
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
block|{
try|try
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"blobiddownload"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|getTracker
argument_list|()
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to track blob ids locally"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|filter
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|FileLineDifferenceIterator
name|iter
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write the original candidates
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|iter
argument_list|,
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Filter the ids actively deleted
name|BlobTrackingStore
name|store
init|=
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
decl_stmt|;
name|BlobIdTracker
name|tracker
init|=
operator|(
name|BlobIdTracker
operator|)
name|store
operator|.
name|getTracker
argument_list|()
decl_stmt|;
comment|// Move the candidates identified to a temp file
name|File
name|candTemp
init|=
name|createTempFile
argument_list|(
literal|"candTemp"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
name|candTemp
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|filter
init|=
name|tracker
operator|.
name|getDeleteTracker
argument_list|()
operator|.
name|filter
argument_list|(
name|candTemp
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|filter
argument_list|,
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|instanceof
name|FileLineDifferenceIterator
condition|)
block|{
operator|(
operator|(
name|FileLineDifferenceIterator
operator|)
name|filter
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|candTemp
operator|!=
literal|null
condition|)
block|{
name|candTemp
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|,
name|DEFAULT
block|;
comment|/**          * Deletes the given batch by deleting individually to exactly know the actual deletes.          */
name|long
name|sweepInternal
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|ArrayDeque
argument_list|<
name|String
argument_list|>
name|exceptionQueue
parameter_list|,
name|long
name|maxModified
parameter_list|)
block|{
name|long
name|totalDeleted
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Blob ids to be deleted {}"
argument_list|,
name|ids
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
try|try
block|{
name|long
name|deleted
init|=
name|blobStore
operator|.
name|countDeleteChunks
argument_list|(
name|newArrayList
argument_list|(
name|id
argument_list|)
argument_list|,
name|maxModified
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleted
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Blob [{}] not deleted"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exceptionQueue
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|totalDeleted
operator|+=
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while deleting blob with id [{}]"
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|totalDeleted
return|;
block|}
comment|/**          * Retrieve the put the list of available blobs in the file.          *          * @param blobStore          * @param fs          * @param batchCount          * @throws Exception          */
name|void
name|retrieve
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|int
name|batchCount
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting retrieve of all blobs"
argument_list|)
expr_stmt|;
name|int
name|blobsCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idsIter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|idsIter
operator|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|blobsCount
operator|=
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|idsIter
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
literal|true
argument_list|,
name|LOG
argument_list|,
literal|"Retrieved blobs - "
argument_list|)
expr_stmt|;
comment|// sort the file
name|sort
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of blobs present in BlobStore : [{}] "
argument_list|,
name|blobsCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|idsIter
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
name|Closeables
operator|.
name|close
argument_list|(
operator|(
name|Closeable
operator|)
name|idsIter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error closing iterator"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**          * Hook to handle all the removed ids.          *          * @param blobStore          * @param removedIds          * @param markedRefs          * @throws IOException          */
name|void
name|handleRemoves
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|File
name|removedIds
parameter_list|,
name|File
name|markedRefs
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|removedIds
argument_list|)
expr_stmt|;
block|}
name|void
name|checkConsistencyAfterGC
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|,
name|OperationStatsCollector
name|consistencyStatsCollector
parameter_list|,
name|File
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|consistencyStatsCollector
operator|.
name|start
argument_list|()
expr_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Remove and spool the remaining ids into a temp file
name|File
name|availAfterGC
init|=
operator|new
name|File
argument_list|(
name|fs
operator|.
name|getAvailableRefs
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"availAfterGC"
argument_list|)
decl_stmt|;
name|FileLineDifferenceIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iterator
operator|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|fs
operator|.
name|getGarbage
argument_list|()
argument_list|,
name|fs
operator|.
name|getAvailableRefs
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeStrings
argument_list|(
name|iterator
argument_list|,
name|availAfterGC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
name|iterator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Starting difference phase of the consistency check"
argument_list|)
expr_stmt|;
name|FileLineDifferenceIterator
name|iter
init|=
operator|new
name|FileLineDifferenceIterator
argument_list|(
name|availAfterGC
argument_list|,
name|fs
operator|.
name|getMarkedRefs
argument_list|()
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
name|File
name|consistencyCandidatesAfterGC
init|=
operator|new
name|File
argument_list|(
name|fs
operator|.
name|getGcCandidates
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"consistencyCandidatesAfterGC"
argument_list|)
decl_stmt|;
comment|// Write the original candidates
name|int
name|candidates
init|=
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|iter
argument_list|,
name|consistencyCandidatesAfterGC
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ending difference phase of the consistency check"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Consistency check found [{}] missing blobs"
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidates
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|LineIterator
name|lineIterator
init|=
operator|new
name|LineIterator
argument_list|(
operator|new
name|FileReader
argument_list|(
name|consistencyCandidatesAfterGC
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
name|lineIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing Blob [{}]"
argument_list|,
name|lineIterator
operator|.
name|nextLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Consistency check failure in the the blob store after GC : {}"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|finishFailure
argument_list|()
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|updateNumDeleted
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consistencyStatsCollector
operator|.
name|updateDuration
argument_list|(
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Tracker may want to track this file          *          * @param blobStore          * @param fs          */
name|void
name|track
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
block|{         }
specifier|public
specifier|static
name|BlobCollectionType
name|get
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
block|{
if|if
condition|(
name|blobStore
operator|instanceof
name|BlobTrackingStore
condition|)
block|{
name|BlobTracker
name|tracker
init|=
operator|(
operator|(
name|BlobTrackingStore
operator|)
name|blobStore
operator|)
operator|.
name|getTracker
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
block|{
return|return
name|TRACKER
return|;
block|}
block|}
return|return
name|DEFAULT
return|;
block|}
specifier|public
name|int
name|filter
parameter_list|(
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|FileLineDifferenceIterator
name|iter
parameter_list|,
name|GarbageCollectorFileState
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileIOUtils
operator|.
name|writeStrings
argument_list|(
name|iter
argument_list|,
name|fs
operator|.
name|getGcCandidates
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
class|class
name|GarbageCollectionOperationStats
implements|implements
name|OperationsStatsMBean
block|{
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"DataStoreGarbageCollection"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONSISTENCY_NAME
init|=
literal|"DataStoreConsistencyCheck"
decl_stmt|;
specifier|static
specifier|final
name|String
name|START
init|=
literal|"COUNTER"
decl_stmt|;
specifier|static
specifier|final
name|String
name|FINISH_FAILURE
init|=
literal|"FAILURE"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DURATION
init|=
literal|"ACTIVE_TIMER"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MARK_DURATION
init|=
literal|"MARK_TIMER"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SWEEP_DURATION
init|=
literal|"SWEEP_TIMER"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NUM_BLOBS_DELETED
init|=
literal|"NUM_BLOBS_DELETED"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TOTAL_SIZE_DELETED
init|=
literal|"TOTAL_SIZE_DELETED"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NUM_CANDIDATES
init|=
literal|"NUM_CANDIDATES"
decl_stmt|;
specifier|private
specifier|final
name|String
name|typeName
decl_stmt|;
specifier|private
name|CounterStats
name|startCounter
decl_stmt|;
specifier|private
name|CounterStats
name|finishFailureCounter
decl_stmt|;
specifier|private
name|CounterStats
name|numDeletedCounter
decl_stmt|;
specifier|private
name|CounterStats
name|totalSizeDeletedCounter
decl_stmt|;
specifier|private
name|CounterStats
name|numCandidatesCounter
decl_stmt|;
specifier|private
name|TimerStats
name|duration
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|markDuration
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|sweepDuration
decl_stmt|;
specifier|private
specifier|final
name|OperationStatsCollector
name|collector
decl_stmt|;
name|GarbageCollectionOperationStats
parameter_list|(
name|StatisticsProvider
name|sp
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|startCounter
operator|=
name|sp
operator|.
name|getCounterStats
argument_list|(
name|getMetricName
argument_list|(
name|START
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|finishFailureCounter
operator|=
name|sp
operator|.
name|getCounterStats
argument_list|(
name|getMetricName
argument_list|(
name|FINISH_FAILURE
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDeletedCounter
operator|=
name|sp
operator|.
name|getCounterStats
argument_list|(
name|getMetricName
argument_list|(
name|NUM_BLOBS_DELETED
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalSizeDeletedCounter
operator|=
name|sp
operator|.
name|getCounterStats
argument_list|(
name|getMetricName
argument_list|(
name|TOTAL_SIZE_DELETED
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|numCandidatesCounter
operator|=
name|sp
operator|.
name|getCounterStats
argument_list|(
name|getMetricName
argument_list|(
name|NUM_CANDIDATES
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|sp
operator|.
name|getTimer
argument_list|(
name|getMetricName
argument_list|(
name|DURATION
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|markDuration
operator|=
name|sp
operator|.
name|getTimer
argument_list|(
name|getMetricName
argument_list|(
name|MARK_DURATION
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|sweepDuration
operator|=
name|sp
operator|.
name|getTimer
argument_list|(
name|getMetricName
argument_list|(
name|SWEEP_DURATION
argument_list|)
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
expr_stmt|;
name|this
operator|.
name|collector
operator|=
operator|new
name|OperationStatsCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishFailure
parameter_list|()
block|{
name|finishFailureCounter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNumDeleted
parameter_list|(
name|long
name|num
parameter_list|)
block|{
name|numDeletedCounter
operator|.
name|inc
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateNumCandidates
parameter_list|(
name|long
name|num
parameter_list|)
block|{
name|numCandidatesCounter
operator|.
name|inc
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTotalSizeDeleted
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|totalSizeDeletedCounter
operator|.
name|inc
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateDuration
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|duration
operator|.
name|update
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMarkDuration
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|markDuration
operator|.
name|update
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateSweepDuration
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|sweepDuration
operator|.
name|update
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|GarbageCollectionOperationStats
parameter_list|(
name|StatisticsProvider
name|sp
parameter_list|)
block|{
name|this
argument_list|(
name|sp
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getMetricName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|name
return|;
block|}
specifier|protected
name|OperationStatsCollector
name|getCollector
parameter_list|()
block|{
return|return
name|collector
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TYPE
operator|+
literal|"."
operator|+
name|typeName
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStartCount
parameter_list|()
block|{
return|return
name|startCounter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFailureCount
parameter_list|()
block|{
return|return
name|finishFailureCounter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|duration
parameter_list|()
block|{
return|return
name|duration
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|markDuration
parameter_list|()
block|{
return|return
name|markDuration
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|numDeleted
parameter_list|()
block|{
return|return
name|numDeletedCounter
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|sizeDeleted
parameter_list|()
block|{
return|return
name|totalSizeDeletedCounter
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**      * Marker IOException to identify sweep phase failure because of some      * repositories not having finished Mark phase.      */
specifier|static
class|class
name|NotAllRepositoryMarkedException
extends|extends
name|IOException
block|{
specifier|public
name|NotAllRepositoryMarkedException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

