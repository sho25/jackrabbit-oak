begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|metric
operator|.
name|MetricStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|RuntimeNodeTraversalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|HistogramStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatsOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_comment
comment|/**  * {@code SlowQueryMetricTest} contains slowQuery metrics related tests.  */
end_comment

begin_class
specifier|public
class|class
name|SlowQueryMetricTest
block|{
specifier|private
name|ContentRepository
name|repository
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
specifier|private
name|MetricStatisticsProvider
name|statsProvider
init|=
operator|new
name|MetricStatisticsProvider
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|,
name|executor
argument_list|)
decl_stmt|;
specifier|private
name|QueryEngineSettings
name|queryEngineSettings
init|=
operator|new
name|QueryEngineSettings
argument_list|(
name|statsProvider
argument_list|)
decl_stmt|;
name|Oak
name|oak
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|queryEngineSettings
operator|.
name|setLimitReads
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|Whiteboard
name|whiteboard
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|whiteboard
operator|.
name|register
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
name|statsProvider
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|oak
operator|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|queryEngineSettings
argument_list|)
operator|.
name|with
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|repository
operator|=
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|repository
operator|=
literal|null
expr_stmt|;
name|statsProvider
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|SLOW_QUERY_COUNT_NAME
init|=
literal|"SLOW_QUERY_COUNT"
decl_stmt|;
specifier|private
name|String
name|SLOW_QUERY_PERCENTILE_METRICS_NAME
init|=
literal|"SLOW_QUERY_PERCENTILE_METRICS"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|queryOnStableRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxReadEntries
init|=
literal|1000
decl_stmt|;
comment|//we check for max traversals for each 1000 node reads, see Cursors.java -> fetchNext()
name|ContentSession
name|s
init|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Root
name|r
init|=
name|s
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxReadEntries
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|addChild
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:base"
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ContentSession
name|s2
init|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Root
name|r2
init|=
name|s2
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|CounterStats
name|slowQueryCounter
init|=
name|queryEngineSettings
operator|.
name|getStatisticsProvider
argument_list|()
operator|.
name|getCounterStats
argument_list|(
name|SLOW_QUERY_COUNT_NAME
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
decl_stmt|;
name|HistogramStats
name|histogramStats
init|=
name|queryEngineSettings
operator|.
name|getStatisticsProvider
argument_list|()
operator|.
name|getHistogram
argument_list|(
name|SLOW_QUERY_PERCENTILE_METRICS_NAME
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
decl_stmt|;
name|long
name|totalQueryCount
init|=
name|histogramStats
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|slowQueryCount
init|=
name|slowQueryCounter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalQueryCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowQueryCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|r2
argument_list|,
literal|"test/node1//element(*, nt:base)"
argument_list|)
decl_stmt|;
for|for
control|(
name|ResultRow
name|rr
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{         }
name|totalQueryCount
operator|=
name|histogramStats
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|slowQueryCount
operator|=
name|slowQueryCounter
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalQueryCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowQueryCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|executeAndAssertSlowQuery
argument_list|(
name|r2
argument_list|,
name|queryEngineSettings
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeAndAssertSlowQuery
parameter_list|(
name|Root
name|r2
parameter_list|,
name|QueryEngineSettings
name|queryEngineSettings
parameter_list|)
throws|throws
name|ParseException
block|{
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|r2
argument_list|,
literal|"test//element(*, nt:base)"
argument_list|)
decl_stmt|;
name|CounterStats
name|slowQueryCounter
init|=
name|queryEngineSettings
operator|.
name|getStatisticsProvider
argument_list|()
operator|.
name|getCounterStats
argument_list|(
name|SLOW_QUERY_COUNT_NAME
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
decl_stmt|;
name|HistogramStats
name|histogramStats
init|=
name|queryEngineSettings
operator|.
name|getStatisticsProvider
argument_list|()
operator|.
name|getHistogram
argument_list|(
name|SLOW_QUERY_PERCENTILE_METRICS_NAME
argument_list|,
name|StatsOptions
operator|.
name|METRICS_ONLY
argument_list|)
decl_stmt|;
name|long
name|initialSlowQueryCounter
init|=
name|slowQueryCounter
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|long
name|initialHistogramCounter
init|=
name|histogramStats
operator|.
name|getCount
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|ResultRow
name|rr
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{             }
block|}
catch|catch
parameter_list|(
name|RuntimeNodeTraversalException
name|e
parameter_list|)
block|{
comment|/*              count increased by 2. one for being a query and one for being slow query. Added twice to get histogram percentile info              */
name|Assert
operator|.
name|assertEquals
argument_list|(
name|histogramStats
operator|.
name|getCount
argument_list|()
argument_list|,
name|initialHistogramCounter
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowQueryCounter
operator|.
name|getCount
argument_list|()
argument_list|,
name|initialSlowQueryCounter
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to catch max Node Traversal limit breach"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Result
name|executeQuery
parameter_list|(
name|Root
name|r2
parameter_list|,
name|String
name|queryString
parameter_list|)
throws|throws
name|ParseException
block|{
name|Result
name|result
init|=
name|r2
operator|.
name|getQueryEngine
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|queryString
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|,
name|QueryEngine
operator|.
name|NO_MAPPINGS
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

