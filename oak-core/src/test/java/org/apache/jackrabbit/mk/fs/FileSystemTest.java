begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
operator|.
name|MapMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests various file system.  */
end_comment

begin_class
specifier|public
class|class
name|FileSystemTest
extends|extends
name|TestCase
block|{
specifier|private
name|String
name|getBaseDir
parameter_list|()
block|{
return|return
literal|"target/temp"
return|;
block|}
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|testFileSystem
argument_list|(
name|getBaseDir
argument_list|()
operator|+
literal|"/fs"
argument_list|)
expr_stmt|;
name|testFileSystem
argument_list|(
literal|"cache:"
operator|+
name|getBaseDir
argument_list|()
operator|+
literal|"/fs"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAbsoluteRelative
parameter_list|()
block|{
comment|// for Windows, this is not absolute as the drive letter is missing
comment|// assertTrue(FileUtils.isAbsolute("/test/abc"));
name|assertFalse
argument_list|(
name|FileUtils
operator|.
name|isAbsolute
argument_list|(
literal|"test/abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isAbsolute
argument_list|(
literal|"~/test/abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClasspath
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|resource
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|InputStream
name|in
decl_stmt|;
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/"
operator|+
name|resource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|FileUtils
operator|.
name|newInputStream
argument_list|(
literal|"classpath:"
operator|+
name|resource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|FileUtils
operator|.
name|newInputStream
argument_list|(
literal|"classpath:/"
operator|+
name|resource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSimpleExpandTruncateSize
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|f
init|=
name|getBaseDir
argument_list|()
operator|+
literal|"/fs/test.data"
decl_stmt|;
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|getBaseDir
argument_list|()
operator|+
literal|"/fs"
argument_list|)
expr_stmt|;
name|FileChannel
name|c
init|=
name|FileUtils
operator|.
name|open
argument_list|(
name|f
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|c
operator|.
name|position
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|c
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|FileLock
name|lock
init|=
name|c
operator|.
name|tryLock
argument_list|()
decl_stmt|;
name|c
operator|.
name|truncate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUserHome
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|userDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|toRealPath
argument_list|(
literal|"~/test"
argument_list|)
operator|.
name|startsWith
argument_list|(
name|userDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|toRealPath
argument_list|(
literal|"file:~/test"
argument_list|)
operator|.
name|startsWith
argument_list|(
name|userDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFileSystem
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|Exception
block|{
name|testAppend
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testDirectories
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testMoveTo
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testParentEventuallyReturnsNull
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testRandomAccess
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testResolve
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testSetReadOnly
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testSimple
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testTempFile
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
name|testUnsupportedFeatures
argument_list|(
name|fsBase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppend
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile.txt"
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|FileUtils
operator|.
name|getParent
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
comment|// Profiler prof = new Profiler();
comment|// prof.interval = 1;
comment|// prof.startCollecting();
name|FileChannel
name|c
init|=
name|FileUtils
operator|.
name|open
argument_list|(
name|fileName
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|c
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// long t = System.currentTimeMillis();
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|ByteBuffer
name|buff
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
name|c
operator|.
name|write
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|buff
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// System.out.println(fsBase + ": " + (System.currentTimeMillis() - t));
comment|// System.out.println(prof.getTop(10));
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testDirectories
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|createDirectory
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|fileName
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testMoveTo
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
specifier|final
name|String
name|fileName2
init|=
name|fsBase
operator|+
literal|"/testFile2"
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|moveTo
argument_list|(
name|fileName
argument_list|,
name|fileName2
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|moveTo
argument_list|(
name|fileName2
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName2
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|moveTo
argument_list|(
name|fileName
argument_list|,
name|fileName2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
specifier|private
name|void
name|testParentEventuallyReturnsNull
parameter_list|(
name|String
name|fsBase
parameter_list|)
block|{
name|FilePath
name|p
init|=
name|FilePath
operator|.
name|get
argument_list|(
name|fsBase
operator|+
literal|"/testFile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getScheme
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Parent is not null: "
operator|+
name|p
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|path
operator|=
name|FileUtils
operator|.
name|getParent
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Parent is not null: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testResolve
parameter_list|(
name|String
name|fsBase
parameter_list|)
block|{
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
name|assertEquals
argument_list|(
name|fileName
argument_list|,
name|FilePath
operator|.
name|get
argument_list|(
name|fsBase
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"testFile"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testSetReadOnly
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|setReadOnly
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|FileUtils
operator|.
name|canWrite
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testSimple
parameter_list|(
specifier|final
name|String
name|fsBase
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|FileUtils
operator|.
name|newDirectoryStream
argument_list|(
name|fsBase
argument_list|)
control|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fsBase
operator|+
literal|"/test2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FilePath
argument_list|>
name|p
init|=
name|FilePath
operator|.
name|get
argument_list|(
name|fsBase
argument_list|)
operator|.
name|newDirectoryStream
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|can
init|=
name|FilePath
operator|.
name|get
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
operator|.
name|toRealPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|can
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|canWrite
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|FileChannel
name|channel
init|=
name|FileUtils
operator|.
name|open
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|10000
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|channel
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|channel
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|channel
operator|.
name|read
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|fsBase
operator|+
literal|"/test"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|FileUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|can
operator|=
name|FilePath
operator|.
name|get
argument_list|(
name|fsBase
argument_list|)
operator|.
name|toRealPath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|can2
init|=
name|FileUtils
operator|.
name|toRealPath
argument_list|(
name|FileUtils
operator|.
name|getParent
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|can
argument_list|,
name|can2
argument_list|)
expr_stmt|;
name|FileLock
name|lock
init|=
name|channel
operator|.
name|tryLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|channel
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|FileUtils
operator|.
name|size
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|=
name|FileUtils
operator|.
name|open
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|test
init|=
operator|new
name|byte
index|[
literal|10000
index|]
decl_stmt|;
name|FileUtils
operator|.
name|readFully
argument_list|(
name|channel
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileChannel
name|fc
init|=
name|channel
decl_stmt|;
try|try
block|{
name|fc
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|fc
operator|.
name|truncate
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|lastMod
init|=
name|FileUtils
operator|.
name|lastModified
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastMod
operator|<
name|time
operator|-
literal|1999
condition|)
block|{
comment|// at most 2 seconds difference
name|assertEquals
argument_list|(
name|time
argument_list|,
name|lastMod
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|FileUtils
operator|.
name|size
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|FileUtils
operator|.
name|newDirectoryStream
argument_list|(
name|fsBase
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copy
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|,
name|fsBase
operator|+
literal|"/test3"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|moveTo
argument_list|(
name|fsBase
operator|+
literal|"/test3"
argument_list|,
name|fsBase
operator|+
literal|"/test2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|FileUtils
operator|.
name|exists
argument_list|(
name|fsBase
operator|+
literal|"/test3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fsBase
operator|+
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|FileUtils
operator|.
name|size
argument_list|(
name|fsBase
operator|+
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
literal|10000
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|FileUtils
operator|.
name|newInputStream
argument_list|(
name|fsBase
operator|+
literal|"/test2"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|l
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer2
argument_list|,
name|pos
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|10000
operator|-
name|pos
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|pos
operator|+=
name|l
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buffer
argument_list|,
name|buffer2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|tryDelete
argument_list|(
name|fsBase
operator|+
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fsBase
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|createDirectories
argument_list|(
name|fsBase
operator|+
literal|"/testDir"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isDirectory
argument_list|(
name|fsBase
operator|+
literal|"/testDir"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fsBase
operator|.
name|startsWith
argument_list|(
literal|"jdbc:"
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|deleteRecursive
argument_list|(
name|fsBase
operator|+
literal|"/testDir"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|FileUtils
operator|.
name|exists
argument_list|(
name|fsBase
operator|+
literal|"/testDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testRandomAccess
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|Exception
block|{
name|testRandomAccess
argument_list|(
name|fsBase
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testRandomAccess
parameter_list|(
name|String
name|fsBase
parameter_list|,
name|int
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
name|fsBase
operator|+
literal|"/tmp"
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getBaseDir
argument_list|()
operator|+
literal|"/tmp"
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|ra
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|FileChannel
name|f
init|=
name|FileUtils
operator|.
name|open
argument_list|(
name|s
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|f
operator|.
name|read
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|500
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|trace
argument_list|(
literal|"op "
operator|+
name|i
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|7
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
block|{
name|pos
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|pos
argument_list|,
name|ra
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|trace
argument_list|(
literal|"seek "
operator|+
name|pos
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"seek "
operator|+
name|pos
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|f
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|ra
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|trace
argument_list|(
literal|"write "
operator|+
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"write "
operator|+
name|buffer
operator|.
name|length
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|ra
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|trace
argument_list|(
literal|"truncate "
operator|+
name|pos
argument_list|)
expr_stmt|;
name|f
operator|.
name|truncate
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|ra
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// truncate is supposed to have no effect if the
comment|// position is larger than the current size
name|ra
operator|.
name|setLength
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"truncate "
operator|+
name|pos
argument_list|,
name|ra
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|f
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"truncate "
operator|+
name|pos
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
name|int
name|len
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|len
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|ra
operator|.
name|length
argument_list|()
operator|-
name|ra
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|trace
argument_list|(
literal|"readFully "
operator|+
name|len
argument_list|)
expr_stmt|;
name|ra
operator|.
name|readFully
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|readFully
argument_list|(
name|f
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b2
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"readFully "
operator|+
name|len
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|4
case|:
block|{
name|trace
argument_list|(
literal|"getFilePointer "
operator|+
name|ra
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"getFilePointer "
operator|+
name|ra
operator|.
name|getFilePointer
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ra
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|f
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|5
case|:
block|{
name|trace
argument_list|(
literal|"length "
operator|+
name|ra
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"length "
operator|+
name|ra
operator|.
name|length
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ra
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|6
case|:
block|{
name|trace
argument_list|(
literal|"reopen"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"reopen\n"
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|ra
operator|.
name|close
argument_list|()
expr_stmt|;
name|ra
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|f
operator|=
name|FileUtils
operator|.
name|open
argument_list|(
name|s
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ra
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|+
literal|"\n"
operator|+
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|ra
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testTempFile
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|len
init|=
literal|10000
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
name|fsBase
operator|+
literal|"/tmp"
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|FileUtils
operator|.
name|newOutputStream
argument_list|(
name|s
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|FileUtils
operator|.
name|newOutputStream
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|FileUtils
operator|.
name|newInputStream
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testUnsupportedFeatures
parameter_list|(
name|String
name|fsBase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|fsBase
operator|+
literal|"/testFile"
decl_stmt|;
if|if
condition|(
name|FileUtils
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileUtils
operator|.
name|createFile
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
specifier|final
name|FileChannel
name|channel
init|=
name|FileUtils
operator|.
name|open
argument_list|(
name|fileName
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
try|try
block|{
name|channel
operator|.
name|map
argument_list|(
name|MapMode
operator|.
name|PRIVATE
argument_list|,
literal|0
argument_list|,
name|channel
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|read
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|read
argument_list|(
operator|new
name|ByteBuffer
index|[]
block|{
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|write
argument_list|(
operator|new
name|ByteBuffer
index|[]
block|{
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|transferFrom
argument_list|(
name|channel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|channel
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|delete
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|trace
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// System.out.println(s);
block|}
block|}
end_class

end_unit

