begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiUtil
operator|.
name|lookupConfigurationThenFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|osgi
operator|.
name|SplitBlobStoreService
operator|.
name|ONLY_STANDALONE_TARGET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ProxyNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory allowing creation of secondary segment node stores.  *<p>  * The different secondaries are distinguished by their role attribute.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|name
operator|=
literal|"org.apache.jackrabbit.oak.plugins.segment.SegmentNodeStoreFactory"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak Segment NodeStore Factory"
argument_list|,
name|description
operator|=
literal|"Factory allowing configuration of adjacent instances of "
operator|+
literal|"NodeStore implementation based on Segment model besides a default SegmentNodeStore in same setup."
argument_list|)
specifier|public
class|class
name|SegmentNodeStoreFactory
extends|extends
name|ProxyNodeStore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Role"
argument_list|,
name|description
operator|=
literal|"As multiple SegmentNodeStores can be configured, this parameter defines the role "
operator|+
literal|"of 'this' SegmentNodeStore."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ROLE
init|=
literal|"role"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Directory"
argument_list|,
name|description
operator|=
literal|"Directory location used to store the segment tar files. If not specified then looks "
operator|+
literal|"for framework property 'repository.home' otherwise use a subdirectory with name 'tarmk'"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTORY
init|=
literal|"repository.home"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Mode"
argument_list|,
name|description
operator|=
literal|"TarMK mode (64 for memory mapping, 32 for normal file access)"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODE
init|=
literal|"tarmk.mode"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|256
argument_list|,
name|label
operator|=
literal|"Maximum Tar File Size (MB)"
argument_list|,
name|description
operator|=
literal|"TarMK maximum file size (MB)"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"tarmk.size"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
literal|256
argument_list|,
name|label
operator|=
literal|"Cache size (MB)"
argument_list|,
name|description
operator|=
literal|"Cache size for storing most recently used Segments"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CACHE
init|=
literal|"cache"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom BlobStore"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is to be used. "
operator|+
literal|"By default large binary content would be stored within segment tar files"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
specifier|volatile
name|SegmentNodeStore
name|segmentNodeStore
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
name|ONLY_STANDALONE_TARGET
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|ServiceRegistration
name|storeRegistration
decl_stmt|;
specifier|private
name|Registration
name|fileStoreStatsMBean
decl_stmt|;
specifier|private
name|WhiteboardExecutor
name|executor
decl_stmt|;
specifier|private
name|boolean
name|customBlobStore
decl_stmt|;
specifier|private
name|String
name|role
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|SegmentNodeStore
name|getNodeStore
parameter_list|()
block|{
name|checkState
argument_list|(
name|segmentNodeStore
operator|!=
literal|null
argument_list|,
literal|"service must be activated when used"
argument_list|)
expr_stmt|;
return|return
name|segmentNodeStore
return|;
block|}
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|,
literal|"SegmentNodeStore instance"
argument_list|)
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|property
argument_list|(
name|ROLE
argument_list|)
expr_stmt|;
comment|//In secondaryNodeStore mode customBlobStore is always enabled
name|this
operator|.
name|customBlobStore
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|property
argument_list|(
name|CUSTOM_BLOB_STORE
argument_list|)
argument_list|)
operator|||
name|isSecondaryStoreMode
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activate: SegmentNodeStore '"
operator|+
name|role
operator|+
literal|"' starting."
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobStore
operator|==
literal|null
operator|&&
name|customBlobStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BlobStore use enabled. SegmentNodeStore would be initialized when BlobStore would be available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|bindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|unregisterNodeStore
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|segmentNodeStore
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|registerNodeStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|registerSegmentStore
argument_list|()
operator|&&
name|role
operator|!=
literal|null
condition|)
block|{
name|registerNodeStoreProvider
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isSecondaryStoreMode
parameter_list|()
block|{
return|return
literal|"secondary"
operator|.
name|equals
argument_list|(
name|role
argument_list|)
return|;
block|}
specifier|private
name|void
name|registerNodeStoreProvider
parameter_list|()
block|{
name|SegmentNodeStore
operator|.
name|SegmentNodeStoreBuilder
name|nodeStoreBuilder
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|segmentNodeStore
operator|=
name|nodeStoreBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|NodeStoreProvider
operator|.
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|storeRegistration
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|NodeStoreProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|SegmentNodeStoreFactory
operator|.
name|this
return|;
block|}
block|}
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Registered NodeStoreProvider backed by SegmentNodeStore of type '{}'"
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|registerSegmentStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Component still not activated. Ignoring the initialization call"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|OsgiWhiteboard
name|whiteboard
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
decl_stmt|;
comment|// Build the FileStore
name|Builder
name|builder
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|withCacheSize
argument_list|(
name|getCacheSize
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|getMaxFileSize
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"64"
argument_list|)
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|statisticsProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|customBlobStore
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with BlobStore [{}]"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The segment store data is not compatible with the current version. Please use oak-segment-tar or a different version of oak-segment."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Listen for Executor services on the whiteboard
name|executor
operator|=
operator|new
name|WhiteboardExecutor
argument_list|()
expr_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
comment|// Expose statistics about the FileStore
name|fileStoreStatsMBean
operator|=
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|FileStoreStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getStats
argument_list|()
argument_list|,
name|FileStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"FileStore '"
operator|+
name|role
operator|+
literal|"' statistics"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|unregisterNodeStore
parameter_list|()
block|{
if|if
condition|(
name|storeRegistration
operator|!=
literal|null
condition|)
block|{
name|storeRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|storeRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|fileStoreStatsMBean
operator|!=
literal|null
condition|)
block|{
name|fileStoreStatsMBean
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|fileStoreStatsMBean
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|getBaseDirectory
parameter_list|()
block|{
name|String
name|directory
init|=
name|property
argument_list|(
name|DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|directory
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
literal|"tarmk"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getDirectory
parameter_list|()
block|{
name|String
name|dirName
init|=
literal|"segmentstore"
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|dirName
operator|=
name|role
operator|+
literal|"-"
operator|+
name|dirName
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
name|dirName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getMode
parameter_list|()
block|{
name|String
name|mode
init|=
name|property
argument_list|(
name|MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
return|return
name|mode
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|MODE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCacheSizeProperty
parameter_list|()
block|{
name|String
name|cache
init|=
name|property
argument_list|(
name|CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
return|return
name|cache
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|CACHE
argument_list|)
return|;
block|}
specifier|private
name|int
name|getCacheSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getCacheSizeProperty
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getMaxFileSizeProperty
parameter_list|()
block|{
name|String
name|size
init|=
name|property
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
return|return
name|size
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|SIZE
argument_list|,
literal|"256"
argument_list|)
return|;
block|}
specifier|private
name|int
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getMaxFileSizeProperty
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|property
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupConfigurationThenFramework
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< Object>--
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
literal|": "
operator|+
name|segmentNodeStore
operator|+
literal|"[role:"
operator|+
name|role
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

