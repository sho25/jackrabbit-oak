begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|explorer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
operator|.
name|LookAndFeelInfo
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * NodeStore explorer  *   * GUI based on Swing, for now it is tailored to the TarMK  *   */
end_comment

begin_class
specifier|public
class|class
name|Explorer
block|{
specifier|private
specifier|static
name|void
name|initLF
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|LookAndFeelInfo
name|info
range|:
name|UIManager
operator|.
name|getInstalledLookAndFeels
argument_list|()
control|)
block|{
if|if
condition|(
literal|"Nimbus"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|info
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// If Nimbus is not available, you can set the GUI to another look
comment|// and feel.
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
name|segment
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"segment"
argument_list|,
literal|"Use oak-segment instead of oak-segment-tar"
argument_list|)
decl_stmt|;
name|OptionSpec
name|skipSizeCheck
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"skip-size-check"
argument_list|,
literal|"Don't compute the size of the records"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|nonOptions
init|=
name|parser
operator|.
name|nonOptions
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|valuesOf
argument_list|(
name|nonOptions
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|path
init|=
name|options
operator|.
name|valuesOf
argument_list|(
name|nonOptions
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExplorerBackend
name|backend
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|segment
argument_list|)
condition|)
block|{
name|backend
operator|=
operator|new
name|SegmentExplorerBackend
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backend
operator|=
operator|new
name|SegmentTarExplorerBackend
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
operator|new
name|Explorer
argument_list|(
name|path
argument_list|,
name|backend
argument_list|,
name|options
operator|.
name|has
argument_list|(
name|skipSizeCheck
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|ExplorerBackend
name|backend
decl_stmt|;
specifier|private
name|Explorer
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|ExplorerBackend
name|backend
parameter_list|,
specifier|final
name|boolean
name|skipSizeCheck
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|backend
operator|=
name|backend
expr_stmt|;
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|initLF
argument_list|()
expr_stmt|;
try|try
block|{
name|createAndShowGUI
argument_list|(
name|path
argument_list|,
name|skipSizeCheck
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createAndShowGUI
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|boolean
name|skipSizeCheck
parameter_list|)
throws|throws
name|IOException
block|{
name|JTextArea
name|log
init|=
operator|new
name|JTextArea
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|log
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|NodeStoreTree
name|treePanel
init|=
operator|new
name|NodeStoreTree
argument_list|(
name|backend
argument_list|,
name|log
argument_list|,
name|skipSizeCheck
argument_list|)
decl_stmt|;
specifier|final
name|JFrame
name|frame
init|=
operator|new
name|JFrame
argument_list|(
literal|"Explore "
operator|+
name|path
operator|+
literal|" @head"
argument_list|)
decl_stmt|;
name|frame
operator|.
name|addWindowListener
argument_list|(
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
name|windowEvent
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|treePanel
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JPanel
name|content
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|GridBagLayout
argument_list|()
argument_list|)
decl_stmt|;
name|GridBagConstraints
name|c
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|c
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|c
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|JSplitPane
name|splitPane
init|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|HORIZONTAL_SPLIT
argument_list|,
operator|new
name|JScrollPane
argument_list|(
name|treePanel
argument_list|)
argument_list|,
operator|new
name|JScrollPane
argument_list|(
name|log
argument_list|)
argument_list|)
decl_stmt|;
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.3
argument_list|)
expr_stmt|;
name|content
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|splitPane
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|JMenuBar
name|menuBar
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
name|menuBar
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuReopen
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Reopen"
argument_list|)
decl_stmt|;
name|menuReopen
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_R
argument_list|)
expr_stmt|;
name|menuReopen
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
try|try
block|{
name|treePanel
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuCompaction
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Time Machine"
argument_list|)
decl_stmt|;
name|menuCompaction
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_T
argument_list|)
expr_stmt|;
name|menuCompaction
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|backend
operator|.
name|readRevisions
argument_list|()
decl_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
literal|"Revert to a specified revision"
argument_list|,
literal|"Time Machine"
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|,
literal|null
argument_list|,
name|revs
operator|.
name|toArray
argument_list|()
argument_list|,
name|revs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|treePanel
operator|.
name|revert
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|frame
operator|.
name|setTitle
argument_list|(
literal|"Explore "
operator|+
name|path
operator|+
literal|" @"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuRefs
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Tar File Info"
argument_list|)
decl_stmt|;
name|menuRefs
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_I
argument_list|)
expr_stmt|;
name|menuRefs
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tarFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|path
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|tarFiles
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|s
init|=
operator|(
name|String
operator|)
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
literal|"Choose a tar file"
argument_list|,
literal|"Tar File Info"
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|,
literal|null
argument_list|,
name|tarFiles
operator|.
name|toArray
argument_list|()
argument_list|,
name|tarFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|treePanel
operator|.
name|printTarInfo
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuSCR
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Segment Refs"
argument_list|)
decl_stmt|;
name|menuSCR
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_R
argument_list|)
expr_stmt|;
name|menuSCR
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
name|String
name|s
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
literal|"Segment References\nUsage:<segmentId>"
argument_list|,
literal|"Segment References"
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|treePanel
operator|.
name|printSegmentReferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuDiff
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"SegmentNodeState diff"
argument_list|)
decl_stmt|;
name|menuDiff
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_D
argument_list|)
expr_stmt|;
name|menuDiff
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
name|String
name|s
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
literal|"SegmentNodeState diff\nUsage:<recordId><recordId> [<path>]"
argument_list|,
literal|"SegmentNodeState diff"
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|treePanel
operator|.
name|printDiff
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|menuPCM
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Persisted Compaction Maps"
argument_list|)
decl_stmt|;
name|menuPCM
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_P
argument_list|)
expr_stmt|;
name|menuPCM
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ev
parameter_list|)
block|{
name|treePanel
operator|.
name|printPCMInfo
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuReopen
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuCompaction
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuRefs
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuSCR
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuDiff
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|menuPCM
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
operator|new
name|JSeparator
argument_list|(
name|JSeparator
operator|.
name|VERTICAL
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setJMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
name|frame
operator|.
name|pack
argument_list|()
expr_stmt|;
name|frame
operator|.
name|setSize
argument_list|(
literal|960
argument_list|,
literal|720
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setLocationRelativeTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

