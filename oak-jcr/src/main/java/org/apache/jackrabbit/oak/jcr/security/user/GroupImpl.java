begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * GroupImpl...  */
end_comment

begin_class
class|class
name|GroupImpl
extends|extends
name|AuthorizableImpl
implements|implements
name|Group
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GroupImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|GroupImpl
parameter_list|(
name|Node
name|node
parameter_list|,
name|UserManagerImpl
name|userManager
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
argument_list|(
name|node
argument_list|,
name|userManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|checkValidNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|node
operator|==
literal|null
operator|||
operator|!
name|node
operator|.
name|isNodeType
argument_list|(
name|AuthorizableImpl
operator|.
name|NT_REP_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid group node: node type rep:Group expected."
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------------------------------------< Authorizable>---
comment|/**      * @see org.apache.jackrabbit.api.security.user.Authorizable#isGroup()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isGroup
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Authorizable#getPrincipal()      */
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|GroupPrincipal
argument_list|(
name|getPrincipalName
argument_list|()
argument_list|,
name|getNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------< Group>---
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#getDeclaredMembers()      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|getDeclaredMembers
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getMembers
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#getMembers()      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|getMembers
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getMembers
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#isDeclaredMember(org.apache.jackrabbit.api.security.user.Authorizable)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isDeclaredMember
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|isMember
argument_list|(
name|authorizable
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#isMember(org.apache.jackrabbit.api.security.user.Authorizable)      */
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|isMember
argument_list|(
name|authorizable
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#addMember(org.apache.jackrabbit.api.security.user.Authorizable)      */
annotation|@
name|Override
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|isValidAuthorizableImpl
argument_list|(
name|authorizable
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Authorizable: {}"
argument_list|,
name|authorizable
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|AuthorizableImpl
name|authorizableImpl
init|=
operator|(
operator|(
name|AuthorizableImpl
operator|)
name|authorizable
operator|)
decl_stmt|;
if|if
condition|(
name|isEveryone
argument_list|()
operator|||
name|authorizableImpl
operator|.
name|isEveryone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|authorizableImpl
operator|.
name|isGroup
argument_list|()
condition|)
block|{
if|if
condition|(
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|authorizableImpl
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Attempt to add a group as member of itself ("
operator|+
name|getID
argument_list|()
operator|+
literal|")."
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|(
name|Group
operator|)
name|authorizableImpl
operator|)
operator|.
name|isMember
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to create circular group membership."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|addMember
argument_list|(
name|this
argument_list|,
name|authorizableImpl
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.jackrabbit.api.security.user.Group#removeMember(org.apache.jackrabbit.api.security.user.Authorizable)      */
annotation|@
name|Override
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|isValidAuthorizableImpl
argument_list|(
name|authorizable
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid Authorizable: {}"
argument_list|,
name|authorizable
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isEveryone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|removeMember
argument_list|(
name|this
argument_list|,
operator|(
name|AuthorizableImpl
operator|)
name|authorizable
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
comment|/**      * Internal implementation of {@link #getDeclaredMembers()} and {@link #getMembers()}.      *      * @param includeInherited Flag indicating if only the declared or all members      * should be returned.      * @return Iterator of authorizables being member of this group.      * @throws RepositoryException If an error occurs.      */
specifier|private
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|getMembers
parameter_list|(
name|boolean
name|includeInherited
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isEveryone
argument_list|()
condition|)
block|{
return|return
name|getUserManager
argument_list|()
operator|.
name|findAuthorizables
argument_list|(
name|AuthorizableImpl
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|null
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|includeInherited
condition|)
block|{
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|getMembers
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|getDeclaredMembers
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**      * Internal implementation of {@link #isDeclaredMember(Authorizable)} and {@link #isMember(Authorizable)}.      *      * @param authorizable The authorizable to test.      * @param includeInherited Flag indicating if only declared or all members      * should taken into account.      * @return {@code true} if the specified authorizable is member or declared      * member of this group; {@code false} otherwise.      * @throws RepositoryException If an error occurs.      */
specifier|private
name|boolean
name|isMember
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|isValidAuthorizableImpl
argument_list|(
name|authorizable
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|getNode
argument_list|()
operator|.
name|isSame
argument_list|(
operator|(
operator|(
name|AuthorizableImpl
operator|)
name|authorizable
operator|)
operator|.
name|getNode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isEveryone
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|includeInherited
condition|)
block|{
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|hasMember
argument_list|(
name|this
argument_list|,
operator|(
name|AuthorizableImpl
operator|)
name|authorizable
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getUserManager
argument_list|()
operator|.
name|getMembershipManager
argument_list|()
operator|.
name|hasDeclaredMember
argument_list|(
name|this
argument_list|,
operator|(
name|AuthorizableImpl
operator|)
name|authorizable
argument_list|)
return|;
block|}
block|}
comment|/**      * Principal representation of this group instance.      */
specifier|private
class|class
name|GroupPrincipal
extends|extends
name|ItemBasedPrincipalImpl
implements|implements
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
block|{
name|GroupPrincipal
parameter_list|(
name|String
name|principalName
parameter_list|,
name|String
name|nodePath
parameter_list|)
block|{
name|super
argument_list|(
name|principalName
argument_list|,
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|boolean
name|isMember
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// shortcut for everyone group -> avoid collecting all members
comment|// as all users and groups are member of everyone.
if|if
condition|(
name|isEveryone
argument_list|()
condition|)
block|{
name|isMember
operator|=
operator|!
name|EveryonePrincipal
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Authorizable
name|a
init|=
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|isMember
operator|=
name|GroupImpl
operator|.
name|this
operator|.
name|isMember
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to determine group membership"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// principal doesn't represent a known authorizable or an error occurred.
return|return
name|isMember
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iterator
decl_stmt|;
try|try
block|{
name|iterator
operator|=
name|GroupImpl
operator|.
name|this
operator|.
name|getMembers
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// should not occur.
name|String
name|msg
init|=
literal|"Unable to retrieve Group members: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Enumeration
argument_list|<
name|Principal
argument_list|>
name|members
init|=
operator|new
name|Enumeration
argument_list|<
name|Principal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|nextElement
parameter_list|()
block|{
try|try
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getPrincipal
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Internal error while retrieving principal: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|members
return|;
block|}
block|}
block|}
end_class

end_unit

