begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitWorkspace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|InvalidTestPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: AccessControlList Implementation Details  * -----------------------------------------------------------------------------  *  * Goal:  * Understand some of the implementation details applied by the default  * access control list provided by the Oak access control management.  *  * Exercises:  *  * - {@link #testAddEntryTwice()}  *   Adding the same ACE twice does not work.  *   Verify the expectation by looking at the ACEs exposed by the list.  *  * - {@link #testUpdateAndComplementary()}  *   The default implementation of the JackrabbitAccessControlList interface  *   performs some optimization upon ACE-addition.  *   Walk through the setup and complete the test case such that it passes.  *  * - {@link #testAddEntryWithInvalidPrincipals()}  *   This tests creates a list of invalid principals for which adding an ACE  *   will fail.  *  *   Question: Can you explain for each of these principals why?  *  * - {@link #testAddEntriesWithCustomKnownPrincipal()}  *   Here we use a custom principal implementation as well but a principal  *   with the given name is actually known.  *   Walk through the test and complete it such that it passes.  *  * - {@link #testAddEntryWithInvalidPrivilege()}  *   Walk through the test and explain why creating ACE for the given list of  *   privilege arrays must fail.  *  * - {@link #testRemoveInvalidEntry()}  *   Walk through the removal and explain why removing an ACE with the same  *   characteristics is expected to fail.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * The JCR specification mandates the that the principal used to create an ACE  * is known to the system.  *  * - Investigate how the Oak repository can be configured such that creating  *   ACEs with unknown principals would still succeed.  *  *   Question: Can you name the configuration option and list the allowed values? What are the differences?  *   Question: Can you find other places in the access control management code  *             base where this is being used?  *   Question: Can you imagine the use cases for such a different or relaxed behaviour?  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L6_AccessControlContentTest}  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L5_AccessControlListImplTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|testPrivileges
operator|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Authorizable
name|testGroup
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAddEntryTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|expectedResult
init|=
literal|false
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE : verify the size of the ACL.
block|}
specifier|public
name|void
name|testUpdateAndComplementary
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|acReadPriv
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|acReadPriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSize
operator|=
operator|-
literal|1
expr_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|expectedPrivileges
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertArrayEquals
argument_list|(
name|expectedPrivileges
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|expectedPrivileges1
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertArrayEquals
argument_list|(
name|expectedPrivileges1
argument_list|,
name|entries
index|[
literal|1
index|]
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddEntryWithInvalidPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: explain for each principal in the list why using it for an ACE fails
name|List
argument_list|<
name|Principal
argument_list|>
name|invalidPrincipals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|InvalidTestPrincipal
argument_list|(
literal|"unknown"
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"unknown"
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|invalidPrincipals
control|)
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|principal
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with an invalid principal should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
specifier|public
name|void
name|testAddEntriesWithCustomKnownPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|oakPrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|testPrincipal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|oakPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|principal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddEntryWithInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|privilegeName
init|=
literal|"AccessControlListImplTestPrivilege"
decl_stmt|;
name|Privilege
name|customPriv
init|=
operator|(
operator|(
name|JackrabbitWorkspace
operator|)
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|)
operator|.
name|getPrivilegeManager
argument_list|()
operator|.
name|registerPrivilege
argument_list|(
name|privilegeName
argument_list|,
literal|true
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// EXERCISE : walks through this test and explain why adding those ACEs fails.
name|List
argument_list|<
name|Privilege
index|[]
argument_list|>
name|invalidPrivileges
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
operator|new
name|Privilege
index|[]
block|{
name|customPriv
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
index|[]
name|privs
range|:
name|invalidPrivileges
control|)
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with invalid privilege array should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
specifier|public
name|void
name|testRemoveInvalidEntry
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// EXERCISE : walk through the removal and explain the expected behaviour.
try|try
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
operator|new
name|JackrabbitAccessControlEntry
argument_list|()
block|{
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|Value
name|getRestriction
parameter_list|(
annotation|@
name|NotNull
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|Value
index|[]
name|getRestrictions
parameter_list|(
annotation|@
name|NotNull
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|testPrincipal
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|testPrivileges
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing an unknown ACE should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
end_class

end_unit

