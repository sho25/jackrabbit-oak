begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A {@code ChangeDispatcher} instance dispatches content changes  * to registered {@link Observer}s.  *<p>  * Changes are reported by calling {@link #contentChanged(NodeState, CommitInfo)}.  *<p>  * The {@link #addObserver(Observer)} method registers an {@link Observer} for receiving  * notifications for all changes reported to this instance.  */
end_comment

begin_class
specifier|public
class|class
name|ChangeDispatcher
implements|implements
name|Observable
implements|,
name|Observer
block|{
specifier|private
specifier|final
name|CompositeObserver
name|observers
init|=
operator|new
name|CompositeObserver
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|NodeState
name|root
decl_stmt|;
comment|/**      * Create a new instance for dispatching content changes      * @param root  current root node state      */
specifier|public
name|ChangeDispatcher
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register a new {@link Observer} for receiving notifications about changes reported to      * this change dispatcher. Changes are reported synchronously and clients need to ensure      * to no block any length of time (e.g. by relaying through a {@link BackgroundObserver}).      *<p>      * Clients need to call {@link java.io.Closeable#close()} close} on the returned      * {@code Closeable} instance to stop receiving notifications.      *      * @return  a {@link Closeable} instance      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Closeable
name|addObserver
parameter_list|(
specifier|final
name|Observer
name|observer
parameter_list|)
block|{
name|observer
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|observers
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
return|return
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|observers
operator|.
name|removeObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|contentChanged
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|observers
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
block|}
end_class

end_unit

