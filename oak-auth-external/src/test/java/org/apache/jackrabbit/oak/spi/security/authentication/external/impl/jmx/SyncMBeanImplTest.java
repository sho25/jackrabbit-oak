begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProviderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|TestIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|DefaultSyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|SyncMBeanImplTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SYNC_NAME
init|=
literal|"testSyncName"
decl_stmt|;
specifier|private
specifier|static
name|Repository
name|REPOSITORY
decl_stmt|;
specifier|private
name|ExternalIdentityProvider
name|idp
decl_stmt|;
specifier|private
name|SyncManager
name|syncMgr
decl_stmt|;
name|ExternalIdentityProviderManager
name|idpMgr
decl_stmt|;
specifier|private
name|SyncMBeanImpl
name|syncMBean
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|REPOSITORY
operator|=
operator|new
name|Jcr
argument_list|()
operator|.
name|createRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
comment|// TODO : proper setup
name|idp
operator|=
operator|new
name|TestIdentityProvider
argument_list|()
expr_stmt|;
name|syncMgr
operator|=
operator|new
name|SyncManager
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|SyncHandler
name|getSyncHandler
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|SYNC_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|DefaultSyncHandler
argument_list|(
operator|new
name|DefaultSyncConfig
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
expr_stmt|;
name|idpMgr
operator|=
operator|new
name|ExternalIdentityProviderManager
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|ExternalIdentityProvider
name|getProvider
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|idp
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
expr_stmt|;
name|syncMBean
operator|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
name|SYNC_NAME
argument_list|,
name|idpMgr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSyncHandlerName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|SYNC_NAME
argument_list|,
name|syncMBean
operator|.
name|getSyncHandlerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidSyncHandlerName
parameter_list|()
block|{
name|SyncMBeanImpl
name|syncMBean
init|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
literal|"invalid"
argument_list|,
name|idpMgr
argument_list|,
name|idp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid"
argument_list|,
name|syncMBean
operator|.
name|getSyncHandlerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// calling any sync-operation must fail due to the invalid configuration
try|try
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"syncAllExternalUsers with invalid SyncHandlerName must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIDPName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|idp
operator|.
name|getName
argument_list|()
argument_list|,
name|syncMBean
operator|.
name|getIDPName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidIDPName
parameter_list|()
block|{
name|SyncMBeanImpl
name|syncMBean
init|=
operator|new
name|SyncMBeanImpl
argument_list|(
name|REPOSITORY
argument_list|,
name|syncMgr
argument_list|,
name|SYNC_NAME
argument_list|,
name|idpMgr
argument_list|,
literal|"invalid"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"invalid"
argument_list|,
name|syncMBean
operator|.
name|getIDPName
argument_list|()
argument_list|)
expr_stmt|;
comment|// calling any sync-operation must fail due to the invalid configuration
try|try
block|{
name|syncMBean
operator|.
name|syncAllExternalUsers
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"syncAllExternalUsers with invalid IDP name must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncUsers
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllUsers
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncExternalUsers
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAllExternalUsers
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListOrphanedUsers
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeOrphanedUsers
parameter_list|()
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

