begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|ElasticsearchIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|query
operator|.
name|ElasticsearchIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|ElasticsearchIndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|vti
operator|.
name|XmlVTI
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FulltextIndexConstants
operator|.
name|PROPDEF_PROP_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_class
specifier|public
class|class
name|ElasticsearchPropertyIndexTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Rule
specifier|public
name|ElasticsearchManagementRule
name|esMgmt
init|=
operator|new
name|ElasticsearchManagementRule
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|ElasticsearchIndexEditorProvider
name|editorProvider
init|=
operator|new
name|ElasticsearchIndexEditorProvider
argument_list|(
name|esMgmt
argument_list|,
operator|new
name|ExtractedTextCache
argument_list|(
literal|10
operator|*
name|FileUtils
operator|.
name|ONE_MB
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|ElasticsearchIndexProvider
name|indexProvider
init|=
operator|new
name|ElasticsearchIndexProvider
argument_list|(
name|esMgmt
argument_list|)
decl_stmt|;
comment|// remove all indexes to avoid cost competition (essentially a TODO for fixing cost ES cost estimation)
name|NodeBuilder
name|builder
init|=
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|oiBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|oiBuilder
operator|.
name|getChildNodeNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|idxName
lambda|->
name|oiBuilder
operator|.
name|child
argument_list|(
name|idxName
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
name|indexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|setIndex
argument_list|(
literal|"test1"
argument_list|,
name|createIndex
argument_list|(
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setIndex
argument_list|(
literal|"test2"
argument_list|,
name|createIndex
argument_list|(
name|of
argument_list|(
literal|"propc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"elasticsearch:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"elasticsearch:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo2'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-3825
annotation|@
name|Test
specifier|public
name|void
name|nodeNameViaPropDefinition
parameter_list|()
throws|throws
name|Exception
block|{
comment|//make index
name|IndexDefinitionBuilder
name|builder
init|=
name|createIndex
argument_list|(
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
decl_stmt|;
name|builder
operator|.
name|includedPaths
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|evaluatePathRestrictions
argument_list|()
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"nodeName"
argument_list|,
name|PROPDEF_PROP_NODE_NAME
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|setIndex
argument_list|(
literal|"test1"
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//add content
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"camelCase"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"sc"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryPrefix
init|=
literal|"select [jcr:path] from [nt:base] where ISDESCENDANTNODE('/test') AND "
decl_stmt|;
comment|//test
name|String
name|propabQuery
init|=
name|queryPrefix
operator|+
literal|"LOCALNAME() = 'foo'"
decl_stmt|;
name|String
name|explanation
init|=
name|explain
argument_list|(
name|propabQuery
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|explanation
argument_list|,
name|containsString
argument_list|(
literal|"elasticsearch:test1(/oak:index/test1) "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|explanation
argument_list|,
name|containsString
argument_list|(
literal|"{\"term\":{\":nodeName\":{\"value\":\"foo\","
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"LOCALNAME() = 'bar'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/sc/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"LOCALNAME() LIKE 'foo'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"LOCALNAME() LIKE 'camel%'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"NAME() = 'bar'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/sc/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"NAME() LIKE 'foo'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|queryPrefix
operator|+
literal|"NAME() LIKE 'camel%'"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|setIndex
argument_list|(
literal|"test1"
argument_list|,
name|createIndex
argument_list|(
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"elasticsearch:test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyExistenceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|setIndex
argument_list|(
literal|"test1"
argument_list|,
name|createIndex
argument_list|(
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|IndexDefinitionBuilder
name|createIndex
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
block|{
name|IndexDefinitionBuilder
name|builder
init|=
operator|new
name|ElasticsearchIndexDefinitionBuilder
argument_list|()
operator|.
name|noAsync
argument_list|()
decl_stmt|;
name|IndexDefinitionBuilder
operator|.
name|IndexRule
name|indexRule
init|=
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|propNames
operator|.
name|forEach
argument_list|(
name|propName
lambda|->
name|indexRule
operator|.
name|property
argument_list|(
name|propName
argument_list|)
operator|.
name|propertyIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
name|void
name|setIndex
parameter_list|(
name|String
name|idxName
parameter_list|,
name|IndexDefinitionBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|build
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|idxName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|explain
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
return|return
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

