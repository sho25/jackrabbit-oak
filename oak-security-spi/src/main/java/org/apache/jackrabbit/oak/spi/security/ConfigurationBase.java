begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Abstract base implementation for the various security configurations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ConfigurationBase
extends|extends
name|SecurityConfiguration
operator|.
name|Default
block|{
specifier|private
name|SecurityProvider
name|securityProvider
decl_stmt|;
specifier|private
name|ConfigurationParameters
name|config
init|=
name|ConfigurationParameters
operator|.
name|EMPTY
decl_stmt|;
specifier|private
name|RootProvider
name|rootProvider
decl_stmt|;
specifier|private
name|TreeProvider
name|treeProvider
decl_stmt|;
comment|/**      * osgi constructor      */
specifier|public
name|ConfigurationBase
parameter_list|()
block|{     }
comment|/**      * non-osgi constructor      */
specifier|public
name|ConfigurationBase
parameter_list|(
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|public
name|SecurityProvider
name|getSecurityProvider
parameter_list|()
block|{
if|if
condition|(
name|securityProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
return|return
name|securityProvider
return|;
block|}
specifier|public
name|void
name|setSecurityProvider
parameter_list|(
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
annotation|@
name|NotNull
name|ConfigurationParameters
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|void
name|setRootProvider
parameter_list|(
annotation|@
name|NotNull
name|RootProvider
name|rootProvider
parameter_list|)
block|{
name|this
operator|.
name|rootProvider
operator|=
name|rootProvider
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|public
name|RootProvider
name|getRootProvider
parameter_list|()
block|{
if|if
condition|(
name|rootProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RootProvider missing."
argument_list|)
throw|;
block|}
return|return
name|rootProvider
return|;
block|}
specifier|public
name|void
name|setTreeProvider
parameter_list|(
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
name|this
operator|.
name|treeProvider
operator|=
name|treeProvider
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|public
name|TreeProvider
name|getTreeProvider
parameter_list|()
block|{
if|if
condition|(
name|treeProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"TreeProvider missing."
argument_list|)
throw|;
block|}
return|return
name|treeProvider
return|;
block|}
comment|//----------------------------------------------< SecurityConfiguration>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

