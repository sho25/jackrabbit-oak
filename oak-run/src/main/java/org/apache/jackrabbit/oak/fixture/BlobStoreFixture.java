begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|cm
operator|.
name|file
operator|.
name|ConfigurationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|FileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|DataStoreUtils
operator|.
name|cleanup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|DataStoreUtils
operator|.
name|configureIfS3DataStore
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BlobStoreFixture
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|String
name|unique
decl_stmt|;
specifier|public
name|BlobStoreFixture
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|unique
operator|=
name|getUniqueName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|BlobStore
name|setUp
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|tearDown
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|long
name|size
parameter_list|()
function_decl|;
specifier|public
name|void
name|close
parameter_list|()
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates an instance of the BlobStoreFixture based on configuration      * determined from system properties      *      * @param basedir directory to be used in case of file based BlobStore      * @param fallbackToFDS if true then FileDataStore would be used in absence of      *                      any explicitly defined BlobStore      */
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|BlobStoreFixture
name|create
parameter_list|(
name|File
name|basedir
parameter_list|,
name|boolean
name|fallbackToFDS
parameter_list|,
name|int
name|fdsCacheInMB
parameter_list|,
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
name|FileUtils
operator|.
name|getTempDirectory
argument_list|()
expr_stmt|;
block|}
name|String
name|className
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dataStore"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
return|return
name|getDataStore
argument_list|(
name|basedir
argument_list|,
name|fdsCacheInMB
argument_list|)
return|;
block|}
name|String
name|blobStore
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"blobStoreType"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"FDS"
operator|.
name|equals
argument_list|(
name|blobStore
argument_list|)
operator|||
operator|(
name|blobStore
operator|==
literal|null
operator|&&
name|fallbackToFDS
operator|)
condition|)
block|{
return|return
name|getFileDataStore
argument_list|(
name|basedir
argument_list|,
name|DataStoreBlobStore
operator|.
name|DEFAULT_CACHE_SIZE
argument_list|,
name|statisticsProvider
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"FBS"
operator|.
name|equals
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
return|return
name|getFileBlobStore
argument_list|(
name|basedir
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"MEM"
operator|.
name|equals
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
return|return
name|getMemoryBlobStore
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|BlobStoreFixture
name|getFileDataStore
parameter_list|(
specifier|final
name|File
name|basedir
parameter_list|,
specifier|final
name|int
name|fdsCacheInMB
parameter_list|,
specifier|final
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
return|return
operator|new
name|BlobStoreFixture
argument_list|(
literal|"FDS"
argument_list|)
block|{
specifier|private
name|File
name|storeDir
decl_stmt|;
specifier|private
name|FileDataStore
name|fds
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BlobStore
name|setUp
parameter_list|()
block|{
name|fds
operator|=
operator|new
name|FileDataStore
argument_list|()
expr_stmt|;
name|fds
operator|.
name|setMinRecordLength
argument_list|(
literal|4092
argument_list|)
expr_stmt|;
name|storeDir
operator|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|unique
argument_list|)
expr_stmt|;
name|fds
operator|.
name|init
argument_list|(
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configure
argument_list|(
name|fds
argument_list|)
expr_stmt|;
name|DataStoreBlobStore
name|bs
init|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|fds
argument_list|,
literal|true
argument_list|,
name|fdsCacheInMB
argument_list|)
decl_stmt|;
name|bs
operator|.
name|setBlobStatsCollector
argument_list|(
operator|new
name|BlobStoreStats
argument_list|(
name|statisticsProvider
argument_list|)
argument_list|)
expr_stmt|;
name|configure
argument_list|(
name|bs
argument_list|)
expr_stmt|;
return|return
name|bs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|fds
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|storeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
name|storeDir
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BlobStoreFixture
name|getFileBlobStore
parameter_list|(
specifier|final
name|File
name|basedir
parameter_list|)
block|{
return|return
operator|new
name|BlobStoreFixture
argument_list|(
literal|"FBS"
argument_list|)
block|{
specifier|private
name|File
name|storeDir
decl_stmt|;
specifier|private
name|FileBlobStore
name|fbs
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BlobStore
name|setUp
parameter_list|()
block|{
name|storeDir
operator|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|unique
argument_list|)
expr_stmt|;
name|fbs
operator|=
operator|new
name|FileBlobStore
argument_list|(
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configure
argument_list|(
name|fbs
argument_list|)
expr_stmt|;
return|return
name|fbs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|storeDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
name|storeDir
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BlobStoreFixture
name|getMemoryBlobStore
parameter_list|()
block|{
return|return
operator|new
name|BlobStoreFixture
argument_list|(
literal|"MEM"
argument_list|)
block|{
specifier|private
name|MemoryBlobStore
name|mbs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BlobStore
name|setUp
parameter_list|()
block|{
return|return
name|mbs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{              }
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Implementation pending"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BlobStoreFixture
name|getDataStore
parameter_list|(
specifier|final
name|File
name|basedir
parameter_list|,
specifier|final
name|int
name|fdsCacheInMB
parameter_list|)
block|{
return|return
operator|new
name|BlobStoreFixture
argument_list|(
literal|"DS"
argument_list|)
block|{
specifier|private
name|DataStore
name|dataStore
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|File
name|storeDir
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BlobStore
name|setUp
parameter_list|()
block|{
name|String
name|className
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dataStore"
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|className
argument_list|,
literal|"No system property named 'dataStore' defined"
argument_list|)
expr_stmt|;
try|try
block|{
name|dataStore
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|DataStore
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|config
operator|=
name|getConfig
argument_list|()
expr_stmt|;
name|configure
argument_list|(
name|dataStore
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|dataStore
operator|=
name|configureIfS3DataStore
argument_list|(
name|className
argument_list|,
name|dataStore
argument_list|,
name|config
argument_list|,
name|unique
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|storeDir
operator|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|unique
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|init
argument_list|(
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|dataStore
argument_list|,
literal|true
argument_list|,
name|fdsCacheInMB
argument_list|)
expr_stmt|;
name|configure
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
return|return
name|blobStore
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot instantiate DataStore "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|blobStore
operator|instanceof
name|DataStoreBlobStore
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|DataStoreBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|cleanup
argument_list|(
name|storeDir
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Implementation pending"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|//~------------------------------------------------< utility>
specifier|private
specifier|static
name|String
name|getUniqueName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%d"
argument_list|,
name|name
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|configure
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|o
argument_list|,
name|getConfig
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|configure
parameter_list|(
name|Object
name|o
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|PropertiesUtil
operator|.
name|populate
argument_list|(
name|o
argument_list|,
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|loadAndTransformProps
parameter_list|(
name|String
name|cfgPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Dictionary
name|dict
init|=
name|ConfigurationHandler
operator|.
name|read
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|cfgPath
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Enumeration
name|keys
init|=
name|dict
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dict
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getConfig
parameter_list|()
block|{
comment|// try loading the props from the config file if configured
name|String
name|cfgFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"ds.config"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|cfgFile
argument_list|)
condition|)
block|{
try|try
block|{
name|result
operator|=
name|loadAndTransformProps
argument_list|(
name|cfgFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|e
range|:
name|Maps
operator|.
name|fromProperties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"ds."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"bs."
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//length of bs.
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

