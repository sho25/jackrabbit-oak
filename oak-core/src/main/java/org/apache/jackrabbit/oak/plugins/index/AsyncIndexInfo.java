begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexInfo
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|long
name|lastIndexedTo
decl_stmt|;
specifier|private
specifier|final
name|long
name|leaseExpiryTime
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|running
decl_stmt|;
specifier|private
specifier|final
name|IndexStatsMBean
name|statsMBean
decl_stmt|;
specifier|public
name|AsyncIndexInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|lastIndexedTo
parameter_list|,
name|long
name|leaseExpiryTime
parameter_list|,
name|boolean
name|running
parameter_list|,
annotation|@
name|Nullable
name|IndexStatsMBean
name|statsMBean
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastIndexedTo
operator|=
name|lastIndexedTo
expr_stmt|;
name|this
operator|.
name|leaseExpiryTime
operator|=
name|leaseExpiryTime
expr_stmt|;
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
name|this
operator|.
name|statsMBean
operator|=
name|statsMBean
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Time in millis upto which the repository state is indexed via      * this indexer      */
specifier|public
name|long
name|getLastIndexedTo
parameter_list|()
block|{
return|return
name|lastIndexedTo
return|;
block|}
comment|/**      * Time in millis at which the current help lease would expire if      * indexing is in progress. If indexing is not in progress then its      * value would be -1      */
specifier|public
name|long
name|getLeaseExpiryTime
parameter_list|()
block|{
return|return
name|leaseExpiryTime
return|;
block|}
comment|/**      * Returns true if the async indexer is currently active      */
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
comment|/**      * IndexStatsMBean for current indexer. The MBean would be      * returning valid values only for that cluster node where      * the async indexer is active. For other cluster nodes      * the values may not reflect the current state      */
annotation|@
name|CheckForNull
specifier|public
name|IndexStatsMBean
name|getStatsMBean
parameter_list|()
block|{
return|return
name|statsMBean
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s : lastIndexedTo :%tc, leaseExpiryTime :%tc, running :%s"
argument_list|,
name|name
argument_list|,
name|lastIndexedTo
argument_list|,
name|leaseExpiryTime
argument_list|,
name|running
argument_list|)
return|;
block|}
block|}
end_class

end_unit

