begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|scenarios
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Chronometer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Committer
import|;
end_import

begin_class
specifier|public
class|class
name|MicroKernelMultipleCommits
block|{
specifier|public
specifier|static
name|void
name|writeNodesAllNodes1Commit
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|diff
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
block|{
name|Committer
name|commiter
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|commiter
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodesAllNodes1Commit is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeNodes1NodePerCommit
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|diff
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
block|{
name|Committer
name|commiter
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|commiter
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes1NodePerCommit is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeNodes50NodesPerCommit
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|diff
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
block|{
name|Committer
name|commiter
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|commiter
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes50NodesPerCommit is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeNodes1000NodesPerCommit
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|diff
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|)
block|{
name|Committer
name|commiter
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|commiter
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes1000NodesPerCommit is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

