begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Tests large group and user graphs.  *  *<ul>  *<li>{@link #NUM_USERS} users</li>  *<li>{@link #NUM_GROUPS} groups</li>  *<li>1 group with all users</li>  *<li>1 user with all groups</li>   *</ul>  *  * @since OAK 1.0  */
end_comment

begin_class
specifier|public
class|class
name|MembershipTest
extends|extends
name|MembershipBaseTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MANY_USERS
init|=
literal|1000
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyMemberships
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|memberships
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_USERS
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iter
init|=
name|usr
operator|.
name|declaredMemberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|memberships
operator|.
name|remove
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memberships
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|declaredMembers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|declaredMembers
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g1
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|g2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10
condition|;
name|k
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertMembers
argument_list|(
name|grp
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|iter
init|=
name|grp
operator|.
name|getDeclaredMembers
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Authorizable
name|member
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|declaredMembers
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|declaredMembers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedMemberships
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|memberships
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|createUser
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|grp
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g1
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|g1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Group
name|g2
init|=
name|createGroup
argument_list|()
decl_stmt|;
name|g1
operator|.
name|addMember
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|memberships
operator|.
name|add
argument_list|(
name|g2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|g2
operator|.
name|addMember
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iter
init|=
name|user
operator|.
name|memberOf
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Group
name|group
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|memberships
operator|.
name|remove
argument_list|(
name|group
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memberships
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMembersAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Group
name|grp
init|=
name|createGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_USERS
condition|;
name|i
operator|++
control|)
block|{
name|User
name|usr
init|=
name|createUser
argument_list|()
decl_stmt|;
name|grp
operator|.
name|addMember
argument_list|(
name|usr
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|usr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|members
control|)
block|{
name|assertFalse
argument_list|(
name|grp
operator|.
name|addMember
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

