begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TapeSamplingTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWithHighestRandom
parameter_list|()
block|{
specifier|final
name|int
name|start
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|30
decl_stmt|;
specifier|final
name|int
name|k
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|TapeSampling
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|TapeSampling
argument_list|<>
argument_list|(
name|r
argument_list|,
name|input
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|samples
init|=
name|newArrayList
argument_list|(
name|res
operator|.
name|getSamples
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|range
argument_list|(
name|end
operator|-
name|k
operator|+
literal|1
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithLowestRandom
parameter_list|()
block|{
specifier|final
name|int
name|start
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|30
decl_stmt|;
specifier|final
name|int
name|k
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|TapeSampling
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|TapeSampling
argument_list|<>
argument_list|(
name|r
argument_list|,
name|input
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|samples
init|=
name|newArrayList
argument_list|(
name|res
operator|.
name|getSamples
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|range
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|k
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allItemsWhenKisN
parameter_list|()
block|{
specifier|final
name|int
name|start
init|=
literal|11
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|k
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|TapeSampling
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|TapeSampling
argument_list|<>
argument_list|(
name|r
argument_list|,
name|input
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|samples
init|=
name|newArrayList
argument_list|(
name|res
operator|.
name|getSamples
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|input
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sampleExactlyK
parameter_list|()
block|{
specifier|final
name|int
name|start
init|=
literal|11
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|k
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|TapeSampling
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|TapeSampling
argument_list|<>
argument_list|(
name|r
argument_list|,
name|input
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Must sample exactly "
operator|+
name|k
operator|+
literal|" items"
argument_list|,
name|k
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|res
operator|.
name|getSamples
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sampleBias
parameter_list|()
block|{
name|int
name|size
init|=
literal|200
decl_stmt|;
name|int
name|k
init|=
literal|20
decl_stmt|;
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|int
name|testCount
init|=
literal|100
operator|*
name|size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|range
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|TapeSampling
argument_list|<
name|Integer
argument_list|>
name|res
init|=
operator|new
name|TapeSampling
argument_list|<>
argument_list|(
name|r
argument_list|,
name|input
operator|.
name|iterator
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|res
operator|.
name|getSamples
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|counts
index|[
name|it
operator|.
name|next
argument_list|()
index|]
operator|++
expr_stmt|;
block|}
block|}
name|int
name|expectedCount
init|=
name|testCount
operator|/
operator|(
name|size
operator|/
name|k
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|counts
index|[
name|i
index|]
operator|>
name|expectedCount
operator|*
literal|0.9
operator|&&
name|counts
index|[
name|i
index|]
operator|<
name|expectedCount
operator|*
literal|1.1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|(
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
operator|new
name|AbstractIterator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
name|int
name|curr
init|=
name|start
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Integer
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|curr
operator|>
name|end
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
return|return
name|curr
operator|++
return|;
block|}
block|}
decl_stmt|;
return|return
name|newArrayList
argument_list|(
name|iter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

