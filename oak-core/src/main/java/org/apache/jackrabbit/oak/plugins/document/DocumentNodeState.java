begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ModifiedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_comment
comment|/**  * A {@link NodeState} implementation for the {@link DocumentNodeStore}.  * TODO: merge DocumentNodeState with Node  */
end_comment

begin_class
specifier|final
class|class
name|DocumentNodeState
extends|extends
name|AbstractNodeState
block|{
comment|/**      * The number of child nodes to fetch initially.      */
specifier|static
specifier|final
name|int
name|INITIAL_FETCH_SIZE
init|=
literal|100
decl_stmt|;
comment|/**      * The maximum number of child nodes to fetch in one call. (1600).      */
specifier|static
specifier|final
name|int
name|MAX_FETCH_SIZE
init|=
name|INITIAL_FETCH_SIZE
operator|<<
literal|4
decl_stmt|;
comment|/**      * Number of child nodes beyond which {@link DocumentNodeStore#}      * is used for diffing.      */
specifier|public
specifier|static
specifier|final
name|int
name|LOCAL_DIFF_THRESHOLD
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
comment|/**      * TODO: OAK-1056      */
specifier|private
name|boolean
name|isBranch
decl_stmt|;
name|DocumentNodeState
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|store
parameter_list|,
annotation|@
name|Nonnull
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|checkNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|String
name|getPath
parameter_list|()
block|{
return|return
name|node
operator|.
name|getPath
argument_list|()
return|;
block|}
name|Revision
name|getRevision
parameter_list|()
block|{
return|return
name|node
operator|.
name|getReadRevision
argument_list|()
return|;
block|}
name|DocumentNodeState
name|setBranch
parameter_list|()
block|{
name|isBranch
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|isBranch
parameter_list|()
block|{
return|return
name|isBranch
return|;
block|}
comment|//--------------------------< NodeState>-----------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|that
operator|instanceof
name|DocumentNodeState
condition|)
block|{
name|DocumentNodeState
name|other
init|=
operator|(
name|DocumentNodeState
operator|)
name|that
decl_stmt|;
if|if
condition|(
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|node
operator|.
name|getLastRevision
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|that
operator|instanceof
name|ModifiedNodeState
condition|)
block|{
name|ModifiedNodeState
name|modified
init|=
operator|(
name|ModifiedNodeState
operator|)
name|that
decl_stmt|;
if|if
condition|(
name|modified
operator|.
name|getBaseState
argument_list|()
operator|==
name|this
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|that
operator|instanceof
name|NodeState
condition|)
block|{
return|return
name|AbstractNodeState
operator|.
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|NodeState
operator|)
name|that
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|node
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DocumentPropertyState
argument_list|(
name|store
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|node
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|node
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyState
name|apply
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
name|EmptyNodeState
operator|.
name|MISSING_NODE
return|;
block|}
name|String
name|p
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|store
operator|.
name|getNode
argument_list|(
name|p
argument_list|,
name|node
operator|.
name|getLastRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
return|return
name|EmptyNodeState
operator|.
name|MISSING_NODE
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|max
operator|>
name|DocumentNodeStore
operator|.
name|NUM_CHILDREN_CACHE_LIMIT
condition|)
block|{
comment|// count all
return|return
name|Iterators
operator|.
name|size
argument_list|(
operator|new
name|ChildNodeEntryIterator
argument_list|()
argument_list|)
return|;
block|}
name|Node
operator|.
name|Children
name|c
init|=
name|store
operator|.
name|getChildren
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
operator|(
name|int
operator|)
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|hasMore
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
else|else
block|{
comment|// we know the exact value
return|return
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
if|if
condition|(
name|node
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ChildNodeEntryIterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeBuilder
name|builder
parameter_list|()
block|{
if|if
condition|(
name|isBranch
condition|)
block|{
return|return
operator|new
name|MemoryNodeBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|DocumentRootBuilder
argument_list|(
name|this
argument_list|,
name|store
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MemoryNodeBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareAgainstBaseState
parameter_list|(
name|NodeState
name|base
parameter_list|,
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|base
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|==
name|EMPTY_NODE
operator|||
operator|!
name|base
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// special case
return|return
name|EmptyNodeState
operator|.
name|compareAgainstEmptyState
argument_list|(
name|this
argument_list|,
name|diff
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|DocumentNodeState
condition|)
block|{
name|DocumentNodeState
name|mBase
init|=
operator|(
name|DocumentNodeState
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|store
operator|==
name|mBase
operator|.
name|store
condition|)
block|{
if|if
condition|(
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|mBase
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|mBase
operator|.
name|node
operator|.
name|getLastRevision
argument_list|()
argument_list|)
condition|)
block|{
comment|// no differences
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|getChildNodeCount
argument_list|(
name|LOCAL_DIFF_THRESHOLD
argument_list|)
operator|>
name|LOCAL_DIFF_THRESHOLD
condition|)
block|{
comment|// use DocumentNodeStore compare when there are many children
return|return
name|dispatch
argument_list|(
name|store
operator|.
name|diffChildren
argument_list|(
name|this
operator|.
name|node
argument_list|,
name|mBase
operator|.
name|node
argument_list|)
argument_list|,
name|mBase
argument_list|,
name|diff
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// fall back to the generic node state diff algorithm
return|return
name|super
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|diff
argument_list|)
return|;
block|}
comment|//------------------------------< internal>--------------------------------
specifier|private
name|boolean
name|dispatch
parameter_list|(
annotation|@
name|Nonnull
name|String
name|jsonDiff
parameter_list|,
annotation|@
name|Nonnull
name|DocumentNodeState
name|base
parameter_list|,
annotation|@
name|Nonnull
name|NodeStateDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
operator|!
name|AbstractNodeState
operator|.
name|comparePropertiesAgainstBaseState
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|diff
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|jsonDiff
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonDiff
argument_list|)
decl_stmt|;
name|boolean
name|continueComparison
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|continueComparison
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|String
name|path
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|read
argument_list|()
operator|!=
literal|'}'
condition|)
block|{
comment|// skip properties
block|}
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|String
name|path
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|String
name|path
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'{'
argument_list|)
condition|)
block|{
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|'['
argument_list|)
condition|)
block|{
comment|// ignore multi valued property
while|while
condition|(
name|t
operator|.
name|read
argument_list|()
operator|!=
literal|']'
condition|)
block|{
comment|// skip values
block|}
block|}
else|else
block|{
comment|// ignore single valued property
name|t
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'>'
case|:
block|{
name|String
name|from
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|fromName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|fromName
argument_list|,
name|base
operator|.
name|getChildNode
argument_list|(
name|fromName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|continueComparison
condition|)
block|{
break|break;
block|}
name|String
name|toName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|toName
argument_list|,
name|getChildNode
argument_list|(
name|toName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"jsonDiff: illegal token '"
operator|+
name|t
operator|.
name|getToken
argument_list|()
operator|+
literal|"' at pos: "
operator|+
name|t
operator|.
name|getLastPos
argument_list|()
operator|+
literal|' '
operator|+
name|jsonDiff
argument_list|)
throw|;
block|}
block|}
return|return
name|continueComparison
return|;
block|}
comment|/**      * Returns up to {@code limit} child node entries, starting after the given      * {@code name}.      *      * @param name the name of the lower bound child node entry (exclusive) or      *             {@code null}, if the method should start with the first known      *             child node.      * @param limit the maximum number of child node entries to return.      * @return the child node entries.      */
annotation|@
name|Nonnull
specifier|private
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Iterable
argument_list|<
name|Node
argument_list|>
name|children
init|=
name|store
operator|.
name|getChildNodes
argument_list|(
name|node
argument_list|,
name|name
argument_list|,
name|limit
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|children
argument_list|,
operator|new
name|Function
argument_list|<
name|Node
argument_list|,
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|apply
parameter_list|(
specifier|final
name|Node
name|input
parameter_list|)
block|{
return|return
operator|new
name|AbstractChildNodeEntry
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|PathUtils
operator|.
name|getName
argument_list|(
name|input
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getNodeState
parameter_list|()
block|{
return|return
operator|new
name|DocumentNodeState
argument_list|(
name|store
argument_list|,
name|input
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
class|class
name|ChildNodeEntryIterator
implements|implements
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
block|{
specifier|private
name|String
name|previousName
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|current
decl_stmt|;
specifier|private
name|int
name|fetchSize
init|=
name|INITIAL_FETCH_SIZE
decl_stmt|;
specifier|private
name|int
name|currentRemaining
init|=
name|fetchSize
decl_stmt|;
name|ChildNodeEntryIterator
parameter_list|()
block|{
name|fetchMore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|currentRemaining
operator|>
literal|0
condition|)
block|{
comment|// current returned less than fetchSize
return|return
literal|false
return|;
block|}
name|fetchMore
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|ChildNodeEntry
name|entry
init|=
name|current
operator|.
name|next
argument_list|()
decl_stmt|;
name|previousName
operator|=
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
name|currentRemaining
operator|--
expr_stmt|;
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|void
name|fetchMore
parameter_list|()
block|{
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|entries
init|=
name|getChildNodeEntries
argument_list|(
name|previousName
argument_list|,
name|fetchSize
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|currentRemaining
operator|=
name|fetchSize
expr_stmt|;
name|fetchSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fetchSize
operator|*
literal|2
argument_list|,
name|MAX_FETCH_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|entries
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

