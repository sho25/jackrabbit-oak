begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Concurrently calls Session#hasPermission on the deep tree:  * - the path argument a random path out of the deep tree  * - the actions are randomly selected from the combinations listed in {@link #ACTIONS}  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentHasPermissionTest
extends|extends
name|ConcurrentReadDeepTreeTest
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ACTIONS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_ADD_NODE
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_SET_PROPERTY
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_SET_PROPERTY
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
decl_stmt|;
specifier|protected
name|ConcurrentHasPermissionTest
parameter_list|(
name|boolean
name|runAsAdmin
parameter_list|,
name|int
name|itemsToRead
parameter_list|,
name|boolean
name|doReport
parameter_list|)
block|{
name|super
argument_list|(
name|runAsAdmin
argument_list|,
name|itemsToRead
argument_list|,
name|doReport
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|randomRead
parameter_list|(
name|Session
name|testSession
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allPaths
parameter_list|,
name|int
name|cnt
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|logout
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|testSession
operator|==
literal|null
condition|)
block|{
name|testSession
operator|=
name|getTestSession
argument_list|()
expr_stmt|;
name|logout
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|int
name|allows
init|=
literal|0
decl_stmt|;
name|int
name|denies
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|allPaths
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|double
name|rand
init|=
name|size
operator|*
name|Math
operator|.
name|random
argument_list|()
decl_stmt|;
name|int
name|index
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|allPaths
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|actions
init|=
name|getRandomActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|actions
argument_list|)
condition|)
block|{
name|allows
operator|++
expr_stmt|;
block|}
else|else
block|{
name|denies
operator|++
expr_stmt|;
block|}
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|doReport
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Session "
operator|+
name|testSession
operator|.
name|getUserID
argument_list|()
operator|+
literal|" calling #hasPermission (Allows: "
operator|+
name|allows
operator|+
literal|"; Denies: "
operator|+
name|denies
operator|+
literal|") completed in "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|logout
condition|)
block|{
name|logout
argument_list|(
name|testSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getRandomActions
parameter_list|()
block|{
name|int
name|index
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
literal|10
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ACTIONS
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

