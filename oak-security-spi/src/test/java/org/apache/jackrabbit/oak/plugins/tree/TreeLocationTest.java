begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TreeLocationTest
extends|extends
name|AbstractTreeTest
block|{
specifier|private
name|TreeLocation
name|nodeLocation
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|nodeLocation
operator|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|nodeLocation
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|CHILD_PATH
argument_list|)
argument_list|,
name|nodeLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|CHILD_PATH
argument_list|,
name|nodeLocation
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTree
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|child
argument_list|,
name|nodeLocation
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|nodeLocation
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|z
argument_list|,
name|nodeLocation
operator|.
name|getParent
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootTree
argument_list|,
name|nodeLocation
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChild
parameter_list|()
block|{
name|TreeLocation
name|propertyChild
init|=
name|nodeLocation
operator|.
name|getChild
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|PROPERTY_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|propertyChild
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|propertyChild
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|nodeLocation
operator|.
name|getParent
argument_list|()
operator|.
name|getChild
argument_list|(
name|nodeLocation
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNonExistingChild
parameter_list|()
block|{
name|TreeLocation
name|location
init|=
name|nodeLocation
operator|.
name|getChild
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|NON_EXISTING_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|location
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|when
argument_list|(
name|child
operator|.
name|remove
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeLocation
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|child
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove2
parameter_list|()
block|{
name|when
argument_list|(
name|child
operator|.
name|remove
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeLocation
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|child
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNonExisting
parameter_list|()
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|NON_EXISTING_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|location
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Text
operator|.
name|getName
argument_list|(
name|NON_EXISTING_PATH
argument_list|)
argument_list|,
name|nonExisting
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NON_EXISTING_PATH
argument_list|,
name|nonExisting
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNonExisting
parameter_list|()
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|NON_EXISTING_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|location
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nonExisting
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|rootTree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|rootTree
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|location
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

