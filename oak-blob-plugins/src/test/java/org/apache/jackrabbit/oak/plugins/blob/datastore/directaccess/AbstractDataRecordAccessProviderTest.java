begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
operator|.
name|toByteArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
operator|.
name|randomStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDataRecordAccessProviderTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractDataRecordAccessProviderTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|abstract
name|ConfigurableDataRecordAccessProvider
name|getDataStore
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|long
name|getProviderMinPartSize
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|long
name|getProviderMaxPartSize
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|long
name|getProviderMaxSinglePutSize
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|long
name|getProviderMaxBinaryUploadSize
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isSinglePutURI
parameter_list|(
name|URI
name|url
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|HttpsURLConnection
name|getHttpsConnection
parameter_list|(
name|long
name|length
parameter_list|,
name|URI
name|url
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|DataRecord
name|doGetRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
specifier|protected
specifier|abstract
name|DataRecord
name|doSynchronousAddRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|doDeleteRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
function_decl|;
specifier|protected
specifier|static
name|int
name|expirySeconds
init|=
literal|60
operator|*
literal|15
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_KB
init|=
literal|1024
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_MB
init|=
name|ONE_KB
operator|*
name|ONE_KB
decl_stmt|;
specifier|protected
specifier|static
name|long
name|TEN_MB
init|=
name|ONE_MB
operator|*
literal|10
decl_stmt|;
specifier|protected
specifier|static
name|long
name|TWENTY_MB
init|=
name|ONE_MB
operator|*
literal|20
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_HUNDRED_MB
init|=
name|ONE_MB
operator|*
literal|100
decl_stmt|;
specifier|protected
specifier|static
name|long
name|FIVE_HUNDRED_MB
init|=
name|ONE_HUNDRED_MB
operator|*
literal|5
decl_stmt|;
specifier|protected
specifier|static
name|long
name|ONE_GB
init|=
name|ONE_HUNDRED_MB
operator|*
literal|10
decl_stmt|;
specifier|protected
specifier|static
name|long
name|FIVE_GB
init|=
name|ONE_GB
operator|*
literal|5
decl_stmt|;
comment|//
comment|// Direct download tests
comment|//
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIProvidesValidURIIT
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
name|ConfigurableDataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|testStream
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|record
operator|=
name|doSynchronousAddRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|testStream
argument_list|)
expr_stmt|;
name|DataIdentifier
name|id
init|=
name|record
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|getDataStore
argument_list|()
operator|.
name|getDownloadURI
argument_list|(
name|id
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|record
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIRequiresValidIdentifier
parameter_list|()
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|getDownloadURI
argument_list|(
literal|null
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIRequiresValidDownloadOptions
parameter_list|()
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|getDownloadURI
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
literal|"testIdentifier"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIExpirationOfZeroFails
parameter_list|()
block|{
name|ConfigurableDataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|dataStore
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dataStore
operator|.
name|getDownloadURI
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
literal|"testIdentifier"
argument_list|)
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dataStore
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|expirySeconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIIT
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
name|DataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|testStream
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|record
operator|=
name|doSynchronousAddRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|testStream
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|dataStore
operator|.
name|getDownloadURI
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|HttpsURLConnection
name|conn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|testStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toByteArray
argument_list|(
name|testStream
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|record
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURIWithCustomHeadersIT
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
name|DataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|testStream
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|record
operator|=
name|doSynchronousAddRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|testStream
argument_list|)
expr_stmt|;
name|String
name|mimeType
init|=
literal|"image/png"
decl_stmt|;
name|String
name|fileName
init|=
literal|"album cover.png"
decl_stmt|;
name|String
name|encodedFileName
init|=
literal|"album%20cover.png"
decl_stmt|;
name|String
name|dispositionType
init|=
literal|"inline"
decl_stmt|;
name|DataRecordDownloadOptions
name|downloadOptions
init|=
name|DataRecordDownloadOptions
operator|.
name|fromBlobDownloadOptions
argument_list|(
operator|new
name|BlobDownloadOptions
argument_list|(
name|mimeType
argument_list|,
literal|null
argument_list|,
name|fileName
argument_list|,
name|dispositionType
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|dataStore
operator|.
name|getDownloadURI
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|downloadOptions
argument_list|)
decl_stmt|;
name|HttpsURLConnection
name|conn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mimeType
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
comment|//            This proper behavior is disabled due to https://github.com/Azure/azure-sdk-for-java/issues/2900
comment|//            (see also https://issues.apache.org/jira/browse/OAK-8013).  We can re-enable the full test
comment|//            once the issue is resolved.  -MR
comment|//            assertEquals(
comment|//                    String.format("%s; filename=\"%s\"; filename*=UTF-8''%s",
comment|//                            dispositionType, fileName,
comment|//                            new String(encodedFileName.getBytes(StandardCharsets.UTF_8))
comment|//                    ),
comment|//                    conn.getHeaderField("Content-Disposition")
comment|//            );
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s; filename=\"%s\""
argument_list|,
name|dispositionType
argument_list|,
name|fileName
argument_list|)
argument_list|,
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Disposition"
argument_list|)
argument_list|)
expr_stmt|;
name|testStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toByteArray
argument_list|(
name|testStream
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|record
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetExpiredReadURIFailsIT
parameter_list|()
throws|throws
name|DataStoreException
throws|,
name|IOException
block|{
name|DataRecord
name|record
init|=
literal|null
decl_stmt|;
name|ConfigurableDataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|dataStore
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|record
operator|=
name|doSynchronousAddRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|dataStore
operator|.
name|getDownloadURI
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
name|HttpsURLConnection
name|conn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|record
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataStore
operator|.
name|setDirectDownloadURIExpirySeconds
argument_list|(
name|expirySeconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDownloadURINonexistentBlobFailsIT
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|ConfigurableDataRecordAccessProvider
name|dataStore
init|=
name|getDataStore
argument_list|()
decl_stmt|;
name|InputStream
name|testStream
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|DataRecord
name|record
init|=
name|doSynchronousAddRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|testStream
argument_list|)
decl_stmt|;
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|dataStore
argument_list|,
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|dataStore
operator|.
name|getDownloadURI
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Direct upload tests
comment|//
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadReturnsValidUploadContext
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_MB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uploadContext
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uploadContext
operator|.
name|getMinPartSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uploadContext
operator|.
name|getMinPartSize
argument_list|()
operator|>=
name|getProviderMinPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uploadContext
operator|.
name|getMaxPartSize
argument_list|()
operator|>=
name|uploadContext
operator|.
name|getMinPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uploadContext
operator|.
name|getMaxPartSize
argument_list|()
operator|<=
name|getProviderMaxPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|uploadContext
operator|.
name|getMaxPartSize
argument_list|()
operator|*
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|>=
name|ONE_MB
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|uploadContext
operator|.
name|getUploadToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadRequiresNonzeroFileSize
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadRequiresNonzeroNumURIs
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadRequiresNonNegativeNumURIs
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_MB
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
comment|// -1 is allowed which means any number of URIs
try|try
block|{
name|assertNotNull
argument_list|(
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_HUNDRED_MB
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadSingleURIRequested
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|TWENTY_MB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSinglePutURI
argument_list|(
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadSizeLowerThanMinPartSize
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|getProviderMinPartSize
argument_list|()
operator|-
literal|1L
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSinglePutURI
argument_list|(
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadMultiPartDisabled
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|ConfigurableDataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|ds
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|TWENTY_MB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uploadContext
operator|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
literal|20
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ds
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|expirySeconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadURIListSizes
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|DataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
for|for
control|(
name|InitUploadResult
name|res
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
comment|// 20MB upload and 10 URIs requested => should result in 2 URIs (10MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|TWENTY_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 100MB upload and 10 URIs requested => should result in 10 URIs (10MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|ONE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 100MB upload and 5 URIs requested => should result in 5 URIs (20MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|ONE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 500MB upload and 50 URIs requested => should result in 50 URIs (10MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|FIVE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 500MB upload and 10 URIs requested => should result in 10 URIs (50MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|FIVE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 500MB upload and 60 URIs requested => should result in 50 uls (10MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|FIVE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|60
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 500MB upload and 5 URIs requested => should result in 5 URIs (100MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|FIVE_HUNDRED_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 1GB upload and 10 URIs requested => should result in 10 URIs (100MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|ONE_GB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|,
comment|// 5GB upload and 50 URIs requested => should result in 50 URIs (100MB each)
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|FIVE_GB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|getProviderMinPartSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|)
control|)
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed for upload size: %d, num URIs %d"
argument_list|,
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|getExpectedNumURIs
argument_list|()
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed for upload size: %d, num URIs %d"
argument_list|,
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|getExpectedMinPartSize
argument_list|()
argument_list|,
name|uploadContext
operator|.
name|getMinPartSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed for upload size: %d, num URIs %d"
argument_list|,
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|getExpectedMaxPartSize
argument_list|()
argument_list|,
name|uploadContext
operator|.
name|getMaxPartSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadSizeTooBigForSinglePut
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|getProviderMaxSinglePutSize
argument_list|()
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadSizeTooBigForUpload
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|getProviderMaxBinaryUploadSize
argument_list|()
operator|+
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInititateDirectUploadRequestedPartSizesTooBig
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|FIVE_GB
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteDirectUploadRequiresNonNullToken
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|DataStoreException
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|completeDataRecordUpload
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteDirectUploadRequiresValidToken
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|DataStoreException
block|{
for|for
control|(
name|String
name|token
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|""
argument_list|,
literal|"abc"
argument_list|,
literal|"abc#123"
argument_list|)
control|)
block|{
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|completeDataRecordUpload
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteDirectUploadSignatureMustMatch
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|DataStoreException
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|getDataStore
argument_list|()
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_MB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Pull the blob id out and modify it
name|String
name|uploadToken
init|=
name|uploadContext
operator|.
name|getUploadToken
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|uploadToken
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|tokenPart
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|sigPart
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|String
index|[]
name|subParts
init|=
name|tokenPart
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|blobId
init|=
name|subParts
index|[
literal|0
index|]
decl_stmt|;
name|char
name|c
init|=
call|(
name|char
call|)
argument_list|(
call|(
name|int
call|)
argument_list|(
name|blobId
operator|.
name|charAt
argument_list|(
name|blobId
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|blobId
operator|=
name|blobId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blobId
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|c
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|subParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blobId
operator|+=
literal|"#"
operator|+
name|subParts
index|[
name|i
index|]
expr_stmt|;
block|}
name|String
name|newToken
init|=
name|Base64
operator|.
name|encode
argument_list|(
name|blobId
argument_list|)
operator|+
literal|"#"
operator|+
name|sigPart
decl_stmt|;
try|try
block|{
name|getDataStore
argument_list|()
operator|.
name|completeDataRecordUpload
argument_list|(
name|newToken
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSinglePutDirectUploadIT
parameter_list|()
throws|throws
name|DataRecordUploadException
throws|,
name|DataStoreException
throws|,
name|IOException
block|{
name|DataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
for|for
control|(
name|InitUploadResult
name|res
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|InitUploadResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getUploadSize
parameter_list|()
block|{
return|return
name|ONE_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNumURIs
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExpectedNumURIs
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMinPartSize
parameter_list|()
block|{
return|return
name|TEN_MB
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpectedMaxPartSize
parameter_list|()
block|{
return|return
name|getProviderMaxPartSize
argument_list|()
return|;
block|}
block|}
argument_list|)
control|)
block|{
name|DataRecord
name|uploadedRecord
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|res
operator|.
name|getMaxNumURIs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getExpectedNumURIs
argument_list|()
argument_list|,
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|uploadStream
init|=
name|randomStream
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uploadURI
init|=
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|doHttpsUpload
argument_list|(
name|uploadStream
argument_list|,
name|res
operator|.
name|getUploadSize
argument_list|()
argument_list|,
name|uploadURI
argument_list|)
expr_stmt|;
name|uploadedRecord
operator|=
name|ds
operator|.
name|completeDataRecordUpload
argument_list|(
name|uploadContext
operator|.
name|getUploadToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|uploadedRecord
argument_list|)
expr_stmt|;
name|DataRecord
name|retrievedRecord
init|=
name|doGetRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|ds
argument_list|,
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|retrievedRecord
argument_list|)
expr_stmt|;
name|uploadStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toByteArray
argument_list|(
name|uploadStream
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|retrievedRecord
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|uploadedRecord
condition|)
block|{
name|doDeleteRecord
argument_list|(
operator|(
name|DataStore
operator|)
name|ds
argument_list|,
name|uploadedRecord
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseQueryString
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsed
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|uri
operator|.
name|getQuery
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|pair
range|:
name|query
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|kv
init|=
name|pair
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|parsed
operator|.
name|put
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"UnsupportedEncodingException caught"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|parsed
return|;
block|}
specifier|protected
name|void
name|doHttpsUpload
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpsURLConnection
name|conn
init|=
name|getHttpsConnection
argument_list|(
name|contentLength
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|responseCode
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|responseCode
operator|<
literal|400
argument_list|)
expr_stmt|;
block|}
interface|interface
name|InitUploadResult
block|{
name|long
name|getUploadSize
parameter_list|()
function_decl|;
name|int
name|getMaxNumURIs
parameter_list|()
function_decl|;
name|int
name|getExpectedNumURIs
parameter_list|()
function_decl|;
name|long
name|getExpectedMinPartSize
parameter_list|()
function_decl|;
name|long
name|getExpectedMaxPartSize
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

