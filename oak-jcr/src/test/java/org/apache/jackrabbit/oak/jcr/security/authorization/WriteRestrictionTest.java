begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|api
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * WriteRestrictionTest: tests add and remove node in combination with glob restrictions.  */
end_comment

begin_class
specifier|public
class|class
name|WriteRestrictionTest
extends|extends
name|AbstractEvaluationTest
block|{
specifier|private
name|String
name|nodePath3
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Node
name|node3
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName3
argument_list|)
decl_stmt|;
name|nodePath3
operator|=
name|node3
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|writeActions
init|=
name|getActions
argument_list|(
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: grants write priv to all nodeName3 children
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath2
argument_list|,
name|writeActions
argument_list|)
argument_list|)
expr_stmt|;
comment|// removal req. rmchildnode privilege on parent.
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|nodePath3
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|rmNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: grants write-priv to nodeName3 grand-children but not direct nodeName3 children.
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|nodePath3
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction3
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
comment|// permissions defined @ path
comment|// restriction: allows write to nodeName3 children
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
comment|// and grant add-node only at path (no glob restriction)
name|allow
argument_list|(
name|path
argument_list|,
name|addNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|addNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|nodePath3
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobRestriction4
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|addNode
init|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"/*"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|childNPath2
argument_list|,
name|addNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|path
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|hasPermission
argument_list|(
name|childNPath
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childNPath2
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|nodePath3
argument_list|,
name|repWritePrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubTreeWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny REMOVE_NODE privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubTreeWithRestriction2
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny REMOVE_NODE privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|Text
operator|.
name|getName
argument_list|(
name|childNPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|getNode
argument_list|(
name|childNPath
argument_list|)
operator|.
name|getNode
argument_list|(
name|nodeName3
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Removing child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSubTreeWithRestriction
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* allow READ/WRITE privilege for testUser at 'path' */
name|allow
argument_list|(
name|path
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|readWritePrivileges
argument_list|)
expr_stmt|;
comment|/* deny ADD_CHILD_NODES privileges at subtree. */
name|deny
argument_list|(
name|path
argument_list|,
name|privilegesFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
name|createGlobRestriction
argument_list|(
literal|"*/"
operator|+
name|nodeName3
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|node4
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|nodePath3
argument_list|)
operator|.
name|addNode
argument_list|(
name|nodeName4
argument_list|)
decl_stmt|;
try|try
block|{
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Adding child node must be denied."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
end_class

end_unit

