begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|NodeTypeInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|stats
operator|.
name|QueryStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|xpath
operator|.
name|XPathToSQL2Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the SQL-2 parser.  */
end_comment

begin_class
specifier|public
class|class
name|SQL2ParserTest
block|{
specifier|private
specifier|static
specifier|final
name|NodeTypeInfoProvider
name|nodeTypes
init|=
operator|new
name|NodeStateNodeTypeInfoProvider
argument_list|(
name|INITIAL_CONTENT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SQL2Parser
name|p
init|=
name|createTestSQL2Parser
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|SQL2Parser
name|createTestSQL2Parser
parameter_list|()
block|{
return|return
name|createTestSQL2Parser
argument_list|(
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|nodeTypes
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SQL2Parser
name|createTestSQL2Parser
parameter_list|(
name|NamePathMapper
name|mappings
parameter_list|,
name|NodeTypeInfoProvider
name|nodeTypes2
parameter_list|,
name|QueryEngineSettings
name|qeSettings
parameter_list|)
block|{
name|QueryStatsData
name|data
init|=
operator|new
name|QueryStatsData
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
operator|new
name|SQL2Parser
argument_list|(
name|mappings
argument_list|,
name|nodeTypes2
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|,
name|data
operator|.
expr|new
name|QueryExecutionStats
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIgnoreSqlComment
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"select * from [nt:unstructured] /* sql comment */"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"select [jcr:path], [jcr:score], * from [nt:base] as a /* xpath: //* */"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"/* begin query */ select [jcr:path] /* this is the path */, "
operator|+
literal|"[jcr:score] /* the score */, * /* everything*/ "
operator|+
literal|"from [nt:base] /* all node types */ as a /* an identifier */"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnfinishedSqlComment
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"select [jcr:path], [jcr:score], * from [nt:base] as a /* xpath: //* "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformAndParse
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"/jcr:root/test/*/nt:resource[@jcr:encoding]"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"/jcr:root/test/*/*/nt:resource[@jcr:encoding]"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|xpath
init|=
literal|"/jcr:root/etc/commerce/products//*[@cq:commerceType = 'product' "
operator|+
literal|"and ((@size = 'M' or */@size= 'M' or */*/@size = 'M' "
operator|+
literal|"or */*/*/@size = 'M' or */*/*/*/@size = 'M' or */*/*/*/*/@size = 'M'))]"
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// see OAK-OAK-830: XPathToSQL2Converter fails to wrap or clauses
annotation|@
name|Test
specifier|public
name|void
name|testUnwrappedOr
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|q
init|=
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"/jcr:root/home//test/* [@type='t1' or @type='t2' or @type='t3']"
argument_list|)
decl_stmt|;
name|String
name|token
init|=
literal|"and b.[type] in('t1', 't2', 't3')"
decl_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|contains
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCoalesce
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE([j:c/m/d:t], [j:c/j:t])='a'"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE(COALESCE([j:c/m/d:t], name()), [j:c/j:t])='a'"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE(COALESCE([j:c/m/d:t], name()), [j:c/j:t]) in ('a', 'b')"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE(COALESCE([j:c/a], [b]), COALESCE([c], [c:d])) = 'a'"
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"//*[fn:coalesce(j:c/m/@d:t, j:c/@j:t) = 'a']"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"//*[fn:coalesce(fn:coalesce(j:c/m/@d:t, fn:name()), j:c/@j:t) = 'a']"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
operator|new
name|XPathToSQL2Converter
argument_list|()
operator|.
name|convert
argument_list|(
literal|"//*[fn:coalesce(fn:coalesce(j:c/@a, b), fn:coalesce(c, c:d)) = 'a']"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|coalesceFailsWithNoParam
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE()='a'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|coalesceFailsWithOneParam
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE([a])='a'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|coalesceFailsWithMoreThanTwoParam
parameter_list|()
throws|throws
name|ParseException
block|{
name|p
operator|.
name|parse
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE COALESCE([a], [b], [c])='a'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-7131"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|orderingWithUnionOfNodetype
parameter_list|()
throws|throws
name|Exception
block|{
name|XPathToSQL2Converter
name|c
init|=
operator|new
name|XPathToSQL2Converter
argument_list|()
decl_stmt|;
name|String
name|xpath
decl_stmt|;
name|xpath
operator|=
literal|"//(element(*, type1) | element(*, type2)) order by @foo"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Converted xpath "
operator|+
name|xpath
operator|+
literal|"doesn't end with 'order by [foo]'"
argument_list|,
name|c
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"order by [foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|xpath
operator|=
literal|"//(element(*, type1) | element(*, type2) | element(*, type3)) order by @foo"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Converted xpath "
operator|+
name|xpath
operator|+
literal|"doesn't end with 'order by [foo]'"
argument_list|,
name|c
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"order by [foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|xpath
operator|=
literal|"//(element(*, type1) | element(*, type2) | element(*, type3) | element(*, type4)) order by @foo"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Converted xpath "
operator|+
name|xpath
operator|+
literal|"doesn't end with 'order by [foo]'"
argument_list|,
name|c
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"order by [foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|xpath
operator|=
literal|"//(element(*, type1) | element(*, type2))[@a='b'] order by @foo"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Converted xpath "
operator|+
name|xpath
operator|+
literal|"doesn't end with 'order by [foo]'"
argument_list|,
name|c
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"order by [foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|xpath
operator|=
literal|"//(element(*, type1) | element(*, type2))[@a='b' or @c='d'] order by @foo"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Converted xpath "
operator|+
name|xpath
operator|+
literal|"doesn't end with 'order by [foo]'"
argument_list|,
name|c
operator|.
name|convert
argument_list|(
name|xpath
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"order by [foo]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

