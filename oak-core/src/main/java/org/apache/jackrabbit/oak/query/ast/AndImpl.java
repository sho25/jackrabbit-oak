begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * An AND condition.  */
end_comment

begin_class
specifier|public
class|class
name|AndImpl
extends|extends
name|ConstraintImpl
block|{
specifier|private
specifier|final
name|ConstraintImpl
name|constraint1
decl_stmt|,
name|constraint2
decl_stmt|;
specifier|public
name|AndImpl
parameter_list|(
name|ConstraintImpl
name|constraint1
parameter_list|,
name|ConstraintImpl
name|constraint2
parameter_list|)
block|{
name|this
operator|.
name|constraint1
operator|=
name|constraint1
expr_stmt|;
name|this
operator|.
name|constraint2
operator|=
name|constraint2
expr_stmt|;
block|}
specifier|public
name|ConstraintImpl
name|getConstraint1
parameter_list|()
block|{
return|return
name|constraint1
return|;
block|}
specifier|public
name|ConstraintImpl
name|getConstraint2
parameter_list|()
block|{
return|return
name|constraint2
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConstraintImpl
name|simplify
parameter_list|()
block|{
if|if
condition|(
name|constraint1
operator|.
name|equals
argument_list|(
name|constraint2
argument_list|)
condition|)
block|{
return|return
name|constraint1
return|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|PropertyExistenceImpl
argument_list|>
name|getPropertyExistenceConditions
parameter_list|()
block|{
name|Set
argument_list|<
name|PropertyExistenceImpl
argument_list|>
name|s1
init|=
name|constraint1
operator|.
name|getPropertyExistenceConditions
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|PropertyExistenceImpl
argument_list|>
name|s2
init|=
name|constraint2
operator|.
name|getPropertyExistenceConditions
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|PropertyExistenceImpl
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|s2
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|SelectorImpl
argument_list|>
name|getSelectors
parameter_list|()
block|{
name|Set
argument_list|<
name|SelectorImpl
argument_list|>
name|s1
init|=
name|constraint1
operator|.
name|getSelectors
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SelectorImpl
argument_list|>
name|s2
init|=
name|constraint1
operator|.
name|getSelectors
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|s2
return|;
block|}
elseif|else
if|if
condition|(
name|s2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|s1
return|;
block|}
return|return
name|Sets
operator|.
name|union
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|DynamicOperandImpl
argument_list|,
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
argument_list|>
name|getInMap
parameter_list|()
block|{
name|Map
argument_list|<
name|DynamicOperandImpl
argument_list|,
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
argument_list|>
name|m1
init|=
name|constraint1
operator|.
name|getInMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|DynamicOperandImpl
argument_list|,
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
argument_list|>
name|m2
init|=
name|constraint2
operator|.
name|getInMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|m2
return|;
block|}
elseif|else
if|if
condition|(
name|m2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|m1
return|;
block|}
name|Map
argument_list|<
name|DynamicOperandImpl
argument_list|,
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|m1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|DynamicOperandImpl
argument_list|,
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
argument_list|>
name|e2
range|:
name|m2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|StaticOperandImpl
argument_list|>
name|s
init|=
name|result
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|retainAll
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
return|return
name|constraint1
operator|.
name|evaluate
argument_list|()
operator|&&
name|constraint2
operator|.
name|evaluate
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|protect
argument_list|(
name|constraint1
argument_list|)
operator|+
literal|" and "
operator|+
name|protect
argument_list|(
name|constraint2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restrict
parameter_list|(
name|FilterImpl
name|f
parameter_list|)
block|{
name|constraint1
operator|.
name|restrict
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|constraint2
operator|.
name|restrict
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restrictPushDown
parameter_list|(
name|SelectorImpl
name|s
parameter_list|)
block|{
name|constraint1
operator|.
name|restrictPushDown
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|constraint2
operator|.
name|restrictPushDown
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

