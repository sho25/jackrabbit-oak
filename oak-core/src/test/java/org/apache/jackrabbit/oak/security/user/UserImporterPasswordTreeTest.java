begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|PropInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|UserImporterPasswordTreeTest
extends|extends
name|UserImporterBaseTest
block|{
specifier|private
name|Tree
name|userTree
decl_stmt|;
specifier|private
name|Tree
name|pwTree
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|userTree
operator|=
name|createUserTree
argument_list|()
expr_stmt|;
name|pwTree
operator|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|userTree
argument_list|,
name|REP_PWD
argument_list|,
name|NT_REP_PASSWORD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotRepPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|pwTree
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|PropInfo
name|propInfo
init|=
name|mock
argument_list|(
name|PropInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|propInfo
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|propDef
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getRequiredType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPropName
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
literal|null
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPropName2
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
literal|null
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeTypeConstants
operator|.
name|RESIDUAL_NAME
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastModifiedUndefinedRequiredType
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
name|REP_PASSWORD_LAST_MODIFIED
argument_list|,
literal|"23000"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|propDef
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|pwTree
operator|.
name|getProperty
argument_list|(
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23000
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastModifiedWithRequiredType
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
name|REP_PASSWORD_LAST_MODIFIED
argument_list|,
literal|"23000"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|LONG
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|propDef
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|pwTree
operator|.
name|getProperty
argument_list|(
name|REP_PASSWORD_LAST_MODIFIED
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23000
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyPropNameUndefinedRequiredType
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
literal|"any"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|propDef
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|pwTree
operator|.
name|getProperty
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyPropNameWithRequiredType
parameter_list|()
throws|throws
name|Exception
block|{
name|PropInfo
name|propInfo
init|=
name|createPropInfo
argument_list|(
literal|"any"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
operator|.
name|getRequiredType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyType
operator|.
name|BOOLEAN
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|propDef
operator|.
name|isMultiple
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|importer
operator|.
name|handlePropInfo
argument_list|(
name|pwTree
argument_list|,
name|propInfo
argument_list|,
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|ps
init|=
name|pwTree
operator|.
name|getProperty
argument_list|(
literal|"any"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|ps
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

