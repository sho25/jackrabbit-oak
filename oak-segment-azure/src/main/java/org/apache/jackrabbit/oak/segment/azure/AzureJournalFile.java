begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudAppendBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|ListBlobItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|JournalFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|AzureJournalFile
implements|implements
name|JournalFile
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureJournalFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|JOURNAL_LINE_LIMIT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"org.apache.jackrabbit.oak.segment.azure.journal.lines"
argument_list|,
literal|40_000
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CloudBlobDirectory
name|directory
decl_stmt|;
specifier|private
specifier|final
name|String
name|journalNamePrefix
decl_stmt|;
specifier|private
specifier|final
name|int
name|lineLimit
decl_stmt|;
name|AzureJournalFile
parameter_list|(
name|CloudBlobDirectory
name|directory
parameter_list|,
name|String
name|journalNamePrefix
parameter_list|,
name|int
name|lineLimit
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|journalNamePrefix
operator|=
name|journalNamePrefix
expr_stmt|;
name|this
operator|.
name|lineLimit
operator|=
name|lineLimit
expr_stmt|;
block|}
specifier|public
name|AzureJournalFile
parameter_list|(
name|CloudBlobDirectory
name|directory
parameter_list|,
name|String
name|journalNamePrefix
parameter_list|)
block|{
name|this
argument_list|(
name|directory
argument_list|,
name|journalNamePrefix
argument_list|,
name|JOURNAL_LINE_LIMIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JournalFileReader
name|openJournalReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|CombinedReader
argument_list|(
name|getJournalBlobs
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|JournalFileWriter
name|openJournalWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|AzureJournalWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|journalNamePrefix
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
try|try
block|{
return|return
operator|!
name|getJournalBlobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can't check if the file exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|String
name|getJournalFileName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s.%03d"
argument_list|,
name|journalNamePrefix
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CloudAppendBlob
argument_list|>
name|getJournalBlobs
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|CloudAppendBlob
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ListBlobItem
name|b
range|:
name|directory
operator|.
name|listBlobs
argument_list|(
name|journalNamePrefix
argument_list|)
control|)
block|{
if|if
condition|(
name|b
operator|instanceof
name|CloudAppendBlob
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|CloudAppendBlob
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid blob type: {} {}"
argument_list|,
name|b
operator|.
name|getUri
argument_list|()
argument_list|,
name|b
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
expr|<
name|CloudAppendBlob
argument_list|,
name|String
operator|>
name|comparing
argument_list|(
name|AzureUtilities
operator|::
name|getName
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AzureJournalReader
implements|implements
name|JournalFileReader
block|{
specifier|private
specifier|final
name|CloudBlob
name|blob
decl_stmt|;
specifier|private
name|ReverseFileReader
name|reader
decl_stmt|;
specifier|private
name|AzureJournalReader
parameter_list|(
name|CloudBlob
name|blob
parameter_list|)
block|{
name|this
operator|.
name|blob
operator|=
name|blob
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|=
operator|new
name|ReverseFileReader
argument_list|(
name|blob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
block|}
specifier|private
class|class
name|AzureJournalWriter
implements|implements
name|JournalFileWriter
block|{
specifier|private
name|CloudAppendBlob
name|currentBlob
decl_stmt|;
specifier|private
name|int
name|blockCount
decl_stmt|;
specifier|public
name|AzureJournalWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CloudAppendBlob
argument_list|>
name|blobs
init|=
name|getJournalBlobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|currentBlob
operator|=
name|directory
operator|.
name|getAppendBlobReference
argument_list|(
name|getJournalFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|currentBlob
operator|.
name|createOrReplace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|currentBlob
operator|=
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|currentBlob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Integer
name|bc
init|=
name|currentBlob
operator|.
name|getProperties
argument_list|()
operator|.
name|getAppendBlobCommittedBlockCount
argument_list|()
decl_stmt|;
name|blockCount
operator|=
name|bc
operator|==
literal|null
condition|?
literal|0
else|:
name|bc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|truncate
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|CloudAppendBlob
name|cloudAppendBlob
range|:
name|getJournalBlobs
argument_list|()
control|)
block|{
name|cloudAppendBlob
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|createNextFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeLine
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockCount
operator|>=
name|lineLimit
condition|)
block|{
name|int
name|parsedSuffix
init|=
name|parseCurrentSuffix
argument_list|()
decl_stmt|;
name|createNextFile
argument_list|(
name|parsedSuffix
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|currentBlob
operator|.
name|appendText
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|createNextFile
parameter_list|(
name|int
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|currentBlob
operator|=
name|directory
operator|.
name|getAppendBlobReference
argument_list|(
name|getJournalFileName
argument_list|(
name|suffix
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|currentBlob
operator|.
name|createOrReplace
argument_list|()
expr_stmt|;
name|blockCount
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|parseCurrentSuffix
parameter_list|()
block|{
name|String
name|name
init|=
name|AzureUtilities
operator|.
name|getName
argument_list|(
name|currentBlob
argument_list|)
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|journalNamePrefix
argument_list|)
operator|+
literal|"\\.(\\d+)"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|parsedSuffix
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|suffix
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|parsedSuffix
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't parse suffix for journal file {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|parsedSuffix
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Can't parse journal file name {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|parsedSuffix
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|parsedSuffix
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
block|}
specifier|private
specifier|static
class|class
name|CombinedReader
implements|implements
name|JournalFileReader
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|AzureJournalReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
name|JournalFileReader
name|currentReader
decl_stmt|;
specifier|private
name|CombinedReader
parameter_list|(
name|List
argument_list|<
name|CloudAppendBlob
argument_list|>
name|blobs
parameter_list|)
block|{
name|readers
operator|=
name|blobs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AzureJournalReader
operator|::
operator|new
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|line
decl_stmt|;
do|do
block|{
if|if
condition|(
name|currentReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|readers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|currentReader
operator|=
name|readers
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|do
block|{
name|line
operator|=
name|currentReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
do|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|currentReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|currentReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
do|while
condition|(
name|line
operator|==
literal|null
condition|)
do|;
return|return
name|line
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|readers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|readers
operator|.
name|next
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentReader
operator|!=
literal|null
condition|)
block|{
name|currentReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|currentReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

