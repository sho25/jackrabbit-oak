begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|arraycopy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|binarySearch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * A memory optimised map of {@code short} key to {@link RecordId} values.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|RecordIdMap
block|{
specifier|private
specifier|static
specifier|final
name|short
index|[]
name|NO_KEYS
init|=
operator|new
name|short
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|RecordId
index|[]
name|NO_VALUES
init|=
operator|new
name|RecordId
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|short
index|[]
name|keys
init|=
name|NO_KEYS
decl_stmt|;
specifier|private
name|RecordId
index|[]
name|values
init|=
name|NO_VALUES
decl_stmt|;
comment|/**      * Associates {@code key} with {@code value} if not already present      * @param key      * @param value      * @return  {@code true} if added, {@code false} if already present      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|put
parameter_list|(
name|short
name|key
parameter_list|,
annotation|@
name|Nonnull
name|RecordId
name|value
parameter_list|)
block|{
if|if
condition|(
name|keys
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|keys
operator|=
operator|new
name|short
index|[
literal|1
index|]
expr_stmt|;
name|values
operator|=
operator|new
name|RecordId
index|[
literal|1
index|]
expr_stmt|;
name|keys
index|[
literal|0
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|int
name|k
init|=
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|<
literal|0
condition|)
block|{
name|int
name|l
init|=
operator|-
name|k
operator|-
literal|1
decl_stmt|;
name|short
index|[]
name|newKeys
init|=
operator|new
name|short
index|[
name|keys
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|RecordId
index|[]
name|newValues
init|=
operator|new
name|RecordId
index|[
operator|(
name|values
operator|.
name|length
operator|+
literal|1
operator|)
index|]
decl_stmt|;
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|newKeys
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|newKeys
index|[
name|l
index|]
operator|=
name|key
expr_stmt|;
name|newValues
index|[
name|l
index|]
operator|=
name|value
expr_stmt|;
name|int
name|c
init|=
name|keys
operator|.
name|length
operator|-
name|l
decl_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|l
argument_list|,
name|newKeys
argument_list|,
name|l
operator|+
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|arraycopy
argument_list|(
name|values
argument_list|,
name|l
argument_list|,
name|newValues
argument_list|,
name|l
operator|+
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|keys
operator|=
name|newKeys
expr_stmt|;
name|values
operator|=
name|newValues
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**      * Returns the value associated with a given {@code key} or {@code null} if none.      * @param key  the key to retrieve      * @return  the value associated with a given {@code key} or {@code null} if none.      */
annotation|@
name|CheckForNull
annotation|@
name|Deprecated
specifier|public
name|RecordId
name|get
parameter_list|(
name|short
name|key
parameter_list|)
block|{
name|int
name|k
init|=
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|>=
literal|0
condition|)
block|{
return|return
name|values
index|[
name|k
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Check whether {@code key} is present is this map.      * @param key  the key to check for      * @return  {@code true} iff {@code key} is present.      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|short
name|key
parameter_list|)
block|{
return|return
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * @return the number of keys in this map      */
annotation|@
name|Deprecated
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keys
operator|.
name|length
return|;
block|}
comment|/**      * Retrieve the key at a given index. Keys are ordered according      * the natural ordering of shorts.      * @param index      * @return the key at {@code index}      * @throws ArrayIndexOutOfBoundsException if not {@code 0<= index< size()}      */
annotation|@
name|Deprecated
specifier|public
name|short
name|getKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|keys
index|[
name|index
index|]
return|;
block|}
comment|/**      * Retrieve the value at a given index. Keys are ordered according      * the natural ordering of shorts.      * @param index      * @return the value at {@code index}      * @throws ArrayIndexOutOfBoundsException if not {@code 0<= index< size()}      */
annotation|@
name|Nonnull
annotation|@
name|Deprecated
specifier|public
name|RecordId
name|getRecordId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|index
index|]
return|;
block|}
block|}
end_class

end_unit

