begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|ASC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
operator|.
name|DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
operator|.
name|START
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
operator|.
name|getPropertyNext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
operator|.
name|setPropertyNext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|encoder
operator|.
name|PatternLayoutEncoder
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|OutputStreamAppender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|Oak2077QueriesTest
extends|extends
name|BasicOrderedPropertyIndexQueryTest
block|{
specifier|private
specifier|static
specifier|final
name|LoggingTracker
argument_list|<
name|ILoggingEvent
argument_list|>
name|LOGGING_TRACKER
decl_stmt|;
specifier|private
name|NodeStore
name|nodestore
decl_stmt|;
specifier|private
name|ContentRepository
name|repository
decl_stmt|;
static|static
block|{
name|LoggerContext
name|lc
init|=
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
decl_stmt|;
name|PatternLayoutEncoder
name|encoder
init|=
operator|new
name|PatternLayoutEncoder
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|setContext
argument_list|(
name|lc
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|setPattern
argument_list|(
literal|"%msg%n"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOGGING_TRACKER
operator|=
operator|new
name|LoggingTracker
argument_list|<
name|ILoggingEvent
argument_list|>
argument_list|()
expr_stmt|;
name|LOGGING_TRACKER
operator|.
name|setContext
argument_list|(
name|lc
argument_list|)
expr_stmt|;
name|LOGGING_TRACKER
operator|.
name|setEncoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|LOGGING_TRACKER
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// adding the new appender to the root logger
operator|(
operator|(
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
operator|)
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Logger
operator|.
name|ROOT_LOGGER_NAME
argument_list|)
operator|)
operator|.
name|addAppender
argument_list|(
name|LOGGING_TRACKER
argument_list|)
expr_stmt|;
comment|//configuring the logging level to desired value
operator|(
operator|(
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
operator|)
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LOGGING_TRACKER
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
comment|// ------------------------------------------------------------------------< utility classes>
specifier|private
specifier|static
class|class
name|LoggingTracker
parameter_list|<
name|E
parameter_list|>
extends|extends
name|OutputStreamAppender
argument_list|<
name|E
argument_list|>
block|{
specifier|private
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|setOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**          * reset the inner OutputStream.           */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BufferedReader
name|toBufferedReader
parameter_list|()
block|{
return|return
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|countLinesTracked
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
name|BufferedReader
name|br
init|=
name|toBufferedReader
argument_list|()
decl_stmt|;
while|while
condition|(
name|br
operator|.
name|readLine
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lines
operator|++
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|LoggingTracker
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**      * used to return an instance of IndexEditor with a defined Random for a better reproducible      * unit testing      */
specifier|private
class|class
name|SeededOrderedPropertyIndexEditorProvider
extends|extends
name|OrderedPropertyIndexEditorProvider
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Editor
name|getIndexEditor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|type
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|definition
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|IndexUpdateCallback
name|callback
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Editor
name|editor
init|=
operator|(
name|TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
condition|?
operator|new
name|SeededPropertyIndexEditor
argument_list|(
name|definition
argument_list|,
name|root
argument_list|,
name|callback
argument_list|,
name|rnd
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|editor
return|;
block|}
block|}
comment|/**      * index editor that will return a content strategy with       */
specifier|private
class|class
name|SeededPropertyIndexEditor
extends|extends
name|OrderedPropertyIndexEditor
block|{
specifier|private
name|Random
name|rnd
decl_stmt|;
specifier|public
name|SeededPropertyIndexEditor
parameter_list|(
name|NodeBuilder
name|definition
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|IndexUpdateCallback
name|callback
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|super
argument_list|(
name|definition
argument_list|,
name|root
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
block|}
specifier|public
name|SeededPropertyIndexEditor
parameter_list|(
name|SeededPropertyIndexEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|rnd
operator|=
name|parent
operator|.
name|rnd
expr_stmt|;
block|}
annotation|@
name|Override
name|IndexStoreStrategy
name|getStrategy
parameter_list|(
name|boolean
name|unique
parameter_list|)
block|{
name|SeededOrderedMirrorStore
name|store
init|=
operator|new
name|SeededOrderedMirrorStore
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|OrderedIndex
operator|.
name|DEFAULT_DIRECTION
operator|.
name|equals
argument_list|(
name|getDirection
argument_list|()
argument_list|)
condition|)
block|{
name|store
operator|=
operator|new
name|SeededOrderedMirrorStore
argument_list|(
name|DESC
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|setRandom
argument_list|(
name|rnd
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Override
name|PropertyIndexEditor
name|getChildIndexEditor
parameter_list|(
name|PropertyIndexEditor
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|SeededPropertyIndexEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
comment|/**      * mocking class that makes use of the provided {@link Random} instance for generating the lanes      */
specifier|private
class|class
name|SeededOrderedMirrorStore
extends|extends
name|OrderedContentMirrorStoreStrategy
block|{
specifier|private
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|SeededOrderedMirrorStore
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SeededOrderedMirrorStore
parameter_list|(
name|OrderDirection
name|direction
parameter_list|)
block|{
name|super
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLane
parameter_list|()
block|{
return|return
name|getLane
argument_list|(
name|rnd
argument_list|)
return|;
block|}
specifier|public
name|void
name|setRandom
parameter_list|(
name|Random
name|rnd
parameter_list|)
block|{
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
block|}
block|}
comment|/**      * enum used for injecting the filter condition in the {@code filter()}      */
specifier|private
enum|enum
name|FilterCondition
block|{
name|GREATER_THAN
block|,
name|GREATER_THEN_EQUAL
block|,
name|LESS_THAN
block|}
empty_stmt|;
comment|// ----------------------------------------------------------------------------------< tests>
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|nodestore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|repository
operator|=
operator|new
name|Oak
argument_list|(
name|nodestore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|SeededOrderedPropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OrderedPropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
return|return
name|repository
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// leaving it empty. Prefer to create the index definition in each method
block|}
specifier|private
name|void
name|defineIndex
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|OrderDirection
name|direction
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// removing any previously defined index definition for a complete reset
name|index
operator|=
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
name|index
operator|=
name|index
operator|.
name|getChild
argument_list|(
name|TEST_INDEX_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
name|index
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|index
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// ensuring we have a clear reset of the environment
name|assertFalse
argument_list|(
literal|"the index definition should not be here yet"
argument_list|,
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|TEST_INDEX_NAME
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|createIndexDefinition
argument_list|(
operator|new
name|NodeUtil
argument_list|(
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|)
argument_list|,
name|TEST_INDEX_NAME
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
name|ORDERED_PROPERTY
block|}
argument_list|,
literal|null
argument_list|,
name|OrderedIndex
operator|.
name|TYPE
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|OrderedIndex
operator|.
name|DIRECTION
argument_list|,
name|direction
operator|.
name|getDirection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>      * reset the environment variables to be sure to use the latest root. {@code session, root, qe}      *<p>      *       * @throws IOException      * @throws LoginException      * @throws NoSuchWorkspaceException      */
specifier|private
name|void
name|resetEnvVariables
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|qe
operator|=
name|root
operator|.
name|getQueryEngine
argument_list|()
expr_stmt|;
block|}
comment|/**      * create the test content by the provided attributes      *       * @param numberOfNodes the number of nodes to be created      * @param offset if starting by 0 or by {@code offset}      * @param direction the direction of the value      * @return the list of ValiePathTuple for later assertions      * @throws CommitFailedException      */
specifier|private
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|createContent
parameter_list|(
specifier|final
name|int
name|numberOfNodes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|OrderDirection
name|direction
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|checkNotNull
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|Tree
name|content
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|generateOrderedValues
argument_list|(
name|numberOfNodes
argument_list|,
name|offset
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|addChildNodes
argument_list|(
name|values
argument_list|,
name|content
argument_list|,
name|direction
argument_list|,
name|STRING
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|nodes
return|;
block|}
comment|/**      * truncate the {@link AbstractQueryTest#TEST_INDEX_NAME} index at the 4th element of the      * provided lane returning the previous value      *       * @param lane the desired lane. Must be 0<= {@code lane}< {@link OrderedIndex#LANES}      * @param inexistent the derired value to be injected      * @return the value before the change      * @throws Exception      */
annotation|@
name|Nullable
specifier|private
name|String
name|truncate
parameter_list|(
specifier|final
name|int
name|lane
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|inexistent
parameter_list|)
throws|throws
name|Exception
block|{
name|checkNotNull
argument_list|(
name|inexistent
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|lane
operator|>=
literal|0
operator|&&
name|lane
operator|<
name|OrderedIndex
operator|.
name|LANES
argument_list|)
expr_stmt|;
name|String
name|previousValue
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|nodestore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|TEST_INDEX_NAME
argument_list|)
expr_stmt|;
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
expr_stmt|;
name|NodeBuilder
name|truncated
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|START
argument_list|)
decl_stmt|;
name|String
name|truncatedName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// changing the 4th element. No particular reasons on why the 4th.
name|truncatedName
operator|=
name|getPropertyNext
argument_list|(
name|truncated
argument_list|,
name|lane
argument_list|)
expr_stmt|;
name|truncated
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|truncatedName
argument_list|)
expr_stmt|;
block|}
name|previousValue
operator|=
name|getPropertyNext
argument_list|(
name|truncated
argument_list|,
name|lane
argument_list|)
expr_stmt|;
name|setPropertyNext
argument_list|(
name|truncated
argument_list|,
name|inexistent
argument_list|,
name|lane
argument_list|)
expr_stmt|;
name|nodestore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|resetEnvVariables
argument_list|()
expr_stmt|;
return|return
name|previousValue
return|;
block|}
specifier|private
name|void
name|assertLogAndQuery
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|statement
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGING_TRACKER
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertRightOrder
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We expect at least 1 warning message to be tracked"
argument_list|,
name|LOGGING_TRACKER
operator|.
name|countLinesTracked
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * filter out the provided list for later assertions      *       * @param nodes the original list to be filtered      * @param inexistent the previously injected inexistent node      * @param condition the condition applied in the query to assert. if {@code null} it will behave      *            as a {@code NOT NULL} query.      * @param whereCondition if {@condition} is provided CANNOT BE null. it's the where clause      *            provided in the query to assert.      * @return the filtered list to be expected      */
annotation|@
name|Nonnull
specifier|private
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|filter
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|inexistent
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|FilterCondition
name|condition
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|whereCondition
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|inexistent
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|condition
operator|!=
literal|null
condition|?
name|whereCondition
operator|!=
literal|null
else|:
literal|true
argument_list|,
literal|"if 'condition' is not null'whereCondition' MUST be provided"
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|nodes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ValuePathTuple
argument_list|>
argument_list|()
block|{
name|boolean
name|stopHere
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ValuePathTuple
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopHere
condition|)
block|{
name|stopHere
operator|=
name|inexistent
operator|.
name|equals
argument_list|(
name|input
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|filter
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|condition
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|condition
condition|)
block|{
case|case
name|GREATER_THAN
case|:
name|filter
operator|=
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|whereCondition
argument_list|)
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER_THEN_EQUAL
case|:
name|filter
operator|=
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|whereCondition
argument_list|)
operator|>=
literal|0
expr_stmt|;
break|break;
case|case
name|LESS_THAN
case|:
name|filter
operator|=
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|whereCondition
argument_list|)
operator|<
literal|0
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
operator|!
name|stopHere
operator|&&
name|filter
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryNotNullAscending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|" IS NOT NULL"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|0
argument_list|,
name|direction
argument_list|)
decl_stmt|;
comment|// truncating the list on lane 0
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|statement
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryNotNullDescending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|DESC
decl_stmt|;
comment|//changed
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//changed
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|" IS NOT NULL"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|1
argument_list|,
name|direction
argument_list|)
decl_stmt|;
comment|// truncating the list on lane 0
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|statement
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// as the full iterable used in `property IS NOT NULL` cases walk the index on lane 0, any
comment|// other lanes doesn't matter.
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// As of OAK-2202 we don't use the skip list for returning a specific key item, so we're not
comment|// affected by OAK-2077
comment|// public void queryEqualsAscending() throws Exception {
comment|// }
comment|// public void queryEqualsDescending() {
comment|// }
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThanAscending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// as 'values' will start from 0, we're excluding first entry(ies)
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|0
argument_list|,
name|direction
argument_list|)
decl_stmt|;
comment|// truncating the list on lane 0
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|GREATER_THAN
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*      * for sake of simplicity we check the just the second lane but it should be the same for all      * other higher ones.      */
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThanAscendingLane1
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|whereCondition
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|0
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|whereCondition
operator|=
name|truncate
argument_list|(
literal|1
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|GREATER_THAN
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// no logging should be applied as the missing item does not match the seek condition
comment|// we don't care about the logging then.
name|String
name|st
init|=
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|st
argument_list|,
name|SQL2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertRightOrder
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThenDescending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|offset
init|=
literal|5
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|DESC
decl_stmt|;
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"> '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
name|offset
argument_list|,
name|direction
argument_list|)
decl_stmt|;
comment|// truncating the list on lane 0
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|GREATER_THAN
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThanEqualAscending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// as 'values' will start from 0, we're excluding first entry(ies)
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|">= '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|0
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|GREATER_THEN_EQUAL
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryGreaterThanEqualDescending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|offset
init|=
literal|5
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|DESC
decl_stmt|;
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|">= '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
name|offset
argument_list|,
name|direction
argument_list|)
decl_stmt|;
comment|// truncating the list on lane 0
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|GREATER_THEN_EQUAL
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryLessThanAscending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|ASC
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
name|numberOfNodes
operator|+
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"< '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
literal|0
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|LESS_THAN
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryLessThanDescending
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfNodes
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|offset
init|=
literal|5
decl_stmt|;
specifier|final
name|OrderDirection
name|direction
init|=
name|DESC
decl_stmt|;
specifier|final
name|String
name|whereCondition
init|=
name|formatNumber
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inexistent
init|=
name|formatNumber
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statement
init|=
literal|"SELECT * FROM [nt:base] WHERE "
operator|+
name|ORDERED_PROPERTY
operator|+
literal|"< '%s'"
decl_stmt|;
name|defineIndex
argument_list|(
name|direction
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
name|createContent
argument_list|(
name|numberOfNodes
argument_list|,
name|offset
argument_list|,
name|direction
argument_list|)
decl_stmt|;
name|truncate
argument_list|(
literal|0
argument_list|,
name|inexistent
argument_list|)
expr_stmt|;
comment|//filtering out the part that should not be returned by the resultset.
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|expected
init|=
name|filter
argument_list|(
name|nodes
argument_list|,
name|inexistent
argument_list|,
name|FilterCondition
operator|.
name|LESS_THAN
argument_list|,
name|whereCondition
argument_list|)
decl_stmt|;
comment|// pointing to a non-existent node in lane 0 we expect the result to be truncated
name|assertLogAndQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|statement
argument_list|,
name|whereCondition
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

