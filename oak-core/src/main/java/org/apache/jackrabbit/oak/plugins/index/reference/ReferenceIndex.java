begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|POSITIVE_INFINITY
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|REFERENCE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|WEAKREFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
operator|.
name|REF_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|NodeReferenceConstants
operator|.
name|WEAK_REF_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|Cursors
operator|.
name|newPathCursor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|Multiplexers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Provides a QueryIndex that does lookups for node references based on a custom  * index saved on hidden property names  *   */
end_comment

begin_class
class|class
name|ReferenceIndex
implements|implements
name|QueryIndex
block|{
specifier|private
specifier|static
specifier|final
name|double
name|COST
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|MountInfoProvider
name|mountInfoProvider
decl_stmt|;
name|ReferenceIndex
parameter_list|()
block|{
name|this
argument_list|(
name|Mounts
operator|.
name|defaultMountInfoProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReferenceIndex
parameter_list|(
name|MountInfoProvider
name|mountInfoProvider
parameter_list|)
block|{
name|this
operator|.
name|mountInfoProvider
operator|=
name|mountInfoProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMinimumCost
parameter_list|()
block|{
return|return
name|COST
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
comment|// TODO don't call getCost for such queries
if|if
condition|(
name|filter
operator|.
name|getFullTextConstraint
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not an appropriate index for full-text search
return|return
name|POSITIVE_INFINITY
return|;
block|}
if|if
condition|(
name|filter
operator|.
name|containsNativeConstraint
argument_list|()
condition|)
block|{
comment|// not an appropriate index for native search
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|isEqualityRestrictionOnType
argument_list|(
name|pr
argument_list|,
name|REFERENCE
argument_list|)
operator|||
name|isEqualityRestrictionOnType
argument_list|(
name|pr
argument_list|,
name|WEAKREFERENCE
argument_list|)
condition|)
block|{
return|return
name|COST
return|;
block|}
block|}
comment|// not an appropriate index
return|return
name|POSITIVE_INFINITY
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEqualityRestrictionOnType
parameter_list|(
name|PropertyRestriction
name|pr
parameter_list|,
name|int
name|propertyType
parameter_list|)
block|{
if|if
condition|(
name|pr
operator|.
name|propertyType
operator|!=
name|propertyType
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|==
name|pr
operator|.
name|last
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|isEqualityRestrictionOnType
argument_list|(
name|pr
argument_list|,
name|REFERENCE
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
return|return
name|lookup
argument_list|(
name|root
argument_list|,
name|uuid
argument_list|,
name|name
argument_list|,
name|REF_NAME
argument_list|,
name|filter
argument_list|)
return|;
block|}
if|if
condition|(
name|isEqualityRestrictionOnType
argument_list|(
name|pr
argument_list|,
name|WEAKREFERENCE
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|pr
operator|.
name|propertyName
decl_stmt|;
return|return
name|lookup
argument_list|(
name|root
argument_list|,
name|uuid
argument_list|,
name|name
argument_list|,
name|WEAK_REF_NAME
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
return|return
name|newPathCursor
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|filter
operator|.
name|getQueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Cursor
name|lookup
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|uuid
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
name|String
name|index
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|NodeState
name|indexRoot
init|=
name|root
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|newPathCursor
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|filter
operator|.
name|getQueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|iterables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexStoreStrategy
name|s
range|:
name|getStrategies
argument_list|(
name|indexRoot
argument_list|,
name|mountInfoProvider
argument_list|,
name|index
argument_list|)
control|)
block|{
name|iterables
operator|.
name|add
argument_list|(
name|s
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|index
operator|+
literal|"("
operator|+
name|uuid
operator|+
literal|")"
argument_list|,
name|indexRoot
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|uuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|iterables
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|paths
operator|=
name|filter
argument_list|(
name|paths
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
name|transform
argument_list|(
name|paths
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getParentPath
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|newPathCursor
argument_list|(
name|paths
argument_list|,
name|filter
operator|.
name|getQueryEngineSettings
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|IndexStoreStrategy
argument_list|>
name|getStrategies
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|MountInfoProvider
name|mountInfoProvider
parameter_list|,
name|String
name|index
parameter_list|)
block|{
return|return
name|Multiplexers
operator|.
name|getStrategies
argument_list|(
literal|false
argument_list|,
name|mountInfoProvider
argument_list|,
name|definition
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"reference"
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|pr
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|propertyType
operator|==
name|REFERENCE
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" PROPERTY(["
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"], 'Reference') = "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|pr
operator|.
name|propertyType
operator|==
name|WEAKREFERENCE
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" PROPERTY(["
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|pr
operator|.
name|propertyName
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"], 'WeakReference') = "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|pr
operator|.
name|first
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

