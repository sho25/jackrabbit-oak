begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractRebaseDiffTest
block|{
specifier|private
specifier|final
name|NodeState
name|base
decl_stmt|;
block|{
name|NodeBuilder
name|builder
init|=
name|EmptyNodeState
operator|.
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"z"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|base
operator|=
name|builder
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingProperty
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|headBuilder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|createProperty
argument_list|(
literal|"p"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDeletedProperty
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|removeProperty
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|headBuilder
operator|.
name|removeProperty
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"y"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|createProperty
argument_list|(
literal|"y"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeChangedProperty
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|headBuilder
operator|.
name|setProperty
argument_list|(
literal|"y"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|branchBuilder
operator|.
name|setProperty
argument_list|(
literal|"y"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|createProperty
argument_list|(
literal|"y"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteDeletedProperty
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|removeProperty
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|removeProperty
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|createProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteChangedProperty
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|removeProperty
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|createProperty
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addExistingNode
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|setChildNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|headBuilder
operator|.
name|setChildNode
argument_list|(
literal|"m"
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|setChildNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|branchBuilder
operator|.
name|setChildNode
argument_list|(
literal|"m"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"mm"
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"m"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDeletedNode
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteDeletedNode
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteChangedNode
parameter_list|()
block|{
name|NodeBuilder
name|headBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|headBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|NodeState
name|head
init|=
name|headBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|branchBuilder
init|=
name|base
operator|.
name|builder
argument_list|()
decl_stmt|;
name|branchBuilder
operator|.
name|getChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|NodeState
name|branch
init|=
name|branchBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|RebaseDiff
name|rebaseDiff
init|=
operator|new
name|RebaseDiff
argument_list|(
name|head
operator|.
name|builder
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|resolve
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|branch
operator|.
name|compareAgainstBaseState
argument_list|(
name|base
argument_list|,
name|rebaseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rebaseDiff
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< RebaseDiff>---
specifier|private
specifier|static
class|class
name|RebaseDiff
extends|extends
name|AbstractRebaseDiff
block|{
specifier|private
name|boolean
name|resolved
decl_stmt|;
specifier|protected
name|RebaseDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resolve
parameter_list|()
block|{
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isResolved
parameter_list|()
block|{
return|return
name|resolved
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractRebaseDiff
name|createDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"addExistingProperty "
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"changeDeletedProperty "
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"changeChangedProperty "
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"deleteDeletedProperty "
operator|+
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"deleteChangedProperty "
operator|+
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"addExistingNode "
operator|+
name|name
operator|+
literal|'='
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"changeDeletedNode "
operator|+
name|name
operator|+
literal|'='
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"deleteDeletedNode "
operator|+
name|name
operator|+
literal|'='
operator|+
name|before
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"deleteChangedNode "
operator|+
name|name
operator|+
literal|'='
operator|+
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

