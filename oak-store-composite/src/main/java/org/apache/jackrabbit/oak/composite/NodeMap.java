begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
specifier|public
class|class
name|NodeMap
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|T
argument_list|>
argument_list|>
name|suppliers
decl_stmt|;
specifier|private
name|NodeMap
parameter_list|(
name|Map
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|T
argument_list|>
argument_list|>
name|suppliers
parameter_list|)
block|{
name|this
operator|.
name|suppliers
operator|=
name|suppliers
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|NodeMap
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Map
argument_list|<
name|MountedNodeStore
argument_list|,
name|T
argument_list|>
name|nodes
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|T
argument_list|>
argument_list|>
name|suppliers
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|forEach
argument_list|(
parameter_list|(
name|mns
parameter_list|,
name|node
parameter_list|)
lambda|->
name|suppliers
operator|.
name|put
argument_list|(
name|mns
argument_list|,
operator|new
name|CacheableSupplier
argument_list|<
name|T
argument_list|>
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeMap
argument_list|<>
argument_list|(
name|suppliers
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|T
name|get
parameter_list|(
name|MountedNodeStore
name|nodeStore
parameter_list|)
block|{
if|if
condition|(
operator|!
name|suppliers
operator|.
name|containsKey
argument_list|(
name|nodeStore
argument_list|)
condition|)
block|{
name|Mount
name|mount
init|=
name|nodeStore
operator|.
name|getMount
argument_list|()
decl_stmt|;
name|String
name|mountName
init|=
name|mount
operator|.
name|isDefault
argument_list|()
condition|?
literal|"[default]"
else|:
name|mount
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Node is not available for the node store "
operator|+
name|mountName
argument_list|)
throw|;
block|}
return|return
name|suppliers
operator|.
name|get
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|NodeMap
argument_list|<
name|R
argument_list|>
name|getAndApply
parameter_list|(
name|BiFunction
argument_list|<
name|MountedNodeStore
argument_list|,
name|T
argument_list|,
name|R
argument_list|>
name|function
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|R
argument_list|>
argument_list|>
name|newSuppliers
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|suppliers
operator|.
name|forEach
argument_list|(
parameter_list|(
name|mns
parameter_list|,
name|node
parameter_list|)
lambda|->
name|newSuppliers
operator|.
name|put
argument_list|(
name|mns
argument_list|,
name|node
operator|.
name|getAndApply
argument_list|(
name|curry
argument_list|(
name|function
argument_list|,
name|mns
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeMap
argument_list|<>
argument_list|(
name|newSuppliers
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|NodeMap
argument_list|<
name|R
argument_list|>
name|lazyApply
parameter_list|(
name|BiFunction
argument_list|<
name|MountedNodeStore
argument_list|,
name|T
argument_list|,
name|R
argument_list|>
name|function
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|R
argument_list|>
argument_list|>
name|newSuppliers
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|suppliers
operator|.
name|forEach
argument_list|(
parameter_list|(
name|mns
parameter_list|,
name|node
parameter_list|)
lambda|->
name|newSuppliers
operator|.
name|put
argument_list|(
name|mns
argument_list|,
name|node
operator|.
name|lazyApply
argument_list|(
name|curry
argument_list|(
name|function
argument_list|,
name|mns
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeMap
argument_list|<>
argument_list|(
name|newSuppliers
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|,
name|R
parameter_list|>
name|Function
argument_list|<
name|U
argument_list|,
name|R
argument_list|>
name|curry
parameter_list|(
name|BiFunction
argument_list|<
name|T
argument_list|,
name|U
argument_list|,
name|R
argument_list|>
name|function
parameter_list|,
name|T
name|value
parameter_list|)
block|{
return|return
name|u
lambda|->
name|function
operator|.
name|apply
argument_list|(
name|value
argument_list|,
name|u
argument_list|)
return|;
block|}
specifier|public
name|NodeMap
argument_list|<
name|T
argument_list|>
name|replaceNode
parameter_list|(
name|MountedNodeStore
name|nodeStore
parameter_list|,
name|T
name|node
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|MountedNodeStore
argument_list|,
name|CacheableSupplier
argument_list|<
name|T
argument_list|>
argument_list|>
name|newSuppliers
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|suppliers
operator|.
name|forEach
argument_list|(
parameter_list|(
name|mns
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|mns
operator|!=
name|nodeStore
condition|)
block|{
name|newSuppliers
operator|.
name|put
argument_list|(
name|mns
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|newSuppliers
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
operator|new
name|CacheableSupplier
argument_list|<>
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|NodeMap
argument_list|<>
argument_list|(
name|newSuppliers
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CacheableSupplier
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
decl_stmt|;
specifier|private
specifier|volatile
name|T
name|value
decl_stmt|;
specifier|private
name|CacheableSupplier
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
name|this
operator|.
name|supplier
operator|=
name|supplier
expr_stmt|;
block|}
specifier|public
name|CacheableSupplier
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
name|supplier
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|CacheableSupplier
argument_list|<
name|R
argument_list|>
name|getAndApply
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|function
parameter_list|)
block|{
return|return
operator|new
name|CacheableSupplier
argument_list|<>
argument_list|(
name|function
operator|.
name|apply
argument_list|(
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|R
parameter_list|>
name|CacheableSupplier
argument_list|<
name|R
argument_list|>
name|lazyApply
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|function
parameter_list|)
block|{
return|return
operator|new
name|CacheableSupplier
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
name|function
operator|.
name|apply
argument_list|(
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

