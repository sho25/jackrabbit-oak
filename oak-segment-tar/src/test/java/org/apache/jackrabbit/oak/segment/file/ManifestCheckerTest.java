begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ManifestChecker
operator|.
name|newManifestChecker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|ManifestFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|ManifestCheckerTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|root
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|ManifestFile
name|manifest
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|file
operator|=
name|root
operator|.
name|newFile
argument_list|()
expr_stmt|;
name|manifest
operator|=
operator|new
name|LocalManifestFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidFileStoreVersionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testManifestShouldExist
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|checkManifest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Manifest
name|m
init|=
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|m
operator|.
name|setStoreVersion
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|save
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|checkManifest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidFileStoreVersionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testVersionTooLow
parameter_list|()
throws|throws
name|Exception
block|{
name|Manifest
name|m
init|=
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|m
operator|.
name|setStoreVersion
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|save
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|checkManifest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidFileStoreVersionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testVersionTooHigh
parameter_list|()
throws|throws
name|Exception
block|{
name|Manifest
name|m
init|=
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|m
operator|.
name|setStoreVersion
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|m
operator|.
name|save
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|checkManifest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateExistingManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|Manifest
name|before
init|=
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|before
operator|.
name|setStoreVersion
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|before
operator|.
name|save
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|checkAndUpdateManifest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
operator|.
name|getStoreVersion
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateNonExistingManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|newManifestChecker
argument_list|(
name|manifest
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|checkAndUpdateManifest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Manifest
operator|.
name|load
argument_list|(
name|manifest
argument_list|)
operator|.
name|getStoreVersion
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

