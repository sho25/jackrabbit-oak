begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|AzureDataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|S3DataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|DocumentMemoryNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
operator|.
name|SegmentMemoryNodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|ConfigurableDataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/** Base test class for testing direct HTTP access to binaries. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBinaryAccessIT
extends|extends
name|AbstractRepositoryTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|dataStoreFixtures
parameter_list|()
block|{
name|Collection
argument_list|<
name|NodeStoreFixture
argument_list|>
name|fixtures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|S3DataStoreFixture
name|s3
init|=
operator|new
name|S3DataStoreFixture
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|SegmentMemoryNodeStoreFixture
argument_list|(
name|s3
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|DocumentMemoryNodeStoreFixture
argument_list|(
name|s3
argument_list|)
argument_list|)
expr_stmt|;
name|AzureDataStoreFixture
name|azure
init|=
operator|new
name|AzureDataStoreFixture
argument_list|()
decl_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|SegmentMemoryNodeStoreFixture
argument_list|(
name|azure
argument_list|)
argument_list|)
expr_stmt|;
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|DocumentMemoryNodeStoreFixture
argument_list|(
name|azure
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fixtures
return|;
block|}
specifier|protected
name|AbstractBinaryAccessIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|,
name|boolean
name|reuseNodeStore
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|,
name|reuseNodeStore
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adjust JCR repository creation to register BlobAccessProvider (BlobStore) in Whiteboard      * so it can be picked up by oak-jcr.      */
annotation|@
name|Override
specifier|protected
name|Repository
name|createRepository
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|getNodeStoreComponent
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobStore
operator|!=
literal|null
operator|&&
name|blobStore
operator|instanceof
name|BlobAccessProvider
condition|)
block|{
name|wb
operator|.
name|register
argument_list|(
name|BlobAccessProvider
operator|.
name|class
argument_list|,
operator|(
name|BlobAccessProvider
operator|)
name|blobStore
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|initJcr
argument_list|(
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
name|wb
argument_list|)
argument_list|)
operator|.
name|createRepository
argument_list|()
return|;
block|}
comment|/** Return underlying DataStore configuration extension */
specifier|protected
name|ConfigurableDataRecordAccessProvider
name|getConfigurableHttpDataRecordProvider
parameter_list|()
block|{
name|DataStore
name|dataStore
init|=
name|getNodeStoreComponent
argument_list|(
name|DataStore
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataStore
operator|!=
literal|null
operator|&&
name|dataStore
operator|instanceof
name|ConfigurableDataRecordAccessProvider
condition|)
block|{
return|return
operator|(
name|ConfigurableDataRecordAccessProvider
operator|)
name|dataStore
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"issue with test setup, cannot retrieve underlying DataStore / ConfigurableDataRecordAccessProvider"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

