begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
operator|.
name|OBSERVATION_EVENT_COUNTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
operator|.
name|OBSERVATION_EVENT_DURATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|ChangeCollectorProvider
operator|.
name|COMMIT_CONTEXT_OBSERVATION_CHANGESET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|VisibleFilter
operator|.
name|VISIBLE_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerObserver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|jmx
operator|.
name|EventListenerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|observation
operator|.
name|ListenerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|ChangeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|CommitRateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringAwareObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|FilteringObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterConfigMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|ChangeSetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserverMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|CompositeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Monitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Monitor
operator|.
name|Guard
import|;
end_import

begin_comment
comment|/**  * A {@code ChangeProcessor} generates observation {@link javax.jcr.observation.Event}s  * based on a {@link FilterProvider filter} and delivers them to an {@link EventListener}.  *<p>  * After instantiation a {@code ChangeProcessor} must be started in order to start  * delivering observation events and stopped to stop doing so.  */
end_comment

begin_class
class|class
name|ChangeProcessor
implements|implements
name|FilteringAwareObserver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PerfLogger
name|PERF_LOGGER
init|=
operator|new
name|PerfLogger
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".perf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|FilterResult
block|{
comment|/** marks a commit as to be included, ie delivered.          * It's okay to falsely mark a commit as included,          * since filtering (as part of converting to events)          * will be applied at a later stage again. */
name|INCLUDE
block|,
comment|/** mark a commit as not of interest to this ChangeProcessor.          * Exclusion is definite, ie it's not okay to falsely          * mark a commit as excluded */
name|EXCLUDE
block|,
comment|/** mark a commit as included but indicate that this          * is not a result of prefiltering but that prefiltering          * was skipped/not applicable for some reason */
name|PREFILTERING_SKIPPED
block|}
comment|/**      * Fill ratio of the revision queue at which commits should be delayed      * (conditional of {@code commitRateLimiter} being non {@code null}).      */
specifier|public
specifier|static
specifier|final
name|double
name|DELAY_THRESHOLD
decl_stmt|;
comment|/**      * Maximal number of milli seconds a commit is delayed once {@code DELAY_THRESHOLD}      * kicks in.      */
specifier|public
specifier|static
specifier|final
name|int
name|MAX_DELAY
decl_stmt|;
comment|/** The test mode can be used to just verify if prefiltering would have      * correctly done its job and warn if that's not the case.      */
specifier|private
specifier|static
specifier|final
name|boolean
name|PREFILTERING_TESTMODE
decl_stmt|;
comment|// OAK-4533: make DELAY_THRESHOLD and MAX_DELAY adjustable - using System.properties for now
static|static
block|{
specifier|final
name|String
name|delayThresholdStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.commitRateLimiter.delayThreshold"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|maxDelayStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.commitRateLimiter.maxDelay"
argument_list|)
decl_stmt|;
name|double
name|delayThreshold
init|=
literal|0.8
decl_stmt|;
comment|/* default is 0.8 still */
name|int
name|maxDelay
init|=
literal|10000
decl_stmt|;
comment|/* default is 10000 still */
try|try
block|{
if|if
condition|(
name|delayThresholdStr
operator|!=
literal|null
operator|&&
name|delayThresholdStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|delayThreshold
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|delayThresholdStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"<clinit> using oak.commitRateLimiter.delayThreshold of "
operator|+
name|delayThreshold
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<clinit> could not parse oak.commitRateLimiter.delayThreshold, using default("
operator|+
name|delayThreshold
operator|+
literal|"): "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|maxDelayStr
operator|!=
literal|null
operator|&&
name|maxDelayStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|maxDelay
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxDelayStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"<clinit> using oak.commitRateLimiter.maxDelay of "
operator|+
name|maxDelay
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<clinit> could not parse oak.commitRateLimiter.maxDelay, using default("
operator|+
name|maxDelay
operator|+
literal|"): "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|DELAY_THRESHOLD
operator|=
name|delayThreshold
expr_stmt|;
name|MAX_DELAY
operator|=
name|maxDelay
expr_stmt|;
specifier|final
name|String
name|prefilteringTestModeStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.observation.prefilteringTestMode"
argument_list|)
decl_stmt|;
name|boolean
name|prefilteringTestModeBool
init|=
literal|false
decl_stmt|;
comment|// default is enabled
try|try
block|{
if|if
condition|(
name|prefilteringTestModeStr
operator|!=
literal|null
operator|&&
name|prefilteringTestModeStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|prefilteringTestModeBool
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|prefilteringTestModeStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"<clinit> using oak.observation.prefilteringTestMode = "
operator|+
name|prefilteringTestModeBool
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<clinit> could not parse oak.observation.prefilteringTestMode, using default ("
operator|+
name|prefilteringTestModeBool
operator|+
literal|"): "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|PREFILTERING_TESTMODE
operator|=
name|prefilteringTestModeBool
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/**      * JMX ObjectName property storing the listenerId which allows      * to correlate various mbeans      */
specifier|static
specifier|final
name|String
name|LISTENER_ID
init|=
literal|"listenerId"
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
specifier|final
name|ListenerTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|EventListener
name|eventListener
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|FilterProvider
argument_list|>
name|filterProvider
decl_stmt|;
specifier|private
specifier|final
name|MeterStats
name|eventCount
decl_stmt|;
specifier|private
specifier|final
name|TimerStats
name|eventDuration
decl_stmt|;
specifier|private
specifier|final
name|TimeSeriesMax
name|maxQueueLengthRecorder
decl_stmt|;
specifier|private
specifier|final
name|int
name|queueLength
decl_stmt|;
specifier|private
specifier|final
name|CommitRateLimiter
name|commitRateLimiter
decl_stmt|;
comment|/**      * Lazy initialization via the {@link #start(Whiteboard)} method      */
specifier|private
name|String
name|listenerId
decl_stmt|;
comment|/**      * Lazy initialization via the {@link #start(Whiteboard)} method      */
specifier|private
name|CompositeRegistration
name|registration
decl_stmt|;
comment|/**      * for statistics: tracks how many times prefiltering excluded a commit      */
specifier|private
name|int
name|prefilterExcludeCount
decl_stmt|;
comment|/**      * for statistics: tracks how many times prefiltering included a commit      */
specifier|private
name|int
name|prefilterIncludeCount
decl_stmt|;
comment|/**      * for statistics: tracks how many times prefiltering was ignored (not evaluated at all),      * either because it was disabled, queue too small, CommitInfo null or CommitContext null      */
specifier|private
name|int
name|prefilterSkipCount
decl_stmt|;
specifier|public
name|ChangeProcessor
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|ListenerTracker
name|tracker
parameter_list|,
name|FilterProvider
name|filter
parameter_list|,
name|StatisticManager
name|statisticManager
parameter_list|,
name|int
name|queueLength
parameter_list|,
name|CommitRateLimiter
name|commitRateLimiter
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|eventListener
operator|=
name|tracker
operator|.
name|getTrackedListener
argument_list|()
expr_stmt|;
name|filterProvider
operator|=
operator|new
name|AtomicReference
argument_list|<
name|FilterProvider
argument_list|>
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventCount
operator|=
name|statisticManager
operator|.
name|getMeter
argument_list|(
name|OBSERVATION_EVENT_COUNTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventDuration
operator|=
name|statisticManager
operator|.
name|getTimer
argument_list|(
name|OBSERVATION_EVENT_DURATION
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxQueueLengthRecorder
operator|=
name|statisticManager
operator|.
name|maxQueLengthRecorder
argument_list|()
expr_stmt|;
name|this
operator|.
name|queueLength
operator|=
name|queueLength
expr_stmt|;
name|this
operator|.
name|commitRateLimiter
operator|=
name|commitRateLimiter
expr_stmt|;
block|}
comment|/**      * Set the filter for the events this change processor will generate.      * @param filter      */
specifier|public
name|void
name|setFilterProvider
parameter_list|(
name|FilterProvider
name|filter
parameter_list|)
block|{
name|filterProvider
operator|.
name|set
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/** for testing only - hence package protected **/
name|FilterProvider
name|getFilterProvider
parameter_list|()
block|{
return|return
name|filterProvider
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|ChangeProcessorMBean
name|getMBean
parameter_list|()
block|{
return|return
operator|new
name|ChangeProcessorMBean
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getPrefilterExcludeCount
parameter_list|()
block|{
return|return
name|prefilterExcludeCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrefilterIncludeCount
parameter_list|()
block|{
return|return
name|prefilterIncludeCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrefilterSkipCount
parameter_list|()
block|{
return|return
name|prefilterSkipCount
return|;
block|}
block|}
return|;
block|}
comment|/**      * Start this change processor      * @param whiteboard  the whiteboard instance to used for scheduling individual      *                    runs of this change processor.      * @throws IllegalStateException if started already      */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|checkState
argument_list|(
name|registration
operator|==
literal|null
argument_list|,
literal|"Change processor started already"
argument_list|)
expr_stmt|;
specifier|final
name|WhiteboardExecutor
name|executor
init|=
operator|new
name|WhiteboardExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
specifier|final
name|FilteringObserver
name|filteringObserver
init|=
name|createObserver
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|listenerId
operator|=
name|COUNTER
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|""
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|LISTENER_ID
argument_list|,
name|listenerId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|tracker
operator|.
name|toString
argument_list|()
decl_stmt|;
name|registration
operator|=
operator|new
name|CompositeRegistration
argument_list|(
name|registerObserver
argument_list|(
name|whiteboard
argument_list|,
name|filteringObserver
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|EventListenerMBean
operator|.
name|class
argument_list|,
name|tracker
operator|.
name|getListenerMBean
argument_list|()
argument_list|,
literal|"EventListener"
argument_list|,
name|name
argument_list|,
name|attrs
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BackgroundObserverMBean
operator|.
name|class
argument_list|,
name|filteringObserver
operator|.
name|getBackgroundObserver
argument_list|()
operator|.
name|getMBean
argument_list|()
argument_list|,
name|BackgroundObserverMBean
operator|.
name|TYPE
argument_list|,
name|name
argument_list|,
name|attrs
argument_list|)
argument_list|,
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|ChangeProcessorMBean
operator|.
name|class
argument_list|,
name|getMBean
argument_list|()
argument_list|,
name|ChangeProcessorMBean
operator|.
name|TYPE
argument_list|,
name|name
argument_list|,
name|attrs
argument_list|)
argument_list|,
comment|//TODO If FilterProvider gets changed later then MBean would need to be
comment|// re-registered
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|FilterConfigMBean
operator|.
name|class
argument_list|,
name|filterProvider
operator|.
name|get
argument_list|()
operator|.
name|getConfigMBean
argument_list|()
argument_list|,
name|FilterConfigMBean
operator|.
name|TYPE
argument_list|,
name|name
argument_list|,
name|attrs
argument_list|)
argument_list|,
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|filteringObserver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|tracker
operator|.
name|recordOneSecond
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FilteringObserver
name|createObserver
parameter_list|(
specifier|final
name|WhiteboardExecutor
name|executor
parameter_list|)
block|{
name|FilteringDispatcher
name|fd
init|=
operator|new
name|FilteringDispatcher
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BackgroundObserver
name|bo
init|=
operator|new
name|BackgroundObserver
argument_list|(
name|fd
argument_list|,
name|executor
argument_list|,
name|queueLength
argument_list|)
block|{
specifier|private
specifier|volatile
name|long
name|delay
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|blocking
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|added
parameter_list|(
name|int
name|newQueueSize
parameter_list|)
block|{
name|queueSizeChanged
argument_list|(
name|newQueueSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|removed
parameter_list|(
name|int
name|newQueueSize
parameter_list|,
name|long
name|created
parameter_list|)
block|{
name|queueSizeChanged
argument_list|(
name|newQueueSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|queueSizeChanged
parameter_list|(
name|int
name|newQueueSize
parameter_list|)
block|{
name|maxQueueLengthRecorder
operator|.
name|recordValue
argument_list|(
name|newQueueSize
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|recordQueueLength
argument_list|(
name|newQueueSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newQueueSize
operator|>=
name|queueLength
condition|)
block|{
if|if
condition|(
name|commitRateLimiter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|blocking
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Revision queue is full. Further commits will be blocked."
argument_list|)
expr_stmt|;
block|}
name|commitRateLimiter
operator|.
name|blockCommits
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|blocking
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Revision queue is full. Further revisions will be compacted."
argument_list|)
expr_stmt|;
block|}
name|blocking
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|double
name|fillRatio
init|=
operator|(
name|double
operator|)
name|newQueueSize
operator|/
name|queueLength
decl_stmt|;
if|if
condition|(
name|fillRatio
operator|>
name|DELAY_THRESHOLD
condition|)
block|{
if|if
condition|(
name|commitRateLimiter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|delay
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Revision queue is becoming full. Further commits will be delayed."
argument_list|)
expr_stmt|;
block|}
comment|// Linear backoff proportional to the number of items exceeding
comment|// DELAY_THRESHOLD. Offset by 1 to trigger the log message in the
comment|// else branch once the queue falls below DELAY_THRESHOLD again.
name|int
name|newDelay
init|=
literal|1
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
name|fillRatio
operator|-
name|DELAY_THRESHOLD
operator|)
operator|/
operator|(
literal|1
operator|-
name|DELAY_THRESHOLD
operator|)
operator|*
name|MAX_DELAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDelay
operator|>
name|delay
condition|)
block|{
name|delay
operator|=
name|newDelay
expr_stmt|;
name|commitRateLimiter
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|commitRateLimiter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Revision queue becoming empty. Unblocking commits"
argument_list|)
expr_stmt|;
name|commitRateLimiter
operator|.
name|setDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|delay
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|blocking
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Revision queue becoming empty. Stop delaying commits."
argument_list|)
expr_stmt|;
name|commitRateLimiter
operator|.
name|unblockCommits
argument_list|()
expr_stmt|;
name|blocking
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Prefiltering BackgroundObserver for "
operator|+
name|ChangeProcessor
operator|.
name|this
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|FilteringObserver
argument_list|(
name|bo
argument_list|,
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|excludes
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|PREFILTERING_TESTMODE
condition|)
block|{
comment|// then we don't prefilter but only test later
name|prefilterSkipCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|FilterResult
name|filterResult
init|=
name|evalPrefilter
argument_list|(
name|root
argument_list|,
name|info
argument_list|,
name|getChangeSet
argument_list|(
name|info
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|filterResult
condition|)
block|{
case|case
name|PREFILTERING_SKIPPED
case|:
block|{
name|prefilterSkipCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
case|case
name|EXCLUDE
case|:
block|{
name|prefilterExcludeCount
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
case|case
name|INCLUDE
case|:
block|{
name|prefilterIncludeCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
default|default:
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"isExcluded: unknown/unsupported filter result: "
operator|+
name|filterResult
argument_list|)
expr_stmt|;
name|prefilterSkipCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|Monitor
name|runningMonitor
init|=
operator|new
name|Monitor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RunningGuard
name|running
init|=
operator|new
name|RunningGuard
argument_list|(
name|runningMonitor
argument_list|)
decl_stmt|;
comment|/**      * Try to stop this change processor if running. This method will wait      * the specified time for a pending event listener to complete. If      * no timeout occurred no further events will be delivered after this      * method returns.      *<p>      * Does nothing if stopped already.      *      * @param timeOut time this method will wait for an executing event      *                listener to complete.      * @param unit    time unit for {@code timeOut}      * @return {@code true} if no time out occurred and this change processor      *         could be stopped, {@code false} otherwise.      * @throws IllegalStateException if not yet started      */
specifier|public
specifier|synchronized
name|boolean
name|stopAndWait
parameter_list|(
name|int
name|timeOut
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkState
argument_list|(
name|registration
operator|!=
literal|null
argument_list|,
literal|"Change processor not started"
argument_list|)
expr_stmt|;
if|if
condition|(
name|running
operator|.
name|stop
argument_list|()
condition|)
block|{
if|if
condition|(
name|runningMonitor
operator|.
name|enter
argument_list|(
name|timeOut
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Timed out
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Stopped already
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Stop this change processor after all pending events have been      * delivered. In contrast to {@link #stopAndWait(int, java.util.concurrent.TimeUnit)}      * this method returns immediately without waiting for pending listeners to      * complete.      */
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|checkState
argument_list|(
name|registration
operator|!=
literal|null
argument_list|,
literal|"Change processor not started"
argument_list|)
expr_stmt|;
if|if
condition|(
name|running
operator|.
name|stop
argument_list|()
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Utility method that extracts the ChangeSet from a CommitInfo if possible.      * @param info      * @return      */
specifier|public
specifier|static
name|ChangeSet
name|getChangeSet
parameter_list|(
name|CommitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CommitContext
name|context
init|=
operator|(
name|CommitContext
operator|)
name|info
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|ChangeSet
operator|)
name|context
operator|.
name|get
argument_list|(
name|COMMIT_CONTEXT_OBSERVATION_CHANGESET
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|FilterResult
name|prefilterTestResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|PREFILTERING_TESTMODE
condition|)
block|{
comment|// OAK-4908 test mode: when the ChangeCollectorProvider is enabled
comment|// there is the option to have the ChangeProcessors run in so-called
comment|// 'test mode'. In this test mode the prefiltering is not applied,
comment|// but instead verified if it *would have prefiltered correctly*.
comment|// that test is therefore done at dequeue-time, hence in
comment|// contentChanged
comment|// TODO: remove this testing mechanism after a while
try|try
block|{
name|prefilterTestResult
operator|=
name|evalPrefilter
argument_list|(
name|after
argument_list|,
name|info
argument_list|,
name|getChangeSet
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"contentChanged: exception in wouldBeExcludedCommit: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|long
name|start
init|=
name|PERF_LOGGER
operator|.
name|start
argument_list|()
decl_stmt|;
name|FilterProvider
name|provider
init|=
name|filterProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|onEventInvoked
init|=
literal|false
decl_stmt|;
comment|// FIXME don't rely on toString for session id
if|if
condition|(
name|provider
operator|.
name|includeCommit
argument_list|(
name|contentSession
operator|.
name|toString
argument_list|()
argument_list|,
name|info
argument_list|)
condition|)
block|{
name|EventFilter
name|filter
init|=
name|provider
operator|.
name|getFilter
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|EventIterator
name|events
init|=
operator|new
name|EventQueue
argument_list|(
name|namePathMapper
argument_list|,
name|info
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
name|provider
operator|.
name|getSubTrees
argument_list|()
argument_list|,
name|Filters
operator|.
name|all
argument_list|(
name|filter
argument_list|,
name|VISIBLE_FILTER
argument_list|)
argument_list|,
name|provider
operator|.
name|getEventAggregator
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|hasEvents
init|=
name|events
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|recordProducerTime
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|time
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEvents
operator|&&
name|runningMonitor
operator|.
name|enterIf
argument_list|(
name|running
argument_list|)
condition|)
block|{
if|if
condition|(
name|commitRateLimiter
operator|!=
literal|null
condition|)
block|{
name|commitRateLimiter
operator|.
name|beforeNonBlocking
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|CountingIterator
name|countingEvents
init|=
operator|new
name|CountingIterator
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|onEventInvoked
operator|=
literal|true
expr_stmt|;
name|eventListener
operator|.
name|onEvent
argument_list|(
name|countingEvents
argument_list|)
expr_stmt|;
name|countingEvents
operator|.
name|updateCounters
argument_list|(
name|eventCount
argument_list|,
name|eventDuration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|commitRateLimiter
operator|!=
literal|null
condition|)
block|{
name|commitRateLimiter
operator|.
name|afterNonBlocking
argument_list|()
expr_stmt|;
block|}
name|runningMonitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|prefilterTestResult
operator|!=
literal|null
condition|)
block|{
comment|// OAK-4908 test mode
if|if
condition|(
name|prefilterTestResult
operator|==
name|FilterResult
operator|.
name|EXCLUDE
operator|&&
name|onEventInvoked
condition|)
block|{
comment|// this is not ok, an event would have gotten
comment|// excluded-by-prefiltering even though
comment|// it actually got an event.
name|LOG
operator|.
name|warn
argument_list|(
literal|"contentChanged: delivering event which would have been prefiltered, "
operator|+
literal|"info={}, this={}, listener={}"
argument_list|,
name|info
argument_list|,
name|this
argument_list|,
name|eventListener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefilterTestResult
operator|==
name|FilterResult
operator|.
name|INCLUDE
operator|&&
operator|!
name|onEventInvoked
operator|&&
name|info
operator|!=
literal|null
operator|&&
name|info
operator|!=
name|CommitInfo
operator|.
name|EMPTY
condition|)
block|{
comment|// this can occur arbitrarily frequent. as prefiltering
comment|// is not perfect, it can
comment|// have false negatives - ie it can include even though
comment|// no event is then created
comment|// hence we can only really log at debug here
name|LOG
operator|.
name|debug
argument_list|(
literal|"contentChanged: no event to deliver but not prefiltered, info={}, this={}, listener={}"
argument_list|,
name|info
argument_list|,
name|this
argument_list|,
name|eventListener
argument_list|)
expr_stmt|;
block|}
block|}
name|PERF_LOGGER
operator|.
name|end
argument_list|(
name|start
argument_list|,
literal|100
argument_list|,
literal|"Generated events (before: {}, after: {})"
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while dispatching observation events for "
operator|+
name|tracker
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|CountingIterator
implements|implements
name|EventIterator
block|{
specifier|private
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EventIterator
name|events
decl_stmt|;
specifier|private
name|long
name|eventCount
decl_stmt|;
specifier|private
name|long
name|sysTime
decl_stmt|;
specifier|public
name|CountingIterator
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
name|this
operator|.
name|events
operator|=
name|events
expr_stmt|;
block|}
specifier|public
name|void
name|updateCounters
parameter_list|(
name|MeterStats
name|eventCount
parameter_list|,
name|TimerStats
name|eventDuration
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|eventCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|eventCount
operator|.
name|mark
argument_list|(
name|this
operator|.
name|eventCount
argument_list|)
expr_stmt|;
name|eventDuration
operator|.
name|update
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
operator|-
name|sysTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventCount
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Event
name|next
parameter_list|()
block|{
if|if
condition|(
name|eventCount
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Access to EventIterator outside the onEvent callback detected. This will "
operator|+
literal|"cause observation related values in RepositoryStatistics to become unreliable."
argument_list|)
expr_stmt|;
name|eventCount
operator|=
operator|-
literal|2
expr_stmt|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|events
operator|.
name|nextEvent
argument_list|()
return|;
block|}
finally|finally
block|{
name|eventCount
operator|++
expr_stmt|;
name|sysTime
operator|+=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|events
operator|.
name|hasNext
argument_list|()
return|;
block|}
finally|finally
block|{
name|sysTime
operator|+=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Event
name|nextEvent
parameter_list|()
block|{
return|return
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skip
parameter_list|(
name|long
name|skipNum
parameter_list|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|events
operator|.
name|skip
argument_list|(
name|skipNum
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sysTime
operator|+=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|events
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|events
operator|.
name|getPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RunningGuard
extends|extends
name|Guard
block|{
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|public
name|RunningGuard
parameter_list|(
name|Monitor
name|monitor
parameter_list|)
block|{
name|super
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
operator|!
name|stopped
return|;
block|}
comment|/**          * @return  {@code true} if this call set this guard to stopped,          *          {@code false} if another call set this guard to stopped before.          */
specifier|public
name|boolean
name|stop
parameter_list|()
block|{
name|boolean
name|wasStopped
init|=
name|stopped
decl_stmt|;
name|stopped
operator|=
literal|true
expr_stmt|;
return|return
operator|!
name|wasStopped
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChangeProcessor ["
operator|+
literal|"listenerId="
operator|+
name|listenerId
operator|+
literal|", tracker="
operator|+
name|tracker
operator|+
literal|", contentSession="
operator|+
name|contentSession
operator|+
literal|", eventCount="
operator|+
name|eventCount
operator|+
literal|", eventDuration="
operator|+
name|eventDuration
operator|+
literal|", commitRateLimiter="
operator|+
name|commitRateLimiter
operator|+
literal|", running="
operator|+
name|running
operator|.
name|isSatisfied
argument_list|()
operator|+
literal|"]"
return|;
block|}
comment|/**      * Evaluate the prefilter for a given commit.      * @param changeSet       *       * @return a FilterResult indicating either inclusion, exclusion or      *         inclusion-due-to-skipping. The latter is used to reflect      *         prefilter evaluation better in statistics (as it could also have      *         been reported just as include)      */
specifier|private
name|FilterResult
name|evalPrefilter
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|,
name|ChangeSet
name|changeSet
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
name|FilterResult
operator|.
name|PREFILTERING_SKIPPED
return|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
comment|// likely only occurs at startup
comment|// we can't do any diffing etc, so just not exclude it
return|return
name|FilterResult
operator|.
name|PREFILTERING_SKIPPED
return|;
block|}
specifier|final
name|FilterProvider
name|fp
init|=
name|filterProvider
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// FIXME don't rely on toString for session id
if|if
condition|(
operator|!
name|fp
operator|.
name|includeCommit
argument_list|(
name|contentSession
operator|.
name|toString
argument_list|()
argument_list|,
name|info
argument_list|)
condition|)
block|{
comment|// 'classic' (and cheap pre-) filtering
return|return
name|FilterResult
operator|.
name|EXCLUDE
return|;
block|}
if|if
condition|(
name|changeSet
operator|==
literal|null
condition|)
block|{
comment|// then can't do any prefiltering since it was not
comment|// able to complete the sets (within the given boundaries)
comment|// (this corresponds to a large commit, which thus can't
comment|// go through prefiltering)
return|return
name|FilterResult
operator|.
name|PREFILTERING_SKIPPED
return|;
block|}
specifier|final
name|ChangeSetFilter
name|prefilter
init|=
name|fp
decl_stmt|;
if|if
condition|(
name|prefilter
operator|.
name|excludes
argument_list|(
name|changeSet
argument_list|)
condition|)
block|{
return|return
name|FilterResult
operator|.
name|EXCLUDE
return|;
block|}
else|else
block|{
return|return
name|FilterResult
operator|.
name|INCLUDE
return|;
block|}
block|}
block|}
end_class

end_unit

