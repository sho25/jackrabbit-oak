begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|IllegalRepositoryStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
operator|.
name|NodeTypeDefinitionNodeStoreChecker
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Validates that the<tt>NodeTypeDefinitionNodeStoreChecker</tt> is properly applied  *   *<p>This class does not attempt to exhaustively validate the checks that should be performed, only  * that they are performed when needed.</p>  *  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NodeTypeDefinitionNodeStoreCheckerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|mountWithConsistentDefinition
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|IOException
block|{
operator|new
name|Fixture
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initMountContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_REP_ROOT
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalRepositoryStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mountWithInconsistentDefinition
parameter_list|()
throws|throws
name|CommitFailedException
block|{
operator|new
name|Fixture
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initMountContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:missing"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalRepositoryStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|addingDefaultPrimaryTypeFails
parameter_list|()
throws|throws
name|CommitFailedException
block|{
operator|new
name|Fixture
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initMountContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nt:missing"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// missing primary type - would try to add default one, which fails due to the NodeBuilder
comment|// being read-only
name|builder
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mountWithDefinitionButHiddenNodes
parameter_list|()
throws|throws
name|CommitFailedException
block|{
operator|new
name|Fixture
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initMountContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_REP_ROOT
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
comment|// if visible would try to add a default node type - which would fail
name|builder
operator|.
name|child
argument_list|(
literal|":hidden"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|abstract
class|class
name|Fixture
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|MemoryNodeStore
name|root
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|INITIAL_CONTENT
argument_list|)
decl_stmt|;
name|MemoryNodeStore
name|mount
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|mountBuilder
init|=
name|mount
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|initMountContent
argument_list|(
name|mountBuilder
argument_list|)
expr_stmt|;
name|mount
operator|.
name|merge
argument_list|(
name|mountBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"first"
argument_list|,
literal|"/first"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeTypeDefinitionNodeStoreChecker
name|checker
init|=
operator|new
name|NodeTypeDefinitionNodeStoreChecker
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|checker
operator|.
name|createContext
argument_list|(
name|root
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|ErrorHolder
name|errorHolder
init|=
operator|new
name|ErrorHolder
argument_list|()
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"first"
argument_list|)
argument_list|,
name|mount
argument_list|)
argument_list|,
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|mount
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|errorHolder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|initMountContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

