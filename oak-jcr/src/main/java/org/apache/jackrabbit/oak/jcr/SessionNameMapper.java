begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|AbstractNameMapper
import|;
end_import

begin_class
specifier|public
class|class
name|SessionNameMapper
extends|extends
name|AbstractNameMapper
block|{
specifier|private
specifier|final
name|SessionDelegate
name|sessionDelegate
decl_stmt|;
specifier|public
name|SessionNameMapper
parameter_list|(
name|SessionDelegate
name|sessionDelegate
parameter_list|)
block|{
name|this
operator|.
name|sessionDelegate
operator|=
name|sessionDelegate
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|protected
name|String
name|getJcrPrefix
parameter_list|(
name|String
name|oakPrefix
parameter_list|)
block|{
try|try
block|{
name|String
name|ns
init|=
name|sessionDelegate
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getURI
argument_list|(
name|oakPrefix
argument_list|)
decl_stmt|;
return|return
name|sessionDelegate
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|SessionDelegate
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Could not get JCR prefix for OAK prefix "
operator|+
name|oakPrefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|protected
name|String
name|getOakPrefix
parameter_list|(
name|String
name|jcrPrefix
parameter_list|)
block|{
try|try
block|{
name|String
name|ns
init|=
name|sessionDelegate
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
name|jcrPrefix
argument_list|)
decl_stmt|;
return|return
name|sessionDelegate
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|ns
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|SessionDelegate
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Could not get OAK prefix for JCR prefix "
operator|+
name|jcrPrefix
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|protected
name|String
name|getOakPrefixFromURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
return|return
name|sessionDelegate
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|SessionDelegate
operator|.
name|log
operator|.
name|debug
argument_list|(
literal|"Could not get OAK prefix for URI "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSessionLocalMappings
parameter_list|()
block|{
if|if
condition|(
name|sessionDelegate
operator|.
name|getSession
argument_list|()
operator|instanceof
name|SessionImpl
condition|)
block|{
return|return
operator|(
operator|(
name|SessionImpl
operator|)
name|sessionDelegate
operator|.
name|getSession
argument_list|()
operator|)
operator|.
name|hasSessionLocalMappings
argument_list|()
return|;
block|}
else|else
block|{
comment|// we don't know
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

