begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
operator|.
name|newIOTracer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_comment
comment|/**  * Utility class for running the various {@link Trace} implementations.  */
end_comment

begin_enum
specifier|public
enum|enum
name|Traces
block|{
comment|/**      * Utility for running a {@link DepthFirstTrace depth first trace}.      */
name|DEPTH
block|{
comment|/**          * Collect an IO trace on a segment store using a {@link DepthFirstTrace depth first trace}.          * @param segmentStore       path to the segment store          * @param mmap               whether to enable memory mapping          * @param segmentCacheSize   size of the segment cache in MB          * @param path               path to the root node (starting from the super root) from where          *                           to start traversing          * @param depth              maximal number of levels to traverse          * @param output             output file where the trace is written to          * @throws IOException          */
annotation|@
name|Override
specifier|public
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|Nonnull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
name|segmentStore
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|DepthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|DepthFirstTrace
argument_list|(
name|depth
argument_list|,
name|path
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
comment|/**      * Utility for running a {@link BreadthFirstTrace breadth first trace}.      */
name|BREADTH
block|{
comment|/**          * Collect an IO trace on a segment store using a {@link BreadthFirstTrace breadth first trace}.          * @param segmentStore       path to the segment store          * @param mmap               whether to enable memory mapping          * @param segmentCacheSize   size of the segment cache in MB          * @param path               path to the root node (starting from the super root) from where          *                           to start traversing          * @param depth              maximal number of levels to traverse          * @param output             output file where the trace is written to          * @throws IOException          */
annotation|@
name|Override
specifier|public
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|Nonnull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|ioMonitor
lambda|->
name|newFileStore
argument_list|(
name|fileStoreBuilder
argument_list|(
name|segmentStore
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|mmap
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|segmentCacheSize
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
argument_list|)
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|BreadthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|BreadthFirstTrace
argument_list|(
name|depth
argument_list|,
name|path
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|;
specifier|public
specifier|abstract
name|void
name|collectIOTrace
parameter_list|(
annotation|@
name|Nonnull
name|File
name|segmentStore
parameter_list|,
name|boolean
name|mmap
parameter_list|,
name|int
name|segmentCacheSize
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|File
name|output
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
function_decl|;
annotation|@
name|Nonnull
specifier|private
specifier|static
name|FileStore
name|newFileStore
parameter_list|(
name|FileStoreBuilder
name|fileStoreBuilder
parameter_list|)
block|{
try|try
block|{
return|return
name|fileStoreBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

