begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|wrapper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|SimpleKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the security wrapper.  */
end_comment

begin_class
specifier|public
class|class
name|SecurityWrapperTest
block|{
comment|// TODO: Remove SimpleKernelImpl-specific assumptions from the test
specifier|private
specifier|final
name|MicroKernel
name|mk
init|=
operator|new
name|SimpleKernelImpl
argument_list|(
literal|"mem:SecurityWrapperTest"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|head
decl_stmt|;
specifier|private
name|MicroKernel
name|mkAdmin
decl_stmt|;
specifier|private
name|MicroKernel
name|mkGuest
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \":user\": { \":rights\":\"admin\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \":user/guest\": {\"password\": \"guest\", \"rights\":\"read\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \":user/sa\": {\"password\": \"abc\", \"rights\":\"admin\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mkAdmin
operator|=
operator|new
name|SecurityWrapper
argument_list|(
name|mk
argument_list|,
literal|"sa"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|mkGuest
operator|=
operator|new
name|SecurityWrapper
argument_list|(
name|mk
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|wrongPassword
parameter_list|()
block|{
try|try
block|{
operator|new
name|SecurityWrapper
argument_list|(
name|mk
argument_list|,
literal|"sa"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// expected (wrong password)
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|head
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": { \"data\": \"Hello\" }"
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"- \"test\""
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|head
operator|=
name|mkGuest
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": { \"data\": \"Hello\" }"
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getJournal
parameter_list|()
block|{
name|String
name|fromRevision
init|=
name|mkAdmin
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|toRevision
init|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": { \"data\": \"Hello\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|toRevision
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"test/data\": \"Hallo\""
argument_list|,
name|toRevision
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|toRevision
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \"test/data\": null"
argument_list|,
name|toRevision
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|j2
init|=
name|mkGuest
operator|.
name|getJournal
argument_list|(
name|fromRevision
argument_list|,
name|toRevision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|filterJournal
argument_list|(
name|j2
argument_list|)
argument_list|)
expr_stmt|;
name|toRevision
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \":rights\": \"read\""
argument_list|,
name|fromRevision
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|j3
init|=
name|mkGuest
operator|.
name|getJournal
argument_list|(
name|fromRevision
argument_list|,
name|toRevision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/test\":{\"data\":\"Hello\"}\n"
operator|+
literal|"^\"/test/data\":\"Hallo\"\n"
operator|+
literal|"^\"/test/data\":null\n"
argument_list|,
name|filterJournal
argument_list|(
name|j3
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|journal
init|=
name|mkAdmin
operator|.
name|getJournal
argument_list|(
name|fromRevision
argument_list|,
name|toRevision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/test\":{\"data\":\"Hello\"}\n"
operator|+
literal|"^\"/test/data\":\"Hallo\"\n"
operator|+
literal|"^\"/test/data\":null\n"
operator|+
literal|"+\"/:rights\":\"read\""
argument_list|,
name|filterJournal
argument_list|(
name|journal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodes
parameter_list|()
block|{
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mkAdmin
operator|.
name|nodeExists
argument_list|(
literal|"/:user"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mkGuest
operator|.
name|nodeExists
argument_list|(
literal|"/:user"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mkGuest
operator|.
name|getNodes
argument_list|(
literal|"/:user"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^ \":rights\": \"read\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mkAdmin
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": { \"data\": \"Hello\" }"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mkAdmin
operator|.
name|nodeExists
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mkGuest
operator|.
name|getNodes
argument_list|(
literal|"/unknown"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mkGuest
operator|.
name|getNodes
argument_list|(
literal|"/unknown/node"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mkGuest
operator|.
name|nodeExists
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mkGuest
operator|.
name|getNodes
argument_list|(
literal|"/unknown"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":rights\":\"read\",\":childNodeCount\":2,\":user\":{\":rights\":\"admin\",\":childNodeCount\":2,\"guest\":{},\"sa\":{}},\"test\":{\"data\":\"Hello\",\":childNodeCount\":0}}"
argument_list|,
name|mkAdmin
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":1,\"test\":{\"data\":\"Hello\",\":childNodeCount\":0}}"
argument_list|,
name|mkGuest
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|filterJournal
parameter_list|(
name|String
name|journal
parameter_list|)
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|journal
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|boolean
name|isNew
init|=
literal|false
decl_stmt|;
do|do
block|{
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ts"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"msg"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"changes"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|changes
init|=
name|t
operator|.
name|readString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNew
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
comment|// the first revision isn't new, all others are
name|isNew
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

