begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Listener for {@code SegmentNotFoundException}. Its purpose is to e.g. provide meaningful  * logging information about these exceptions.  */
end_comment

begin_interface
specifier|public
interface|interface
name|SegmentNotFoundExceptionListener
block|{
comment|/**      * Listener instance doing nothing on a {@code SegmentNotFoundException}      */
name|SegmentNotFoundExceptionListener
name|IGNORE_SNFE
init|=
operator|new
name|SegmentNotFoundExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
annotation|@
name|Nonnull
name|SegmentId
name|id
parameter_list|,
annotation|@
name|Nonnull
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{ }
block|}
decl_stmt|;
comment|/**      * Listener instance logging the {@code SegmentNotFoundException} at error level.      */
name|SegmentNotFoundExceptionListener
name|LOG_SNFE
init|=
operator|new
name|SegmentNotFoundExceptionListener
argument_list|()
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentNotFoundExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
annotation|@
name|Nonnull
name|SegmentId
name|id
parameter_list|,
annotation|@
name|Nonnull
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Segment not found: {}. {}"
argument_list|,
name|this
argument_list|,
name|id
operator|.
name|gcInfo
argument_list|()
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * Notification about {@code SegmentNotFoundException} thrown by the underlying store      * in a meaningful way. E.g. by logging it.      * @param id the segment id of the offending {@code Segment}      * @param snfe the raised exception      */
name|void
name|notify
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|SegmentId
name|id
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|SegmentNotFoundException
name|snfe
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

