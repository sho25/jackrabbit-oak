begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_comment
comment|// filename: ExternalSort.java
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_comment
comment|/**  * Source copied from a publicly available library.  * @see<a href="https://code.google.com/p/externalsortinginjava/">https://code.google.com/p/externalsortinginjava</a>  *  *<pre>  * Goal: offer a generic external-memory sorting program in Java.  *   * It must be : - hackable (easy to adapt) - scalable to large files - sensibly efficient.  *   * This software is in the public domain.  *   * Usage: java org/apache/oak/commons/sort//ExternalSort somefile.txt out.txt  *   * You can change the default maximal number of temporary files with the -t flag: java  * org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt -t 3  *   * You can change the default maximum memory available with the -m flag: java  * org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt -m 8192  *   * For very large files, you might want to use an appropriate flag to allocate more memory to  * the Java VM: java -Xms2G org/apache/oak/commons/sort/ExternalSort somefile.txt out.txt  *   * By (in alphabetical order) Philippe Beaudoin, Eleftherios Chetzakis, Jon Elsas, Christan  * Grant, Daniel Haran, Daniel Lemire, Sugumaran Harikrishnan, Jerry Yang, First published:  * April 2010 originally posted at  * http://lemire.me/blog/archives/2010/04/01/external-memory-sorting-in-java/  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|ExternalSort
block|{
comment|/*      * This sorts a file (input) to an output file (output) using default parameters      *       * @param file source file      *       * @param file output file      */
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|File
name|input
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|input
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|int
name|DEFAULTMAXTEMPFILES
init|=
literal|1024
decl_stmt|;
comment|/**     * Defines the default maximum memory to be used while sorting (8 MB)     */
specifier|static
specifier|final
name|long
name|DEFAULT_MAX_MEM_BYTES
init|=
literal|8388608L
decl_stmt|;
comment|// we divide the file into small blocks. If the blocks
comment|// are too small, we shall create too many temporary files.
comment|// If they are too big, we shall be using too much memory.
specifier|public
specifier|static
name|long
name|estimateBestSizeOfBlocks
parameter_list|(
name|File
name|filetobesorted
parameter_list|,
name|int
name|maxtmpfiles
parameter_list|,
name|long
name|maxMemory
parameter_list|)
block|{
name|long
name|sizeoffile
init|=
name|filetobesorted
operator|.
name|length
argument_list|()
operator|*
literal|2
decl_stmt|;
comment|/**          * We multiply by two because later on someone insisted on counting the memory usage as 2          * bytes per character. By this model, loading a file with 1 character will use 2 bytes.          */
comment|// we don't want to open up much more than maxtmpfiles temporary
comment|// files, better run
comment|// out of memory first.
name|long
name|blocksize
init|=
name|sizeoffile
operator|/
name|maxtmpfiles
operator|+
operator|(
name|sizeoffile
operator|%
name|maxtmpfiles
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
comment|// on the other hand, we don't want to create many temporary
comment|// files
comment|// for naught. If blocksize is less than maximum allowed memory,
comment|// scale the blocksize to be equal to the maxMemory parameter
if|if
condition|(
name|blocksize
operator|<
name|maxMemory
condition|)
block|{
name|blocksize
operator|=
name|maxMemory
expr_stmt|;
block|}
return|return
name|blocksize
return|;
block|}
comment|/**      * This will simply load the file by blocks of lines, then sort them in-memory, and write the      * result to temporary files that have to be merged later.      *       * @param file      *            some flat file      * @return a list of temporary flat files      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|sortInBatch
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|defaultcomparator
argument_list|,
name|DEFAULTMAXTEMPFILES
argument_list|,
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This will simply load the file by blocks of lines, then sort them in-memory, and write the      * result to temporary files that have to be merged later.      *       * @param file      *            some flat file      * @param cmp      *            string comparator      * @return a list of temporary flat files      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|sortInBatch
parameter_list|(
name|File
name|file
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|cmp
argument_list|,
name|DEFAULTMAXTEMPFILES
argument_list|,
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This will simply load the file by blocks of lines, then sort them in-memory, and write the      * result to temporary files that have to be merged later.      *       * @param file      *            some flat file      * @param cmp      *            string comparator      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded.      * @return a list of temporary flat files      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|sortInBatch
parameter_list|(
name|File
name|file
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|boolean
name|distinct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|cmp
argument_list|,
name|DEFAULTMAXTEMPFILES
argument_list|,
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|null
argument_list|,
name|distinct
argument_list|)
return|;
block|}
comment|/**      * This will simply load the file by blocks of lines, then sort them in-memory, and write the      * result to temporary files that have to be merged later. You can specify a bound on the number      * of temporary files that will be created.      *       * @param file      *            some flat file      * @param cmp      *            string comparator      * @param maxtmpfiles      *            maximal number of temporary files      * @param cs      *            character set to use (can use Charset.defaultCharset())      * @param tmpdirectory      *            location of the temporary files (set to null for default location)      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded.      * @param numHeader      *            number of lines to preclude before sorting starts      * @param usegzip use gzip compression for the temporary files      * @return a list of temporary flat files      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|sortInBatch
parameter_list|(
name|File
name|file
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|int
name|maxtmpfiles
parameter_list|,
name|long
name|maxMemory
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|File
name|tmpdirectory
parameter_list|,
name|boolean
name|distinct
parameter_list|,
name|int
name|numHeader
parameter_list|,
name|boolean
name|usegzip
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|fbr
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|)
decl_stmt|;
comment|// in bytes
name|long
name|blocksize
init|=
name|estimateBestSizeOfBlocks
argument_list|(
name|file
argument_list|,
name|maxtmpfiles
argument_list|,
name|maxMemory
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tmplist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|""
decl_stmt|;
try|try
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
comment|// in bytes
name|long
name|currentblocksize
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|currentblocksize
operator|<
name|blocksize
operator|)
operator|&&
operator|(
operator|(
name|line
operator|=
name|fbr
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// as long as you have enough memory
if|if
condition|(
name|counter
operator|<
name|numHeader
condition|)
block|{
name|counter
operator|++
expr_stmt|;
continue|continue;
block|}
name|tmplist
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// ram usage estimation, not
comment|// very accurate, still more
comment|// realistic that the simple 2 *
comment|// String.length
name|currentblocksize
operator|+=
name|StringSizeEstimator
operator|.
name|estimatedSizeOf
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|add
argument_list|(
name|sortAndSave
argument_list|(
name|tmplist
argument_list|,
name|cmp
argument_list|,
name|cs
argument_list|,
name|tmpdirectory
argument_list|,
name|distinct
argument_list|,
name|usegzip
argument_list|)
argument_list|)
expr_stmt|;
name|tmplist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|oef
parameter_list|)
block|{
if|if
condition|(
name|tmplist
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|sortAndSave
argument_list|(
name|tmplist
argument_list|,
name|cmp
argument_list|,
name|cs
argument_list|,
name|tmpdirectory
argument_list|,
name|distinct
argument_list|,
name|usegzip
argument_list|)
argument_list|)
expr_stmt|;
name|tmplist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
comment|/**      * This will simply load the file by blocks of lines, then sort them in-memory, and write the      * result to temporary files that have to be merged later. You can specify a bound on the number      * of temporary files that will be created.      *       * @param file      *            some flat file      * @param cmp      *            string comparator      * @param maxtmpfiles      *            maximal number of temporary files      * @param cs      *            character set to use (can use Charset.defaultCharset())      * @param tmpdirectory      *            location of the temporary files (set to null for default location)      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded.      * @return a list of temporary flat files      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|sortInBatch
parameter_list|(
name|File
name|file
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|int
name|maxtmpfiles
parameter_list|,
name|long
name|maxMemory
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|File
name|tmpdirectory
parameter_list|,
name|boolean
name|distinct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|cmp
argument_list|,
name|maxtmpfiles
argument_list|,
name|maxMemory
argument_list|,
name|cs
argument_list|,
name|tmpdirectory
argument_list|,
name|distinct
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Sort a list and save it to a temporary file      *       * @return the file containing the sorted data      * @param tmplist      *            data to be sorted      * @param cmp      *            string comparator      * @param cs      *            charset to use for output (can use Charset.defaultCharset())      * @param tmpdirectory      *            location of the temporary files (set to null for default location)      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded.      */
specifier|public
specifier|static
name|File
name|sortAndSave
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tmplist
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|File
name|tmpdirectory
parameter_list|,
name|boolean
name|distinct
parameter_list|,
name|boolean
name|usegzip
parameter_list|)
throws|throws
name|IOException
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tmplist
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|File
name|newtmpfile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"sortInBatch"
argument_list|,
literal|"flatfile"
argument_list|,
name|tmpdirectory
argument_list|)
decl_stmt|;
name|newtmpfile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|newtmpfile
argument_list|)
decl_stmt|;
name|int
name|zipBufferSize
init|=
literal|2048
decl_stmt|;
if|if
condition|(
name|usegzip
condition|)
block|{
name|out
operator|=
operator|new
name|GZIPOutputStream
argument_list|(
name|out
argument_list|,
name|zipBufferSize
argument_list|)
block|{
block|{
name|def
operator|.
name|setLevel
parameter_list|(
name|Deflater
operator|.
name|BEST_SPEED
parameter_list|)
constructor_decl|;
block|}
block|}
expr_stmt|;
block|}
name|BufferedWriter
name|fbw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|cs
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastLine
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|r
range|:
name|tmplist
control|)
block|{
comment|// Skip duplicate lines
if|if
condition|(
operator|!
name|distinct
operator|||
operator|(
name|lastLine
operator|==
literal|null
operator|||
operator|(
name|lastLine
operator|!=
literal|null
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|r
argument_list|,
name|lastLine
argument_list|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|fbw
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fbw
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|lastLine
operator|=
name|r
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fbw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|newtmpfile
return|;
block|}
comment|/**      * Sort a list and save it to a temporary file      *       * @return the file containing the sorted data      * @param tmplist      *            data to be sorted      * @param cmp      *            string comparator      * @param cs      *            charset to use for output (can use Charset.defaultCharset())      * @param tmpdirectory      *            location of the temporary files (set to null for default location)      */
specifier|public
specifier|static
name|File
name|sortAndSave
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tmplist
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|File
name|tmpdirectory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sortAndSave
argument_list|(
name|tmplist
argument_list|,
name|cmp
argument_list|,
name|cs
argument_list|,
name|tmpdirectory
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      * @param outputfile      *            file      * @return The number of lines sorted. (P. Beaudoin)      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|outputfile
argument_list|,
name|defaultcomparator
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      * @param outputfile      *            file      * @return The number of lines sorted. (P. Beaudoin)      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|outputfile
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      * @param outputfile      *            file      * @return The number of lines sorted. (P. Beaudoin)      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|boolean
name|distinct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|outputfile
argument_list|,
name|cmp
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
name|distinct
argument_list|)
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      *            The {@link List} of sorted {@link File}s to be merged.      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded. (elchetz@gmail.com)      * @param outputfile      *            The output {@link File} to merge the results to.      * @param cmp      *            The {@link Comparator} to use to compare {@link String}s.      * @param cs      *            The {@link Charset} to be used for the byte to character conversion.      * @param append      *            Pass<code>true</code> if result should append to {@link File} instead of      *            overwrite. Default to be false for overloading methods.      * @param usegzip      *            assumes we used gzip compression for temporary files      * @return The number of lines sorted. (P. Beaudoin)      * @since v0.1.4      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|boolean
name|distinct
parameter_list|,
name|boolean
name|append
parameter_list|,
name|boolean
name|usegzip
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|BinaryFileBuffer
argument_list|>
name|bfbs
init|=
operator|new
name|ArrayList
argument_list|<
name|BinaryFileBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
specifier|final
name|int
name|bufferSize
init|=
literal|2048
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
decl_stmt|;
if|if
condition|(
name|usegzip
condition|)
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
name|in
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BinaryFileBuffer
name|bfb
init|=
operator|new
name|BinaryFileBuffer
argument_list|(
name|br
argument_list|)
decl_stmt|;
name|bfbs
operator|.
name|add
argument_list|(
name|bfb
argument_list|)
expr_stmt|;
block|}
name|BufferedWriter
name|fbw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outputfile
argument_list|,
name|append
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rowcounter
init|=
name|merge
argument_list|(
name|fbw
argument_list|,
name|cmp
argument_list|,
name|distinct
argument_list|,
name|bfbs
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
name|rowcounter
return|;
block|}
comment|/**      * This merges several BinaryFileBuffer to an output writer.      *       * @param fbw      *            A buffer where we write the data.      * @param cmp      *            A comparator object that tells us how to sort the lines.      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded. (elchetz@gmail.com)      * @param buffers      *            Where the data should be read.      * @return The number of lines sorted. (P. Beaudoin)      *       */
specifier|public
specifier|static
name|int
name|merge
parameter_list|(
name|BufferedWriter
name|fbw
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|boolean
name|distinct
parameter_list|,
name|List
argument_list|<
name|BinaryFileBuffer
argument_list|>
name|buffers
parameter_list|)
throws|throws
name|IOException
block|{
name|PriorityQueue
argument_list|<
name|BinaryFileBuffer
argument_list|>
name|pq
init|=
operator|new
name|PriorityQueue
argument_list|<
name|BinaryFileBuffer
argument_list|>
argument_list|(
literal|11
argument_list|,
operator|new
name|Comparator
argument_list|<
name|BinaryFileBuffer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|BinaryFileBuffer
name|i
parameter_list|,
name|BinaryFileBuffer
name|j
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|i
operator|.
name|peek
argument_list|()
argument_list|,
name|j
operator|.
name|peek
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|BinaryFileBuffer
name|bfb
range|:
name|buffers
control|)
block|{
if|if
condition|(
operator|!
name|bfb
operator|.
name|empty
argument_list|()
condition|)
block|{
name|pq
operator|.
name|add
argument_list|(
name|bfb
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|rowcounter
init|=
literal|0
decl_stmt|;
name|String
name|lastLine
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|pq
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BinaryFileBuffer
name|bfb
init|=
name|pq
operator|.
name|poll
argument_list|()
decl_stmt|;
name|String
name|r
init|=
name|bfb
operator|.
name|pop
argument_list|()
decl_stmt|;
comment|// Skip duplicate lines
if|if
condition|(
operator|!
name|distinct
operator|||
operator|(
name|lastLine
operator|==
literal|null
operator|||
operator|(
name|lastLine
operator|!=
literal|null
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|r
argument_list|,
name|lastLine
argument_list|)
operator|!=
literal|0
operator|)
operator|)
condition|)
block|{
name|fbw
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|fbw
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|lastLine
operator|=
name|r
expr_stmt|;
block|}
operator|++
name|rowcounter
expr_stmt|;
if|if
condition|(
name|bfb
operator|.
name|empty
argument_list|()
condition|)
block|{
name|bfb
operator|.
name|fbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pq
operator|.
name|add
argument_list|(
name|bfb
argument_list|)
expr_stmt|;
comment|// add it back
block|}
block|}
block|}
finally|finally
block|{
name|fbw
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|BinaryFileBuffer
name|bfb
range|:
name|pq
control|)
block|{
name|bfb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rowcounter
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      *            The {@link List} of sorted {@link File}s to be merged.      * @param distinct      *            Pass<code>true</code> if duplicate lines should be discarded. (elchetz@gmail.com)      * @param outputfile      *            The output {@link File} to merge the results to.      * @param cmp      *            The {@link Comparator} to use to compare {@link String}s.      * @param cs      *            The {@link Charset} to be used for the byte to character conversion.      * @return The number of lines sorted. (P. Beaudoin)      * @since v0.1.2      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|Charset
name|cs
parameter_list|,
name|boolean
name|distinct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|outputfile
argument_list|,
name|cmp
argument_list|,
name|cs
argument_list|,
name|distinct
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This merges a bunch of temporary flat files      *       * @param files      * @param outputfile      *            file      * @param cs      *            character set to use to load the strings      * @return The number of lines sorted. (P. Beaudoin)      */
specifier|public
specifier|static
name|int
name|mergeSortedFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|outputfile
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|cmp
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|outputfile
argument_list|,
name|cmp
argument_list|,
name|cs
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|displayUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"java com.google.externalsorting.ExternalSort inputfile outputfile"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flags are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-v or --verbose: verbose output"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-d or --distinct: prune duplicate lines"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-t or --maxtmpfiles (followed by an integer): specify an upper bound on the number of temporary files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-m or --maxmembytes (followed by a long): specify an upper bound on the memory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-c or --charset (followed by a charset code): specify the character set to use (for sorting)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-z or --gzip: use compression for the temporary files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-H or --header (followed by an integer): ignore the first few lines"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-s or --store (following by a path): where to store the temporary files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-h or --help: display this message"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
name|boolean
name|distinct
init|=
literal|false
decl_stmt|;
name|int
name|maxtmpfiles
init|=
name|DEFAULTMAXTEMPFILES
decl_stmt|;
name|long
name|maxMemory
init|=
name|DEFAULT_MAX_MEM_BYTES
decl_stmt|;
name|Charset
name|cs
init|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
decl_stmt|;
name|String
name|inputfile
init|=
literal|null
decl_stmt|,
name|outputfile
init|=
literal|null
decl_stmt|;
name|File
name|tempFileStore
init|=
literal|null
decl_stmt|;
name|boolean
name|usegzip
init|=
literal|false
decl_stmt|;
name|int
name|headersize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|param
init|=
literal|0
init|;
name|param
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|param
control|)
block|{
if|if
condition|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--verbose"
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|displayUsage
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-d"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--distinct"
argument_list|)
condition|)
block|{
name|distinct
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-t"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--maxtmpfiles"
argument_list|)
operator|)
operator|&&
name|args
operator|.
name|length
operator|>
name|param
operator|+
literal|1
condition|)
block|{
name|param
operator|++
expr_stmt|;
name|maxtmpfiles
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|headersize
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"maxtmpfiles should be positive"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-m"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--maxmembytes"
argument_list|)
operator|)
operator|&&
name|args
operator|.
name|length
operator|>
name|param
operator|+
literal|1
condition|)
block|{
name|param
operator|++
expr_stmt|;
name|maxMemory
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|headersize
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"maxmembytes should be positive"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-c"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--charset"
argument_list|)
operator|)
operator|&&
name|args
operator|.
name|length
operator|>
name|param
operator|+
literal|1
condition|)
block|{
name|param
operator|++
expr_stmt|;
name|cs
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-z"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--gzip"
argument_list|)
condition|)
block|{
name|usegzip
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-H"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--header"
argument_list|)
operator|)
operator|&&
name|args
operator|.
name|length
operator|>
name|param
operator|+
literal|1
condition|)
block|{
name|param
operator|++
expr_stmt|;
name|headersize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|headersize
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"headersize should be positive"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"-s"
argument_list|)
operator|||
name|args
index|[
name|param
index|]
operator|.
name|equals
argument_list|(
literal|"--store"
argument_list|)
operator|)
operator|&&
name|args
operator|.
name|length
operator|>
name|param
operator|+
literal|1
condition|)
block|{
name|param
operator|++
expr_stmt|;
name|tempFileStore
operator|=
operator|new
name|File
argument_list|(
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inputfile
operator|==
literal|null
condition|)
block|{
name|inputfile
operator|=
name|args
index|[
name|param
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outputfile
operator|==
literal|null
condition|)
block|{
name|outputfile
operator|=
name|args
index|[
name|param
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unparsed: "
operator|+
name|args
index|[
name|param
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputfile
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"please provide input and output file names"
argument_list|)
expr_stmt|;
name|displayUsage
argument_list|()
expr_stmt|;
return|return;
block|}
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|defaultcomparator
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|l
init|=
name|sortInBatch
argument_list|(
operator|new
name|File
argument_list|(
name|inputfile
argument_list|)
argument_list|,
name|comparator
argument_list|,
name|maxtmpfiles
argument_list|,
name|maxMemory
argument_list|,
name|cs
argument_list|,
name|tempFileStore
argument_list|,
name|distinct
argument_list|,
name|headersize
argument_list|,
name|usegzip
argument_list|)
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"created "
operator|+
name|l
operator|.
name|size
argument_list|()
operator|+
literal|" tmp files"
argument_list|)
expr_stmt|;
block|}
name|mergeSortedFiles
argument_list|(
name|l
argument_list|,
operator|new
name|File
argument_list|(
name|outputfile
argument_list|)
argument_list|,
name|comparator
argument_list|,
name|cs
argument_list|,
name|distinct
argument_list|,
literal|false
argument_list|,
name|usegzip
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Comparator
argument_list|<
name|String
argument_list|>
name|defaultcomparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|r1
parameter_list|,
name|String
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

begin_class
class|class
name|BinaryFileBuffer
block|{
specifier|public
name|BufferedReader
name|fbr
decl_stmt|;
specifier|private
name|String
name|cache
decl_stmt|;
specifier|private
name|boolean
name|empty
decl_stmt|;
specifier|public
name|BinaryFileBuffer
parameter_list|(
name|BufferedReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fbr
operator|=
name|r
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|empty
parameter_list|()
block|{
return|return
name|this
operator|.
name|empty
return|;
block|}
specifier|private
name|void
name|reload
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|cache
operator|=
name|this
operator|.
name|fbr
operator|.
name|readLine
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|empty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|cache
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|empty
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|oef
parameter_list|)
block|{
name|this
operator|.
name|empty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|cache
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|fbr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|peek
parameter_list|()
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|cache
return|;
block|}
specifier|public
name|String
name|pop
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|answer
init|=
name|peek
argument_list|()
decl_stmt|;
name|reload
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

