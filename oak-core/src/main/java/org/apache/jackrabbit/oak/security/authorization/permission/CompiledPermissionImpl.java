begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * TODO  */
end_comment

begin_class
specifier|public
class|class
name|CompiledPermissionImpl
implements|implements
name|CompiledPermissions
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|userEntries
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|groupEntries
decl_stmt|;
specifier|public
name|CompiledPermissionImpl
parameter_list|(
annotation|@
name|Nonnull
name|ReadOnlyTree
name|permissionsTree
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
name|this
operator|.
name|principals
operator|=
name|checkNotNull
argument_list|(
name|principals
argument_list|)
expr_stmt|;
name|EntriesBuilder
name|builder
init|=
operator|new
name|EntriesBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
name|Tree
name|t
init|=
name|permissionsTree
operator|.
name|getChild
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|userEntries
operator|=
name|builder
operator|.
name|userEntries
operator|.
name|build
argument_list|()
expr_stmt|;
name|groupEntries
operator|=
name|builder
operator|.
name|groupEntries
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|isGranted
argument_list|(
name|tree
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|isGranted
argument_list|(
name|tree
argument_list|,
name|property
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
specifier|final
class|class
name|Key
implements|implements
name|Comparable
argument_list|<
name|Key
argument_list|>
block|{
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|long
name|order
decl_stmt|;
specifier|private
name|Key
parameter_list|(
name|NodeUtil
name|node
parameter_list|)
block|{
name|path
operator|=
name|node
operator|.
name|getString
argument_list|(
literal|"path"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|order
operator|=
name|node
operator|.
name|getLong
argument_list|(
literal|"order"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
comment|// TODO
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Entry
block|{
specifier|private
specifier|final
name|boolean
name|isAllow
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|privilegeNames
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|restrictions
decl_stmt|;
specifier|private
specifier|final
name|long
name|permissions
decl_stmt|;
specifier|private
name|Entry
parameter_list|(
name|NodeUtil
name|node
parameter_list|)
block|{
name|isAllow
operator|=
name|node
operator|.
name|hasPrimaryNodeTypeName
argument_list|(
name|NT_REP_GRANT_ACE
argument_list|)
expr_stmt|;
name|privilegeNames
operator|=
name|node
operator|.
name|getStrings
argument_list|(
name|REP_PRIVILEGES
argument_list|)
expr_stmt|;
name|restrictions
operator|=
literal|null
expr_stmt|;
comment|// TODO
name|permissions
operator|=
name|node
operator|.
name|getLong
argument_list|(
literal|"permissions"
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|EntriesBuilder
block|{
specifier|private
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|userEntries
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
specifier|private
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|Key
argument_list|,
name|Entry
argument_list|>
name|groupEntries
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
specifier|private
name|void
name|addEntry
parameter_list|(
annotation|@
name|Nonnull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|entryTree
parameter_list|)
block|{
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|entryTree
argument_list|)
decl_stmt|;
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|permissions
operator|!=
name|Permissions
operator|.
name|NO_PERMISSION
condition|)
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|instanceof
name|Group
condition|)
block|{
name|groupEntries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userEntries
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

