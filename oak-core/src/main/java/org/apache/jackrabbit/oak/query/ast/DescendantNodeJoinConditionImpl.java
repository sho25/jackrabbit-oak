begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|Filter
import|;
end_import

begin_class
specifier|public
class|class
name|DescendantNodeJoinConditionImpl
extends|extends
name|JoinConditionImpl
block|{
specifier|private
specifier|final
name|String
name|descendantSelectorName
decl_stmt|;
specifier|private
specifier|final
name|String
name|ancestorSelectorName
decl_stmt|;
specifier|private
name|SelectorImpl
name|descendantSelector
decl_stmt|;
specifier|private
name|SelectorImpl
name|ancestorSelector
decl_stmt|;
specifier|public
name|DescendantNodeJoinConditionImpl
parameter_list|(
name|String
name|descendantSelectorName
parameter_list|,
name|String
name|ancestorSelectorName
parameter_list|)
block|{
name|this
operator|.
name|descendantSelectorName
operator|=
name|descendantSelectorName
expr_stmt|;
name|this
operator|.
name|ancestorSelectorName
operator|=
name|ancestorSelectorName
expr_stmt|;
block|}
specifier|public
name|String
name|getDescendantSelectorName
parameter_list|()
block|{
return|return
name|descendantSelectorName
return|;
block|}
specifier|public
name|String
name|getAncestorSelectorName
parameter_list|()
block|{
return|return
name|ancestorSelectorName
return|;
block|}
annotation|@
name|Override
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|descendant
init|=
name|getDescendantSelectorName
argument_list|()
decl_stmt|;
name|String
name|ancestor
init|=
name|getAncestorSelectorName
argument_list|()
decl_stmt|;
return|return
literal|"ISDESCENDANTNODE("
operator|+
name|descendant
operator|+
literal|", "
operator|+
name|ancestor
operator|+
literal|')'
return|;
block|}
specifier|public
name|void
name|bindSelector
parameter_list|(
name|SourceImpl
name|source
parameter_list|)
block|{
name|descendantSelector
operator|=
name|source
operator|.
name|getSelector
argument_list|(
name|descendantSelectorName
argument_list|)
expr_stmt|;
if|if
condition|(
name|descendantSelector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown selector: "
operator|+
name|descendantSelectorName
argument_list|)
throw|;
block|}
name|ancestorSelector
operator|=
name|source
operator|.
name|getSelector
argument_list|(
name|ancestorSelectorName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ancestorSelector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown selector: "
operator|+
name|ancestorSelectorName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
name|String
name|a
init|=
name|ancestorSelector
operator|.
name|currentPath
argument_list|()
decl_stmt|;
name|String
name|d
init|=
name|descendantSelector
operator|.
name|currentPath
argument_list|()
decl_stmt|;
return|return
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|a
argument_list|,
name|d
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|FilterImpl
name|f
parameter_list|)
block|{
name|String
name|d
init|=
name|descendantSelector
operator|.
name|currentPath
argument_list|()
decl_stmt|;
name|String
name|a
init|=
name|ancestorSelector
operator|.
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getSelector
argument_list|()
operator|==
name|ancestorSelector
condition|)
block|{
name|f
operator|.
name|restrictPath
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|d
argument_list|)
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|PARENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getSelector
argument_list|()
operator|==
name|descendantSelector
condition|)
block|{
name|f
operator|.
name|restrictPath
argument_list|(
name|a
argument_list|,
name|Filter
operator|.
name|PathRestriction
operator|.
name|DIRECT_CHILDREN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

