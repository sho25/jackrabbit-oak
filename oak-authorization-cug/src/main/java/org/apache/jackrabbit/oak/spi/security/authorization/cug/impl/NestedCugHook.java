begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|PostValidationHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_comment
comment|/**  * {@code PostValidationHook} implementation responsible for keeping track of  * nested CUGs to simplify evaluation. The information about the nested CUGs is  * stored in a hidden property associated with the policy node.  *  * Note, that this hook does _not_ respect the configured supported paths  * and keeps track of all CUG policies irrespective of their validity.  * Consequently all optimization considering the nested CUG information must  * also verify the supported paths.  */
end_comment

begin_class
class|class
name|NestedCugHook
implements|implements
name|PostValidationHook
implements|,
name|CugConstants
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NestedCugHook
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|deletedCUGs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
comment|//-------------------------------------------------< PostValidationHook>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|after
operator|.
name|builder
argument_list|()
decl_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|before
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|deletedCUGs
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NestedCugHook"
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
name|long
name|addNestedCugPath
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parentBuilder
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|NotNull
name|String
name|pathWithNewCug
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|parentBuilder
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb
init|=
name|getHiddenPropertyBuilder
argument_list|(
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|moveToNestedCug
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
control|)
block|{
if|if
condition|(
name|Text
operator|.
name|isDescendant
argument_list|(
name|pathWithNewCug
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|pb
operator|.
name|removeValue
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|moveToNestedCug
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|pathWithNewCug
argument_list|)
condition|)
block|{
comment|// already present with parent -> remove to avoid duplicate entries
name|log
operator|.
name|debug
argument_list|(
literal|"Path of node holding a new nested CUG is already listed with the parent CUG."
argument_list|)
expr_stmt|;
name|pb
operator|.
name|removeValue
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|moveToNestedCug
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb2
init|=
name|getHiddenPropertyBuilder
argument_list|(
name|builder
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
argument_list|)
decl_stmt|;
name|pb2
operator|.
name|addValues
argument_list|(
name|moveToNestedCug
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|pb2
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update the nested-cug property of the parent
name|pb
operator|.
name|addValue
argument_list|(
name|pathWithNewCug
argument_list|)
expr_stmt|;
name|parentBuilder
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|count
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|removeNestedCugPath
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parentBuilder
parameter_list|,
annotation|@
name|NotNull
name|String
name|toRemove
parameter_list|,
annotation|@
name|NotNull
name|Iterable
argument_list|<
name|String
argument_list|>
name|toReconnect
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|parentBuilder
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb
init|=
name|getHiddenPropertyBuilder
argument_list|(
name|ps
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|.
name|hasValue
argument_list|(
name|toRemove
argument_list|)
condition|)
block|{
name|pb
operator|.
name|removeValue
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|pb
operator|.
name|addValues
argument_list|(
name|toReconnect
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parentBuilder
operator|.
name|removeProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|parentBuilder
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|count
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Parent CUG doesn't contain expected entry for removed nested CUG"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
specifier|static
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|getHiddenPropertyBuilder
parameter_list|(
annotation|@
name|Nullable
name|PropertyState
name|ps
parameter_list|)
block|{
return|return
name|PropertyBuilder
operator|.
name|copy
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|ps
argument_list|)
operator|.
name|setName
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
operator|.
name|setArray
argument_list|()
return|;
block|}
specifier|private
specifier|final
class|class
name|Diff
extends|extends
name|DefaultNodeStateDiff
block|{
specifier|private
specifier|final
name|Diff
name|parentDiff
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isRoot
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|NodeState
name|beforeState
init|=
literal|null
decl_stmt|;
specifier|private
name|NodeBuilder
name|afterBuilder
decl_stmt|;
specifier|private
name|boolean
name|afterHoldsCug
decl_stmt|;
specifier|private
name|Diff
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|rootBefore
parameter_list|,
annotation|@
name|NotNull
name|NodeBuilder
name|rootAfter
parameter_list|)
block|{
name|parentDiff
operator|=
literal|null
expr_stmt|;
name|isRoot
operator|=
literal|true
expr_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|ROOT_PATH
expr_stmt|;
name|beforeState
operator|=
name|rootBefore
expr_stmt|;
name|afterBuilder
operator|=
name|rootAfter
expr_stmt|;
name|afterHoldsCug
operator|=
name|CugUtil
operator|.
name|hasCug
argument_list|(
name|rootAfter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Diff
parameter_list|(
annotation|@
name|NotNull
name|Diff
name|parentDiff
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|NodeState
name|before
parameter_list|,
annotation|@
name|Nullable
name|NodeBuilder
name|after
parameter_list|)
block|{
name|this
operator|.
name|parentDiff
operator|=
name|parentDiff
expr_stmt|;
name|isRoot
operator|=
literal|false
expr_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentDiff
operator|.
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|beforeState
operator|=
name|before
expr_stmt|;
name|afterBuilder
operator|=
name|after
expr_stmt|;
name|afterHoldsCug
operator|=
name|CugUtil
operator|.
name|hasCug
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|CugUtil
operator|.
name|definesCug
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRoot
condition|)
block|{
name|PropertyState
name|alt
init|=
name|afterBuilder
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|alt
operator|!=
literal|null
condition|)
block|{
name|NodeBuilder
name|cugNode
init|=
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
decl_stmt|;
name|cugNode
operator|.
name|setProperty
argument_list|(
name|alt
argument_list|)
expr_stmt|;
name|afterBuilder
operator|.
name|removeProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
expr_stmt|;
name|afterBuilder
operator|.
name|removeProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Diff
name|diff
init|=
name|parentDiff
decl_stmt|;
while|while
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|diff
operator|.
name|afterHoldsCug
condition|)
block|{
name|NodeBuilder
name|cugNode
init|=
name|diff
operator|.
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
decl_stmt|;
name|addNestedCugPath
argument_list|(
name|cugNode
argument_list|,
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|diff
operator|.
name|isRoot
condition|)
block|{
name|long
name|cnt
init|=
name|addNestedCugPath
argument_list|(
name|diff
operator|.
name|afterBuilder
argument_list|,
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|diff
operator|.
name|afterBuilder
operator|.
name|setProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|,
name|cnt
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
name|diff
operator|=
name|diff
operator|.
name|parentDiff
expr_stmt|;
block|}
block|}
comment|// no need to traverse down the CUG policy node.
block|}
else|else
block|{
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|EMPTY_NODE
argument_list|,
operator|new
name|Diff
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// OAK-8855 - Restore :nestedCugs on parent if it is removed.
if|if
condition|(
name|CugUtil
operator|.
name|definesCug
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
condition|)
block|{
name|Diff
name|diff
init|=
name|parentDiff
decl_stmt|;
while|while
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|diff
operator|.
name|afterHoldsCug
condition|)
block|{
name|NodeBuilder
name|cugNode
init|=
name|diff
operator|.
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
decl_stmt|;
name|addNestedCugPath
argument_list|(
name|cugNode
argument_list|,
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|diff
operator|=
name|diff
operator|.
name|parentDiff
expr_stmt|;
block|}
block|}
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|before
argument_list|,
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|CugUtil
operator|.
name|definesCug
argument_list|(
name|name
argument_list|,
name|before
argument_list|)
condition|)
block|{
name|deletedCUGs
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// reconnect information about nested CUGs at a parent if
comment|// only the CUG got removed but the whole subtree including CUGs
comment|// are still present.
name|Set
argument_list|<
name|String
argument_list|>
name|reconnect
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|afterBuilder
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|nestedCug
range|:
name|before
operator|.
name|getStrings
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|deletedCUGs
operator|.
name|contains
argument_list|(
name|nestedCug
argument_list|)
condition|)
block|{
name|String
name|relPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|path
argument_list|,
name|nestedCug
argument_list|)
decl_stmt|;
name|NodeState
name|ns
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|afterBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|CugUtil
operator|.
name|hasCug
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|reconnect
operator|.
name|add
argument_list|(
name|nestedCug
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isRoot
condition|)
block|{
if|if
condition|(
operator|!
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|reconnect
argument_list|)
condition|)
block|{
name|afterBuilder
operator|.
name|setProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|,
name|reconnect
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|afterBuilder
operator|.
name|setProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|,
name|reconnect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Diff
name|diff
init|=
name|parentDiff
decl_stmt|;
while|while
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|diff
operator|.
name|afterHoldsCug
condition|)
block|{
comment|// found an existing parent CUG
name|NodeBuilder
name|cugNode
init|=
name|diff
operator|.
name|afterBuilder
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeNestedCugPath
argument_list|(
name|cugNode
argument_list|,
name|path
argument_list|,
name|reconnect
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|CugUtil
operator|.
name|hasCug
argument_list|(
name|diff
operator|.
name|beforeState
argument_list|)
condition|)
block|{
comment|// parent CUG got removed -> no removal/reconnect required if current path is listed.
name|NodeState
name|cugNode
init|=
name|diff
operator|.
name|beforeState
operator|.
name|getChildNode
argument_list|(
name|REP_CUG_POLICY
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|cugNode
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
operator|&&
name|Iterables
operator|.
name|contains
argument_list|(
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Nested cug property containing {} has also been removed; no reconnect required."
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|diff
operator|.
name|isRoot
condition|)
block|{
name|long
name|cnt
init|=
name|removeNestedCugPath
argument_list|(
name|diff
operator|.
name|afterBuilder
argument_list|,
name|path
argument_list|,
name|reconnect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to updated nested CUG info for path '{}'."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|diff
operator|.
name|afterBuilder
operator|.
name|removeProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diff
operator|.
name|afterBuilder
operator|.
name|setProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|,
name|cnt
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
block|}
name|diff
operator|=
name|diff
operator|.
name|parentDiff
expr_stmt|;
block|}
block|}
comment|// no need to traverse down the CUG policy node
block|}
else|else
block|{
name|EMPTY_NODE
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|Diff
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|before
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

