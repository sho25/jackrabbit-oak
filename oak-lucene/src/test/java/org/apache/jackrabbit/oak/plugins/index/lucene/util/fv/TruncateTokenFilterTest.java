begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|fv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests for {@link TruncateTokenFilter}  */
end_comment

begin_class
specifier|public
class|class
name|TruncateTokenFilterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_47
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"0.10 0.20 0.30 0.40"
argument_list|)
argument_list|)
decl_stmt|;
name|TruncateTokenFilter
name|filter
init|=
operator|new
name|TruncateTokenFilter
argument_list|(
name|stream
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedTokens
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedTokens
operator|.
name|add
argument_list|(
literal|"0.1"
argument_list|)
expr_stmt|;
name|expectedTokens
operator|.
name|add
argument_list|(
literal|"0.2"
argument_list|)
expr_stmt|;
name|expectedTokens
operator|.
name|add
argument_list|(
literal|"0.3"
argument_list|)
expr_stmt|;
name|expectedTokens
operator|.
name|add
argument_list|(
literal|"0.4"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|filter
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|CharTermAttribute
name|charTermAttribute
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|new
name|String
argument_list|(
name|charTermAttribute
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|charTermAttribute
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|filter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

