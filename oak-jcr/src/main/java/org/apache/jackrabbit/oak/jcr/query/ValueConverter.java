begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_comment
comment|/**  * Convert values to the jcr-core flavor.  */
end_comment

begin_class
specifier|public
class|class
name|ValueConverter
block|{
specifier|private
specifier|static
specifier|final
name|CoreValueFactory
name|coreValueFactory
init|=
operator|new
name|CoreValueFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ValueFactory
name|jcrValueFactory
init|=
operator|new
name|SimpleValueFactory
argument_list|()
decl_stmt|;
specifier|private
name|ValueConverter
parameter_list|()
block|{     }
specifier|public
specifier|static
name|CoreValue
name|convert
parameter_list|(
name|Value
name|v
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|v
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
comment|// TODO convert binary to data store entry
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getBoolean
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
comment|// TODO convert date
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getDecimal
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
comment|// TODO possibly do name space mapping here
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|NAME
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
comment|// TODO possibly do name space mapping here
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|PATH
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
comment|// TODO possibly do name space mapping here
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|REFERENCE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|coreValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported property type "
operator|+
name|v
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Value
name|convert
parameter_list|(
name|CoreValue
name|v
parameter_list|)
throws|throws
name|ValueFormatException
block|{
switch|switch
condition|(
name|v
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CoreValue
operator|.
name|BINARY
case|:
comment|// TODO convert binary to data store entry
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
case|case
name|CoreValue
operator|.
name|BOOLEAN
case|:
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getBoolean
argument_list|()
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|DATE
case|:
comment|// TODO convert date
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
case|case
name|CoreValue
operator|.
name|DECIMAL
case|:
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getDecimal
argument_list|()
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|DOUBLE
case|:
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getDouble
argument_list|()
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|LONG
case|:
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|NAME
case|:
comment|// TODO possibly do name space mapping here
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|NAME
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|PATH
case|:
comment|// TODO possibly do name space mapping here
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|PATH
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|REFERENCE
case|:
comment|// TODO possibly do name space mapping here
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|,
name|CoreValue
operator|.
name|REFERENCE
argument_list|)
return|;
case|case
name|CoreValue
operator|.
name|STRING
case|:
return|return
name|jcrValueFactory
operator|.
name|createValue
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported property type "
operator|+
name|v
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

