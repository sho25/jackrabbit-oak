begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|instrument
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A simple CPU profiling tool similar to java -Xrunhprof. It can be used  * in-process (to profile the current application) or as a standalone program  * (to profile a different process, or files containing full thread dumps).  */
end_comment

begin_class
specifier|public
class|class
name|Profiler
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
name|Instrumentation
name|instrumentation
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ELEMENTS
init|=
literal|1000
decl_stmt|;
specifier|public
name|int
name|interval
init|=
literal|2
decl_stmt|;
specifier|public
name|int
name|depth
init|=
literal|48
decl_stmt|;
specifier|public
name|boolean
name|paused
decl_stmt|;
specifier|public
name|boolean
name|sumClasses
decl_stmt|;
specifier|public
name|boolean
name|sumMethods
decl_stmt|;
specifier|private
name|int
name|pid
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ignoreLines
init|=
operator|(
literal|"java,"
operator|+
literal|"sun,"
operator|+
literal|"com.sun.,"
operator|+
literal|"com.google.common.,"
operator|+
literal|"com.mongodb.,"
operator|+
literal|"org.bson.,"
operator|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ignorePackages
init|=
operator|(
literal|"java,"
operator|+
literal|"sun,"
operator|+
literal|"com.sun.,"
operator|+
literal|"com.google.common.,"
operator|+
literal|"com.mongodb.,"
operator|+
literal|"org.bson"
operator|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ignoreThreads
init|=
operator|(
literal|"java.lang.Object.wait,"
operator|+
literal|"java.lang.Thread.dumpThreads,"
operator|+
literal|"java.lang.Thread.getThreads,"
operator|+
literal|"java.lang.Thread.sleep,"
operator|+
literal|"java.lang.UNIXProcess.waitForProcessExit,"
operator|+
literal|"java.net.PlainDatagramSocketImpl.receive0,"
operator|+
literal|"java.net.PlainSocketImpl.accept,"
operator|+
literal|"java.net.PlainSocketImpl.socketAccept,"
operator|+
literal|"java.net.SocketInputStream.socketRead,"
operator|+
literal|"java.net.SocketOutputStream.socketWrite,"
operator|+
literal|"org.eclipse.jetty.io.nio.SelectorManager$SelectSet.doSelect,"
operator|+
literal|"sun.awt.windows.WToolkit.eventLoop,"
operator|+
literal|"sun.misc.Unsafe.park,"
operator|+
literal|"sun.nio.ch.EPollArrayWrapper.epollWait,"
operator|+
literal|"sun.nio.ch.KQueueArrayWrapper.kevent0,"
operator|+
literal|"sun.nio.ch.ServerSocketChannelImpl.accept,"
operator|+
literal|"dalvik.system.VMStack.getThreadStackTrace,"
operator|+
literal|"dalvik.system.NativeStart.run"
operator|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stop
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The summary (usually one entry per package, unless sumClasses is enabled,      * in which case it's one entry per class).      */
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|summary
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|minCount
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|total
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|private
name|long
name|time
decl_stmt|;
specifier|private
name|int
name|threadDumps
decl_stmt|;
comment|/**      * This method is called when the agent is installed.      *      * @param agentArgs the agent arguments      * @param inst the instrumentation object      */
specifier|public
specifier|static
name|void
name|premain
parameter_list|(
name|String
name|agentArgs
parameter_list|,
name|Instrumentation
name|inst
parameter_list|)
block|{
name|instrumentation
operator|=
name|inst
expr_stmt|;
block|}
comment|/**      * Get the instrumentation object if started as an agent.      *      * @return the instrumentation, or null      */
specifier|public
specifier|static
name|Instrumentation
name|getInstrumentation
parameter_list|()
block|{
return|return
name|instrumentation
return|;
block|}
comment|/**      * Run the command line version of the profiler. The JDK (jps and jstack)      * need to be in the path.      *      * @param args the process id of the process - if not set the java processes      *        are listed      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
operator|new
name|Profiler
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|run
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Show profiling data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<pid> |<stackTraceFileNames>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Processes:"
argument_list|)
expr_stmt|;
name|String
name|processes
init|=
name|exec
argument_list|(
literal|"jps"
argument_list|,
literal|"-l"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|processes
argument_list|)
expr_stmt|;
return|return;
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
condition|)
block|{
name|pid
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|long
name|last
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tick
argument_list|()
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|-
name|last
operator|>
literal|5000
condition|)
block|{
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getTopTraces
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|last
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"-classes"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|sumClasses
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-methods"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|sumMethods
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-packages"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|sumClasses
operator|=
literal|false
expr_stmt|;
name|sumMethods
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|arg
argument_list|)
throw|;
block|}
continue|continue;
block|}
name|String
name|file
init|=
name|arg
decl_stmt|;
name|Reader
name|reader
decl_stmt|;
name|LineNumberReader
name|r
decl_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"CP1252"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|LineNumberReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"Full thread dump"
argument_list|)
condition|)
block|{
name|threadDumps
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"CP1252"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|LineNumberReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|processList
argument_list|(
name|readStackTrace
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getTopTraces
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|getRunnableStackTraces
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|map
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Thread
name|t
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getState
argument_list|()
operator|!=
name|Thread
operator|.
name|State
operator|.
name|RUNNABLE
condition|)
block|{
continue|continue;
block|}
name|StackTraceElement
index|[]
name|dump
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dump
operator|==
literal|null
operator|||
name|dump
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
name|dump
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|readRunnableStackTraces
parameter_list|(
name|int
name|pid
parameter_list|)
block|{
try|try
block|{
name|String
name|jstack
init|=
name|exec
argument_list|(
literal|"jstack"
argument_list|,
literal|""
operator|+
name|pid
argument_list|)
decl_stmt|;
name|LineNumberReader
name|r
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|jstack
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|readStackTrace
argument_list|(
name|r
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|readStackTrace
parameter_list|(
name|LineNumberReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
comment|// not a thread
continue|continue;
block|}
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"java.lang.Thread.State: RUNNABLE"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"- "
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"at "
argument_list|)
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|s
init|=
name|stack
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|stack
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|private
specifier|static
name|String
name|exec
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|copyInThread
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|copyInThread
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|String
name|e
init|=
operator|new
name|String
argument_list|(
name|err
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|output
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|output
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|copyInThread
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
literal|"Profiler stream copy"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|len
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Start collecting profiling data.      *      * @return this      */
specifier|public
name|Profiler
name|startCollecting
parameter_list|()
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"Profiler"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Stop collecting.      *      * @return this      */
specifier|public
name|Profiler
name|stopCollecting
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|thread
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stop
condition|)
block|{
try|try
block|{
name|tick
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
break|break;
block|}
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
specifier|private
name|void
name|tick
parameter_list|()
block|{
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|paused
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|0
condition|)
block|{
name|list
operator|=
name|readRunnableStackTraces
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
name|getRunnableStackTraces
argument_list|()
expr_stmt|;
block|}
name|threadDumps
operator|++
expr_stmt|;
name|processList
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processList
parameter_list|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|list
parameter_list|)
block|{
for|for
control|(
name|Object
index|[]
name|dump
range|:
name|list
control|)
block|{
if|if
condition|(
name|startsWithAny
argument_list|(
name|dump
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|ignoreThreads
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// simple recursive calls are ignored
name|String
name|last
init|=
literal|null
decl_stmt|;
name|boolean
name|packageCounts
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dump
operator|.
name|length
operator|&&
name|j
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|String
name|el
init|=
name|dump
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|el
operator|.
name|equals
argument_list|(
name|last
argument_list|)
operator|&&
operator|!
name|startsWithAny
argument_list|(
name|el
argument_list|,
name|ignoreLines
argument_list|)
condition|)
block|{
name|last
operator|=
name|el
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"at "
argument_list|)
operator|.
name|append
argument_list|(
name|el
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|packageCounts
operator|&&
operator|!
name|startsWithAny
argument_list|(
name|el
argument_list|,
name|ignorePackages
argument_list|)
condition|)
block|{
name|packageCounts
operator|=
literal|true
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|el
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|el
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'('
operator|||
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|el
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|index
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|sumClasses
condition|)
block|{
name|int
name|m
init|=
name|el
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|index
operator|=
name|m
operator|>=
literal|0
condition|?
name|m
else|:
name|index
expr_stmt|;
block|}
if|if
condition|(
name|sumMethods
condition|)
block|{
name|int
name|m
init|=
name|el
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|,
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|index
operator|=
name|m
operator|>=
literal|0
condition|?
name|m
else|:
name|index
expr_stmt|;
block|}
name|String
name|groupName
init|=
name|el
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|increment
argument_list|(
name|summary
argument_list|,
name|groupName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|minCount
operator|=
name|increment
argument_list|(
name|counts
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|minCount
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|startsWithAny
parameter_list|(
name|String
name|s
parameter_list|,
name|String
index|[]
name|prefixes
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|int
name|increment
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|String
name|trace
parameter_list|,
name|int
name|minCount
parameter_list|)
block|{
name|Integer
name|oldCount
init|=
name|map
operator|.
name|get
argument_list|(
name|trace
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCount
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|trace
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|trace
argument_list|,
name|oldCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|MAX_ELEMENTS
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|ei
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ei
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
init|=
name|ei
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|<=
name|minCount
condition|)
block|{
name|ei
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|MAX_ELEMENTS
condition|)
block|{
name|minCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|minCount
return|;
block|}
comment|/**      * Get the top stack traces.      *      * @param count the maximum number of stack traces      * @return the stack traces.      */
specifier|public
name|String
name|getTop
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|stopCollecting
argument_list|()
expr_stmt|;
return|return
name|getTopTraces
argument_list|(
name|count
argument_list|)
return|;
block|}
specifier|private
name|String
name|getTopTraces
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"Profiler: top "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|" stack trace(s) of "
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" of "
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|threadDumps
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" of "
argument_list|)
operator|.
name|append
argument_list|(
name|threadDumps
argument_list|)
operator|.
name|append
argument_list|(
literal|" thread dumps"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|counts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"(none)"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|counts
argument_list|)
decl_stmt|;
name|appendTop
argument_list|(
name|buff
argument_list|,
name|copy
argument_list|,
name|count
argument_list|,
name|total
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"summary:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|copy
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|appendTop
argument_list|(
name|buff
argument_list|,
name|copy
argument_list|,
name|count
argument_list|,
name|total
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|appendTop
parameter_list|(
name|StringBuilder
name|buff
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|total
parameter_list|,
name|boolean
name|table
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|,
name|min
init|=
literal|0
init|;
condition|;
control|)
block|{
name|int
name|highest
init|=
literal|0
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|el
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|>
name|highest
condition|)
block|{
name|best
operator|=
name|el
expr_stmt|;
name|highest
operator|=
name|el
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|map
operator|.
name|remove
argument_list|(
name|best
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|x
operator|>=
name|count
condition|)
block|{
if|if
condition|(
name|best
operator|.
name|getValue
argument_list|()
operator|<
name|min
condition|)
block|{
break|break;
block|}
name|min
operator|=
name|best
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|int
name|c
init|=
name|best
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|percent
init|=
literal|100
operator|*
name|c
operator|/
name|Math
operator|.
name|max
argument_list|(
name|total
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
condition|)
block|{
if|if
condition|(
name|percent
operator|>
literal|1
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|percent
argument_list|)
operator|.
name|append
argument_list|(
literal|"%: "
argument_list|)
operator|.
name|append
argument_list|(
name|best
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|total
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|percent
argument_list|)
operator|.
name|append
argument_list|(
literal|"%):"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|best
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

