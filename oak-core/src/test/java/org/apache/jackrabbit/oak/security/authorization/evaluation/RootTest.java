begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|evaluation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Testing {@link Root} with access control restrictions in place.  */
end_comment

begin_class
specifier|public
class|class
name|RootTest
extends|extends
name|AbstractOakCoreTest
block|{
comment|// TODO: include acl setup with restrictions
comment|// TODO: test location for access control content (with and without JCR_READ_ACCESSCONTROL privilege)
annotation|@
name|Test
specifier|public
name|void
name|testGetTree
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/bb"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|assertNotNull
argument_list|(
name|testRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|testRoot
operator|.
name|getTree
argument_list|(
literal|"/a/bb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-766"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testGetTree2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b/c"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
name|assertNull
argument_list|(
name|path
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/bb"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|testRoot
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/bb"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
literal|"/a/bb"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-766"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeLocation2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b/c"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a/b"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/bb"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeLocation3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// only property reading is allowed
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/bb"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|location
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/bb"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|String
name|propertyPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|propertyPath
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|propertyPath
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|propPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/aProp"
argument_list|,
literal|"/a/b/bProp"
argument_list|,
literal|"/a/bb/bbProp"
argument_list|,
literal|"/a/b/c/cProp"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|propPaths
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-766"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyLocation2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/bb"
argument_list|,
literal|"/a/b/c"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|String
name|propertyPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|propertyPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|propertyPath
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|propertyPath
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|propPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/aProp"
argument_list|,
literal|"/a/b/bProp"
argument_list|,
literal|"/a/bb/bbProp"
argument_list|,
literal|"/a/b/c/cProp"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|propPaths
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-766"
argument_list|)
comment|// FIXME
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyLocation3
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/a"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b"
argument_list|,
name|testPrincipal
argument_list|,
literal|false
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|setupPermission
argument_list|(
literal|"/a/b/c"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|accessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/a/aProp"
argument_list|,
literal|"/a/bb/bbProp"
argument_list|,
literal|"/a/b/c/cProp"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:primaryType"
argument_list|,
literal|"/a/b/bProp"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
name|TreeLocation
name|location
init|=
name|testRoot
operator|.
name|getLocation
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|path
argument_list|,
name|location
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

