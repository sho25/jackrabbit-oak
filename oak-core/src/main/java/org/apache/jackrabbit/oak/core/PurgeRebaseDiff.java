begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractRebaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TODO
import|;
end_import

begin_comment
comment|/**  * FIXME rename, document  */
end_comment

begin_class
class|class
name|PurgeRebaseDiff
extends|extends
name|AbstractRebaseDiff
block|{
specifier|private
name|PurgeRebaseDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|NodeState
name|rebase
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|PurgeRebaseDiff
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PurgeRebaseDiff
name|createDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|PurgeRebaseDiff
argument_list|(
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addExistingProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedProperty
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|PropertyState
name|before
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addExistingNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|changeDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteDeletedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deleteChangedNode
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|conflict
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|conflict
parameter_list|()
block|{
comment|// FIXME correctly handle conflict cases
try|try
block|{
name|TODO
operator|.
name|unimplemented
argument_list|()
operator|.
name|doNothing
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

