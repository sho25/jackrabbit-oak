begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  * Namespace remapping test  */
end_comment

begin_class
specifier|public
class|class
name|RemappingTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|String
name|resultPath
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|registerNamespace
argument_list|(
literal|"qTest"
argument_list|,
literal|"http://jackrabbit-oak-2.apache.org"
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
literal|"qTest:node"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"qTest:node2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"qTest:node3"
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"qTest:property"
argument_list|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"stringValue"
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"qTest:booleanProperty"
argument_list|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"qTest:nameProperty"
argument_list|,
name|superuser
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"qTest:nameValue"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
expr_stmt|;
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"my"
argument_list|,
literal|"http://jackrabbit-oak-2.apache.org"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"myRep"
argument_list|,
name|NamespaceConstants
operator|.
name|NAMESPACE_REP
argument_list|)
expr_stmt|;
name|resultPath
operator|=
name|testRootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/my:node/my:node2/my:node3"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testQuery1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|statement
init|=
name|createStatement
argument_list|(
literal|"my:property"
argument_list|,
literal|"stringValue"
argument_list|)
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|statement
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// xpath:
comment|// /jcr:root/testroot/my:node//element(*)[@my:property='stringValue']
comment|// select [jcr:path], [jcr:score], * from [nt:base] as a
comment|// where [my:property] = 'stringValue'
comment|// and isdescendantnode(a, '/testroot/my:node')
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultPath
argument_list|,
name|ni
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQuery2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|statement
init|=
name|createStatement
argument_list|(
literal|"my:booleanProperty"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|statement
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultPath
argument_list|,
name|ni
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQuery3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|statement
init|=
name|createStatement
argument_list|(
literal|"my:nameProperty"
argument_list|,
literal|"my:nameValue"
argument_list|)
decl_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|statement
argument_list|,
literal|"xpath"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|ni
init|=
name|qr
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ni
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultPath
argument_list|,
name|ni
operator|.
name|nextNode
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|createStatement
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
literal|"/jcr:root"
operator|+
name|testRootNode
operator|.
name|getPath
argument_list|()
operator|+
literal|"/my:node//element(*)[@"
operator|+
name|propertyName
operator|+
literal|"='"
operator|+
name|value
operator|+
literal|"']"
return|;
block|}
block|}
end_class

end_unit

