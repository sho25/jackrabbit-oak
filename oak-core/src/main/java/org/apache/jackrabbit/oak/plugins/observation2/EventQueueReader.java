begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|EVENTS_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation2
operator|.
name|ObservationConstants
operator|.
name|USER_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_comment
comment|/**  * TODO document  */
end_comment

begin_class
specifier|public
class|class
name|EventQueueReader
block|{
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|NamePathMapper
name|namePathMapper
decl_stmt|;
specifier|private
name|Tree
name|bundles
decl_stmt|;
specifier|private
name|long
name|nextBundleId
init|=
name|EventQueueWriterProvider
operator|.
name|BUNDLE_ID
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|public
name|EventQueueReader
parameter_list|(
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|namePathMapper
operator|=
name|namePathMapper
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Event
argument_list|>
name|getEventBundle
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|events
init|=
name|getEvents
argument_list|(
name|nextBundleId
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|events
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|events
argument_list|,
operator|new
name|Function
argument_list|<
name|Tree
argument_list|,
name|Event
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Event
name|apply
parameter_list|(
name|Tree
name|event
parameter_list|)
block|{
return|return
name|createEvent
argument_list|(
name|event
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|getEvents
parameter_list|(
name|long
name|next
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|bundles
operator|==
literal|null
condition|)
block|{
name|bundles
operator|=
name|root
operator|.
name|getTreeOrNull
argument_list|(
name|EVENTS_PATH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundles
operator|!=
literal|null
condition|)
block|{
name|Tree
name|bundle
init|=
name|bundles
operator|.
name|getChildOrNull
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|nextBundleId
operator|++
expr_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getChildrenCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|bundle
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|hasChild
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Event
name|createEvent
parameter_list|(
name|Tree
name|event
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|int
name|type
init|=
operator|(
name|int
operator|)
name|getLong
argument_list|(
name|event
argument_list|,
name|TYPE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getJcrPath
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|getString
argument_list|(
name|event
operator|.
name|getChildOrNull
argument_list|(
name|id
argument_list|)
argument_list|,
name|USER_ID
argument_list|)
decl_stmt|;
name|long
name|date
init|=
name|getLong
argument_list|(
name|event
argument_list|,
name|DATE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|userData
init|=
name|getString
argument_list|(
name|event
operator|.
name|getChildOrNull
argument_list|(
name|id
argument_list|)
argument_list|,
name|USER_DATA
argument_list|)
decl_stmt|;
return|return
operator|new
name|EventImpl
argument_list|(
name|type
argument_list|,
name|path
argument_list|,
name|userId
argument_list|,
name|id
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|date
argument_list|,
name|userData
argument_list|)
return|;
block|}
specifier|private
name|String
name|getJcrPath
parameter_list|(
name|Tree
name|event
parameter_list|)
block|{
name|String
name|path
init|=
name|getString
argument_list|(
name|event
argument_list|,
name|PATH
argument_list|)
decl_stmt|;
return|return
name|path
operator|==
literal|null
condition|?
literal|null
else|:
name|namePathMapper
operator|.
name|getJcrPath
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|getLong
parameter_list|(
name|Tree
name|event
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|event
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
name|Tree
name|event
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|p
init|=
name|event
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
block|}
end_class

end_unit

