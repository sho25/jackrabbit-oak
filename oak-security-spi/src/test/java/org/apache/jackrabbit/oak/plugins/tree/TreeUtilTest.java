begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|LazyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TreeUtilTest
extends|extends
name|AbstractTreeTest
block|{
specifier|private
name|Tree
name|typeRoot
decl_stmt|;
specifier|private
name|Tree
name|propDef
decl_stmt|;
specifier|private
name|Tree
name|ntDef
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|addChild
argument_list|(
name|nonExisting
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonExisting
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|addChild
argument_list|(
name|z
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|Tree
name|newChild
init|=
name|mockTree
argument_list|(
literal|"/newChild"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|newChild
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
name|typeRoot
operator|=
name|rootTree
expr_stmt|;
comment|// TODO
name|ntDef
operator|=
name|mockTree
argument_list|(
literal|"/typeDef"
argument_list|,
name|typeRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ntDef
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|NodeTypeConstants
operator|.
name|MIX_LOCKABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ntDef
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
name|NodeTypeConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ntDef
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|typeRoot
operator|.
name|getChild
argument_list|(
literal|"rep:NonExistingType"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nonExisting
argument_list|)
expr_stmt|;
name|propDef
operator|=
name|child
expr_stmt|;
comment|// TODO
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameUnusedLazy
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|child
argument_list|,
name|mock
argument_list|(
name|LazyValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameNewTreeLazy
parameter_list|()
block|{
name|Tree
name|newTree
init|=
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Tree
operator|.
name|Status
operator|.
name|NEW
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|newTree
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not get here"
argument_list|)
throw|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrimaryTypeNameFromLazy
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypes
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|child
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|rootTree
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|rootTree
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesUnusedLazy
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|child
argument_list|,
name|mock
argument_list|(
name|LazyValue
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesNewTreeLazy
parameter_list|()
block|{
name|Tree
name|newTree
init|=
name|when
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Tree
operator|.
name|Status
operator|.
name|NEW
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|newTree
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not get here"
argument_list|)
throw|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMixinTypeNamesFromLazy
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getMixinTypeNames
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
argument_list|,
operator|new
name|LazyValue
argument_list|<
name|Tree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|createValue
parameter_list|()
block|{
return|return
name|child
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStrings
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|nonExisting
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
init|=
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetString
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING_VALUE
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringWithDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STRING_VALUE
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBoolean
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getBoolean
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getName
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNames
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|nonExisting
argument_list|,
literal|"p"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
literal|"pp"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LONG_VALUE
argument_list|,
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|rootTree
argument_list|,
literal|"p"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NumberFormatException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetLongInvalidConversion
parameter_list|()
block|{
name|TreeUtil
operator|.
name|getLong
argument_list|(
name|child
argument_list|,
literal|"p"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTree
parameter_list|()
block|{
name|String
name|relPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CHILD_PATH
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeWithCurrentElements
parameter_list|()
block|{
name|String
name|relPath
init|=
literal|"./././"
operator|+
name|PathUtils
operator|.
name|relativize
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CHILD_PATH
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeWithParentElements
parameter_list|()
block|{
name|String
name|relPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
operator|+
literal|"/.."
decl_stmt|;
name|Tree
name|t
init|=
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|child
operator|.
name|getParent
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeWithAbsolutePath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|CHILD_PATH
argument_list|,
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeWithNonExisting
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|nonExisting
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
literal|"nonExisting"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTreeWithParentOfRootNonExisting
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|getTree
argument_list|(
name|rootTree
argument_list|,
literal|"x/../../../x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddChildNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootTree
argument_list|,
name|nonExisting
operator|.
name|getName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddChild
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|z
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|rootTree
argument_list|,
name|z
operator|.
name|getName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOrAddChildNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|rootTree
argument_list|,
name|nonExisting
operator|.
name|getName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOrAddChild
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|z
operator|.
name|getPath
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|rootTree
argument_list|,
name|z
operator|.
name|getName
argument_list|()
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetOrAddChild2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreeUtil
operator|.
name|getOrAddChild
argument_list|(
name|rootTree
argument_list|,
literal|"newChild"
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoCreateProperty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
literal|"anyName"
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
argument_list|)
expr_stmt|;
name|UUID
operator|.
name|fromString
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userId"
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|,
name|propDef
argument_list|,
literal|"userId"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_CREATED
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|TreeUtil
operator|.
name|autoCreateProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_LASTMODIFIED
argument_list|,
name|propDef
argument_list|,
literal|null
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveTypeNoPrimary
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|typeRoot
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveTypeNoMixins
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ntDef
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|z
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ntDef
argument_list|,
name|ntDef
argument_list|,
name|ntDef
argument_list|)
argument_list|,
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|child
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveTypeNonExistingDef
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|getEffectiveType
argument_list|(
name|mockTree
argument_list|(
literal|"/anotherTree"
argument_list|,
name|rootTree
argument_list|,
literal|false
argument_list|,
literal|"rep:NonExistingType"
argument_list|)
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindDefaultPrimaryTypeUnknownDefinition
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|findDefaultPrimaryType
argument_list|(
name|typeRoot
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TreeUtil
operator|.
name|findDefaultPrimaryType
argument_list|(
name|typeRoot
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNodeType
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|child
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNodeTypeMixin
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|child
argument_list|,
name|JcrConstants
operator|.
name|MIX_LOCKABLE
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|z
argument_list|,
name|JcrConstants
operator|.
name|MIX_LOCKABLE
argument_list|,
name|typeRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotIsReadOnlyTree
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TreeUtil
operator|.
name|isReadOnlyTree
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsReadOnlyTree
parameter_list|()
block|{
name|Tree
name|readOnly
init|=
name|mockTree
argument_list|(
literal|"/readOnly"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|,
name|ReadOnly
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TreeUtil
operator|.
name|isReadOnlyTree
argument_list|(
name|readOnly
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

