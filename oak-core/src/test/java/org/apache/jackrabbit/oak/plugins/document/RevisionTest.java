begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
operator|.
name|RevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the revision class  */
end_comment

begin_class
specifier|public
class|class
name|RevisionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|fromStringToString
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// System.out.println(r);
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|r2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|hashCode
argument_list|()
argument_list|,
name|r2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|equals
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|difference
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|long
name|t0
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
name|Revision
name|r0
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
comment|// the difference must not be more than t1 - t0
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|r1
argument_list|,
name|r0
argument_list|)
operator|<=
operator|(
name|t1
operator|-
name|t0
operator|)
argument_list|)
expr_stmt|;
comment|// busy wait until we have a timestamp different from t1
name|long
name|t2
decl_stmt|;
do|do
block|{
name|t2
operator|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|t1
operator|==
name|t2
condition|)
do|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|r2
argument_list|,
name|r1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalsHashCode
parameter_list|()
block|{
name|Revision
name|a
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|b
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|b
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|a1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|a
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|a2
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|a1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|a2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x1
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|1
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x1
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x2
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
operator|+
literal|1
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x2
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x3
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x3
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Revision
name|last
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|last
operator|.
name|compareRevisionTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|last
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|last
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|last
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
comment|// ensure the timestamp part changes as well
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionComparatorSimple
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|compareRevisionTime
argument_list|(
name|r2
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
operator|.
name|compareRevisionTime
argument_list|(
name|r1
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|compareRevisionTime
argument_list|(
name|r1
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionComparatorCluster
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r0c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x010
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r0c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x010
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r1c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x110
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x120
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r3c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x130
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x100
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r2c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x200
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r3c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x300
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// first, only timestamps are compared
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we declare r2+r3 of c1 to be after r2+r3 of c2
name|comp
operator|.
name|add
argument_list|(
name|r2c1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r2c2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:r20-0-0\n"
operator|+
literal|"2:\n r200-0-2:r10-0-0\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r0c1
argument_list|,
name|r0c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// both r3cx are still "in the future"
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we declare r3 of c1 to be before r3 of c2
comment|// (with the same range timestamp,
comment|// the revision timestamps are compared)
name|comp
operator|.
name|add
argument_list|(
name|r3c1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r3c2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:r20-0-0 r130-0-1:r30-0-0\n"
operator|+
literal|"2:\n r200-0-2:r10-0-0 r300-0-2:r30-0-0\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c2
argument_list|,
name|r1c1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c2
argument_list|,
name|r2c1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c2
argument_list|,
name|r3c1
argument_list|)
argument_list|)
expr_stmt|;
comment|// get rid of old timestamps
name|comp
operator|.
name|purge
argument_list|(
literal|0x10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:r20-0-0 r130-0-1:r30-0-0\n"
operator|+
literal|"2:\n r300-0-2:r30-0-0\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|purge
argument_list|(
literal|0x20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r130-0-1:r30-0-0\n"
operator|+
literal|"2:\n r300-0-2:r30-0-0\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// update an entry
name|comp
operator|.
name|add
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x301
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r130-0-1:r30-0-0\n"
operator|+
literal|"2:\n r301-1-2:r30-0-0\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|purge
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clusterCompare
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// sequence of revisions as added to comparator later
name|Revision
name|r1c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r2c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x40
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r1c1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r2c1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// there's no range for c2, and therefore this
comment|// revision must be considered to be in the future
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r1c2
argument_list|,
name|r2c1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// add a range for r2r2
name|comp
operator|.
name|add
argument_list|(
name|r2c2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// now there is a range for c2, but the revision is old,
comment|// so it must be considered to be in the past
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r1c2
argument_list|,
name|r2c1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// OAK-1727
annotation|@
name|Test
specifier|public
name|void
name|clusterCompare2
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r3-0-1"
argument_list|)
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r1-1-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r1-0-2"
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r4-0-2"
argument_list|)
decl_stmt|;
comment|// cluster sync
name|Revision
name|c1sync
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r5-0-1"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|c1sync
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r2-0-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|c2sync
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r4-1-2"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|c2sync
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r2-1-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|c3sync
init|=
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r2-0-3"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|c3sync
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
literal|"r2-1-0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|c2sync
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// same seen-at revision, but clusterId 2< 3
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|c2sync
argument_list|,
name|c3sync
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// this means, c3sync must be after r1 and r2
comment|// because: r1< r2< c2sync< c3sync
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|c3sync
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|c3sync
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionSeen
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r0
init|=
operator|new
name|Revision
argument_list|(
literal|0x01
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r21
init|=
operator|new
name|Revision
argument_list|(
literal|0x21
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r3
init|=
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r4
init|=
operator|new
name|Revision
argument_list|(
literal|0x40
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r5
init|=
operator|new
name|Revision
argument_list|(
literal|0x50
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r3
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r4
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0x40
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// older than first range -> must return null
name|assertNull
argument_list|(
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r0
argument_list|)
argument_list|)
expr_stmt|;
comment|// exact range start matches
name|assertEquals
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x40
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r4
argument_list|)
argument_list|)
expr_stmt|;
comment|// revision newer than most recent range -> NEWEST
name|assertEquals
argument_list|(
name|RevisionComparator
operator|.
name|NEWEST
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r5
argument_list|)
argument_list|)
expr_stmt|;
comment|// within a range -> must return lower bound of next higher range
name|assertEquals
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|comp
operator|.
name|getRevisionSeen
argument_list|(
name|r21
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"OAK-1807"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|uniqueRevision
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Revision.setClock(new Clock.Virtual());
specifier|final
name|BlockingQueue
argument_list|<
name|Revision
argument_list|>
name|revisionQueue
init|=
name|Queues
operator|.
name|newLinkedBlockingQueue
argument_list|()
decl_stmt|;
name|int
name|noOfThreads
init|=
literal|60
decl_stmt|;
specifier|final
name|int
name|noOfLoops
init|=
literal|1000
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|stopLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|noOfThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|workers
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
argument_list|(
name|startLatch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|noOfLoops
operator|&&
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|revisionQueue
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stopLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Revision
argument_list|>
name|duplicates
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Revision
argument_list|>
name|seenRevs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|workers
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Queues
operator|.
name|drainUninterruptibly
argument_list|(
name|revisionQueue
argument_list|,
name|revs
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|record
argument_list|(
name|revs
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|revisionQueue
operator|.
name|drainTo
argument_list|(
name|revs
argument_list|)
expr_stmt|;
name|record
argument_list|(
name|revs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|record
parameter_list|(
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
parameter_list|)
block|{
for|for
control|(
name|Revision
name|rev
range|:
name|revs
control|)
block|{
if|if
condition|(
operator|!
name|seenRevs
operator|.
name|add
argument_list|(
name|rev
argument_list|)
condition|)
block|{
name|duplicates
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|duplicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|stopLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate rev seen %s %n Seen %s"
argument_list|,
name|duplicates
argument_list|,
name|seenRevs
argument_list|)
argument_list|,
name|duplicates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

