begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
operator|.
name|ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test cases for OAK-1233.  */
end_comment

begin_class
specifier|public
class|class
name|ValueMapTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|previousDocs1
parameter_list|()
block|{
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|String
name|rootId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|Revision
name|r0
init|=
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
comment|// create previous docs
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"prop"
argument_list|,
name|r0
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r0
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|Revision
name|r1low
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1high
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r1high
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r1low
operator|.
name|getCounter
argument_list|()
init|;
name|i
operator|<=
name|r1high
operator|.
name|getCounter
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"foo"
argument_list|,
name|r
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// create root doc
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|rootId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"prop"
argument_list|,
name|r2
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r2
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setPrevious
argument_list|(
name|op
argument_list|,
operator|new
name|Range
argument_list|(
name|r0
argument_list|,
name|r0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setPrevious
argument_list|(
name|op
argument_list|,
operator|new
name|Range
argument_list|(
name|r1high
argument_list|,
name|r1low
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|rootId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revs
operator|.
name|contains
argument_list|(
name|r0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revs
operator|.
name|contains
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|revs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r0
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|previousDocs2
parameter_list|()
block|{
name|MemoryDocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|String
name|rootPath
init|=
literal|"/"
decl_stmt|;
name|String
name|rootId
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|Revision
name|r01
init|=
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r22
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r31
init|=
operator|new
name|Revision
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r42
init|=
operator|new
name|Revision
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r51
init|=
operator|new
name|Revision
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create previous docs
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r31
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p0"
argument_list|,
name|r01
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r01
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p1"
argument_list|,
name|r31
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r31
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r42
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p1"
argument_list|,
name|r12
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r12
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p1"
argument_list|,
name|r22
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r22
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p0"
argument_list|,
name|r42
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r42
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// create root doc
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|rootId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ID
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p0"
argument_list|,
name|r51
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
literal|"p1"
argument_list|,
name|r51
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r51
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setPrevious
argument_list|(
name|op
argument_list|,
operator|new
name|Range
argument_list|(
name|r42
argument_list|,
name|r12
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setPrevious
argument_list|(
name|op
argument_list|,
operator|new
name|Range
argument_list|(
name|r31
argument_list|,
name|r01
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|rootId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|prevDocs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|doc
operator|.
name|getPreviousDocs
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|prevDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r31
argument_list|,
literal|0
argument_list|)
argument_list|,
name|prevDocs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Utils
operator|.
name|getPreviousIdFor
argument_list|(
name|rootPath
argument_list|,
name|r42
argument_list|,
literal|0
argument_list|)
argument_list|,
name|prevDocs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|doc
operator|.
name|getValueMap
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r51
argument_list|,
name|r31
argument_list|,
name|r22
argument_list|,
name|r12
argument_list|)
argument_list|,
name|revs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

