begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|GroupPredicateTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Group
name|testMember
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userManager
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|testUser
operator|=
name|getTestUser
argument_list|()
expr_stmt|;
name|testMember
operator|=
name|userManager
operator|.
name|createGroup
argument_list|(
literal|"testMember"
argument_list|)
expr_stmt|;
name|testMember
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|testGroup
operator|=
name|userManager
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testMember
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testMember
operator|!=
literal|null
condition|)
block|{
name|testMember
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"unknownGroupId"
decl_stmt|;
name|assertNull
argument_list|(
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testGroup
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserId
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testGroup
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeclaredMembersOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testGroup
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testMember
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testGroup
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|gp
operator|.
name|apply
argument_list|(
name|testMember
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testMember
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyTwiceNotMember
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIdFails
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|userManager
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Authorizable
name|a
init|=
name|mock
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMemberIdFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|member
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RepositoryException
argument_list|()
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Group
name|g
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
operator|.
name|getDeclaredMembers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|member
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|g
operator|.
name|isGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserManager
name|uMgr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|g
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Authorizable
operator|.
name|class
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|GroupPredicate
name|gp
init|=
operator|new
name|GroupPredicate
argument_list|(
name|uMgr
argument_list|,
literal|"g"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|gp
operator|.
name|apply
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

