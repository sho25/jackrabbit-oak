begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|reverseOrder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparingInt
import|;
end_import

begin_comment
comment|/**  * A facet result is a wrapper for {@link javax.jcr.query.QueryResult} capable of returning information about facets  * stored in the query result {@link javax.jcr.query.Row}s.  */
end_comment

begin_class
specifier|public
class|class
name|FacetResult
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Facet
argument_list|>
argument_list|>
name|perDimFacets
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Facet
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FacetResult
parameter_list|(
name|QueryResult
name|queryResult
parameter_list|)
block|{
try|try
block|{
name|RowIterator
name|rows
init|=
name|queryResult
operator|.
name|getRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|row
init|=
name|rows
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|parseJson
argument_list|(
name|queryResult
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|columnName
lambda|->
block|{
name|Value
name|value
init|=
name|row
operator|.
name|getValue
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|getString
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|FacetResult
parameter_list|(
name|String
index|[]
name|columnNames
parameter_list|,
name|FacetResultRow
modifier|...
name|rows
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|FacetResultRow
name|row
range|:
name|rows
control|)
block|{
name|parseJson
argument_list|(
name|columnNames
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asColumnToFacetJsonMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|json
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Facet
argument_list|>
argument_list|>
name|entry
range|:
name|perDimFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JsopBuilder
name|builder
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|Facet
name|f
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|key
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
name|f
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|QueryConstants
operator|.
name|REP_FACET
operator|+
literal|"("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|")"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
specifier|private
name|void
name|parseJson
parameter_list|(
name|String
index|[]
name|columnNames
parameter_list|,
name|FacetResultRow
name|row
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|column
range|:
name|columnNames
control|)
block|{
if|if
condition|(
name|column
operator|.
name|startsWith
argument_list|(
name|QueryConstants
operator|.
name|REP_FACET
argument_list|)
condition|)
block|{
name|String
name|dimension
init|=
name|column
operator|.
name|substring
argument_list|(
name|QueryConstants
operator|.
name|REP_FACET
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|column
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|getValue
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|jsonFacetString
init|=
name|value
decl_stmt|;
name|parseJson
argument_list|(
name|dimension
argument_list|,
name|jsonFacetString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|parseJson
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|jsonFacetString
parameter_list|)
block|{
name|JsopTokenizer
name|jsopTokenizer
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonFacetString
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Facet
argument_list|>
name|facets
init|=
name|perDimFacets
operator|.
name|get
argument_list|(
name|dimension
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Facet
argument_list|>
name|facetsMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|facets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Facet
name|facet
range|:
name|facets
control|)
block|{
if|if
condition|(
operator|!
name|facetsMap
operator|.
name|containsKey
argument_list|(
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|facetsMap
operator|.
name|put
argument_list|(
name|facet
operator|.
name|getLabel
argument_list|()
argument_list|,
name|facet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|c
decl_stmt|;
name|String
name|label
init|=
literal|null
decl_stmt|;
name|int
name|count
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|jsopTokenizer
operator|.
name|read
argument_list|()
operator|)
operator|!=
name|JsopReader
operator|.
name|END
condition|)
block|{
if|if
condition|(
name|JsopReader
operator|.
name|STRING
operator|==
name|c
condition|)
block|{
name|label
operator|=
name|jsopTokenizer
operator|.
name|getEscapedToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JsopReader
operator|.
name|NUMBER
operator|==
name|c
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jsopTokenizer
operator|.
name|getEscapedToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|facetsMap
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|count
operator|+=
name|facetsMap
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|facetsMap
operator|.
name|put
argument_list|(
name|label
argument_list|,
operator|new
name|Facet
argument_list|(
name|label
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|label
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|facets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|facetsMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|facets
argument_list|,
name|reverseOrder
argument_list|(
name|comparingInt
argument_list|(
name|Facet
operator|::
name|getCount
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|perDimFacets
operator|.
name|put
argument_list|(
name|dimension
argument_list|,
name|facets
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDimensions
parameter_list|()
block|{
return|return
name|perDimFacets
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|List
argument_list|<
name|Facet
argument_list|>
name|getFacets
parameter_list|(
annotation|@
name|NotNull
name|String
name|dimension
parameter_list|)
block|{
return|return
name|perDimFacets
operator|.
name|get
argument_list|(
name|dimension
argument_list|)
return|;
block|}
comment|/**      * A query result facet, composed by its label and count.      */
specifier|public
specifier|static
class|class
name|Facet
block|{
specifier|private
specifier|final
name|String
name|label
decl_stmt|;
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
name|Facet
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
comment|/**          * get the facet label          * @return a label          */
annotation|@
name|NotNull
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
comment|/**          * get the facet count          * @return an integer          */
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
specifier|public
interface|interface
name|FacetResultRow
block|{
name|String
name|getValue
parameter_list|(
name|String
name|columnName
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

