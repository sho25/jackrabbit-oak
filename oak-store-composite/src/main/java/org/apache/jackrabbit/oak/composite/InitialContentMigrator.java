begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|FilteringNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
operator|.
name|LoggingReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
operator|.
name|ReportingNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|InitialContentMigrator
block|{
specifier|private
specifier|static
specifier|final
name|int
name|LOG_NODE_COPY
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.upgrade.logNodeCopy"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InitialContentMigrator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|targetNodeStore
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|seedNodeStore
decl_stmt|;
specifier|private
specifier|final
name|Mount
name|seedMount
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludePaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fragmentPaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludeFragments
decl_stmt|;
specifier|public
name|InitialContentMigrator
parameter_list|(
name|NodeStore
name|targetNodeStore
parameter_list|,
name|NodeStore
name|seedNodeStore
parameter_list|,
name|Mount
name|seedMount
parameter_list|)
block|{
name|this
operator|.
name|targetNodeStore
operator|=
name|targetNodeStore
expr_stmt|;
name|this
operator|.
name|seedNodeStore
operator|=
name|seedNodeStore
expr_stmt|;
name|this
operator|.
name|seedMount
operator|=
name|seedMount
expr_stmt|;
name|this
operator|.
name|includePaths
operator|=
name|FilteringNodeState
operator|.
name|ALL
expr_stmt|;
name|this
operator|.
name|excludeFragments
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|seedMount
operator|.
name|getPathFragmentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|seedMount
operator|instanceof
name|MountInfo
condition|)
block|{
name|this
operator|.
name|excludePaths
operator|=
operator|(
operator|(
name|MountInfo
operator|)
name|seedMount
operator|)
operator|.
name|getIncludedPaths
argument_list|()
expr_stmt|;
name|this
operator|.
name|fragmentPaths
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
operator|(
operator|(
name|MountInfo
operator|)
name|seedMount
operator|)
operator|.
name|getPathsSupportingFragments
argument_list|()
control|)
block|{
name|fragmentPaths
operator|.
name|add
argument_list|(
name|stripPatternCharacters
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|excludePaths
operator|=
name|FilteringNodeState
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|fragmentPaths
operator|=
name|FilteringNodeState
operator|.
name|ALL
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isTargetInitialized
parameter_list|()
block|{
return|return
name|targetNodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"jcr:system"
argument_list|)
return|;
block|}
specifier|public
name|void
name|migrate
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
if|if
condition|(
name|isTargetInitialized
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The target is already initialized, no need to copy the seed mount"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing the default mount using seed {}"
argument_list|,
name|seedMount
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Include: {}"
argument_list|,
name|includePaths
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exclude: {}"
argument_list|,
name|excludePaths
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exclude fragments: {} @ {}"
argument_list|,
name|excludeFragments
argument_list|,
name|fragmentPaths
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameToRevision
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointSegmentToDoc
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeState
name|initialRoot
init|=
name|targetNodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeState
name|targetRoot
init|=
name|initialRoot
decl_stmt|;
name|NodeState
name|previousRoot
init|=
name|initialRoot
decl_stmt|;
for|for
control|(
name|String
name|checkpointName
range|:
name|seedNodeStore
operator|.
name|checkpoints
argument_list|()
control|)
block|{
name|NodeState
name|checkpointRoot
init|=
name|seedNodeStore
operator|.
name|retrieve
argument_list|(
name|checkpointName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
init|=
name|seedNodeStore
operator|.
name|checkpointInfo
argument_list|(
name|checkpointName
argument_list|)
decl_stmt|;
name|boolean
name|tracePaths
decl_stmt|;
if|if
condition|(
name|previousRoot
operator|==
name|initialRoot
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Migrating first checkpoint: {}"
argument_list|,
name|checkpointName
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Applying diff to {}"
argument_list|,
name|checkpointName
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint metadata: {}"
argument_list|,
name|checkpointInfo
argument_list|)
expr_stmt|;
name|targetRoot
operator|=
name|copyDiffToTarget
argument_list|(
name|previousRoot
argument_list|,
name|checkpointRoot
argument_list|,
name|targetRoot
argument_list|,
name|tracePaths
argument_list|)
expr_stmt|;
name|previousRoot
operator|=
name|checkpointRoot
expr_stmt|;
name|String
name|newCheckpointName
init|=
name|targetNodeStore
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|checkpointInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpointInfo
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|nameToRevision
operator|.
name|put
argument_list|(
name|checkpointInfo
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|newCheckpointName
argument_list|)
expr_stmt|;
block|}
name|checkpointSegmentToDoc
operator|.
name|put
argument_list|(
name|checkpointName
argument_list|,
name|newCheckpointName
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|sourceRoot
init|=
name|seedNodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|boolean
name|tracePaths
decl_stmt|;
if|if
condition|(
name|previousRoot
operator|==
name|initialRoot
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No checkpoints found; migrating head"
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Applying diff to head"
argument_list|)
expr_stmt|;
name|tracePaths
operator|=
literal|false
expr_stmt|;
block|}
name|targetRoot
operator|=
name|copyDiffToTarget
argument_list|(
name|previousRoot
argument_list|,
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|,
name|tracePaths
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rewriting checkpoint names in /:async {}"
argument_list|,
name|nameToRevision
argument_list|)
expr_stmt|;
name|NodeBuilder
name|targetBuilder
init|=
name|targetRoot
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|async
init|=
name|targetBuilder
operator|.
name|getChildNode
argument_list|(
literal|":async"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|nameToRevision
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|async
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|PropertyState
name|temp
init|=
name|async
operator|.
name|getProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"-temp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tempValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|temp
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sToD
range|:
name|checkpointSegmentToDoc
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|tempValues
operator|.
name|contains
argument_list|(
name|sToD
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|tempValues
operator|.
name|set
argument_list|(
name|tempValues
operator|.
name|indexOf
argument_list|(
name|sToD
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|sToD
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|async
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"-temp"
argument_list|,
name|tempValues
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
name|targetNodeStore
operator|.
name|merge
argument_list|(
name|targetBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeState
name|copyDiffToTarget
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|targetRoot
parameter_list|,
name|boolean
name|tracePaths
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|NodeBuilder
name|targetBuilder
init|=
name|targetRoot
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeState
name|currentRoot
init|=
name|wrapNodeState
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|NodeState
name|baseRoot
init|=
name|wrapNodeState
argument_list|(
name|before
argument_list|)
decl_stmt|;
name|currentRoot
operator|.
name|compareAgainstBaseState
argument_list|(
name|baseRoot
argument_list|,
operator|new
name|ApplyDiff
argument_list|(
name|targetBuilder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|targetNodeStore
operator|.
name|merge
argument_list|(
name|targetBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
return|;
block|}
specifier|private
name|NodeState
name|wrapNodeState
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|NodeState
name|wrapped
init|=
name|nodeState
decl_stmt|;
name|wrapped
operator|=
name|FilteringNodeState
operator|.
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|wrapped
argument_list|,
name|includePaths
argument_list|,
name|excludePaths
argument_list|,
name|fragmentPaths
argument_list|,
name|excludeFragments
argument_list|)
expr_stmt|;
name|wrapped
operator|=
name|ReportingNodeState
operator|.
name|wrap
argument_list|(
name|wrapped
argument_list|,
operator|new
name|LoggingReporter
argument_list|(
name|LOG
argument_list|,
literal|"Copying"
argument_list|,
name|LOG_NODE_COPY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|wrapped
return|;
block|}
specifier|private
specifier|static
name|String
name|stripPatternCharacters
parameter_list|(
name|String
name|pathPattern
parameter_list|)
block|{
name|String
name|result
init|=
name|pathPattern
decl_stmt|;
name|result
operator|=
name|substringBefore
argument_list|(
name|result
argument_list|,
literal|'*'
argument_list|)
expr_stmt|;
name|result
operator|=
name|substringBefore
argument_list|(
name|result
argument_list|,
literal|'$'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|equals
argument_list|(
name|pathPattern
argument_list|)
condition|)
block|{
name|int
name|slashIndex
init|=
name|result
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slashIndex
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slashIndex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|substringBefore
parameter_list|(
name|String
name|subject
parameter_list|,
name|char
name|stopCharacter
parameter_list|)
block|{
name|int
name|index
init|=
name|subject
operator|.
name|indexOf
argument_list|(
name|stopCharacter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|subject
return|;
block|}
block|}
block|}
end_class

end_unit

