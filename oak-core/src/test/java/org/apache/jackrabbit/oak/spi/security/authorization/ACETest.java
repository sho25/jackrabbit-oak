begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * ACETest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|ACETest
extends|extends
name|AbstractAccessControlTest
block|{
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"TestPrincipal"
return|;
block|}
block|}
expr_stmt|;
name|acMgr
operator|=
name|getAccessControlManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ACE
name|createEntry
parameter_list|(
name|String
index|[]
name|privilegeNames
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|privs
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|privilegeNames
argument_list|)
decl_stmt|;
return|return
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|,
name|isAllow
argument_list|)
return|;
block|}
specifier|private
name|ACE
name|createEntry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
throws|throws
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
block|{
return|return
operator|new
name|ACE
argument_list|(
name|principal
argument_list|,
name|privileges
argument_list|,
name|isAllow
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAllow
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ACE
name|ace
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ace
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
name|ace
operator|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ace
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ACE
name|tmpl
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tmpl
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|tmpl
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|testPrincipal
argument_list|,
name|tmpl
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ACE
name|entry
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|entry
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privs
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|REP_WRITE
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privs
operator|=
name|entry
operator|.
name|getPrivileges
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privs
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
block|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privs
operator|=
name|entry
operator|.
name|getPrivileges
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|privs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|expected
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|AccessControlEntry
argument_list|,
name|AccessControlEntry
argument_list|>
name|equalAces
init|=
operator|new
name|HashMap
argument_list|<
name|AccessControlEntry
argument_list|,
name|AccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
name|ACE
name|ace
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// create same entry again
name|equalAces
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with declared aggregate privileges
name|Privilege
index|[]
name|declaredAllPrivs
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
decl_stmt|;
name|equalAces
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|declaredAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with aggregate privileges
name|Privilege
index|[]
name|aggregateAllPrivs
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
operator|.
name|getAggregatePrivileges
argument_list|()
decl_stmt|;
name|equalAces
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with different privilege order
name|List
argument_list|<
name|Privilege
argument_list|>
name|reordered
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|aggregateAllPrivs
argument_list|)
argument_list|)
decl_stmt|;
name|reordered
operator|.
name|add
argument_list|(
name|reordered
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|equalAces
operator|.
name|put
argument_list|(
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|reordered
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|reordered
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// even if entries are build with aggregated or declared aggregate privileges
name|equalAces
operator|.
name|put
argument_list|(
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|declaredAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|equalAces
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
argument_list|,
name|equalAces
operator|.
name|get
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEquals
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ACE
name|ace
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|otherAces
init|=
operator|new
name|ArrayList
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// ACE template with different principal
name|Principal
name|princ
init|=
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"a name"
return|;
block|}
block|}
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
decl_stmt|;
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|princ
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different privileges
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different 'allow' flag
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different privileges and 'allows
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|REP_WRITE
block|}
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// other ace impl
specifier|final
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
decl_stmt|;
name|JackrabbitAccessControlEntry
name|pe
init|=
operator|new
name|JackrabbitAccessControlEntry
argument_list|()
block|{
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Value
name|getRestriction
parameter_list|(
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|testPrincipal
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|privs
return|;
block|}
block|}
decl_stmt|;
name|otherAces
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
for|for
control|(
name|JackrabbitAccessControlEntry
name|otherAce
range|:
name|otherAces
control|)
block|{
name|assertFalse
argument_list|(
name|ace
operator|.
name|equals
argument_list|(
name|otherAce
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|AccessControlEntry
argument_list|,
name|AccessControlEntry
argument_list|>
name|equivalent
init|=
operator|new
name|HashMap
argument_list|<
name|AccessControlEntry
argument_list|,
name|AccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
name|JackrabbitAccessControlEntry
name|ace
init|=
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// create same entry again
name|equivalent
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with declared aggregate privileges
name|Privilege
index|[]
name|declaredAllPrivs
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
decl_stmt|;
name|equivalent
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|declaredAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with aggregate privileges
name|Privilege
index|[]
name|aggregateAllPrivs
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
operator|.
name|getAggregatePrivileges
argument_list|()
decl_stmt|;
name|equivalent
operator|.
name|put
argument_list|(
name|ace
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create entry with different privilege order
name|List
argument_list|<
name|Privilege
argument_list|>
name|reordered
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|aggregateAllPrivs
argument_list|)
argument_list|)
decl_stmt|;
name|reordered
operator|.
name|add
argument_list|(
name|reordered
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|equivalent
operator|.
name|put
argument_list|(
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|reordered
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|reordered
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// even if entries are build with aggregated or declared aggregate privileges
name|equivalent
operator|.
name|put
argument_list|(
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|declaredAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|aggregateAllPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|equivalent
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AccessControlEntry
name|eqv
init|=
name|equivalent
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|hashCode
argument_list|()
argument_list|,
name|eqv
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// and the opposite:
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|otherAces
init|=
operator|new
name|ArrayList
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// ACE template with different principal
name|Principal
name|princ
init|=
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"a name"
return|;
block|}
block|}
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
decl_stmt|;
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|princ
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different privileges
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_READ
block|}
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different 'allow' flag
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// ACE template with different privileges and 'allows
try|try
block|{
name|otherAces
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|REP_WRITE
block|}
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{         }
comment|// other ace impl
specifier|final
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
decl_stmt|;
name|JackrabbitAccessControlEntry
name|pe
init|=
operator|new
name|JackrabbitAccessControlEntry
argument_list|()
block|{
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Value
name|getRestriction
parameter_list|(
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|testPrincipal
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|privs
return|;
block|}
block|}
decl_stmt|;
name|otherAces
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
for|for
control|(
name|JackrabbitAccessControlEntry
name|otherAce
range|:
name|otherAces
control|)
block|{
name|assertFalse
argument_list|(
name|ace
operator|.
name|hashCode
argument_list|()
operator|==
name|otherAce
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
block|}
decl_stmt|;
name|createEntry
argument_list|(
literal|null
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Principal must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Ignore
comment|// TODO review again if ACE must validate the privileges
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPrivilege
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
name|invalidPriv
init|=
operator|new
name|Privilege
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getDeclaredAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|Privilege
index|[]
name|privs
init|=
operator|new
name|Privilege
index|[]
block|{
name|invalidPriv
block|,
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
block|}
decl_stmt|;
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
end_class

end_unit

