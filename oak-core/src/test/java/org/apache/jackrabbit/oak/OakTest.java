begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * OakTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|OakTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWithDefaultWorkspaceName
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentRepository
name|repo
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
literal|"test"
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|String
index|[]
name|valid
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"test"
block|}
decl_stmt|;
for|for
control|(
name|String
name|wspName
range|:
name|valid
control|)
block|{
name|ContentSession
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|repo
operator|.
name|login
argument_list|(
literal|null
argument_list|,
name|wspName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|cs
operator|.
name|getWorkspaceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
index|[]
name|invalid
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"another"
block|,
name|Oak
operator|.
name|DEFAULT_WORKSPACE_NAME
block|}
decl_stmt|;
for|for
control|(
name|String
name|wspName
range|:
name|invalid
control|)
block|{
name|ContentSession
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|repo
operator|.
name|login
argument_list|(
literal|null
argument_list|,
name|wspName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid workspace nam"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchWorkspaceException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|throwISEUponReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkExecutorShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{              }
block|}
decl_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|ContentRepository
name|repo
init|=
name|oak
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|oak
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|runnable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Closeable
operator|)
name|repo
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|oak
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|runnable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Executor should have rejected the task"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ignore
parameter_list|)
block|{          }
comment|//Externally passed executor should not be shutdown upon repository close
name|ScheduledExecutorService
name|externalExecutor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|Oak
name|oak2
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|externalExecutor
argument_list|)
decl_stmt|;
name|ContentRepository
name|repo2
init|=
name|oak2
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|oak2
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|runnable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Closeable
operator|)
name|repo2
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|oak2
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|runnable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|externalExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

