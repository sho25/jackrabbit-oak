begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@code DebugTimer}...  */
end_comment

begin_class
specifier|public
class|class
name|DebugTimer
block|{
specifier|private
specifier|static
name|String
index|[]
name|units
init|=
block|{
literal|"ns"
block|,
literal|"us"
block|,
literal|"ms"
block|,
literal|"s"
block|}
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimeStamp
argument_list|>
name|timestamps
init|=
operator|new
name|LinkedList
argument_list|<
name|TimeStamp
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|now
decl_stmt|;
specifier|public
name|DebugTimer
parameter_list|()
block|{
name|now
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|mark
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|long
name|then
init|=
name|now
decl_stmt|;
name|now
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
operator|new
name|TimeStamp
argument_list|(
name|now
operator|-
name|then
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getString
parameter_list|()
block|{
if|if
condition|(
name|timestamps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeStamp
name|t
range|:
name|timestamps
control|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|int
name|u
init|=
literal|0
decl_stmt|;
name|double
name|time
init|=
name|t
operator|.
name|time
decl_stmt|;
while|while
condition|(
name|time
operator|>
literal|1000
operator|&&
name|u
operator|<
name|units
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|time
operator|=
name|time
operator|/
literal|1000
expr_stmt|;
name|u
operator|++
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s=%.2f%s"
argument_list|,
name|t
operator|.
name|msg
argument_list|,
name|time
argument_list|,
name|units
index|[
name|u
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TimeStamp
block|{
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
specifier|private
specifier|final
name|String
name|msg
decl_stmt|;
specifier|private
name|TimeStamp
parameter_list|(
name|long
name|time
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|msg
operator|=
name|msg
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

