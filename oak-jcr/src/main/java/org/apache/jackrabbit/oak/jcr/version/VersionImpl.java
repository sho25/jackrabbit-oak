begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|version
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|PropertyDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|VersionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|VersionHistoryDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|VersionManagerDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|operation
operator|.
name|SessionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_class
specifier|public
class|class
name|VersionImpl
extends|extends
name|NodeImpl
argument_list|<
name|VersionDelegate
argument_list|>
implements|implements
name|Version
block|{
specifier|public
name|VersionImpl
parameter_list|(
name|VersionDelegate
name|dlg
parameter_list|,
name|SessionContext
name|sessionContext
parameter_list|)
block|{
name|super
argument_list|(
name|dlg
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VersionHistory
name|getContainingHistory
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|VersionHistory
argument_list|>
argument_list|(
literal|"getContainingHistory"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|VersionHistory
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|VersionHistoryImpl
argument_list|(
name|getVersionManagerDelegate
argument_list|()
operator|.
name|createVersionHistory
argument_list|(
name|dlg
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Calendar
name|getCreated
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|sessionDelegate
operator|.
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Calendar
argument_list|>
argument_list|(
literal|"getCreated"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Calendar
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|dlg
init|=
name|getPropertyOrThrow
argument_list|(
name|JcrConstants
operator|.
name|JCR_CREATED
argument_list|)
decl_stmt|;
return|return
name|ValueFactoryImpl
operator|.
name|createValue
argument_list|(
name|dlg
operator|.
name|getSingleState
argument_list|()
argument_list|,
name|sessionContext
argument_list|)
operator|.
name|getDate
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getLinearPredecessor
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Version
argument_list|>
argument_list|(
literal|"getLinearPredecessor"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Version
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|VersionDelegate
name|predecessor
init|=
name|dlg
operator|.
name|getLinearPredecessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|predecessor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|VersionImpl
argument_list|(
name|predecessor
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getLinearSuccessor
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Version
argument_list|>
argument_list|(
literal|"getLinearSuccessor"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Version
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|VersionHistoryDelegate
name|vHistory
init|=
name|getVersionManagerDelegate
argument_list|()
operator|.
name|createVersionHistory
argument_list|(
name|dlg
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|VersionDelegate
argument_list|>
name|it
init|=
name|vHistory
operator|.
name|getAllLinearVersions
argument_list|()
decl_stmt|;
comment|// search for this version ...
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|VersionDelegate
name|vDlg
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|vDlg
operator|.
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
name|dlg
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// ... and return next
return|return
operator|new
name|VersionImpl
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
comment|// none found
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Value
argument_list|>
name|getValues
parameter_list|(
name|PropertyDelegate
name|p
parameter_list|)
throws|throws
name|InvalidItemStateException
throws|,
name|ValueFormatException
block|{
return|return
name|ValueFactoryImpl
operator|.
name|createValues
argument_list|(
name|p
operator|.
name|getMultiState
argument_list|()
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
index|[]
name|getPredecessors
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Version
index|[]
argument_list|>
argument_list|(
literal|"getPredecessors"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Version
index|[]
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Version
argument_list|>
name|predecessors
init|=
operator|new
name|ArrayList
argument_list|<
name|Version
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|VersionDelegate
name|vDelegate
range|:
name|dlg
operator|.
name|getPredecessors
argument_list|()
control|)
block|{
name|predecessors
operator|.
name|add
argument_list|(
operator|new
name|VersionImpl
argument_list|(
name|vDelegate
argument_list|,
name|sessionContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|predecessors
operator|.
name|toArray
argument_list|(
operator|new
name|Version
index|[
name|predecessors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
index|[]
name|getSuccessors
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Version
index|[]
argument_list|>
argument_list|(
literal|"getSuccessors"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Version
index|[]
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|p
init|=
name|getPropertyOrThrow
argument_list|(
name|VersionConstants
operator|.
name|JCR_SUCCESSORS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Version
argument_list|>
name|successors
init|=
operator|new
name|ArrayList
argument_list|<
name|Version
argument_list|>
argument_list|()
decl_stmt|;
name|VersionManagerDelegate
name|vMgr
init|=
name|getVersionManagerDelegate
argument_list|()
decl_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|getValues
argument_list|(
name|p
argument_list|)
control|)
block|{
name|String
name|id
init|=
name|v
operator|.
name|getString
argument_list|()
decl_stmt|;
name|successors
operator|.
name|add
argument_list|(
operator|new
name|VersionImpl
argument_list|(
name|vMgr
operator|.
name|getVersionByIdentifier
argument_list|(
name|id
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|successors
operator|.
name|toArray
argument_list|(
operator|new
name|Version
index|[
name|successors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getFrozenNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Node
argument_list|>
argument_list|(
literal|"getFrozenNode"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|NodeImpl
operator|.
name|createNodeOrNull
argument_list|(
name|dlg
operator|.
name|getChild
argument_list|(
name|VersionConstants
operator|.
name|JCR_FROZENNODE
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|//------------------------------< internal>--------------------------------
annotation|@
name|Nonnull
specifier|private
name|VersionManagerDelegate
name|getVersionManagerDelegate
parameter_list|()
block|{
return|return
name|VersionManagerDelegate
operator|.
name|create
argument_list|(
name|sessionContext
operator|.
name|getSessionDelegate
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|PropertyDelegate
name|getPropertyOrThrow
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|p
init|=
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|checkNotNull
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Inconsistent version storage. "
operator|+
literal|"Version does not have a "
operator|+
name|name
operator|+
literal|" property."
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

