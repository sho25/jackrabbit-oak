begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|UnsetContentRemoteOperationTest
block|{
specifier|private
name|UnsetContentRemoteOperation
name|createOperation
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|UnsetContentRemoteOperation
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RemoteCommitException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnsetWithNonExistingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RemoteCommitException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testUnsetWithNonExistingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

