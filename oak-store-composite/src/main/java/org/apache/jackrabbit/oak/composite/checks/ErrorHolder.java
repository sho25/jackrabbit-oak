begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|IllegalRepositoryStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_class
class|class
name|ErrorHolder
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FAIL_IMMEDIATELY_THRESHOLD
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|report
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"For NodeStore mount %s, path %s, encountered the following problem: '%s'"
argument_list|,
name|mountedStore
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
name|FAIL_IMMEDIATELY_THRESHOLD
condition|)
block|{
name|end
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|report
parameter_list|(
name|MountedNodeStore
name|firstNS
parameter_list|,
name|String
name|firstPath
parameter_list|,
name|MountedNodeStore
name|secondNS
parameter_list|,
name|String
name|secondPath
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"For NodeStore mount %s, path %s, and NodeStore mount %s, path %s, encountered the following clash for value %s: '%s'"
argument_list|,
name|firstNS
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|firstPath
argument_list|,
name|secondNS
operator|.
name|getMount
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|secondPath
argument_list|,
name|value
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
name|FAIL_IMMEDIATELY_THRESHOLD
condition|)
block|{
name|end
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" errors were found: \n"
argument_list|)
expr_stmt|;
name|errors
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|out
operator|.
name|append
argument_list|(
name|e
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalRepositoryStateException
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

