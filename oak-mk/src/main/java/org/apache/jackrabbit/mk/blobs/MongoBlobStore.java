begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|Mongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_comment
comment|/**  * A blob store that uses MongoDB.  */
end_comment

begin_class
specifier|public
class|class
name|MongoBlobStore
extends|extends
name|AbstractBlobStore
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DB
init|=
literal|"ds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATASTORE_COLLECTION
init|=
literal|"dataStore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIGEST_FIELD
init|=
literal|"digest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_FIELD
init|=
literal|"data"
decl_stmt|;
specifier|private
name|Mongo
name|con
decl_stmt|;
specifier|private
name|DB
name|db
decl_stmt|;
specifier|private
name|DBCollection
name|dataStore
decl_stmt|;
specifier|public
name|MongoBlobStore
parameter_list|()
throws|throws
name|IOException
block|{
name|con
operator|=
operator|new
name|Mongo
argument_list|()
expr_stmt|;
name|db
operator|=
name|con
operator|.
name|getDB
argument_list|(
name|DB
argument_list|)
expr_stmt|;
name|db
operator|.
name|setWriteConcern
argument_list|(
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|dataStore
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|DATASTORE_COLLECTION
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|ensureIndex
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|DIGEST_FIELD
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"unique"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|readBlockFromBackend
parameter_list|(
name|BlockId
name|id
parameter_list|)
block|{
name|BasicDBObject
name|key
init|=
operator|new
name|BasicDBObject
argument_list|(
name|DIGEST_FIELD
argument_list|,
name|id
operator|.
name|digest
argument_list|)
decl_stmt|;
name|DBObject
name|dataObject
init|=
name|dataStore
operator|.
name|findOne
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|byte
index|[]
operator|)
name|dataObject
operator|.
name|get
argument_list|(
name|DATA_FIELD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|storeBlock
parameter_list|(
name|byte
index|[]
name|digest
parameter_list|,
name|int
name|level
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|BasicDBObject
name|dataObject
init|=
operator|new
name|BasicDBObject
argument_list|(
name|DIGEST_FIELD
argument_list|,
name|digest
argument_list|)
decl_stmt|;
name|dataObject
operator|.
name|append
argument_list|(
name|DATA_FIELD
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|dataStore
operator|.
name|insert
argument_list|(
name|dataObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MongoException
operator|.
name|DuplicateKey
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
name|markInUse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isMarkEnabled
parameter_list|()
block|{
comment|// TODO
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|mark
parameter_list|(
name|BlockId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

