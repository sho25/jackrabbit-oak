begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|ItemBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemUserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|FilterImplTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|Filter
name|filter
decl_stmt|;
specifier|private
name|String
name|supportedPath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|FilterProvider
name|fp
init|=
name|getFilterProvider
argument_list|()
decl_stmt|;
name|filter
operator|=
name|fp
operator|.
name|getFilter
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|supportedPath
operator|=
name|fp
operator|.
name|getFilterRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleEmptySet
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleGroupPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
literal|"group"
argument_list|)
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleUnknownSystemUserPrincipal
parameter_list|()
block|{
name|SystemUserPrincipal
name|principal
init|=
parameter_list|()
lambda|->
literal|"systemUserPrincipal"
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleRandomSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
literal|"anySystemUser"
argument_list|,
literal|null
argument_list|)
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleValidSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleValidSystemUserPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
call|(
name|SystemUserPrincipal
call|)
argument_list|()
operator|->
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleWrongPrincipalClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
call|(
name|AdminPrincipal
call|)
argument_list|()
operator|->
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
operator|new
name|ItemBasedPrincipal
argument_list|()
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|(
operator|(
name|ItemBasedPrincipal
operator|)
name|principal
operator|)
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleItemBasedSystemUserPrincipalUnsupportedPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure supported path exists
name|User
name|tu
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|supportedPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Principal
name|principal
init|=
operator|new
name|TestPrincipal
argument_list|(
literal|"name"
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|supportedPath
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleMovedItemBasedSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|oakPath
init|=
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|oakPath
argument_list|)
expr_stmt|;
name|String
name|destPath
init|=
name|oakPath
operator|+
literal|"_moved"
decl_stmt|;
name|root
operator|.
name|move
argument_list|(
name|oakPath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|Principal
name|movedPrincipal
init|=
operator|new
name|TestPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|destPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|movedPrincipal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destPath
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|movedPrincipal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleGetPathThrows
parameter_list|()
block|{
name|Principal
name|principal
init|=
operator|new
name|TestPrincipal
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the filter can deal with principals that have been accessed with a different {@code NamePathMapper}.      * This might actually occure with {@code AbstractAccessControlManager#hasPrivilege} and {@code AbstractAccessControlManager#getPrivileges},      * when a {@code PermissionProvider} is built from the principal set passed to the Jackrabbit API methods (and not from      * principals obtained on the system level when populating the {@code Subject}.      */
annotation|@
name|Test
specifier|public
name|void
name|testCanHandlePathMapperMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
comment|// create filter with a different NamePathMapper than was used to build the principal
name|Filter
name|f
init|=
name|getFilterProvider
argument_list|()
operator|.
name|getFilter
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandlePathMapperMismatchUnknownPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
operator|new
name|TestPrincipal
argument_list|(
literal|"name"
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|supportedPath
argument_list|,
literal|"oak:path/to/oak:principal"
argument_list|)
argument_list|)
decl_stmt|;
comment|// create filter with a different NamePathMapper than was used to build the principal
comment|// since the principal is not known to the PrincipalManager, the extra lookup doesn't reveal a valid principal.
name|Filter
name|f
init|=
name|getFilterProvider
argument_list|()
operator|.
name|getFilter
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|,
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|f
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandleCombination
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanHandlePopulatesCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|principal
init|=
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principal
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pp
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|getFilterProvider
argument_list|()
operator|.
name|getFilter
argument_list|(
name|sp
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
comment|// call 'canHandle' twice
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
call|(
name|SystemUserPrincipal
call|)
argument_list|()
operator|->
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
call|(
name|SystemUserPrincipal
call|)
argument_list|()
operator|->
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// principalprovider must only be hit once
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPathUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|filter
operator|.
name|getOakPath
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPathInvalidSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|filter
operator|.
name|getOakPath
argument_list|(
call|(
name|SystemUserPrincipal
call|)
argument_list|()
operator|->
literal|"name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPathValidSystemUserPrincipalNotValidated
parameter_list|()
throws|throws
name|Exception
block|{
name|filter
operator|.
name|getOakPath
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPathValidatedSystemUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|ItemBasedPrincipal
name|principal
init|=
operator|(
name|ItemBasedPrincipal
operator|)
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPathAfterGetValidUserPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|ItemBasedPrincipal
name|principal
init|=
operator|(
name|ItemBasedPrincipal
operator|)
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalUserPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalJcrPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalSystemUserPath
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|getTestSystemUser
argument_list|()
decl_stmt|;
name|Principal
name|principal
init|=
name|user
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|user
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalSupportedRootPath
parameter_list|()
block|{
name|assertNull
argument_list|(
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|supportedPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalMockedItemBasedProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|ItemBasedPrincipal
name|principal
init|=
operator|(
name|ItemBasedPrincipal
operator|)
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|String
name|oakPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
operator|.
name|getItemBasedPrincipal
argument_list|(
name|oakPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principal
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pp
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|getFilterProvider
argument_list|()
operator|.
name|getFilter
argument_list|(
name|sp
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
comment|// call 'getValidPrincipal' twice
name|Principal
name|p
init|=
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
operator|(
name|ItemBasedPrincipal
operator|)
name|p
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|oakPath
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getItemBasedPrincipal
argument_list|(
name|oakPath
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalMockedPrincipalProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|ItemBasedPrincipal
name|principal
init|=
operator|(
name|ItemBasedPrincipal
operator|)
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|String
name|oakPath
init|=
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|principal
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalProvider
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pp
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|getFilterProvider
argument_list|()
operator|.
name|getFilter
argument_list|(
name|sp
argument_list|,
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|getValidPrincipal
argument_list|(
name|oakPath
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestPrincipal
implements|implements
name|SystemUserPrincipal
implements|,
name|ItemBasedPrincipal
block|{
specifier|private
specifier|final
name|String
name|jcrPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|TestPrincipal
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
if|if
condition|(
name|oakPath
operator|==
literal|null
condition|)
block|{
name|jcrPath
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|jcrPath
operator|=
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrPath
argument_list|(
name|oakPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jcrPath
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|jcrPath
operator|!=
literal|null
condition|)
block|{
return|return
name|jcrPath
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

