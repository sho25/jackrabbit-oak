begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newConcurrentMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|SynchronizedDescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|CSVResultGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|util
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|ScalabilitySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|benchmarks
operator|.
name|ScalabilityBenchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract class which defines a lot of the boiler-plate code needed to run the suite of tests.  *   * Any test suite extending from this class has the following entry points  *<p>  * {@link #beforeSuite()} - To configure the whole suite before the tests are started.  *<p>  * {@link #afterSuite()} - To shutdown the whole suite after all tests are finished.  *<p>  * {@link #beforeIteration(ExecutionContext)} - Any initialization to be performed before each of  * the test run. Typically, this can be configured to create additional loads for each iteration.  * This method will be called before each test iteration begins.  *<p>  * {@link #afterIteration()} - To configure any post test steps to be executed after each iteration  * of the test. This method will be called after each test iteration completes.  *<p>  * {@link #executeBenchmark(ScalabilityBenchmark, ExecutionContext)} - Actual benchmark/test to be  * executed. This method will be called in each iteration of the test run.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ScalabilityAbstractSuite
implements|implements
name|ScalabilitySuite
implements|,
name|CSVResultGenerator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CTX_SEARCH_PATHS_PROP
init|=
literal|"searchPaths"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScalabilityAbstractSuite
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * A random string to guarantee concurrently running tests don't overwrite      * each others changes (for example in a cluster).      *<p>      * The probability of duplicates, for 50 concurrent processes, is less than 1 in 1 million.      */
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_ID
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|PROFILE
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"profile"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|WARMUP
init|=
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"noWarmup"
argument_list|)
decl_stmt|;
comment|/**      * Controls the incremental load for each iteration      */
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|INCREMENTS
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"increments"
argument_list|,
literal|"1,2,5"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Credentials
name|CREDENTIALS
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ScalabilityBenchmark
argument_list|>
name|benchmarks
decl_stmt|;
comment|/**      * Variables per suite run      */
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|private
name|Credentials
name|credentials
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|Session
argument_list|>
name|sessions
decl_stmt|;
name|ExecutionContext
name|context
decl_stmt|;
specifier|private
name|Result
name|result
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
decl_stmt|;
specifier|private
name|RepositoryFixture
name|fixture
decl_stmt|;
specifier|protected
name|ScalabilityAbstractSuite
parameter_list|()
block|{
name|this
operator|.
name|benchmarks
operator|=
name|newLinkedHashMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Iterable
argument_list|<
name|RepositoryFixture
argument_list|>
name|fixtures
parameter_list|)
block|{
for|for
control|(
name|RepositoryFixture
name|fixture
range|:
name|fixtures
control|)
block|{
try|try
block|{
name|Repository
index|[]
name|cluster
init|=
name|createRepository
argument_list|(
name|fixture
argument_list|)
decl_stmt|;
try|try
block|{
name|runSuite
argument_list|(
name|fixture
argument_list|,
name|cluster
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Run the full suite on the given fixture.      *      * @param fixture the fixture      * @param repository the repository      * @throws Exception the exception      */
specifier|private
name|void
name|runSuite
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|,
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|setUp
argument_list|(
name|repository
argument_list|,
name|fixture
argument_list|,
name|CREDENTIALS
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|increment
range|:
name|INCREMENTS
control|)
block|{
name|context
operator|.
name|setIncrement
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|increment
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setupIteration
argument_list|(
name|increment
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started test"
argument_list|)
expr_stmt|;
block|}
comment|// Run one iteration
name|runIteration
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished test"
argument_list|)
expr_stmt|;
block|}
name|tearDownIteration
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Setup the iteration. Calls {@link #beforeIteration(ExecutionContext)} which can be      * overridden by subclasses.      *       * @param increment the current iteration's increment      * @throws Exception      */
specifier|private
name|void
name|setupIteration
parameter_list|(
name|String
name|increment
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start load : "
operator|+
name|increment
argument_list|)
expr_stmt|;
block|}
name|initBackgroundJobs
argument_list|()
expr_stmt|;
comment|// create the load for this iteration
name|beforeIteration
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|WARMUP
condition|)
block|{
for|for
control|(
name|ScalabilityBenchmark
name|benchmark
range|:
name|benchmarks
operator|.
name|values
argument_list|()
control|)
block|{
name|executeBenchmark
argument_list|(
name|benchmark
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Post processing for the iteration.      *       * @throws InterruptedException      * @throws Exception      */
specifier|private
name|void
name|tearDownIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownBackgroundJobs
argument_list|()
expr_stmt|;
name|afterIteration
argument_list|()
expr_stmt|;
block|}
comment|/**      * Setup any options before the benchmarks.      *       * @throws Exception      */
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start the profiler. Giving a chance to overriding classes to call it at a different stage
if|if
condition|(
name|PROFILE
condition|)
block|{
name|context
operator|.
name|startProfiler
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Prepares this performance benchmark.      *       * @param repository the repository to use      * @param fixture credentials of a user with write access      * @throws Exception if the benchmark can not be prepared      */
specifier|public
name|void
name|setUp
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|RepositoryFixture
name|fixture
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
name|this
operator|.
name|sessions
operator|=
operator|new
name|LinkedList
argument_list|<
name|Session
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
name|context
operator|=
operator|new
name|ExecutionContext
argument_list|()
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|()
expr_stmt|;
name|beforeSuite
argument_list|()
expr_stmt|;
block|}
comment|/**      * Cleanup after the benchmarks are run.      *       * @throws Exception      */
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{}
comment|/**      * Cleans up after this performance benchmark.      *       * @throws Exception if the benchmark can not be cleaned up      */
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stopProfiler
argument_list|()
expr_stmt|;
name|result
operator|.
name|out
argument_list|()
expr_stmt|;
name|afterSuite
argument_list|()
expr_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
if|if
condition|(
name|session
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|threads
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sessions
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|repository
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|result
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|benchmarks
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Removes the benchmark.      */
annotation|@
name|Override
specifier|public
name|boolean
name|removeBenchmark
parameter_list|(
name|String
name|benchmark
parameter_list|)
block|{
return|return
name|benchmarks
operator|.
name|remove
argument_list|(
name|benchmark
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ScalabilityBenchmark
argument_list|>
name|getBenchmarks
parameter_list|()
block|{
return|return
name|benchmarks
return|;
block|}
comment|/**      * Runs the benchmark.      *       * @param benchmark the benchmark to execute      * @throws Exception       */
specifier|protected
specifier|abstract
name|void
name|executeBenchmark
parameter_list|(
name|ScalabilityBenchmark
name|benchmark
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Runs the iteration of the benchmarks added.      *       * @param context the execution context      * @throws Exception       */
specifier|private
name|void
name|runIteration
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|benchmarks
operator|!=
literal|null
operator|&&
operator|!
name|benchmarks
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"No Benchmarks configured"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|benchmarks
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ScalabilityBenchmark
name|benchmark
init|=
name|benchmarks
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getBenchmarkStatistics
argument_list|(
name|benchmark
argument_list|)
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|addBenchmarkStatistics
argument_list|(
name|benchmark
argument_list|,
operator|new
name|SynchronizedDescriptiveStatistics
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|executeBenchmark
argument_list|(
name|benchmark
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|result
operator|.
name|getBenchmarkStatistics
argument_list|(
name|benchmark
argument_list|)
operator|.
name|addValue
argument_list|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Execution time for "
operator|+
name|benchmark
operator|+
literal|"-"
operator|+
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Executes once for each iteration.      *       * @param context the context      * @throws Exception the repository exception      */
specifier|public
name|void
name|beforeIteration
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{}
comment|/**      * Run after all iterations of this test have been executed. Subclasses can      * override this method to clean up static test content.      *       * @throws Exception if an error occurs      */
specifier|protected
name|void
name|afterIteration
parameter_list|()
throws|throws
name|Exception
block|{}
comment|/**      * Adds a background thread that repeatedly executes the given job      * until all the iterations of this test have been executed.      *       * @param job background job      */
specifier|protected
name|void
name|addBackgroundJob
parameter_list|(
specifier|final
name|Runnable
name|job
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"Background job "
operator|+
name|job
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|job
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the running flag to true.      */
specifier|protected
name|void
name|initBackgroundJobs
parameter_list|()
block|{
name|this
operator|.
name|running
operator|=
literal|true
expr_stmt|;
name|threads
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Shutdown the background threads.      *       * @throws InterruptedException      */
specifier|protected
name|void
name|shutdownBackgroundJobs
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|running
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Repository
index|[]
name|createRepository
parameter_list|(
name|RepositoryFixture
name|fixture
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fixture
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns a new writer session that will be automatically closed once      * all the iterations of this test have been executed.      *       * @return writer session      */
specifier|protected
name|Session
name|loginWriter
parameter_list|()
block|{
try|try
block|{
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|sessions
init|)
block|{
name|sessions
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
return|return
name|session
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Collects the execution times for each benchmark.      */
class|class
name|Result
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ScalabilityBenchmark
argument_list|,
name|DescriptiveStatistics
argument_list|>
name|stats
decl_stmt|;
specifier|public
name|Result
parameter_list|()
block|{
name|this
operator|.
name|stats
operator|=
name|newLinkedHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addBenchmarkStatistics
parameter_list|(
name|ScalabilityBenchmark
name|benchmark
parameter_list|,
name|SynchronizedDescriptiveStatistics
name|stat
parameter_list|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|benchmark
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DescriptiveStatistics
name|getBenchmarkStatistics
parameter_list|(
name|ScalabilityBenchmark
name|benchmark
parameter_list|)
block|{
return|return
name|stats
operator|.
name|get
argument_list|(
name|benchmark
argument_list|)
return|;
block|}
specifier|public
name|void
name|out
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|ScalabilityBenchmark
argument_list|,
name|DescriptiveStatistics
argument_list|>
name|entry
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DescriptiveStatistics
name|statistics
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ScalabilityBenchmark
name|benchmark
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"# %-26.26s       min     10%%     50%%     90%%     max       N%n"
argument_list|,
name|benchmark
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|format
argument_list|(
literal|"# %-26.26s       min     10%%     50%%     90%%     max       N%n"
argument_list|,
name|benchmark
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%-30.30s  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6d%n"
argument_list|,
name|fixture
operator|.
name|toString
argument_list|()
argument_list|,
name|statistics
operator|.
name|getMin
argument_list|()
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getMax
argument_list|()
argument_list|,
name|statistics
operator|.
name|getN
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|format
argument_list|(
literal|"%-30.30s  %-6.0f  %-6.0f  %-6.0f  %-6.0f  %-6.0f  %-6d%n"
argument_list|,
name|fixture
operator|.
name|toString
argument_list|()
argument_list|,
name|statistics
operator|.
name|getMin
argument_list|()
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
argument_list|,
name|statistics
operator|.
name|getMax
argument_list|()
argument_list|,
name|statistics
operator|.
name|getN
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|header
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"\t# %-26.26s"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|increment
range|:
name|INCREMENTS
control|)
block|{
name|header
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|header
operator|.
name|append
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|append
argument_list|(
literal|"%n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Iterations/Load"
argument_list|)
expr_stmt|;
name|StringBuffer
name|format
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|format
operator|.
name|append
argument_list|(
literal|"%-30.30s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
name|format
operator|.
name|toString
argument_list|()
argument_list|,
literal|"\t"
operator|+
literal|"Time (ms)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|format
argument_list|(
name|format
operator|.
name|toString
argument_list|()
argument_list|,
literal|"\t"
operator|+
literal|"Time (ms)"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|INCREMENTS
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|format
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|format
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|format
operator|.
name|append
argument_list|(
literal|"%-7.0f"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
name|format
operator|.
name|toString
argument_list|()
argument_list|,
name|statistics
operator|.
name|getValues
argument_list|()
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|format
argument_list|(
name|format
operator|.
name|toString
argument_list|()
argument_list|,
name|statistics
operator|.
name|getValues
argument_list|()
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Execution context to be pass information to and from the suite to the benchmarks.      */
specifier|public
specifier|static
class|class
name|ExecutionContext
block|{
specifier|private
name|Profiler
name|profiler
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|iteration
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|setIncrement
parameter_list|(
name|int
name|increment
parameter_list|)
block|{
name|iteration
operator|.
name|getAndSet
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getIncrement
parameter_list|()
block|{
return|return
name|iteration
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|startProfiler
parameter_list|()
block|{
name|profiler
operator|=
operator|new
name|Profiler
argument_list|()
operator|.
name|startCollecting
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stopProfiler
parameter_list|()
block|{
if|if
condition|(
name|profiler
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|profiler
operator|.
name|stopCollecting
argument_list|()
operator|.
name|getTop
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|profiler
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|map
return|;
block|}
specifier|public
name|void
name|setMap
parameter_list|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|name
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrintStream
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
specifier|protected
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
block|}
end_class

end_unit

