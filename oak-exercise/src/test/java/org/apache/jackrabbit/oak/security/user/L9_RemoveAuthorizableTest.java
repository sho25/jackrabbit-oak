begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|lock
operator|.
name|LockConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Remove Authorizables  * -----------------------------------------------------------------------------  *  * Goal:  * Understand why we strongly recommend not to remove (and recycle) user/group  * accounts.  *  * Exercises:  *  * - {@link #testAccessControlEntry()}  *   Test case illustrating the effect of removing the principal (for simplicity  *   represented by a test-user) referenced in an access control entry.  *   Explain the expected behavior and fix the test if necessary  *  * - {@link #testCreatedBy()}  *   Test case illustrating the effect of removing a user which created node  *   that is of type 'mix:created'.  *   Explain the expected behavior and fix the test if necessary  *  * - {@link #testLastModifiedBy()}  *   Test case illustrating the effect of removing a user which added the mixin  *   'mix:lastModified' to the test node.  *   Explain the expected behavior and fix the test if necessary  *  * - {@link #testLock()}  *   Test case illustrating the effect of removing a user which created a  *   open-scoped lock.  *  * - Based on the experiences from perfoming the above tests, summarize the effect  *   of removing an existing user and potentially re-using the same ID  *   at a later point.  *  *   Question: What are the implications from a security point of view  *   Question: What are possible consequences from a legal point of view  *  * - Use the user management API to identify alterntive ways such that you don't  *   need to remove the user.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * In a OSGI-based Oak installation (Sling|Granite|CQ) you can extend this exercise:  *  * - Look for additional node types that store references to user or principals.  *   List node types and the properties  *  * - Inspect application code: can you find additional references to user/principals  *   stored?  *   Provide a list and discuss the impact from a security|legel point of view  *  * - Inspect the various log files for user or principal references  *   Discuss the legal implications of re-using them for different entities (subjects).  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L10_RemovalAndMembershipTest ()}  *  *</pre>  *  */
end_comment

begin_class
specifier|public
class|class
name|L9_RemoveAuthorizableTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|userManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// setup full access for test-user on the test-node
name|Privilege
index|[]
name|privileges
init|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|superuser
argument_list|,
name|Privilege
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|,
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeTestUser
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testUser
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Node
name|getAuthorizableNode
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|authorizable
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|testAccessControlEntry
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
comment|// remove test user
name|removeTestUser
argument_list|()
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// EXERCISE: do you expect the ACE for test-principal to be still present? explain why and fix the test if necessary.
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreatedBy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|Node
name|folder
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"folder"
argument_list|,
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|)
decl_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// EXERCISE: explain why the folder node must have a jcr:created property.
name|assertTrue
argument_list|(
name|folder
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testSession
operator|.
name|getUserID
argument_list|()
argument_list|,
name|folder
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|removeTestUser
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// EXERCISE: do you expect jcr:createdBy property to be still present? explain why and fix the test if necessary.
name|assertTrue
argument_list|(
name|folder
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_CREATEDBY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLastModifiedBy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
name|NodeTypeConstants
operator|.
name|MIX_LASTMODIFIED
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"any value"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testSession
operator|.
name|getUserID
argument_list|()
argument_list|,
name|testNode
operator|.
name|getProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|removeTestUser
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// EXERCISE: do you expect the property to be still present? explain why and fix the test if necessary.
name|assertTrue
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLock
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_LOCKABLE
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|lock
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
name|LockConstants
operator|.
name|JCR_LOCKOWNER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testSession
operator|.
name|getUserID
argument_list|()
argument_list|,
name|testNode
operator|.
name|getProperty
argument_list|(
name|LockConstants
operator|.
name|JCR_LOCKOWNER
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|removeTestUser
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// EXERCISE: do you expect the property to be still present? explain why and fix the test if necessary.
name|assertTrue
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
name|LockConstants
operator|.
name|JCR_LOCKOWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|testNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

