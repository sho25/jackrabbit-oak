begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|TokenProviderCallbackTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCallback
parameter_list|()
block|{
name|TokenProviderCallback
name|cb
init|=
operator|new
name|TokenProviderCallback
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp
init|=
operator|new
name|TokenProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|doCreateToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|attributes
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|token
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|cb
operator|.
name|setTokenProvider
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tp
argument_list|,
name|cb
operator|.
name|getTokenProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

