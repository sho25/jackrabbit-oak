begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeTreePermissionOrTest
extends|extends
name|CompositeTreePermissionTest
block|{
annotation|@
name|NotNull
annotation|@
name|Override
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
name|getCompositionType
parameter_list|()
block|{
return|return
name|CompositeAuthorizationConfiguration
operator|.
name|CompositionType
operator|.
name|OR
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedUncoveredPermissions
parameter_list|()
block|{
name|TreePermission
name|mockTp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|TreePermission
operator|.
name|class
argument_list|)
operator|.
name|isGranted
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|AggregatedPermissionProvider
name|mockPP
init|=
name|mock
argument_list|(
name|AggregatedPermissionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockPP
operator|.
name|getTreePermission
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|TreeType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|TreePermission
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockPP
operator|.
name|supportedPermissions
argument_list|(
name|mockTp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|)
expr_stmt|;
name|TreePermission
name|rootTp
init|=
name|createRootTreePermission
argument_list|(
name|mockPP
argument_list|,
name|mockPP
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rootTp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPP
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|supportedPermissions
argument_list|(
name|mockTp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

