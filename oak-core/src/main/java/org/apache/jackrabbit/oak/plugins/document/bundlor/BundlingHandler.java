begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_class
specifier|public
class|class
name|BundlingHandler
block|{
specifier|private
specifier|final
name|BundledTypesRegistry
name|registry
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|BundlingRoot
name|root
decl_stmt|;
specifier|public
name|BundlingHandler
parameter_list|(
name|BundledTypesRegistry
name|registry
parameter_list|)
block|{
name|this
argument_list|(
name|registry
argument_list|,
operator|new
name|BundlingRoot
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BundlingHandler
parameter_list|(
name|BundledTypesRegistry
name|registry
parameter_list|,
name|BundlingRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
specifier|public
name|String
name|getPropertyPath
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|root
operator|.
name|getPropertyPath
argument_list|(
name|path
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRootBundlePath
parameter_list|()
block|{
return|return
name|root
operator|.
name|bundlingEnabled
argument_list|()
condition|?
name|root
operator|.
name|getPath
argument_list|()
else|:
name|path
return|;
block|}
specifier|public
name|BundlingHandler
name|childHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|isBundled
argument_list|(
name|childPath
argument_list|)
condition|)
block|{
return|return
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|,
name|root
argument_list|,
name|childPath
argument_list|)
return|;
block|}
comment|//TODO For only add we should lookup (fully new add) we should lookup new bundlor
comment|//For update and delete we should always rely on existing bundlor config
comment|//TODO Check for pattern from state first
name|DocumentBundlor
name|bundlor
init|=
name|registry
operator|.
name|getBundlor
argument_list|(
name|state
argument_list|)
decl_stmt|;
return|return
operator|new
name|BundlingHandler
argument_list|(
name|registry
argument_list|,
operator|new
name|BundlingRoot
argument_list|(
name|childPath
argument_list|,
name|bundlor
argument_list|)
argument_list|,
name|childPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isBundlingRoot
parameter_list|()
block|{
return|return
name|root
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

