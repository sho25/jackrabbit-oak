begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|nodestore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|fixtures
operator|.
name|datastore
operator|.
name|DataStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|binary
operator|.
name|util
operator|.
name|BinaryAccessDSGCFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|util
operator|.
name|ComponentHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentBlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|MongoConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentNodeStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Creates a repository with  * - DocumentNodeStore, storing data in mongo (available locally or deloying in docker if available)  * - an optional DataStore provided by DataStoreFixture  */
end_comment

begin_class
specifier|public
class|class
name|DocumentMongoNodeStoreFixture
extends|extends
name|NodeStoreFixture
implements|implements
name|ComponentHolder
implements|,
name|BinaryAccessDSGCFixture
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DataStoreFixture
name|dataStoreFixture
decl_stmt|;
specifier|private
specifier|final
name|Table
argument_list|<
name|NodeStore
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
name|components
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|MongoConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
specifier|final
name|MongoConnectionFactory
name|connFactory
init|=
operator|new
name|MongoConnectionFactory
argument_list|()
decl_stmt|;
specifier|public
name|DocumentMongoNodeStoreFixture
parameter_list|(
annotation|@
name|Nullable
name|DataStoreFixture
name|dataStoreFixture
parameter_list|)
block|{
name|this
operator|.
name|dataStoreFixture
operator|=
name|dataStoreFixture
expr_stmt|;
name|this
operator|.
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
name|this
operator|.
name|connection
operator|=
name|connFactory
operator|.
name|getConnection
argument_list|()
expr_stmt|;
comment|// if a DataStore is configured, it must be available for our NodeStore to be available
return|return
operator|(
name|dataStoreFixture
operator|==
literal|null
operator|||
name|dataStoreFixture
operator|.
name|isAvailable
argument_list|()
operator|)
operator|&&
operator|(
name|connection
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|createNodeStore
parameter_list|()
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating NodeStore using "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|MongoDocumentNodeStoreBuilder
name|documentNodeStoreBuilder
init|=
name|MongoDocumentNodeStoreBuilder
operator|.
name|newMongoDocumentNodeStoreBuilder
argument_list|()
operator|.
name|setMongoDB
argument_list|(
name|connection
operator|.
name|getMongoClient
argument_list|()
argument_list|,
name|connection
operator|.
name|getDBName
argument_list|()
argument_list|)
decl_stmt|;
name|documentNodeStoreBuilder
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|File
name|dataStoreFolder
init|=
literal|null
decl_stmt|;
name|BlobStore
name|blobStore
init|=
literal|null
decl_stmt|;
name|DataStore
name|dataStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataStoreFixture
operator|!=
literal|null
condition|)
block|{
name|dataStore
operator|=
name|dataStoreFixture
operator|.
name|createDataStore
argument_list|()
expr_stmt|;
comment|// init with a new folder inside a temporary one
name|dataStoreFolder
operator|=
name|FixtureUtils
operator|.
name|createTempFolder
argument_list|()
expr_stmt|;
name|dataStore
operator|.
name|init
argument_list|(
name|dataStoreFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|dataStore
argument_list|)
expr_stmt|;
name|documentNodeStoreBuilder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
name|NodeStore
name|nodeStore
init|=
name|documentNodeStoreBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// track all main components
if|if
condition|(
name|dataStore
operator|!=
literal|null
condition|)
block|{
name|components
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
name|DataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dataStore
argument_list|)
expr_stmt|;
name|components
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
name|DataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":folder"
argument_list|,
name|dataStoreFolder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|components
operator|.
name|put
argument_list|(
name|nodeStore
argument_list|,
name|BlobStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeStore
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|RepositoryException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot create test repo fixture "
operator|+
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|nodeStore
operator|instanceof
name|DocumentNodeStore
condition|)
block|{
operator|(
operator|(
name|DocumentNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|DataStore
name|dataStore
init|=
operator|(
name|DataStore
operator|)
name|components
operator|.
name|get
argument_list|(
name|nodeStore
argument_list|,
name|DataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataStore
operator|!=
literal|null
operator|&&
name|dataStoreFixture
operator|!=
literal|null
condition|)
block|{
name|dataStoreFixture
operator|.
name|dispose
argument_list|(
name|dataStore
argument_list|)
expr_stmt|;
name|File
name|dataStoreFolder
init|=
operator|(
name|File
operator|)
name|components
operator|.
name|get
argument_list|(
name|nodeStore
argument_list|,
name|DataStore
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":folder"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|dataStoreFolder
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|components
operator|.
name|row
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|compactStore
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|VersionGarbageCollector
name|vGC
init|=
operator|(
operator|(
name|DocumentNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|getVersionGarbageCollector
argument_list|()
decl_stmt|;
name|VersionGarbageCollector
operator|.
name|VersionGCStats
name|stats
init|=
name|vGC
operator|.
name|gc
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BlobReferenceRetriever
name|getBlobReferenceRetriever
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
return|return
operator|new
name|DocumentBlobReferenceRetriever
argument_list|(
operator|(
name|DocumentNodeStore
operator|)
name|nodeStore
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// for nice Junit parameterized test labels
return|return
name|FixtureUtils
operator|.
name|getFixtureLabel
argument_list|(
name|this
argument_list|,
name|dataStoreFixture
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|components
operator|.
name|get
argument_list|(
name|nodeStore
argument_list|,
name|componentName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

