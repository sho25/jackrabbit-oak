begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
operator|.
name|ConsistencyChecker
import|;
end_import

begin_comment
comment|/**  * Perform a consistency check on an existing segment store.  */
end_comment

begin_class
specifier|public
class|class
name|Check
implements|implements
name|Runnable
block|{
comment|/**      * Create a builder for the {@link Check} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link Check} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|path
decl_stmt|;
specifier|private
name|String
name|journal
decl_stmt|;
specifier|private
name|long
name|debugInterval
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|boolean
name|checkBinaries
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
decl_stmt|;
specifier|private
name|boolean
name|ioStatistics
decl_stmt|;
specifier|private
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the journal of the segment store. This parameter is          * required.          *          * @param journal the path to the journal of the segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withJournal
parameter_list|(
name|String
name|journal
parameter_list|)
block|{
name|this
operator|.
name|journal
operator|=
name|checkNotNull
argument_list|(
name|journal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of seconds between successive debug print statements. This          * parameter is not required and defaults to an arbitrary large number.          *          * @param debugInterval number of seconds between successive debug print          *                      statements. It must be positive.          * @return this builder.          */
specifier|public
name|Builder
name|withDebugInterval
parameter_list|(
name|long
name|debugInterval
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|debugInterval
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|debugInterval
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to scan the full content of binary properties.          * This parameter is not required and defaults to {@code false}.          *          * @param checkBinaries {@code true} if binary properties should be          *                      scanned, {@code false} otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withCheckBinaries
parameter_list|(
name|boolean
name|checkBinaries
parameter_list|)
block|{
name|this
operator|.
name|checkBinaries
operator|=
name|checkBinaries
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content paths to be checked. This parameter is not required and          * defaults to "/".          *           * @param filterPaths          *            paths to be checked          * @return this builder.          */
specifier|public
name|Builder
name|withFilterPaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
parameter_list|)
block|{
name|this
operator|.
name|filterPaths
operator|=
name|filterPaths
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Instruct the command to print statistics about I/O operations          * performed during the check. This parameter is not required and          * defaults to {@code false}.          *          * @param ioStatistics {@code true} if I/O statistics should be          *                     provided, {@code false} otherwise.          * @return this builder.          */
specifier|public
name|Builder
name|withIOStatistics
parameter_list|(
name|boolean
name|ioStatistics
parameter_list|)
block|{
name|this
operator|.
name|ioStatistics
operator|=
name|ioStatistics
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text output stream writer used to print normal output.          * @param outWriter the output writer.          * @return this builder.          */
specifier|public
name|Builder
name|withOutWriter
parameter_list|(
name|PrintWriter
name|outWriter
parameter_list|)
block|{
name|this
operator|.
name|outWriter
operator|=
name|outWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The text error stream writer used to print erroneous output.          * @param errWriter the error writer.          * @return this builder.          */
specifier|public
name|Builder
name|withErrWriter
parameter_list|(
name|PrintWriter
name|errWriter
parameter_list|)
block|{
name|this
operator|.
name|errWriter
operator|=
name|errWriter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link Check} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|Runnable
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|journal
argument_list|)
expr_stmt|;
return|return
operator|new
name|Check
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|File
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|journal
decl_stmt|;
specifier|private
specifier|final
name|long
name|debugInterval
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|checkBinaries
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ioStatistics
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|Check
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
name|this
operator|.
name|journal
operator|=
name|builder
operator|.
name|journal
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|builder
operator|.
name|debugInterval
expr_stmt|;
name|this
operator|.
name|checkBinaries
operator|=
name|builder
operator|.
name|checkBinaries
expr_stmt|;
name|this
operator|.
name|filterPaths
operator|=
name|builder
operator|.
name|filterPaths
expr_stmt|;
name|this
operator|.
name|ioStatistics
operator|=
name|builder
operator|.
name|ioStatistics
expr_stmt|;
name|this
operator|.
name|outWriter
operator|=
name|builder
operator|.
name|outWriter
expr_stmt|;
name|this
operator|.
name|errWriter
operator|=
name|builder
operator|.
name|errWriter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ConsistencyChecker
operator|.
name|checkConsistency
argument_list|(
name|path
argument_list|,
name|journal
argument_list|,
name|debugInterval
argument_list|,
name|checkBinaries
argument_list|,
name|filterPaths
argument_list|,
name|ioStatistics
argument_list|,
name|outWriter
argument_list|,
name|errWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

