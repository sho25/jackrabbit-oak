begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_comment
comment|/**  * This provides the 'clusterView' repository descriptors  **/
end_comment

begin_class
class|class
name|SegmentDiscoveryLiteDescriptors
implements|implements
name|Descriptors
block|{
comment|/**      * Name of the repository descriptor via which the clusterView is published - which is the reason d'etre of the      * DocumentDiscoveryLiteService TODO: move this constant to a generic place for both segment and document      **/
specifier|private
specifier|static
specifier|final
name|String
name|OAK_DISCOVERYLITE_CLUSTERVIEW
init|=
literal|"oak.discoverylite.clusterview"
decl_stmt|;
specifier|private
specifier|final
name|SimpleValueFactory
name|factory
init|=
operator|new
name|SimpleValueFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
name|SegmentDiscoveryLiteDescriptors
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getKeys
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|OAK_DISCOVERYLITE_CLUSTERVIEW
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStandardDescriptor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|OAK_DISCOVERYLITE_CLUSTERVIEW
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleValueDescriptor
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|OAK_DISCOVERYLITE_CLUSTERVIEW
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OAK_DISCOVERYLITE_CLUSTERVIEW
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|factory
operator|.
name|createValue
argument_list|(
name|getClusterViewAsDescriptorValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getValues
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OAK_DISCOVERYLITE_CLUSTERVIEW
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Value
index|[]
block|{
name|getValue
argument_list|(
name|key
argument_list|)
block|}
return|;
block|}
specifier|private
name|String
name|getClusterViewAsDescriptorValue
parameter_list|()
block|{
comment|// since currently segment node store is not running in a cluster
comment|// we can hard-code a single-vm descriptor here:
comment|// {"seq":4,"final":true,"me":1,"active":[1],"deactivating":[],"inactive":[2]}
comment|// OAK-3672 : 'id' is now allowed to be null (supported by upper layers),
comment|//            and for tarMk we're doing exactly that (id==null) - indicating
comment|//            to upper layers that we're not really in a cluster and that
comment|//            this low level descriptor doesn't manage the 'cluster id'
comment|//            in such a case.
comment|// OAK-4006: but ClusterRepositoryInfo now provides a persistent clusterId,
comment|//           so that is now used also for discovery-lite via exactly below 'id'
name|String
name|clusterId
init|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|store
argument_list|)
decl_stmt|;
return|return
literal|"{\"seq\":1,\"final\":true,\"me\":1,\"id\":\""
operator|+
name|clusterId
operator|+
literal|"\",\"active\":[1],\"deactivating\":[],\"inactive\":[]}"
return|;
block|}
block|}
end_class

end_unit

