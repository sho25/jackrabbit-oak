begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|OperationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|RetryExponentialRetry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|RetryNoRetry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Utils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_FILE
init|=
literal|"azure.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DASH
init|=
literal|"-"
decl_stmt|;
comment|/**      * private constructor so that class cannot initialized from outside.      */
specifier|private
name|Utils
parameter_list|()
block|{     }
comment|/**      * Create CloudBlobClient from properties.      *      * @param connectionString connectionString to configure @link {@link CloudBlobClient}      * @return {@link CloudBlobClient}      */
specifier|public
specifier|static
name|CloudBlobClient
name|getBlobClient
parameter_list|(
specifier|final
name|String
name|connectionString
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|InvalidKeyException
block|{
name|CloudStorageAccount
name|account
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|connectionString
argument_list|)
decl_stmt|;
name|CloudBlobClient
name|client
init|=
name|account
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
return|return
name|client
return|;
block|}
specifier|public
specifier|static
name|CloudBlobContainer
name|getBlobContainer
parameter_list|(
specifier|final
name|String
name|connectionString
parameter_list|,
specifier|final
name|String
name|containerName
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|CloudBlobClient
name|client
init|=
name|Utils
operator|.
name|getBlobClient
argument_list|(
name|connectionString
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|getContainerReference
argument_list|(
name|containerName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
decl||
name|URISyntaxException
decl||
name|StorageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setProxyIfNeeded
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
name|String
name|proxyHost
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|PROXY_HOST
argument_list|)
decl_stmt|;
name|String
name|proxyPort
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|PROXY_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|proxyHost
argument_list|)
operator|&&
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|proxyPort
argument_list|)
condition|)
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|proxyPort
argument_list|)
decl_stmt|;
name|SocketAddress
name|proxyAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|proxyHost
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
argument_list|,
name|proxyAddr
argument_list|)
decl_stmt|;
name|OperationContext
operator|.
name|setDefaultProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|RetryPolicy
name|getRetryPolicy
parameter_list|(
specifier|final
name|String
name|maxRequestRetry
parameter_list|)
block|{
name|int
name|retries
init|=
name|PropertiesUtil
operator|.
name|toInteger
argument_list|(
name|maxRequestRetry
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|retries
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|retries
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|RetryNoRetry
argument_list|()
return|;
block|}
return|return
operator|new
name|RetryExponentialRetry
argument_list|(
name|RetryPolicy
operator|.
name|DEFAULT_CLIENT_BACKOFF
argument_list|,
name|retries
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getConnectionStringFromProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|String
name|sasUri
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_SAS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|blobEndpoint
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_BLOB_ENDPOINT
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|connectionString
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_CONNECTION_STRING
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connectionString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|connectionString
return|;
block|}
if|if
condition|(
operator|!
name|sasUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getConnectionStringForSas
argument_list|(
name|sasUri
argument_list|,
name|blobEndpoint
argument_list|)
return|;
block|}
return|return
name|getConnectionString
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_NAME
argument_list|,
literal|""
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|AzureConstants
operator|.
name|AZURE_STORAGE_ACCOUNT_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getConnectionStringForSas
parameter_list|(
name|String
name|sasUri
parameter_list|,
name|String
name|blobEndpoint
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"BlobEndpoint=%s;SharedAccessSignature=%s"
argument_list|,
name|blobEndpoint
argument_list|,
name|sasUri
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getConnectionString
parameter_list|(
specifier|final
name|String
name|accountName
parameter_list|,
specifier|final
name|String
name|accountKey
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s"
argument_list|,
name|accountName
argument_list|,
name|accountKey
argument_list|)
return|;
block|}
comment|/**      * Read a configuration properties file. If the file name ends with ";burn",      * the file is deleted after reading.      *      * @param fileName the properties file name      * @return the properties      * @throws java.io.IOException if the file doesn't exist      */
specifier|public
specifier|static
name|Properties
name|readConfig
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Config file not found. fileName="
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|prop
return|;
block|}
block|}
end_class

end_unit

