begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The<tt>DocumentMkBuilderProvider</tt> is a JUnit<tt>@Rule</tt> which  * automatically disposes created<tt>DocumentNodeStore</tt> instances  *   *<p>Usage samples are below</p>  *   *<p>Before:</p>  *    *<pre>  *  @Test public void someTest() {  *      DocumentNodeStore = new DocumentMK.Builder().getNodeStore();  *  }</pre>  *    *<p>After:</p>  *    *<pre>  *  @Rule     public DocumentMkBuilderProvider builderProvider = new DocumentMkBuilderProvider();  *    *  @Test public void someTest() {  *      DocumentNodeStore = builderProvider.newBuilder().getNodeStore();  *  }</pre>  *  */
end_comment

begin_class
specifier|public
class|class
name|DocumentMKBuilderProvider
extends|extends
name|ExternalResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentMKBuilderProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DocumentNodeStore
argument_list|>
name|nodeStores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
for|for
control|(
name|DocumentNodeStore
name|ns
range|:
name|nodeStores
control|)
block|{
try|try
block|{
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while disposing DocumentNodeStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|DocumentMK
operator|.
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|DisposingDocumentMKBuilder
argument_list|()
return|;
block|}
specifier|private
class|class
name|DisposingDocumentMKBuilder
extends|extends
name|DocumentMK
operator|.
name|Builder
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeStore
name|getNodeStore
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|super
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|nodeStores
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|ns
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentNodeStore
name|build
parameter_list|()
block|{
name|DocumentNodeStore
name|ns
init|=
name|super
operator|.
name|build
argument_list|()
decl_stmt|;
name|nodeStores
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|ns
return|;
block|}
block|}
block|}
end_class

end_unit

