begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_comment
comment|/**  * Performs validation related to unique index by ensuring that for  * given property value only one indexed entry is present. The query  * is performed against multiple stores  *  *   - Property storage - Stores the recently added unique keys via UniqueStore strategy  *   - Lucene storage - Stores the long term index in lucene  */
end_comment

begin_class
specifier|public
class|class
name|UniquenessConstraintValidator
block|{
specifier|private
specifier|final
name|NodeState
name|rootState
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uniqueKeys
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PropertyQuery
name|firstStore
decl_stmt|;
specifier|private
name|PropertyQuery
name|secondStore
init|=
name|PropertyQuery
operator|.
name|DEFAULT
decl_stmt|;
specifier|public
name|UniquenessConstraintValidator
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|rootState
operator|=
name|rootState
expr_stmt|;
name|this
operator|.
name|firstStore
operator|=
operator|new
name|PropertyIndexQuery
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|propertyRelativePath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|afterKeys
parameter_list|)
block|{
name|uniqueKeys
operator|.
name|putAll
argument_list|(
name|propertyRelativePath
argument_list|,
name|afterKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|uniqueKeys
operator|.
name|entries
argument_list|()
control|)
block|{
name|String
name|propertyRelativePath
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|indexedPaths
init|=
name|getIndexedPaths
argument_list|(
name|propertyRelativePath
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allPaths
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|indexedPaths
argument_list|)
decl_stmt|;
if|if
condition|(
name|allPaths
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Uniqueness constraint violated for property [%s] for "
operator|+
literal|"index [%s]. IndexedPaths %s"
argument_list|,
name|propertyRelativePath
argument_list|,
name|indexPath
argument_list|,
name|allPaths
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|30
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|setSecondStore
parameter_list|(
name|PropertyQuery
name|secondStore
parameter_list|)
block|{
name|this
operator|.
name|secondStore
operator|=
name|checkNotNull
argument_list|(
name|secondStore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getIndexedPaths
parameter_list|(
name|String
name|propertyRelativePath
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|firstStore
operator|.
name|getIndexedPaths
argument_list|(
name|propertyRelativePath
argument_list|,
name|value
argument_list|)
argument_list|,
name|getValidPathsFromSecondStore
argument_list|(
name|propertyRelativePath
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getValidPathsFromSecondStore
parameter_list|(
name|String
name|propertyRelativePath
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|secondStore
operator|.
name|getIndexedPaths
argument_list|(
name|propertyRelativePath
argument_list|,
name|value
argument_list|)
argument_list|,
name|path
lambda|->
block|{
name|NodeState
name|node
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|rootState
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyState
name|uniqueProp
init|=
name|getValue
argument_list|(
name|node
argument_list|,
name|propertyRelativePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueProp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|uniqueProp
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|PropertyState
name|getValue
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|propertyRelativePath
parameter_list|)
block|{
name|int
name|depth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|propertyRelativePath
argument_list|)
decl_stmt|;
name|NodeState
name|propNode
init|=
name|node
decl_stmt|;
name|String
name|propName
init|=
name|propertyRelativePath
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|1
condition|)
block|{
name|propName
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|propertyRelativePath
argument_list|)
expr_stmt|;
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|propertyRelativePath
argument_list|)
decl_stmt|;
name|propNode
operator|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|node
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
block|}
return|return
name|propNode
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

