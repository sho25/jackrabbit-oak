begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * A depth first traversal trace.  *<p>  * When {@link Trace#run(NodeState) run} this trace performs a depth first traversal starting  * from the passed node down to a certain depth. It logs the current depth, the number of traversed  * nodes and the current path as additional {@link IOTracer#setContext(List) context}.  */
end_comment

begin_class
specifier|public
class|class
name|DepthFirstTrace
implements|implements
name|Trace
block|{
comment|/**      * The context specification of this trace.      * @see IOTracer#newIOTracer(Function, Writer, String)      */
annotation|@
name|Nonnull
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_SPEC
init|=
literal|"depth,count,path"
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Consumer
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|context
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|AtomicInteger
name|nodeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/**      * Create a new instance of a depth first traversal trace.      * @param depth     maximal depth of the nodes to traverse      * @param path      path of the root node where to start traversing      * @param context   consumer to pass the additional context to      */
specifier|public
name|DepthFirstTrace
parameter_list|(
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|Consumer
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|context
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|depth
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|node
parameter_list|)
block|{
name|traverse
argument_list|(
name|getNode
argument_list|(
name|node
argument_list|,
name|path
argument_list|)
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|NodeState
name|getNode
parameter_list|(
annotation|@
name|Nonnull
name|NodeState
name|root
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|NodeState
name|node
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|traverse
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|int
name|depth
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|updateContext
argument_list|(
name|context
argument_list|,
name|depth
argument_list|,
name|nodeCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|<
name|this
operator|.
name|depth
condition|)
block|{
name|node
operator|.
name|getChildNodeEntries
argument_list|()
operator|.
name|forEach
argument_list|(
name|cse
lambda|->
block|{
name|String
name|childPath
init|=
name|concat
argument_list|(
name|path
argument_list|,
name|cse
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|traverse
argument_list|(
name|cse
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|childPath
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|updateContext
parameter_list|(
annotation|@
name|Nonnull
name|Consumer
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|context
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|count
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|context
operator|.
name|accept
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|valueOf
argument_list|(
name|depth
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|count
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

