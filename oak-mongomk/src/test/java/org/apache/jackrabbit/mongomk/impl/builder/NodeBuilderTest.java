begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|NodeAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"javadoc"
argument_list|)
specifier|public
class|class
name|NodeBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testBuildSimpleNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{ \"/\" : { \"a\" : { \"b\" : {} , \"c\" : {} } } }"
decl_stmt|;
name|Node
name|node
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Node
name|node_c
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a/c"
argument_list|)
decl_stmt|;
name|Node
name|node_b
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|Node
name|node_a
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a"
argument_list|,
operator|new
name|Node
index|[]
block|{
name|node_b
block|,
name|node_c
block|}
argument_list|)
decl_stmt|;
name|Node
name|node_root
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Node
index|[]
block|{
name|node_a
block|}
argument_list|)
decl_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|node
argument_list|,
name|node_root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildSimpleNodesWithRevisionId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
literal|"{ \"/#1\" : { \"a#1\" : { \"b#2\" : {} , \"c#2\" : {} } } }"
decl_stmt|;
name|Node
name|node
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Node
name|node_c
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a/c"
argument_list|)
decl_stmt|;
name|node_c
operator|.
name|setRevisionId
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|Node
name|node_b
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|node_b
operator|.
name|setRevisionId
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|Node
name|node_a
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/a"
argument_list|,
operator|new
name|Node
index|[]
block|{
name|node_b
block|,
name|node_c
block|}
argument_list|)
decl_stmt|;
name|node_a
operator|.
name|setRevisionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Node
name|node_root
init|=
operator|new
name|NodeImpl
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Node
index|[]
block|{
name|node_a
block|}
argument_list|)
decl_stmt|;
name|node_root
operator|.
name|setRevisionId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|NodeAssert
operator|.
name|assertDeepEquals
argument_list|(
name|node
argument_list|,
name|node_root
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

