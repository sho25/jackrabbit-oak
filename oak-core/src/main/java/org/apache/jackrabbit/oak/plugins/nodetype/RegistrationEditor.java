begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CHILDNODEDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MANDATORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MULTIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PROPERTYDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDPRIMARYTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SUPERTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MANDATORY_CHILD_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MANDATORY_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_MIXIN_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_SINGLE_VALUED_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_NAMED_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_PRIMARY_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|OAK_SUPERTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Editor that validates the consistency of the in-content node type registry  * under {@code /jcr:system/jcr:nodeTypes} and maintains the access-optimized  * versions of node type information as defined in {@code oak:nodeType}.  *  *<ul>  *<li>validate new definitions</li>  *<li>detect collisions,</li>  *<li>prevent circular inheritance,</li>  *<li>reject modifications to definitions that render existing content invalid,</li>  *<li>prevent un-registration of built-in node types.</li>  *</ul>  */
end_comment

begin_class
class|class
name|RegistrationEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|changedTypes
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedTypes
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|RegistrationEditor
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates the inheritance hierarchy of the identified node type and      * merges supertype information to the pre-compiled type information      * fields. This makes full type information directly accessible without      * having to traverse up the type hierarchy.      *      * @param types      * @param name      * @return      * @throws CommitFailedException      */
specifier|private
name|void
name|mergeSupertypes
parameter_list|(
name|NodeBuilder
name|types
parameter_list|,
name|NodeBuilder
name|type
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|hasProperty
argument_list|(
name|OAK_SUPERTYPES
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|OAK_SUPERTYPES
argument_list|,
name|empty
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
comment|// - jcr:supertypes (NAME) protected multiple
name|PropertyState
name|supertypes
init|=
name|type
operator|.
name|getProperty
argument_list|(
name|JCR_SUPERTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|supername
range|:
name|supertypes
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
name|types
operator|.
name|hasChildNode
argument_list|(
name|supername
argument_list|)
condition|)
block|{
name|NodeBuilder
name|supertype
init|=
name|types
operator|.
name|child
argument_list|(
name|supername
argument_list|)
decl_stmt|;
name|mergeSupertypes
argument_list|(
name|types
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
name|mergeSupertype
argument_list|(
name|type
argument_list|,
name|supertype
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|35
argument_list|,
literal|"Missing supertype "
operator|+
name|supername
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|getBoolean
argument_list|(
name|type
argument_list|,
name|JCR_ISMIXIN
argument_list|)
operator|&&
operator|!
name|contains
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_SUPERTYPES
argument_list|)
argument_list|,
name|NT_BASE
argument_list|)
operator|&&
operator|!
name|NT_BASE
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|hasChildNode
argument_list|(
name|NT_BASE
argument_list|)
condition|)
block|{
name|NodeBuilder
name|supertype
init|=
name|types
operator|.
name|child
argument_list|(
name|NT_BASE
argument_list|)
decl_stmt|;
name|mergeSupertypes
argument_list|(
name|types
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
name|mergeSupertype
argument_list|(
name|type
argument_list|,
name|supertype
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|35
argument_list|,
literal|"Missing supertype "
operator|+
name|NT_BASE
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|getBoolean
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|builder
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getValue
argument_list|(
name|BOOLEAN
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|property
init|=
name|builder
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|mergeSupertype
parameter_list|(
name|NodeBuilder
name|type
parameter_list|,
name|NodeState
name|supertype
parameter_list|)
block|{
name|String
name|supername
init|=
name|supertype
operator|.
name|getProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|addNameToList
argument_list|(
name|type
argument_list|,
name|OAK_SUPERTYPES
argument_list|,
name|supername
argument_list|)
expr_stmt|;
name|mergeNameList
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_SUPERTYPES
argument_list|)
expr_stmt|;
name|mergeNameList
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_MANDATORY_PROPERTIES
argument_list|)
expr_stmt|;
name|mergeNameList
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_MANDATORY_CHILD_NODES
argument_list|)
expr_stmt|;
name|mergeNameList
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_NAMED_SINGLE_VALUED_PROPERTIES
argument_list|)
expr_stmt|;
name|mergeSubtree
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_NAMED_PROPERTY_DEFINITIONS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mergeSubtree
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mergeSubtree
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mergeSubtree
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|,
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mergeNameList
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|listName
parameter_list|)
block|{
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|nameList
init|=
name|newLinkedHashSet
argument_list|(
name|getNames
argument_list|(
name|builder
argument_list|,
name|listName
argument_list|)
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|nameList
argument_list|,
name|state
operator|.
name|getProperty
argument_list|(
name|listName
argument_list|)
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|listName
argument_list|,
name|nameList
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mergeSubtree
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|NodeState
name|subtree
init|=
name|state
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtree
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|builder
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setNode
argument_list|(
name|name
argument_list|,
name|subtree
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|NodeBuilder
name|subbuilder
init|=
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|subname
range|:
name|subtree
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|mergeSubtree
argument_list|(
name|subbuilder
argument_list|,
name|subtree
argument_list|,
name|subname
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Validates and pre-compiles the named node type.      *      * @param types builder for the /jcr:system/jcr:nodeTypes node      * @param name name of the node type to validate and compile      * @throws CommitFailedException if type validation fails      */
specifier|private
name|void
name|validateAndCompileType
parameter_list|(
name|NodeBuilder
name|types
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|type
init|=
name|types
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// - jcr:nodeTypeName (NAME) protected mandatory
name|PropertyState
name|nodeTypeName
init|=
name|type
operator|.
name|getProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeTypeName
operator|==
literal|null
operator|||
operator|!
name|name
operator|.
name|equals
argument_list|(
name|nodeTypeName
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
literal|34
argument_list|,
literal|"Unexpected "
operator|+
name|JCR_NODETYPENAME
operator|+
literal|" in type "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|// Prepare the type node pre-compilation of the oak:nodeType info
name|Iterable
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|emptyList
argument_list|()
decl_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:nodeType"
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|type
operator|.
name|removeProperty
argument_list|(
name|OAK_SUPERTYPES
argument_list|)
expr_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|OAK_PRIMARY_SUBTYPES
argument_list|,
name|empty
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|OAK_MANDATORY_PROPERTIES
argument_list|,
name|empty
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|OAK_MANDATORY_CHILD_NODES
argument_list|,
name|empty
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|type
operator|.
name|setProperty
argument_list|(
name|OAK_NAMED_SINGLE_VALUED_PROPERTIES
argument_list|,
name|empty
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|type
operator|.
name|removeNode
argument_list|(
name|OAK_NAMED_PROPERTY_DEFINITIONS
argument_list|)
expr_stmt|;
name|type
operator|.
name|removeNode
argument_list|(
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
expr_stmt|;
name|type
operator|.
name|removeNode
argument_list|(
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
expr_stmt|;
name|type
operator|.
name|removeNode
argument_list|(
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
expr_stmt|;
comment|// + jcr:propertyDefinition (nt:propertyDefinition)
comment|//   = nt:propertyDefinition protected sns
comment|// + jcr:childNodeDefinition (nt:childNodeDefinition)
comment|//   = nt:childNodeDefinition protected sns
for|for
control|(
name|String
name|childNodeName
range|:
name|type
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeState
name|definition
init|=
name|type
operator|.
name|child
argument_list|(
name|childNodeName
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|JCR_PROPERTYDEFINITION
argument_list|)
condition|)
block|{
name|validateAndCompilePropertyDefinition
argument_list|(
name|type
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|JCR_CHILDNODEDEFINITION
argument_list|)
condition|)
block|{
name|validateAndCompileChildNodeDefinition
argument_list|(
name|types
argument_list|,
name|type
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addNameToList
parameter_list|(
name|NodeBuilder
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
name|values
operator|=
name|newArrayList
argument_list|(
name|getNames
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|type
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateAndCompilePropertyDefinition
parameter_list|(
name|NodeBuilder
name|type
parameter_list|,
name|NodeState
name|definition
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// - jcr:name (NAME) protected
name|PropertyState
name|name
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|definitions
decl_stmt|;
name|String
name|propertyName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|propertyName
operator|=
name|name
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|String
name|escapedName
init|=
name|propertyName
decl_stmt|;
if|if
condition|(
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|escapedName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:primaryType"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|escapedName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:mixinTypes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|escapedName
argument_list|)
condition|)
block|{
name|escapedName
operator|=
literal|"oak:uuid"
expr_stmt|;
block|}
name|definitions
operator|=
name|type
operator|.
name|child
argument_list|(
name|OAK_NAMED_PROPERTY_DEFINITIONS
argument_list|)
expr_stmt|;
name|definitions
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|OAK_NAMED_PROPERTY_DEFINITIONS
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|definitions
operator|=
name|definitions
operator|.
name|child
argument_list|(
name|escapedName
argument_list|)
expr_stmt|;
comment|// - jcr:mandatory (BOOLEAN) protected mandatory
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|JCR_MANDATORY
argument_list|)
condition|)
block|{
name|addNameToList
argument_list|(
name|type
argument_list|,
name|OAK_MANDATORY_PROPERTIES
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|definitions
operator|=
name|type
operator|.
name|child
argument_list|(
name|OAK_RESIDUAL_PROPERTY_DEFINITIONS
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|OAK_PROPERTY_DEFINITIONS
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// - jcr:requiredType (STRING) protected mandatory
comment|//< 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE',
comment|//   'DECIMAL', 'BOOLEAN', 'DATE', 'NAME', 'PATH',
comment|//   'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'
name|String
name|key
init|=
literal|"UNDEFINED"
decl_stmt|;
name|PropertyState
name|requiredType
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_REQUIREDTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredType
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|requiredType
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
block|}
comment|// - jcr:multiple (BOOLEAN) protected mandatory
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|JCR_MULTIPLE
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"BINARY"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
literal|"BINARIES"
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|key
operator|+
literal|"S"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|!=
literal|null
condition|)
block|{
name|addNameToList
argument_list|(
name|type
argument_list|,
name|OAK_NAMED_SINGLE_VALUED_PROPERTIES
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|setNode
argument_list|(
name|key
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateAndCompileChildNodeDefinition
parameter_list|(
name|NodeBuilder
name|types
parameter_list|,
name|NodeBuilder
name|type
parameter_list|,
name|NodeState
name|definition
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// - jcr:name (NAME) protected
name|PropertyState
name|name
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_NAME
argument_list|)
decl_stmt|;
name|NodeBuilder
name|definitions
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|String
name|childNodeName
init|=
name|name
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|definitions
operator|=
name|type
operator|.
name|child
argument_list|(
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
expr_stmt|;
name|definitions
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|OAK_NAMED_CHILD_NODE_DEFINITIONS
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|definitions
operator|=
name|definitions
operator|.
name|child
argument_list|(
name|childNodeName
argument_list|)
expr_stmt|;
comment|// - jcr:mandatory (BOOLEAN) protected mandatory
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|JCR_MANDATORY
argument_list|)
condition|)
block|{
name|addNameToList
argument_list|(
name|type
argument_list|,
name|OAK_MANDATORY_CHILD_NODES
argument_list|,
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|definitions
operator|=
name|type
operator|.
name|child
argument_list|(
name|OAK_RESIDUAL_CHILD_NODE_DEFINITIONS
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|OAK_CHILD_NODE_DEFINITIONS
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// - jcr:requiredPrimaryTypes (NAME)
comment|//   = 'nt:base' protected mandatory multiple
name|PropertyState
name|requiredTypes
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_REQUIREDPRIMARYTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|requiredTypes
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|hasChildNode
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
literal|"Constraint"
argument_list|,
literal|33
argument_list|,
literal|"Unknown required primary type "
operator|+
name|key
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|definitions
operator|.
name|hasChildNode
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|definitions
operator|.
name|setNode
argument_list|(
name|key
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//------------------------------------------------------------< Editor>--
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|modified
condition|)
block|{
name|NodeBuilder
name|types
init|=
name|builder
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|child
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|types
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|validateAndCompileType
argument_list|(
name|types
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|types
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|mergeSupertypes
argument_list|(
name|types
argument_list|,
name|types
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|types
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|type
init|=
name|types
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|listName
init|=
name|OAK_PRIMARY_SUBTYPES
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|listName
operator|=
name|OAK_MIXIN_SUBTYPES
expr_stmt|;
block|}
for|for
control|(
name|String
name|supername
range|:
name|getNames
argument_list|(
name|type
argument_list|,
name|OAK_SUPERTYPES
argument_list|)
control|)
block|{
name|addNameToList
argument_list|(
name|types
operator|.
name|child
argument_list|(
name|supername
argument_list|)
argument_list|,
name|listName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|changedTypes
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|removedTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: Find and re-validate any nodes in the repository that
comment|// refer to any of the changed (or removed) node types.
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|modified
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|modified
operator|=
literal|true
expr_stmt|;
name|changedTypes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|modified
operator|=
literal|true
expr_stmt|;
name|removedTypes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

