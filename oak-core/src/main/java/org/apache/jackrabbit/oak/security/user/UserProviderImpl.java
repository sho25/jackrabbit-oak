begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|RangeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|SessionQueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|TreeBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|MembershipProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * User provider implementation and manager for group memberships with the  * following characteristics:  *  *<h1>UserProvider</h1>  *  *<h2>User and Group Creation</h2>  * This implementation creates the JCR nodes corresponding the a given  * authorizable ID with the following behavior:  *<ul>  *<li>Users are created below /rep:security/rep:authorizables/rep:users or  * the path configured in the {@link org.apache.jackrabbit.oak.spi.security.user.UserConfig#PARAM_USER_PATH}  * respectively.</li>  *<li>Groups are created below /rep:security/rep:authorizables/rep:groups or  * the path configured in the {@link org.apache.jackrabbit.oak.spi.security.user.UserConfig#PARAM_GROUP_PATH}  * respectively.</li>  *<li>Below each category authorizables are created within a human readable  * structure based on the defined intermediate path or some internal logic  * with a depth defined by the {@code defaultDepth} config option.<br>  * E.g. creating a user node for an ID 'aSmith' would result in the following  * structure assuming defaultDepth == 2 is used:  *<pre>  * + rep:security            [rep:AuthorizableFolder]  *   + rep:authorizables     [rep:AuthorizableFolder]  *     + rep:users           [rep:AuthorizableFolder]  *       + a                 [rep:AuthorizableFolder]  *         + aS              [rep:AuthorizableFolder]  * ->        + aSmith        [rep:User]  *</pre>  *</li>  *<li>The node name is calculated from the specified authorizable ID  * {@link org.apache.jackrabbit.util.Text#escapeIllegalJcrChars(String) escaping} any illegal JCR chars.</li>  *<li>If no intermediate path is passed the names of the intermediate  * folders are calculated from the leading chars of the escaped node name.</li>  *<li>If the escaped node name is shorter than the {@code defaultDepth}  * the last char is repeated.<br>  * E.g. creating a user node for an ID 'a' would result in the following  * structure assuming defaultDepth == 2 is used:  *<pre>  * + rep:security            [rep:AuthorizableFolder]  *   + rep:authorizables     [rep:AuthorizableFolder]  *     + rep:users           [rep:AuthorizableFolder]  *       + a                 [rep:AuthorizableFolder]  *         + aa              [rep:AuthorizableFolder]  * ->        + a             [rep:User]  *</pre></li>  *  *<h3>Conflicts</h3>  *  *<ul>  *<li>If the authorizable node to be created would collide with an existing  *     folder the conflict is resolved by using the colling folder as target.</li>  *<li>The current implementation asserts that authorizable nodes are always  *     created underneath an node of type {@code rep:AuthorizableFolder}. If this  *     condition is violated a {@code ConstraintViolationException} is thrown.</li>  *<li>If the specified intermediate path results in an authorizable node  *     being located outside of the configured content structure a  *     {@code ConstraintViolationException} is thrown.</li>  *</ul>  *  *<h3>Configuration Options</h3>  *<ul>  *<li>{@link org.apache.jackrabbit.oak.spi.security.user.UserConfig#PARAM_USER_PATH}: Underneath this structure  *     all user nodes are created. Default value is  *     "/rep:security/rep:authorizables/rep:users"</li>  *<li>{@link org.apache.jackrabbit.oak.spi.security.user.UserConfig#PARAM_GROUP_PATH}: Underneath this structure  *     all group nodes are created. Default value is  *     "/rep:security/rep:authorizables/rep:groups"</li>  *<li>{@link org.apache.jackrabbit.oak.spi.security.user.UserConfig#PARAM_DEFAULT_DEPTH}: A positive {@code integer}  *     greater than zero defining the depth of the default structure that is  *     always created. Default value: 2</li>  *</ul>  *  *<h3>Compatibility with Jackrabbit 2.x</h3>  *  * Due to the fact that this JCR implementation is expected to deal with huge amount  * of child nodes the following configuration options are no longer supported:  *<ul>  *<li>autoExpandTree</li>  *<li>autoExpandSize</li>  *</ul>  *  *<h2>User and Group Access</h2>  *<h3>By ID</h3>  * TODO  *<h3>By Path</h3>  * TODO  *<h3>By Principal Name</h3>  * TODO  *  *<h1>MembershipProvider</h1>  *  * TODO  */
end_comment

begin_class
specifier|public
class|class
name|UserProviderImpl
implements|implements
name|UserProvider
implements|,
name|MembershipProvider
implements|,
name|UserConstants
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_DEPTH
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|CoreValueFactory
name|valueFactory
decl_stmt|;
specifier|private
specifier|final
name|SessionQueryEngine
name|queryEngine
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|IdentifierManager
name|identifierManager
decl_stmt|;
specifier|private
specifier|final
name|int
name|defaultDepth
decl_stmt|;
specifier|private
specifier|final
name|int
name|splitSize
decl_stmt|;
specifier|private
specifier|final
name|String
name|adminId
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|userPath
decl_stmt|;
specifier|public
name|UserProviderImpl
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|Root
name|root
parameter_list|,
name|UserConfig
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|contentSession
operator|.
name|getCoreValueFactory
argument_list|()
argument_list|,
name|contentSession
operator|.
name|getQueryEngine
argument_list|()
argument_list|,
name|root
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UserProviderImpl
parameter_list|(
name|CoreValueFactory
name|valueFactory
parameter_list|,
name|SessionQueryEngine
name|queryEngine
parameter_list|,
name|Root
name|root
parameter_list|,
name|UserConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|valueFactory
operator|=
name|valueFactory
expr_stmt|;
name|this
operator|.
name|queryEngine
operator|=
name|queryEngine
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|identifierManager
operator|=
operator|new
name|IdentifierManager
argument_list|(
name|queryEngine
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|defaultDepth
operator|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserConfig
operator|.
name|PARAM_DEFAULT_DEPTH
argument_list|,
name|DEFAULT_DEPTH
argument_list|)
expr_stmt|;
name|int
name|splitValue
init|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserConfig
operator|.
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitValue
operator|!=
literal|0
operator|&&
name|splitValue
operator|<
literal|4
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid value {} for {}. Expected integer>= 4 or 0"
argument_list|,
name|splitValue
argument_list|,
name|UserConfig
operator|.
name|PARAM_GROUP_MEMBERSHIP_SPLIT_SIZE
argument_list|)
expr_stmt|;
name|splitValue
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|splitSize
operator|=
name|splitValue
expr_stmt|;
name|this
operator|.
name|adminId
operator|=
name|config
operator|.
name|getAdminId
argument_list|()
expr_stmt|;
name|groupPath
operator|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserConfig
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|DEFAULT_GROUP_PATH
argument_list|)
expr_stmt|;
name|userPath
operator|=
name|config
operator|.
name|getConfigValue
argument_list|(
name|UserConfig
operator|.
name|PARAM_USER_PATH
argument_list|,
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------------< UserProvider>---
annotation|@
name|Override
specifier|public
name|Tree
name|createUser
parameter_list|(
name|String
name|userID
parameter_list|,
name|String
name|intermediateJcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createAuthorizableNode
argument_list|(
name|userID
argument_list|,
literal|false
argument_list|,
name|intermediateJcrPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|createGroup
parameter_list|(
name|String
name|groupID
parameter_list|,
name|String
name|intermediateJcrPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|createAuthorizableNode
argument_list|(
name|groupID
argument_list|,
literal|true
argument_list|,
name|intermediateJcrPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|getAuthorizable
parameter_list|(
name|String
name|authorizableId
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|identifierManager
operator|.
name|getTree
argument_list|(
name|getContentID
argument_list|(
name|authorizableId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizableTree
argument_list|(
name|tree
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|)
condition|)
block|{
return|return
name|tree
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|getAuthorizable
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|int
name|authorizableType
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|identifierManager
operator|.
name|getTree
argument_list|(
name|getContentID
argument_list|(
name|authorizableId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizableTree
argument_list|(
name|tree
argument_list|,
name|authorizableType
argument_list|)
condition|)
block|{
return|return
name|tree
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
argument_list|()
specifier|public
name|Tree
name|getAuthorizableByPath
parameter_list|(
name|String
name|authorizableOakPath
parameter_list|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|authorizableOakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizableTree
argument_list|(
name|tree
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|)
condition|)
block|{
return|return
name|tree
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Tree
name|getAuthorizableByPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|Tree
name|authorizableTree
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|principal
operator|instanceof
name|TreeBasedPrincipal
condition|)
block|{
name|authorizableTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
operator|(
operator|(
name|TreeBasedPrincipal
operator|)
name|principal
operator|)
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// NOTE: in contrast to JR2 the extra shortcut for ID==principalName
comment|// can be omitted as principals names are stored in user defined
comment|// index as well.
try|try
block|{
name|CoreValue
name|bindValue
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CoreValue
argument_list|>
name|bindings
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"principalName"
argument_list|,
name|bindValue
argument_list|)
decl_stmt|;
name|String
name|stmt
init|=
literal|"SELECT * FROM [rep:Authorizable] WHERE [rep:principalName] = $principalName"
decl_stmt|;
name|Result
name|result
init|=
name|queryEngine
operator|.
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"principalName"
argument_list|,
name|bindValue
argument_list|)
argument_list|,
operator|new
name|NamePathMapper
operator|.
name|Default
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|rows
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|rows
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|authorizableTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"query failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|authorizableTree
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthorizableId
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|)
block|{
assert|assert
name|authorizableTree
operator|!=
literal|null
assert|;
name|PropertyState
name|idProp
init|=
name|authorizableTree
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|idProp
operator|!=
literal|null
condition|)
block|{
return|return
name|idProp
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Text
operator|.
name|unescapeIllegalJcrChars
argument_list|(
name|authorizableTree
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAdminUser
parameter_list|(
name|Tree
name|userTree
parameter_list|)
block|{
assert|assert
name|userTree
operator|!=
literal|null
assert|;
return|return
name|isAuthorizableTree
argument_list|(
name|userTree
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_USER
argument_list|)
operator|&&
name|adminId
operator|.
name|equals
argument_list|(
name|getAuthorizableId
argument_list|(
name|userTree
argument_list|)
argument_list|)
return|;
block|}
comment|//--------------------------------------------------< MembershipProvider>---
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembership
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
return|return
name|getMembership
argument_list|(
name|getAuthorizable
argument_list|(
name|authorizableId
argument_list|)
argument_list|,
name|includeInherited
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembership
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|refPaths
init|=
name|identifierManager
operator|.
name|getWeakReferences
argument_list|(
name|authorizableTree
argument_list|,
literal|null
argument_list|,
name|NT_REP_GROUP
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propPath
range|:
name|refPaths
control|)
block|{
name|int
name|index
init|=
name|propPath
operator|.
name|indexOf
argument_list|(
literal|'/'
operator|+
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|groupPaths
operator|.
name|add
argument_list|(
name|propPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Not a membership reference property "
operator|+
name|propPath
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|groupPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInherited
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|getAllMembership
argument_list|(
name|groupPaths
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RangeIteratorAdapter
argument_list|(
name|it
argument_list|,
name|groupPaths
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembers
parameter_list|(
name|String
name|groupId
parameter_list|,
name|int
name|authorizableType
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
return|return
name|getMembers
argument_list|(
name|getAuthorizable
argument_list|(
name|groupId
argument_list|)
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_AUTHORIZABLE
argument_list|,
name|includeInherited
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMembers
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|int
name|authorizableType
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
name|Iterable
name|memberPaths
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: replace usage of PropertySequence (oak-api not possible there)
comment|//                PropertySequence propertySequence = getPropertySequence(membersTree);
comment|//                iterator = new AuthorizableIterator(propertySequence, authorizableType, userManager);
block|}
block|}
else|else
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|CoreValue
argument_list|>
name|vs
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|memberPaths
operator|=
name|Iterables
operator|.
name|transform
argument_list|(
name|vs
argument_list|,
operator|new
name|Function
argument_list|<
name|CoreValue
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CoreValue
name|value
parameter_list|)
block|{
return|return
name|identifierManager
operator|.
name|getPath
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|it
init|=
name|memberPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInherited
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|getAllMembers
argument_list|(
name|it
argument_list|,
name|authorizableType
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RangeIteratorAdapter
argument_list|(
name|it
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|memberPaths
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|authorizableTree
parameter_list|,
name|boolean
name|includeInherited
parameter_list|)
block|{
if|if
condition|(
name|includeInherited
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
init|=
name|getMembership
argument_list|(
name|authorizableTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|groupTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
while|while
condition|(
name|groupPaths
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|groupPaths
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: fix.. testing for property name isn't correct.
comment|// FIXME: usage of PropertySequence isn't possible when operating on oak-API
comment|//                    PropertySequence propertySequence = getPropertySequence(membersTree);
comment|//                    return propertySequence.hasItem(authorizable.getID());
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|CoreValue
argument_list|>
name|members
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|String
name|authorizableUUID
init|=
name|getContentID
argument_list|(
name|authorizableTree
argument_list|)
decl_stmt|;
for|for
control|(
name|CoreValue
name|v
range|:
name|members
control|)
block|{
if|if
condition|(
name|authorizableUUID
operator|.
name|equals
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
comment|// no a member of the specified group
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|newMemberTree
parameter_list|)
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|NodeUtil
name|groupNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|groupTree
argument_list|,
name|valueFactory
argument_list|)
decl_stmt|;
name|NodeUtil
name|membersNode
init|=
name|groupNode
operator|.
name|getOrAddChild
argument_list|(
name|REP_MEMBERS
argument_list|,
name|NT_REP_MEMBERS
argument_list|)
decl_stmt|;
comment|//FIXME: replace usage of PropertySequence with oak-compatible utility
comment|//            PropertySequence properties = getPropertySequence(membersTree);
comment|//            String propName = Text.escapeIllegalJcrChars(authorizable.getID());
comment|//            if (properties.hasItem(propName)) {
comment|//                log.debug("Authorizable {} is already member of {}", authorizable, this);
comment|//                return false;
comment|//            } else {
comment|//                CoreValue newMember = createCoreValue(authorizable);
comment|//                properties.addProperty(propName, newMember);
comment|//            }
block|}
else|else
block|{
name|List
argument_list|<
name|CoreValue
argument_list|>
name|values
decl_stmt|;
name|CoreValue
name|toAdd
init|=
name|createCoreValue
argument_list|(
name|newMemberTree
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|property
operator|.
name|getValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|contains
argument_list|(
name|toAdd
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|values
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
block|}
name|groupTree
operator|.
name|setProperty
argument_list|(
name|REP_MEMBERS
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Tree
name|groupTree
parameter_list|,
name|Tree
name|memberTree
parameter_list|)
block|{
if|if
condition|(
name|useMemberNode
argument_list|(
name|groupTree
argument_list|)
condition|)
block|{
name|Tree
name|membersTree
init|=
name|groupTree
operator|.
name|getChild
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|membersTree
operator|!=
literal|null
condition|)
block|{
comment|// FIXME: replace usage of PropertySequence with oak-compatible utility
comment|//                PropertySequence properties = getPropertySequence(membersTree);
comment|//                String propName = authorizable.getTree().getName();
comment|// FIXME: fix.. testing for property name isn't correct.
comment|//                if (properties.hasItem(propName)) {
comment|//                    Property p = properties.getItem(propName);
comment|//                    userManager.removeInternalProperty(p.getParent(), propName);
comment|//                }
comment|//                return true;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|PropertyState
name|property
init|=
name|groupTree
operator|.
name|getProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|CoreValue
name|toRemove
init|=
name|createCoreValue
argument_list|(
name|memberTree
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|values
init|=
name|property
operator|.
name|getValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|remove
argument_list|(
name|toRemove
argument_list|)
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupTree
operator|.
name|removeProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupTree
operator|.
name|setProperty
argument_list|(
name|REP_MEMBERS
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// nothing changed
name|log
operator|.
name|debug
argument_list|(
literal|"Authorizable {} was not member of {}"
argument_list|,
name|memberTree
operator|.
name|getName
argument_list|()
argument_list|,
name|groupTree
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|String
name|getContentID
parameter_list|(
name|String
name|authorizableId
parameter_list|)
block|{
return|return
name|IdentifierManager
operator|.
name|generateUUID
argument_list|(
name|authorizableId
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getContentID
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|)
block|{
return|return
name|identifierManager
operator|.
name|getIdentifier
argument_list|(
name|authorizableTree
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAuthorizableTree
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|int
name|type
parameter_list|)
block|{
comment|// FIXME: check for node type according to the specified type constraint
if|if
condition|(
name|tree
operator|!=
literal|null
operator|&&
name|tree
operator|.
name|hasProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
condition|)
block|{
name|String
name|ntName
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getString
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
case|:
return|return
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
case|case
name|UserManager
operator|.
name|SEARCH_TYPE_USER
case|:
return|return
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
default|default:
return|return
name|NT_REP_USER
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
operator|||
name|NT_REP_GROUP
operator|.
name|equals
argument_list|(
name|ntName
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|//-----------------------------------------------< private UserProvider>---
specifier|private
name|Tree
name|createAuthorizableNode
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|boolean
name|isGroup
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|nodeName
init|=
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|authorizableId
argument_list|)
decl_stmt|;
name|NodeUtil
name|folder
init|=
name|createFolderNodes
argument_list|(
name|authorizableId
argument_list|,
name|nodeName
argument_list|,
name|isGroup
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|String
name|ntName
init|=
operator|(
name|isGroup
operator|)
condition|?
name|NT_REP_GROUP
else|:
name|NT_REP_USER
decl_stmt|;
name|NodeUtil
name|authorizableNode
init|=
name|folder
operator|.
name|addChild
argument_list|(
name|nodeName
argument_list|,
name|ntName
argument_list|)
decl_stmt|;
name|String
name|nodeID
init|=
name|getContentID
argument_list|(
name|authorizableId
argument_list|)
decl_stmt|;
name|authorizableNode
operator|.
name|setString
argument_list|(
name|REP_AUTHORIZABLE_ID
argument_list|,
name|authorizableId
argument_list|)
expr_stmt|;
name|authorizableNode
operator|.
name|setString
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|nodeID
argument_list|)
expr_stmt|;
return|return
name|authorizableNode
operator|.
name|getTree
argument_list|()
return|;
block|}
comment|/**      * Create folder structure for the authorizable to be created. The structure      * consists of a tree of rep:AuthorizableFolder node(s) starting at the      * configured user or group path. Note that Authorizable nodes are never      * nested.      *      * @param authorizableId      * @param nodeName      * @param isGroup      * @param intermediatePath      * @return The folder node.      * @throws RepositoryException If an error occurs      */
specifier|private
name|NodeUtil
name|createFolderNodes
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|boolean
name|isGroup
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|authRoot
init|=
operator|(
name|isGroup
operator|)
condition|?
name|groupPath
else|:
name|userPath
decl_stmt|;
name|NodeUtil
name|folder
decl_stmt|;
name|Tree
name|authTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|authRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|authTree
operator|==
literal|null
condition|)
block|{
name|folder
operator|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Text
operator|.
name|explode
argument_list|(
name|authRoot
argument_list|,
literal|'/'
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|folder
operator|=
name|folder
operator|.
name|getOrAddChild
argument_list|(
name|name
argument_list|,
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|folder
operator|=
operator|new
name|NodeUtil
argument_list|(
name|authTree
argument_list|,
name|valueFactory
argument_list|)
expr_stmt|;
block|}
name|String
name|folderPath
init|=
name|getFolderPath
argument_list|(
name|authorizableId
argument_list|,
name|intermediatePath
argument_list|)
decl_stmt|;
name|String
index|[]
name|segmts
init|=
name|Text
operator|.
name|explode
argument_list|(
name|folderPath
argument_list|,
literal|'/'
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|segment
range|:
name|segmts
control|)
block|{
name|folder
operator|=
name|folder
operator|.
name|getOrAddChild
argument_list|(
name|segment
argument_list|,
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
expr_stmt|;
comment|// TODO: remove check once UserValidator is active
if|if
condition|(
operator|!
name|folder
operator|.
name|hasPrimaryNodeTypeName
argument_list|(
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Cannot create user/group: Intermediate folders must be of type rep:AuthorizableFolder."
decl_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// test for colliding folder child node.
while|while
condition|(
name|folder
operator|.
name|hasChild
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|NodeUtil
name|colliding
init|=
name|folder
operator|.
name|getChild
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
comment|// TODO: remove check once UserValidator is active
if|if
condition|(
name|colliding
operator|.
name|hasPrimaryNodeTypeName
argument_list|(
name|NT_REP_AUTHORIZABLE_FOLDER
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Existing folder node collides with user/group to be created. Expanding path by: "
operator|+
name|colliding
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|folder
operator|=
name|colliding
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Failed to create authorizable with id '"
operator|+
name|authorizableId
operator|+
literal|"' : "
operator|+
literal|"Detected conflicting node of unexpected node type '"
operator|+
name|colliding
operator|.
name|getString
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|null
argument_list|)
operator|+
literal|"'."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|// TODO: remove check once UserValidator is active
if|if
condition|(
operator|!
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|authRoot
argument_list|,
name|folder
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Attempt to create user/group outside of configured scope "
operator|+
name|authRoot
argument_list|)
throw|;
block|}
return|return
name|folder
return|;
block|}
specifier|private
name|String
name|getFolderPath
parameter_list|(
name|String
name|authorizableId
parameter_list|,
name|String
name|intermediatePath
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|intermediatePath
operator|!=
literal|null
operator|&&
operator|!
name|intermediatePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|intermediatePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|idLength
init|=
name|authorizableId
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|segment
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultDepth
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|idLength
operator|>
name|i
condition|)
block|{
name|segment
operator|.
name|append
argument_list|(
name|authorizableId
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// escapedID is too short -> append the last char again
name|segment
operator|.
name|append
argument_list|(
name|authorizableId
operator|.
name|charAt
argument_list|(
name|idLength
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|segment
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//-----------------------------------------< private MembershipProvider>---
specifier|private
name|CoreValue
name|createCoreValue
parameter_list|(
name|Tree
name|authorizableTree
parameter_list|)
block|{
return|return
name|valueFactory
operator|.
name|createValue
argument_list|(
name|getContentID
argument_list|(
name|authorizableTree
argument_list|)
argument_list|,
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|useMemberNode
parameter_list|(
name|Tree
name|groupTree
parameter_list|)
block|{
return|return
name|splitSize
operator|>=
literal|4
operator|&&
operator|!
name|groupTree
operator|.
name|hasProperty
argument_list|(
name|REP_MEMBERS
argument_list|)
return|;
block|}
comment|/**      * Returns an iterator of authorizables which includes all indirect members      * of the given iterator of authorizables.      *      *      * @param declaredMembers      * @param authorizableType      * @return Iterator of Authorizable objects      */
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllMembers
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|declaredMembers
parameter_list|,
specifier|final
name|int
name|authorizableType
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritedMembers
init|=
operator|new
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|declaredMembers
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|next
parameter_list|()
block|{
name|String
name|memberPath
init|=
name|declaredMembers
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|memberPath
argument_list|)
argument_list|,
name|inherited
argument_list|(
name|memberPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|inherited
parameter_list|(
name|String
name|authorizablePath
parameter_list|)
block|{
name|Tree
name|group
init|=
name|getAuthorizableByPath
argument_list|(
name|authorizablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizableTree
argument_list|(
name|group
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
condition|)
block|{
return|return
name|getMembers
argument_list|(
name|group
argument_list|,
name|authorizableType
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|inheritedMembers
argument_list|)
argument_list|,
operator|new
name|ProcessedPathPredicate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllMembership
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|groupPaths
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
name|inheritedMembership
init|=
operator|new
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|groupPaths
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|next
parameter_list|()
block|{
name|String
name|groupPath
init|=
name|groupPaths
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Iterators
operator|.
name|concat
argument_list|(
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|groupPath
argument_list|)
argument_list|,
name|inherited
argument_list|(
name|groupPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|inherited
parameter_list|(
name|String
name|authorizablePath
parameter_list|)
block|{
name|Tree
name|group
init|=
name|getAuthorizableByPath
argument_list|(
name|authorizablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizableTree
argument_list|(
name|group
argument_list|,
name|UserManager
operator|.
name|SEARCH_TYPE_GROUP
argument_list|)
condition|)
block|{
return|return
name|getMembership
argument_list|(
name|group
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|inheritedMembership
argument_list|)
argument_list|,
operator|new
name|ProcessedPathPredicate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ProcessedPathPredicate
implements|implements
name|Predicate
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|processed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
block|{
return|return
name|processed
operator|.
name|add
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

