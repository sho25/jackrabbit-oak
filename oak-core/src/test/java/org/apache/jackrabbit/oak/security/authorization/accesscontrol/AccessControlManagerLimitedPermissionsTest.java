begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|GlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|ReadWriteNamespaceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AccessControlManagerLimitedPermissionsTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"jr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_URI
init|=
literal|"http://jackrabbit.apache.org"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME
init|=
name|TEST_PREFIX
operator|+
literal|":testRoot"
decl_stmt|;
specifier|private
name|String
name|testPath
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|NamePathMapper
name|npMapper
decl_stmt|;
specifier|private
name|Root
name|testRoot
decl_stmt|;
specifier|private
name|AccessControlManagerImpl
name|testAcMgr
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NamespaceRegistry
name|nsRegistry
init|=
operator|new
name|ReadWriteNamespaceRegistry
argument_list|(
name|root
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
block|}
decl_stmt|;
name|nsRegistry
operator|.
name|registerNamespace
argument_list|(
name|TEST_PREFIX
argument_list|,
name|TEST_URI
argument_list|)
expr_stmt|;
name|NameMapper
name|nameMapper
init|=
operator|new
name|GlobalNameMapper
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|npMapper
operator|=
operator|new
name|NamePathMapperImpl
argument_list|(
name|nameMapper
argument_list|)
expr_stmt|;
name|Tree
name|testTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
name|TEST_NAME
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|testPath
operator|=
name|testTree
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Tree
name|child
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|testTree
argument_list|,
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|=
name|createTestSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|testAcMgr
operator|=
operator|new
name|AccessControlManagerImpl
argument_list|(
name|testRoot
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|testPrivileges
operator|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|testPrincipal
operator|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testRoot
operator|.
name|getContentSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|npMapper
return|;
block|}
specifier|private
specifier|static
name|void
name|assertPolicies
parameter_list|(
annotation|@
name|Nullable
name|AccessControlPolicy
index|[]
name|policies
parameter_list|,
name|long
name|expectedSize
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|private
name|ACL
name|setupPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|Privilege
modifier|...
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|privs
init|=
operator|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|testPrivileges
else|:
name|privileges
decl_stmt|;
return|return
name|TestUtility
operator|.
name|setupPolicy
argument_list|(
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|path
argument_list|,
name|testPrincipal
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|,
name|TestUtility
operator|.
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAcContentPaths
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|ACL
name|policy
init|=
name|TestUtility
operator|.
name|getApplicablePolicy
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|TestUtility
operator|.
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|String
name|aclPath
init|=
name|testPath
operator|+
literal|'/'
operator|+
name|REP_POLICY
decl_stmt|;
name|Tree
name|acl
init|=
name|root
operator|.
name|getTree
argument_list|(
name|aclPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|aces
init|=
name|acl
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aces
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|ace
init|=
name|aces
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ace
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|acContentPath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|acContentPath
operator|.
name|add
argument_list|(
name|aclPath
argument_list|)
expr_stmt|;
name|acContentPath
operator|.
name|add
argument_list|(
name|ace
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|rest
init|=
name|ace
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|acContentPath
operator|.
name|add
argument_list|(
name|rest
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|acContentPath
return|;
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session (compatibility with the specification      * which was missing in jackrabbit).      */
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|root
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|testRoot
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|testRoot
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivilegesNoAccessToPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the test-session doesn't have sufficient permissions to read privilege set for admin session.
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasRepoPrivilegesForEmptyPrincipalSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the test-session doesn't have sufficient permissions to read privilege set.
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// granted privileges
name|List
argument_list|<
name|Privilege
index|[]
argument_list|>
name|granted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|testPrivileges
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
index|[]
name|privileges
range|:
name|granted
control|)
block|{
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|testRoot
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// denied privileges
name|List
argument_list|<
name|Privilege
index|[]
argument_list|>
name|denied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
index|[]
name|privileges
range|:
name|denied
control|)
block|{
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|testRoot
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHasPrivilegesForPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// but for 'admin' the test-session doesn't have sufficient privileges
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|getPrincipals
argument_list|(
name|testRoot
operator|.
name|getContentSession
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|=
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|testPrincipals
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
comment|// but for 'admin' the test-session doesn't have sufficient privileges
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information at testPath"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
comment|// testRoot can't read access control content -> doesn't see
comment|// the existing policies and creates a new applicable policy.
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|testAcMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|applicable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|PrincipalManager
name|testPrincipalMgr
init|=
name|getPrincipalManager
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
if|if
condition|(
name|testPrincipalMgr
operator|.
name|hasPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// testRoot can't read access control content -> doesn't see
comment|// the existing policies and creates a new applicable policy.
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|policies
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// testRoot can't read principal -> no policies for that principal
name|assertPolicies
argument_list|(
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + READ_AC privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
comment|// diff to jr core: getEffectivePolicies will just return the policies
comment|// accessible for the editing session but not throw an exception.
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|effective
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// diff to jr core: getEffectivePolicies will just return the policies
comment|// accessible for the editing session but not throw an exception.
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|effective
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesWithoutPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + READ_AC privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPath
argument_list|,
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"READ_ACCESS_CONTROL is not granted at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|effective
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 Policy at testPath not accessible -> getEffectivePolicies      * only returns the readable policy but doesn't fail.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// policy at testPath: ac content was visible but the policy can't be
comment|// retrieved from AcMgr as the accesscontrolled node is not visible.
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
comment|// policy at childPath: will be found by the getEffectivePolicies
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|effective
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 Policy at testPath not accessible -> getEffectivePolicies      * only returns the readable policy but doesn't fail.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipal3
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|effective
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|TestUtility
operator|.
name|getApplicablePolicy
argument_list|(
name|acMgr
argument_list|,
name|childPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|childPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|policies
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 : only accessible policies are returned but not exception      * is raised.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipals2
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
comment|// create policy on testPath -> but deny access to test session
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|TestUtility
operator|.
name|getApplicablePolicy
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// grant access at childpath
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertPolicies
argument_list|(
name|policies
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

