begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Validator implementation that is responsible for validating any modification  * made to node type definitions. This includes:  *  *<ul>  *<li>validate new definitions</li>  *<li>detect collisions,</li>  *<li>prevent circular inheritance,</li>  *<li>reject modifications to definitions that render existing content invalid,</li>  *<li>prevent un-registration of built-in node types.</li>  *</ul>  */
end_comment

begin_class
class|class
name|RegistrationValidator
extends|extends
name|DefaultValidator
block|{
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|beforeMgr
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|afterMgr
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parentBefore
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parentAfter
decl_stmt|;
name|RegistrationValidator
parameter_list|(
name|ReadOnlyNodeTypeManager
name|beforeMgr
parameter_list|,
name|ReadOnlyNodeTypeManager
name|afterMgr
parameter_list|,
name|ReadOnlyTree
name|parentBefore
parameter_list|,
name|ReadOnlyTree
name|parentAfter
parameter_list|)
block|{
name|this
operator|.
name|beforeMgr
operator|=
name|beforeMgr
expr_stmt|;
name|this
operator|.
name|afterMgr
operator|=
name|afterMgr
expr_stmt|;
name|this
operator|.
name|parentBefore
operator|=
name|parentBefore
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
block|}
comment|//----------------------------------------------------------< Validator>---
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeUtil
name|nodeBefore
init|=
operator|new
name|NodeUtil
argument_list|(
operator|new
name|ReadOnlyTree
argument_list|(
name|parentBefore
argument_list|,
name|name
argument_list|,
name|before
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeBefore
operator|.
name|hasPrimaryNodeTypeName
argument_list|(
name|JcrConstants
operator|.
name|NT_NODETYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|isBuiltInNodeType
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Attempt to unregister a built-in node type"
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// TODO
return|return
literal|null
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
name|boolean
name|isBuiltInNodeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// cheap way to determine if a given node type should be considered built-in
name|String
name|prefix
init|=
name|Text
operator|.
name|getNamespacePrefix
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|NamespaceConstants
operator|.
name|RESERVED_PREFIXES
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

