begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|FindAuthorizableWithScopeTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_ID
init|=
literal|"testGroup"
decl_stmt|;
specifier|private
specifier|final
name|long
name|numberOfUsers
decl_stmt|;
specifier|private
specifier|final
name|long
name|numberOfMembership
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxCount
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|setScope
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|declaredMembership
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|runAsAdmin
decl_stmt|;
specifier|private
name|JackrabbitSession
name|adminSession
decl_stmt|;
specifier|private
name|UserManager
name|testUserManager
decl_stmt|;
specifier|public
name|FindAuthorizableWithScopeTest
parameter_list|(
name|long
name|numberOfUsers
parameter_list|,
name|long
name|numberOfMembership
parameter_list|,
name|int
name|maxCount
parameter_list|,
name|boolean
name|setScope
parameter_list|,
name|boolean
name|declaredMembership
parameter_list|,
name|boolean
name|runAsAdmin
parameter_list|)
block|{
name|this
operator|.
name|numberOfUsers
operator|=
name|numberOfUsers
expr_stmt|;
name|this
operator|.
name|numberOfMembership
operator|=
name|numberOfMembership
expr_stmt|;
name|this
operator|.
name|maxCount
operator|=
name|maxCount
expr_stmt|;
name|this
operator|.
name|setScope
operator|=
name|setScope
expr_stmt|;
name|this
operator|.
name|declaredMembership
operator|=
name|declaredMembership
expr_stmt|;
name|this
operator|.
name|runAsAdmin
operator|=
name|runAsAdmin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSession
operator|=
operator|(
name|JackrabbitSession
operator|)
name|loginWriter
argument_list|()
expr_stmt|;
name|UserManager
name|userManager
init|=
name|adminSession
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|Group
name|gr
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|GROUP_ID
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
name|GROUP_ID
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfUsers
condition|;
name|i
operator|++
control|)
block|{
name|u
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
literal|"testUser"
operator|+
name|i
argument_list|,
literal|"pw"
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
literal|"testUser"
operator|+
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|gr
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numberOfMembership
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|GROUP_ID
operator|+
name|i
decl_stmt|;
name|Group
name|g
init|=
name|userManager
operator|.
name|createGroup
argument_list|(
name|id
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|g
operator|.
name|addMember
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|runAsAdmin
condition|)
block|{
name|testUserManager
operator|=
name|userManager
expr_stmt|;
block|}
else|else
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|adminSession
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|adminSession
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|adminSession
operator|.
name|getAccessControlManager
argument_list|()
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|Session
name|reader
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testUserManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|reader
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|UserManager
name|userManager
init|=
name|adminSession
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|Authorizable
name|gr
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|Node
name|n
init|=
name|adminSession
operator|.
name|getNode
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|gr
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|u1
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
literal|"testUser0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|u1
operator|!=
literal|null
condition|)
block|{
name|Node
name|n
init|=
name|adminSession
operator|.
name|getNode
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|u1
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|adminSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|result
init|=
name|testUserManager
operator|.
name|findAuthorizables
argument_list|(
name|createQuery
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Query
name|createQuery
parameter_list|()
block|{
return|return
operator|new
name|Query
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|build
parameter_list|(
name|QueryBuilder
argument_list|<
name|T
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|,
name|maxCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nameMatches
argument_list|(
literal|"testUser%"
argument_list|)
expr_stmt|;
if|if
condition|(
name|setScope
condition|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
name|GROUP_ID
argument_list|,
name|declaredMembership
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

