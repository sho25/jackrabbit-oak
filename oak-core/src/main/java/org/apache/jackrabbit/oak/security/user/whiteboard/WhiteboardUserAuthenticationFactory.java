begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserAuthenticationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|AbstractServiceTracker
import|;
end_import

begin_comment
comment|/**  * Dynamic {@link org.apache.jackrabbit.oak.spi.security.user.UserAuthenticationFactory}  * based on the available whiteboard services.  */
end_comment

begin_class
specifier|public
class|class
name|WhiteboardUserAuthenticationFactory
extends|extends
name|AbstractServiceTracker
argument_list|<
name|UserAuthenticationFactory
argument_list|>
implements|implements
name|UserAuthenticationFactory
block|{
specifier|private
specifier|final
name|UserAuthenticationFactory
name|defaultFactory
decl_stmt|;
specifier|public
name|WhiteboardUserAuthenticationFactory
parameter_list|(
annotation|@
name|Nullable
name|UserAuthenticationFactory
name|defaultFactory
parameter_list|)
block|{
name|super
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultFactory
operator|=
name|defaultFactory
expr_stmt|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Authentication
name|getAuthentication
parameter_list|(
annotation|@
name|Nonnull
name|UserConfiguration
name|userConfiguration
parameter_list|,
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|,
annotation|@
name|Nullable
name|String
name|userId
parameter_list|)
block|{
name|List
argument_list|<
name|UserAuthenticationFactory
argument_list|>
name|services
init|=
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|isEmpty
argument_list|()
operator|&&
name|defaultFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultFactory
operator|.
name|getAuthentication
argument_list|(
name|userConfiguration
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
return|;
block|}
for|for
control|(
name|UserAuthenticationFactory
name|factory
range|:
name|services
control|)
block|{
name|Authentication
name|authentication
init|=
name|factory
operator|.
name|getAuthentication
argument_list|(
name|userConfiguration
argument_list|,
name|root
argument_list|,
name|userId
argument_list|)
decl_stmt|;
if|if
condition|(
name|authentication
operator|!=
literal|null
condition|)
block|{
return|return
name|authentication
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

