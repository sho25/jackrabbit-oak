begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|EqualsDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_HEAD_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_PREVIOUS_BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|BucketSwitcherTest
block|{
specifier|private
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|private
name|BucketSwitcher
name|bs
init|=
operator|new
name|BucketSwitcher
argument_list|(
name|builder
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basic
parameter_list|()
throws|throws
name|Exception
block|{
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleUnusedBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoBucket_HeadUnused
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|hasProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoBuckets_BothUsed
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoBuckets_2Switches
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|bs
operator|.
name|switchBucket
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|hasProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the case where lastIndexedTo time does not change i.e. async indexer      * has not moved on between different run. In such a case the property index      * state should remain same and both head and previous bucket should not be      * changed      */
annotation|@
name|Test
specifier|public
name|void
name|twoBuckets_NoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeState
name|state0
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state1
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//No changed in async indexer state so current bucket state would remain
comment|//as previous
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state2
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//Async indexer time still not changed. So head bucket remains same
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state3
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|state1
argument_list|,
name|state2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|state2
argument_list|,
name|state3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the case where async indexer state changes i.e. lastIndexedTo changes      * however nothing new got indexed in property index. In such a case      * after the second run there should be no previous bucket      */
annotation|@
name|Test
specifier|public
name|void
name|twoBucket_IndexedToTimeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"2"
argument_list|)
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|NodeState
name|state0
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state1
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
comment|//This time previous bucket should be discarded
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeState
name|state2
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bs
operator|.
name|switchBucket
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|builder
operator|.
name|getString
argument_list|(
name|PROP_HEAD_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|builder
operator|.
name|getString
argument_list|(
name|PROP_PREVIOUS_BUCKET
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copyOf
argument_list|(
name|bs
operator|.
name|getOldBuckets
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assert no change done after previous is removed
comment|//not even change of asyncIndexedTo
name|NodeState
name|state3
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|EqualsDiff
operator|.
name|equals
argument_list|(
name|state2
argument_list|,
name|state3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

