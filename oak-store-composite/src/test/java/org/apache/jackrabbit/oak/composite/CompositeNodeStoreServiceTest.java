begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
operator|.
name|NodeStoreChecksService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeNodeStoreServiceTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|ctx
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
comment|/** 	 *  Verifies that a minimally-configured<tt>CompositeNodeStore</tt> can be registered successfully 	 */
annotation|@
name|Test
specifier|public
name|void
name|bootstrap
parameter_list|()
block|{
name|MemoryNodeStore
name|mount
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|global
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"libs"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/apps"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|,
name|mip
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|SimpleNodeStoreProvider
argument_list|(
name|global
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"composite:global"
argument_list|,
literal|"registerDescriptors"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|SimpleNodeStoreProvider
argument_list|(
name|mount
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"composite:mount:libs"
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|NodeStoreChecksService
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|CompositeNodeStoreService
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"No NodeStore registered"
argument_list|,
name|ctx
operator|.
name|getService
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Verifies that a missing mount will result in the node store not being registered 	 */
annotation|@
name|Test
specifier|public
name|void
name|bootstrap_missingMount
parameter_list|()
block|{
name|MemoryNodeStore
name|mount
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MemoryNodeStore
name|global
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"libs"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/apps"
argument_list|)
operator|.
name|readOnlyMount
argument_list|(
literal|"missing"
argument_list|,
literal|"/missing"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|,
name|mip
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|SimpleNodeStoreProvider
argument_list|(
name|global
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"composite:global"
argument_list|,
literal|"registerDescriptors"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|SimpleNodeStoreProvider
argument_list|(
name|mount
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"composite:mount:libs"
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|NodeStoreChecksService
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|CompositeNodeStoreService
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NodeStore registered, but it should not have been"
argument_list|,
name|ctx
operator|.
name|getService
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Verifies that a missing global mount will result in the node store not being registered 	 */
annotation|@
name|Test
specifier|public
name|void
name|bootstrap_missingGlobalMount
parameter_list|()
block|{
name|MemoryNodeStore
name|mount
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|readOnlyMount
argument_list|(
literal|"libs"
argument_list|,
literal|"/libs"
argument_list|,
literal|"/apps"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|,
name|mip
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerService
argument_list|(
name|NodeStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|SimpleNodeStoreProvider
argument_list|(
name|mount
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"role"
argument_list|,
literal|"composite:mount:libs"
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|NodeStoreChecksService
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|registerInjectActivateService
argument_list|(
operator|new
name|CompositeNodeStoreService
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NodeStore registered, but it should not have been"
argument_list|,
name|ctx
operator|.
name|getService
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|SimpleNodeStoreProvider
implements|implements
name|NodeStoreProvider
block|{
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|SimpleNodeStoreProvider
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
return|return
name|nodeStore
return|;
block|}
block|}
block|}
end_class

end_unit

