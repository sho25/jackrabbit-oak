begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|old
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Tests the ArrayUtils class  */
end_comment

begin_class
specifier|public
class|class
name|ArrayUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|insertInt
parameter_list|()
block|{
name|int
index|[]
name|x
init|=
block|{
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|int
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayInsert
argument_list|(
name|x
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|y
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|y
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertLong
parameter_list|()
block|{
name|long
index|[]
name|x
init|=
block|{
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|long
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayInsert
argument_list|(
name|x
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|y
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|y
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertObject
parameter_list|()
block|{
name|Long
index|[]
name|x
init|=
block|{
literal|10L
block|,
literal|20L
block|}
decl_stmt|;
name|Long
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayInsert
argument_list|(
name|x
argument_list|,
literal|1
argument_list|,
literal|15L
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|15
argument_list|)
argument_list|,
name|y
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|,
name|y
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertString
parameter_list|()
block|{
name|String
index|[]
name|x
init|=
block|{
literal|"10"
block|,
literal|"20"
block|}
decl_stmt|;
name|String
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayInsert
argument_list|(
name|x
argument_list|,
literal|1
argument_list|,
literal|"15"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"15"
argument_list|,
name|y
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"20"
argument_list|,
name|y
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeInt
parameter_list|()
block|{
name|int
index|[]
name|x
init|=
block|{
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|int
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|y
operator|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeLong
parameter_list|()
block|{
name|long
index|[]
name|x
init|=
block|{
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|long
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|y
operator|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeObject
parameter_list|()
block|{
name|Long
index|[]
name|x
init|=
block|{
literal|10L
block|,
literal|20L
block|}
decl_stmt|;
name|Long
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|y
operator|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeString
parameter_list|()
block|{
name|String
index|[]
name|x
init|=
block|{
literal|"10"
block|,
literal|"20"
block|}
decl_stmt|;
name|String
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|y
operator|=
name|ArrayUtils
operator|.
name|arrayRemove
argument_list|(
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceObject
parameter_list|()
block|{
name|Long
index|[]
name|x
init|=
block|{
literal|10L
block|,
literal|20L
block|}
decl_stmt|;
name|Long
index|[]
name|y
init|=
name|ArrayUtils
operator|.
name|arrayReplace
argument_list|(
name|x
argument_list|,
literal|1
argument_list|,
literal|11L
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x
operator|==
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|y
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|y
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|11
argument_list|)
argument_list|,
name|y
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

