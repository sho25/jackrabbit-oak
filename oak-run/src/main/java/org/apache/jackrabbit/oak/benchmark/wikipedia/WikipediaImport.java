begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|wikipedia
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|WikipediaImport
extends|extends
name|Benchmark
block|{
specifier|private
specifier|final
name|File
name|dump
decl_stmt|;
specifier|public
name|WikipediaImport
parameter_list|(
name|File
name|dump
parameter_list|)
block|{
name|this
operator|.
name|dump
operator|=
name|dump
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Iterable
argument_list|<
name|RepositoryFixture
argument_list|>
name|fixtures
parameter_list|)
block|{
if|if
condition|(
name|dump
operator|.
name|isFile
argument_list|()
condition|)
block|{
for|for
control|(
name|RepositoryFixture
name|fixture
range|:
name|fixtures
control|)
block|{
if|if
condition|(
name|fixture
operator|.
name|isAvailable
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s: Wikipedia import benchmark%n"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
try|try
block|{
name|Repository
index|[]
name|cluster
init|=
name|fixture
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|run
argument_list|(
name|cluster
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s: not available, skipping.%n"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Missing Wikipedia dump %s, skipping import benchmark.%n"
argument_list|,
name|dump
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|run
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|before
init|=
name|importWikipedia
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|int
name|after
init|=
name|traverseWikipedia
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|before
operator|==
name|after
argument_list|,
literal|"Import vs. traverse mismatch"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|importWikipedia
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Importing %s...%n"
argument_list|,
name|dump
argument_list|)
expr_stmt|;
name|Node
name|wikipedia
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"wikipedia"
argument_list|,
literal|"oak:unstructured"
argument_list|)
decl_stmt|;
name|String
name|title
init|=
literal|null
decl_stmt|;
name|String
name|text
init|=
literal|null
decl_stmt|;
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|dump
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|next
argument_list|()
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
if|if
condition|(
literal|"title"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|title
operator|=
name|reader
operator|.
name|getElementText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|text
operator|=
name|reader
operator|.
name|getElementText
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
literal|"page"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|title
argument_list|)
decl_stmt|;
name|Node
name|page
init|=
name|wikipedia
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|page
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|page
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|code
operator|+=
name|title
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|code
operator|+=
name|text
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Added %d pages in %d seconds (%.2fms/page)%n"
argument_list|,
name|count
argument_list|,
name|millis
operator|/
literal|1000
argument_list|,
operator|(
name|double
operator|)
name|millis
operator|/
name|count
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Imported %d pages in %d seconds (%.2fms/page)%n"
argument_list|,
name|count
argument_list|,
name|millis
operator|/
literal|1000
argument_list|,
operator|(
name|double
operator|)
name|millis
operator|/
name|count
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
specifier|private
name|int
name|traverseWikipedia
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Traversing imported pages...%n"
argument_list|)
expr_stmt|;
name|Node
name|wikipedia
init|=
name|session
operator|.
name|getNode
argument_list|(
literal|"/wikipedia"
argument_list|)
decl_stmt|;
name|NodeIterator
name|pages
init|=
name|wikipedia
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|pages
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|page
init|=
name|pages
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|code
operator|+=
name|page
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|)
operator|.
name|getString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|code
operator|+=
name|page
operator|.
name|getProperty
argument_list|(
literal|"text"
argument_list|)
operator|.
name|getString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Read %d pages in %d seconds (%.2fms/page)%n"
argument_list|,
name|count
argument_list|,
name|millis
operator|/
literal|1000
argument_list|,
operator|(
name|double
operator|)
name|millis
operator|/
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Traversed %d pages in %d seconds (%.2fms/page)%n"
argument_list|,
name|count
argument_list|,
name|millis
operator|/
literal|1000
argument_list|,
operator|(
name|double
operator|)
name|millis
operator|/
name|count
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
block|}
end_class

end_unit

