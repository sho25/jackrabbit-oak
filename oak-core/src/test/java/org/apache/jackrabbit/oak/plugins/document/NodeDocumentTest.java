begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|revisionAreAmbiguous
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
operator|.
name|RevisionComparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getRootDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link NodeDocument}.  */
end_comment

begin_class
specifier|public
class|class
name|NodeDocumentTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|splitCollisions
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|docStore
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
operator|new
name|NodeDocument
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NodeDocument
operator|.
name|NUM_REVS_THRESHOLD
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|r
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|addCollision
argument_list|(
name|op
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|UpdateUtils
operator|.
name|applyChanges
argument_list|(
name|doc
argument_list|,
name|op
argument_list|,
name|StableRevisionComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Revision
name|head
init|=
name|DummyRevisionContext
operator|.
name|INSTANCE
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|doc
operator|.
name|split
argument_list|(
name|DummyRevisionContext
operator|.
name|INSTANCE
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ambiguousRevisions
parameter_list|()
block|{
comment|// revisions from same cluster node are not ambiguous
name|RevisionContext
name|context
init|=
name|DummyRevisionContext
operator|.
name|INSTANCE
decl_stmt|;
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
comment|// revisions from different cluster nodes are not ambiguous
comment|// if seen with stable revision comparator
name|r1
operator|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now use a revision comparator with seen-at support
specifier|final
name|RevisionComparator
name|comparator
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|DummyRevisionContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|Revision
argument_list|>
name|getRevisionComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
block|}
expr_stmt|;
name|r1
operator|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// add revision to comparator in reverse time order
name|comparator
operator|.
name|add
argument_list|(
name|r2
argument_list|,
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|add
argument_list|(
name|r1
argument_list|,
operator|new
name|Revision
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// r1 seen after r2
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|revisionAreAmbiguous
argument_list|(
name|context
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChanges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_CHANGES
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|NUM_CHANGES
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// NUM_CHANGES + one revision when node was created
name|assertEquals
argument_list|(
name|NUM_CHANGES
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChangesAfterGC1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove most recent previous doc
name|NodeDocument
name|toRemove
init|=
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|store
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|numChanges
operator|-=
name|Iterables
operator|.
name|size
argument_list|(
name|toRemove
operator|.
name|getAllChanges
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// numChanges + one revision when node was created
name|assertEquals
argument_list|(
name|numChanges
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllChangesAfterGC2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numChanges
init|=
literal|200
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
name|numChanges
argument_list|)
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove oldest previous doc
name|NodeDocument
name|toRemove
init|=
name|Iterators
operator|.
name|getLast
argument_list|(
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|store
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|numChanges
operator|-=
name|Iterables
operator|.
name|size
argument_list|(
name|toRemove
operator|.
name|getAllChanges
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|root
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
comment|// numChanges + one revision when node was created
name|assertEquals
argument_list|(
name|numChanges
operator|+
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|root
operator|.
name|getAllChanges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeaves
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeavesAfterGC1
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numLeaves
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove most recent previous doc
name|NodeDocument
name|toRemove
init|=
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|store
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numLeaves
operator|-
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPreviousDocLeavesAfterGC2
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
name|createTestStore
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|Revision
name|previous
init|=
name|ns
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|root
init|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numLeaves
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove oldest previous doc
name|NodeDocument
name|toRemove
init|=
name|Iterators
operator|.
name|getLast
argument_list|(
name|root
operator|.
name|getAllPreviousDocs
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numDeleted
init|=
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|ns
operator|.
name|store
argument_list|,
operator|new
name|VersionGCStats
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toRemove
argument_list|)
argument_list|)
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDeleted
argument_list|)
expr_stmt|;
name|root
operator|=
name|getRootDocument
argument_list|(
name|ns
operator|.
name|getDocumentStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numLeaves
operator|-
literal|1
argument_list|,
name|Iterators
operator|.
name|size
argument_list|(
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|root
operator|.
name|getPreviousDocLeaves
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDocument
name|leaf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|leaf
operator|.
name|getAllChanges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|previous
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
name|r
expr_stmt|;
block|}
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNewestRevisionTooExpensive
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_CHANGES
init|=
literal|200
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|prevDocCalls
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Document
parameter_list|>
name|T
name|find
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|key
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|prevDocCalls
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|find
argument_list|(
name|collection
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// create test data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CHANGES
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|Revision
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|doc
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
comment|// get most recent previous doc
name|NodeDocument
name|prev
init|=
name|doc
operator|.
name|getAllPreviousDocs
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// simulate a change revision within the range of
comment|// the most recent previous document
name|Iterable
argument_list|<
name|Revision
argument_list|>
name|changes
init|=
name|prev
operator|.
name|getAllChanges
argument_list|()
decl_stmt|;
name|Revision
name|changeRev
init|=
operator|new
name|Revision
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|changes
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|,
literal|1000
argument_list|,
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
comment|// reset calls to previous documents
name|prevDocCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getNewestRevision
argument_list|(
name|ns
argument_list|,
name|changeRev
argument_list|,
operator|new
name|CollisionHandler
argument_list|()
block|{
annotation|@
name|Override
name|void
name|concurrentModification
parameter_list|(
name|Revision
name|other
parameter_list|)
block|{
comment|// ignore
block|}
block|}
argument_list|)
expr_stmt|;
comment|// must not read all previous docs
name|assertTrue
argument_list|(
literal|"too many calls for previous documents: "
operator|+
name|prevDocCalls
argument_list|,
name|prevDocCalls
operator|.
name|size
argument_list|()
operator|<=
literal|4
argument_list|)
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|DocumentNodeStore
name|createTestStore
parameter_list|(
name|int
name|numChanges
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTestStore
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|,
name|numChanges
argument_list|)
return|;
block|}
specifier|private
name|DocumentNodeStore
name|createTestStore
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|int
name|numChanges
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentNodeStore
name|ns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChanges
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|<
literal|0.2
condition|)
block|{
name|Revision
name|head
init|=
name|ns
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|SplitOperations
operator|.
name|forDocument
argument_list|(
name|getRootDocument
argument_list|(
name|store
argument_list|)
argument_list|,
name|ns
argument_list|,
name|head
argument_list|,
literal|2
argument_list|)
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ns
return|;
block|}
specifier|private
name|void
name|merge
parameter_list|(
name|NodeStore
name|store
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

