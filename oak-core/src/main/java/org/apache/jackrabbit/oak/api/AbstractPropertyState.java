begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link PropertyState} implementations. This  * class provides default implementations of basic {@link Object} methods,  * for consistency across all property states.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPropertyState
implements|implements
name|PropertyState
block|{
comment|/**      * Checks whether the given object is equal to this one. Two property      * states are considered equal if their names and types match and      * their string representation of their values are equal.      * Subclasses may override this method with a more efficient      * equality check if one is available.      *      * @param other target of the comparison      * @return {@code true} if the objects are equal, {@code false} otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|instanceof
name|PropertyState
condition|)
block|{
name|PropertyState
name|that
init|=
operator|(
name|PropertyState
operator|)
name|other
decl_stmt|;
if|if
condition|(
operator|!
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isArray
argument_list|()
operator|&&
name|count
argument_list|()
operator|!=
name|that
operator|.
name|count
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
return|return
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|getValue
argument_list|(
name|BINARIES
argument_list|)
argument_list|,
name|that
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|,
name|that
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Returns a hash code that's compatible with how the      * {@link #equals(Object)} method is implemented. The current      * implementation simply returns the hash code of the property name      * since {@link PropertyState} instances are not intended for use as      * hash keys.      *      * @return hash code      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
return|return
name|getName
argument_list|()
operator|+
literal|" = ["
operator|+
name|count
argument_list|()
operator|+
literal|" binaries]"
return|;
block|}
elseif|else
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
return|return
name|getName
argument_list|()
operator|+
literal|" = {"
operator|+
name|size
argument_list|()
operator|+
literal|" bytes}"
return|;
block|}
elseif|else
if|if
condition|(
name|isArray
argument_list|()
condition|)
block|{
return|return
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|getValue
argument_list|(
name|STRINGS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|getValue
argument_list|(
name|STRING
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

