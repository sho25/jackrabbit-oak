begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|Revision
operator|.
name|RevisionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the revision class  */
end_comment

begin_class
specifier|public
class|class
name|RevisionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|fromStringToString
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// System.out.println(r);
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|,
name|r2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|hashCode
argument_list|()
argument_list|,
name|r2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|equals
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|difference
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Revision
name|r0
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|r1
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|r0
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|<
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|timestamp
argument_list|,
name|r0
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|<
literal|10
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|r2
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|r0
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Revision
operator|.
name|getTimestampDifference
argument_list|(
name|r2
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|r0
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalsHashCode
parameter_list|()
block|{
name|Revision
name|a
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|b
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|b
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|a1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|a
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a1
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|a2
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|a1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|a2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x1
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|1
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x1
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x2
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
operator|+
literal|1
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x2
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|x3
init|=
operator|new
name|Revision
argument_list|(
name|a
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|a
operator|.
name|getCounter
argument_list|()
argument_list|,
name|a
operator|.
name|getClusterId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|x3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|x3
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|x3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Revision
name|last
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|last
operator|.
name|compareRevisionTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Revision
name|r
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|last
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|last
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|last
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
comment|// ensure the timestamp part changes as well
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionComparatorSimple
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|compareRevisionTime
argument_list|(
name|r2
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
operator|.
name|compareRevisionTime
argument_list|(
name|r1
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|compareRevisionTime
argument_list|(
name|r1
argument_list|)
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionComparatorCluster
parameter_list|()
block|{
name|RevisionComparator
name|comp
init|=
operator|new
name|RevisionComparator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Revision
name|r1c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x110
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x120
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r3c1
init|=
operator|new
name|Revision
argument_list|(
literal|0x130
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x100
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r2c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x200
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|r3c2
init|=
operator|new
name|Revision
argument_list|(
literal|0x300
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// first, only timestamps are compared
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we declare r2+r3 of c1 to be after r2+r3 of c2
name|comp
operator|.
name|add
argument_list|(
name|r2c1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r2c2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:20\n"
operator|+
literal|"2:\n r200-0-2:10\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// r3c2 is still "in the future"
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we declare r3 of c1 to be before r3 of c2
comment|// (with the same range timestamp,
comment|// the revision timestamps are compared)
name|comp
operator|.
name|add
argument_list|(
name|r3c1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|comp
operator|.
name|add
argument_list|(
name|r3c2
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:20 r130-0-1:30\n"
operator|+
literal|"2:\n r200-0-2:10 r300-0-2:30\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c1
argument_list|,
name|r1c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c1
argument_list|,
name|r2c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c1
argument_list|,
name|r3c2
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r1c2
argument_list|,
name|r1c1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r2c2
argument_list|,
name|r2c1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|comp
operator|.
name|compare
argument_list|(
name|r3c2
argument_list|,
name|r3c1
argument_list|)
argument_list|)
expr_stmt|;
comment|// get rid of old timestamps
name|comp
operator|.
name|purge
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r120-0-1:20 r130-0-1:30\n"
operator|+
literal|"2:\n r300-0-2:30\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|purge
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r130-0-1:30\n"
operator|+
literal|"2:\n r300-0-2:30\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// update an entry
name|comp
operator|.
name|add
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0x301
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:\n r130-0-1:30\n"
operator|+
literal|"2:\n r301-1-2:30\n"
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|purge
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

