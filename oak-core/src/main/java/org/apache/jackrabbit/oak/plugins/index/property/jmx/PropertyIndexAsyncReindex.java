begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|jmx
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|nanoTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|Status
operator|.
name|formatTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|done
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
operator|.
name|newManagementOperation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|ManagementOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link PropertyIndexAsyncReindexMBean} based on a  * {@code Runnable}.  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndexAsyncReindex
implements|implements
name|PropertyIndexAsyncReindexMBean
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OP_NAME
init|=
literal|"Property index asynchronous reindex"
decl_stmt|;
specifier|private
specifier|final
name|AsyncIndexUpdate
name|async
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
name|ManagementOperation
argument_list|<
name|String
argument_list|>
name|arOp
init|=
name|done
argument_list|(
name|OP_NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|/**      * @param async      * @param executor      *            executor for running the garbage collection task      */
specifier|public
name|PropertyIndexAsyncReindex
parameter_list|(
annotation|@
name|NotNull
name|AsyncIndexUpdate
name|async
parameter_list|,
annotation|@
name|NotNull
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|async
operator|=
name|checkNotNull
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|checkNotNull
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|CompositeData
name|startPropertyIndexAsyncReindex
parameter_list|()
block|{
if|if
condition|(
name|arOp
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|arOp
operator|=
name|newManagementOperation
argument_list|(
name|OP_NAME
argument_list|,
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|t0
init|=
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|done
operator|=
name|async
operator|.
name|isFinished
argument_list|()
expr_stmt|;
block|}
return|return
literal|"Reindex completed in "
operator|+
name|formatTime
argument_list|(
name|nanoTime
argument_list|()
operator|-
name|t0
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|arOp
argument_list|)
expr_stmt|;
block|}
return|return
name|getPropertyIndexAsyncReindexStatus
argument_list|()
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|CompositeData
name|getPropertyIndexAsyncReindexStatus
parameter_list|()
block|{
return|return
name|arOp
operator|.
name|getStatus
argument_list|()
operator|.
name|toCompositeData
argument_list|()
return|;
block|}
block|}
end_class

end_unit

