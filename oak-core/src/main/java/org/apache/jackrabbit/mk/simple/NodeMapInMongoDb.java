begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
operator|.
name|ChildVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|ExceptionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|Mongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_comment
comment|/**  * A node map that stores data in a Mongo DB.  */
end_comment

begin_class
specifier|public
class|class
name|NodeMapInMongoDb
extends|extends
name|NodeMap
implements|implements
name|Cache
operator|.
name|Backend
argument_list|<
name|Long
argument_list|,
name|NodeImpl
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DB
init|=
literal|"ds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NODES_COLLECTION
init|=
literal|"nodes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SETTINGS_COLLECTION
init|=
literal|"settings"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_FIELD
init|=
literal|"key"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_FIELD
init|=
literal|"data"
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|Long
argument_list|,
name|NodeImpl
argument_list|>
name|temp
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|NodeImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|Long
argument_list|,
name|NodeImpl
argument_list|>
name|cache
init|=
name|Cache
operator|.
name|newInstance
argument_list|(
name|this
argument_list|,
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pos
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|nextId
decl_stmt|;
specifier|private
name|NodeImpl
name|root
init|=
operator|new
name|NodeImpl
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|Mongo
name|con
decl_stmt|;
specifier|private
name|DB
name|db
decl_stmt|;
specifier|private
name|DBCollection
name|nodesStore
decl_stmt|;
specifier|private
name|DBCollection
name|settingsStore
decl_stmt|;
name|NodeMapInMongoDb
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
try|try
block|{
name|con
operator|=
operator|new
name|Mongo
argument_list|()
expr_stmt|;
name|db
operator|=
name|con
operator|.
name|getDB
argument_list|(
name|DB
argument_list|)
expr_stmt|;
name|db
operator|.
name|setWriteConcern
argument_list|(
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|nodesStore
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|NODES_COLLECTION
argument_list|)
expr_stmt|;
name|nodesStore
operator|.
name|ensureIndex
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"unique"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|settingsStore
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|SETTINGS_COLLECTION
argument_list|)
expr_stmt|;
name|settingsStore
operator|.
name|ensureIndex
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"unique"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|BasicDBObject
name|k
init|=
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
literal|"root"
argument_list|)
decl_stmt|;
name|DBObject
name|dataObject
init|=
name|settingsStore
operator|.
name|findOne
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataObject
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|setId
argument_list|(
name|NodeId
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|dataObject
operator|.
name|get
argument_list|(
name|DATA_FIELD
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|NodeId
name|addNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|)
block|{
return|return
name|addNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|NodeId
name|addNode
parameter_list|(
name|NodeImpl
name|node
parameter_list|,
name|boolean
name|allowInline
parameter_list|)
block|{
name|NodeId
name|x
init|=
name|node
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|allowInline
operator|&&
name|node
operator|.
name|getDescendantInlineCount
argument_list|()
operator|<
name|descendantInlineCount
condition|)
block|{
name|x
operator|=
name|NodeId
operator|.
name|getInline
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|t
init|=
operator|-
name|temp
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|temp
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|x
operator|=
name|NodeId
operator|.
name|get
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setId
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
specifier|public
name|NodeImpl
name|getNode
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
name|x
operator|<
literal|0
condition|?
name|temp
operator|.
name|get
argument_list|(
name|x
argument_list|)
else|:
name|cache
operator|.
name|get
argument_list|(
name|x
argument_list|)
return|;
block|}
specifier|public
name|NodeImpl
name|load
parameter_list|(
name|Long
name|key
parameter_list|)
block|{
try|try
block|{
name|BasicDBObject
name|k
init|=
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|DBObject
name|dataObject
init|=
name|nodesStore
operator|.
name|findOne
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|n
init|=
operator|(
name|String
operator|)
name|dataObject
operator|.
name|get
argument_list|(
name|DATA_FIELD
argument_list|)
decl_stmt|;
return|return
name|NodeImpl
operator|.
name|fromString
argument_list|(
name|this
argument_list|,
name|n
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|NodeId
name|commit
parameter_list|(
name|NodeImpl
name|newRoot
parameter_list|)
block|{
name|addNode
argument_list|(
name|newRoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|NodeMap
name|map
init|=
name|this
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|newRoot
operator|.
name|visit
argument_list|(
operator|new
name|ChildVisitor
argument_list|()
block|{
specifier|public
name|void
name|accept
parameter_list|(
name|NodeId
name|childId
parameter_list|)
block|{
if|if
condition|(
name|childId
operator|.
name|getLong
argument_list|()
operator|<
literal|0
condition|)
block|{
name|NodeImpl
name|t
init|=
name|temp
operator|.
name|get
argument_list|(
name|childId
operator|.
name|getLong
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|childId
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
condition|)
block|{
name|t
operator|.
name|getHash
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|childId
operator|.
name|isInline
argument_list|()
condition|)
block|{
name|NodeImpl
name|t
init|=
name|childId
operator|.
name|getNode
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|t
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
condition|)
block|{
name|t
operator|.
name|getHash
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|newRoot
operator|.
name|getId
argument_list|()
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
name|add
init|=
operator|new
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|list
control|)
block|{
name|NodeImpl
name|n
init|=
name|temp
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|newId
decl_stmt|;
name|newId
operator|=
name|nextId
operator|++
expr_stmt|;
name|n
operator|.
name|setId
argument_list|(
name|NodeId
operator|.
name|get
argument_list|(
name|newId
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newId
argument_list|)
expr_stmt|;
name|BasicDBObject
name|dataObject
init|=
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
name|newId
argument_list|)
decl_stmt|;
name|dataObject
operator|.
name|append
argument_list|(
name|DATA_FIELD
argument_list|,
name|n
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|add
argument_list|(
name|dataObject
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|n
operator|.
name|getId
argument_list|()
operator|.
name|getLong
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|nodesStore
operator|.
name|insert
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|newRoot
operator|.
name|getId
argument_list|()
operator|.
name|getLong
argument_list|()
argument_list|)
decl_stmt|;
name|settingsStore
operator|.
name|insert
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|KEY_FIELD
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|temp
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionFactory
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|root
operator|=
name|newRoot
expr_stmt|;
return|return
name|root
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|public
name|NodeId
name|getId
parameter_list|(
name|NodeId
name|id
parameter_list|)
block|{
name|long
name|x
init|=
name|id
operator|.
name|getLong
argument_list|()
decl_stmt|;
return|return
operator|(
name|x
operator|>
literal|0
operator|||
operator|!
name|pos
operator|.
name|containsKey
argument_list|(
name|x
argument_list|)
operator|)
condition|?
name|id
else|:
name|NodeId
operator|.
name|get
argument_list|(
name|pos
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|NodeId
name|getRootId
parameter_list|()
block|{
return|return
name|root
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|public
name|NodeImpl
name|getInfo
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeImpl
name|n
init|=
operator|new
name|NodeImpl
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
literal|"property."
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|n
operator|.
name|setProperty
argument_list|(
literal|"cache.size"
argument_list|,
literal|""
operator|+
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"cache.memoryUsed"
argument_list|,
literal|""
operator|+
name|cache
operator|.
name|getMemoryUsed
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"cache.memoryMax"
argument_list|,
literal|""
operator|+
name|cache
operator|.
name|getMemoryMax
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"nextId"
argument_list|,
literal|""
operator|+
name|nextId
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"root"
argument_list|,
literal|""
operator|+
name|root
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

