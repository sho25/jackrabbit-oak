begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Generic class for BlobGC tests which uses custom MemoryNodeStore as well as a memory NodeStore.  */
end_comment

begin_class
specifier|public
class|class
name|BlobGCTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlobGCTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
specifier|protected
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|protected
name|Whiteboard
name|wb
decl_stmt|;
specifier|protected
name|long
name|startReferenceTime
decl_stmt|;
specifier|protected
name|BlobReferenceRetriever
name|referenceRetriever
decl_stmt|;
specifier|protected
name|CheckpointMBean
name|checkpointMBean
decl_stmt|;
specifier|protected
name|Clock
name|clock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|clock
operator|=
name|getClock
argument_list|()
expr_stmt|;
name|blobStore
operator|=
operator|new
name|TimeLapsedBlobStore
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
operator|new
name|MemoryBlobStoreNodeStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
comment|// add whiteboard
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|wb
operator|=
operator|new
name|DefaultWhiteboard
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|props
operator|.
name|set
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|register
argument_list|(
name|type
argument_list|,
name|service
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|referenceRetriever
operator|=
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|getBlobReferenceRetriever
argument_list|()
expr_stmt|;
name|startReferenceTime
operator|=
operator|(
operator|(
name|TimeLapsedBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|startTime
expr_stmt|;
block|}
specifier|protected
name|Clock
name|getClock
parameter_list|()
block|{
return|return
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring gc()"
argument_list|)
expr_stmt|;
name|BlobStoreState
name|state
init|=
name|setUp
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs added : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs remaining : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noGc
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring noGc()"
argument_list|)
expr_stmt|;
name|startReferenceTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|BlobStoreState
name|state
init|=
name|setUp
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs added : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs remaining : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
name|afterSetupTime
operator|-
name|startReferenceTime
operator|+
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|gcInternal
parameter_list|(
name|long
name|maxBlobGcInSecs
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gc
init|=
name|initGC
argument_list|(
name|maxBlobGcInSecs
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs existing after gc : {}"
argument_list|,
name|existingAfterGC
operator|.
name|size
argument_list|()
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
return|return
name|existingAfterGC
return|;
block|}
specifier|private
name|MarkSweepGarbageCollector
name|initGC
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|initGC
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|,
name|executor
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MarkSweepGarbageCollector
name|initGC
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|,
name|String
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|repoId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MarkSweepGarbageCollector
name|gc
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
name|referenceRetriever
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|root
argument_list|,
literal|2048
argument_list|,
name|blobGcMaxAgeInSecs
argument_list|,
name|repoId
argument_list|,
name|wb
argument_list|)
decl_stmt|;
return|return
name|gc
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iterate
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cur
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
specifier|public
name|BlobStoreState
name|setUp
parameter_list|(
name|int
name|count
parameter_list|,
name|int
name|deletions
parameter_list|,
name|int
name|blobSize
parameter_list|)
throws|throws
name|Exception
block|{
name|preSetup
argument_list|()
expr_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/* Create and delete nodes with blobs stored in DS*/
name|int
name|maxDeleted
init|=
name|deletions
decl_stmt|;
name|int
name|numBlobs
init|=
name|count
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|toBeDeleted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDeleted
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numBlobs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|toBeDeleted
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|BlobStoreState
name|state
init|=
operator|new
name|BlobStoreState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlobs
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
name|blobSize
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toBeDeleted
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|state
operator|.
name|blobsPresent
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created blobs : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|toBeDeleted
control|)
block|{
name|delete
argument_list|(
literal|"c"
operator|+
name|id
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Deleted nodes : {}"
argument_list|,
name|toBeDeleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep a little to make eligible for cleanup
name|clock
operator|.
name|waitUntil
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|postSetup
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|createBlobs
parameter_list|(
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|blobSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|100
operator|+
name|i
argument_list|,
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|blobSet
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"{} Additional created {}"
argument_list|,
name|blobSet
operator|.
name|size
argument_list|()
argument_list|,
name|blobSet
argument_list|)
expr_stmt|;
return|return
name|blobSet
return|;
block|}
specifier|protected
name|void
name|preSetup
parameter_list|()
block|{}
specifier|protected
name|void
name|postSetup
parameter_list|(
name|BlobStoreState
name|state
parameter_list|)
block|{
operator|(
operator|(
name|MemoryBlobStoreNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|setReferencedBlobs
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|nodeId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Represents state of the blobs after setup      */
class|class
name|BlobStoreState
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|blobsAdded
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|blobsPresent
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
block|}
comment|/**      * MemoryNodeStore extension which created blobs in the in-memory blob store      */
specifier|static
class|class
name|MemoryBlobStoreNodeStore
extends|extends
name|MemoryNodeStore
block|{
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|referencedBlobs
decl_stmt|;
specifier|public
name|MemoryBlobStoreNodeStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
specifier|public
name|void
name|setReferencedBlobs
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|referencedBlobs
parameter_list|)
block|{
name|this
operator|.
name|referencedBlobs
operator|=
name|referencedBlobs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ArrayBasedBlob
name|createBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
name|String
name|id
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestBlob
argument_list|(
name|id
argument_list|,
name|blobStore
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in createBlobs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|BlobReferenceRetriever
name|getBlobReferenceRetriever
parameter_list|()
block|{
return|return
name|collector
lambda|->
block|{
for|for
control|(
name|String
name|id
range|:
name|referencedBlobs
control|)
block|{
name|collector
operator|.
name|addReference
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|static
class|class
name|TestBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|public
name|TestBlob
parameter_list|(
name|String
name|id
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentIdentity
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in getNewStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
block|{
try|try
block|{
return|return
name|blobStore
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in length"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
comment|/**      * Test in memory DS to store the contents with an increasing time      */
class|class
name|TimeLapsedBlobStore
implements|implements
name|GarbageCollectableBlobStore
implements|,
name|SharedDataStore
block|{
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|store
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|metadata
decl_stmt|;
specifier|public
name|TimeLapsedBlobStore
parameter_list|()
block|{
name|this
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeLapsedBlobStore
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|store
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getAllChunkIds
parameter_list|(
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|chunkIds
operator|.
name|size
argument_list|()
operator|==
name|countDeleteChunks
argument_list|(
name|chunkIds
argument_list|,
name|maxLastModifiedTime
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|countDeleteChunks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|chunkIds
parameter_list|,
name|long
name|maxLastModifiedTime
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|chunkIds
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"maxLastModifiedTime {}"
argument_list|,
name|maxLastModifiedTime
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"store.get(id).getLastModified() {}"
argument_list|,
name|store
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxLastModifiedTime
operator|<=
literal|0
operator|||
name|store
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getLastModified
argument_list|()
operator|<
name|maxLastModifiedTime
condition|)
block|{
name|store
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|resolveChunks
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Iterators
operator|.
name|singletonIterator
argument_list|(
name|blobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeBlob
argument_list|(
name|in
argument_list|,
operator|new
name|BlobOptions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|BlobOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getIdForInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|TestRecord
name|rec
init|=
operator|new
name|TestRecord
argument_list|(
name|id
argument_list|,
name|data
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Blob created {} with timestamp {}"
argument_list|,
name|rec
operator|.
name|id
argument_list|,
name|rec
operator|.
name|lastModified
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getIdForInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|TestRecord
operator|)
name|store
operator|.
name|get
argument_list|(
name|blobId
argument_list|)
operator|)
operator|.
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|blobId
argument_list|)
operator|.
name|getStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|String
name|getBlobId
parameter_list|(
annotation|@
name|Nonnull
name|String
name|reference
parameter_list|)
block|{
return|return
name|reference
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|blobId
parameter_list|)
block|{
return|return
name|blobId
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|TestRecord
name|rec
init|=
operator|new
name|TestRecord
argument_list|(
name|name
argument_list|,
name|data
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Metadata created {} with timestamp {}"
argument_list|,
name|rec
operator|.
name|id
argument_list|,
name|rec
operator|.
name|lastModified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|FileInputStream
name|fstream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fstream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|addMetadataRecord
argument_list|(
name|fstream
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fstream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataRecord
argument_list|>
name|getAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
argument_list|>
name|iter
init|=
name|metadata
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|recs
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
argument_list|>
name|iter
init|=
name|metadata
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataRecord
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|recs
control|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataRecord
argument_list|>
name|getAllRecords
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|store
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecordForId
parameter_list|(
name|DataIdentifier
name|id
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|SHARED
return|;
block|}
class|class
name|TestRecord
implements|implements
name|DataRecord
block|{
name|String
name|id
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
name|long
name|lastModified
decl_stmt|;
specifier|public
name|TestRecord
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataIdentifier
name|getIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DataIdentifier
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
block|}
comment|/** No-op **/
annotation|@
name|Override
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"readBlob not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBlockSize
parameter_list|(
name|int
name|x
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|String
name|writeBlob
parameter_list|(
name|String
name|tempFileName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getBlockSizeMin not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|sweep
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"sweep not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMark
parameter_list|()
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|clearInUse
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|clearCache
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|long
name|getBlockSizeMin
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getBlockSizeMin not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

