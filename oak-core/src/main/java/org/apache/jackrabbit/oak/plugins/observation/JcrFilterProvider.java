begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|toStringHelper
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PERSIST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
operator|.
name|STAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
operator|.
name|STAR_STAR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|ACFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventGenerator
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|EventTypeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|NodeTypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|Selectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|UniversalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|UuidPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_comment
comment|/**  * Provider for a filter filtering observation events according to a certain criterion.  */
end_comment

begin_class
specifier|public
class|class
name|JcrFilterProvider
implements|implements
name|FilterProvider
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ALL_EVENTS
init|=
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntManager
decl_stmt|;
specifier|private
specifier|final
name|int
name|eventTypes
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|deep
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|uuids
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ntNames
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|includeSessionLocal
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|includeClusterExternal
decl_stmt|;
specifier|private
specifier|final
name|PermissionProvider
name|permissionProvider
decl_stmt|;
comment|/**      * Create a new instance of a {@code JcrFilterProvider} for certain criteria      *      * @param ntManager   node type manager      * @param eventTypes  event types to include encoded as a bit mask      * @param path        path to include      * @param deep        {@code true} if descendants of {@code path} should be included.      *                    {@code false} otherwise.      * @param uuids       uuids to include      * @param nodeTypeName              node type names to include      * @param includeSessionLocal       include session local events if {@code true}.      *                                  Exclude otherwise.      * @param includeClusterExternal    include cluster external events if {@code true}.      *                                  Exclude otherwise.      * @param permissionProvider        permission provider to evaluate events against      * @see javax.jcr.observation.ObservationManager#addEventListener(javax.jcr.observation.EventListener, int, String, boolean, String[], String[], boolean) */
specifier|public
name|JcrFilterProvider
parameter_list|(
name|ReadOnlyNodeTypeManager
name|ntManager
parameter_list|,
name|int
name|eventTypes
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|deep
parameter_list|,
name|String
index|[]
name|uuids
parameter_list|,
name|String
index|[]
name|nodeTypeName
parameter_list|,
name|boolean
name|includeSessionLocal
parameter_list|,
name|boolean
name|includeClusterExternal
parameter_list|,
name|PermissionProvider
name|permissionProvider
parameter_list|)
block|{
name|this
operator|.
name|ntManager
operator|=
name|ntManager
expr_stmt|;
name|this
operator|.
name|eventTypes
operator|=
name|eventTypes
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|deep
operator|=
name|deep
expr_stmt|;
name|this
operator|.
name|uuids
operator|=
name|uuids
expr_stmt|;
name|this
operator|.
name|ntNames
operator|=
name|nodeTypeName
expr_stmt|;
name|this
operator|.
name|includeSessionLocal
operator|=
name|includeSessionLocal
expr_stmt|;
name|this
operator|.
name|includeClusterExternal
operator|=
name|includeClusterExternal
expr_stmt|;
name|this
operator|.
name|permissionProvider
operator|=
name|permissionProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|includeCommit
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
operator|(
name|includeSessionLocal
operator|||
operator|!
name|isLocal
argument_list|(
name|sessionId
argument_list|,
name|info
argument_list|)
operator|)
operator|&&
operator|(
name|includeClusterExternal
operator|||
operator|!
name|isExternal
argument_list|(
name|info
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
name|getFilter
parameter_list|(
name|Tree
name|beforeTree
parameter_list|,
name|Tree
name|afterTree
parameter_list|)
block|{
name|String
name|relPath
init|=
name|PathUtils
operator|.
name|relativize
argument_list|(
name|afterTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|pathPattern
init|=
name|deep
condition|?
name|PathUtils
operator|.
name|concat
argument_list|(
name|relPath
argument_list|,
name|STAR_STAR
argument_list|)
else|:
name|PathUtils
operator|.
name|concat
argument_list|(
name|relPath
argument_list|,
name|STAR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|Lists
operator|.
expr|<
name|Filter
operator|>
name|newArrayList
argument_list|(
operator|new
name|GlobbingPathFilter
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|pathPattern
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ALL_EVENTS
operator|&
name|eventTypes
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|Filters
operator|.
name|excludeAll
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ALL_EVENTS
operator|&
name|eventTypes
operator|)
operator|!=
name|ALL_EVENTS
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|EventTypeFilter
argument_list|(
name|eventTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uuids
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|uuids
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Filters
operator|.
name|excludeAll
argument_list|()
return|;
block|}
else|else
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|UniversalFilter
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|,
operator|new
name|UuidPredicate
argument_list|(
name|uuids
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ntNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ntNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Filters
operator|.
name|excludeAll
argument_list|()
return|;
block|}
else|else
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|UniversalFilter
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|Selectors
operator|.
name|PARENT
argument_list|,
operator|new
name|NodeTypePredicate
argument_list|(
name|ntManager
argument_list|,
name|ntNames
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ACFilter
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|getTreePermission
argument_list|(
name|afterTree
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Filters
operator|.
name|all
argument_list|(
name|filters
operator|.
name|toArray
argument_list|(
operator|new
name|Filter
index|[
name|filters
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"event types"
argument_list|,
name|eventTypes
argument_list|)
operator|.
name|add
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
operator|.
name|add
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
operator|.
name|add
argument_list|(
literal|"uuids"
argument_list|,
name|uuids
argument_list|)
operator|.
name|add
argument_list|(
literal|"node type names"
argument_list|,
name|ntNames
argument_list|)
operator|.
name|add
argument_list|(
literal|"includeSessionLocal"
argument_list|,
name|includeSessionLocal
argument_list|)
operator|.
name|add
argument_list|(
literal|"includeClusterExternal"
argument_list|,
name|includeClusterExternal
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|TreePermission
name|getTreePermission
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|isRoot
argument_list|()
condition|?
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
else|:
name|permissionProvider
operator|.
name|getTreePermission
argument_list|(
name|tree
argument_list|,
name|getTreePermission
argument_list|(
name|tree
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isLocal
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|!=
literal|null
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|info
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|sessionId
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isExternal
parameter_list|(
name|CommitInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|==
literal|null
return|;
block|}
block|}
end_class

end_unit

