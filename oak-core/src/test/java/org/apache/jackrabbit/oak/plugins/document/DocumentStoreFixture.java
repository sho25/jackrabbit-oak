begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DocumentStoreFixture
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentStoreFixture
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DocumentStoreFixture
name|MEMORY
init|=
operator|new
name|MemoryFixture
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DocumentStoreFixture
name|RDB_H2
init|=
operator|new
name|RDBH2Fixture
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DocumentStoreFixture
name|RDB_PG
init|=
operator|new
name|RDBFixture
argument_list|(
literal|"RDB-Postgres"
argument_list|,
literal|"jdbc:postgresql:oak"
argument_list|,
literal|"postgres"
argument_list|,
literal|"geheim"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DocumentStoreFixture
name|RDB_DB2
init|=
operator|new
name|RDBFixture
argument_list|(
literal|"RDB-DB2"
argument_list|,
literal|"jdbc:db2://localhost:50000/OAK"
argument_list|,
literal|"oak"
argument_list|,
literal|"geheim"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|DocumentStoreFixture
name|MONGO
init|=
operator|new
name|MongoFixture
argument_list|(
literal|"mongodb://localhost:27017/oak"
argument_list|)
decl_stmt|;
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|DocumentStore
name|getDocumentStore
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
class|class
name|MemoryFixture
extends|extends
name|DocumentStoreFixture
block|{
name|DocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Memory"
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|ds
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RDBH2Fixture
extends|extends
name|DocumentStoreFixture
block|{
name|DocumentStore
name|ds
init|=
operator|new
name|RDBDocumentStore
argument_list|(
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"RDB-on-HS-in-memory"
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|ds
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RDBFixture
extends|extends
name|DocumentStoreFixture
block|{
name|DocumentStore
name|ds
decl_stmt|;
name|String
name|name
decl_stmt|;
specifier|public
name|RDBFixture
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|passwd
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|DataSource
name|datas
init|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
name|passwd
argument_list|)
decl_stmt|;
name|this
operator|.
name|ds
operator|=
operator|new
name|RDBDocumentStore
argument_list|(
name|datas
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Database instance not available at "
operator|+
name|url
operator|+
literal|", skipping tests..."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|ds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|this
operator|.
name|ds
operator|!=
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MongoFixture
extends|extends
name|DocumentStoreFixture
block|{
name|DocumentStore
name|ds
decl_stmt|;
specifier|public
name|MongoFixture
parameter_list|(
name|String
name|db
parameter_list|)
block|{
try|try
block|{
name|MongoConnection
name|connection
init|=
operator|new
name|MongoConnection
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|DB
name|mongoDB
init|=
name|connection
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|this
operator|.
name|ds
operator|=
operator|new
name|MongoDocumentStore
argument_list|(
name|mongoDB
argument_list|,
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mongo instance not available at "
operator|+
name|db
operator|+
literal|", skipping tests..."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MongoDB"
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|ds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|this
operator|.
name|ds
operator|!=
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

