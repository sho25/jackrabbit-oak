begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemVisitor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Workspace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|ItemNameMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|PropertyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|NodeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
operator|.
name|PropertyDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|EffectiveNodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TODO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|ValueHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|Property
operator|.
name|JCR_LOCK_IS_DEEP
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|Property
operator|.
name|JCR_LOCK_OWNER
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
operator|.
name|UNDEFINED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_comment
comment|/**  * TODO document  *  * @param<T> the delegate type  */
end_comment

begin_class
specifier|public
class|class
name|NodeImpl
parameter_list|<
name|T
extends|extends
name|NodeDelegate
parameter_list|>
extends|extends
name|ItemImpl
argument_list|<
name|T
argument_list|>
implements|implements
name|Node
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|NodeImpl
parameter_list|(
name|T
name|dlg
parameter_list|,
name|SessionContext
name|sessionContext
parameter_list|)
block|{
name|super
argument_list|(
name|dlg
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------< Item>---
comment|/**      * @see javax.jcr.Item#isNode()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isNode
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @see javax.jcr.Item#getParent()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|getParent
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|dlg
operator|.
name|isRoot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Root has no parent"
argument_list|)
throw|;
block|}
else|else
block|{
name|NodeDelegate
name|parent
init|=
name|dlg
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|()
throw|;
block|}
return|return
name|sessionContext
operator|.
name|createNodeOrNull
argument_list|(
name|parent
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Item#isNew()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
block|{
return|return
operator|!
name|dlg
operator|.
name|isStale
argument_list|()
operator|&&
name|dlg
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|NEW
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Item#isModified()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
return|return
name|safePerform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
block|{
return|return
operator|!
name|dlg
operator|.
name|isStale
argument_list|()
operator|&&
name|dlg
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|MODIFIED
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Item#remove()      */
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|dlg
operator|.
name|isRoot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Cannot remove the root node"
argument_list|)
throw|;
block|}
name|dlg
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see Item#accept(javax.jcr.ItemVisitor)      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ItemVisitor
name|visitor
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkAlive
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------< Node>---
comment|/**      * @see Node#addNode(String)      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|addNode
parameter_list|(
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|addNode
argument_list|(
name|relPath
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|addNode
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|,
name|String
name|primaryNodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|oakTypeName
decl_stmt|;
if|if
condition|(
name|primaryNodeTypeName
operator|!=
literal|null
condition|)
block|{
name|oakTypeName
operator|=
name|getOakName
argument_list|(
name|primaryNodeTypeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oakTypeName
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
name|SessionImpl
operator|.
name|checkIndexOnName
argument_list|(
name|sessionContext
argument_list|,
name|relPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|NodeDelegate
name|parent
init|=
name|dlg
operator|.
name|getChild
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// is it a property?
name|String
name|grandParentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|NodeDelegate
name|grandParent
init|=
name|dlg
operator|.
name|getChild
argument_list|(
name|grandParentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|grandParent
operator|!=
literal|null
condition|)
block|{
name|String
name|propName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|grandParent
operator|.
name|getPropertyOrNull
argument_list|(
name|propName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|(
literal|"Can't add new node to property."
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|relPath
argument_list|)
throw|;
block|}
if|if
condition|(
name|parent
operator|.
name|getChild
argument_list|(
name|oakName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|(
name|relPath
argument_list|)
throw|;
block|}
comment|// check for NODE_TYPE_MANAGEMENT permission here as we cannot
comment|// distinguish between user-supplied and system-generated
comment|// modification of that property in the PermissionValidator
if|if
condition|(
name|oakTypeName
operator|!=
literal|null
condition|)
block|{
name|PropertyState
name|prop
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|oakTypeName
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|getAccessManager
argument_list|()
operator|.
name|checkPermissions
argument_list|(
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|,
name|prop
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
block|}
name|NodeDelegate
name|added
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|oakName
argument_list|,
name|oakTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemExistsException
argument_list|()
throw|;
block|}
return|return
name|sessionContext
operator|.
name|createNodeOrNull
argument_list|(
name|added
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|orderBefore
parameter_list|(
specifier|final
name|String
name|srcChildRelPath
parameter_list|,
specifier|final
name|String
name|destChildRelPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getEffectiveNodeType
argument_list|()
operator|.
name|checkOrderableChildNodes
argument_list|()
expr_stmt|;
name|String
name|oakSrcChildRelPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|srcChildRelPath
argument_list|)
decl_stmt|;
name|String
name|oakDestChildRelPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|destChildRelPath
operator|!=
literal|null
condition|)
block|{
name|oakDestChildRelPath
operator|=
name|getOakPathOrThrowNotFound
argument_list|(
name|destChildRelPath
argument_list|)
expr_stmt|;
block|}
name|dlg
operator|.
name|orderBefore
argument_list|(
name|oakSrcChildRelPath
argument_list|,
name|oakDestChildRelPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------------------------< setProperty>--
comment|//
comment|// The setProperty() variants below follow the same pattern:
comment|//
comment|//     if (value != null) {
comment|//         return internalSetProperty(name, ...);
comment|//     } else {
comment|//         return internalRemoveProperty(name);
comment|//     }
comment|//
comment|// In addition the value and value type information is pre-processed
comment|// according to the method signature before being passed to
comment|// internalSetProperty(). The methods that take a non-nullable
comment|// primitive value as an argument can skip the if clause.
comment|//
comment|// Note that due to backwards compatibility reasons (OAK-395) none
comment|// of the methods will ever return null, even if asked to remove
comment|// a non-existing property! See internalRemoveProperty() for details.
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|boolean
name|exactTypeMatch
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|STRING
expr_stmt|;
name|exactTypeMatch
operator|=
literal|false
expr_stmt|;
block|}
name|value
operator|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|exactTypeMatch
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|ValueHelper
operator|.
name|getType
argument_list|(
name|values
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|jcrName
parameter_list|,
name|Value
index|[]
name|values
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|type
operator|==
name|UNDEFINED
condition|)
block|{
return|return
name|setProperty
argument_list|(
name|jcrName
argument_list|,
name|values
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|type
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|jcrName
argument_list|,
name|values
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|jcrName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|Value
index|[]
name|vs
init|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|PropertyType
operator|.
name|STRING
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|vs
argument_list|,
name|UNDEFINED
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|type
operator|==
name|UNDEFINED
condition|)
block|{
return|return
name|setProperty
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|Value
index|[]
name|vs
init|=
name|ValueHelper
operator|.
name|convert
argument_list|(
name|values
argument_list|,
name|type
argument_list|,
name|getValueFactory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|vs
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|boolean
name|exactTypeMatch
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|STRING
expr_stmt|;
name|exactTypeMatch
operator|=
literal|false
expr_stmt|;
block|}
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
name|exactTypeMatch
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Binary
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|BigDecimal
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Calendar
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Value
name|v
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|internalSetProperty
argument_list|(
name|name
argument_list|,
name|v
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|internalRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Node
name|getNode
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|NodeDelegate
name|nd
init|=
name|dlg
operator|.
name|getChild
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|relPath
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|sessionContext
operator|.
name|createNodeOrNull
argument_list|(
name|nd
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeIterator
name|getNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|dlg
operator|.
name|getChildren
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
block|{
specifier|private
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|size
operator|=
name|dlg
operator|.
name|getChildCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidItemStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This iterator is no longer valid"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|size
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeIterator
name|getNodes
parameter_list|(
specifier|final
name|String
name|namePattern
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|dlg
operator|.
name|getChildren
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDelegate
name|state
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|namePattern
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeIterator
name|getNodes
parameter_list|(
specifier|final
name|String
index|[]
name|nameGlobs
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|children
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|dlg
operator|.
name|getChildren
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDelegate
name|state
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|nameGlobs
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|nodeIterator
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Property
name|getProperty
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|PropertyImpl
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyImpl
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPathOrThrowNotFound
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|PropertyDelegate
name|pd
init|=
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|relPath
operator|+
literal|" not found on "
operator|+
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|PropertyImpl
argument_list|(
name|pd
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|PropertyIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
init|=
name|dlg
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|long
name|size
init|=
name|dlg
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|properties
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|(
specifier|final
name|String
name|namePattern
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|PropertyIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|dlg
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyDelegate
name|entry
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|namePattern
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|properties
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getProperties
parameter_list|(
specifier|final
name|String
index|[]
name|nameGlobs
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|PropertyIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|propertyNames
init|=
name|Iterators
operator|.
name|filter
argument_list|(
name|dlg
operator|.
name|getProperties
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyDelegate
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|PropertyDelegate
name|entry
parameter_list|)
block|{
return|return
name|ItemNameMatcher
operator|.
name|matches
argument_list|(
name|toJcrPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|nameGlobs
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|propertyIterator
argument_list|(
name|propertyNames
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getPrimaryItem()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Item
name|getPrimaryItem
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Item
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Item
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|getPrimaryNodeType
argument_list|()
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"No primary item present on node "
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getNode
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|(
literal|"Primary item "
operator|+
name|name
operator|+
literal|" does not exist on node "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getUUID()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getUUID
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|isNodeType
argument_list|(
name|NodeType
operator|.
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
return|return
name|getIdentifier
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Node is not referenceable."
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|dlg
operator|.
name|getIdentifier
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndex
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// as long as we do not support same name siblings, index always is 1
return|return
literal|1
return|;
block|}
specifier|private
name|PropertyIterator
name|internalGetReferences
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|weak
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|PropertyIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PropertyIterator
name|perform
parameter_list|()
throws|throws
name|InvalidItemStateException
block|{
name|IdentifierManager
name|idManager
init|=
name|sessionDelegate
operator|.
name|getIdManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|propertyOakPaths
init|=
name|idManager
operator|.
name|getReferences
argument_list|(
name|weak
argument_list|,
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Property
argument_list|>
name|properties
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|propertyOakPaths
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Property
name|apply
parameter_list|(
name|String
name|oakPath
parameter_list|)
block|{
name|PropertyDelegate
name|pd
init|=
name|sessionDelegate
operator|.
name|getProperty
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
return|return
name|pd
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|PropertyImpl
argument_list|(
name|pd
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyIteratorAdapter
argument_list|(
name|properties
operator|.
name|iterator
argument_list|()
argument_list|,
name|propertyOakPaths
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getReferences()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|internalGetReferences
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getReferences
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|internalGetReferences
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getWeakReferences()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getWeakReferences
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|internalGetReferences
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|PropertyIterator
name|getWeakReferences
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|internalGetReferences
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNode
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPathOrThrow
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
return|return
name|dlg
operator|.
name|getChild
argument_list|(
name|oakPath
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPathOrThrow
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
return|return
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|oakPath
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNodes
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getNodes
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperties
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|dlg
operator|.
name|getPropertyCount
argument_list|()
operator|!=
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getPrimaryNodeType()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeType
name|getPrimaryNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeType
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|primaryNtName
decl_stmt|;
if|if
condition|(
name|hasProperty
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
condition|)
block|{
name|primaryNtName
operator|=
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Node "
operator|+
name|getPath
argument_list|()
operator|+
literal|" doesn't have primary type set."
argument_list|)
throw|;
block|}
return|return
name|getNodeTypeManager
argument_list|()
operator|.
name|getNodeType
argument_list|(
name|primaryNtName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getMixinNodeTypes()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeType
index|[]
name|getMixinNodeTypes
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeType
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO: check if transient changes to mixin-types are reflected here
if|if
condition|(
name|hasProperty
argument_list|(
name|Property
operator|.
name|JCR_MIXIN_TYPES
argument_list|)
condition|)
block|{
name|NodeTypeManager
name|ntMgr
init|=
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|Value
index|[]
name|mixinNames
init|=
name|getProperty
argument_list|(
name|Property
operator|.
name|JCR_MIXIN_TYPES
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|mixinTypes
init|=
operator|new
name|NodeType
index|[
name|mixinNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mixinNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mixinTypes
index|[
name|i
index|]
operator|=
name|ntMgr
operator|.
name|getNodeType
argument_list|(
name|mixinNames
index|[
name|i
index|]
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mixinTypes
return|;
block|}
else|else
block|{
return|return
operator|new
name|NodeType
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNodeType
parameter_list|(
specifier|final
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
return|return
name|getEffectiveNodeTypeProvider
argument_list|()
operator|.
name|isNodeType
argument_list|(
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|,
name|oakName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrimaryType
parameter_list|(
specifier|final
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCheckedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Cannot set primary type. Node is checked in."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|internalSetPrimaryType
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMixin
parameter_list|(
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakTypeName
init|=
name|getOakName
argument_list|(
name|checkNotNull
argument_list|(
name|mixinName
argument_list|)
argument_list|)
decl_stmt|;
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCheckedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Cannot add mixin type. Node is checked in."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|dlg
operator|.
name|addMixin
argument_list|(
name|oakTypeName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeMixin
parameter_list|(
specifier|final
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCheckedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Cannot remove mixin type. Node is checked in."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|propDlg
init|=
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|mixinName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propDlg
operator|==
literal|null
operator|||
operator|!
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|propDlg
operator|.
name|getPropertyState
argument_list|()
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchNodeTypeException
argument_list|(
literal|"Mixin "
operator|+
name|mixinName
operator|+
literal|" not contained in "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|// TODO: implement #removeMixin (OAK-767)
throw|throw
operator|new
name|ConstraintViolationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddMixin
parameter_list|(
name|String
name|mixinName
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakTypeName
init|=
name|getOakName
argument_list|(
name|mixinName
argument_list|)
decl_stmt|;
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyState
name|prop
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|singleton
argument_list|(
name|oakTypeName
argument_list|)
argument_list|,
name|NAMES
argument_list|)
decl_stmt|;
return|return
name|sessionContext
operator|.
name|getAccessManager
argument_list|()
operator|.
name|hasPermissions
argument_list|(
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|,
name|prop
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
argument_list|)
operator|&&
operator|!
name|dlg
operator|.
name|isProtected
argument_list|()
operator|&&
name|sessionContext
operator|.
name|getVersionManager
argument_list|()
operator|.
name|isCheckedOut
argument_list|(
name|toJcrPath
argument_list|(
name|dlg
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|dlg
operator|.
name|canAddMixin
argument_list|(
name|oakTypeName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeDefinition
name|getDefinition
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeDefinition
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeDefinition
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeDelegate
name|parent
init|=
name|dlg
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|getDefinitionProvider
argument_list|()
operator|.
name|getRootDefinition
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getDefinitionProvider
argument_list|()
operator|.
name|getDefinition
argument_list|(
name|parent
operator|.
name|getTree
argument_list|()
argument_list|,
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
name|getCorrespondingNodePath
parameter_list|(
name|String
name|workspaceName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkAlive
argument_list|()
expr_stmt|;
name|checkValidWorkspace
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"TODO: Node.getCorrespondingNodePath"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|String
name|srcWorkspace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|checkAlive
argument_list|()
expr_stmt|;
name|checkValidWorkspace
argument_list|(
name|srcWorkspace
argument_list|)
expr_stmt|;
comment|// check for pending changes
if|if
condition|(
name|sessionDelegate
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to perform operation. Session has pending changes."
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// TODO
block|}
comment|/**      * @see javax.jcr.Node#checkin()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Version
name|checkin
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getVersionManager
argument_list|()
operator|.
name|checkin
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#checkout()      */
annotation|@
name|Override
specifier|public
name|void
name|checkout
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|getVersionManager
argument_list|()
operator|.
name|checkout
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#doneMerge(javax.jcr.version.Version)      */
annotation|@
name|Override
specifier|public
name|void
name|doneMerge
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getVersionManager
argument_list|()
operator|.
name|doneMerge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#cancelMerge(javax.jcr.version.Version)      */
annotation|@
name|Override
specifier|public
name|void
name|cancelMerge
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getVersionManager
argument_list|()
operator|.
name|cancelMerge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#merge(String, boolean)      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeIterator
name|merge
parameter_list|(
name|String
name|srcWorkspace
parameter_list|,
name|boolean
name|bestEffort
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getVersionManager
argument_list|()
operator|.
name|merge
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|srcWorkspace
argument_list|,
name|bestEffort
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#isCheckedOut()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isCheckedOut
parameter_list|()
throws|throws
name|RepositoryException
block|{
try|try
block|{
return|return
name|getVersionManager
argument_list|()
operator|.
name|isCheckedOut
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|ex
parameter_list|)
block|{
comment|// when versioning is not supported all nodes are considered to be
comment|// checked out
return|return
literal|true
return|;
block|}
block|}
comment|/**      * @see javax.jcr.Node#restore(String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|String
name|versionName
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|isNodeType
argument_list|(
name|NodeType
operator|.
name|MIX_VERSIONABLE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Node is not mix:versionable"
argument_list|)
throw|;
block|}
name|getVersionManager
argument_list|()
operator|.
name|restore
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|versionName
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#restore(javax.jcr.version.Version, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|Version
name|version
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|isNodeType
argument_list|(
name|NodeType
operator|.
name|MIX_VERSIONABLE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Node is not mix:versionable"
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|version
operator|.
name|getContainingHistory
argument_list|()
operator|.
name|getVersionableIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|getVersionManager
argument_list|()
operator|.
name|restore
argument_list|(
name|version
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Version does not belong to the "
operator|+
literal|"VersionHistory of this node."
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see javax.jcr.Node#restore(Version, String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restore
parameter_list|(
name|Version
name|version
parameter_list|,
name|String
name|relPath
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// additional checks are performed with subsequent calls.
if|if
condition|(
name|hasNode
argument_list|(
name|relPath
argument_list|)
condition|)
block|{
comment|// node at 'relPath' exists -> call restore on the target Node
name|getNode
argument_list|(
name|relPath
argument_list|)
operator|.
name|restore
argument_list|(
name|version
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|absPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|getVersionManager
argument_list|()
operator|.
name|restore
argument_list|(
name|absPath
argument_list|,
name|version
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see javax.jcr.Node#restoreByLabel(String, boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|restoreByLabel
parameter_list|(
name|String
name|versionLabel
parameter_list|,
name|boolean
name|removeExisting
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getVersionManager
argument_list|()
operator|.
name|restoreByLabel
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|versionLabel
argument_list|,
name|removeExisting
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#getVersionHistory()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|VersionHistory
name|getVersionHistory
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getVersionManager
argument_list|()
operator|.
name|getVersionHistory
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getBaseVersion()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Version
name|getBaseVersion
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getVersionManager
argument_list|()
operator|.
name|getBaseVersion
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Checks whether this node is locked by looking for the      * {@code jcr:lockOwner} property either on this node or      * on any ancestor that also has the {@code jcr:lockIsDeep}      * property set to {@code true}.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|lockOwner
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_OWNER
argument_list|)
decl_stmt|;
name|String
name|lockIsDeep
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_IS_DEEP
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|lockOwner
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeDelegate
name|parent
init|=
name|dlg
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getPropertyOrNull
argument_list|(
name|lockOwner
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|PropertyDelegate
name|isDeep
init|=
name|parent
operator|.
name|getPropertyOrNull
argument_list|(
name|lockIsDeep
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDeep
operator|!=
literal|null
condition|)
block|{
name|PropertyState
name|state
init|=
name|isDeep
operator|.
name|getPropertyState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|isArray
argument_list|()
operator|&&
name|state
operator|.
name|getValue
argument_list|(
name|BOOLEAN
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Checks whether this node holds a lock by looking for the      * {@code jcr:lockOwner} property.      */
annotation|@
name|Override
specifier|public
name|boolean
name|holdsLock
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|lockOwner
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_OWNER
argument_list|)
decl_stmt|;
return|return
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|lockOwner
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @see javax.jcr.Node#getLock()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Lock
name|getLock
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|()
throw|;
block|}
comment|/**      * @see javax.jcr.Node#lock(boolean, boolean)      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Lock
name|lock
parameter_list|(
specifier|final
name|boolean
name|isDeep
parameter_list|,
name|boolean
name|isSessionScoped
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ContentSession
name|session
init|=
name|sessionDelegate
operator|.
name|getContentSession
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userID
init|=
name|session
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|String
name|lockOwner
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_OWNER
argument_list|)
decl_stmt|;
name|String
name|lockIsDeep
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_IS_DEEP
argument_list|)
decl_stmt|;
try|try
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|dlg
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|()
throw|;
block|}
name|tree
operator|.
name|setProperty
argument_list|(
name|lockOwner
argument_list|,
name|userID
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|lockIsDeep
argument_list|,
name|isDeep
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// TODO: fail instead?
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unable to lock "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSessionScoped
condition|)
block|{
return|return
name|TODO
operator|.
name|dummyImplementation
argument_list|()
operator|.
name|returnValue
argument_list|(
operator|new
name|Lock
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getLockOwner
parameter_list|()
block|{
return|return
name|userID
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeep
parameter_list|()
block|{
return|return
name|isDeep
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|NodeImpl
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLockToken
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSecondsRemaining
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSessionScoped
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLockOwningSession
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{                 }
block|}
argument_list|)
return|;
block|}
return|return
name|getLock
argument_list|()
return|;
block|}
comment|/**      * @see javax.jcr.Node#unlock()      */
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|lockOwner
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_OWNER
argument_list|)
decl_stmt|;
name|String
name|lockIsDeep
init|=
name|getOakPathOrThrow
argument_list|(
name|JCR_LOCK_IS_DEEP
argument_list|)
decl_stmt|;
try|try
block|{
name|Root
name|root
init|=
name|sessionDelegate
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|dlg
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ItemNotFoundException
argument_list|()
throw|;
block|}
name|tree
operator|.
name|removeProperty
argument_list|(
name|lockOwner
argument_list|)
expr_stmt|;
name|tree
operator|.
name|removeProperty
argument_list|(
name|lockIsDeep
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Unable to unlock "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|NodeIterator
name|getSharedSet
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|perform
argument_list|(
operator|new
name|ItemReadOperation
argument_list|<
name|NodeIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeIterator
name|perform
parameter_list|()
block|{
return|return
operator|new
name|NodeIteratorAdapter
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeImpl
operator|.
name|this
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSharedSet
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|NodeIterator
name|sharedSet
init|=
name|getSharedSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|sharedSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sharedSet
operator|.
name|nextNode
argument_list|()
operator|.
name|removeShare
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeShare
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see javax.jcr.Node#followLifecycleTransition(String)      */
annotation|@
name|Override
specifier|public
name|void
name|followLifecycleTransition
parameter_list|(
name|String
name|transition
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Lifecycle Management is not supported"
argument_list|)
throw|;
block|}
comment|/**      * @see javax.jcr.Node#getAllowedLifecycleTransistions()      */
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|String
index|[]
name|getAllowedLifecycleTransistions
parameter_list|()
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Lifecycle Management is not supported"
argument_list|)
throw|;
block|}
comment|//------------------------------------------------------------< internal>---
specifier|private
name|EffectiveNodeType
name|getEffectiveNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|getEffectiveNodeTypeProvider
argument_list|()
operator|.
name|getEffectiveNodeType
argument_list|(
name|dlg
operator|.
name|getTree
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Node
argument_list|>
name|nodeIterator
parameter_list|(
name|Iterator
argument_list|<
name|NodeDelegate
argument_list|>
name|childNodes
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|childNodes
argument_list|,
operator|new
name|Function
argument_list|<
name|NodeDelegate
argument_list|,
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|apply
parameter_list|(
name|NodeDelegate
name|nodeDelegate
parameter_list|)
block|{
return|return
operator|new
name|NodeImpl
argument_list|<
name|NodeDelegate
argument_list|>
argument_list|(
name|nodeDelegate
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Property
argument_list|>
name|propertyIterator
parameter_list|(
name|Iterator
argument_list|<
name|PropertyDelegate
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|properties
argument_list|,
operator|new
name|Function
argument_list|<
name|PropertyDelegate
argument_list|,
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Property
name|apply
parameter_list|(
name|PropertyDelegate
name|propertyDelegate
parameter_list|)
block|{
return|return
operator|new
name|PropertyImpl
argument_list|(
name|propertyDelegate
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkValidWorkspace
parameter_list|(
name|String
name|workspaceName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Workspace
name|workspace
init|=
name|sessionContext
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|wn
range|:
name|workspace
operator|.
name|getAccessibleWorkspaceNames
argument_list|()
control|)
block|{
if|if
condition|(
name|wn
operator|.
name|equals
argument_list|(
name|workspaceName
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|NoSuchWorkspaceException
argument_list|(
name|workspaceName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
specifier|private
name|void
name|internalSetPrimaryType
parameter_list|(
specifier|final
name|String
name|nodeTypeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: figure out the right place for this check
name|NodeType
name|nt
init|=
name|getNodeTypeManager
argument_list|()
operator|.
name|getNodeType
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
comment|// throws on not found
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
operator|||
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConstraintViolationException
argument_list|()
throw|;
block|}
comment|// TODO: END
name|String
name|jcrPrimaryType
init|=
name|getOakPathOrThrow
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_TYPE
argument_list|)
decl_stmt|;
name|Value
name|value
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|nodeTypeName
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|jcrPrimaryType
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setOrderableChildren
argument_list|(
name|nt
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Property
name|internalSetProperty
parameter_list|(
name|String
name|jcrName
parameter_list|,
specifier|final
name|Value
name|value
parameter_list|,
specifier|final
name|boolean
name|exactTypeMatch
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakName
init|=
name|getOakPathOrThrow
argument_list|(
name|checkNotNull
argument_list|(
name|jcrName
argument_list|)
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkPreconditions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|checkPreconditions
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCheckedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|VersionException
argument_list|(
literal|"Cannot set property. Node is checked in."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Property
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO: Avoid extra JCR method calls (OAK-672)
name|PropertyDefinition
name|definition
init|=
name|getEffectiveNodeType
argument_list|()
operator|.
name|getPropertyDefinition
argument_list|(
name|oakName
argument_list|,
literal|false
argument_list|,
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|exactTypeMatch
argument_list|)
decl_stmt|;
name|checkProtected
argument_list|(
name|definition
argument_list|)
expr_stmt|;
name|PropertyState
name|state
init|=
name|createSingleState
argument_list|(
name|oakName
argument_list|,
name|value
argument_list|,
name|definition
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyImpl
argument_list|(
name|dlg
operator|.
name|setProperty
argument_list|(
name|state
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Property
name|internalSetProperty
parameter_list|(
name|String
name|jcrName
parameter_list|,
specifier|final
name|Value
index|[]
name|values
parameter_list|,
specifier|final
name|int
name|type
parameter_list|,
specifier|final
name|boolean
name|exactTypeMatch
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakName
init|=
name|getOakPathOrThrow
argument_list|(
name|checkNotNull
argument_list|(
name|jcrName
argument_list|)
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Property
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// TODO: Avoid extra JCR method calls (OAK-672)
name|PropertyDefinition
name|definition
init|=
name|getEffectiveNodeType
argument_list|()
operator|.
name|getPropertyDefinition
argument_list|(
name|oakName
argument_list|,
literal|true
argument_list|,
name|type
argument_list|,
name|exactTypeMatch
argument_list|)
decl_stmt|;
name|checkProtected
argument_list|(
name|definition
argument_list|)
expr_stmt|;
name|PropertyState
name|state
init|=
name|createMultiState
argument_list|(
name|oakName
argument_list|,
name|type
argument_list|,
name|values
argument_list|,
name|definition
argument_list|)
decl_stmt|;
return|return
operator|new
name|PropertyImpl
argument_list|(
name|dlg
operator|.
name|setProperty
argument_list|(
name|state
argument_list|)
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Property
name|internalRemoveProperty
parameter_list|(
specifier|final
name|String
name|jcrName
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|checkNotNull
argument_list|(
name|jcrName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|perform
argument_list|(
operator|new
name|ItemWriteOperation
argument_list|<
name|Property
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Property
name|perform
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PropertyDelegate
name|property
init|=
name|dlg
operator|.
name|getPropertyOrNull
argument_list|(
name|oakName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|property
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Return an instance which throws on access; see OAK-395
name|property
operator|=
name|dlg
operator|.
name|getProperty
argument_list|(
name|oakName
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PropertyImpl
argument_list|(
name|property
argument_list|,
name|sessionContext
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

