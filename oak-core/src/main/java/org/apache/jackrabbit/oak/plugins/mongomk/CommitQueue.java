begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|mongomk
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ChangeDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>CommitQueue</code> ensures a sequence of commits consistent with the  * commit revision even if commits did not complete in this sequence.  */
end_comment

begin_class
class|class
name|CommitQueue
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MongoNodeStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Entry
argument_list|>
name|commits
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Entry
argument_list|>
argument_list|(
operator|new
name|StableRevisionComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ChangeDispatcher
name|dispatcher
decl_stmt|;
name|CommitQueue
parameter_list|(
name|MongoNodeStore
name|store
parameter_list|,
name|ChangeDispatcher
name|dispatcher
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
annotation|@
name|Nonnull
name|Revision
name|createRevision
parameter_list|()
block|{
return|return
name|createRevisions
argument_list|(
literal|1
argument_list|)
operator|.
name|first
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|createRevisions
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|num
operator|>
literal|0
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
operator|new
name|TreeSet
argument_list|<
name|Revision
argument_list|>
argument_list|(
operator|new
name|StableRevisionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|rev
operator|=
name|store
operator|.
name|newRevision
argument_list|()
expr_stmt|;
name|revs
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
name|commits
operator|.
name|put
argument_list|(
name|rev
argument_list|,
operator|new
name|Entry
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"created commit {}"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
name|revs
return|;
block|}
name|void
name|done
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|,
name|boolean
name|isBranch
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rev
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBranch
condition|)
block|{
name|removeCommit
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|afterTrunkCommit
argument_list|(
name|rev
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|canceled
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|)
block|{
name|removeCommit
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
comment|//------------------------< internal>--------------------------------------
specifier|private
name|void
name|removeCommit
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|)
block|{
comment|// simply remove and notify next head if any
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|wasHead
init|=
name|commits
operator|.
name|firstKey
argument_list|()
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|commits
operator|.
name|remove
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed commit {}, wasHead={}"
argument_list|,
name|rev
argument_list|,
name|wasHead
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasHead
condition|)
block|{
name|notifyHead
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|afterTrunkCommit
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
assert|assert
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
assert|;
name|boolean
name|isHead
decl_stmt|;
name|Entry
name|commitEntry
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isHead
operator|=
name|commits
operator|.
name|firstKey
argument_list|()
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|commitEntry
operator|=
name|commits
operator|.
name|get
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isHead
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"not head: {}, waiting..."
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|commitEntry
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|commits
operator|.
name|remove
argument_list|(
name|rev
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed {}, head is now {}"
argument_list|,
name|rev
argument_list|,
name|commits
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember before revision
name|Revision
name|before
init|=
name|store
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
comment|// update head revision
name|store
operator|.
name|setHeadRevision
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// TODO: correct?
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|store
operator|.
name|getRoot
argument_list|(
name|before
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// notify next if there is any
name|notifyHead
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyHead
parameter_list|()
block|{
if|if
condition|(
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"release {}"
argument_list|,
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * An entry in the commit queue.      */
specifier|private
specifier|static
specifier|final
class|class
name|Entry
block|{
comment|/**          * The revision of the commit (used for debugging).          */
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
comment|/**          * The latch. Initially set to 1, so that release() needs to be called          * once for await() to continue.          */
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Entry
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
comment|/**          * Release all threads that are waiting.          */
name|void
name|release
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**          * Wait for the latch to be released.          */
name|void
name|await
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"awaiting {}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// retry
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

