begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|FileStoreHelper
operator|.
name|isValidFileStoreOrFail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|ArgumentAcceptingOptionSpec
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionException
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|Traces
import|;
end_import

begin_comment
comment|/**  *  Command line utility for collection {@link IOTracer io traces}  *<pre>     usage: iotrace path/to/segmentstore<options>     Option (* = required)      Description     ---------------------      -----------     --depth<Integer>          Maximal depth of the traversal (default: 5)     --mmap<Boolean>           use memory mapping for the file store (default: true)     --output<File>            output file where the IO trace is written to (default: iotrace.csv)     --path<String>            starting path for the traversal (default: /root)     --segment-cache<Integer>  size of the segment cache in MB (default: 256)     --trace<Traces> (*)       type of the traversal. Either of [DEPTH, BREADTH]</pre>  */
end_comment

begin_class
class|class
name|IOTraceCommand
implements|implements
name|Command
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"iotrace"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|optionParser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|Traces
argument_list|>
name|traceOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"trace"
argument_list|,
literal|"type of the traversal. Either of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Traces
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Traces
operator|.
name|class
argument_list|)
operator|.
name|required
argument_list|()
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|File
argument_list|>
name|outputOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"output"
argument_list|,
literal|"output file where the IO trace is written to"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"iotrace.csv"
argument_list|)
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|Boolean
argument_list|>
name|mmapOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"mmap"
argument_list|,
literal|"use memory mapping for the file store"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|Integer
argument_list|>
name|segmentCacheOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"segment-cache"
argument_list|,
literal|"size of the segment cache in MB"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|Integer
argument_list|>
name|depthOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"depth"
argument_list|,
literal|"Maximal depth of the traversal"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ArgumentAcceptingOptionSpec
argument_list|<
name|String
argument_list|>
name|pathOption
init|=
name|optionParser
operator|.
name|accepts
argument_list|(
literal|"path"
argument_list|,
literal|"starting path for the traversal"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"/root"
argument_list|)
decl_stmt|;
try|try
block|{
name|OptionSet
name|options
init|=
name|optionParser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|nonOptionArguments
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|optionParser
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|segmentStore
init|=
name|isValidFileStoreOrFail
argument_list|(
operator|new
name|File
argument_list|(
name|options
operator|.
name|nonOptionArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Traces
name|trace
init|=
name|traceOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|File
name|output
init|=
name|outputOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|Boolean
name|mmap
init|=
name|mmapOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|Integer
name|segmentCache
init|=
name|segmentCacheOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|Integer
name|depth
init|=
name|depthOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|pathOption
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"%s first traversing %d levels of %s starting at %s"
argument_list|,
name|trace
argument_list|,
name|depth
argument_list|,
name|segmentStore
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"mmap=%b, segment cache=%d"
argument_list|,
name|mmap
argument_list|,
name|segmentCache
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
literal|"Writing trace to %s"
argument_list|,
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|trace
operator|.
name|collectIOTrace
argument_list|(
name|segmentStore
argument_list|,
name|mmap
argument_list|,
name|segmentCache
argument_list|,
name|path
argument_list|,
name|depth
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptionException
name|e
parameter_list|)
block|{
name|printUsage
argument_list|(
name|optionParser
argument_list|,
name|System
operator|.
name|err
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
annotation|@
name|Nonnull
name|OptionParser
name|parser
parameter_list|,
annotation|@
name|Nonnull
name|PrintStream
name|err
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|messages
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|message
range|:
name|messages
control|)
block|{
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|NAME
operator|+
literal|" path/to/segmentstore<options>"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

