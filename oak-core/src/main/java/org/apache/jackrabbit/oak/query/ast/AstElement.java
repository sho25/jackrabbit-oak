begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|CoreValueMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_class
specifier|abstract
class|class
name|AstElement
block|{
specifier|protected
name|Query
name|query
decl_stmt|;
specifier|abstract
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
function_decl|;
specifier|protected
name|String
name|protect
parameter_list|(
name|Object
name|expression
parameter_list|)
block|{
name|String
name|str
init|=
name|expression
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|'('
operator|+
name|str
operator|+
literal|')'
return|;
block|}
else|else
block|{
return|return
name|str
return|;
block|}
block|}
specifier|protected
name|String
name|quotePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
literal|'['
operator|+
name|path
operator|+
literal|']'
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/**      * Calculate the absolute path (the path including the workspace name).      *      * @param path the session local path      * @return the absolute path      */
specifier|protected
name|String
name|getAbsolutePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
comment|/**      * Calculate the session local path (the path excluding the workspace name)      * if possible.      *      * @param path the absolute path      * @return the session local path, or null if not within this workspace      */
specifier|protected
name|String
name|getLocalPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
comment|/**      * Convert the JSON property value to a core value.      *      * @param propertyValue JSON property value      * @return the core value      */
specifier|protected
name|CoreValue
name|getCoreValue
parameter_list|(
name|String
name|propertyValue
parameter_list|)
block|{
comment|// TODO data type mapping
name|CoreValueFactory
name|vf
init|=
name|query
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|JsopReader
name|r
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|matches
argument_list|(
literal|'['
argument_list|)
condition|)
block|{
comment|// TODO support arrays, but only for comparisons
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Arrays are currently not supported: "
operator|+
name|propertyValue
argument_list|)
throw|;
block|}
return|return
name|CoreValueMapper
operator|.
name|fromJsopReader
argument_list|(
name|r
argument_list|,
name|vf
argument_list|)
return|;
block|}
comment|/**      * Validate that the given value can be converted to a JCR name.      *      * @param v the value      * @return true if it can be converted      */
specifier|protected
name|boolean
name|isName
parameter_list|(
name|CoreValue
name|v
parameter_list|)
block|{
comment|// TODO correctly validate JCR names - see JCR 2.0 spec 3.2.4 Naming Restrictions
switch|switch
condition|(
name|v
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|DATE
case|:
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
case|case
name|PropertyType
operator|.
name|LONG
case|:
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
literal|false
return|;
block|}
name|String
name|n
init|=
name|v
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|n
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|String
name|getOakPath
parameter_list|(
name|String
name|jcrPath
parameter_list|)
block|{
name|NamePathMapper
name|m
init|=
name|query
operator|.
name|getNamePathMapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
comment|// to simplify testing, a getNamePathMapper isn't required
return|return
name|jcrPath
return|;
block|}
name|String
name|p
init|=
name|m
operator|.
name|getOakPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid JCR path: "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

