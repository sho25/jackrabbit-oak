begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TreeTypeProviderTest
extends|extends
name|AbstractTreeTest
block|{
specifier|private
name|TreeTypeProvider
name|typeProvider
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeTest
argument_list|>
name|tests
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|typeProvider
operator|=
operator|new
name|TreeTypeProvider
argument_list|(
operator|new
name|TreeContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|definesProperty
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesContextRoot
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ctxRoot"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesLocation
parameter_list|(
annotation|@
name|NotNull
name|TreeLocation
name|location
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|definesInternal
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|tree
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"internal"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|tests
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/content"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|'/'
operator|+
name|JcrConstants
operator|.
name|JCR_SYSTEM
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:system/rep:namedChildNodeDefinitions/jcr:versionStorage"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:system/rep:namedChildNodeDefinitions/jcr:activities"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
operator|+
literal|"/rep:system/rep:namedChildNodeDefinitions/jcr:configurations"
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/:hidden"
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/:hidden/child"
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/oak:index/nodetype/:index"
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
literal|"/oak:index/nodetype/:index/child"
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|versionPath
range|:
name|VersionConstants
operator|.
name|SYSTEM_PATHS
control|)
block|{
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|versionPath
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|tests
operator|.
name|add
argument_list|(
operator|new
name|TypeTest
argument_list|(
name|versionPath
operator|+
literal|"/a/b/child"
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetType
parameter_list|()
block|{
for|for
control|(
name|TypeTest
name|test
range|:
name|tests
control|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|mockTree
argument_list|(
name|test
operator|.
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeWithParentType
parameter_list|()
block|{
for|for
control|(
name|TypeTest
name|test
range|:
name|tests
control|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|mockTree
argument_list|(
name|test
operator|.
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|test
operator|.
name|parentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeWithDefaultParentType
parameter_list|()
block|{
for|for
control|(
name|TypeTest
name|test
range|:
name|tests
control|)
block|{
name|TreeType
name|typeIfParentDefault
init|=
name|typeProvider
operator|.
name|getType
argument_list|(
name|mockTree
argument_list|(
name|test
operator|.
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|TreeType
operator|.
name|DEFAULT
operator|==
name|test
operator|.
name|parentType
condition|)
block|{
name|assertEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeIfParentDefault
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotEquals
argument_list|(
name|test
operator|.
name|path
argument_list|,
name|test
operator|.
name|type
argument_list|,
name|typeIfParentDefault
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeForRootTree
parameter_list|()
block|{
name|Tree
name|t
init|=
name|mockTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
comment|// the type of the root tree is always 'DEFAULT' irrespective of the passed parent type.
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|t
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|t
argument_list|,
name|TreeType
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|t
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInternal
parameter_list|()
block|{
name|Tree
name|internal
init|=
name|mockTree
argument_list|(
literal|"/internal"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|internalChild
init|=
name|mockTree
argument_list|(
literal|"/internal/child"
argument_list|,
name|internal
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|internal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|internalChild
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|INTERNAL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|child
argument_list|,
name|TreeType
operator|.
name|INTERNAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAc
parameter_list|()
block|{
name|Tree
name|ctxRoot
init|=
name|mockTree
argument_list|(
literal|"/ctxRoot"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|ctxRootChild
init|=
name|mockTree
argument_list|(
literal|"/ctxRoot/child"
argument_list|,
name|ctxRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|ctxRoot
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|ctxRootChild
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|child
argument_list|,
name|TreeType
operator|.
name|ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeAware
parameter_list|()
block|{
name|Tree
name|typeAware
init|=
name|mockTree
argument_list|(
literal|"/typeAware"
argument_list|,
name|rootTree
argument_list|,
literal|true
argument_list|,
name|TreeTypeAware
operator|.
name|class
argument_list|)
decl_stmt|;
name|Tree
name|awareChild
init|=
name|mockTree
argument_list|(
literal|"/typeAware/child"
argument_list|,
name|typeAware
argument_list|,
literal|true
argument_list|,
name|TreeTypeAware
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|typeAware
operator|instanceof
name|TreeTypeAware
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awareChild
operator|instanceof
name|TreeTypeAware
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|typeAware
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|DEFAULT
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|awareChild
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|VERSION
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|typeAware
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TreeType
operator|.
name|VERSION
argument_list|,
name|typeProvider
operator|.
name|getType
argument_list|(
name|awareChild
argument_list|,
name|TreeType
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TypeTest
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|TreeType
name|type
decl_stmt|;
specifier|private
specifier|final
name|TreeType
name|parentType
decl_stmt|;
specifier|private
name|TypeTest
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
name|TreeType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|type
argument_list|,
name|TreeType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TypeTest
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|,
name|TreeType
name|type
parameter_list|,
name|TreeType
name|parentType
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

