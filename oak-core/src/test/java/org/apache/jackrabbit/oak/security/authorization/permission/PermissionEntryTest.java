begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionEntryTest
block|{
specifier|private
name|String
name|path
init|=
literal|"/path"
decl_stmt|;
specifier|private
name|int
name|index
init|=
literal|15
decl_stmt|;
specifier|private
name|PermissionEntry
name|entry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|index
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|private
name|RestrictionPattern
name|pattern
init|=
name|mock
argument_list|(
name|RestrictionPattern
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PermissionEntry
name|entryWithNonEmptyPattern
init|=
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|index
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMatchesEmptyPattern
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatches
parameter_list|()
block|{
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesTreeEmptyPattern
parameter_list|()
block|{
comment|// restriction pattern is empty => matches
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesTree
parameter_list|()
block|{
name|Tree
name|t
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyState
name|ps
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|nullable
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|t
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|any
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|,
name|nullable
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|t
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|t
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesPathEmptyPattern
parameter_list|()
block|{
comment|// restriction patterrn is empty => matches
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"some"
argument_list|,
literal|"child"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matches
argument_list|(
literal|"/some/other/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesPath
parameter_list|()
block|{
name|String
index|[]
name|paths
init|=
operator|new
name|String
index|[]
block|{
name|path
block|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
block|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"some"
argument_list|,
literal|"child"
argument_list|)
block|,
literal|"/some/other/path"
block|,
literal|""
block|}
decl_stmt|;
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|verify
argument_list|(
name|pattern
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesParentEmptyPattern
parameter_list|()
block|{
comment|// the entry matchesParent if the parent of the path to be evaluated is equal or a descendant of the entry-path
name|assertTrue
argument_list|(
name|entry
operator|.
name|matchesParent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"parent"
argument_list|,
literal|"of"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|matchesParent
argument_list|(
literal|"/another/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchesParent
parameter_list|()
block|{
comment|// the entry matchesParent if the parent of the path to be evaluated is equal or a descendant of the entry-path
comment|// and the pattern evaluates to true (which is always the case here)
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"parent"
argument_list|,
literal|"of"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
literal|"/another/path"
argument_list|)
argument_list|)
expr_stmt|;
comment|// pattern doesn't match => always false
name|when
argument_list|(
name|pattern
operator|.
name|matches
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"parent"
argument_list|,
literal|"of"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryWithNonEmptyPattern
operator|.
name|matchesParent
argument_list|(
literal|"/another/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToEqualPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionEntry
name|higherIndexEntry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|higherIndexEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|higherIndexEntry
operator|.
name|compareTo
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToDifferentPathSameDepth
parameter_list|()
block|{
name|String
name|sameDepthPath
init|=
literal|"/another"
decl_stmt|;
name|PermissionEntry
name|anotherEntry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|sameDepthPath
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
decl_stmt|;
name|PermissionEntry
name|anotherEntry2
init|=
operator|new
name|PermissionEntry
argument_list|(
name|sameDepthPath
argument_list|,
operator|!
name|entry
operator|.
name|isAllow
argument_list|,
literal|3
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|,
name|mock
argument_list|(
name|RestrictionPattern
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|compareTo
argument_list|(
name|sameDepthPath
argument_list|)
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|anotherEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|compareTo
argument_list|(
name|sameDepthPath
argument_list|)
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|anotherEntry2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|sameDepthPath
operator|.
name|compareTo
argument_list|(
name|path
argument_list|)
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|anotherEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|sameDepthPath
operator|.
name|compareTo
argument_list|(
name|path
argument_list|)
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|anotherEntry2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToDifferentPathHigherDepth
parameter_list|()
block|{
name|String
name|higherDepthPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
literal|"to"
argument_list|,
literal|"higher"
argument_list|,
literal|"depth"
argument_list|)
decl_stmt|;
name|PermissionEntry
name|higherDepthEntry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|higherDepthPath
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|higherDepthEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToDifferentPathLowerDepth
parameter_list|()
block|{
name|String
name|lowerDepthPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|PermissionEntry
name|lowerDepthEntry
init|=
operator|new
name|PermissionEntry
argument_list|(
name|lowerDepthPath
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|entry
operator|.
name|compareTo
argument_list|(
name|lowerDepthEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|entry
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|equals
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|equals
argument_list|(
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|privilegeBits
argument_list|)
operator|.
name|unmodifiable
argument_list|()
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEqual
parameter_list|()
block|{
comment|// path different
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
literal|"/"
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
literal|"/path2"
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
comment|// isAllow different
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
operator|!
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
comment|// index different
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
literal|2
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
comment|// privbits different
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|entry
operator|.
name|restriction
argument_list|)
argument_list|)
expr_stmt|;
comment|// restrictions different
name|assertNotEquals
argument_list|(
name|entry
argument_list|,
operator|new
name|PermissionEntry
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|isAllow
argument_list|,
name|index
argument_list|,
name|entry
operator|.
name|privilegeBits
argument_list|,
name|mock
argument_list|(
name|RestrictionPattern
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entry
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

