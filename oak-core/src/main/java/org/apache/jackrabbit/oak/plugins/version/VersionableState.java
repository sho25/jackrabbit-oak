begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENMIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENNODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FROZENNODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|Utils
operator|.
name|uuidFromNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_comment
comment|/**  *<code>VersionableState</code> provides methods to create a versionable state  * for a version based on a versionable node.  */
end_comment

begin_class
class|class
name|VersionableState
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JCR_CHILDVERSIONHISTORY
init|=
literal|"jcr:childVersionHistory"
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|frozenNode
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|versionable
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|private
name|VersionableState
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|version
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|,
annotation|@
name|Nonnull
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
name|this
operator|.
name|frozenNode
operator|=
name|checkNotNull
argument_list|(
name|version
argument_list|)
operator|.
name|child
argument_list|(
name|JCR_FROZENNODE
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionable
operator|=
name|checkNotNull
argument_list|(
name|versionable
argument_list|)
expr_stmt|;
name|this
operator|.
name|ntMgr
operator|=
name|checkNotNull
argument_list|(
name|ntMgr
argument_list|)
expr_stmt|;
comment|// initialize jcr:frozenNode
name|frozenNode
operator|.
name|setProperty
argument_list|(
name|JCR_UUID
argument_list|,
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|frozenNode
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FROZENNODE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixinTypes
decl_stmt|;
if|if
condition|(
name|versionable
operator|.
name|hasProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
condition|)
block|{
name|mixinTypes
operator|=
name|versionable
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mixinTypes
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|frozenNode
operator|.
name|setProperty
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|,
name|mixinTypes
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|frozenNode
operator|.
name|setProperty
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|,
name|versionable
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|frozenNode
operator|.
name|setProperty
argument_list|(
name|JCR_FROZENUUID
argument_list|,
name|uuidFromNode
argument_list|(
name|versionable
argument_list|)
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a frozen node under the version and initializes it with the basic      * frozen properties (jcr:frozenPrimaryType, jcr:frozenMixinTypes and      * jcr:frozenUuid) from the given versionable node.      *      * @param version the parent node of the frozen node.      * @param versionable the versionable node.      * @param ntMgr the node type manager.      * @return a versionable state      */
annotation|@
name|Nonnull
specifier|static
name|VersionableState
name|fromVersion
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|version
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|versionable
parameter_list|,
annotation|@
name|Nonnull
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
return|return
operator|new
name|VersionableState
argument_list|(
name|version
argument_list|,
name|versionable
argument_list|,
name|ntMgr
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|NodeBuilder
name|getFrozenNode
parameter_list|()
block|{
return|return
name|frozenNode
return|;
block|}
comment|/**      * Creates the versionable state under the version.      *      * @return the frozen node.      * @throws CommitFailedException if the operation fails. E.g. because the      *              versionable node has a property with OPV ABORT.      */
name|NodeBuilder
name|create
parameter_list|()
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|createState
argument_list|(
name|versionable
argument_list|,
name|frozenNode
argument_list|)
expr_stmt|;
return|return
name|frozenNode
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
literal|0
argument_list|,
literal|"Unexpected RepositoryException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|createState
parameter_list|(
name|NodeBuilder
name|src
parameter_list|,
name|NodeBuilder
name|dest
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|RepositoryException
block|{
name|copyProperties
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add the frozen children and histories
for|for
control|(
name|String
name|name
range|:
name|src
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|child
init|=
name|src
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|opv
init|=
name|getOPV
argument_list|(
name|src
argument_list|,
name|child
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|ABORT
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
literal|1
argument_list|,
literal|"Checkin aborted due to OPV abort in "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|VERSION
condition|)
block|{
if|if
condition|(
name|ntMgr
operator|.
name|isNodeType
argument_list|(
operator|new
name|ReadOnlyTree
argument_list|(
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|,
name|MIX_VERSIONABLE
argument_list|)
condition|)
block|{
comment|// create frozen versionable child
name|versionedChild
argument_list|(
name|child
argument_list|,
name|dest
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// else copy
name|copy
argument_list|(
name|child
argument_list|,
name|dest
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|COPY
condition|)
block|{
name|copy
argument_list|(
name|child
argument_list|,
name|dest
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|versionedChild
parameter_list|(
name|NodeBuilder
name|src
parameter_list|,
name|NodeBuilder
name|dest
parameter_list|)
block|{
name|String
name|ref
init|=
name|src
operator|.
name|getProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
name|dest
operator|.
name|setProperty
argument_list|(
name|JCR_CHILDVERSIONHISTORY
argument_list|,
name|ref
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|NodeBuilder
name|src
parameter_list|,
name|NodeBuilder
name|dest
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|copyProperties
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|src
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|NodeBuilder
name|child
init|=
name|src
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|child
argument_list|,
name|dest
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyProperties
parameter_list|(
name|NodeBuilder
name|src
parameter_list|,
name|NodeBuilder
name|dest
parameter_list|,
name|boolean
name|forceCopy
parameter_list|,
name|boolean
name|ignoreTypeAndUUID
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
comment|// add the properties
for|for
control|(
name|PropertyState
name|prop
range|:
name|src
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|int
name|opv
decl_stmt|;
if|if
condition|(
name|forceCopy
condition|)
block|{
name|opv
operator|=
name|OnParentVersionAction
operator|.
name|COPY
expr_stmt|;
block|}
else|else
block|{
name|opv
operator|=
name|getOPV
argument_list|(
name|src
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
name|String
name|propName
init|=
name|prop
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|ABORT
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|VERSION
argument_list|,
literal|1
argument_list|,
literal|"Checkin aborted due to OPV abort in "
operator|+
name|propName
argument_list|)
throw|;
block|}
if|if
condition|(
name|ignoreTypeAndUUID
operator|&&
operator|(
name|propName
operator|.
name|equals
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
operator|||
name|propName
operator|.
name|equals
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
operator|||
name|propName
operator|.
name|equals
argument_list|(
name|JCR_UUID
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|VERSION
operator|||
name|opv
operator|==
name|OnParentVersionAction
operator|.
name|COPY
condition|)
block|{
name|dest
operator|.
name|setProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|getOPV
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|NodeBuilder
name|child
parameter_list|,
name|String
name|childName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ReadOnlyTree
name|parentTree
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyTree
name|childTree
init|=
operator|new
name|ReadOnlyTree
argument_list|(
name|parentTree
argument_list|,
name|childName
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ntMgr
operator|.
name|getDefinition
argument_list|(
name|parentTree
argument_list|,
name|childTree
argument_list|)
operator|.
name|getOnParentVersion
argument_list|()
return|;
block|}
specifier|private
name|int
name|getOPV
parameter_list|(
name|NodeBuilder
name|node
parameter_list|,
name|PropertyState
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|ntMgr
operator|.
name|getDefinition
argument_list|(
operator|new
name|ReadOnlyTree
argument_list|(
name|node
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|,
name|property
argument_list|,
literal|false
argument_list|)
operator|.
name|getOnParentVersion
argument_list|()
return|;
block|}
block|}
end_class

end_unit

