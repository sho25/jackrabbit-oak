begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalCause
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheLIRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|EmpiricalWeigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|CachingBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferencedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|cache
operator|.
name|NodeDocumentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|locks
operator|.
name|NodeDocumentLocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|CacheType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|EvictionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|PersistentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
operator|.
name|PersistentCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|RevisionsKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|LoggingGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
operator|.
name|ofInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStoreService
operator|.
name|DEFAULT_JOURNAL_GC_MAX_AGE_MILLIS
import|;
end_import

begin_comment
comment|/**  * A generic builder for a {@link DocumentNodeStore}. By default the builder  * will create an in-memory {@link DocumentNodeStore}. In most cases this is  * only useful for tests.  */
end_comment

begin_class
specifier|public
class|class
name|DocumentNodeStoreBuilder
parameter_list|<
name|T
extends|extends
name|DocumentNodeStoreBuilder
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentNodeStoreBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MEMORY_CACHE_SIZE
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NODE_CACHE_PERCENTAGE
init|=
literal|35
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PREV_DOC_CACHE_PERCENTAGE
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
init|=
literal|15
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DIFF_CACHE_PERCENTAGE
init|=
literal|30
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_SEGMENT_COUNT
init|=
literal|16
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
init|=
literal|16
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_UPDATE_LIMIT
init|=
literal|100000
decl_stmt|;
comment|/**      * The path where the persistent cache is stored.      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PERSISTENT_CACHE_URI
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.persCache"
argument_list|)
decl_stmt|;
comment|/**      * The threshold where special handling for many child node starts.      */
specifier|static
specifier|final
name|int
name|MANY_CHILDREN_THRESHOLD
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.manyChildren"
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|/**      * Whether to use the CacheLIRS (default) or the Guava cache implementation.      */
specifier|private
specifier|static
specifier|final
name|boolean
name|LIRS_CACHE
init|=
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.documentMK.guavaCache"
argument_list|)
decl_stmt|;
comment|/**      * Number of content updates that need to happen before the updates      * are automatically purged to the private branch.      */
specifier|static
specifier|final
name|int
name|UPDATE_LIMIT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"update.limit"
argument_list|,
name|DEFAULT_UPDATE_LIMIT
argument_list|)
decl_stmt|;
specifier|protected
name|Supplier
argument_list|<
name|DocumentStore
argument_list|>
name|documentStoreSupplier
init|=
name|ofInstance
argument_list|(
operator|new
name|MemoryDocumentStore
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|DiffCache
name|diffCache
decl_stmt|;
specifier|private
name|int
name|clusterId
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.clusterId"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|asyncDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|timing
decl_stmt|;
specifier|private
name|boolean
name|logging
decl_stmt|;
specifier|private
name|LeaseCheckMode
name|leaseCheck
init|=
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_CHECK_MODE
decl_stmt|;
comment|// OAK-2739 is enabled by default also for non-osgi
specifier|private
name|boolean
name|isReadOnlyMode
init|=
literal|false
decl_stmt|;
specifier|private
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|weigher
init|=
operator|new
name|EmpiricalWeigher
argument_list|()
decl_stmt|;
specifier|private
name|long
name|memoryCacheSize
init|=
name|DEFAULT_MEMORY_CACHE_SIZE
decl_stmt|;
specifier|private
name|int
name|nodeCachePercentage
init|=
name|DEFAULT_NODE_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|prevDocCachePercentage
init|=
name|DEFAULT_PREV_DOC_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|childrenCachePercentage
init|=
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|diffCachePercentage
init|=
name|DEFAULT_DIFF_CACHE_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|cacheSegmentCount
init|=
name|DEFAULT_CACHE_SEGMENT_COUNT
decl_stmt|;
specifier|private
name|int
name|cacheStackMoveDistance
init|=
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
decl_stmt|;
specifier|private
name|boolean
name|useSimpleRevision
decl_stmt|;
specifier|private
name|boolean
name|disableBranches
decl_stmt|;
specifier|private
name|boolean
name|prefetchExternalChanges
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
name|String
name|persistentCacheURI
init|=
name|DEFAULT_PERSISTENT_CACHE_URI
decl_stmt|;
specifier|private
name|PersistentCache
name|persistentCache
decl_stmt|;
specifier|private
name|String
name|journalCacheURI
decl_stmt|;
specifier|private
name|PersistentCache
name|journalCache
decl_stmt|;
specifier|private
name|LeaseFailureHandler
name|leaseFailureHandler
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statisticsProvider
init|=
name|StatisticsProvider
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|BlobStoreStats
name|blobStoreStats
decl_stmt|;
specifier|private
name|CacheStats
name|blobStoreCacheStats
decl_stmt|;
specifier|private
name|DocumentStoreStatsCollector
name|documentStoreStatsCollector
decl_stmt|;
specifier|private
name|DocumentNodeStoreStatsCollector
name|nodeStoreStatsCollector
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PersistentCacheStats
argument_list|>
name|persistentCacheStats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|bundlingDisabled
decl_stmt|;
specifier|private
name|JournalPropertyHandlerFactory
name|journalPropertyHandlerFactory
init|=
operator|new
name|JournalPropertyHandlerFactory
argument_list|()
decl_stmt|;
specifier|private
name|int
name|updateLimit
init|=
name|UPDATE_LIMIT
decl_stmt|;
specifier|private
name|int
name|commitValueCacheSize
init|=
literal|10000
decl_stmt|;
specifier|private
name|long
name|maxRevisionAgeMillis
init|=
name|DEFAULT_JOURNAL_GC_MAX_AGE_MILLIS
decl_stmt|;
specifier|private
name|GCMonitor
name|gcMonitor
init|=
operator|new
name|LoggingGCMonitor
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VersionGarbageCollector
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Predicate
argument_list|<
name|Path
argument_list|>
name|nodeCachePredicate
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
comment|/**      * @return a new {@link DocumentNodeStoreBuilder}.      */
specifier|public
specifier|static
name|DocumentNodeStoreBuilder
argument_list|<
name|?
argument_list|>
name|newDocumentNodeStoreBuilder
parameter_list|()
block|{
return|return
operator|new
name|DocumentNodeStoreBuilder
argument_list|()
return|;
block|}
specifier|public
name|DocumentNodeStore
name|build
parameter_list|()
block|{
return|return
operator|new
name|DocumentNodeStore
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
specifier|final
name|T
name|thisBuilder
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * Sets the persistent cache option.      *      * @return this      */
specifier|public
name|T
name|setPersistentCache
parameter_list|(
name|String
name|persistentCache
parameter_list|)
block|{
name|this
operator|.
name|persistentCacheURI
operator|=
name|persistentCache
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
comment|/**      * Sets the journal cache option.      *      * @return this      */
specifier|public
name|T
name|setJournalCache
parameter_list|(
name|String
name|journalCache
parameter_list|)
block|{
name|this
operator|.
name|journalCacheURI
operator|=
name|journalCache
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
comment|/**      * Use the timing document store wrapper.      *      * @param timing whether to use the timing wrapper.      * @return this      */
specifier|public
name|T
name|setTiming
parameter_list|(
name|boolean
name|timing
parameter_list|)
block|{
name|this
operator|.
name|timing
operator|=
name|timing
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getTiming
parameter_list|()
block|{
return|return
name|timing
return|;
block|}
specifier|public
name|T
name|setLogging
parameter_list|(
name|boolean
name|logging
parameter_list|)
block|{
name|this
operator|.
name|logging
operator|=
name|logging
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getLogging
parameter_list|()
block|{
return|return
name|logging
return|;
block|}
comment|/**      * If {@code true}, sets lease check mode to {@link LeaseCheckMode#LENIENT},      * otherwise sets the mode to {@link LeaseCheckMode#DISABLED}. This method      * is only kept for backward compatibility with the behaviour before      * OAK-7626. The new default lease check mode is {@link LeaseCheckMode#STRICT},      * but existing code may rely on the previous behaviour, when enabling the      * lease check corresponded with a {@link LeaseCheckMode#LENIENT} behaviour.      *      * @deprecated use {@link #setLeaseCheckMode(LeaseCheckMode)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|T
name|setLeaseCheck
parameter_list|(
name|boolean
name|leaseCheck
parameter_list|)
block|{
name|this
operator|.
name|leaseCheck
operator|=
name|leaseCheck
condition|?
name|LeaseCheckMode
operator|.
name|LENIENT
else|:
name|LeaseCheckMode
operator|.
name|DISABLED
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
comment|/**      * @deprecated This method does not distinguish between {@link      *         LeaseCheckMode#LENIENT} and {@link LeaseCheckMode#STRICT} and      *         returns {@code true} for both modes. Use {@link      *         #getLeaseCheckMode()} instead.      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|getLeaseCheck
parameter_list|()
block|{
return|return
name|leaseCheck
operator|!=
name|LeaseCheckMode
operator|.
name|DISABLED
return|;
block|}
specifier|public
name|T
name|setLeaseCheckMode
parameter_list|(
name|LeaseCheckMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|leaseCheck
operator|=
name|mode
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
name|LeaseCheckMode
name|getLeaseCheckMode
parameter_list|()
block|{
return|return
name|leaseCheck
return|;
block|}
specifier|public
name|T
name|setReadOnlyMode
parameter_list|()
block|{
name|this
operator|.
name|isReadOnlyMode
operator|=
literal|true
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getReadOnlyMode
parameter_list|()
block|{
return|return
name|isReadOnlyMode
return|;
block|}
specifier|public
name|T
name|setLeaseFailureHandler
parameter_list|(
name|LeaseFailureHandler
name|leaseFailureHandler
parameter_list|)
block|{
name|this
operator|.
name|leaseFailureHandler
operator|=
name|leaseFailureHandler
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|LeaseFailureHandler
name|getLeaseFailureHandler
parameter_list|()
block|{
return|return
name|leaseFailureHandler
return|;
block|}
comment|/**      * Set the document store to use. By default an in-memory store is used.      *      * @param documentStore the document store      * @return this      */
specifier|public
name|T
name|setDocumentStore
parameter_list|(
name|DocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|documentStoreSupplier
operator|=
name|ofInstance
argument_list|(
name|documentStore
argument_list|)
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|documentStoreSupplier
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|DiffCache
name|getDiffCache
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
if|if
condition|(
name|diffCache
operator|==
literal|null
condition|)
block|{
name|diffCache
operator|=
operator|new
name|TieredDiffCache
argument_list|(
name|this
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
return|return
name|diffCache
return|;
block|}
comment|/**      * Set the blob store to use. By default an in-memory store is used.      *      * @param blobStore the blob store      * @return this      */
specifier|public
name|T
name|setBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
name|blobStore
operator|=
operator|new
name|MemoryBlobStore
argument_list|()
expr_stmt|;
name|configureBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
return|return
name|blobStore
return|;
block|}
comment|/**      * Set the cluster id to use. By default, 0 is used, meaning the cluster      * id is automatically generated.      *      * @param clusterId the cluster id      * @return this      */
specifier|public
name|T
name|setClusterId
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|setCacheSegmentCount
parameter_list|(
name|int
name|cacheSegmentCount
parameter_list|)
block|{
name|this
operator|.
name|cacheSegmentCount
operator|=
name|cacheSegmentCount
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|setCacheStackMoveDistance
parameter_list|(
name|int
name|cacheSegmentCount
parameter_list|)
block|{
name|this
operator|.
name|cacheStackMoveDistance
operator|=
name|cacheSegmentCount
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
comment|/**      * Set the maximum delay to write the last revision to the root node. By      * default 1000 (meaning 1 second) is used.      *      * @param asyncDelay in milliseconds      * @return this      */
specifier|public
name|T
name|setAsyncDelay
parameter_list|(
name|int
name|asyncDelay
parameter_list|)
block|{
name|this
operator|.
name|asyncDelay
operator|=
name|asyncDelay
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|int
name|getAsyncDelay
parameter_list|()
block|{
return|return
name|asyncDelay
return|;
block|}
specifier|public
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|getWeigher
parameter_list|()
block|{
return|return
name|weigher
return|;
block|}
specifier|public
name|T
name|withWeigher
parameter_list|(
name|Weigher
argument_list|<
name|CacheValue
argument_list|,
name|CacheValue
argument_list|>
name|weigher
parameter_list|)
block|{
name|this
operator|.
name|weigher
operator|=
name|weigher
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|memoryCacheSize
parameter_list|(
name|long
name|memoryCacheSize
parameter_list|)
block|{
name|this
operator|.
name|memoryCacheSize
operator|=
name|memoryCacheSize
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|memoryCacheDistribution
parameter_list|(
name|int
name|nodeCachePercentage
parameter_list|,
name|int
name|prevDocCachePercentage
parameter_list|,
name|int
name|childrenCachePercentage
parameter_list|,
name|int
name|diffCachePercentage
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|nodeCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|prevDocCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|childrenCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|diffCachePercentage
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|nodeCachePercentage
operator|+
name|prevDocCachePercentage
operator|+
name|childrenCachePercentage
operator|+
name|diffCachePercentage
operator|<
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeCachePercentage
operator|=
name|nodeCachePercentage
expr_stmt|;
name|this
operator|.
name|prevDocCachePercentage
operator|=
name|prevDocCachePercentage
expr_stmt|;
name|this
operator|.
name|childrenCachePercentage
operator|=
name|childrenCachePercentage
expr_stmt|;
name|this
operator|.
name|diffCachePercentage
operator|=
name|diffCachePercentage
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|long
name|getNodeCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|nodeCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getPrevDocumentCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|prevDocCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getChildrenCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|childrenCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getDocumentCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|-
name|getNodeCacheSize
argument_list|()
operator|-
name|getPrevDocumentCacheSize
argument_list|()
operator|-
name|getChildrenCacheSize
argument_list|()
operator|-
name|getDiffCacheSize
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDiffCacheSize
parameter_list|()
block|{
return|return
name|memoryCacheSize
operator|*
name|diffCachePercentage
operator|/
literal|100
return|;
block|}
specifier|public
name|long
name|getMemoryDiffCacheSize
parameter_list|()
block|{
return|return
name|getDiffCacheSize
argument_list|()
operator|/
literal|2
return|;
block|}
specifier|public
name|long
name|getLocalDiffCacheSize
parameter_list|()
block|{
return|return
name|getDiffCacheSize
argument_list|()
operator|/
literal|2
return|;
block|}
specifier|public
name|T
name|setUseSimpleRevision
parameter_list|(
name|boolean
name|useSimpleRevision
parameter_list|)
block|{
name|this
operator|.
name|useSimpleRevision
operator|=
name|useSimpleRevision
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUseSimpleRevision
parameter_list|()
block|{
return|return
name|useSimpleRevision
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
return|;
block|}
return|return
name|executor
return|;
block|}
specifier|public
name|T
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|clock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|T
name|setStatisticsProvider
parameter_list|(
name|StatisticsProvider
name|statisticsProvider
parameter_list|)
block|{
name|this
operator|.
name|statisticsProvider
operator|=
name|statisticsProvider
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|StatisticsProvider
name|getStatisticsProvider
parameter_list|()
block|{
return|return
name|this
operator|.
name|statisticsProvider
return|;
block|}
specifier|public
name|DocumentStoreStatsCollector
name|getDocumentStoreStatsCollector
parameter_list|()
block|{
if|if
condition|(
name|documentStoreStatsCollector
operator|==
literal|null
condition|)
block|{
name|documentStoreStatsCollector
operator|=
operator|new
name|DocumentStoreStats
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|documentStoreStatsCollector
return|;
block|}
specifier|public
name|T
name|setDocumentStoreStatsCollector
parameter_list|(
name|DocumentStoreStatsCollector
name|documentStoreStatsCollector
parameter_list|)
block|{
name|this
operator|.
name|documentStoreStatsCollector
operator|=
name|documentStoreStatsCollector
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|DocumentNodeStoreStatsCollector
name|getNodeStoreStatsCollector
parameter_list|()
block|{
if|if
condition|(
name|nodeStoreStatsCollector
operator|==
literal|null
condition|)
block|{
name|nodeStoreStatsCollector
operator|=
operator|new
name|DocumentNodeStoreStats
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeStoreStatsCollector
return|;
block|}
specifier|public
name|T
name|setNodeStoreStatsCollector
parameter_list|(
name|DocumentNodeStoreStatsCollector
name|statsCollector
parameter_list|)
block|{
name|this
operator|.
name|nodeStoreStatsCollector
operator|=
name|statsCollector
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PersistentCacheStats
argument_list|>
name|getPersistenceCacheStats
parameter_list|()
block|{
return|return
name|persistentCacheStats
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|BlobStoreStats
name|getBlobStoreStats
parameter_list|()
block|{
return|return
name|blobStoreStats
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|CacheStats
name|getBlobStoreCacheStats
parameter_list|()
block|{
return|return
name|blobStoreCacheStats
return|;
block|}
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
specifier|public
name|T
name|disableBranches
parameter_list|()
block|{
name|disableBranches
operator|=
literal|true
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDisableBranches
parameter_list|()
block|{
return|return
name|disableBranches
return|;
block|}
specifier|public
name|T
name|setBundlingDisabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|bundlingDisabled
operator|=
name|enabled
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isBundlingDisabled
parameter_list|()
block|{
return|return
name|bundlingDisabled
return|;
block|}
specifier|public
name|T
name|setPrefetchExternalChanges
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|prefetchExternalChanges
operator|=
name|b
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isPrefetchExternalChanges
parameter_list|()
block|{
return|return
name|prefetchExternalChanges
return|;
block|}
specifier|public
name|T
name|setJournalPropertyHandlerFactory
parameter_list|(
name|JournalPropertyHandlerFactory
name|factory
parameter_list|)
block|{
name|journalPropertyHandlerFactory
operator|=
name|factory
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|JournalPropertyHandlerFactory
name|getJournalPropertyHandlerFactory
parameter_list|()
block|{
return|return
name|journalPropertyHandlerFactory
return|;
block|}
specifier|public
name|T
name|setUpdateLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|updateLimit
operator|=
name|limit
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|int
name|getUpdateLimit
parameter_list|()
block|{
return|return
name|updateLimit
return|;
block|}
specifier|public
name|T
name|setCommitValueCacheSize
parameter_list|(
name|int
name|cacheSize
parameter_list|)
block|{
name|this
operator|.
name|commitValueCacheSize
operator|=
name|cacheSize
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|int
name|getCommitValueCacheSize
parameter_list|()
block|{
return|return
name|commitValueCacheSize
return|;
block|}
specifier|public
name|T
name|setJournalGCMaxAge
parameter_list|(
name|long
name|maxRevisionAgeMillis
parameter_list|)
block|{
name|this
operator|.
name|maxRevisionAgeMillis
operator|=
name|maxRevisionAgeMillis
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
comment|/**      * The maximum age for journal entries in milliseconds. Older entries      * are candidates for GC.      *      * @return maximum age for journal entries in milliseconds.      */
specifier|public
name|long
name|getJournalGCMaxAge
parameter_list|()
block|{
return|return
name|maxRevisionAgeMillis
return|;
block|}
specifier|public
name|T
name|setGCMonitor
parameter_list|(
annotation|@
name|NotNull
name|GCMonitor
name|gcMonitor
parameter_list|)
block|{
name|this
operator|.
name|gcMonitor
operator|=
name|checkNotNull
argument_list|(
name|gcMonitor
argument_list|)
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|GCMonitor
name|getGCMonitor
parameter_list|()
block|{
return|return
name|gcMonitor
return|;
block|}
specifier|public
name|VersionGCSupport
name|createVersionGCSupport
parameter_list|()
block|{
return|return
operator|new
name|VersionGCSupport
argument_list|(
name|getDocumentStore
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|ReferencedBlob
argument_list|>
name|createReferencedBlobs
parameter_list|(
specifier|final
name|DocumentNodeStore
name|ns
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
operator|new
name|BlobReferenceIterator
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|MissingLastRevSeeker
name|createMissingLastRevSeeker
parameter_list|()
block|{
return|return
operator|new
name|MissingLastRevSeeker
argument_list|(
name|getDocumentStore
argument_list|()
argument_list|,
name|getClock
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|PathRev
argument_list|,
name|DocumentNodeState
argument_list|>
name|buildNodeCache
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|NODE
argument_list|,
name|getNodeCacheSize
argument_list|()
argument_list|,
name|store
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|NamePathRev
argument_list|,
name|DocumentNodeState
operator|.
name|Children
argument_list|>
name|buildChildrenCache
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|CHILDREN
argument_list|,
name|getChildrenCacheSize
argument_list|()
argument_list|,
name|store
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|StringValue
argument_list|>
name|buildMemoryDiffCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|DIFF
argument_list|,
name|getMemoryDiffCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|RevisionsKey
argument_list|,
name|LocalDiffCache
operator|.
name|Diff
argument_list|>
name|buildLocalDiffCache
parameter_list|()
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|LOCAL_DIFF
argument_list|,
name|getLocalDiffCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|buildDocumentCache
parameter_list|(
name|DocumentStore
name|docStore
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|DOCUMENT
argument_list|,
name|getDocumentCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
name|docStore
argument_list|)
return|;
block|}
specifier|public
name|Cache
argument_list|<
name|StringValue
argument_list|,
name|NodeDocument
argument_list|>
name|buildPrevDocumentsCache
parameter_list|(
name|DocumentStore
name|docStore
parameter_list|)
block|{
return|return
name|buildCache
argument_list|(
name|CacheType
operator|.
name|PREV_DOCUMENT
argument_list|,
name|getPrevDocumentCacheSize
argument_list|()
argument_list|,
literal|null
argument_list|,
name|docStore
argument_list|)
return|;
block|}
specifier|public
name|NodeDocumentCache
name|buildNodeDocumentCache
parameter_list|(
name|DocumentStore
name|docStore
parameter_list|,
name|NodeDocumentLocks
name|locks
parameter_list|)
block|{
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
argument_list|>
name|nodeDocumentsCache
init|=
name|buildDocumentCache
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|CacheStats
name|nodeDocumentsCacheStats
init|=
operator|new
name|CacheStats
argument_list|(
name|nodeDocumentsCache
argument_list|,
literal|"Document-Documents"
argument_list|,
name|getWeigher
argument_list|()
argument_list|,
name|getDocumentCacheSize
argument_list|()
argument_list|)
decl_stmt|;
name|Cache
argument_list|<
name|StringValue
argument_list|,
name|NodeDocument
argument_list|>
name|prevDocumentsCache
init|=
name|buildPrevDocumentsCache
argument_list|(
name|docStore
argument_list|)
decl_stmt|;
name|CacheStats
name|prevDocumentsCacheStats
init|=
operator|new
name|CacheStats
argument_list|(
name|prevDocumentsCache
argument_list|,
literal|"Document-PrevDocuments"
argument_list|,
name|getWeigher
argument_list|()
argument_list|,
name|getPrevDocumentCacheSize
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeDocumentCache
argument_list|(
name|nodeDocumentsCache
argument_list|,
name|nodeDocumentsCacheStats
argument_list|,
name|prevDocumentsCache
argument_list|,
name|prevDocumentsCacheStats
argument_list|,
name|locks
argument_list|)
return|;
block|}
comment|/**      * @deprecated Use {@link #setNodeCachePathPredicate(Predicate)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|T
name|setNodeCachePredicate
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|p
parameter_list|)
block|{
name|this
operator|.
name|nodeCachePredicate
operator|=
name|input
lambda|->
name|input
operator|!=
literal|null
operator|&&
name|p
operator|.
name|apply
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
comment|/**      * @deprecated Use {@link #getNodeCachePathPredicate()} instead.      */
annotation|@
name|Deprecated
specifier|public
name|Predicate
argument_list|<
name|String
argument_list|>
name|getNodeCachePredicate
parameter_list|()
block|{
return|return
name|input
lambda|->
name|input
operator|!=
literal|null
operator|&&
name|nodeCachePredicate
operator|.
name|apply
argument_list|(
name|Path
operator|.
name|fromString
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|T
name|setNodeCachePathPredicate
parameter_list|(
name|Predicate
argument_list|<
name|Path
argument_list|>
name|p
parameter_list|)
block|{
name|this
operator|.
name|nodeCachePredicate
operator|=
name|p
expr_stmt|;
return|return
name|thisBuilder
argument_list|()
return|;
block|}
specifier|public
name|Predicate
argument_list|<
name|Path
argument_list|>
name|getNodeCachePathPredicate
parameter_list|()
block|{
return|return
name|nodeCachePredicate
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildCache
parameter_list|(
name|CacheType
name|cacheType
parameter_list|,
name|long
name|maxWeight
parameter_list|,
name|DocumentNodeStore
name|docNodeStore
parameter_list|,
name|DocumentStore
name|docStore
parameter_list|)
block|{
name|Set
argument_list|<
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
name|buildCache
argument_list|(
name|cacheType
operator|.
name|name
argument_list|()
argument_list|,
name|maxWeight
argument_list|,
name|listeners
argument_list|)
decl_stmt|;
name|PersistentCache
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheType
operator|==
name|CacheType
operator|.
name|DIFF
operator|||
name|cacheType
operator|==
name|CacheType
operator|.
name|LOCAL_DIFF
condition|)
block|{
comment|// use separate journal cache if configured
name|p
operator|=
name|getJournalCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// otherwise fall back to single persistent cache
name|p
operator|=
name|getPersistentCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|cache
operator|=
name|p
operator|.
name|wrap
argument_list|(
name|docNodeStore
argument_list|,
name|docStore
argument_list|,
name|cache
argument_list|,
name|cacheType
argument_list|,
name|statisticsProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|EvictionListener
condition|)
block|{
name|listeners
operator|.
name|add
argument_list|(
operator|(
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|cache
argument_list|)
expr_stmt|;
block|}
name|PersistentCacheStats
name|stats
init|=
name|PersistentCache
operator|.
name|getPersistentCacheStats
argument_list|(
name|cache
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|persistentCacheStats
operator|.
name|put
argument_list|(
name|cacheType
operator|.
name|name
argument_list|()
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cache
return|;
block|}
specifier|public
name|PersistentCache
name|getPersistentCache
parameter_list|()
block|{
if|if
condition|(
name|persistentCacheURI
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|persistentCache
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|persistentCache
operator|=
operator|new
name|PersistentCache
argument_list|(
name|persistentCacheURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Persistent cache not available; please disable the configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|persistentCache
return|;
block|}
name|PersistentCache
name|getJournalCache
parameter_list|()
block|{
if|if
condition|(
name|journalCacheURI
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|journalCache
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|journalCache
operator|=
operator|new
name|PersistentCache
argument_list|(
name|journalCacheURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Journal cache not available; please disable the configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|journalCache
return|;
block|}
specifier|private
parameter_list|<
name|K
extends|extends
name|CacheValue
parameter_list|,
name|V
extends|extends
name|CacheValue
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildCache
parameter_list|(
name|String
name|module
parameter_list|,
name|long
name|maxWeight
parameter_list|,
specifier|final
name|Set
argument_list|<
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|listeners
parameter_list|)
block|{
comment|// do not use LIRS cache when maxWeight is zero (OAK-6953)
if|if
condition|(
name|LIRS_CACHE
operator|&&
name|maxWeight
operator|>
literal|0
condition|)
block|{
return|return
name|CacheLIRS
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|newBuilder
argument_list|()
operator|.
name|module
argument_list|(
name|module
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|weigher
operator|.
name|weigh
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|averageWeight
argument_list|(
literal|2000
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|segmentCount
argument_list|(
name|cacheSegmentCount
argument_list|)
operator|.
name|stackMoveDistance
argument_list|(
name|cacheStackMoveDistance
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|evictionCallback
argument_list|(
operator|new
name|CacheLIRS
operator|.
name|EvictionCallback
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evicted
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|RemovalCause
name|cause
parameter_list|)
block|{
for|for
control|(
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|l
range|:
name|listeners
control|)
block|{
name|l
operator|.
name|evicted
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|cacheSegmentCount
argument_list|)
operator|.
name|weigher
argument_list|(
name|weigher
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|maxWeight
argument_list|)
operator|.
name|recordStats
argument_list|()
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|notification
parameter_list|)
block|{
for|for
control|(
name|EvictionListener
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|l
range|:
name|listeners
control|)
block|{
name|l
operator|.
name|evicted
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|,
name|notification
operator|.
name|getValue
argument_list|()
argument_list|,
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setGCBlobStore
parameter_list|(
name|GarbageCollectableBlobStore
name|s
parameter_list|)
block|{
name|configureBlobStore
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|s
expr_stmt|;
block|}
comment|/**      * BlobStore which are created by builder might get wrapped.      * So here we perform any configuration and also access any      * service exposed by the store      *      * @param blobStore store to config      */
specifier|private
name|void
name|configureBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
if|if
condition|(
name|blobStore
operator|instanceof
name|AbstractBlobStore
condition|)
block|{
name|this
operator|.
name|blobStoreStats
operator|=
operator|new
name|BlobStoreStats
argument_list|(
name|statisticsProvider
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|setStatsCollector
argument_list|(
name|blobStoreStats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobStore
operator|instanceof
name|CachingBlobStore
condition|)
block|{
name|blobStoreCacheStats
operator|=
operator|(
operator|(
name|CachingBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|getCacheStats
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

