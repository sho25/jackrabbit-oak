begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NoSuchNodeTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|NodeTypeIteratorAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_comment
comment|/**  * Adapter class for turning an in-content node type definition  * node ("nt:nodeTYpe") to a {@link NodeType} instance.  */
end_comment

begin_class
class|class
name|NodeTypeImpl
extends|extends
name|TypeNode
implements|implements
name|NodeType
block|{
specifier|private
specifier|final
name|NodeTypeManager
name|manager
decl_stmt|;
specifier|public
name|NodeTypeImpl
parameter_list|(
name|NodeTypeManager
name|manager
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
comment|/** CND:<pre>- jcr:nodeTypeName (NAME) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|Property
operator|.
name|JCR_NODE_TYPE_NAME
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:supertypes (NAME) protected multiple</pre> */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDeclaredSupertypeNames
parameter_list|()
block|{
return|return
name|getStrings
argument_list|(
name|Property
operator|.
name|JCR_SUPERTYPES
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:isAbstract (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_IS_ABSTRACT
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:isMixin (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isMixin
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_IS_MIXIN
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:hasOrderableChildNodes (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|hasOrderableChildNodes
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
name|Property
operator|.
name|JCR_HAS_ORDERABLE_CHILD_NODES
argument_list|)
return|;
block|}
comment|/** CND:<pre>- jcr:isQueryable (BOOLEAN) protected mandatory</pre> */
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryable
parameter_list|()
block|{
return|return
name|getBoolean
argument_list|(
literal|"jcr:isQueryable"
argument_list|)
return|;
comment|// TODO: constant
block|}
comment|/** CND:<pre>- jcr:primaryItemName (NAME) protected</pre> */
annotation|@
name|Override
annotation|@
name|CheckForNull
specifier|public
name|String
name|getPrimaryItemName
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|Property
operator|.
name|JCR_PRIMARY_ITEM_NAME
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** CND:<pre>+ jcr:propertyDefinition (nt:propertyDefinition) = nt:propertyDefinition protected sns</pre> */
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getDeclaredPropertyDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|getNodes
argument_list|(
name|Node
operator|.
name|JCR_PROPERTY_DEFINITION
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|PropertyDefinitionImpl
argument_list|(
name|this
argument_list|,
name|iterator
operator|.
name|nextNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDefinition
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getDeclaredChildNodeDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeIterator
name|iterator
init|=
name|getNodes
argument_list|(
name|Node
operator|.
name|JCR_CHILD_NODE_DEFINITION
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|NodeDefinitionImpl
argument_list|(
name|manager
argument_list|,
name|this
argument_list|,
name|iterator
operator|.
name|nextNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|NodeDefinition
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getSupertypes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeType
argument_list|>
name|types
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|String
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|NodeType
name|type
init|=
name|getType
argument_list|(
name|manager
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|types
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|NodeType
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getDeclaredSupertypes
parameter_list|()
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|getDeclaredSupertypeNames
argument_list|()
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|getType
argument_list|(
name|manager
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|NodeType
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getSubtypes
parameter_list|()
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|iterator
init|=
name|manager
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
name|iterator
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|type
operator|.
name|isNodeType
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
name|illegalState
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeTypeIterator
name|getDeclaredSubtypes
parameter_list|()
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|iterator
init|=
name|manager
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|type
init|=
name|iterator
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
name|illegalState
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|NodeTypeIteratorAdapter
argument_list|(
name|types
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNodeType
parameter_list|(
name|String
name|nodeTypeName
parameter_list|)
block|{
if|if
condition|(
name|nodeTypeName
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|NodeType
name|type
range|:
name|getDeclaredSupertypes
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isNodeType
argument_list|(
name|nodeTypeName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
index|[]
name|getPropertyDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|definitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|getDeclaredPropertyDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeDefinition
index|[]
name|getChildNodeDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|NodeDefinition
argument_list|>
name|definitions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|type
range|:
name|getSupertypes
argument_list|()
control|)
block|{
name|definitions
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|type
operator|.
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|definitions
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|getDeclaredChildNodeDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|toArray
argument_list|(
operator|new
name|NodeDefinition
index|[
name|definitions
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
for|for
control|(
name|PropertyDefinition
name|definition
range|:
name|getPropertyDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|definition
operator|.
name|isProtected
argument_list|()
operator|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|definition
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
comment|// TODO: Check value type, constraints, etc.
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
block|{
for|for
control|(
name|PropertyDefinition
name|definition
range|:
name|getPropertyDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|definition
operator|.
name|isProtected
argument_list|()
operator|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
comment|// TODO: Check value type, constraints, etc.
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|)
block|{
for|for
control|(
name|NodeDefinition
name|definition
range|:
name|getChildNodeDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|childNodeName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|definition
operator|.
name|isProtected
argument_list|()
operator|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
name|String
name|childNodeName
parameter_list|,
name|String
name|nodeTypeName
parameter_list|)
block|{
try|try
block|{
name|NodeType
name|type
init|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|nodeTypeName
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeDefinition
name|definition
range|:
name|getChildNodeDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|childNodeName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|definition
operator|.
name|isProtected
argument_list|()
operator|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|required
range|:
name|definition
operator|.
name|getRequiredPrimaryTypeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isNodeType
argument_list|(
name|required
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchNodeTypeException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
name|illegalState
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveItem
parameter_list|(
name|String
name|itemName
parameter_list|)
block|{
return|return
name|canRemoveNode
argument_list|(
name|itemName
argument_list|)
operator|||
name|canRemoveProperty
argument_list|(
name|itemName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
for|for
control|(
name|PropertyDefinition
name|definition
range|:
name|getPropertyDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isMandatory
argument_list|()
operator|||
name|definition
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRemoveProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
for|for
control|(
name|PropertyDefinition
name|definition
range|:
name|getPropertyDefinitions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|isMandatory
argument_list|()
operator|||
name|definition
operator|.
name|isProtected
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

