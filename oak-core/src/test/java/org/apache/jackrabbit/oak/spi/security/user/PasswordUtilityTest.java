begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|PasswordUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PasswordUtilityTest
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|PLAIN_PWDS
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"pw"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"PassWord123"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"{invalidAlgo}"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"{invalidAlgo}Password"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"{SHA-256}"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"pw{SHA-256}"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|"p{SHA-256}w"
argument_list|)
expr_stmt|;
name|PLAIN_PWDS
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|HASHED_PWDS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|String
name|pw
range|:
name|PLAIN_PWDS
control|)
block|{
try|try
block|{
name|HASHED_PWDS
operator|.
name|put
argument_list|(
name|pw
argument_list|,
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// should not get here
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildPasswordHash
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|pw
range|:
name|PLAIN_PWDS
control|)
block|{
name|String
name|pwHash
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pw
operator|.
name|equals
argument_list|(
name|pwHash
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
index|[]
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1000
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|10
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|8
block|,
literal|50
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|10
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|Integer
index|[]
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
index|[]
name|params
range|:
name|l
control|)
block|{
for|for
control|(
name|String
name|pw
range|:
name|PLAIN_PWDS
control|)
block|{
name|int
name|saltsize
init|=
name|params
index|[
literal|0
index|]
decl_stmt|;
name|int
name|iterations
init|=
name|params
index|[
literal|1
index|]
decl_stmt|;
name|String
name|pwHash
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|,
name|PasswordUtility
operator|.
name|DEFAULT_ALGORITHM
argument_list|,
name|saltsize
argument_list|,
name|iterations
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pw
operator|.
name|equals
argument_list|(
name|pwHash
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildPasswordHashInvalidAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalidAlgorithms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalidAlgorithms
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalidAlgorithms
operator|.
name|add
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|invalidAlgorithms
operator|.
name|add
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|invalid
range|:
name|invalidAlgorithms
control|)
block|{
try|try
block|{
name|String
name|pwHash
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
literal|"pw"
argument_list|,
name|invalid
argument_list|,
name|PasswordUtility
operator|.
name|DEFAULT_SALT_SIZE
argument_list|,
name|PasswordUtility
operator|.
name|DEFAULT_ITERATIONS
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Invalid algorithm "
operator|+
name|invalid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPlainTextPassword
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|pw
range|:
name|PLAIN_PWDS
control|)
block|{
name|assertTrue
argument_list|(
name|pw
operator|+
literal|" should be plain text."
argument_list|,
name|PasswordUtility
operator|.
name|isPlainTextPassword
argument_list|(
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPlainTextForNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|PasswordUtility
operator|.
name|isPlainTextPassword
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPlainTextForPwHash
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|pwHash
range|:
name|HASHED_PWDS
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|pwHash
operator|+
literal|" should not be plain text."
argument_list|,
name|PasswordUtility
operator|.
name|isPlainTextPassword
argument_list|(
name|pwHash
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsSame
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|pw
range|:
name|HASHED_PWDS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|pwHash
init|=
name|HASHED_PWDS
operator|.
name|get
argument_list|(
name|pw
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not the same "
operator|+
name|pw
operator|+
literal|", "
operator|+
name|pwHash
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|pw
init|=
literal|"password"
decl_stmt|;
name|String
name|pwHash
init|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|,
literal|"SHA-1"
argument_list|,
literal|4
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not the same '"
operator|+
name|pw
operator|+
literal|"', "
operator|+
name|pwHash
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
name|pwHash
operator|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|,
literal|"md5"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not the same '"
operator|+
name|pw
operator|+
literal|"', "
operator|+
name|pwHash
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
name|pwHash
operator|=
name|PasswordUtility
operator|.
name|buildPasswordHash
argument_list|(
name|pw
argument_list|,
literal|"md5"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not the same '"
operator|+
name|pw
operator|+
literal|"', "
operator|+
name|pwHash
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotSame
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|pw
range|:
name|HASHED_PWDS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|pwHash
init|=
name|HASHED_PWDS
operator|.
name|get
argument_list|(
name|pw
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pw
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pw
argument_list|,
name|pw
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pwHash
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|pwHash
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
name|previous
argument_list|,
name|PasswordUtility
operator|.
name|isSame
argument_list|(
name|pwHash
argument_list|,
name|previous
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|pw
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

