begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
operator|.
name|repeat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|LONGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|DefaultSegmentWriterBuilder
operator|.
name|defaultSegmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MEDIUM_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
operator|.
name|SMALL_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|BlobType
operator|.
name|EXTERNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|BlobType
operator|.
name|LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|BlobType
operator|.
name|MEDIUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|BlobType
operator|.
name|SMALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|TestUtils
operator|.
name|newRecordId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|BlobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|ListInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|MapInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentParser
operator|.
name|ValueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SegmentParserTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobStore
name|shortIdBlobStore
init|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shortIdBlobStore
operator|.
name|writeBlob
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"shortId"
argument_list|)
expr_stmt|;
name|BlobStore
name|longIdBlobStore
init|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|longIdBlobStore
operator|.
name|writeBlob
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Strings
operator|.
name|repeat
argument_list|(
literal|"shortId"
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newArrayList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"No BlobStore"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|shortIdBlobStore
block|,
literal|"Short Id BlobStore"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|longIdBlobStore
block|,
literal|"Long Id BlobStore"
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|public
name|SegmentParserTest
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
specifier|private
name|MemoryStore
name|store
decl_stmt|;
specifier|private
name|DefaultSegmentWriter
name|writer
decl_stmt|;
specifier|private
specifier|static
class|class
name|TestParser
extends|extends
name|SegmentParser
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|TestParser
parameter_list|(
name|SegmentReader
name|reader
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|private
name|void
name|throwUOE
parameter_list|(
name|String
name|method
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|name
operator|+
literal|" must not call "
operator|+
name|method
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onNode"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onTemplate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onMap"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapDiff
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onMapDiff"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onMapLeaf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapBranch
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onMapBranch"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onProperty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onBlob"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onString"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onList"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onListBucket
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|throwUOE
argument_list|(
literal|"onListBucket"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|=
operator|new
name|MemoryStore
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
block|}
expr_stmt|;
name|writer
operator|=
name|defaultSegmentWriterBuilder
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyNode
parameter_list|()
throws|throws
name|IOException
block|{
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|info
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"emptyNode"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|info
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info
operator|.
name|nodeCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info
operator|.
name|propertyCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|nodeId
operator|.
name|toString10
argument_list|()
argument_list|,
name|info
operator|.
name|stableId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleChildNode
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|info
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"singleChildNode"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|info
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|nodeCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info
operator|.
name|propertyCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|nodeId
operator|.
name|toString10
argument_list|()
argument_list|,
name|info
operator|.
name|stableId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|node
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"three"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|info
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"node"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|info
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|nodeCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|propertyCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|nodeId
operator|.
name|toString10
argument_list|()
argument_list|,
name|info
operator|.
name|stableId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|template
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"type"
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"jcr:mixinTypes"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"template"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{
name|TemplateInfo
name|info
init|=
name|parseTemplate
argument_list|(
name|templateId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|templateId
argument_list|,
name|info
operator|.
name|templateId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|hasPrimaryType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|hasMixinType
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|zeroChildNodes
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|manyChildNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|mixinCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|propertyCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|empty
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|MapRecord
name|map
init|=
operator|new
name|MapRecord
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
operator|.
name|writeMap
argument_list|(
literal|null
argument_list|,
name|empty
argument_list|)
argument_list|)
decl_stmt|;
name|MapInfo
name|mapInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"emptyMap"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{ }
block|}
operator|.
name|parseMap
argument_list|(
literal|null
argument_list|,
name|map
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonEmptyMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|MapRecord
name|base
init|=
operator|new
name|MapRecord
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
operator|.
name|writeMap
argument_list|(
literal|null
argument_list|,
name|createMap
argument_list|(
literal|33
argument_list|,
name|rnd
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|MapRecord
name|map
init|=
operator|new
name|MapRecord
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
operator|.
name|writeMap
argument_list|(
name|base
argument_list|,
name|createMap
argument_list|(
literal|1
argument_list|,
name|rnd
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|MapInfo
name|mapInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"nonEmptyMap"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onMapDiff
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|MapInfo
name|mapInfo
init|=
name|parseMapDiff
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapId
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|MapInfo
name|mapInfo
init|=
name|parseMap
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapId
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapBranch
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|MapInfo
name|mapInfo
init|=
name|parseMapBranch
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapId
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|MapInfo
name|mapInfo
init|=
name|parseMapLeaf
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapId
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{ }
block|}
operator|.
name|parseMap
argument_list|(
literal|null
argument_list|,
name|map
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|mapInfo
operator|.
name|mapId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|createMap
parameter_list|(
name|int
name|size
parameter_list|,
name|Random
name|rnd
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"k"
operator|+
name|k
argument_list|,
name|writer
operator|.
name|writeString
argument_list|(
literal|"string"
operator|+
name|rnd
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleValueProperty
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"singleValueProperty"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|PropertyInfo
name|propertyInfo
init|=
name|parseProperty
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|propertyId
argument_list|,
name|propertyInfo
operator|.
name|propertyId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|propertyInfo
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiValueProperty
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"p"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|)
argument_list|,
name|LONGS
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"multiValueProperty"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|PropertyInfo
name|propertyInfo
init|=
name|parseProperty
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|propertyId
argument_list|,
name|propertyInfo
operator|.
name|propertyId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|propertyInfo
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseNode
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|smallBlob
parameter_list|()
throws|throws
name|IOException
block|{
name|SegmentBlob
name|blob
init|=
operator|new
name|SegmentBlob
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeBlob
argument_list|(
name|createRandomBlob
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ValueInfo
name|valueInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"smallBlob"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|BlobInfo
name|blobInfo
init|=
name|parseBlob
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SMALL
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|parseValue
argument_list|(
literal|null
argument_list|,
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|BINARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|valueId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BINARY
argument_list|,
name|valueInfo
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mediumBlob
parameter_list|()
throws|throws
name|IOException
block|{
name|SegmentBlob
name|blob
init|=
operator|new
name|SegmentBlob
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeBlob
argument_list|(
name|createRandomBlob
argument_list|(
name|SMALL_LIMIT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ValueInfo
name|valueInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"mediumBlob"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|BlobInfo
name|blobInfo
init|=
name|parseBlob
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MEDIUM
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|parseValue
argument_list|(
literal|null
argument_list|,
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|BINARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|valueId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BINARY
argument_list|,
name|valueInfo
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longBlob
parameter_list|()
throws|throws
name|IOException
block|{
name|SegmentBlob
name|blob
init|=
operator|new
name|SegmentBlob
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|writer
operator|.
name|writeBlob
argument_list|(
name|createRandomBlob
argument_list|(
name|MEDIUM_LIMIT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ValueInfo
name|valueInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"longBlob"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|BlobInfo
name|blobInfo
init|=
name|parseBlob
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blobStore
operator|==
literal|null
condition|?
name|LONG
else|:
name|EXTERNAL
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseValue
argument_list|(
literal|null
argument_list|,
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|BINARY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blob
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|valueId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BINARY
argument_list|,
name|valueInfo
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Blob
name|createRandomBlob
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayBasedBlob
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shortString
parameter_list|()
throws|throws
name|IOException
block|{
name|RecordId
name|stringId
init|=
name|writer
operator|.
name|writeString
argument_list|(
literal|"short"
argument_list|)
decl_stmt|;
name|BlobInfo
name|blobInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"shortString"
argument_list|)
operator|.
name|parseString
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SMALL
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mediumString
parameter_list|()
throws|throws
name|IOException
block|{
name|RecordId
name|stringId
init|=
name|writer
operator|.
name|writeString
argument_list|(
name|repeat
argument_list|(
literal|"s"
argument_list|,
name|SMALL_LIMIT
argument_list|)
argument_list|)
decl_stmt|;
name|BlobInfo
name|blobInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"mediumString"
argument_list|)
operator|.
name|parseString
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MEDIUM
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longString
parameter_list|()
throws|throws
name|IOException
block|{
name|RecordId
name|stringId
init|=
name|writer
operator|.
name|writeString
argument_list|(
name|repeat
argument_list|(
literal|"s"
argument_list|,
name|MEDIUM_LIMIT
argument_list|)
argument_list|)
decl_stmt|;
name|BlobInfo
name|blobInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"longString"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{ }
block|}
operator|.
name|parseString
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stringId
argument_list|,
name|blobInfo
operator|.
name|blobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LONG
argument_list|,
name|blobInfo
operator|.
name|blobType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyList
parameter_list|()
block|{
name|RecordId
name|listId
init|=
name|newRecordId
argument_list|(
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
decl_stmt|;
name|ListInfo
name|listInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"emptyList"
argument_list|)
operator|.
name|parseList
argument_list|(
literal|null
argument_list|,
name|listId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|listId
argument_list|,
name|listInfo
operator|.
name|listId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listInfo
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonEmptyList
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|100000
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
condition|;
name|k
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|writer
operator|.
name|writeString
argument_list|(
literal|"string "
operator|+
name|rnd
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|listId
init|=
name|writer
operator|.
name|writeList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|ListInfo
name|listInfo
init|=
operator|new
name|TestParser
argument_list|(
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
literal|"nonEmptyList"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onListBucket
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|parseListBucket
argument_list|(
name|listId
argument_list|,
name|index
argument_list|,
name|count
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|parseList
argument_list|(
literal|null
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|listId
argument_list|,
name|listInfo
operator|.
name|listId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|listInfo
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

