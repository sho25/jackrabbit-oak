begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|parseInt
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|parseLong
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|iotrace
operator|.
name|IOTracer
operator|.
name|newIOTracer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|monitor
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|IOTracerTest
extends|extends
name|IOMonitorAdapter
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
try|try
init|(
name|FileStore
name|fileStore
init|=
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|SegmentNodeState
name|currentHead
init|=
name|fileStore
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeBuilder
name|root
init|=
name|currentHead
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setChildNode
argument_list|(
literal|"0a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|setChildNode
argument_list|(
literal|"0b"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|setChildNode
argument_list|(
literal|"0c"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0d"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0e"
argument_list|)
expr_stmt|;
name|builder
operator|=
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0f"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0g"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0h"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"0i"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"0j"
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|newHead
init|=
name|root
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|fileStore
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|currentHead
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|newHead
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|FileStore
name|createFileStore
parameter_list|(
name|IOMonitor
name|ioMonitor
parameter_list|)
block|{
try|try
block|{
return|return
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
literal|0
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
name|ioMonitor
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectTrace
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
try|try
init|(
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|Function
argument_list|<
name|IOMonitor
argument_list|,
name|FileStore
argument_list|>
name|factory
init|=
name|this
operator|::
name|createFileStore
decl_stmt|;
name|IOTracer
name|ioTracer
init|=
name|newIOTracer
argument_list|(
name|factory
argument_list|,
name|out
argument_list|,
name|BreadthFirstTrace
operator|.
name|CONTEXT_SPEC
argument_list|)
decl_stmt|;
name|ioTracer
operator|.
name|collectTrace
argument_list|(
operator|new
name|BreadthFirstTrace
argument_list|(
literal|2
argument_list|,
literal|"/"
argument_list|,
name|ioTracer
operator|::
name|setContext
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|header
init|=
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|entries
init|=
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|map
argument_list|(
name|line
lambda|->
name|line
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|header
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timestamp,file,segmentId,length,elapsed,depth,count"
argument_list|,
name|header
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The timestamps of all entries must be in the past"
argument_list|,
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|row
lambda|->
name|parseLong
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|)
argument_list|)
comment|// ts
operator|.
name|allMatch
argument_list|(
name|ts
lambda|->
name|ts
operator|<=
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected depths 0, 1 and 2"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|row
lambda|->
name|parseInt
argument_list|(
name|row
index|[
literal|5
index|]
argument_list|)
argument_list|)
comment|// depth
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected max 10 nodes"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|true
argument_list|)
argument_list|,
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|row
lambda|->
name|parseInt
argument_list|(
name|row
index|[
literal|6
index|]
argument_list|)
argument_list|)
comment|// count
operator|.
name|max
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|max
lambda|->
name|max
operator|<=
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

