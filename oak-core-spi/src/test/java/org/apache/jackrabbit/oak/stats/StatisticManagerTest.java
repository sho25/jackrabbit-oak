begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|jmx
operator|.
name|QueryStatManagerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|RepositoryStatistics
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|RepositoryStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|stats
operator|.
name|TimeSeriesMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|StatisticManagerTest
block|{
specifier|private
name|ScheduledExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|defaultSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|StatisticManager
name|mgr
init|=
operator|new
name|StatisticManager
argument_list|(
name|wb
argument_list|,
name|executorService
argument_list|)
decl_stmt|;
name|MeterStats
name|meterStats
init|=
name|mgr
operator|.
name|getMeter
argument_list|(
name|Type
operator|.
name|QUERY_COUNT
argument_list|)
decl_stmt|;
name|meterStats
operator|.
name|mark
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|WhiteboardUtils
operator|.
name|getServices
argument_list|(
name|wb
argument_list|,
name|RepositoryStatsMBean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|WhiteboardUtils
operator|.
name|getServices
argument_list|(
name|wb
argument_list|,
name|QueryStatManagerMBean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setupWithCustom
parameter_list|()
throws|throws
name|Exception
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|wb
operator|.
name|register
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StatisticManager
name|mgr
init|=
operator|new
name|StatisticManager
argument_list|(
name|wb
argument_list|,
name|executorService
argument_list|)
decl_stmt|;
name|MeterStats
name|meterStats
init|=
name|mgr
operator|.
name|getMeter
argument_list|(
name|Type
operator|.
name|QUERY_COUNT
argument_list|)
decl_stmt|;
name|meterStats
operator|.
name|mark
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|//TODO Not easy to do any asserts on call. Need to figure out a way
block|}
annotation|@
name|Test
specifier|public
name|void
name|timeSeriesOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StatsOptions
argument_list|>
name|optionsPassed
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|wb
operator|.
name|register
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
operator|new
name|DummyStatsProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MeterStats
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
name|optionsPassed
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getMeter
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StatisticManager
name|mgr
init|=
operator|new
name|StatisticManager
argument_list|(
name|wb
argument_list|,
name|executorService
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|getMeter
argument_list|(
name|Type
operator|.
name|SESSION_READ_COUNTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StatsOptions
operator|.
name|TIME_SERIES_ONLY
argument_list|,
name|optionsPassed
operator|.
name|get
argument_list|(
name|Type
operator|.
name|SESSION_READ_COUNTER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|getMeter
argument_list|(
name|Type
operator|.
name|SESSION_WRITE_COUNTER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StatsOptions
operator|.
name|DEFAULT
argument_list|,
name|optionsPassed
operator|.
name|get
argument_list|(
name|Type
operator|.
name|SESSION_WRITE_COUNTER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationQueueMaxLength
parameter_list|()
block|{
name|AtomicLong
name|maxQueueLength
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|SimpleStats
name|stats
init|=
operator|new
name|SimpleStats
argument_list|(
name|maxQueueLength
argument_list|,
name|SimpleStats
operator|.
name|Type
operator|.
name|COUNTER
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
operator|new
name|DefaultWhiteboard
argument_list|()
decl_stmt|;
name|wb
operator|.
name|register
argument_list|(
name|StatisticsProvider
operator|.
name|class
argument_list|,
operator|new
name|DummyStatsProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CounterStats
name|getCounterStats
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|RepositoryStats
operator|.
name|OBSERVATION_QUEUE_MAX_LENGTH
argument_list|)
condition|)
block|{
return|return
name|stats
return|;
block|}
return|return
name|super
operator|.
name|getCounterStats
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StatisticManager
name|mgr
init|=
operator|new
name|StatisticManager
argument_list|(
name|wb
argument_list|,
name|executorService
argument_list|)
decl_stmt|;
name|TimeSeriesMax
name|rec
init|=
name|mgr
operator|.
name|maxQueLengthRecorder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|services
init|=
name|wb
operator|.
name|track
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
operator|.
name|getServices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is the scheduled task registered by the StatisticsManager
comment|// updating the TimeSeries every second
name|Runnable
name|pulse
init|=
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// must reset the stats to 'unknown' (-1)
name|pulse
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|maxQueueLength
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|recordValue
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|rec
operator|.
name|recordValue
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|rec
operator|.
name|recordValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// must return the max value
name|assertEquals
argument_list|(
literal|7L
argument_list|,
name|maxQueueLength
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// must reset the stats to 'unknown' (-1)
name|pulse
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|maxQueueLength
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|DummyStatsProvider
implements|implements
name|StatisticsProvider
block|{
annotation|@
name|Override
specifier|public
name|RepositoryStatistics
name|getStats
parameter_list|()
block|{
return|return
name|NoopRepositoryStatistics
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|MeterStats
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|NoopStats
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|CounterStats
name|getCounterStats
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|NoopStats
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimerStats
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|NoopStats
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|HistogramStats
name|getHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|StatsOptions
name|options
parameter_list|)
block|{
return|return
name|NoopStats
operator|.
name|INSTANCE
return|;
block|}
block|}
block|}
end_class

end_unit

