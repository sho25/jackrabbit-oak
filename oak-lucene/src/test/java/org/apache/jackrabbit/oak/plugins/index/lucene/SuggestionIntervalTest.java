begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|SuggestionIntervalTest
extends|extends
name|AbstractQueryTest
block|{
specifier|private
name|Clock
name|clock
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
name|ContentRepository
name|repository
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LuceneIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
decl_stmt|;
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
try|try
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//eat exception if clock couldn't wait... that was just courteous anyway!
block|}
name|LuceneIndexEditorContext
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|LuceneIndexEditorContext
operator|.
name|setClock
argument_list|(
name|Clock
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Tree
name|createSuggestIndex
parameter_list|(
name|String
name|indexedNodeType
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|indexName
init|=
literal|"lucene-suggest"
decl_stmt|;
name|Tree
name|def
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
operator|+
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|propertyIdxDef
init|=
name|def
operator|.
name|addChild
argument_list|(
name|INDEX_RULES
argument_list|)
operator|.
name|addChild
argument_list|(
name|indexedNodeType
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"indexedProperty"
argument_list|)
decl_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"propertyIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"analyzed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"useInSuggest"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|propertyIdxDef
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROPDEF_PROP_NODE_NAME
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|getSuggestions
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|suggestFor
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|String
name|suggQuery
init|=
name|createSuggestQuery
argument_list|(
name|nodeType
argument_list|,
name|suggestFor
argument_list|)
decl_stmt|;
name|QueryEngine
name|qe
init|=
name|root
operator|.
name|getQueryEngine
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|qe
operator|.
name|executeQuery
argument_list|(
name|suggQuery
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|createSuggestQuery
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|suggestFor
parameter_list|)
block|{
return|return
literal|"SELECT [rep:suggest()] as suggestion, [jcr:score] as score  FROM ["
operator|+
name|nodeType
operator|+
literal|"] WHERE suggest('"
operator|+
name|suggestFor
operator|+
literal|"')"
return|;
block|}
comment|//OAK-4068
annotation|@
name|Test
specifier|public
name|void
name|defaultSuggestInterval
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
comment|//initial data
name|createSuggestIndex
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//wait for documented time before suggestions are refreshed
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|//get one more tick
comment|//add a node... this should kick in a suggestions udpate too as enough time has passed
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"indexedNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|nodeType
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
name|getSuggestions
argument_list|(
name|nodeType
argument_list|,
literal|"indexedn"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexedNode"
argument_list|,
name|suggestions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//OAK-4066
annotation|@
name|Test
specifier|public
name|void
name|suggestionUpdateWithoutIndexChange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
name|createSuggestIndex
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|long
name|currTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|toTime
init|=
name|currTime
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|IndexDefinition
operator|.
name|DEFAULT_SUGGESTER_UPDATE_FREQUENCY_MINUTES
argument_list|)
decl_stmt|;
comment|//add a node that get part in the index
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"indexedNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|nodeType
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//wait for suggestions refresh time
name|clock
operator|.
name|waitUntil
argument_list|(
name|toTime
argument_list|)
expr_stmt|;
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|//get one more tick
comment|//push a change which should not make any change in the index but yet should help update suggestions
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"some-non-index-change"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:Unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
name|getSuggestions
argument_list|(
name|nodeType
argument_list|,
literal|"indexedn"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"indexedNode"
argument_list|,
name|suggestions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//OAK-4066
annotation|@
name|Test
specifier|public
name|void
name|avoidRedundantSuggestionBuildOnNonIndexUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeType
init|=
literal|"nt:unstructured"
decl_stmt|;
comment|//initial content which also updates suggestions with "indexedNode"
name|Tree
name|indexDef
init|=
name|createSuggestIndex
argument_list|(
name|nodeType
argument_list|)
decl_stmt|;
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"indexedNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|suggUpdateTime1
init|=
name|getSuggestionLastUpdated
argument_list|(
name|indexDef
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Suggestions update timestamp couldn't be read"
argument_list|,
name|suggUpdateTime1
argument_list|)
expr_stmt|;
name|long
name|currTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|toTime
init|=
name|currTime
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|IndexDefinition
operator|.
name|DEFAULT_SUGGESTER_UPDATE_FREQUENCY_MINUTES
argument_list|)
decl_stmt|;
comment|//wait for suggestions refresh time
name|clock
operator|.
name|waitUntil
argument_list|(
name|toTime
argument_list|)
expr_stmt|;
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|//get one more tick
comment|//push a change which should not make any change in the index but would kick in suggestion logic
comment|//YET, suggestion logic shouldn't do any change
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"some-non-index-change"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:Unstructured"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|suggUpdateTime2
init|=
name|getSuggestionLastUpdated
argument_list|(
name|indexDef
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Suggestions shouldn't rebuild un-necessarily. Update times are different"
argument_list|,
name|suggUpdateTime1
argument_list|,
name|suggUpdateTime2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getSuggestionLastUpdated
parameter_list|(
name|Tree
name|indexDef
parameter_list|)
block|{
name|Tree
name|suggStat
init|=
name|root
operator|.
name|getTree
argument_list|(
name|indexDef
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|LuceneIndexConstants
operator|.
name|SUGGEST_DATA_CHILD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|suggStat
operator|.
name|hasProperty
argument_list|(
literal|"lastUpdated"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|suggStat
operator|.
name|getProperty
argument_list|(
literal|"lastUpdated"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

