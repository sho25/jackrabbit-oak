begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|equal
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|JOURNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|COLLISIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SPLIT_CANDIDATE_THRESHOLD
import|;
end_import

begin_comment
comment|/**  * A higher level object representing a commit.  */
end_comment

begin_class
specifier|public
class|class
name|Commit
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Commit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|DocumentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|RevisionVector
name|baseRevision
decl_stmt|;
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|operations
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Revision
argument_list|>
name|collisions
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Branch
name|b
decl_stmt|;
specifier|private
name|boolean
name|rollbackFailed
decl_stmt|;
comment|/**      * List of all node paths which have been modified in this commit. In addition to the nodes      * which are actually changed it also contains there parent node paths      */
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|modifiedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|addedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Set of all nodes which have binary properties. **/
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|nodesWithBinaries
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bundledNodes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**      * Create a new Commit.      *        * @param nodeStore the node store.      * @param revision the revision for this commit.      * @param baseRevision the base revision for this commit or {@code null} if      *                     there is none.      */
name|Commit
parameter_list|(
annotation|@
name|Nonnull
name|DocumentNodeStore
name|nodeStore
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|,
annotation|@
name|Nullable
name|RevisionVector
name|baseRevision
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|checkNotNull
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseRevision
operator|=
name|baseRevision
expr_stmt|;
block|}
name|UpdateOp
name|getUpdateOperationForNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NodeDocument
operator|.
name|setBranchCommit
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
comment|/**      * The revision for this new commit. That is, the changes within this commit      * will be visible with this revision.      *      * @return the revision for this new commit.      */
annotation|@
name|Nonnull
name|Revision
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
comment|/**      * Returns the base revision for this commit. That is, the revision passed      * to {@link DocumentNodeStore#newCommit}. The base revision may be      *<code>null</code>, e.g. for the initial commit of the root node, when      * there is no base revision.      *      * @return the base revision of this commit or<code>null</code>.      */
annotation|@
name|CheckForNull
name|RevisionVector
name|getBaseRevision
parameter_list|()
block|{
return|return
name|baseRevision
return|;
block|}
comment|/**      * @return all modified paths, including ancestors without explicit      *          modifications.      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModifiedPaths
parameter_list|()
block|{
return|return
name|modifiedNodes
return|;
block|}
name|void
name|updateProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|UpdateOp
name|op
init|=
name|getUpdateOperationForNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMapEntry
argument_list|(
name|key
argument_list|,
name|revision
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|addBundledNode
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|bundlingRootPath
parameter_list|)
block|{
name|bundledNodes
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|bundlingRootPath
argument_list|)
expr_stmt|;
block|}
name|void
name|markNodeHavingBinary
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|nodesWithBinaries
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|addNode
parameter_list|(
name|DocumentNodeState
name|n
parameter_list|)
block|{
name|String
name|path
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|operations
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Node already added: "
operator|+
name|path
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|UpdateOp
name|op
init|=
name|n
operator|.
name|asOperation
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NodeDocument
operator|.
name|setBranchCommit
argument_list|(
name|op
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|addedNodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|operations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * @return {@code true} if this commit did not succeed and the rollback      *      was unable to revert all changes; otherwise {@code false}.      */
name|boolean
name|rollbackFailed
parameter_list|()
block|{
return|return
name|rollbackFailed
return|;
block|}
comment|/**      * Applies this commit to the store.      *      * @throws ConflictException if the commit failed because of a conflict.      * @throws DocumentStoreException if the commit cannot be applied.      */
name|void
name|apply
parameter_list|()
throws|throws
name|ConflictException
throws|,
name|DocumentStoreException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|RevisionVector
name|baseRev
init|=
name|getBaseRevision
argument_list|()
decl_stmt|;
name|boolean
name|isBranch
init|=
name|baseRev
operator|!=
literal|null
operator|&&
name|baseRev
operator|.
name|isBranch
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBranch
operator|&&
operator|!
name|nodeStore
operator|.
name|isDisableBranches
argument_list|()
condition|)
block|{
try|try
block|{
comment|// prepare commit
name|prepare
argument_list|(
name|baseRev
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|Branch
name|branch
init|=
name|getBranch
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|branch
operator|.
name|removeCommit
argument_list|(
name|rev
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|branch
operator|.
name|hasCommits
argument_list|()
condition|)
block|{
name|nodeStore
operator|.
name|getBranches
argument_list|()
operator|.
name|remove
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|applyInternal
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Apply the changes to the document store and the cache.      */
specifier|private
name|void
name|applyInternal
parameter_list|()
block|{
if|if
condition|(
operator|!
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateParentChildStatus
argument_list|()
expr_stmt|;
name|updateBinaryStatus
argument_list|()
expr_stmt|;
name|applyToDocumentStore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|prepare
parameter_list|(
name|RevisionVector
name|baseRevision
parameter_list|)
block|{
if|if
condition|(
operator|!
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateParentChildStatus
argument_list|()
expr_stmt|;
name|updateBinaryStatus
argument_list|()
expr_stmt|;
name|applyToDocumentStore
argument_list|(
name|baseRevision
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Update the binary status in the update op.      */
specifier|private
name|void
name|updateBinaryStatus
parameter_list|()
block|{
name|DocumentStore
name|store
init|=
name|this
operator|.
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|this
operator|.
name|nodesWithBinaries
control|)
block|{
name|NodeDocument
name|nd
init|=
name|store
operator|.
name|getIfCached
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nd
operator|==
literal|null
operator|)
operator|||
operator|!
name|nd
operator|.
name|hasBinary
argument_list|()
condition|)
block|{
name|UpdateOp
name|updateParentOp
init|=
name|getUpdateOperationForNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setHasBinary
argument_list|(
name|updateParentOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Apply the changes to the document store.      */
name|void
name|applyToDocumentStore
parameter_list|()
block|{
name|applyToDocumentStore
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Apply the changes to the document store.      *      * @param baseBranchRevision the base revision of this commit. Currently only      *                     used for branch commits.      * @throws DocumentStoreException if an error occurs while writing to the      *          underlying store.      */
specifier|private
name|void
name|applyToDocumentStore
parameter_list|(
name|RevisionVector
name|baseBranchRevision
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
comment|// initially set the rollbackFailed flag to true
comment|// the flag will be set to false at the end of the method
comment|// when the commit succeeds
name|rollbackFailed
operator|=
literal|true
expr_stmt|;
comment|// the value in _revisions.<revision> property of the commit root node
comment|// regular commits use "c", which makes the commit visible to
comment|// other readers. branch commits use the base revision to indicate
comment|// the visibility of the commit
name|String
name|commitValue
init|=
name|baseBranchRevision
operator|!=
literal|null
condition|?
name|baseBranchRevision
operator|.
name|getBranchRevision
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"c"
decl_stmt|;
name|DocumentStore
name|store
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|String
name|commitRootPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseBranchRevision
operator|!=
literal|null
condition|)
block|{
comment|// branch commits always use root node as commit root
name|commitRootPath
operator|=
literal|"/"
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
name|changedNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
comment|// operations are added to this list before they are executed,
comment|// so that all operations can be rolled back if there is a conflict
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
name|opLog
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
comment|// Compute the commit root
for|for
control|(
name|String
name|p
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|markChanged
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitRootPath
operator|==
literal|null
condition|)
block|{
name|commitRootPath
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|commitRootPath
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|commitRootPath
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|commitRootPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|denotesRoot
argument_list|(
name|commitRootPath
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|bundledNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|markChanged
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// push branch changes to journal
if|if
condition|(
name|baseBranchRevision
operator|!=
literal|null
condition|)
block|{
comment|// store as external change
name|JournalEntry
name|doc
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|doc
operator|.
name|modified
argument_list|(
name|modifiedNodes
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|revision
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|store
operator|.
name|create
argument_list|(
name|JOURNAL
argument_list|,
name|singletonList
argument_list|(
name|doc
operator|.
name|asUpdateOp
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|commitRootDepth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|commitRootPath
argument_list|)
decl_stmt|;
comment|// check if there are real changes on the commit root
name|boolean
name|commitRootHasChanges
init|=
name|operations
operator|.
name|containsKey
argument_list|(
name|commitRootPath
argument_list|)
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|operations
operator|.
name|values
argument_list|()
control|)
block|{
name|NodeDocument
operator|.
name|setCommitRoot
argument_list|(
name|op
argument_list|,
name|revision
argument_list|,
name|commitRootDepth
argument_list|)
expr_stmt|;
name|changedNodes
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|// create a "root of the commit" if there is none
name|UpdateOp
name|commitRoot
init|=
name|getUpdateOperationForNode
argument_list|(
name|commitRootPath
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|opLog
operator|.
name|addAll
argument_list|(
name|changedNodes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|oldDocs
init|=
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|changedNodes
argument_list|)
decl_stmt|;
name|checkConflicts
argument_list|(
name|oldDocs
argument_list|,
name|changedNodes
argument_list|)
expr_stmt|;
name|checkSplitCandidate
argument_list|(
name|oldDocs
argument_list|)
expr_stmt|;
comment|// finally write the commit root (the commit root might be written
comment|// twice, first to check if there was a conflict, and only then to
comment|// commit the revision, with the revision property set)
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|commitRoot
argument_list|,
name|revision
argument_list|,
name|commitValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitRootHasChanges
condition|)
block|{
comment|// remove previously added commit root
name|NodeDocument
operator|.
name|removeCommitRoot
argument_list|(
name|commitRoot
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|opLog
operator|.
name|add
argument_list|(
name|commitRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseBranchRevision
operator|==
literal|null
condition|)
block|{
comment|// create a clone of the commitRoot in order
comment|// to set isNew to false. If we get here the
comment|// commitRoot document already exists and
comment|// only needs an update
name|UpdateOp
name|commit
init|=
name|commitRoot
operator|.
name|copy
argument_list|()
decl_stmt|;
name|commit
operator|.
name|setNew
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// only set revision on commit root when there is
comment|// no collision for this commit revision
name|commit
operator|.
name|containsMapEntry
argument_list|(
name|COLLISIONS
argument_list|,
name|revision
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeDocument
name|before
init|=
name|nodeStore
operator|.
name|updateCommitRoot
argument_list|(
name|commit
argument_list|,
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Conflicting concurrent change. "
operator|+
literal|"Update operation failed: "
operator|+
name|commitRoot
decl_stmt|;
name|NodeDocument
name|commitRootDoc
init|=
name|store
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|commitRoot
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentStoreException
name|dse
decl_stmt|;
if|if
condition|(
name|commitRootDoc
operator|==
literal|null
condition|)
block|{
name|dse
operator|=
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dse
operator|=
operator|new
name|ConflictException
argument_list|(
name|msg
argument_list|,
name|commitRootDoc
operator|.
name|getConflictsFor
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
name|dse
throw|;
block|}
else|else
block|{
name|success
operator|=
literal|true
expr_stmt|;
comment|// if we get here the commit was successful and
comment|// the commit revision is set on the commitRoot
comment|// document for this commit.
comment|// now check for conflicts/collisions by other commits.
comment|// use original commitRoot operation with
comment|// correct isNew flag.
name|checkConflicts
argument_list|(
name|commitRoot
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|checkSplitCandidate
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this is a branch commit, do not fail on collisions now
comment|// trying to merge the branch will fail later
name|createOrUpdateNode
argument_list|(
name|store
argument_list|,
name|commitRoot
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|put
argument_list|(
name|commitRootPath
argument_list|,
name|commitRoot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// OAK-3084 do not roll back if already committed
if|if
condition|(
name|success
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred after commit. Rollback will be suppressed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|rollback
argument_list|(
name|opLog
argument_list|,
name|commitRoot
argument_list|)
expr_stmt|;
name|rollbackFailed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// catch any exception caused by the rollback, log it
comment|// and throw the original exception
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rollback failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|rollbackFailed
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateParentChildStatus
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|processedParents
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|addedNodes
control|)
block|{
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|processedParents
operator|.
name|contains
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//Ignore setting children path for bundled nodes
if|if
condition|(
name|isBundled
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|processedParents
operator|.
name|add
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
name|getUpdateOperationForNode
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setChildrenFlag
argument_list|(
name|op
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollback
parameter_list|(
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|changed
parameter_list|,
name|UpdateOp
name|commitRoot
parameter_list|)
block|{
name|DocumentStore
name|store
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|changed
control|)
block|{
name|UpdateOp
name|reverse
init|=
name|op
operator|.
name|getReverseOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|isNew
argument_list|()
condition|)
block|{
name|NodeDocument
operator|.
name|setDeletedOnce
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
block|}
name|UpdateOp
name|removeCollision
init|=
operator|new
name|UpdateOp
argument_list|(
name|commitRoot
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|removeCollision
argument_list|(
name|removeCollision
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|removeCollision
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to create or update the node. If there was a conflict, this method      * throws an exception, even though the change is still applied.      *      * @param store the store      * @param op the operation      */
specifier|private
name|void
name|createOrUpdateNode
parameter_list|(
name|DocumentStore
name|store
parameter_list|,
name|UpdateOp
name|op
parameter_list|)
block|{
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|checkConflicts
argument_list|(
name|op
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|checkSplitCandidate
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSplitCandidate
parameter_list|(
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
parameter_list|)
block|{
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|checkSplitCandidate
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkSplitCandidate
parameter_list|(
annotation|@
name|Nullable
name|NodeDocument
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|doc
operator|.
name|getMemory
argument_list|()
operator|>
name|SPLIT_CANDIDATE_THRESHOLD
operator|||
name|doc
operator|.
name|hasBinary
argument_list|()
condition|)
block|{
name|nodeStore
operator|.
name|addSplitCandidate
argument_list|(
name|doc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if the update operation introduced any conflicts on the given      * document. The document shows the state right before the operation was      * applied.      *      * @param op the update operation.      * @param before how the document looked before the update was applied or      *               {@code null} if it didn't exist before.      * @throws ConflictException if there was a conflict introduced by the      *          given update operation.      */
specifier|private
name|void
name|checkConflicts
parameter_list|(
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|,
annotation|@
name|Nullable
name|NodeDocument
name|before
parameter_list|)
throws|throws
name|ConflictException
block|{
name|DocumentStore
name|store
init|=
name|nodeStore
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|collisions
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|baseRevision
operator|!=
literal|null
condition|)
block|{
name|Revision
name|newestRev
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|RevisionVector
name|base
init|=
name|baseRevision
decl_stmt|;
if|if
condition|(
name|nodeStore
operator|.
name|isDisableBranches
argument_list|()
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|asTrunkRevision
argument_list|()
expr_stmt|;
block|}
name|newestRev
operator|=
name|before
operator|.
name|getNewestRevision
argument_list|(
name|nodeStore
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|getBranch
argument_list|()
argument_list|,
name|collisions
argument_list|)
expr_stmt|;
block|}
name|String
name|conflictMessage
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|conflictRevisions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|newestRev
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|op
operator|.
name|isDelete
argument_list|()
operator|||
operator|!
name|op
operator|.
name|isNew
argument_list|()
operator|)
operator|&&
operator|!
name|allowConcurrentAddRemove
argument_list|(
name|before
argument_list|,
name|op
argument_list|)
condition|)
block|{
name|conflictMessage
operator|=
literal|"The node "
operator|+
name|op
operator|.
name|getId
argument_list|()
operator|+
literal|" does not exist or is already deleted"
expr_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
operator|!
name|before
operator|.
name|getLocalDeleted
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conflictRevisions
operator|.
name|add
argument_list|(
name|before
operator|.
name|getLocalDeleted
argument_list|()
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|conflictRevisions
operator|.
name|add
argument_list|(
name|newestRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|isNew
argument_list|()
operator|&&
operator|!
name|allowConcurrentAddRemove
argument_list|(
name|before
argument_list|,
name|op
argument_list|)
condition|)
block|{
name|conflictMessage
operator|=
literal|"The node "
operator|+
name|op
operator|.
name|getId
argument_list|()
operator|+
literal|" was already added in revision\n"
operator|+
name|formatConflictRevision
argument_list|(
name|newestRev
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|baseRevision
operator|.
name|isRevisionNewer
argument_list|(
name|newestRev
argument_list|)
operator|&&
operator|(
name|op
operator|.
name|isDelete
argument_list|()
operator|||
name|isConflicting
argument_list|(
name|before
argument_list|,
name|op
argument_list|)
operator|)
condition|)
block|{
name|conflictMessage
operator|=
literal|"The node "
operator|+
name|op
operator|.
name|getId
argument_list|()
operator|+
literal|" was changed in revision\n"
operator|+
name|formatConflictRevision
argument_list|(
name|newestRev
argument_list|)
operator|+
literal|", which was applied after the base revision\n"
operator|+
name|baseRevision
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conflictMessage
operator|==
literal|null
operator|&&
name|before
operator|!=
literal|null
condition|)
block|{
comment|// the modification was successful
comment|// -> check for collisions and conflict (concurrent updates
comment|// on a node are possible if property updates do not overlap)
comment|// TODO: unify above conflict detection and isConflicting()
name|boolean
name|allowConflictingDeleteChange
init|=
name|allowConcurrentAddRemove
argument_list|(
name|before
argument_list|,
name|op
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|collisions
control|)
block|{
name|Collision
name|c
init|=
operator|new
name|Collision
argument_list|(
name|before
argument_list|,
name|r
argument_list|,
name|op
argument_list|,
name|revision
argument_list|,
name|nodeStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isConflicting
argument_list|()
operator|&&
operator|!
name|allowConflictingDeleteChange
condition|)
block|{
comment|// mark collisions on commit root
if|if
condition|(
name|c
operator|.
name|mark
argument_list|(
name|store
argument_list|)
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|)
block|{
comment|// our revision was marked
if|if
condition|(
name|baseRevision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
comment|// this is a branch commit. do not fail immediately
comment|// merging this branch will fail later.
block|}
else|else
block|{
comment|// fail immediately
name|conflictMessage
operator|=
literal|"The node "
operator|+
name|op
operator|.
name|getId
argument_list|()
operator|+
literal|" was changed in revision\n"
operator|+
name|formatConflictRevision
argument_list|(
name|r
argument_list|)
operator|+
literal|", which was applied after the base revision\n"
operator|+
name|baseRevision
expr_stmt|;
name|conflictRevisions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|conflictMessage
operator|!=
literal|null
condition|)
block|{
name|conflictMessage
operator|+=
literal|", before\n"
operator|+
name|revision
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|conflictMessage
operator|+
literal|"; document:\n"
operator|+
operator|(
name|before
operator|==
literal|null
condition|?
literal|""
else|:
name|before
operator|.
name|format
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ConflictException
argument_list|(
name|conflictMessage
argument_list|,
name|conflictRevisions
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkConflicts
parameter_list|(
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|oldDocs
parameter_list|,
name|List
argument_list|<
name|UpdateOp
argument_list|>
name|updates
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ConflictException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|ConflictException
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|oldDocs
control|)
block|{
name|UpdateOp
name|op
init|=
name|updates
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
try|try
block|{
name|checkConflicts
argument_list|(
name|op
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConflictException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|revisions
argument_list|,
name|e
operator|.
name|getConflictRevisions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConflictException
argument_list|(
literal|"Following exceptions occurred during the bulk update operations: "
operator|+
name|exceptions
argument_list|,
name|revisions
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|formatConflictRevision
parameter_list|(
name|Revision
name|r
parameter_list|)
block|{
if|if
condition|(
name|nodeStore
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|isRevisionNewer
argument_list|(
name|r
argument_list|)
condition|)
block|{
return|return
name|r
operator|+
literal|" (not yet visible)"
return|;
block|}
elseif|else
if|if
condition|(
name|baseRevision
operator|!=
literal|null
operator|&&
operator|!
name|baseRevision
operator|.
name|isRevisionNewer
argument_list|(
name|r
argument_list|)
operator|&&
operator|!
name|equal
argument_list|(
name|baseRevision
operator|.
name|getRevision
argument_list|(
name|r
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
name|r
argument_list|)
condition|)
block|{
return|return
name|r
operator|+
literal|" (older than base "
operator|+
name|baseRevision
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Checks whether the given<code>UpdateOp</code> conflicts with the      * existing content in<code>doc</code>. The check is done based on the      * {@link #baseRevision} of this commit. An<code>UpdateOp</code> conflicts      * when there were changes after {@link #baseRevision} on properties also      * contained in<code>UpdateOp</code>.      *      * @param doc the contents of the nodes before the update.      * @param op the update to perform.      * @return<code>true</code> if the update conflicts;<code>false</code>      *         otherwise.      */
specifier|private
name|boolean
name|isConflicting
parameter_list|(
annotation|@
name|Nullable
name|NodeDocument
name|doc
parameter_list|,
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|)
block|{
if|if
condition|(
name|baseRevision
operator|==
literal|null
operator|||
name|doc
operator|==
literal|null
condition|)
block|{
comment|// no conflict is possible when there is no baseRevision
comment|// or document did not exist before
return|return
literal|false
return|;
block|}
return|return
name|doc
operator|.
name|isConflicting
argument_list|(
name|op
argument_list|,
name|baseRevision
argument_list|,
name|revision
argument_list|,
name|nodeStore
operator|.
name|getEnableConcurrentAddRemove
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Checks whether a concurrent add/remove operation is allowed with the      * given before document and update operation. This method will first check      * if the concurrent add/remove feature is enable and return {@code false}      * immediately if it is disabled. Only when enabled will this method check      * if there is a conflict based on the given document and update operation.      * See also {@link #isConflicting(NodeDocument, UpdateOp)}.      *      * @param before the contents of the document before the update.      * @param op the update to perform.      * @return {@code true} is a concurrent add/remove update is allowed;      *      {@code false} otherwise.      */
specifier|private
name|boolean
name|allowConcurrentAddRemove
parameter_list|(
annotation|@
name|Nullable
name|NodeDocument
name|before
parameter_list|,
annotation|@
name|Nonnull
name|UpdateOp
name|op
parameter_list|)
block|{
return|return
name|nodeStore
operator|.
name|getEnableConcurrentAddRemove
argument_list|()
operator|&&
operator|!
name|isConflicting
argument_list|(
name|before
argument_list|,
name|op
argument_list|)
return|;
block|}
comment|/**      * @return the branch if this is a branch commit, otherwise {@code null}.      */
annotation|@
name|CheckForNull
specifier|private
name|Branch
name|getBranch
parameter_list|()
block|{
if|if
condition|(
name|baseRevision
operator|==
literal|null
operator|||
operator|!
name|baseRevision
operator|.
name|isBranch
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
name|nodeStore
operator|.
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|revision
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/**      * Apply the changes to the DocumentNodeStore (to update the cache).      *      * @param before the revision right before this commit.      * @param isBranchCommit whether this is a commit to a branch      */
specifier|public
name|void
name|applyToCache
parameter_list|(
name|RevisionVector
name|before
parameter_list|,
name|boolean
name|isBranchCommit
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodesWithChangedChildren
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|modifiedNodes
control|)
block|{
if|if
condition|(
name|denotesRoot
argument_list|(
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|nodesWithChangedChildren
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nodesWithChangedChildren
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// the commit revision with branch flag if this is a branch commit
name|Revision
name|rev
init|=
name|isBranchCommit
condition|?
name|revision
operator|.
name|asBranchRevision
argument_list|()
else|:
name|revision
decl_stmt|;
name|RevisionVector
name|after
init|=
name|before
operator|.
name|update
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|DiffCache
operator|.
name|Entry
name|cacheEntry
init|=
name|nodeStore
operator|.
name|getDiffCache
argument_list|()
operator|.
name|newEntry
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LastRevTracker
name|tracker
init|=
name|nodeStore
operator|.
name|createTracker
argument_list|(
name|revision
argument_list|,
name|isBranchCommit
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|changed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|modifiedNodes
control|)
block|{
name|added
operator|.
name|clear
argument_list|()
expr_stmt|;
name|removed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|changes
init|=
name|nodesWithChangedChildren
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|changes
control|)
block|{
if|if
condition|(
name|addedNodes
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|added
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|removedNodes
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// track _lastRev and apply to cache only when
comment|// path is not for a bundled node state
if|if
condition|(
operator|!
name|isBundled
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|boolean
name|isNew
init|=
name|op
operator|!=
literal|null
operator|&&
name|op
operator|.
name|isNew
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
operator|!
name|hasContentChanges
argument_list|(
name|op
argument_list|)
operator|||
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// track intermediate node and root
name|tracker
operator|.
name|track
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|applyChanges
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|rev
argument_list|,
name|path
argument_list|,
name|isNew
argument_list|,
name|added
argument_list|,
name|removed
argument_list|,
name|changed
argument_list|)
expr_stmt|;
block|}
name|addChangesToDiffCacheEntry
argument_list|(
name|path
argument_list|,
name|added
argument_list|,
name|removed
argument_list|,
name|changed
argument_list|,
name|cacheEntry
argument_list|)
expr_stmt|;
block|}
name|cacheEntry
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
comment|/**      * Apply the changes of a node to the cache.      *      * @param path the path      * @param added the list of added child nodes      * @param removed the list of removed child nodes      * @param changed the list of changed child nodes      * @param cacheEntry the cache entry changes are added to      */
specifier|private
name|void
name|addChangesToDiffCacheEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|changed
parameter_list|,
name|DiffCache
operator|.
name|Entry
name|cacheEntry
parameter_list|)
block|{
comment|// update diff cache
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|added
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|removed
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|changed
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|cacheEntry
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|markChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|denotesRoot
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path: "
operator|+
name|path
argument_list|)
throw|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|modifiedNodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeNode
parameter_list|(
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|removedNodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
name|getUpdateOperationForNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|op
operator|.
name|setDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setDeleted
argument_list|(
name|op
argument_list|,
name|revision
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|p
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|updateProperty
argument_list|(
name|path
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isBundled
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|bundledNodes
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|String
argument_list|>
name|KEY_TO_NAME
init|=
operator|new
name|Function
argument_list|<
name|UpdateOp
operator|.
name|Key
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|UpdateOp
operator|.
name|Key
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|hasContentChanges
parameter_list|(
name|UpdateOp
name|op
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|transform
argument_list|(
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|KEY_TO_NAME
argument_list|)
argument_list|,
name|Utils
operator|.
name|PROPERTY_OR_DELETED
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

