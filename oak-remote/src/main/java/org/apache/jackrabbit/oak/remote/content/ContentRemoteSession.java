begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteBinaryFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteBinaryId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteQueryParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTreeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|isAbsolute
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|isAncestor
import|;
end_import

begin_class
class|class
name|ContentRemoteSession
implements|implements
name|RemoteSession
block|{
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|private
specifier|final
name|ContentRemoteRevisions
name|contentRemoteRevisions
decl_stmt|;
specifier|private
specifier|final
name|ContentRemoteBinaries
name|contentRemoteBinaries
decl_stmt|;
specifier|public
name|ContentRemoteSession
parameter_list|(
name|ContentSession
name|contentSession
parameter_list|,
name|ContentRemoteRevisions
name|contentRemoteRevisions
parameter_list|,
name|ContentRemoteBinaries
name|contentRemoteBinaries
parameter_list|)
block|{
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
name|this
operator|.
name|contentRemoteRevisions
operator|=
name|contentRemoteRevisions
expr_stmt|;
name|this
operator|.
name|contentRemoteBinaries
operator|=
name|contentRemoteBinaries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteRevision
name|readLastRevision
parameter_list|()
block|{
name|Root
name|root
init|=
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|String
name|revisionId
init|=
name|contentRemoteRevisions
operator|.
name|put
argument_list|(
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
argument_list|,
name|root
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContentRemoteRevision
argument_list|(
name|revisionId
argument_list|,
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteRevision
name|readRevision
parameter_list|(
name|String
name|revisionId
parameter_list|)
block|{
name|Root
name|root
init|=
name|contentRemoteRevisions
operator|.
name|get
argument_list|(
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ContentRemoteRevision
argument_list|(
name|revisionId
argument_list|,
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteTree
name|readTree
parameter_list|(
name|RemoteRevision
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|RemoteTreeFilters
name|filters
parameter_list|)
block|{
name|ContentRemoteRevision
name|contentRemoteRevision
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|revision
operator|instanceof
name|ContentRemoteRevision
condition|)
block|{
name|contentRemoteRevision
operator|=
operator|(
name|ContentRemoteRevision
operator|)
name|revision
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteRevision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"revision not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filters not provided"
argument_list|)
throw|;
block|}
name|Root
name|root
init|=
name|contentRemoteRevision
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to locate the root"
argument_list|)
throw|;
block|}
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|ContentRemoteTree
argument_list|(
name|tree
argument_list|,
literal|0
argument_list|,
name|filters
argument_list|,
name|contentRemoteBinaries
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createAddOperation
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"adding root node"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"properties not provided"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ContentRemoteOperation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentRemoteOperation
argument_list|>
argument_list|()
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
operator|new
name|AddContentRemoteOperation
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|createSetOperation
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AggregateContentRemoteOperation
argument_list|(
name|operations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createRemoveOperation
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"removing root node"
argument_list|)
throw|;
block|}
return|return
operator|new
name|RemoveContentRemoteOperation
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createSetOperation
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|RemoteValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name is empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value not provided"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SetContentRemoteOperation
argument_list|(
name|contentRemoteBinaries
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createUnsetOperation
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name is empty"
argument_list|)
throw|;
block|}
return|return
operator|new
name|UnsetContentRemoteOperation
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createCopyOperation
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|source
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid source path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"target path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid target path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"same source and target path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isAncestor
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source path is an ancestor of target path"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CopyContentRemoteOperation
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createMoveOperation
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|source
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid source path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"target path not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isAbsolute
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid target path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"same source and target path"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isAncestor
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source path is an ancestor of target path"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MoveContentRemoteOperation
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteOperation
name|createAggregateOperation
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteOperation
argument_list|>
name|operations
parameter_list|)
block|{
if|if
condition|(
name|operations
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"operations not provided"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ContentRemoteOperation
argument_list|>
name|contentRemoteOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentRemoteOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteOperation
name|operation
range|:
name|operations
control|)
block|{
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"operation not provided"
argument_list|)
throw|;
block|}
name|ContentRemoteOperation
name|contentRemoteOperation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|ContentRemoteOperation
condition|)
block|{
name|contentRemoteOperation
operator|=
operator|(
name|ContentRemoteOperation
operator|)
name|operation
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteOperation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid operation"
argument_list|)
throw|;
block|}
name|contentRemoteOperations
operator|.
name|add
argument_list|(
name|contentRemoteOperation
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AggregateContentRemoteOperation
argument_list|(
name|contentRemoteOperations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteRevision
name|commit
parameter_list|(
name|RemoteRevision
name|revision
parameter_list|,
name|RemoteOperation
name|operation
parameter_list|)
throws|throws
name|RemoteCommitException
block|{
name|ContentRemoteRevision
name|contentRemoteRevision
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|revision
operator|instanceof
name|ContentRemoteRevision
condition|)
block|{
name|contentRemoteRevision
operator|=
operator|(
name|ContentRemoteRevision
operator|)
name|revision
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteRevision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid revision"
argument_list|)
throw|;
block|}
name|ContentRemoteOperation
name|contentRemoteOperation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|ContentRemoteOperation
condition|)
block|{
name|contentRemoteOperation
operator|=
operator|(
name|ContentRemoteOperation
operator|)
name|operation
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteOperation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid operation"
argument_list|)
throw|;
block|}
name|Root
name|root
init|=
name|contentRemoteRevision
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to locate the root"
argument_list|)
throw|;
block|}
name|contentRemoteOperation
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteCommitException
argument_list|(
literal|"unable to apply the changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContentRemoteRevision
argument_list|(
name|contentRemoteRevisions
operator|.
name|put
argument_list|(
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
argument_list|,
name|root
argument_list|)
argument_list|,
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteBinaryId
name|readBinaryId
parameter_list|(
name|String
name|binaryId
parameter_list|)
block|{
if|if
condition|(
name|binaryId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"binary id not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|binaryId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid binary id"
argument_list|)
throw|;
block|}
name|Blob
name|blob
init|=
name|contentRemoteBinaries
operator|.
name|get
argument_list|(
name|binaryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ContentRemoteBinaryId
argument_list|(
name|binaryId
argument_list|,
name|blob
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|readBinary
parameter_list|(
name|RemoteBinaryId
name|binaryId
parameter_list|,
name|RemoteBinaryFilters
name|filters
parameter_list|)
block|{
name|ContentRemoteBinaryId
name|contentRemoteBinaryId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|binaryId
operator|instanceof
name|ContentRemoteBinaryId
condition|)
block|{
name|contentRemoteBinaryId
operator|=
operator|(
name|ContentRemoteBinaryId
operator|)
name|binaryId
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteBinaryId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid binary id"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filters not provided"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContentRemoteInputStream
argument_list|(
name|contentRemoteBinaryId
operator|.
name|asBlob
argument_list|()
operator|.
name|getNewStream
argument_list|()
argument_list|,
name|filters
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readBinaryLength
parameter_list|(
name|RemoteBinaryId
name|binaryId
parameter_list|)
block|{
name|ContentRemoteBinaryId
name|contentRemoteBinaryId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|binaryId
operator|instanceof
name|ContentRemoteBinaryId
condition|)
block|{
name|contentRemoteBinaryId
operator|=
operator|(
name|ContentRemoteBinaryId
operator|)
name|binaryId
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteBinaryId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid binary id"
argument_list|)
throw|;
block|}
return|return
name|contentRemoteBinaryId
operator|.
name|asBlob
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentRemoteBinaryId
name|writeBinary
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stream not provided"
argument_list|)
throw|;
block|}
name|Blob
name|blob
decl_stmt|;
try|try
block|{
name|blob
operator|=
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
operator|.
name|createBlob
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to write the binary object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContentRemoteBinaryId
argument_list|(
name|contentRemoteBinaries
operator|.
name|put
argument_list|(
name|blob
argument_list|)
argument_list|,
name|blob
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteResults
name|search
parameter_list|(
name|RemoteRevision
name|revision
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|language
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|limit
parameter_list|)
throws|throws
name|RemoteQueryParseException
block|{
name|ContentRemoteRevision
name|contentRemoteRevision
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|revision
operator|instanceof
name|ContentRemoteRevision
condition|)
block|{
name|contentRemoteRevision
operator|=
operator|(
name|ContentRemoteRevision
operator|)
name|revision
expr_stmt|;
block|}
if|if
condition|(
name|contentRemoteRevision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid revision"
argument_list|)
throw|;
block|}
name|Root
name|root
init|=
name|contentRemoteRevision
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"query not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"language not provided"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|getQueryEngine
argument_list|()
operator|.
name|getSupportedQueryLanguages
argument_list|()
operator|.
name|contains
argument_list|(
name|language
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"language not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid offset"
argument_list|)
throw|;
block|}
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid limit"
argument_list|)
throw|;
block|}
name|Result
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|root
operator|.
name|getQueryEngine
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|,
name|language
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyValue
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteQueryParseException
argument_list|(
literal|"invalid query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContentRemoteResults
argument_list|(
name|contentRemoteBinaries
argument_list|,
name|results
argument_list|)
return|;
block|}
block|}
end_class

end_unit

