begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_comment
comment|/**  * TypeCodes maps between {@code Type} and the code used to prefix  * its json serialisation.  */
end_comment

begin_class
specifier|public
class|class
name|TypeCodes
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|TYPE2CODE
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|CODE2TYPE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|type
init|=
name|PropertyType
operator|.
name|UNDEFINED
init|;
name|type
operator|<=
name|PropertyType
operator|.
name|DECIMAL
condition|;
name|type
operator|++
control|)
block|{
name|String
name|code
init|=
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|type
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|TYPE2CODE
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|CODE2TYPE
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TypeCodes
parameter_list|()
block|{ }
comment|/**      * Returns {@code true} if the specified JSON String represents a value      * serialization that is prefixed with a type code.      *      * @param jsonString The JSON String representation of a {@code CoreValue}      * @return {@code true} if the {@code jsonString} starts with a type      * code; {@code false} otherwise.      */
specifier|public
specifier|static
name|boolean
name|startsWithCode
parameter_list|(
name|String
name|jsonString
parameter_list|)
block|{
return|return
name|jsonString
operator|.
name|length
argument_list|()
operator|>=
literal|4
operator|&&
name|jsonString
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
operator|==
literal|':'
return|;
block|}
comment|/**      * Get the type code for the given property type.      *      * @param propertyType the property type      * @return the type code      */
specifier|public
specifier|static
name|String
name|getCodeForType
parameter_list|(
name|int
name|propertyType
parameter_list|)
block|{
return|return
name|TYPE2CODE
operator|.
name|get
argument_list|(
name|propertyType
argument_list|)
return|;
block|}
comment|/**      * Get the property type for the given type code.      * @param code  the type code      * @return  the property type.      */
specifier|public
specifier|static
name|int
name|getTypeForCode
parameter_list|(
name|String
name|code
parameter_list|)
block|{
return|return
name|CODE2TYPE
operator|.
name|get
argument_list|(
name|code
argument_list|)
return|;
block|}
block|}
end_class

end_unit

