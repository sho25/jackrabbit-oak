begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|writer
operator|.
name|MultiplexersLucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|PROP_UID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|STATUS_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexImporterTest
block|{
specifier|private
name|NodeState
name|rootState
init|=
name|InitialContent
operator|.
name|INITIAL_CONTENT
decl_stmt|;
specifier|private
name|NodeBuilder
name|idx
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|exportAndImport
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|baseIndexState
init|=
name|idx
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|IndexDefinition
name|defn
init|=
name|IndexDefinition
operator|.
name|newBuilder
argument_list|(
name|rootState
argument_list|,
name|baseIndexState
argument_list|,
literal|"/oak:index/fooIndex"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LuceneIndexEditorContext
operator|.
name|configureUniqueId
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|String
name|dirName
init|=
literal|":data"
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|OakDirectory
argument_list|(
name|idx
argument_list|,
name|dirName
argument_list|,
name|defn
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dir
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"Test content"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|dir2Name
init|=
literal|":data2"
operator|+
name|MultiplexersLucene
operator|.
name|INDEX_DIR_SUFFIX
decl_stmt|;
name|Directory
name|dir2
init|=
operator|new
name|OakDirectory
argument_list|(
name|idx
argument_list|,
name|dir2Name
argument_list|,
name|defn
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dir2
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"Test content"
argument_list|)
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|rootState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"fooIndex"
argument_list|,
name|idx
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|indexState
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|File
name|out
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|LuceneIndexDumper
name|dumper
init|=
operator|new
name|LuceneIndexDumper
argument_list|(
name|indexState
argument_list|,
literal|"/oak:index/fooIndex"
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|dump
argument_list|()
expr_stmt|;
name|LuceneIndexImporter
name|importer
init|=
operator|new
name|LuceneIndexImporter
argument_list|()
decl_stmt|;
name|NodeBuilder
name|newIdxBuilder
init|=
name|indexState
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"fooIndex"
argument_list|)
decl_stmt|;
comment|//Add a file to builder to check if existing hidden nodes are removed or not
name|Directory
name|dir3
init|=
operator|new
name|OakDirectory
argument_list|(
name|newIdxBuilder
argument_list|,
name|dirName
argument_list|,
name|defn
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dir3
argument_list|,
literal|"foo2.txt"
argument_list|,
literal|"Test content"
argument_list|)
expr_stmt|;
name|dir3
operator|.
name|close
argument_list|()
expr_stmt|;
name|importer
operator|.
name|importIndex
argument_list|(
name|rootState
argument_list|,
name|newIdxBuilder
argument_list|,
name|dumper
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|exportedIndexState
init|=
name|indexState
operator|.
name|getChildNode
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"fooIndex"
argument_list|)
decl_stmt|;
name|NodeState
name|importedIndexState
init|=
name|newIdxBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertDirectoryEquals
argument_list|(
name|defn
argument_list|,
name|exportedIndexState
argument_list|,
name|importedIndexState
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
comment|//The uid must be different for imported directory
name|String
name|exportedUid
init|=
name|exportedIndexState
operator|.
name|getChildNode
argument_list|(
name|STATUS_NODE
argument_list|)
operator|.
name|getString
argument_list|(
name|PROP_UID
argument_list|)
decl_stmt|;
name|String
name|importedUid
init|=
name|importedIndexState
operator|.
name|getChildNode
argument_list|(
name|STATUS_NODE
argument_list|)
operator|.
name|getString
argument_list|(
name|PROP_UID
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|exportedUid
argument_list|,
name|importedUid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exportedUid
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|importedUid
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertDirectoryEquals
parameter_list|(
name|IndexDefinition
name|defn
parameter_list|,
name|NodeState
name|expected
parameter_list|,
name|NodeState
name|actual
parameter_list|,
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
name|OakDirectory
name|dir1
init|=
operator|new
name|OakDirectory
argument_list|(
operator|new
name|ReadOnlyBuilder
argument_list|(
name|expected
argument_list|)
argument_list|,
name|dirName
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|OakDirectory
name|dir2
init|=
operator|new
name|OakDirectory
argument_list|(
operator|new
name|ReadOnlyBuilder
argument_list|(
name|actual
argument_list|)
argument_list|,
name|dirName
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertDirectoryEquals
argument_list|(
name|dir1
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertDirectoryEquals
parameter_list|(
name|Directory
name|expected
parameter_list|,
name|Directory
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|fileNameSet
argument_list|(
name|expected
argument_list|)
argument_list|,
name|fileNameSet
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|expected
operator|.
name|listAll
argument_list|()
control|)
block|{
name|byte
index|[]
name|i1
init|=
name|toBytes
argument_list|(
name|expected
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|i2
init|=
name|toBytes
argument_list|(
name|actual
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fileNameSet
parameter_list|(
name|Directory
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
operator|(
name|int
operator|)
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

