begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|InternalTreePermissonTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetChildPermission
parameter_list|()
block|{
name|assertSame
argument_list|(
name|InternalTreePermission
operator|.
name|INSTANCE
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|getChildPermission
argument_list|(
literal|"name"
argument_list|,
name|mock
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanRead
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|canRead
argument_list|()
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperty
parameter_list|()
block|{
name|PropertyState
name|prop
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|canRead
argument_list|(
name|prop
argument_list|)
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|canRead
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|canReadAll
argument_list|()
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperties
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|canReadProperties
argument_list|()
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedProperty
parameter_list|()
block|{
name|PropertyState
name|prop
init|=
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TreePermission
operator|.
name|EMPTY
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|prop
argument_list|)
argument_list|,
name|InternalTreePermission
operator|.
name|INSTANCE
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

