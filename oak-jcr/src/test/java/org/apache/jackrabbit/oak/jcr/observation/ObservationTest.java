begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_MOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_REMOVED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PERSIST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_ADDED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_CHANGED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|PROPERTY_REMOVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ObservationTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|private
name|Session
name|observingSession
decl_stmt|;
specifier|private
name|ObservationManager
name|observationManager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|observingSession
operator|=
name|createAdminSession
argument_list|()
expr_stmt|;
name|observationManager
operator|=
name|observingSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|observingSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|setProperty
argument_list|(
literal|"p0"
argument_list|,
literal|"v0"
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n1
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|setProperty
argument_list|(
literal|"property"
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n3
init|=
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n3
operator|.
name|setProperty
argument_list|(
literal|"p3"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectChange
argument_list|(
name|n1
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|"v1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n1
operator|.
name|getProperty
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n
operator|.
name|getNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"{4}"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observation2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|n
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|expectRemove
argument_list|(
name|n
operator|.
name|getNode
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getAdminSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|missing
operator|=
name|listener
operator|.
name|getMissing
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|unexpected
operator|=
name|listener
operator|.
name|getUnexpected
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationOnRootNode
parameter_list|()
throws|throws
name|Exception
block|{
name|ExpectationListener
name|listener
init|=
operator|new
name|ExpectationListener
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|PROPERTY_ADDED
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// add property to root node
name|Node
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|expectAdd
argument_list|(
name|root
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|listener
operator|.
name|getMissing
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing events: "
operator|+
name|missing
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|listener
operator|.
name|getUnexpected
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected events: "
operator|+
name|unexpected
argument_list|,
name|unexpected
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationDispose
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|stopGeneratingEvents
init|=
operator|new
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|hasEvents
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|EventListener
name|listener
init|=
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|events
operator|.
name|next
argument_list|()
expr_stmt|;
name|hasEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Generate events
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
operator|!
name|stopGeneratingEvents
operator|.
name|get
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|n
operator|.
name|addNode
argument_list|(
literal|"c"
operator|+
name|c
argument_list|)
expr_stmt|;
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the events
name|assertTrue
argument_list|(
name|hasEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove event listener
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|hasEvents
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Make sure we don't see any more events
name|assertFalse
argument_list|(
name|hasEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopGeneratingEvents
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|observationDisposeFromListener
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|RepositoryException
argument_list|>
name|repositoryException
init|=
operator|new
name|AtomicReference
argument_list|<
name|RepositoryException
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|unregistered
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|EventListener
name|listener
init|=
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
try|try
block|{
comment|// Unregistering listener from event handler should not block
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|repositoryException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unregistered
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
operator||
name|NODE_REMOVED
operator||
name|NODE_MOVED
operator||
name|PROPERTY_ADDED
operator||
name|PROPERTY_REMOVED
operator||
name|PROPERTY_CHANGED
operator||
name|PERSIST
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Ensure the listener is there
name|assertTrue
argument_list|(
name|observationManager
operator|.
name|getRegisteredEventListeners
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate events
name|Node
name|n
init|=
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|n
operator|.
name|addNode
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Make sure we see the events and the listener is gone
name|assertTrue
argument_list|(
name|unregistered
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryException
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|repositoryException
operator|.
name|get
argument_list|()
throw|;
block|}
name|assertFalse
argument_list|(
name|observationManager
operator|.
name|getRegisteredEventListeners
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getAdminSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< ExpectationListener>---
specifier|private
specifier|static
class|class
name|ExpectationListener
implements|implements
name|EventListener
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SettableFuture
argument_list|<
name|Event
argument_list|>
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|unexpected
init|=
name|Lists
operator|.
name|newCopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|Exception
name|failed
decl_stmt|;
specifier|public
name|Future
argument_list|<
name|Event
argument_list|>
name|expect
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|type
parameter_list|)
block|{
if|if
condition|(
name|failed
operator|==
literal|null
condition|)
block|{
name|SettableFuture
argument_list|<
name|Event
argument_list|>
name|expect
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|key
argument_list|(
name|path
argument_list|,
name|type
argument_list|)
argument_list|,
name|expect
argument_list|)
expr_stmt|;
return|return
name|expect
return|;
block|}
else|else
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|failed
argument_list|)
return|;
block|}
block|}
specifier|public
name|Node
name|expectAdd
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_ADDED
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|Node
name|expectRemove
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|NODE_REMOVED
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
operator|+
literal|"/jcr:primaryType"
argument_list|,
name|PROPERTY_REMOVED
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|Property
name|expectAdd
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_ADDED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|Property
name|expectRemove
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_REMOVED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|Property
name|expectChange
parameter_list|(
name|Property
name|property
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|expect
argument_list|(
name|property
operator|.
name|getPath
argument_list|()
argument_list|,
name|PROPERTY_CHANGED
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMissing
parameter_list|(
name|int
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|Futures
operator|.
name|allAsList
argument_list|(
name|expected
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|SettableFuture
argument_list|<
name|Event
argument_list|>
argument_list|>
name|entry
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|missing
return|;
block|}
specifier|public
name|List
argument_list|<
name|Event
argument_list|>
name|getUnexpected
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|unexpected
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
try|try
block|{
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
operator|&&
name|failed
operator|==
literal|null
condition|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
name|SettableFuture
argument_list|<
name|Event
argument_list|>
name|f
init|=
name|expected
operator|.
name|get
argument_list|(
name|key
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|set
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unexpected
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
for|for
control|(
name|SettableFuture
argument_list|<
name|Event
argument_list|>
name|f
range|:
name|expected
operator|.
name|values
argument_list|()
control|)
block|{
name|f
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|failed
operator|=
name|e
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|key
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|type
parameter_list|)
block|{
return|return
name|path
operator|+
literal|':'
operator|+
name|type
return|;
block|}
block|}
block|}
end_class

end_unit

