begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|CredentialsCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|PrincipalProviderCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Default login module implementation that authenticates JCR {@code Credentials}  * against the repository. Based on the credentials the {@link Principal}s  * associated with user are retrieved from a configurable {@link PrincipalProvider}.  *  *<h3>Credentials</h3>  *  * The {@code Credentials} are collected during {@link #login()} using the  * following logic:  *  *<ul>  *<li>{@code Credentials} as specified in {@link javax.jcr.Repository#login(javax.jcr.Credentials)}  *     in which case they are retrieved from the {@code CallbackHandler}.</li>  *<li>A {@link #SHARED_KEY_CREDENTIALS} entry in the shared state. The  *     expected value is a set of {@code Credentials}. Ffor backwards compatibility  *     with the Jackrabbit 2.x) the former {@link #SHARED_KEY_JR_CREDENTIALS}  *     entry in the shared state is also respected. In the latter case  *     the expected value is a single {@code Credentials} object.</li>  *<li>If neither of the above variants provides Credentials this module  *     tries to obtain them from the subject. See also  *     {@link Subject#getSubject(java.security.AccessControlContext)}</li>  *</ul>  *  * This implementation of the {@code LoginModule} currently supports the following  * types of JCR Credentials:  *  *<ul>  *<li>{@link SimpleCredentials}</li>  *<li>{@link GuestCredentials}</li>  *<li>{@link TokenCredentials}</li>  *</ul>  *  * The {@link Credentials} obtained during the {@link #login()} are added to  * the shared state and - upon successful {@link #commit()} to the {@link Subject}.  *  *<h3>Principals</h3>  *  * TODO  * - principal lookup -> principal provider  * - principal resolution based on credentials  *  *<h3>Impersonation</h3>  *  * TODO  *  *  *  *  */
end_comment

begin_class
specifier|public
class|class
name|LoginModuleImpl
implements|implements
name|LoginModule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoginModuleImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Backwards compatibility: Key of the sharedState entry referring to a      * Credentials object being passed between multiple login modules.      *      * @deprecated Use {@link #SHARED_KEY_CREDENTIALS} instead.      */
specifier|private
specifier|static
specifier|final
name|String
name|SHARED_KEY_JR_CREDENTIALS
init|=
literal|"org.apache.jackrabbit.credentials"
decl_stmt|;
comment|/**      * Key of the sharedState entry referring to a Set of Credentials that is      * shared between multiple login modules.      */
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_KEY_CREDENTIALS
init|=
literal|"org.apache.jackrabbit.oak.credentials"
decl_stmt|;
comment|//public static final String SHARED_KEY_LOGIN_NAME = "javax.security.auth.login.name";
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|>
name|SUPPORTED_CREDENTIALS
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
static|static
block|{
name|SUPPORTED_CREDENTIALS
operator|.
name|add
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|)
expr_stmt|;
name|SUPPORTED_CREDENTIALS
operator|.
name|add
argument_list|(
name|GuestCredentials
operator|.
name|class
argument_list|)
expr_stmt|;
name|SUPPORTED_CREDENTIALS
operator|.
name|add
argument_list|(
name|TokenCredentials
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
name|CallbackHandler
name|callbackHandler
decl_stmt|;
specifier|private
name|Map
name|sharedState
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Credentials
argument_list|>
name|credentials
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
decl_stmt|;
comment|//--------------------------------------------------------< LoginModule>---
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
comment|// TODO
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
name|this
operator|.
name|sharedState
operator|=
name|sharedState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// TODO
name|credentials
operator|=
name|getCredentials
argument_list|()
expr_stmt|;
if|if
condition|(
name|supportsCredentials
argument_list|()
condition|)
block|{
name|principals
operator|=
name|getPrincipals
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// TODO
if|if
condition|(
operator|!
name|subject
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|addAll
argument_list|(
name|principals
argument_list|)
expr_stmt|;
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Could not add information to read only subject {}"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
name|credentials
operator|=
literal|null
expr_stmt|;
name|principals
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// clear subject if not readonly
if|if
condition|(
operator|!
name|subject
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|Set
argument_list|<
name|Credentials
argument_list|>
name|getCredentials
parameter_list|()
block|{
name|Set
argument_list|<
name|Credentials
argument_list|>
name|credentials
init|=
operator|new
name|HashSet
argument_list|<
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addAll
argument_list|(
name|getSharedCredentials
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|callbackHandler
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: retrieving Credentials using callback."
argument_list|)
expr_stmt|;
try|try
block|{
name|CredentialsCallback
name|callback
init|=
operator|new
name|CredentialsCallback
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|callback
block|}
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
name|callback
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|creds
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: Credentials '{}' obtained from callback"
argument_list|,
name|creds
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|add
argument_list|(
name|creds
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Login: adding Credentials to shared state."
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
if|if
condition|(
name|credentials
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: No credentials found; looking for supported credentials in subject."
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|clz
range|:
name|SUPPORTED_CREDENTIALS
control|)
block|{
name|credentials
operator|.
name|addAll
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|clz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|credentials
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Credentials
argument_list|>
name|getSharedCredentials
parameter_list|()
block|{
name|Set
argument_list|<
name|Credentials
argument_list|>
name|sharedCredentials
init|=
operator|new
name|HashSet
argument_list|<
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedState
operator|.
name|containsKey
argument_list|(
name|SHARED_KEY_JR_CREDENTIALS
argument_list|)
condition|)
block|{
name|Object
name|sc
init|=
name|sharedState
operator|.
name|get
argument_list|(
name|SHARED_KEY_JR_CREDENTIALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|instanceof
name|Credentials
condition|)
block|{
name|sharedCredentials
operator|.
name|add
argument_list|(
operator|(
name|Credentials
operator|)
name|sc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: Invalid value for share state entry "
operator|+
name|SHARED_KEY_JR_CREDENTIALS
operator|+
literal|". Credentials expected."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sharedState
operator|.
name|containsKey
argument_list|(
name|SHARED_KEY_CREDENTIALS
argument_list|)
condition|)
block|{
name|Object
name|scSet
init|=
name|sharedState
operator|.
name|get
argument_list|(
name|SHARED_KEY_CREDENTIALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|scSet
operator|instanceof
name|Set
condition|)
block|{
for|for
control|(
name|Object
name|sc
range|:
operator|(
name|Set
operator|)
name|scSet
control|)
block|{
if|if
condition|(
name|sc
operator|instanceof
name|Credentials
condition|)
block|{
name|sharedCredentials
operator|.
name|add
argument_list|(
operator|(
name|Credentials
operator|)
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Login: Invalid value for share state entry "
operator|+
name|SHARED_KEY_CREDENTIALS
operator|+
literal|". Set of Credentials expected."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sharedCredentials
return|;
block|}
specifier|private
name|boolean
name|supportsCredentials
parameter_list|()
block|{
for|for
control|(
name|Credentials
name|creds
range|:
name|credentials
control|)
block|{
if|if
condition|(
name|isSupportedCredentials
argument_list|(
name|creds
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isSupportedCredentials
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
block|{
return|return
name|SUPPORTED_CREDENTIALS
operator|.
name|contains
argument_list|(
name|credentials
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Principal
name|getPrincipal
parameter_list|(
name|Credentials
name|credentials
parameter_list|,
name|PrincipalProvider
name|principalProvider
parameter_list|)
block|{
name|Principal
name|principal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isSupportedCredentials
argument_list|(
name|credentials
argument_list|)
condition|)
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|SimpleCredentials
condition|)
block|{
name|String
name|userID
init|=
operator|(
operator|(
name|SimpleCredentials
operator|)
name|credentials
operator|)
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|principal
operator|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
name|userID
argument_list|)
expr_stmt|;
comment|// FIXME
block|}
elseif|else
if|if
condition|(
name|credentials
operator|instanceof
name|GuestCredentials
condition|)
block|{
name|principal
operator|=
name|principalProvider
operator|.
name|getPrincipal
argument_list|(
literal|"anonymous"
argument_list|)
expr_stmt|;
comment|// FIXME
block|}
elseif|else
if|if
condition|(
name|credentials
operator|instanceof
name|TokenCredentials
condition|)
block|{
comment|// TODO
block|}
block|}
return|return
name|principal
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|()
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|PrincipalProvider
name|principalProvider
init|=
name|getPrincipalProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|principalProvider
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Credentials
name|creds
range|:
name|credentials
control|)
block|{
name|Principal
name|p
init|=
name|getPrincipal
argument_list|(
name|creds
argument_list|,
name|principalProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|principals
operator|.
name|addAll
argument_list|(
name|principalProvider
operator|.
name|getGroupMembership
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Commit: Cannot retrieve principal for Credentials '{}'."
argument_list|,
name|creds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Commit: Cannot retrieve principals. No principal provider configured."
argument_list|)
expr_stmt|;
block|}
return|return
name|principals
return|;
block|}
specifier|private
name|PrincipalProvider
name|getPrincipalProvider
parameter_list|()
block|{
name|PrincipalProvider
name|principalProvider
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|callbackHandler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|PrincipalProviderCallback
name|principalCallBack
init|=
operator|new
name|PrincipalProviderCallback
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|principalCallBack
block|}
argument_list|)
expr_stmt|;
name|principalProvider
operator|=
name|principalCallBack
operator|.
name|getPrincipalProvider
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|principalProvider
return|;
block|}
block|}
end_class

end_unit

