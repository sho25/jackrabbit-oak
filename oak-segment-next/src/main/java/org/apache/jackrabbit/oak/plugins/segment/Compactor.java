begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|compaction
operator|.
name|CompactionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ApplyDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tool for compacting segments.  */
end_comment

begin_class
specifier|public
class|class
name|Compactor
block|{
comment|/** Logger instance */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Compactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|SegmentWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|ProgressTracker
name|progress
init|=
operator|new
name|ProgressTracker
argument_list|()
decl_stmt|;
comment|/**      * Allows the cancellation of the compaction process. If this {@code      * Supplier} returns {@code true}, this compactor will cancel compaction and      * return a partial {@code SegmentNodeState} containing the changes      * compacted before the cancellation.      */
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
decl_stmt|;
specifier|public
name|Compactor
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|)
block|{
name|this
argument_list|(
name|tracker
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Compactor
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|tracker
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|cancel
operator|=
name|cancel
expr_stmt|;
block|}
specifier|public
name|Compactor
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
name|CompactionStrategy
name|compactionStrategy
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|createSegmentWriter
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|cancel
operator|=
name|cancel
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|SegmentWriter
name|createSegmentWriter
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|)
block|{
return|return
operator|new
name|SegmentWriter
argument_list|(
name|tracker
operator|.
name|getStore
argument_list|()
argument_list|,
name|tracker
operator|.
name|getSegmentVersion
argument_list|()
argument_list|,
operator|new
name|SegmentBufferWriter
argument_list|(
name|tracker
operator|.
name|getStore
argument_list|()
argument_list|,
name|tracker
operator|.
name|getSegmentVersion
argument_list|()
argument_list|,
literal|"c"
argument_list|,
name|tracker
operator|.
name|getGcGen
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Compact the differences between a {@code before} and a {@code after}      * on top of an {@code onto} state.      * @param before  the before state      * @param after   the after state      * @param onto    the onto state      * @return  the compacted state      */
specifier|public
name|SegmentNodeState
name|compact
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeState
name|onto
parameter_list|)
throws|throws
name|IOException
block|{
name|progress
operator|.
name|start
argument_list|()
expr_stmt|;
name|SegmentNodeBuilder
name|builder
init|=
operator|new
name|SegmentNodeBuilder
argument_list|(
name|writer
operator|.
name|writeNode
argument_list|(
name|onto
argument_list|)
argument_list|,
name|writer
argument_list|)
decl_stmt|;
operator|new
name|CompactDiff
argument_list|(
name|builder
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|compacted
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|progress
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|compacted
return|;
block|}
specifier|private
class|class
name|CompactDiff
extends|extends
name|ApplyDiff
block|{
specifier|private
name|IOException
name|exception
decl_stmt|;
comment|/**          * Current processed path, or null if the trace log is not enabled at          * the beginning of the compaction call. The null check will also be          * used to verify if a trace log will be needed or not          */
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
name|CompactDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|CompactDiff
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|boolean
name|diff
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
operator|new
name|CancelableDiff
argument_list|(
name|this
argument_list|,
name|cancel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
try|try
block|{
name|progress
operator|.
name|onProperty
argument_list|(
literal|"propertyAdded"
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyAdded
argument_list|(
name|writer
operator|.
name|writeProperty
argument_list|(
name|after
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
try|try
block|{
name|progress
operator|.
name|onProperty
argument_list|(
literal|"propertyChanged"
argument_list|,
name|path
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|writer
operator|.
name|writeProperty
argument_list|(
name|after
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|progress
operator|.
name|onNode
argument_list|(
literal|"childNodeAdded"
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|super
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|writer
operator|.
name|writeNode
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|progress
operator|.
name|onNode
argument_list|(
literal|"childNodeChanged"
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompactDiff
argument_list|(
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ProgressTracker
block|{
specifier|private
specifier|final
name|long
name|logAt
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"compaction-progress-log"
argument_list|,
literal|150000
argument_list|)
decl_stmt|;
specifier|private
name|long
name|start
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nodes
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|properties
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|binaries
init|=
literal|0
decl_stmt|;
name|void
name|start
parameter_list|()
block|{
name|nodes
operator|=
literal|0
expr_stmt|;
name|properties
operator|=
literal|0
expr_stmt|;
name|binaries
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|void
name|onNode
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} {}/{}"
argument_list|,
name|msg
argument_list|,
name|path
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|nodes
operator|%
name|logAt
operator|==
literal|0
condition|)
block|{
name|logProgress
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|onProperty
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|path
parameter_list|,
name|PropertyState
name|propertyState
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} {}/{}"
argument_list|,
name|msg
argument_list|,
name|path
argument_list|,
name|propertyState
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|properties
operator|++
expr_stmt|;
block|}
name|void
name|onBinary
parameter_list|()
block|{
name|binaries
operator|++
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
block|{
name|logProgress
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logProgress
parameter_list|(
name|long
name|start
parameter_list|,
name|boolean
name|done
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Compacted {} nodes, {} properties, {} binaries in {} ms."
argument_list|,
name|nodes
argument_list|,
name|properties
argument_list|,
name|binaries
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Finished compaction: {} nodes, {} properties, {} binaries."
argument_list|,
name|nodes
argument_list|,
name|properties
argument_list|,
name|binaries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

