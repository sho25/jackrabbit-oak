begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * {@code GlobPattern} defines a simplistic pattern matching. It consists  * of a mandatory (leading) path and an optional "glob" that may contain one or  * more wildcard characters ("{@code *}") according to the glob matching  * defined by {@link javax.jcr.Node#getNodes(String[])}. In contrast to that  * method the {@code GlobPattern} operates on path (not only names).  *<p>  *  *<p>  * Please note the following special cases:  *<pre>  * NodePath     |   Restriction   |   Matches  * -----------------------------------------------------------------------------  * /foo         |   null          |   matches /foo and all children of /foo  * /foo         |   ""            |   matches /foo only  *</pre>  *</p>  *  *<p>  * Examples including wildcard char:  *<pre>  * NodePath = "/foo"  * Restriction   |   Matches  * -----------------------------------------------------------------------------  *&#42;         |   all siblings of foo and foo's and the siblings' descendants  * /&#42;cat     |   all children of /foo whose path ends with "cat"  * /&#42;/cat    |   all non-direct descendants of /foo named "cat"  * /cat&#42;     |   all descendant path of /foo that have the direct foo-descendant segment starting with "cat"  *&#42;cat      |   all siblings and descendants of foo that have a name ending with cat  *&#42;/cat     |   all descendants of /foo and foo's siblings that have a name segment "cat"  * cat/&#42;     |   all descendants of '/foocat'  * /cat/&#42;    |   all descendants of '/foo/cat'  *&#42;cat/&#42;    |   all descendants of /foo that have an intermediate segment ending with 'cat'  *</pre>  *</p>  */
end_comment

begin_class
specifier|final
class|class
name|GlobPattern
implements|implements
name|RestrictionPattern
block|{
specifier|private
specifier|static
specifier|final
name|char
name|WILDCARD_CHAR
init|=
literal|'*'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_WILDCARD
init|=
literal|20
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|restriction
decl_stmt|;
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|private
name|GlobPattern
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|String
name|restriction
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|restriction
operator|=
name|restriction
expr_stmt|;
if|if
condition|(
name|restriction
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
name|int
name|lastPos
init|=
name|restriction
operator|.
name|lastIndexOf
argument_list|(
name|WILDCARD_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPos
operator|>=
literal|0
condition|)
block|{
name|String
name|end
decl_stmt|;
if|if
condition|(
name|lastPos
operator|!=
name|restriction
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|restriction
operator|.
name|substring
argument_list|(
name|lastPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
literal|null
expr_stmt|;
block|}
name|pattern
operator|=
operator|new
name|WildcardPattern
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
operator|new
name|PathPattern
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pattern
operator|=
operator|new
name|PathPattern
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|GlobPattern
name|create
parameter_list|(
annotation|@
name|Nonnull
name|String
name|nodePath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|restrictions
parameter_list|)
block|{
return|return
operator|new
name|GlobPattern
argument_list|(
name|nodePath
argument_list|,
name|restrictions
argument_list|)
return|;
block|}
specifier|static
name|void
name|validate
parameter_list|(
annotation|@
name|Nonnull
name|String
name|restriction
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|restriction
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|WILDCARD_CHAR
operator|==
name|restriction
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|>
name|MAX_WILDCARD
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Number of wildcards in rep:glob exceeds allowed complexity."
argument_list|)
throw|;
block|}
block|}
block|}
comment|//-------------------------------------------------< RestrictionPattern>---
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|)
block|{
name|String
name|itemPath
init|=
operator|(
name|property
operator|==
literal|null
operator|)
condition|?
name|tree
operator|.
name|getPath
argument_list|()
else|:
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|matches
argument_list|(
name|itemPath
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matches
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
comment|// repository level permissions never match any glob pattern
return|return
literal|false
return|;
block|}
comment|//-------------------------------------------------------------< Object>---
comment|/**      * @see Object#hashCode()      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|path
argument_list|,
name|restriction
argument_list|)
return|;
block|}
comment|/**      * @see Object#toString()      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|path
operator|+
literal|" : "
operator|+
name|restriction
return|;
block|}
comment|/**      * @see Object#equals(Object)      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|GlobPattern
condition|)
block|{
name|GlobPattern
name|other
init|=
operator|(
name|GlobPattern
operator|)
name|obj
decl_stmt|;
return|return
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
operator|&&
name|restriction
operator|.
name|equals
argument_list|(
name|other
operator|.
name|restriction
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|//------------------------------------------------------< inner classes>---
comment|/**      * Base for PathPattern and WildcardPattern      */
specifier|private
specifier|abstract
class|class
name|Pattern
block|{
specifier|abstract
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|toMatch
parameter_list|)
function_decl|;
block|}
comment|/**      * Path pattern: The restriction is missing or doesn't contain any wildcard character.      */
specifier|private
specifier|final
class|class
name|PathPattern
extends|extends
name|Pattern
block|{
specifier|private
specifier|final
name|String
name|patternStr
decl_stmt|;
specifier|private
name|PathPattern
parameter_list|(
annotation|@
name|Nonnull
name|String
name|patternStr
parameter_list|)
block|{
name|this
operator|.
name|patternStr
operator|=
name|patternStr
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|toMatch
parameter_list|)
block|{
if|if
condition|(
name|patternStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|path
operator|.
name|equals
argument_list|(
name|toMatch
argument_list|)
return|;
block|}
else|else
block|{
comment|// no wildcard contained in restriction: use path defined
comment|// by path + restriction to calculate the match
return|return
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|patternStr
argument_list|,
name|toMatch
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Wildcard pattern: The specified restriction contains one or more wildcard character(s).      */
specifier|private
specifier|final
class|class
name|WildcardPattern
extends|extends
name|Pattern
block|{
specifier|private
specifier|final
name|String
name|patternEnd
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|patternChars
decl_stmt|;
specifier|private
name|WildcardPattern
parameter_list|(
annotation|@
name|Nonnull
name|String
name|patternStr
parameter_list|,
annotation|@
name|Nullable
name|String
name|patternEnd
parameter_list|)
block|{
name|patternChars
operator|=
name|patternStr
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|patternEnd
operator|=
name|patternEnd
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|matches
parameter_list|(
annotation|@
name|Nonnull
name|String
name|toMatch
parameter_list|)
block|{
if|if
condition|(
name|patternEnd
operator|!=
literal|null
operator|&&
operator|!
name|toMatch
operator|.
name|endsWith
argument_list|(
name|patternEnd
argument_list|)
condition|)
block|{
comment|// shortcut: verify if end of pattern matches end of toMatch
return|return
literal|false
return|;
block|}
name|char
index|[]
name|tm
init|=
operator|(
name|toMatch
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|?
name|toMatch
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|toMatch
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toCharArray
argument_list|()
else|:
name|toMatch
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|// shortcut didn't reveal mismatch -> need to process the internal match method.
return|return
name|matches
argument_list|(
name|patternChars
argument_list|,
literal|0
argument_list|,
name|tm
argument_list|,
literal|0
argument_list|,
name|MAX_WILDCARD
argument_list|)
return|;
block|}
comment|/**          *          * @param pattern The pattern          * @param pOff          * @param s          * @param sOff          * @return {@code true} if matches, {@code false} otherwise          */
specifier|private
name|boolean
name|matches
parameter_list|(
name|char
index|[]
name|pattern
parameter_list|,
name|int
name|pOff
parameter_list|,
name|char
index|[]
name|s
parameter_list|,
name|int
name|sOff
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
if|if
condition|(
name|cnt
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal glob pattern "
operator|+
name|GlobPattern
operator|.
name|this
argument_list|)
throw|;
block|}
name|int
name|pLength
init|=
name|pattern
operator|.
name|length
decl_stmt|;
name|int
name|sLength
init|=
name|s
operator|.
name|length
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// end of pattern reached: matches only if sOff points at the end
comment|// of the string to match.
if|if
condition|(
name|pOff
operator|>=
name|pLength
condition|)
block|{
return|return
name|sOff
operator|>=
name|sLength
return|;
block|}
comment|// the end of the string to match has been reached but pattern
comment|// doesn't have '*' at patternIndex -> no match
if|if
condition|(
name|sOff
operator|>=
name|sLength
operator|&&
name|pattern
index|[
name|pOff
index|]
operator|!=
name|WILDCARD_CHAR
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// the next character of the pattern is '*'
comment|// -> recursively test if the rest of the specified string matches
if|if
condition|(
name|pattern
index|[
name|pOff
index|]
operator|==
name|WILDCARD_CHAR
condition|)
block|{
if|if
condition|(
operator|++
name|pOff
operator|>=
name|pLength
condition|)
block|{
return|return
literal|true
return|;
block|}
name|cnt
operator|--
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|pattern
argument_list|,
name|pOff
argument_list|,
name|s
argument_list|,
name|sOff
argument_list|,
name|cnt
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|sOff
operator|>=
name|sLength
condition|)
block|{
return|return
literal|false
return|;
block|}
name|sOff
operator|++
expr_stmt|;
block|}
block|}
comment|// not yet reached end of patter nor string and not wildcard character.
comment|// the 2 strings don't match in case the characters at the current
comment|// position are not the same.
if|if
condition|(
name|pOff
operator|<
name|pLength
operator|&&
name|sOff
operator|<
name|sLength
condition|)
block|{
if|if
condition|(
name|pattern
index|[
name|pOff
index|]
operator|!=
name|s
index|[
name|sOff
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|pOff
operator|++
expr_stmt|;
name|sOff
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

