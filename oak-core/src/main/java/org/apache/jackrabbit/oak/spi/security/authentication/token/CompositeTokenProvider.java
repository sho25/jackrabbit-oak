begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Aggregates a collection of {@link TokenProvider}s into a single  * provider.  */
end_comment

begin_class
specifier|public
class|class
name|CompositeTokenProvider
implements|implements
name|TokenProvider
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|providers
decl_stmt|;
specifier|private
name|CompositeTokenProvider
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|?
extends|extends
name|TokenProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|providers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|TokenProvider
name|newInstance
parameter_list|(
annotation|@
name|Nonnull
name|TokenProvider
modifier|...
name|providers
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|Arrays
operator|.
expr|<
name|TokenProvider
operator|>
name|asList
argument_list|(
name|providers
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|TokenProvider
name|newInstance
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|?
extends|extends
name|TokenProvider
argument_list|>
name|providers
parameter_list|)
block|{
switch|switch
condition|(
name|providers
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|NULL_PROVIDER
return|;
case|case
literal|1
case|:
return|return
name|providers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
default|default:
return|return
operator|new
name|CompositeTokenProvider
argument_list|(
name|providers
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doCreateToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
for|for
control|(
name|TokenProvider
name|tp
range|:
name|providers
control|)
block|{
if|if
condition|(
name|tp
operator|.
name|doCreateToken
argument_list|(
name|credentials
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
for|for
control|(
name|TokenProvider
name|tp
range|:
name|providers
control|)
block|{
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|attributes
parameter_list|)
block|{
for|for
control|(
name|TokenProvider
name|tp
range|:
name|providers
control|)
block|{
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|createToken
argument_list|(
name|userId
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|TokenProvider
name|tp
range|:
name|providers
control|)
block|{
name|TokenInfo
name|info
init|=
name|tp
operator|.
name|getTokenInfo
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
specifier|final
name|TokenProvider
name|NULL_PROVIDER
init|=
operator|new
name|TokenProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|doCreateToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|attributes
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|token
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

