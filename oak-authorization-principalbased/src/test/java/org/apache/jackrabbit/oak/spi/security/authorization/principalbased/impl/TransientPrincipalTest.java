begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|EmptyPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TransientPrincipalTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
specifier|private
name|String
name|uid
init|=
literal|"testSystemUser"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|private
name|Principal
name|principal
decl_stmt|;
specifier|private
name|PrincipalBasedAccessControlManager
name|acMgr
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|principal
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createSystemUser
argument_list|(
name|uid
argument_list|,
name|INTERMEDIATE_PATH
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|acMgr
operator|=
operator|new
name|PrincipalBasedAccessControlManager
argument_list|(
name|getMgrProvider
argument_list|(
name|root
argument_list|)
argument_list|,
name|getFilterProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Authorizable
name|a
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_BESTEFFORT
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|PrincipalPolicyImpl
name|getApplicable
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
return|return
operator|(
name|PrincipalPolicyImpl
operator|)
name|applicable
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|applicable
index|[
literal|0
index|]
operator|)
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransientGetSetRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getApplicable
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testContentJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|PrincipalPolicyImpl
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|(
name|PrincipalPolicyImpl
operator|)
name|policies
index|[
literal|0
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getApplicable
argument_list|()
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getApplicable
argument_list|()
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
name|PrincipalPolicyImpl
name|policy
init|=
name|getApplicable
argument_list|()
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|effective
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testJcrPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupContentTrees
argument_list|(
name|TEST_OAK_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// transient modifications => not respected by permission evaluation
name|PrincipalPolicyImpl
name|policy
init|=
name|getApplicable
argument_list|()
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testJcrPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|policy
operator|.
name|getPath
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testJcrPath
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermssionProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
name|getPrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
comment|// with remapped namespaces
name|PermissionProvider
name|pp
init|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|,
name|pp
argument_list|)
expr_stmt|;
comment|// with default ns-mapping as used to create permission provider
name|Principal
name|transientWithDefaultNs
init|=
name|getConfig
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|pp
operator|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|transientWithDefaultNs
argument_list|)
argument_list|)
expr_stmt|;
comment|// since permission provider is created with a read-only root the transient principal node does not exist and
comment|// no evaluation will take place
name|assertSame
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|,
name|pp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

