begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|mlt
operator|.
name|MoreLikeThis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_comment
comment|/**  * Helper class for generating a {@link org.apache.lucene.queries.mlt.MoreLikeThisQuery} from the native query<code>String</code>  */
end_comment

begin_class
specifier|public
class|class
name|MoreLikeThisHelper
block|{
specifier|public
specifier|static
name|Query
name|getMoreLikeThis
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|mltQueryString
parameter_list|)
block|{
name|Query
name|moreLikeThisQuery
init|=
literal|null
decl_stmt|;
name|MoreLikeThis
name|mlt
init|=
operator|new
name|MoreLikeThis
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|mlt
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|text
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|fields
init|=
block|{}
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|mltQueryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|keyValuePair
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValuePair
operator|.
name|length
operator|!=
literal|2
operator|||
name|keyValuePair
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|keyValuePair
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unparsable native Lucene MLT query: "
operator|+
name|mltQueryString
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
literal|"stream.body"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|text
operator|=
name|keyValuePair
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.fl"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|fields
operator|=
name|keyValuePair
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.mindf"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMinDocFreq
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.mintf"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMinTermFreq
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.boost"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setBoost
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.qf"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setBoostFactor
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.maxdf"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMaxDocFreq
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.maxdfp"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMaxDocFreqPct
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.maxntp"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMaxNumTokensParsed
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.maxqt"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMaxQueryTerms
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.maxwl"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMaxWordLen
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mlt.minwl"
operator|.
name|equals
argument_list|(
name|keyValuePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|mlt
operator|.
name|setMinWordLen
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyValuePair
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|FieldNames
operator|.
name|PATH
operator|.
name|equals
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TermQuery
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FieldNames
operator|.
name|PATH
argument_list|,
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|top
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|top
operator|.
name|totalHits
operator|==
literal|0
condition|)
block|{
name|mlt
operator|.
name|setFieldNames
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|moreLikeThisQuery
operator|=
name|mlt
operator|.
name|like
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|,
name|mlt
operator|.
name|getFieldNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ScoreDoc
name|d
init|=
name|top
operator|.
name|scoreDocs
index|[
literal|0
index|]
decl_stmt|;
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|d
operator|.
name|doc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|FieldNames
operator|.
name|PATH
operator|.
name|equals
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|docFields
init|=
name|fieldNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fieldNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|mlt
operator|.
name|setFieldNames
argument_list|(
name|docFields
argument_list|)
expr_stmt|;
name|moreLikeThisQuery
operator|=
name|mlt
operator|.
name|like
argument_list|(
name|d
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mlt
operator|.
name|setFieldNames
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|moreLikeThisQuery
operator|=
name|mlt
operator|.
name|like
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|,
name|mlt
operator|.
name|getFieldNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|moreLikeThisQuery
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"could not handle MLT query "
operator|+
name|mltQueryString
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

