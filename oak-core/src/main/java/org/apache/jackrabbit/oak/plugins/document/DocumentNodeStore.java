begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|MERGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|FAST_DIFF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|MANY_CHILDREN_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Key
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoBlobReferenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|BlobSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|LoggingDocumentStoreWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|TimingDocumentStoreWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ChangeDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of a NodeStore on {@link DocumentStore}.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DocumentNodeStore
implements|implements
name|NodeStore
implements|,
name|RevisionContext
implements|,
name|Observable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocumentNodeStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Do not cache more than this number of children for a document.      */
specifier|static
specifier|final
name|int
name|NUM_CHILDREN_CACHE_LIMIT
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.childrenCacheLimit"
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|/**      * When trying to access revisions that are older than this many      * milliseconds, a warning is logged. The default is one minute.      */
specifier|private
specifier|static
specifier|final
name|int
name|WARN_REVISION_AGE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.revisionAge"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
comment|/**      * Enable background operations      */
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_BACKGROUND_OPS
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.documentMK.backgroundOps"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * How long to remember the relative order of old revision of all cluster      * nodes, in milliseconds. The default is one hour.      */
specifier|private
specifier|static
specifier|final
name|int
name|REMEMBER_REVISION_ORDER_MILLIS
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**      * The document store (might be used by multiple node stores).      */
specifier|protected
specifier|final
name|DocumentStore
name|store
decl_stmt|;
comment|/**      * Marker node, indicating a node does not exist at a given revision.      */
specifier|protected
specifier|final
name|DocumentNodeState
name|missing
decl_stmt|;
comment|/**      * The commit queue to coordinate the commits.      */
specifier|protected
specifier|final
name|CommitQueue
name|commitQueue
decl_stmt|;
comment|/**      * Commit queue for batch updates.      */
specifier|protected
specifier|final
name|BatchCommitQueue
name|batchCommitQueue
decl_stmt|;
comment|/**      * The change dispatcher for this node store.      */
specifier|protected
specifier|final
name|ChangeDispatcher
name|dispatcher
decl_stmt|;
comment|/**      * The delay for asynchronous operations (delayed commit propagation and      * cache update).      */
specifier|protected
name|int
name|asyncDelay
init|=
literal|1000
decl_stmt|;
comment|/**      * Whether this instance is disposed.      */
specifier|private
specifier|final
name|AtomicBoolean
name|isDisposed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|/**      * The cluster instance info.      */
specifier|private
specifier|final
name|ClusterNodeInfo
name|clusterNodeInfo
decl_stmt|;
comment|/**      * The unique cluster id, similar to the unique machine id in MongoDB.      */
specifier|private
specifier|final
name|int
name|clusterId
decl_stmt|;
comment|/**      * The comparator for revisions.      */
specifier|private
specifier|final
name|Revision
operator|.
name|RevisionComparator
name|revisionComparator
decl_stmt|;
comment|/**      * Unmerged branches of this DocumentNodeStore instance.      */
comment|// TODO at some point, open (unmerged) branches
comment|// need to be garbage collected (in-memory and on disk)
specifier|private
specifier|final
name|UnmergedBranches
name|branches
decl_stmt|;
comment|/**      * The unsaved last revisions. This contains the parents of all changed      * nodes, once those nodes are committed but the parent node itself wasn't      * committed yet. The parents are not immediately persisted as this would      * cause each commit to change all parents (including the root node), which      * would limit write scalability.      *      * Key: path, value: revision.      */
specifier|private
specifier|final
name|UnsavedModifications
name|unsavedLastRevisions
init|=
operator|new
name|UnsavedModifications
argument_list|()
decl_stmt|;
comment|/**      * Set of IDs for documents that may need to be split.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|splitCandidates
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
comment|/**      * The last known revision for each cluster instance.      *      * Key: the machine id, value: revision.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|lastKnownRevision
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The last known head revision. This is the last-known revision.      */
specifier|private
specifier|volatile
name|Revision
name|headRevision
decl_stmt|;
specifier|private
name|Thread
name|backgroundThread
decl_stmt|;
comment|/**      * Read/Write lock for background operations. Regular commits will acquire      * a shared lock, while a background write acquires an exclusive lock.      */
specifier|private
specifier|final
name|ReadWriteLock
name|backgroundOperationLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Read/Write lock to coordinate merges. In most cases merges acquire a      * shared read lock and can proceed concurrently. An exclusive write lock      * is acquired when the merge fails even after some retries and a final      * retry cycle is done.      * See {@link DocumentNodeStoreBranch#merge(CommitHook, CommitInfo)}.      */
specifier|private
specifier|final
name|ReadWriteLock
name|mergeLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Enable using simple revisions (just a counter). This feature is useful      * for testing.      */
specifier|private
name|AtomicInteger
name|simpleRevisionCounter
decl_stmt|;
comment|/**      * The node cache.      *      * Key: PathRev, value: DocumentNodeState      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|DocumentNodeState
argument_list|>
name|nodeCache
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|nodeCacheStats
decl_stmt|;
comment|/**      * Child node cache.      *      * Key: PathRev, value: Children      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|DocumentNodeState
operator|.
name|Children
argument_list|>
name|nodeChildrenCache
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|nodeChildrenCacheStats
decl_stmt|;
comment|/**      * Child doc cache.      *      * Key: StringValue, value: Children      */
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheValue
argument_list|,
name|NodeDocument
operator|.
name|Children
argument_list|>
name|docChildrenCache
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|docChildrenCacheStats
decl_stmt|;
comment|/**      * The change log to keep track of commits for diff operations.      */
specifier|private
specifier|final
name|DiffCache
name|diffCache
decl_stmt|;
comment|/**      * The blob store.      */
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
comment|/**      * The BlobSerializer.      */
specifier|private
specifier|final
name|BlobSerializer
name|blobSerializer
init|=
operator|new
name|BlobSerializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|serialize
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
if|if
condition|(
name|blob
operator|instanceof
name|BlobStoreBlob
condition|)
block|{
return|return
operator|(
operator|(
name|BlobStoreBlob
operator|)
name|blob
operator|)
operator|.
name|getBlobId
argument_list|()
return|;
block|}
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|createBlob
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
operator|.
name|getBlobId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|id
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|Checkpoints
name|checkpoints
decl_stmt|;
specifier|private
specifier|final
name|VersionGarbageCollector
name|versionGarbageCollector
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|LastRevRecoveryAgent
name|lastRevRecoveryAgent
decl_stmt|;
specifier|public
name|DocumentNodeStore
parameter_list|(
name|DocumentMK
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|builder
operator|.
name|getBlobStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|isUseSimpleRevision
argument_list|()
condition|)
block|{
name|this
operator|.
name|simpleRevisionCounter
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|DocumentStore
name|s
init|=
name|builder
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|getTiming
argument_list|()
condition|)
block|{
name|s
operator|=
operator|new
name|TimingDocumentStoreWrapper
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|getLogging
argument_list|()
condition|)
block|{
name|s
operator|=
operator|new
name|LoggingDocumentStoreWrapper
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|builder
operator|.
name|getExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|builder
operator|.
name|getClock
argument_list|()
expr_stmt|;
name|int
name|cid
init|=
name|builder
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|cid
operator|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.documentMK.clusterId"
argument_list|,
name|cid
argument_list|)
expr_stmt|;
if|if
condition|(
name|cid
operator|==
literal|0
condition|)
block|{
name|clusterNodeInfo
operator|=
name|ClusterNodeInfo
operator|.
name|getInstance
argument_list|(
name|store
argument_list|)
expr_stmt|;
comment|// TODO we should ensure revisions generated from now on
comment|// are never "older" than revisions already in the repository for
comment|// this cluster id
name|cid
operator|=
name|clusterNodeInfo
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clusterNodeInfo
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|clusterId
operator|=
name|cid
expr_stmt|;
name|this
operator|.
name|revisionComparator
operator|=
operator|new
name|Revision
operator|.
name|RevisionComparator
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|this
operator|.
name|branches
operator|=
operator|new
name|UnmergedBranches
argument_list|(
name|getRevisionComparator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncDelay
operator|=
name|builder
operator|.
name|getAsyncDelay
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionGarbageCollector
operator|=
operator|new
name|VersionGarbageCollector
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastRevRecoveryAgent
operator|=
operator|new
name|LastRevRecoveryAgent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|missing
operator|=
operator|new
name|DocumentNodeState
argument_list|(
name|this
argument_list|,
literal|"MISSING"
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
block|}
expr_stmt|;
comment|//TODO Make stats collection configurable as it add slight overhead
name|nodeCache
operator|=
name|builder
operator|.
name|buildCache
argument_list|(
name|builder
operator|.
name|getNodeCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|nodeCacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|nodeCache
argument_list|,
literal|"Document-NodeState"
argument_list|,
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|,
name|builder
operator|.
name|getNodeCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|nodeChildrenCache
operator|=
name|builder
operator|.
name|buildCache
argument_list|(
name|builder
operator|.
name|getChildrenCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|nodeChildrenCacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|nodeChildrenCache
argument_list|,
literal|"Document-NodeChildren"
argument_list|,
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|,
name|builder
operator|.
name|getChildrenCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|docChildrenCache
operator|=
name|builder
operator|.
name|buildCache
argument_list|(
name|builder
operator|.
name|getDocChildrenCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|docChildrenCacheStats
operator|=
operator|new
name|CacheStats
argument_list|(
name|docChildrenCache
argument_list|,
literal|"Document-DocChildren"
argument_list|,
name|builder
operator|.
name|getWeigher
argument_list|()
argument_list|,
name|builder
operator|.
name|getDocChildrenCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|diffCache
operator|=
name|builder
operator|.
name|getDiffCache
argument_list|()
expr_stmt|;
name|checkpoints
operator|=
operator|new
name|Checkpoints
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// check if root node exists
if|if
condition|(
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// root node is missing: repository is not initialized
name|Revision
name|head
init|=
name|newRevision
argument_list|()
decl_stmt|;
name|Commit
name|commit
init|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|n
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|this
argument_list|,
literal|"/"
argument_list|,
name|head
argument_list|)
decl_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|commit
operator|.
name|applyToDocumentStore
argument_list|()
expr_stmt|;
comment|// use dummy Revision as before
name|commit
operator|.
name|applyToCache
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|clusterId
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setHeadRevision
argument_list|(
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure _lastRev is written back to store
name|backgroundWrite
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// initialize branchCommits
name|branches
operator|.
name|init
argument_list|(
name|store
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// initial reading of the revisions of other cluster nodes
name|backgroundRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|headRevision
operator|==
literal|null
condition|)
block|{
comment|// no revision read from other cluster nodes
name|setHeadRevision
argument_list|(
name|newRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|getRevisionComparator
argument_list|()
operator|.
name|add
argument_list|(
name|headRevision
argument_list|,
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|ChangeDispatcher
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|commitQueue
operator|=
operator|new
name|CommitQueue
argument_list|(
name|this
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|batchCommitQueue
operator|=
operator|new
name|BatchCommitQueue
argument_list|(
name|store
argument_list|,
name|revisionComparator
argument_list|)
expr_stmt|;
name|backgroundThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BackgroundOperation
argument_list|(
name|this
argument_list|,
name|isDisposed
argument_list|)
argument_list|,
literal|"DocumentNodeStore background thread"
argument_list|)
expr_stmt|;
name|backgroundThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkLastRevRecovery
argument_list|()
expr_stmt|;
comment|// Renew the lease because it may have been stale
name|backgroundRenewClusterIdLease
argument_list|()
expr_stmt|;
name|backgroundThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized DocumentNodeStore with clusterNodeId: {}"
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recover _lastRev recovery if needed.      */
specifier|private
name|void
name|checkLastRevRecovery
parameter_list|()
block|{
name|lastRevRecoveryAgent
operator|.
name|recover
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|runBackgroundOperations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isDisposed
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
name|isDisposed
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|backgroundThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|clusterNodeInfo
operator|!=
literal|null
condition|)
block|{
name|clusterNodeInfo
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disposed DocumentNodeStore with clusterNodeId: {}"
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobStore
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|blobStore
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error closing blob store "
operator|+
name|blobStore
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Nonnull
name|Revision
name|getHeadRevision
parameter_list|()
block|{
return|return
name|headRevision
return|;
block|}
name|Revision
name|setHeadRevision
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|newHead
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|newHead
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|previous
init|=
name|headRevision
decl_stmt|;
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|newHead
argument_list|)
operator|.
name|equals
argument_list|(
name|previous
argument_list|)
condition|)
block|{
comment|// head changed
name|headRevision
operator|=
name|newHead
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|DocumentStore
name|getDocumentStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|/**      * Create a new revision.      *      * @return the revision      */
annotation|@
name|Nonnull
name|Revision
name|newRevision
parameter_list|()
block|{
if|if
condition|(
name|simpleRevisionCounter
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Revision
argument_list|(
name|simpleRevisionCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|,
name|clusterId
argument_list|)
return|;
block|}
return|return
name|Revision
operator|.
name|newRevision
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
comment|/**      * Creates a new commit. The caller must acknowledge the commit either with      * {@link #done(Commit, boolean, CommitInfo)} or {@link #canceled(Commit)},      * depending on the result of the commit.      *      * @param base the base revision for the commit or<code>null</code> if the      *             commit should use the current head revision as base.      * @return a new commit.      */
annotation|@
name|Nonnull
name|Commit
name|newCommit
parameter_list|(
annotation|@
name|Nullable
name|Revision
name|base
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|base
operator|=
name|headRevision
expr_stmt|;
block|}
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Commit
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|new
name|Commit
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|commitQueue
operator|.
name|createRevision
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
comment|/**      * Creates a new merge commit. The caller must acknowledge the commit either with      * {@link #done(Commit, boolean, CommitInfo)} or {@link #canceled(Commit)},      * depending on the result of the commit.      *      * @param base the base revision for the commit or<code>null</code> if the      *             commit should use the current head revision as base.      * @param numBranchCommits the number of branch commits to merge.      * @return a new merge commit.      */
annotation|@
name|Nonnull
name|MergeCommit
name|newMergeCommit
parameter_list|(
annotation|@
name|Nullable
name|Revision
name|base
parameter_list|,
name|int
name|numBranchCommits
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|base
operator|=
name|headRevision
expr_stmt|;
block|}
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MergeCommit
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|new
name|MergeCommit
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|commitQueue
operator|.
name|createRevisions
argument_list|(
name|numBranchCommits
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
name|void
name|done
parameter_list|(
annotation|@
name|Nonnull
name|Commit
name|c
parameter_list|,
name|boolean
name|isBranch
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
block|{
try|try
block|{
name|commitQueue
operator|.
name|done
argument_list|(
name|c
argument_list|,
name|isBranch
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|canceled
parameter_list|(
name|Commit
name|c
parameter_list|)
block|{
try|try
block|{
name|commitQueue
operator|.
name|canceled
argument_list|(
name|c
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|backgroundOperationLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAsyncDelay
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|this
operator|.
name|asyncDelay
operator|=
name|delay
expr_stmt|;
block|}
specifier|public
name|int
name|getAsyncDelay
parameter_list|()
block|{
return|return
name|asyncDelay
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|ClusterNodeInfo
name|getClusterInfo
parameter_list|()
block|{
return|return
name|clusterNodeInfo
return|;
block|}
specifier|public
name|CacheStats
name|getNodeCacheStats
parameter_list|()
block|{
return|return
name|nodeCacheStats
return|;
block|}
specifier|public
name|CacheStats
name|getNodeChildrenCacheStats
parameter_list|()
block|{
return|return
name|nodeChildrenCacheStats
return|;
block|}
specifier|public
name|CacheStats
name|getDocChildrenCacheStats
parameter_list|()
block|{
return|return
name|docChildrenCacheStats
return|;
block|}
specifier|public
name|int
name|getPendingWriteCount
parameter_list|()
block|{
return|return
name|unsavedLastRevisions
operator|.
name|getPaths
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Checks that revision x is newer than another revision.      *      * @param x the revision to check      * @param previous the presumed earlier revision      * @return true if x is newer      */
name|boolean
name|isRevisionNewer
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|x
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|previous
parameter_list|)
block|{
return|return
name|getRevisionComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|previous
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Enqueue the document with the given id as a split candidate.      *      * @param id the id of the document to check if it needs to be split.      */
name|void
name|addSplitCandidate
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|splitCandidates
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|void
name|copyNode
parameter_list|(
name|DocumentNodeState
name|source
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
name|moveOrCopyNode
argument_list|(
literal|false
argument_list|,
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
name|void
name|moveNode
parameter_list|(
name|DocumentNodeState
name|source
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
name|moveOrCopyNode
argument_list|(
literal|true
argument_list|,
name|source
argument_list|,
name|targetPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
name|void
name|markAsDeleted
parameter_list|(
name|DocumentNodeState
name|node
parameter_list|,
name|Commit
name|commit
parameter_list|,
name|boolean
name|subTreeAlso
parameter_list|)
block|{
name|commit
operator|.
name|removeNode
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subTreeAlso
condition|)
block|{
comment|// recurse down the tree
comment|// TODO causes issue with large number of children
for|for
control|(
name|DocumentNodeState
name|child
range|:
name|getChildNodes
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|markAsDeleted
argument_list|(
name|child
argument_list|,
name|commit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the node for the given path and revision. The returned object might      * not be modified directly.      *      * @param path the path of the node.      * @param rev the read revision.      * @return the node or<code>null</code> if the node does not exist at the      *          given revision.      */
annotation|@
name|CheckForNull
name|DocumentNodeState
name|getNode
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Revision
name|rev
parameter_list|)
block|{
name|checkRevisionAge
argument_list|(
name|checkNotNull
argument_list|(
name|rev
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|PathRev
name|key
init|=
operator|new
name|PathRev
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|node
init|=
name|nodeCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|DocumentNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentNodeState
name|n
init|=
name|readNode
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|n
operator|=
name|missing
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
name|missing
condition|?
literal|null
else|:
name|node
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|DocumentNodeState
operator|.
name|Children
name|getChildren
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|DocumentNodeState
name|parent
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|checkNotNull
argument_list|(
name|parent
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
name|DocumentNodeState
operator|.
name|NO_CHILDREN
return|;
block|}
specifier|final
name|String
name|path
init|=
name|checkNotNull
argument_list|(
name|parent
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|Revision
name|readRevision
init|=
name|parent
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
name|PathRev
name|key
init|=
name|childNodeCacheKey
argument_list|(
name|path
argument_list|,
name|readRevision
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|DocumentNodeState
operator|.
name|Children
name|children
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|children
operator|=
name|nodeChildrenCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
operator|new
name|Callable
argument_list|<
name|DocumentNodeState
operator|.
name|Children
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeState
operator|.
name|Children
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|readChildren
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Error occurred while fetching children for path "
operator|+
name|path
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|children
operator|.
name|hasMore
operator|&&
name|limit
operator|>
name|children
operator|.
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// there are potentially more children and
comment|// current cache entry contains less than requested limit
comment|// -> need to refresh entry with current limit
name|nodeChildrenCache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use this cache entry
break|break;
block|}
block|}
return|return
name|children
return|;
block|}
name|DocumentNodeState
operator|.
name|Children
name|readChildren
parameter_list|(
name|DocumentNodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
comment|// TODO use offset, to avoid O(n^2) and running out of memory
comment|// to do that, use the *name* of the last entry of the previous batch of children
comment|// as the starting point
name|String
name|path
init|=
name|parent
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|parent
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
decl_stmt|;
name|DocumentNodeState
operator|.
name|Children
name|c
init|=
operator|new
name|DocumentNodeState
operator|.
name|Children
argument_list|()
decl_stmt|;
comment|// add one to the requested limit for the raw limit
comment|// this gives us a chance to detect whether there are more
comment|// child nodes than requested.
name|int
name|rawLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|(
operator|(
name|long
operator|)
name|limit
operator|)
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|c
operator|.
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
name|docs
operator|=
name|readChildDocs
argument_list|(
name|path
argument_list|,
name|name
argument_list|,
name|rawLimit
argument_list|)
expr_stmt|;
name|int
name|numReturned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|numReturned
operator|++
expr_stmt|;
comment|// filter out deleted children
name|String
name|p
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|child
init|=
name|getNode
argument_list|(
name|p
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
block|{
comment|// add to children until limit is reached
name|c
operator|.
name|children
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|unshareString
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// enough collected and we know there are more
name|c
operator|.
name|hasMore
operator|=
literal|true
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
comment|// if we get here we have less than or equal the requested children
if|if
condition|(
name|numReturned
operator|<
name|rawLimit
condition|)
block|{
comment|// fewer documents returned than requested
comment|// -> no more documents
name|c
operator|.
name|hasMore
operator|=
literal|false
expr_stmt|;
return|return
name|c
return|;
block|}
comment|// double rawLimit for next round
name|rawLimit
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|long
operator|)
name|rawLimit
operator|)
operator|*
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the child documents at the given {@code path} and returns up to      * {@code limit} documents. The returned child documents are sorted in      * ascending child node name order. If a {@code name} is passed, the first      * child document returned is after the given name. That is, the name is the      * lower exclusive bound.      *      * @param path the path of the parent document.      * @param name the lower exclusive bound or {@code null}.      * @param limit the maximum number of child documents to return.      * @return the child documents.      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|readChildDocs
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|String
name|to
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|from
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|from
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|from
operator|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|||
name|limit
operator|>
name|NUM_CHILDREN_CACHE_LIMIT
condition|)
block|{
comment|// do not use cache when there is a lower bound name
comment|// or more than 16k child docs are requested
return|return
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|limit
argument_list|)
return|;
block|}
name|CacheValue
name|key
init|=
operator|new
name|StringValue
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// check cache
name|NodeDocument
operator|.
name|Children
name|c
init|=
name|docChildrenCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|NodeDocument
operator|.
name|Children
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|limit
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|p
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|c
operator|.
name|childNames
operator|.
name|add
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|isComplete
operator|=
name|docs
operator|.
name|size
argument_list|()
operator|<
name|limit
expr_stmt|;
name|docChildrenCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|childNames
operator|.
name|size
argument_list|()
operator|<
name|limit
operator|&&
operator|!
name|c
operator|.
name|isComplete
condition|)
block|{
comment|// fetch more and update cache
name|String
name|lastName
init|=
name|c
operator|.
name|childNames
operator|.
name|get
argument_list|(
name|c
operator|.
name|childNames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|lastPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|lastName
argument_list|)
decl_stmt|;
name|from
operator|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|lastPath
argument_list|)
expr_stmt|;
name|int
name|remainingLimit
init|=
name|limit
operator|-
name|c
operator|.
name|childNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|remainingLimit
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|Children
name|clone
init|=
name|c
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|p
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|clone
operator|.
name|childNames
operator|.
name|add
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clone
operator|.
name|isComplete
operator|=
name|docs
operator|.
name|size
argument_list|()
operator|<
name|remainingLimit
expr_stmt|;
name|docChildrenCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|clone
argument_list|)
expr_stmt|;
name|c
operator|=
name|clone
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|it
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|c
operator|.
name|childNames
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeDocument
name|apply
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|p
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Document "
operator|+
name|p
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|doc
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|childNames
operator|.
name|size
argument_list|()
operator|>
name|limit
operator|*
literal|2
condition|)
block|{
name|it
operator|=
name|Iterables
operator|.
name|limit
argument_list|(
name|it
argument_list|,
name|limit
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
comment|/**      * Returns up to {@code limit} child nodes, starting at the given      * {@code name} (exclusive).      *      * @param parent the parent node.      * @param name the name of the lower bound child node (exclusive) or      *             {@code null}, if the method should start with the first known      *             child node.      * @param limit the maximum number of child nodes to return.      * @return the child nodes.      */
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|DocumentNodeState
argument_list|>
name|getChildNodes
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|DocumentNodeState
name|parent
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
block|{
comment|// Preemptive check. If we know there are no children then
comment|// return straight away
if|if
condition|(
name|checkNotNull
argument_list|(
name|parent
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|final
name|Revision
name|readRevision
init|=
name|parent
operator|.
name|getLastRevision
argument_list|()
decl_stmt|;
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|getChildren
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|limit
argument_list|)
operator|.
name|children
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|DocumentNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocumentNodeState
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|p
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|input
argument_list|)
decl_stmt|;
return|return
name|getNode
argument_list|(
name|p
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|CheckForNull
name|DocumentNodeState
name|readNode
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|readRevision
parameter_list|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Revision
name|lastRevision
init|=
name|getPendingModifications
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|this
argument_list|,
name|readRevision
argument_list|,
name|lastRevision
argument_list|)
return|;
block|}
comment|/**      * Apply the changes of a node to the cache.      *      * @param rev the commit revision      * @param path the path      * @param isNew whether this is a new node      * @param pendingLastRev whether the node has a pending _lastRev to write      * @param isBranchCommit whether this is from a branch commit      * @param added the list of added child nodes      * @param removed the list of removed child nodes      * @param changed the list of changed child nodes.      *      */
specifier|public
name|void
name|applyChanges
parameter_list|(
name|Revision
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|isNew
parameter_list|,
name|boolean
name|pendingLastRev
parameter_list|,
name|boolean
name|isBranchCommit
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|added
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|removed
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|changed
parameter_list|,
name|DiffCache
operator|.
name|Entry
name|cacheEntry
parameter_list|)
block|{
name|UnsavedModifications
name|unsaved
init|=
name|unsavedLastRevisions
decl_stmt|;
if|if
condition|(
name|isBranchCommit
condition|)
block|{
name|Revision
name|branchRev
init|=
name|rev
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|unsaved
operator|=
name|branches
operator|.
name|getBranch
argument_list|(
name|branchRev
argument_list|)
operator|.
name|getModifications
argument_list|(
name|branchRev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isBranchCommit
operator|||
name|pendingLastRev
condition|)
block|{
comment|// write back _lastRev with background thread
name|unsaved
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNew
condition|)
block|{
name|CacheValue
name|key
init|=
name|childNodeCacheKey
argument_list|(
name|path
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocumentNodeState
operator|.
name|Children
name|c
init|=
operator|new
name|DocumentNodeState
operator|.
name|Children
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|added
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|unshareString
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|children
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|nodeChildrenCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// update diff cache
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|added
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|removed
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|changed
control|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
name|cacheEntry
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// update docChildrenCache
if|if
condition|(
operator|!
name|added
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CacheValue
name|docChildrenKey
init|=
operator|new
name|StringValue
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|Children
name|docChildren
init|=
name|docChildrenCache
operator|.
name|getIfPresent
argument_list|(
name|docChildrenKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|docChildren
operator|!=
literal|null
condition|)
block|{
name|int
name|currentSize
init|=
name|docChildren
operator|.
name|childNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|docChildren
operator|.
name|childNames
argument_list|)
decl_stmt|;
comment|// incomplete cache entries must not be updated with
comment|// names at the end of the list because there might be
comment|// a next name in DocumentStore smaller than the one added
if|if
condition|(
operator|!
name|docChildren
operator|.
name|isComplete
condition|)
block|{
for|for
control|(
name|String
name|childPath
range|:
name|added
control|)
block|{
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|higher
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|unshareString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// add all
for|for
control|(
name|String
name|childPath
range|:
name|added
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|unshareString
argument_list|(
name|PathUtils
operator|.
name|getName
argument_list|(
name|childPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// any changes?
if|if
condition|(
name|names
operator|.
name|size
argument_list|()
operator|!=
name|currentSize
condition|)
block|{
comment|// create new cache entry with updated names
name|boolean
name|complete
init|=
name|docChildren
operator|.
name|isComplete
decl_stmt|;
name|docChildren
operator|=
operator|new
name|NodeDocument
operator|.
name|Children
argument_list|()
expr_stmt|;
name|docChildren
operator|.
name|isComplete
operator|=
name|complete
expr_stmt|;
name|docChildren
operator|.
name|childNames
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|docChildrenCache
operator|.
name|put
argument_list|(
name|docChildrenKey
argument_list|,
name|docChildren
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Updates a commit root document.      *      * @param commit the updates to apply on the commit root document.      * @return the document before the update was applied or<code>null</code>      *          if the update failed because of a collision.      * @throws MicroKernelException if the update fails with an error.      */
annotation|@
name|CheckForNull
name|NodeDocument
name|updateCommitRoot
parameter_list|(
name|UpdateOp
name|commit
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// use batch commit when there are only revision and modified updates
comment|// and collision checks
name|boolean
name|batch
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Operation
argument_list|>
name|op
range|:
name|commit
operator|.
name|getChanges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|op
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|NodeDocument
operator|.
name|isRevisionsEntry
argument_list|(
name|name
argument_list|)
operator|||
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|NodeDocument
operator|.
name|COLLISIONS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|batch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|batch
condition|)
block|{
return|return
name|batchUpdateCommitRoot
argument_list|(
name|commit
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|commit
argument_list|)
return|;
block|}
block|}
specifier|private
name|NodeDocument
name|batchUpdateCommitRoot
parameter_list|(
name|UpdateOp
name|commit
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|batchCommitQueue
operator|.
name|updateDocument
argument_list|(
name|commit
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Interrupted while updating commit root document"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MicroKernelException
condition|)
block|{
throw|throw
operator|(
name|MicroKernelException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Update of commit root document failed"
decl_stmt|;
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MicroKernelException
condition|)
block|{
throw|throw
operator|(
name|MicroKernelException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Update of commit root document failed"
decl_stmt|;
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Returns the root node state at the given revision.      *      * @param revision a revision.      * @return the root node state at the given revision.      */
annotation|@
name|Nonnull
name|DocumentNodeState
name|getRoot
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|revision
parameter_list|)
block|{
name|DocumentNodeState
name|root
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"root node does not exist at revision "
operator|+
name|revision
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
annotation|@
name|Nonnull
name|DocumentNodeStoreBranch
name|createBranch
parameter_list|(
name|DocumentNodeState
name|base
parameter_list|)
block|{
name|DocumentNodeStoreBranch
name|b
init|=
name|DocumentNodeStoreBranch
operator|.
name|getCurrentBranch
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
return|return
operator|new
name|DocumentNodeStoreBranch
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|mergeLock
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|Revision
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|branchHead
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|base
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|branchHead
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|// TODO conflict handling
name|Branch
name|b
init|=
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|branchHead
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
comment|// empty branch
return|return
name|base
operator|.
name|asBranchRevision
argument_list|()
return|;
block|}
if|if
condition|(
name|b
operator|.
name|getBase
argument_list|(
name|branchHead
argument_list|)
operator|.
name|equals
argument_list|(
name|base
argument_list|)
condition|)
block|{
return|return
name|branchHead
return|;
block|}
comment|// add a pseudo commit to make sure current head of branch
comment|// has a higher revision than base of branch
name|Revision
name|head
init|=
name|newRevision
argument_list|()
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|b
operator|.
name|rebase
argument_list|(
name|head
argument_list|,
name|base
argument_list|)
expr_stmt|;
return|return
name|head
return|;
block|}
annotation|@
name|Nonnull
name|Revision
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|branchHead
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|ancestor
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|branchHead
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
name|Branch
name|b
init|=
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|branchHead
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Empty branch cannot be reset"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|getCommits
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|equals
argument_list|(
name|branchHead
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|branchHead
operator|+
literal|" is not the head "
operator|+
literal|"of a branch"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|containsCommit
argument_list|(
name|ancestor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ancestor
operator|+
literal|" is not "
operator|+
literal|"an ancestor revision of "
operator|+
name|branchHead
argument_list|)
throw|;
block|}
if|if
condition|(
name|branchHead
operator|.
name|equals
argument_list|(
name|ancestor
argument_list|)
condition|)
block|{
comment|// trivial
return|return
name|branchHead
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Commit
name|commit
init|=
name|newCommit
argument_list|(
name|branchHead
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|b
operator|.
name|getCommits
argument_list|()
operator|.
name|tailSet
argument_list|(
name|ancestor
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// first revision is the ancestor (tailSet is inclusive)
comment|// do not undo changes for this revision
name|Revision
name|base
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|operations
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Revision
name|reset
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|getRoot
argument_list|(
name|reset
argument_list|)
operator|.
name|compareAgainstBaseState
argument_list|(
name|getRoot
argument_list|(
name|base
argument_list|)
argument_list|,
operator|new
name|ResetDiff
argument_list|(
name|reset
operator|.
name|asTrunkRevision
argument_list|()
argument_list|,
name|operations
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateOp
name|rootOp
init|=
name|operations
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootOp
operator|==
literal|null
condition|)
block|{
name|rootOp
operator|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|rootOp
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|operations
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
name|rootOp
argument_list|)
expr_stmt|;
block|}
name|NodeDocument
operator|.
name|removeCollision
argument_list|(
name|rootOp
argument_list|,
name|reset
operator|.
name|asTrunkRevision
argument_list|()
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|removeRevision
argument_list|(
name|rootOp
argument_list|,
name|reset
operator|.
name|asTrunkRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// update root document first
if|if
condition|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|operations
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// clean up in-memory branch data
comment|// first revision is the ancestor (tailSet is inclusive)
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|b
operator|.
name|getCommits
argument_list|()
operator|.
name|tailSet
argument_list|(
name|ancestor
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|revs
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|b
operator|.
name|removeCommit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// successfully updating the root document can be considered
comment|// as success because the changes are not marked as committed
comment|// anymore
name|success
operator|=
literal|true
expr_stmt|;
block|}
name|operations
operator|.
name|remove
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// update remaining documents
for|for
control|(
name|UpdateOp
name|op
range|:
name|operations
operator|.
name|values
argument_list|()
control|)
block|{
name|store
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|canceled
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
argument_list|(
name|commit
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ancestor
return|;
block|}
annotation|@
name|Nonnull
name|Revision
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|branchHead
parameter_list|,
annotation|@
name|Nullable
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Branch
name|b
init|=
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|branchHead
argument_list|)
decl_stmt|;
name|Revision
name|base
init|=
name|branchHead
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|b
operator|.
name|getBase
argument_list|(
name|branchHead
argument_list|)
expr_stmt|;
block|}
name|int
name|numBranchCommits
init|=
name|b
operator|!=
literal|null
condition|?
name|b
operator|.
name|getCommits
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|1
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MergeCommit
name|commit
init|=
name|newMergeCommit
argument_list|(
name|base
argument_list|,
name|numBranchCommits
argument_list|)
decl_stmt|;
try|try
block|{
comment|// make branch commits visible
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeDocument
operator|.
name|setModified
argument_list|(
name|op
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|mergeCommits
init|=
name|commit
operator|.
name|getMergeRevisions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Revision
name|rev
range|:
name|b
operator|.
name|getCommits
argument_list|()
control|)
block|{
name|rev
operator|=
name|rev
operator|.
name|asTrunkRevision
argument_list|()
expr_stmt|;
name|String
name|commitTag
init|=
literal|"c-"
operator|+
name|mergeCommits
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|rev
argument_list|,
name|commitTag
argument_list|)
expr_stmt|;
name|op
operator|.
name|containsMapEntry
argument_list|(
name|NodeDocument
operator|.
name|COLLISIONS
argument_list|,
name|rev
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// remove from branchCommits map after successful update
name|b
operator|.
name|applyTo
argument_list|(
name|getPendingModifications
argument_list|()
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|getBranches
argument_list|()
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|MERGE
argument_list|,
literal|2
argument_list|,
literal|"Conflicting concurrent change. Update operation failed: "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// no commits in this branch -> do nothing
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|canceled
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
argument_list|(
name|commit
argument_list|,
literal|false
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|commit
operator|.
name|getRevision
argument_list|()
return|;
block|}
comment|/**      * Compares the given {@code node} against the {@code base} state and      * reports the differences on the children as a json diff string. This      * method does not report any property changes between the two nodes.      *      * @param node the node to compare.      * @param base the base node to compare against.      * @return the json diff.      */
name|String
name|diffChildren
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|DocumentNodeState
name|node
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|DocumentNodeState
name|base
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasNoChildren
argument_list|()
operator|&&
name|base
operator|.
name|hasNoChildren
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|diff
init|=
name|diffCache
operator|.
name|getChanges
argument_list|(
name|base
operator|.
name|getLastRevision
argument_list|()
argument_list|,
name|node
operator|.
name|getLastRevision
argument_list|()
argument_list|,
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|null
condition|)
block|{
name|diff
operator|=
name|diffImpl
argument_list|(
name|base
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
name|String
name|diff
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|fromRevisionId
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|toRevisionId
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|fromRevisionId
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|Revision
name|fromRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|fromRevisionId
argument_list|)
decl_stmt|;
name|Revision
name|toRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
specifier|final
name|DocumentNodeState
name|from
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
specifier|final
name|DocumentNodeState
name|to
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|==
literal|null
operator|||
name|to
operator|==
literal|null
condition|)
block|{
comment|// TODO implement correct behavior if the node does't/didn't exist
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Diff is only supported if the node exists in both cases. "
operator|+
literal|"Node [%s], fromRev [%s] -> %s, toRev [%s] -> %s"
argument_list|,
name|path
argument_list|,
name|fromRev
argument_list|,
name|from
operator|!=
literal|null
argument_list|,
name|toRev
argument_list|,
name|to
operator|!=
literal|null
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|compactDiff
init|=
name|diffCache
operator|.
name|getChanges
argument_list|(
name|fromRev
argument_list|,
name|toRev
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactDiff
operator|==
literal|null
condition|)
block|{
comment|// calculate the diff
name|compactDiff
operator|=
name|diffImpl
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|JsopWriter
name|writer
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
name|diffProperties
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|compactDiff
argument_list|)
decl_stmt|;
name|int
name|r
decl_stmt|;
do|do
block|{
name|r
operator|=
name|t
operator|.
name|read
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
case|case
literal|'^'
case|:
block|{
name|String
name|name
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|tag
argument_list|(
operator|(
name|char
operator|)
name|r
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|String
name|name
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|writer
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|r
operator|!=
name|JsopReader
operator|.
name|END
condition|)
do|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------< Observable>------------------------------------
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
return|return
name|dispatcher
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
return|;
block|}
comment|//-------------------------< NodeStore>------------------------------------
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|DocumentNodeState
name|getRoot
parameter_list|()
block|{
return|return
name|getRoot
argument_list|(
name|headRevision
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|asDocumentRootBuilder
argument_list|(
name|builder
argument_list|)
operator|.
name|merge
argument_list|(
name|commitHook
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|asDocumentRootBuilder
argument_list|(
name|builder
argument_list|)
operator|.
name|rebase
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|asDocumentRootBuilder
argument_list|(
name|builder
argument_list|)
operator|.
name|reset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStoreBlob
name|createBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobStore
operator|.
name|writeBlob
argument_list|(
name|inputStream
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the {@link Blob} with the given reference. Note that this method is meant to      * be used with secure reference obtained from Blob#reference which is different from blobId      *      * @param reference the reference of the blob.      * @return the blob.      */
annotation|@
name|Override
specifier|public
name|Blob
name|getBlob
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|String
name|blobId
init|=
name|blobStore
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"No blobId found matching reference [{}]"
argument_list|,
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Returns the {@link Blob} with the given blobId.      *      * @param blobId the blobId of the blob.      * @return the blob.      */
specifier|public
name|Blob
name|getBlobFromBlobId
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|blobStore
argument_list|,
name|blobId
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
return|return
name|checkpoints
operator|.
name|create
argument_list|(
name|lifetime
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|NodeState
name|retrieve
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
return|return
name|getRoot
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|checkpoint
argument_list|)
argument_list|)
return|;
block|}
comment|//------------------------< RevisionContext>-------------------------------
annotation|@
name|Override
specifier|public
name|UnmergedBranches
name|getBranches
parameter_list|()
block|{
return|return
name|branches
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnsavedModifications
name|getPendingModifications
parameter_list|()
block|{
return|return
name|unsavedLastRevisions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Revision
operator|.
name|RevisionComparator
name|getRevisionComparator
parameter_list|()
block|{
return|return
name|revisionComparator
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
comment|//----------------------< background operations>---------------------------
specifier|public
specifier|synchronized
name|void
name|runBackgroundOperations
parameter_list|()
block|{
if|if
condition|(
name|isDisposed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|backgroundRenewClusterIdLease
argument_list|()
expr_stmt|;
if|if
condition|(
name|simpleRevisionCounter
operator|!=
literal|null
condition|)
block|{
comment|// only when using timestamp
return|return;
block|}
if|if
condition|(
operator|!
name|ENABLE_BACKGROUND_OPS
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// split documents (does not create new revisions)
name|backgroundSplit
argument_list|()
expr_stmt|;
comment|// write back pending updates to _lastRev
name|backgroundWrite
argument_list|()
expr_stmt|;
comment|// pull in changes from other cluster nodes
name|backgroundRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isDisposed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|backgroundRenewClusterIdLease
parameter_list|()
block|{
if|if
condition|(
name|clusterNodeInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|clusterNodeInfo
operator|.
name|renewLease
argument_list|(
name|asyncDelay
argument_list|)
expr_stmt|;
block|}
comment|/**      * Perform a background read and make external changes visible.      *      * @param dispatchChange whether to dispatch external changes      *                       to {@link #dispatcher}.      */
name|void
name|backgroundRead
parameter_list|(
name|boolean
name|dispatchChange
parameter_list|)
block|{
name|String
name|id
init|=
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
name|asyncDelay
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|lastRevMap
init|=
name|doc
operator|.
name|getLastRev
argument_list|()
decl_stmt|;
name|Revision
operator|.
name|RevisionComparator
name|revisionComparator
init|=
name|getRevisionComparator
argument_list|()
decl_stmt|;
comment|// the (old) head occurred first
name|Revision
name|headSeen
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// then we saw this new revision (from another cluster node)
name|Revision
name|otherSeen
init|=
name|Revision
operator|.
name|newRevision
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
name|externalChanges
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|lastRevMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|machineId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|machineId
operator|==
name|clusterId
condition|)
block|{
comment|// ignore own lastRev
continue|continue;
block|}
name|Revision
name|r
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Revision
name|last
init|=
name|lastKnownRevision
operator|.
name|get
argument_list|(
name|machineId
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|r
operator|.
name|compareRevisionTime
argument_list|(
name|last
argument_list|)
operator|>
literal|0
condition|)
block|{
name|lastKnownRevision
operator|.
name|put
argument_list|(
name|machineId
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|externalChanges
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|otherSeen
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|externalChanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// invalidate caches
name|store
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
comment|// TODO only invalidate affected items
name|docChildrenCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
comment|// make sure update to revision comparator is atomic
comment|// and no local commit is in progress
name|backgroundOperationLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// the latest revisions of the current cluster node
comment|// happened before the latest revisions of other cluster nodes
name|revisionComparator
operator|.
name|add
argument_list|(
name|newRevision
argument_list|()
argument_list|,
name|headSeen
argument_list|)
expr_stmt|;
comment|// then we saw other revisions
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|Revision
argument_list|>
name|e
range|:
name|externalChanges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|revisionComparator
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the new head revision is after other revisions
name|setHeadRevision
argument_list|(
name|newRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dispatchChange
condition|)
block|{
name|dispatcher
operator|.
name|contentChanged
argument_list|(
name|getRoot
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|backgroundOperationLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|revisionComparator
operator|.
name|purge
argument_list|(
name|Revision
operator|.
name|getCurrentTimestamp
argument_list|()
operator|-
name|REMEMBER_REVISION_ORDER_MILLIS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|backgroundSplit
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|splitCandidates
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|id
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeDocument
name|doc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|UpdateOp
name|op
range|:
name|doc
operator|.
name|split
argument_list|(
name|this
argument_list|)
control|)
block|{
name|NodeDocument
name|before
init|=
name|store
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|NodeDocument
name|after
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split operation on {}. Size before: {}, after: {}"
argument_list|,
name|id
argument_list|,
name|before
operator|.
name|getMemory
argument_list|()
argument_list|,
name|after
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|backgroundWrite
parameter_list|()
block|{
name|unsavedLastRevisions
operator|.
name|persist
argument_list|(
name|this
argument_list|,
name|backgroundOperationLock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------< internal>---------------------------------
specifier|private
specifier|static
name|void
name|diffProperties
parameter_list|(
name|DocumentNodeState
name|from
parameter_list|,
name|DocumentNodeState
name|to
parameter_list|,
name|JsopWriter
name|w
parameter_list|)
block|{
for|for
control|(
name|PropertyState
name|fromValue
range|:
name|from
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|fromValue
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// changed or removed properties
name|PropertyState
name|toValue
init|=
name|to
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromValue
operator|.
name|equals
argument_list|(
name|toValue
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|from
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|toValue
operator|==
literal|null
condition|)
block|{
name|w
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|encodedValue
argument_list|(
name|to
operator|.
name|getPropertyAsString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|to
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
comment|// added properties
if|if
condition|(
operator|!
name|from
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|from
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|to
operator|.
name|getPropertyAsString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|diffImpl
parameter_list|(
name|DocumentNodeState
name|from
parameter_list|,
name|DocumentNodeState
name|to
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|JsopWriter
name|w
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
comment|// TODO this does not work well for large child node lists
comment|// use a document store index instead
name|int
name|max
init|=
name|MANY_CHILDREN_THRESHOLD
decl_stmt|;
name|DocumentNodeState
operator|.
name|Children
name|fromChildren
decl_stmt|,
name|toChildren
decl_stmt|;
name|fromChildren
operator|=
name|getChildren
argument_list|(
name|from
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|toChildren
operator|=
name|getChildren
argument_list|(
name|to
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fromChildren
operator|.
name|hasMore
operator|&&
operator|!
name|toChildren
operator|.
name|hasMore
condition|)
block|{
name|diffFewChildren
argument_list|(
name|w
argument_list|,
name|from
operator|.
name|getPath
argument_list|()
argument_list|,
name|fromChildren
argument_list|,
name|from
operator|.
name|getLastRevision
argument_list|()
argument_list|,
name|toChildren
argument_list|,
name|to
operator|.
name|getLastRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|FAST_DIFF
condition|)
block|{
name|diffManyChildren
argument_list|(
name|w
argument_list|,
name|from
operator|.
name|getPath
argument_list|()
argument_list|,
name|from
operator|.
name|getLastRevision
argument_list|()
argument_list|,
name|to
operator|.
name|getLastRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|fromChildren
operator|=
name|getChildren
argument_list|(
name|from
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|toChildren
operator|=
name|getChildren
argument_list|(
name|to
argument_list|,
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|diffFewChildren
argument_list|(
name|w
argument_list|,
name|from
operator|.
name|getPath
argument_list|()
argument_list|,
name|fromChildren
argument_list|,
name|from
operator|.
name|getLastRevision
argument_list|()
argument_list|,
name|toChildren
argument_list|,
name|to
operator|.
name|getLastRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|diffManyChildren
parameter_list|(
name|JsopWriter
name|w
parameter_list|,
name|String
name|path
parameter_list|,
name|Revision
name|fromRev
parameter_list|,
name|Revision
name|toRev
parameter_list|)
block|{
name|long
name|minTimestamp
init|=
name|Math
operator|.
name|min
argument_list|(
name|fromRev
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|toRev
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|minValue
init|=
name|Commit
operator|.
name|getModifiedInSecs
argument_list|(
name|minTimestamp
argument_list|)
decl_stmt|;
name|String
name|fromKey
init|=
name|Utils
operator|.
name|getKeyLowerLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|toKey
init|=
name|Utils
operator|.
name|getKeyUpperLimit
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeDocument
name|doc
range|:
name|store
operator|.
name|query
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|fromKey
argument_list|,
name|toKey
argument_list|,
name|NodeDocument
operator|.
name|MODIFIED_IN_SECS
argument_list|,
name|minValue
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// also consider nodes with not yet stored modifications (OAK-1107)
name|Revision
name|minRev
init|=
operator|new
name|Revision
argument_list|(
name|minTimestamp
argument_list|,
literal|0
argument_list|,
name|getClusterId
argument_list|()
argument_list|)
decl_stmt|;
name|addPathsForDiff
argument_list|(
name|path
argument_list|,
name|paths
argument_list|,
name|getPendingModifications
argument_list|()
argument_list|,
name|minRev
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|r
range|:
operator|new
name|Revision
index|[]
block|{
name|fromRev
block|,
name|toRev
block|}
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|Branch
name|b
init|=
name|getBranches
argument_list|()
operator|.
name|getBranch
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|addPathsForDiff
argument_list|(
name|path
argument_list|,
name|paths
argument_list|,
name|b
operator|.
name|getModifications
argument_list|(
name|r
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|DocumentNodeState
name|fromNode
init|=
name|getNode
argument_list|(
name|p
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|toNode
init|=
name|getNode
argument_list|(
name|p
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in fromRev
if|if
condition|(
name|toNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in both revisions
comment|// check if different
if|if
condition|(
operator|!
name|fromNode
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|toNode
operator|.
name|getLastRevision
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does not exist in toRev -> was removed
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|name
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// does not exist in fromRev
if|if
condition|(
name|toNode
operator|!=
literal|null
condition|)
block|{
comment|// exists in toRev
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// does not exist in either revisions
comment|// -> do nothing
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addPathsForDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|UnsavedModifications
name|pending
parameter_list|,
name|Revision
name|minRev
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|pending
operator|.
name|getPaths
argument_list|(
name|minRev
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|diffFewChildren
parameter_list|(
name|JsopWriter
name|w
parameter_list|,
name|String
name|parentPath
parameter_list|,
name|DocumentNodeState
operator|.
name|Children
name|fromChildren
parameter_list|,
name|Revision
name|fromRev
parameter_list|,
name|DocumentNodeState
operator|.
name|Children
name|toChildren
parameter_list|,
name|Revision
name|toRev
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|childrenSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|toChildren
operator|.
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|fromChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|n
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|n1
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|fromRev
argument_list|)
decl_stmt|;
name|DocumentNodeState
name|n2
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|toRev
argument_list|)
decl_stmt|;
comment|// this is not fully correct:
comment|// a change is detected if the node changed recently,
comment|// even if the revisions are well in the past
comment|// if this is a problem it would need to be changed
name|checkNotNull
argument_list|(
name|n1
argument_list|,
literal|"Node at [%s] not found for fromRev [%s]"
argument_list|,
name|path
argument_list|,
name|fromRev
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|n2
argument_list|,
literal|"Node at [%s] not found for toRev [%s]"
argument_list|,
name|path
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n1
operator|.
name|getLastRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getLastRevision
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|childrenSet
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fromChildren
operator|.
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|toChildren
operator|.
name|children
control|)
block|{
if|if
condition|(
operator|!
name|childrenSet
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|w
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|n
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|PathRev
name|childNodeCacheKey
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|readRevision
parameter_list|,
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|PathRev
argument_list|(
operator|(
name|name
operator|==
literal|null
condition|?
literal|""
else|:
name|name
operator|)
operator|+
name|path
argument_list|,
name|readRevision
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DocumentRootBuilder
name|asDocumentRootBuilder
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
operator|(
name|builder
operator|instanceof
name|DocumentRootBuilder
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"builder must be a "
operator|+
name|DocumentRootBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|DocumentRootBuilder
operator|)
name|builder
return|;
block|}
specifier|private
name|void
name|moveOrCopyNode
parameter_list|(
name|boolean
name|move
parameter_list|,
name|DocumentNodeState
name|source
parameter_list|,
name|String
name|targetPath
parameter_list|,
name|Commit
name|commit
parameter_list|)
block|{
comment|// TODO Optimize - Move logic would not work well with very move of very large subtrees
comment|// At minimum we can optimize by traversing breadth wise and collect node id
comment|// and fetch them via '$in' queries
comment|// TODO Transient Node - Current logic does not account for operations which are part
comment|// of this commit i.e. transient nodes. If its required it would need to be looked
comment|// into
name|DocumentNodeState
name|newNode
init|=
operator|new
name|DocumentNodeState
argument_list|(
name|this
argument_list|,
name|targetPath
argument_list|,
name|commit
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|source
operator|.
name|copyTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|commit
operator|.
name|addNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|move
condition|)
block|{
name|markAsDeleted
argument_list|(
name|source
argument_list|,
name|commit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DocumentNodeState
name|child
range|:
name|getChildNodes
argument_list|(
name|source
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|String
name|childName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|destChildPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|targetPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|moveOrCopyNode
argument_list|(
name|move
argument_list|,
name|child
argument_list|,
name|destChildPath
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkRevisionAge
parameter_list|(
name|Revision
name|r
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// TODO only log if there are new revisions available for the given node
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|headRevision
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r
operator|.
name|getTimestamp
argument_list|()
operator|>
name|WARN_REVISION_AGE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requesting an old revision for path "
operator|+
name|path
operator|+
literal|", "
operator|+
operator|(
operator|(
name|headRevision
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r
operator|.
name|getTimestamp
argument_list|()
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|" seconds old"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates and returns a MarkSweepGarbageCollector if the current BlobStore      * supports garbage collection      *      * @return garbage collector of the BlobStore supports GC otherwise null      * @param blobGcMaxAgeInSecs      */
annotation|@
name|CheckForNull
specifier|public
name|MarkSweepGarbageCollector
name|createBlobGarbageCollector
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|)
block|{
name|MarkSweepGarbageCollector
name|blobGC
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|blobStore
operator|instanceof
name|GarbageCollectableBlobStore
condition|)
block|{
try|try
block|{
name|blobGC
operator|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|DocumentBlobReferenceRetriever
argument_list|(
name|this
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
argument_list|,
name|executor
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error occurred while initializing "
operator|+
literal|"the MarkSweepGarbageCollector"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|blobGC
return|;
block|}
comment|/**      * A background thread.      */
specifier|static
class|class
name|BackgroundOperation
implements|implements
name|Runnable
block|{
specifier|final
name|WeakReference
argument_list|<
name|DocumentNodeStore
argument_list|>
name|ref
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isDisposed
decl_stmt|;
specifier|private
name|int
name|delay
decl_stmt|;
name|BackgroundOperation
parameter_list|(
name|DocumentNodeStore
name|nodeStore
parameter_list|,
name|AtomicBoolean
name|isDisposed
parameter_list|)
block|{
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|DocumentNodeStore
argument_list|>
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|delay
operator|=
name|nodeStore
operator|.
name|getAsyncDelay
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDisposed
operator|=
name|isDisposed
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|delay
operator|!=
literal|0
operator|&&
operator|!
name|isDisposed
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|isDisposed
init|)
block|{
try|try
block|{
name|isDisposed
operator|.
name|wait
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|DocumentNodeStore
name|nodeStore
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeStore
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|nodeStore
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Background operation failed: "
operator|+
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|delay
operator|=
name|nodeStore
operator|.
name|getAsyncDelay
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// node store not in use anymore
break|break;
block|}
block|}
block|}
block|}
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
name|BlobSerializer
name|getBlobSerializer
parameter_list|()
block|{
return|return
name|blobSerializer
return|;
block|}
comment|/**      * Returns an iterator for all the blob present in the store.      *      *<p>In some cases the iterator might implement {@link java.io.Closeable}. So      * callers should check for such iterator and close them</p>      *      * @see org.apache.jackrabbit.oak.plugins.document.mongo.MongoBlobReferenceIterator      * @return an iterator for all the blobs      */
specifier|public
name|Iterator
argument_list|<
name|Blob
argument_list|>
name|getReferencedBlobsIterator
parameter_list|()
block|{
if|if
condition|(
name|store
operator|instanceof
name|MongoDocumentStore
condition|)
block|{
return|return
operator|new
name|MongoBlobReferenceIterator
argument_list|(
name|this
argument_list|,
operator|(
name|MongoDocumentStore
operator|)
name|store
argument_list|)
return|;
block|}
return|return
operator|new
name|BlobReferenceIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|DiffCache
name|getDiffCache
parameter_list|()
block|{
return|return
name|diffCache
return|;
block|}
specifier|public
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
specifier|public
name|Checkpoints
name|getCheckpoints
parameter_list|()
block|{
return|return
name|checkpoints
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|VersionGarbageCollector
name|getVersionGarbageCollector
parameter_list|()
block|{
return|return
name|versionGarbageCollector
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|LastRevRecoveryAgent
name|getLastRevRecoveryAgent
parameter_list|()
block|{
return|return
name|lastRevRecoveryAgent
return|;
block|}
block|}
end_class

end_unit

