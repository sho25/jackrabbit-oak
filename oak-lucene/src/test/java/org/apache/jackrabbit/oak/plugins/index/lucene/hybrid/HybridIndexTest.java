begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|hybrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|DefaultExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|PumpStreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|NodeCounterEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|IndexingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LucenePropertyIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|OptionalEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|DefaultIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|reader
operator|.
name|LuceneIndexReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
operator|.
name|IndexRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|NodeTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NRTCachingDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|sameThreadExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_BINDINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
operator|.
name|defaultMountInfoProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNoException
import|;
end_import

begin_class
specifier|public
class|class
name|HybridIndexTest
extends|extends
name|AbstractQueryTest
block|{
specifier|private
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|OptionalEditorProvider
name|optionalEditorProvider
init|=
operator|new
name|OptionalEditorProvider
argument_list|()
decl_stmt|;
specifier|private
name|NRTIndexFactory
name|nrtIndexFactory
decl_stmt|;
specifier|private
name|LuceneIndexProvider
name|luceneIndexProvider
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|DocumentQueue
name|queue
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
specifier|private
name|Whiteboard
name|wb
decl_stmt|;
specifier|private
name|long
name|refreshDelta
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|luceneIndexProvider
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|executorService
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|nrtIndexFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|IndexCopier
name|copier
decl_stmt|;
try|try
block|{
name|copier
operator|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|MountInfoProvider
name|mip
init|=
name|defaultMountInfoProvider
argument_list|()
decl_stmt|;
name|nrtIndexFactory
operator|=
operator|new
name|NRTIndexFactory
argument_list|(
name|copier
argument_list|,
name|clock
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|refreshDelta
argument_list|)
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
expr_stmt|;
name|nrtIndexFactory
operator|.
name|setAssertAllResourcesClosed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LuceneIndexReaderFactory
name|indexReaderFactory
init|=
operator|new
name|DefaultIndexReaderFactory
argument_list|(
name|mip
argument_list|,
name|copier
argument_list|)
decl_stmt|;
name|IndexTracker
name|tracker
init|=
operator|new
name|IndexTracker
argument_list|(
name|indexReaderFactory
argument_list|,
name|nrtIndexFactory
argument_list|)
decl_stmt|;
name|luceneIndexProvider
operator|=
operator|new
name|LuceneIndexProvider
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|DocumentQueue
argument_list|(
literal|100
argument_list|,
name|tracker
argument_list|,
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|LuceneIndexEditorProvider
name|editorProvider
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|copier
argument_list|,
name|tracker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|editorProvider
operator|.
name|setIndexingQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|LocalIndexObserver
name|localIndexObserver
init|=
operator|new
name|LocalIndexObserver
argument_list|(
name|queue
argument_list|,
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
decl_stmt|;
name|nodeStore
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|luceneIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|luceneIndexProvider
argument_list|)
operator|.
name|with
argument_list|(
name|localIndexObserver
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|optionalEditorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeCounterEditorProvider
argument_list|()
argument_list|)
comment|//Effectively disable async indexing auto run
comment|//such that we can control run timing as per test requirement
operator|.
name|withAsyncIndexing
argument_list|(
literal|"async"
argument_list|,
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|wb
operator|=
name|oak
operator|.
name|getWhiteboard
argument_list|()
expr_stmt|;
return|return
name|oak
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hybridIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|NRT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Get initial indexing done as local indexing only work
comment|//for incremental indexing
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add new node. This would not be reflected in result as local index would not be updated
name|createPath
argument_list|(
literal|"/b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now let some time elapse such that readers can be refreshed
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|refreshDelta
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//Now recently added stuff should be visible without async indexing run
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Post async index it should still be upto date
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noTextExtractionForSyncCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|NRT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|AccessRecordingBlob
name|testBlob
init|=
operator|new
name|AccessRecordingBlob
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><msg>sky is blue</msg>"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"msg"
argument_list|,
name|testBlob
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testBlob
operator|.
name|accessCount
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'sky')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testBlob
operator|.
name|accessCount
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'sky')"
argument_list|,
name|of
argument_list|(
literal|"/test/msg/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hybridIndexSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Get initial indexing done as local indexing only work
comment|//for incremental indexing
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add new node. This should get immediately reelected as its a sync index
name|createPath
argument_list|(
literal|"/b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|usageBeforeFirstIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add new node. This should get immediately reelected as its a sync index
name|createPath
argument_list|(
literal|"/b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
literal|"/c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newNodeTypesFoundLater
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|optionalEditorProvider
operator|.
name|delegate
operator|=
operator|new
name|TypeEditorProvider
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|TestUtil
operator|.
name|TEST_NODE_TYPE
argument_list|)
argument_list|,
literal|"test nodeType"
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|b
init|=
name|createPath
argument_list|(
literal|"/b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:TestNode"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'foo'"
argument_list|,
name|of
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newNodeTypesFoundLater2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|IndexDefinitionBuilder
name|idx
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|idx
operator|.
name|indexRule
argument_list|(
literal|"oak:TestNode"
argument_list|)
operator|.
name|property
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idx
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
name|idx
operator|.
name|async
argument_list|(
literal|"async"
argument_list|,
literal|"sync"
argument_list|)
expr_stmt|;
name|idx
operator|.
name|build
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|addChild
argument_list|(
name|idxName
argument_list|)
argument_list|)
expr_stmt|;
comment|//By default nodetype index indexes every nodetype. Declare a specific list
comment|//such that it does not indexes test nodetype
name|Tree
name|nodeType
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodeType
operator|.
name|hasProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|)
condition|)
block|{
name|nodeType
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|nodeType
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
argument_list|,
name|of
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|optionalEditorProvider
operator|.
name|delegate
operator|=
operator|new
name|TypeEditorProvider
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|TestUtil
operator|.
name|TEST_NODE_TYPE
argument_list|)
argument_list|,
literal|"test nodeType"
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|b
init|=
name|createPath
argument_list|(
literal|"/b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:TestNode"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Tree
name|c
init|=
name|createPath
argument_list|(
literal|"/c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:TestNode"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"select [jcr:path] from [oak:TestNode] "
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|query
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/oak:index/hybridtest"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|query
argument_list|,
name|of
argument_list|(
literal|"/b"
argument_list|,
literal|"/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noFileLeaks
parameter_list|()
throws|throws
name|Exception
block|{
name|nrtIndexFactory
operator|.
name|setDirectoryFactory
argument_list|(
operator|new
name|NRTDirectoryFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|createNRTDir
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|,
name|File
name|indexDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|fsdir
init|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|indexDir
argument_list|,
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|//TODO make these configurable
return|return
operator|new
name|NRTCachingDirectory
argument_list|(
name|fsdir
argument_list|,
literal|0.001
argument_list|,
literal|0.001
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|createPath
argument_list|(
literal|"/a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Open file count - At start %d%n"
argument_list|,
name|getOpenFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|fileCount1
init|=
name|createTestDataAndRunAsync
argument_list|(
literal|"/content/a"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|fileCount2
init|=
name|createTestDataAndRunAsync
argument_list|(
literal|"/content/b"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|fileCount3
init|=
name|createTestDataAndRunAsync
argument_list|(
literal|"/content/c"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|fileCount4
init|=
name|createTestDataAndRunAsync
argument_list|(
literal|"/content/d"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|fileCount5
init|=
name|createTestDataAndRunAsync
argument_list|(
literal|"/content/e"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Open file count - At end %d"
argument_list|,
name|getOpenFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileCount4
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|fileCount3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|paging
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idxName
init|=
literal|"hybridtest"
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|idxName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|enableIndexingMode
argument_list|(
name|idx
argument_list|,
name|IndexingMode
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"/content"
argument_list|,
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"select [jcr:path] from [nt:base] where [foo] = 'bar'"
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|itr
init|=
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|-
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|createTestData
argument_list|(
literal|"/content2"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|LogCustomizer
name|lc
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|LucenePropertyIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|lc
operator|.
name|starting
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|Iterators
operator|.
name|size
argument_list|(
name|itr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lc
operator|.
name|getLogs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|lc
operator|.
name|getLogs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lc
operator|.
name|finished
argument_list|()
expr_stmt|;
name|int
name|totalSize
init|=
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|*
literal|2
operator|+
literal|5
decl_stmt|;
name|assertEquals
argument_list|(
name|totalSize
argument_list|,
name|count
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|createTestDataAndRunAsync
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
name|parentPath
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Open file count - Post creation of %d nodes at %s is %d%n"
argument_list|,
name|count
argument_list|,
name|parentPath
argument_list|,
name|getOpenFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|runAsyncIndex
argument_list|()
expr_stmt|;
name|long
name|openCount
init|=
name|getOpenFileCount
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Open file count - Post async run at %s is %d%n"
argument_list|,
name|parentPath
argument_list|,
name|openCount
argument_list|)
expr_stmt|;
return|return
name|openCount
return|;
block|}
specifier|private
name|void
name|createTestData
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|createPath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"testNode"
operator|+
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|long
name|getOpenFileCount
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"java.lang:type=OperatingSystem"
argument_list|)
decl_stmt|;
name|Long
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
name|val
operator|=
operator|(
name|Long
operator|)
name|server
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|,
literal|"OpenFileDescriptorCount"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AttributeNotFoundException
name|e
parameter_list|)
block|{
comment|//This attribute is only present if the os is unix i.e. when UnixOperatingSystemMXBean
comment|//is the mbean in use. If running on windows the test would be assumed to be true
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//dumpOpenFilePaths();
return|return
name|val
return|;
block|}
specifier|private
specifier|static
name|void
name|dumpOpenFilePaths
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|jvmName
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|jvmName
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|CommandLine
name|cl
init|=
operator|new
name|CommandLine
argument_list|(
literal|"/bin/sh"
argument_list|)
decl_stmt|;
name|cl
operator|.
name|addArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-c"
block|,
literal|"lsof -p "
operator|+
name|pid
operator|+
literal|" | grep '/nrt'"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DefaultExecutor
name|executor
init|=
operator|new
name|DefaultExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|setStreamHandler
argument_list|(
operator|new
name|PumpStreamHandler
argument_list|(
name|baos
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|explain
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
return|return
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|void
name|runAsyncIndex
parameter_list|()
block|{
name|AsyncIndexUpdate
name|async
init|=
operator|(
name|AsyncIndexUpdate
operator|)
name|WhiteboardUtils
operator|.
name|getService
argument_list|(
name|wb
argument_list|,
name|Runnable
operator|.
name|class
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Runnable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Runnable
name|input
parameter_list|)
block|{
return|return
name|input
operator|instanceof
name|AsyncIndexUpdate
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|async
operator|.
name|isFailing
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"AsyncIndexUpdate failed"
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Tree
name|createPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Tree
name|base
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|base
operator|=
name|base
operator|.
name|addChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
specifier|private
specifier|static
name|Tree
name|createIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
block|{
name|IndexDefinitionBuilder
name|idx
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|IndexRule
name|rule
init|=
name|idx
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propName
range|:
name|propNames
control|)
block|{
name|rule
operator|.
name|property
argument_list|(
name|propName
argument_list|)
operator|.
name|propertyIndex
argument_list|()
expr_stmt|;
block|}
name|Tree
name|idxTree
init|=
name|index
operator|.
name|getChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|idx
operator|.
name|build
argument_list|(
name|idxTree
argument_list|)
expr_stmt|;
return|return
name|idxTree
return|;
block|}
specifier|private
specifier|static
name|Tree
name|createFulltextIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|IndexDefinitionBuilder
name|idx
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|idx
operator|.
name|evaluatePathRestrictions
argument_list|()
expr_stmt|;
name|idx
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|,
literal|true
argument_list|)
operator|.
name|analyzed
argument_list|()
operator|.
name|nodeScopeIndex
argument_list|()
operator|.
name|useInExcerpt
argument_list|()
expr_stmt|;
name|Tree
name|idxTree
init|=
name|index
operator|.
name|getChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|idx
operator|.
name|build
argument_list|(
name|idxTree
argument_list|)
expr_stmt|;
return|return
name|idxTree
return|;
block|}
specifier|private
specifier|static
class|class
name|AccessRecordingBlob
extends|extends
name|ArrayBasedBlob
block|{
name|int
name|accessCount
init|=
literal|0
decl_stmt|;
specifier|public
name|AccessRecordingBlob
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
name|accessCount
operator|++
expr_stmt|;
return|return
name|super
operator|.
name|getNewStream
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

