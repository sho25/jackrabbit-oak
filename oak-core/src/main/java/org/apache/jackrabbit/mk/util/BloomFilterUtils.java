begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Bloom filter utilities.  */
end_comment

begin_class
specifier|public
class|class
name|BloomFilterUtils
block|{
comment|/**      * The multiply and shift constants for the supplemental hash function.      */
specifier|private
specifier|static
specifier|final
name|int
name|MUL
init|=
literal|2153
decl_stmt|,
name|SHIFT
init|=
literal|19
decl_stmt|;
comment|/**      * The number of bits needed per stored element.      * Using the formula m = - (n * ln(p)) / (ln(2)^2) as described in      * http://en.wikipedia.org/wiki/Bloom_filter      * (simplified, as we used a fixed K: 2).      */
specifier|private
specifier|static
specifier|final
name|double
name|BIT_FACTOR
init|=
operator|-
name|Math
operator|.
name|log
argument_list|(
literal|0.02
argument_list|)
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|/**      * Create a bloom filter array for the given number of elements.      *      * @param elementCount the number of entries      * @param maxBytes the maximum number of bytes      * @return the empty bloom filter      */
specifier|public
specifier|static
name|byte
index|[]
name|createFilter
parameter_list|(
name|int
name|elementCount
parameter_list|,
name|int
name|maxBytes
parameter_list|)
block|{
name|int
name|bits
init|=
call|(
name|int
call|)
argument_list|(
name|elementCount
operator|*
name|BIT_FACTOR
argument_list|)
operator|+
literal|7
decl_stmt|;
return|return
operator|new
name|byte
index|[
name|Math
operator|.
name|min
argument_list|(
name|maxBytes
argument_list|,
name|bits
operator|/
literal|8
argument_list|)
index|]
return|;
block|}
comment|/**      * Add the key.      *      * @param bloom the bloom filter      * @param key the key      */
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|byte
index|[]
name|bloom
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|int
name|len
init|=
name|bloom
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|h1
init|=
name|hash
argument_list|(
name|key
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|,
name|h2
init|=
name|hash
argument_list|(
name|h1
argument_list|)
decl_stmt|;
name|bloom
index|[
operator|(
name|h1
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator||=
literal|1
operator|<<
operator|(
name|h1
operator|&
literal|7
operator|)
expr_stmt|;
name|bloom
index|[
operator|(
name|h2
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator||=
literal|1
operator|<<
operator|(
name|h2
operator|&
literal|7
operator|)
expr_stmt|;
block|}
block|}
comment|/**      * Check whether the given key is probably in the set. This method never      * returns false if the key is in the set, but possibly returns true even if      * it isn't.      *      * @param bloom the bloom filter      * @param key the key      * @return true if the given key is probably in the set      */
specifier|public
specifier|static
name|boolean
name|probablyContains
parameter_list|(
name|byte
index|[]
name|bloom
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|int
name|len
init|=
name|bloom
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|h1
init|=
name|hash
argument_list|(
name|key
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|,
name|h2
init|=
name|hash
argument_list|(
name|h1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|bloom
index|[
operator|(
name|h1
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|h1
operator|&
literal|7
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
condition|)
block|{
name|x
operator|=
name|bloom
index|[
operator|(
name|h2
operator|>>>
literal|3
operator|)
operator|%
name|len
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|h2
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|x
operator|!=
literal|0
return|;
block|}
comment|/**      * Get the hash value for the given key. The returned hash value is      * stretched so that it should work well even for relatively bad hashCode      * implementations.      *      * @param key the key      * @return the hash value      */
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|int
name|oldHash
parameter_list|)
block|{
return|return
name|oldHash
operator|^
operator|(
operator|(
name|oldHash
operator|*
name|MUL
operator|)
operator|>>
name|SHIFT
operator|)
return|;
block|}
block|}
end_class

end_unit

