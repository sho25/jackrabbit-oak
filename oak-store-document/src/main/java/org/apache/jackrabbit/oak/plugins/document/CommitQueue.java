begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>CommitQueue</code> ensures a sequence of commits consistent with the  * commit revision even if commits did not complete in this sequence.  */
end_comment

begin_class
specifier|final
class|class
name|CommitQueue
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitQueue
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The default suspend timeout in milliseconds: 60'000.      */
specifier|static
specifier|final
name|long
name|DEFAULT_SUSPEND_TIMEOUT
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|Entry
argument_list|>
name|commits
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|Entry
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
comment|/**      * Map of currently suspended commits until a given Revision is visible.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Semaphore
argument_list|,
name|SuspendedCommit
argument_list|>
name|suspendedCommits
init|=
name|Maps
operator|.
name|newIdentityHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RevisionContext
name|context
decl_stmt|;
comment|/**      * The default stats collector is a noop.      */
specifier|private
name|DocumentNodeStoreStatsCollector
name|statsCollector
init|=
operator|new
name|DocumentNodeStoreStats
argument_list|(
name|StatisticsProvider
operator|.
name|NOOP
argument_list|)
decl_stmt|;
specifier|private
name|long
name|suspendTimeout
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.documentMK.suspendTimeoutMillis"
argument_list|,
name|DEFAULT_SUSPEND_TIMEOUT
argument_list|)
decl_stmt|;
name|CommitQueue
parameter_list|(
annotation|@
name|NotNull
name|RevisionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|void
name|setStatisticsCollector
parameter_list|(
annotation|@
name|NotNull
name|DocumentNodeStoreStatsCollector
name|collector
parameter_list|)
block|{
name|statsCollector
operator|=
name|checkNotNull
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
name|Revision
name|createRevision
parameter_list|()
block|{
return|return
name|createRevisions
argument_list|(
literal|1
argument_list|)
operator|.
name|first
argument_list|()
return|;
block|}
annotation|@
name|NotNull
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|createRevisions
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|num
operator|>
literal|0
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
operator|new
name|TreeSet
argument_list|<
name|Revision
argument_list|>
argument_list|(
name|StableRevisionComparator
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Revision
name|rev
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|rev
operator|=
name|context
operator|.
name|newRevision
argument_list|()
expr_stmt|;
name|revs
operator|.
name|add
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
name|commits
operator|.
name|put
argument_list|(
name|rev
argument_list|,
operator|new
name|Entry
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"created commit {}"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
name|revs
return|;
block|}
name|void
name|done
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|,
annotation|@
name|NotNull
name|Callback
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|waitUntilHeadOfQueue
argument_list|(
name|revision
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|void
name|canceled
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|rev
parameter_list|)
block|{
name|removeCommit
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|notifySuspendedCommits
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
name|boolean
name|contains
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|commits
operator|.
name|containsKey
argument_list|(
name|checkNotNull
argument_list|(
name|revision
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Suspends until for each of given revisions one of the following happens:      *<ul>      *<li>the given revision is visible from the current headRevision</li>      *<li>the given revision is canceled from the commit queue</li>      *<li>the suspend timeout is reached. See {@link #setSuspendTimeoutMillis(long)}</li>      *<li>the thread is interrupted</li>      *</ul>      *      * @param revisions the revisions to become visible.      */
name|void
name|suspendUntilAll
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
parameter_list|)
block|{
try|try
block|{
name|suspendUntilAll
argument_list|(
name|revisions
argument_list|,
name|suspendTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The suspended thread has been interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Suspends until for each of given revisions one of the following happens:      *<ul>      *<li>the given revision is visible from the current headRevision</li>      *<li>the given revision is canceled from the commit queue</li>      *<li>the suspend timeout is reached</li>      *<li>the thread is interrupted</li>      *</ul>      *      * @param revisions the revisions to become visible.      * @param suspendTimeoutMillis how long to suspend at max      * @throws InterruptedException thrown when this thread has its interrupted      * status set or was interrupted while waiting. The current thread's      * interrupted status is cleared when this exception is thrown.      */
name|void
name|suspendUntilAll
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
parameter_list|,
name|long
name|suspendTimeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Semaphore
name|s
decl_stmt|;
name|int
name|addedRevisions
decl_stmt|;
synchronized|synchronized
init|(
name|suspendedCommits
init|)
block|{
name|RevisionVector
name|headRevision
init|=
name|context
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Revision
argument_list|>
name|afterHead
init|=
operator|new
name|HashSet
argument_list|<
name|Revision
argument_list|>
argument_list|(
name|revisions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|revisions
control|)
block|{
if|if
condition|(
name|headRevision
operator|.
name|isRevisionNewer
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|afterHead
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|suspendedCommits
operator|.
name|put
argument_list|(
name|s
argument_list|,
operator|new
name|SuspendedCommit
argument_list|(
name|s
argument_list|,
name|afterHead
argument_list|)
argument_list|)
expr_stmt|;
name|addedRevisions
operator|=
name|afterHead
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|s
operator|.
name|tryAcquire
argument_list|(
name|addedRevisions
argument_list|,
name|suspendTimeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|suspendedCommits
init|)
block|{
name|suspendedCommits
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Called when the head revision accessible via the {@link RevisionContext}      * passed to constructor changed.      */
name|void
name|headRevisionChanged
parameter_list|()
block|{
name|notifySuspendedCommits
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the number of suspended threads on this commit queue.      */
name|int
name|numSuspendedThreads
parameter_list|()
block|{
synchronized|synchronized
init|(
name|suspendedCommits
init|)
block|{
return|return
name|suspendedCommits
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Sets the suspend timeout in milliseconds.      * See also {@link #suspendUntilAll(Set)}.      *      * @param timeout the timeout to set.      */
name|void
name|setSuspendTimeoutMillis
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|suspendTimeout
operator|=
name|timeout
expr_stmt|;
block|}
interface|interface
name|Callback
block|{
name|void
name|headOfQueue
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|)
function_decl|;
block|}
comment|//------------------------< internal>--------------------------------------
specifier|private
name|void
name|notifySuspendedCommits
parameter_list|()
block|{
synchronized|synchronized
init|(
name|suspendedCommits
init|)
block|{
if|if
condition|(
name|suspendedCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|RevisionVector
name|headRevision
init|=
name|context
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SuspendedCommit
argument_list|>
name|it
init|=
name|suspendedCommits
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SuspendedCommit
name|suspended
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|suspended
operator|.
name|removeRevisionsVisibleFrom
argument_list|(
name|headRevision
argument_list|)
operator|&&
name|suspended
operator|.
name|revisions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|notifySuspendedCommits
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|revision
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|revision
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|suspendedCommits
init|)
block|{
if|if
condition|(
name|suspendedCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Iterator
argument_list|<
name|SuspendedCommit
argument_list|>
name|it
init|=
name|suspendedCommits
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SuspendedCommit
name|suspended
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|suspended
operator|.
name|removeRevision
argument_list|(
name|revision
argument_list|)
operator|&&
name|suspended
operator|.
name|revisions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeCommit
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|rev
parameter_list|)
block|{
comment|// simply remove and notify next head if any
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|wasHead
init|=
name|commits
operator|.
name|firstKey
argument_list|()
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|commits
operator|.
name|remove
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed commit {}, wasHead={}"
argument_list|,
name|rev
argument_list|,
name|wasHead
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasHead
condition|)
block|{
name|notifyHead
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|waitUntilHeadOfQueue
parameter_list|(
annotation|@
name|NotNull
name|Revision
name|rev
parameter_list|,
annotation|@
name|NotNull
name|Callback
name|c
parameter_list|)
block|{
assert|assert
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
assert|;
name|boolean
name|isHead
decl_stmt|;
name|Entry
name|commitEntry
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isHead
operator|=
name|commits
operator|.
name|firstKey
argument_list|()
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|commitEntry
operator|=
name|commits
operator|.
name|get
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHead
condition|)
block|{
name|statsCollector
operator|.
name|doneWaitUntilHead
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"not head: {}, waiting..."
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|statsCollector
operator|.
name|doneWaitUntilHead
argument_list|(
name|commitEntry
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|c
operator|.
name|headOfQueue
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|commits
operator|.
name|remove
argument_list|(
name|rev
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removed {}, head is now {}"
argument_list|,
name|rev
argument_list|,
name|commits
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// notify next if there is any
name|notifyHead
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|notifyHead
parameter_list|()
block|{
if|if
condition|(
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"release {}"
argument_list|,
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|firstKey
argument_list|()
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * An entry in the commit queue.      */
specifier|private
specifier|static
specifier|final
class|class
name|Entry
block|{
comment|/**          * The revision of the commit (used for debugging).          */
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
comment|/**          * The latch. Initially set to 1, so that release() needs to be called          * once for await() to continue.          */
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Entry
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
comment|/**          * Release all threads that are waiting.          */
name|void
name|release
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**          * Wait for the latch to be released.          *          * @return the number of microseconds this method waited.          */
name|long
name|await
parameter_list|()
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"awaiting {}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// retry
block|}
block|}
return|return
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMicros
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SuspendedCommit
block|{
specifier|private
specifier|final
name|Semaphore
name|semaphore
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
decl_stmt|;
specifier|private
name|SuspendedCommit
parameter_list|(
name|Semaphore
name|semaphore
parameter_list|,
name|Set
argument_list|<
name|Revision
argument_list|>
name|revisions
parameter_list|)
block|{
name|this
operator|.
name|semaphore
operator|=
name|semaphore
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
block|}
specifier|private
name|boolean
name|removeRevisionsVisibleFrom
parameter_list|(
name|RevisionVector
name|revision
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Revision
argument_list|>
name|it
init|=
name|revisions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|revision
operator|.
name|isRevisionNewer
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
specifier|private
name|boolean
name|removeRevision
parameter_list|(
name|Revision
name|r
parameter_list|)
block|{
if|if
condition|(
name|revisions
operator|.
name|remove
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

