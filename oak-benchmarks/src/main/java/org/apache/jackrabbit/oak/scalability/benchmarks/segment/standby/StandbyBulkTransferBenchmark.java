begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|benchmarks
operator|.
name|segment
operator|.
name|standby
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|benchmarks
operator|.
name|ScalabilityBenchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityAbstractSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityAbstractSuite
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|client
operator|.
name|StandbyClientSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|jmx
operator|.
name|StandbyStatusMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
operator|.
name|StandbyServerSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Bulk transfers<code>nodeCount</code> nodes from primary to standby and  * outputs statistics related to duration, number of segments transferred and  * number of segment bytes transferred.  */
end_comment

begin_class
specifier|public
class|class
name|StandbyBulkTransferBenchmark
extends|extends
name|ScalabilityBenchmark
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScalabilityAbstractSuite
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|contextMap
init|=
name|context
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|StandbyClientSync
index|[]
name|clientSyncs
init|=
operator|(
name|StandbyClientSync
index|[]
operator|)
name|contextMap
operator|.
name|get
argument_list|(
literal|"clientSyncs"
argument_list|)
decl_stmt|;
name|StandbyServerSync
index|[]
name|serverSyncs
init|=
operator|(
name|StandbyServerSync
index|[]
operator|)
name|contextMap
operator|.
name|get
argument_list|(
literal|"serverSyncs"
argument_list|)
decl_stmt|;
name|FileStore
index|[]
name|stores
init|=
operator|(
name|FileStore
index|[]
operator|)
name|contextMap
operator|.
name|get
argument_list|(
literal|"stores"
argument_list|)
decl_stmt|;
name|stores
index|[
literal|0
index|]
operator|.
name|flush
argument_list|()
expr_stmt|;
name|serverSyncs
index|[
literal|0
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|status
init|=
operator|new
name|ObjectName
argument_list|(
name|StandbyStatusMBean
operator|.
name|JMX_NAME
operator|+
literal|",id=*"
argument_list|)
decl_stmt|;
name|ObjectName
name|clientStatus
init|=
operator|new
name|ObjectName
argument_list|(
name|clientSyncs
index|[
literal|0
index|]
operator|.
name|getMBeanName
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectName
name|serverStatus
init|=
operator|new
name|ObjectName
argument_list|(
name|serverSyncs
index|[
literal|0
index|]
operator|.
name|getMBeanName
argument_list|()
argument_list|)
decl_stmt|;
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|clientSyncs
index|[
literal|0
index|]
operator|.
name|run
argument_list|()
expr_stmt|;
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|instances
init|=
name|jmxServer
operator|.
name|queryNames
argument_list|(
name|status
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ObjectName
name|connectionStatus
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectName
name|s
range|:
name|instances
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|clientStatus
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|equals
argument_list|(
name|serverStatus
argument_list|)
condition|)
block|{
name|connectionStatus
operator|=
name|s
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|connectionStatus
operator|!=
literal|null
operator|)
assert|;
name|long
name|segments
init|=
operator|(
name|Long
operator|)
name|jmxServer
operator|.
name|getAttribute
argument_list|(
name|connectionStatus
argument_list|,
literal|"TransferredSegments"
argument_list|)
decl_stmt|;
name|long
name|bytes
init|=
operator|(
name|Long
operator|)
name|jmxServer
operator|.
name|getAttribute
argument_list|(
name|connectionStatus
argument_list|,
literal|"TransferredSegmentBytes"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bulk transfer for {} nodes finished! Segments = {}, segments size = {} bytes, time = {}"
argument_list|,
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"nodeCount"
argument_list|,
literal|100_000
argument_list|)
argument_list|,
name|segments
argument_list|,
name|bytes
argument_list|,
name|stopwatch
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

