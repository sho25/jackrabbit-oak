begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|CredentialsCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|PrincipalProviderCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|RepositoryCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|SecurityProviderCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|UserManagerCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|callback
operator|.
name|WhiteboardCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|TestPrincipalProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|DefaultWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractLoginModuleTest
block|{
specifier|private
specifier|static
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|supportedCredentials
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|supportedCredentials
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|sharedState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
specifier|private
specifier|static
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|supportedCredentials
parameter_list|,
name|CallbackHandler
name|cbh
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|supportedCredentials
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
specifier|private
specifier|static
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|supportedCredentials
parameter_list|,
name|CallbackHandler
name|cbh
parameter_list|,
name|LoginModuleMonitor
name|monitor
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|supportedCredentials
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
name|cbh
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
specifier|private
specifier|static
name|AbstractLoginModule
name|initLoginModule
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|cbh
parameter_list|,
name|LoginModuleMonitor
name|monitor
parameter_list|)
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|cbh
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|lm
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitializeWithOptions
parameter_list|()
block|{
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
name|options
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|options
argument_list|,
name|lm
operator|.
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|options
argument_list|,
name|lm
operator|.
name|options
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|options2
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
operator|new
name|Subject
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|options2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|options2
argument_list|,
name|lm
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogout
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|loginModule
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogoutSuccessClearsSubject
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"pName"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogoutSuccessReadOnlySubject
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"pName"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogoutSubjectWithoutCredentials
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"pName"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"stringNotCredentials"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|loginModule
operator|.
name|logout
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|subject
operator|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"pName"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|loginModule
operator|=
name|initLoginModule
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|loginModule
operator|.
name|logout
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogoutSubjectWithoutPrincipals
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|loginModule
operator|.
name|logout
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbort
parameter_list|()
throws|throws
name|LoginException
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|abort
argument_list|()
argument_list|)
expr_stmt|;
name|loginModule
operator|.
name|login
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|abort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortWithFailedSystemLogout
parameter_list|()
throws|throws
name|LoginException
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
operator|new
name|TestContentRepository
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// trigger creation of system-session
name|loginModule
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|loginModule
operator|.
name|abort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearStateWithSessionCloseFailing
parameter_list|()
throws|throws
name|Exception
block|{
name|TestContentRepository
name|cr
init|=
operator|new
name|TestContentRepository
argument_list|()
decl_stmt|;
name|doThrow
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
operator|.
name|when
argument_list|(
name|cr
operator|.
name|cs
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cr
argument_list|,
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|loginModule
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|loginModule
operator|.
name|clearState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|cr
operator|.
name|cs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedLoginName
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_LOGIN_NAME
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|lm
operator|.
name|getSharedLoginName
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedLoginName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedCredentials
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|SimpleCredentials
argument_list|(
literal|"test"
argument_list|,
literal|"test"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
literal|"no credentials object"
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getSharedCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromSharedState
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Credentials
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|SimpleCredentials
name|sc
init|=
operator|new
name|SimpleCredentials
argument_list|(
literal|"test"
argument_list|,
literal|"test"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_CREDENTIALS
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|SimpleCredentials
argument_list|)
expr_stmt|;
name|sharedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromSubject
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromSubjectWrongClass
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"userid"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractLoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsFromCallbackHandler
parameter_list|()
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|CredentialsCallback
condition|)
block|{
operator|(
operator|(
name|CredentialsCallback
operator|)
name|cb
operator|)
operator|.
name|setCredentials
argument_list|(
operator|new
name|TestCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
operator|instanceof
name|TestCredentials
argument_list|)
expr_stmt|;
name|lm
operator|=
name|initLoginModule
argument_list|(
name|SimpleCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsIOException
parameter_list|()
block|{
name|LoginModuleMonitor
name|monitor
init|=
name|mock
argument_list|(
name|LoginModuleMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|monitor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|loginError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsUnsupportedCallbackException
parameter_list|()
block|{
name|LoginModuleMonitor
name|monitor
init|=
name|mock
argument_list|(
name|LoginModuleMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|monitor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|loginError
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCredentialsCallbackReturnsNull
parameter_list|()
block|{
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|CredentialsCallback
condition|)
block|{
operator|(
operator|(
name|CredentialsCallback
operator|)
name|cb
operator|)
operator|.
name|setCredentials
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedPreAuthLoginEmptySharedState
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getSharedPreAuthLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedPreAuthLogin
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PreAuthenticatedLogin
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|PreAuthenticatedLogin
name|preAuthenticatedLogin
init|=
operator|new
name|PreAuthenticatedLogin
argument_list|(
literal|"userId"
argument_list|)
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_PRE_AUTH_LOGIN
argument_list|,
name|preAuthenticatedLogin
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|preAuthenticatedLogin
argument_list|,
name|loginModule
operator|.
name|getSharedPreAuthLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSharedPreAuthLoginWrongEntry
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sharedState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|sharedState
argument_list|)
decl_stmt|;
name|sharedState
operator|.
name|put
argument_list|(
name|AbstractLoginModule
operator|.
name|SHARED_KEY_PRE_AUTH_LOGIN
argument_list|,
literal|"wrongType"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getSharedPreAuthLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncompleteRepositoryCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRoot
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
operator|new
name|TestContentRepository
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Root
name|root
init|=
name|loginModule
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// root is stored as field -> second access returns the same object
name|assertSame
argument_list|(
name|root
argument_list|,
name|loginModule
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|LoginModuleStats
name|newLoginModuleStats
parameter_list|()
block|{
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|StatisticsProvider
name|sp
init|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|executor
argument_list|)
decl_stmt|;
return|return
operator|new
name|LoginModuleStats
argument_list|(
name|sp
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRootIOException
parameter_list|()
block|{
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRootUnsupportedCallbackException
parameter_list|()
block|{
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRootMissingCallbackHandler
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSecurityProvider
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
literal|null
argument_list|,
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityProvider
name|securityProvider
init|=
name|loginModule
operator|.
name|getSecurityProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
comment|// securityProvider is stored as field -> second access returns the same object
name|assertSame
argument_list|(
name|securityProvider
argument_list|,
name|loginModule
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSecurityProviderIOException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSecurityProviderUnsupportedCallbackException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSecurityProviderMissingCallbackHandler
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhiteboardFromCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
operator|new
name|DefaultWhiteboard
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Whiteboard
name|wb
init|=
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|wb
argument_list|)
expr_stmt|;
comment|// whiteboard is stored as field -> second access returns the same object
name|assertSame
argument_list|(
name|wb
argument_list|,
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhiteboardFromIncompleteCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhiteboardIOException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhiteboardUnsupportedCallbackException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhiteBoardMissingCallbackHandler
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerFromCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|UserManager
name|userManager
init|=
name|loginModule
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
comment|// usermanager is stored as field -> second access returns the same object
name|assertSame
argument_list|(
name|userManager
argument_list|,
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerFromIncompleteCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerIOException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerUnsupportedCallbackException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerWithRepositoryCallbackHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|r
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContentSession
name|cs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|UserManager
name|um
init|=
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserConfiguration
name|uc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getUserManager
argument_list|(
name|r
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|um
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
name|sp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|um
argument_list|,
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerMissingCallbackHandler
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerMissingRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUserManagerMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderFromCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
operator|new
name|TestPrincipalProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalProvider
name|principalProvider
init|=
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|principalProvider
argument_list|)
expr_stmt|;
comment|// principalProvider is stored as field -> second access returns the same object
name|assertSame
argument_list|(
name|principalProvider
argument_list|,
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderFromIncompleteCallback
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderIOException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderUnsupportedCallbackException
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderWithRepositoryCallbackHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|r
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContentSession
name|cs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalProvider
name|pp
init|=
name|mock
argument_list|(
name|PrincipalProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalConfiguration
name|pc
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalProvider
argument_list|(
name|r
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pp
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|SecurityProvider
name|sp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pc
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
name|sp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pp
argument_list|,
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderMissingCallbackHandler
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderMissingRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalProviderMissingSecurityProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentSession
name|cs
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|ContentRepository
name|cp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ContentRepository
operator|.
name|class
argument_list|)
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
operator|new
name|TestCallbackHandler
argument_list|(
name|cp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|loginModule
operator|.
name|getPrincipalProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipals
parameter_list|()
block|{
name|PrincipalProvider
name|principalProvider
init|=
operator|new
name|TestPrincipalProvider
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|principalProvider
argument_list|)
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|userId
init|=
name|TestPrincipalProvider
operator|.
name|getIDFromPrincipal
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|loginModule
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|principalProvider
operator|.
name|getPrincipals
argument_list|(
name|userId
argument_list|)
argument_list|,
name|principals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsMissingProvider
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|loginModule
operator|.
name|getPrincipals
argument_list|(
literal|"userId"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsFromPrincipal
parameter_list|()
block|{
name|PrincipalProvider
name|principalProvider
init|=
operator|new
name|TestPrincipalProvider
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|(
name|principalProvider
argument_list|)
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|principalProvider
operator|.
name|findPrincipals
argument_list|(
name|PrincipalManager
operator|.
name|SEARCH_TYPE_NOT_GROUP
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|principal
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addAll
argument_list|(
name|principalProvider
operator|.
name|getMembershipPrincipals
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|loginModule
operator|.
name|getPrincipals
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|principals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrincipalsFromPrincipalMissingProvider
parameter_list|()
block|{
name|AbstractLoginModule
name|loginModule
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
init|=
name|loginModule
operator|.
name|getPrincipals
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"principalName"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|principals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetAuthInfo
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|AuthInfo
name|authInfo
init|=
operator|new
name|AuthInfoImpl
argument_list|(
literal|"userid"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
operator|.
name|setAuthInfo
argument_list|(
name|authInfo
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AuthInfo
argument_list|>
name|fromSubject
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fromSubject
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|authInfo
argument_list|,
name|fromSubject
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetAuthInfoPreExisting
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPublicCredentials
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AuthInfoImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|AuthInfo
name|authInfo
init|=
operator|new
name|AuthInfoImpl
argument_list|(
literal|"userid"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractLoginModule
operator|.
name|setAuthInfo
argument_list|(
name|authInfo
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AuthInfo
argument_list|>
name|fromSubject
init|=
name|subject
operator|.
name|getPublicCredentials
argument_list|(
name|AuthInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fromSubject
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|authInfo
argument_list|,
name|fromSubject
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnError
parameter_list|()
block|{
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|CallbackHandler
name|cbh
init|=
name|callbacks
lambda|->
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|RepositoryCallback
condition|)
block|{
operator|(
operator|(
name|RepositoryCallback
operator|)
name|cb
operator|)
operator|.
name|setLoginModuleMonitor
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
name|cbh
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lm
operator|.
name|getLoginModuleMonitor
argument_list|()
operator|instanceof
name|LoginModuleStats
argument_list|)
expr_stmt|;
name|lm
operator|.
name|onError
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullLoginModuleMonitor
parameter_list|()
block|{
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLoginModuleMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|lm
operator|.
name|onError
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorOnGetLoginModuleMonitor
parameter_list|()
block|{
name|LoginModuleStats
name|stats
init|=
name|newLoginModuleStats
argument_list|()
decl_stmt|;
name|AbstractLoginModule
name|lm
init|=
name|initLoginModule
argument_list|(
name|TestCredentials
operator|.
name|class
argument_list|,
operator|new
name|ThrowingCallbackHandler
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|lm
operator|.
name|getLoginModuleMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|lm
operator|.
name|onError
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoginErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|TestCredentials
implements|implements
name|Credentials
block|{}
specifier|private
specifier|static
specifier|final
class|class
name|TestLoginModule
extends|extends
name|AbstractLoginModule
block|{
specifier|private
specifier|final
name|Class
name|supportedCredentialsClass
decl_stmt|;
specifier|private
name|LoginModuleMonitor
name|mon
decl_stmt|;
specifier|private
name|TestLoginModule
parameter_list|(
name|Class
name|supportedCredentialsClass
parameter_list|)
block|{
name|this
operator|.
name|supportedCredentialsClass
operator|=
name|supportedCredentialsClass
expr_stmt|;
block|}
specifier|private
name|TestLoginModule
parameter_list|(
name|Class
name|supportedCredentialsClass
parameter_list|,
name|LoginModuleMonitor
name|mon
parameter_list|)
block|{
name|this
operator|.
name|supportedCredentialsClass
operator|=
name|supportedCredentialsClass
expr_stmt|;
name|this
operator|.
name|mon
operator|=
name|mon
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|>
name|getSupportedCredentials
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|supportedCredentialsClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LoginModuleMonitor
name|getLoginModuleMonitor
parameter_list|()
block|{
if|if
condition|(
name|mon
operator|!=
literal|null
condition|)
block|{
return|return
name|mon
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getLoginModuleMonitor
argument_list|()
return|;
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|TestCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|Whiteboard
name|whiteboard
init|=
literal|null
decl_stmt|;
specifier|private
name|UserManager
name|userManager
init|=
literal|null
decl_stmt|;
specifier|private
name|PrincipalProvider
name|principalProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|ContentRepository
name|contentRepository
init|=
literal|null
decl_stmt|;
specifier|private
name|SecurityProvider
name|securityProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|workspaceName
init|=
literal|null
decl_stmt|;
specifier|private
name|TestCallbackHandler
parameter_list|()
block|{         }
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|NotNull
name|Whiteboard
name|whiteboard
parameter_list|)
block|{
name|this
operator|.
name|whiteboard
operator|=
name|whiteboard
expr_stmt|;
block|}
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|NotNull
name|UserManager
name|userManager
parameter_list|)
block|{
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
block|}
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|NotNull
name|PrincipalProvider
name|principalProvider
parameter_list|)
block|{
name|this
operator|.
name|principalProvider
operator|=
name|principalProvider
expr_stmt|;
block|}
specifier|private
name|TestCallbackHandler
parameter_list|(
annotation|@
name|Nullable
name|ContentRepository
name|contentRepository
parameter_list|,
annotation|@
name|Nullable
name|SecurityProvider
name|securityProvider
parameter_list|,
annotation|@
name|Nullable
name|String
name|workspaceName
parameter_list|)
block|{
name|this
operator|.
name|contentRepository
operator|=
name|contentRepository
expr_stmt|;
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|cb
operator|instanceof
name|WhiteboardCallback
condition|)
block|{
operator|(
operator|(
name|WhiteboardCallback
operator|)
name|cb
operator|)
operator|.
name|setWhiteboard
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cb
operator|instanceof
name|PrincipalProviderCallback
condition|)
block|{
operator|(
operator|(
name|PrincipalProviderCallback
operator|)
name|cb
operator|)
operator|.
name|setPrincipalProvider
argument_list|(
name|principalProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cb
operator|instanceof
name|UserManagerCallback
condition|)
block|{
operator|(
operator|(
name|UserManagerCallback
operator|)
name|cb
operator|)
operator|.
name|setUserManager
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cb
operator|instanceof
name|SecurityProviderCallback
condition|)
block|{
operator|(
operator|(
name|SecurityProviderCallback
operator|)
name|cb
operator|)
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cb
operator|instanceof
name|RepositoryCallback
condition|)
block|{
name|RepositoryCallback
name|rcb
init|=
operator|(
name|RepositoryCallback
operator|)
name|cb
decl_stmt|;
name|rcb
operator|.
name|setContentRepository
argument_list|(
name|contentRepository
argument_list|)
expr_stmt|;
name|rcb
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|rcb
operator|.
name|setWorkspaceName
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
name|rcb
operator|.
name|setLoginModuleMonitor
argument_list|(
name|LoginModuleMonitor
operator|.
name|NOOP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|cb
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|TestContentRepository
implements|implements
name|ContentRepository
block|{
specifier|private
name|ContentSession
name|cs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContentSession
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|ContentSession
name|login
parameter_list|(
annotation|@
name|Nullable
name|Credentials
name|credentials
parameter_list|,
annotation|@
name|Nullable
name|String
name|workspaceName
parameter_list|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|cs
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Descriptors
name|getDescriptors
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

