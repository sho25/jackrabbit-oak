begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_comment
comment|/**  * Implementation specific access control utility methods  */
end_comment

begin_class
specifier|final
class|class
name|Util
implements|implements
name|AccessControlConstants
block|{
comment|/**      *  Private constructor to avoid instantiation      */
specifier|private
name|Util
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|checkValidPrincipal
parameter_list|(
annotation|@
name|Nullable
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nonnull
name|PrincipalManager
name|principalManager
parameter_list|,
name|boolean
name|verifyExists
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|name
init|=
operator|(
name|principal
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid principal "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|verifyExists
operator|&&
operator|!
operator|(
name|principal
operator|instanceof
name|PrincipalImpl
operator|)
operator|&&
operator|!
name|principalManager
operator|.
name|hasPrincipal
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unknown principal "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|checkValidPrincipals
parameter_list|(
annotation|@
name|Nullable
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|Nonnull
name|PrincipalManager
name|principalManager
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|principals
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Valid principals expected. Found null."
argument_list|)
throw|;
block|}
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|principalManager
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isValidPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|AccessControlPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|instanceof
name|ACL
condition|)
block|{
name|String
name|path
init|=
operator|(
operator|(
name|ACL
operator|)
name|policy
operator|)
operator|.
name|getOakPath
argument_list|()
decl_stmt|;
return|return
operator|!
operator|(
operator|(
name|path
operator|==
literal|null
operator|&&
name|oakPath
operator|!=
literal|null
operator|)
operator|||
operator|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|oakPath
argument_list|)
operator|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|checkValidPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
name|isValidPolicy
argument_list|(
name|oakPath
argument_list|,
name|policy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid access control policy "
operator|+
name|policy
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isAccessControlled
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
name|String
name|mixinName
init|=
name|getMixinName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
return|return
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|mixinName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isACE
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|ReadOnlyNodeTypeManager
name|ntMgr
parameter_list|)
block|{
return|return
name|tree
operator|.
name|exists
argument_list|()
operator|&&
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|NT_REP_ACE
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getMixinName
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
return|return
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
name|MIX_REP_REPO_ACCESS_CONTROLLABLE
else|:
name|MIX_REP_ACCESS_CONTROLLABLE
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|getAclName
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
return|return
operator|(
name|oakPath
operator|==
literal|null
operator|)
condition|?
name|REP_REPO_POLICY
else|:
name|REP_POLICY
return|;
block|}
comment|/**      * Create a unique valid name for the Permission nodes to be save.      *      * @param aclTree The acl for which a new ACE name should be generated.      * @param isAllow If the ACE is allowing or denying.      * @return the name of the ACE node.      */
annotation|@
name|Nonnull
specifier|public
specifier|static
name|String
name|generateAceName
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|aclTree
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|hint
init|=
operator|(
name|isAllow
operator|)
condition|?
literal|"allow"
else|:
literal|"deny"
decl_stmt|;
name|String
name|aceName
init|=
name|hint
decl_stmt|;
while|while
condition|(
name|aclTree
operator|.
name|hasChild
argument_list|(
name|aceName
argument_list|)
condition|)
block|{
name|aceName
operator|=
name|hint
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|aceName
return|;
block|}
specifier|public
specifier|static
name|int
name|getImportBehavior
parameter_list|(
name|AuthorizationConfiguration
name|config
parameter_list|)
block|{
name|String
name|importBehaviorStr
init|=
name|config
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_ABORT
argument_list|)
decl_stmt|;
return|return
name|ImportBehavior
operator|.
name|valueFromString
argument_list|(
name|importBehaviorStr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

