begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|AbstractNodeState
operator|.
name|comparePropertiesAgainstBaseState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * A randomized test for _lastRev recovery.  */
end_comment

begin_class
specifier|public
class|class
name|LastRevRecoveryRandomizedIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LastRevRecoveryRandomizedIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEED
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|LastRevRecoveryRandomizedIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-seed"
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|MemoryDocumentStore
name|store
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|currentState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|DocumentRootBuilder
name|builder
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|pending
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ops
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with seed "
operator|+
name|SEED
argument_list|)
expr_stmt|;
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|Revision
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|ClusterNodeInfo
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|SEED
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|MemoryDocumentStore
argument_list|()
expr_stmt|;
name|ns
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setLeaseCheckMode
argument_list|(
name|LeaseCheckMode
operator|.
name|DISABLED
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
name|builder
operator|=
name|newBuilder
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|put
argument_list|(
literal|"/root"
argument_list|,
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|newBuilder
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Revision
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|ClusterNodeInfo
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|randomized
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
name|addNode
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|addLeafNode
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|removeNode
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
case|case
literal|6
case|:
name|setProperty
argument_list|()
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|merge
argument_list|()
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|purge
argument_list|()
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|bgOp
argument_list|()
expr_stmt|;
break|break;
block|}
name|checkStore
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|ops
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Seed: "
operator|+
name|SEED
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|num
operator|++
operator|+
literal|": "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|bgOp
parameter_list|()
block|{
name|ops
operator|.
name|add
argument_list|(
literal|"runBackgroundOperations()"
argument_list|)
expr_stmt|;
name|ns
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|purge
parameter_list|()
block|{
name|ops
operator|.
name|add
argument_list|(
literal|"purge()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|persist
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|merge
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|ops
operator|.
name|add
argument_list|(
literal|"merge()"
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|entry
range|:
name|pending
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentState
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentState
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|=
name|newBuilder
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|()
block|{
name|String
name|p
init|=
name|choosePath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|"p-"
operator|+
name|counter
operator|++
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
literal|"setProperty() "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|ns
init|=
name|getNode
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|ns
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"v"
argument_list|)
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|ns
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeNode
parameter_list|()
block|{
name|String
name|p
init|=
name|choosePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"/root"
argument_list|)
condition|)
block|{
return|return;
block|}
name|ops
operator|.
name|add
argument_list|(
literal|"removeNode() "
operator|+
name|p
argument_list|)
expr_stmt|;
name|getNode
argument_list|(
name|p
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addNode
parameter_list|()
block|{
name|String
name|p
init|=
name|choosePath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|elements
operator|=
name|elements
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|elements
operator|=
name|elements
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|elements
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/root"
argument_list|,
name|elements
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|elements
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|"n-"
operator|+
name|counter
operator|++
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
literal|"addNode() "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|ns
init|=
name|getNode
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
argument_list|,
name|ns
operator|.
name|child
argument_list|(
name|name
argument_list|)
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addLeafNode
parameter_list|()
block|{
name|String
name|p
init|=
name|choosePath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|"n-"
operator|+
name|counter
operator|++
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
literal|"addLeafNode() "
operator|+
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|ns
init|=
name|getNode
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|pending
operator|.
name|put
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
argument_list|,
name|ns
operator|.
name|child
argument_list|(
name|name
argument_list|)
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeBuilder
name|getNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|node
init|=
name|builder
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"node does not exist: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|String
name|choosePath
parameter_list|()
block|{
name|String
name|path
init|=
literal|"/root"
decl_stmt|;
name|String
name|next
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
name|chooseNode
argument_list|(
name|path
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|next
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|String
name|chooseNode
parameter_list|(
name|String
name|parentPath
parameter_list|)
block|{
name|NodeBuilder
name|node
init|=
name|getNode
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|int
name|numChildren
init|=
operator|(
name|int
operator|)
name|node
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|numChildren
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|k
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numChildren
argument_list|)
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|node
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|++
operator|==
name|k
condition|)
block|{
return|return
name|PathUtils
operator|.
name|concat
argument_list|(
name|parentPath
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkStore
parameter_list|()
block|{
name|MemoryDocumentStore
name|s
init|=
name|store
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// force lease expire
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|set
argument_list|(
name|ClusterNodeInfo
operator|.
name|LEASE_END_KEY
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
operator|-
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|CLUSTER_NODES
argument_list|,
name|op
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"failed to set lease end"
argument_list|)
expr_stmt|;
block|}
comment|// will trigger recovery on startup
name|DocumentNodeStore
name|dns
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setClusterId
argument_list|(
name|ns
operator|.
name|getClusterId
argument_list|()
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setLeaseCheckMode
argument_list|(
name|LeaseCheckMode
operator|.
name|DISABLED
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|s
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|states
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|NodeState
name|root
init|=
name|dns
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|compareAndTraverse
argument_list|(
name|root
argument_list|,
literal|"/root"
argument_list|,
name|states
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"missing nodes: "
operator|+
name|states
operator|.
name|keySet
argument_list|()
operator|+
literal|" (seed="
operator|+
name|SEED
operator|+
literal|")"
argument_list|,
name|states
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|dns
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|compareAndTraverse
parameter_list|(
name|NodeState
name|state
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|states
parameter_list|)
block|{
name|NodeState
name|expected
init|=
name|states
operator|.
name|remove
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"unexpected node at "
operator|+
name|path
operator|+
literal|" (seed="
operator|+
name|SEED
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
name|comparePropertiesAgainstBaseState
argument_list|(
name|state
argument_list|,
name|expected
argument_list|,
operator|new
name|DefaultNodeStateDiff
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpected property: "
operator|+
name|path
operator|+
literal|"/"
operator|+
name|after
operator|+
literal|" (seed="
operator|+
name|SEED
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyAdded
argument_list|(
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"property mismatch on node "
operator|+
name|path
operator|+
literal|" (seed="
operator|+
name|SEED
operator|+
literal|")"
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyChanged
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|fail
argument_list|(
literal|"missing property: "
operator|+
name|path
operator|+
literal|"/"
operator|+
name|before
operator|+
literal|" (seed="
operator|+
name|SEED
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|propertyDeleted
argument_list|(
name|before
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|p
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|compareAndTraverse
argument_list|(
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|p
argument_list|,
name|states
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|DocumentRootBuilder
name|newBuilder
parameter_list|(
name|DocumentNodeStore
name|store
parameter_list|)
block|{
return|return
operator|(
name|DocumentRootBuilder
operator|)
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|merge
parameter_list|(
name|NodeStore
name|ns
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|ns
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

