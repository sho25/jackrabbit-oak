begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_comment
comment|/**  * {@link TreePermission} implementations for those items in the version storage  * that are linked to a versionable node (i.e. the subtree spanned by every version  * history node. For those items, the effective permissions are defined by  * the corresponding versionable node (and it's ancestors).  */
end_comment

begin_class
class|class
name|VersionTreePermission
implements|implements
name|TreePermission
implements|,
name|VersionConstants
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|NT_NAMES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NT_VERSION
argument_list|,
name|NT_VERSIONLABELS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|versionTree
decl_stmt|;
specifier|private
specifier|final
name|TreePermission
name|versionablePermission
decl_stmt|;
name|VersionTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|versionTree
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|versionablePermission
parameter_list|)
block|{
name|this
operator|.
name|versionTree
operator|=
name|versionTree
expr_stmt|;
name|this
operator|.
name|versionablePermission
operator|=
name|versionablePermission
expr_stmt|;
block|}
name|VersionTreePermission
name|createChildPermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|versionTree
parameter_list|)
block|{
name|TreePermission
name|delegatee
decl_stmt|;
if|if
condition|(
name|JCR_FROZENNODE
operator|.
name|equals
argument_list|(
name|versionTree
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|NT_NAMES
operator|.
name|contains
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|versionTree
argument_list|)
argument_list|)
condition|)
block|{
name|delegatee
operator|=
name|versionablePermission
expr_stmt|;
block|}
else|else
block|{
name|delegatee
operator|=
name|versionablePermission
operator|.
name|getChildPermission
argument_list|(
name|versionTree
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|ImmutableTree
operator|)
name|versionTree
operator|)
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VersionTreePermission
argument_list|(
name|versionTree
argument_list|,
name|delegatee
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|childName
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|childState
parameter_list|)
block|{
return|return
name|createChildPermission
argument_list|(
operator|new
name|ImmutableTree
argument_list|(
operator|(
name|ImmutableTree
operator|)
name|versionTree
argument_list|,
name|childName
argument_list|,
name|childState
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
name|versionablePermission
operator|.
name|canRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|versionablePermission
operator|.
name|canRead
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
name|versionablePermission
operator|.
name|canReadAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
name|versionablePermission
operator|.
name|canReadProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
name|versionablePermission
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|versionablePermission
operator|.
name|isGranted
argument_list|(
name|permissions
argument_list|,
name|property
argument_list|)
return|;
block|}
block|}
end_class

end_unit

