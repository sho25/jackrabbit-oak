begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|MoveTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|CompositeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|EmptyPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ReadOnlyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|CompositeConfiguration
operator|.
name|PARAM_RANKING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_PRINCIPAL_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|NT_REP_RESTRICTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
operator|.
name|Constants
operator|.
name|PARAM_ENABLE_AGGREGATION_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalBasedAuthorizationConfigurationTest
extends|extends
name|AbstractPrincipalBasedTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEmptyConstructor
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCommitHooks
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getCommitHooks
argument_list|(
literal|"wspName"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValidators
parameter_list|()
block|{
name|List
argument_list|<
name|?
extends|extends
name|ValidatorProvider
argument_list|>
name|l
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getValidators
argument_list|(
literal|"wspName"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|MoveTracker
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrincipalPolicyValidatorProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProtectedItemImporters
parameter_list|()
block|{
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|l
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getProtectedItemImporters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrincipalPolicyImporter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryInitializer
parameter_list|()
block|{
name|RepositoryInitializer
name|ri
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getRepositoryInitializer
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|RepositoryInitializer
operator|.
name|DEFAULT
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialized
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeManager
name|nodeTypeManager
init|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
operator|new
name|String
index|[]
block|{
name|NT_REP_PRINCIPAL_POLICY
block|,
name|NT_REP_PRINCIPAL_ENTRY
block|,
name|NT_REP_RESTRICTIONS
block|}
control|)
block|{
name|assertTrue
argument_list|(
name|nodeTypeManager
operator|.
name|hasNodeType
argument_list|(
name|ntName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryInitializerInitialized
parameter_list|()
block|{
name|Root
name|r
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|CompositeConfiguration
argument_list|<
name|AuthorizationConfiguration
argument_list|>
name|cc
init|=
operator|(
name|CompositeConfiguration
operator|)
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AuthorizationConfiguration
name|ac
range|:
name|cc
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|ac
operator|instanceof
name|PrincipalBasedAuthorizationConfiguration
condition|)
block|{
name|pbac
operator|=
operator|(
name|PrincipalBasedAuthorizationConfiguration
operator|)
name|ac
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|pbac
argument_list|)
expr_stmt|;
name|RepositoryInitializer
name|ri
init|=
name|pbac
operator|.
name|getRepositoryInitializer
argument_list|()
decl_stmt|;
name|ri
operator|.
name|initialize
argument_list|(
operator|new
name|ReadOnlyBuilder
argument_list|(
name|getTreeProvider
argument_list|()
operator|.
name|asNodeState
argument_list|(
name|r
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContext
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ContextImpl
operator|.
name|INSTANCE
argument_list|,
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionProviderUnsupportedPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|FilterProvider
name|fp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
operator|.
name|getFilter
argument_list|(
name|any
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|bindFilterProvider
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
literal|"wspName"
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|,
name|pp
argument_list|)
expr_stmt|;
name|principals
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|pp
operator|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
literal|"wspName"
argument_list|,
name|principals
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|,
name|pp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Filter
name|filter
init|=
name|mock
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|filter
operator|.
name|canHandle
argument_list|(
name|any
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|filter
operator|.
name|getOakPath
argument_list|(
name|any
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/some/path"
argument_list|)
expr_stmt|;
name|FilterProvider
name|fp
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
operator|.
name|getFilter
argument_list|(
name|any
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Root
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NamePathMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|filter
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|bindFilterProvider
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
literal|"wspName"
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|instanceof
name|PrincipalBasedPermissionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionProvider2
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|bindFilterProvider
argument_list|(
name|getFilterProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestSystemUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|pbac
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
literal|"wspName"
argument_list|,
name|principals
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|instanceof
name|PrincipalBasedPermissionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAccessControlManager
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|setSecurityProvider
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|bindFilterProvider
argument_list|(
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|pbac
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|instanceof
name|PrincipalBasedAccessControlManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionProvider
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|,
name|pbac
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|setParameters
argument_list|(
name|getSecurityProvider
argument_list|()
operator|.
name|getParameters
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|rp
init|=
name|pbac
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|rp
operator|instanceof
name|RestrictionProviderImpl
operator|)
assert|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivate
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
name|getPrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|BundleContext
name|ctx
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
name|config
init|=
name|mock
argument_list|(
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|activate
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|params
init|=
name|pbac
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_RANKING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_ENABLE_AGGREGATION_FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|registerService
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|AggregationFilter
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModified
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
name|getPrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|ServiceRegistration
name|registrationMock
init|=
name|mock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|ctx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
operator|.
name|registerService
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|AggregationFilter
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registrationMock
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
name|config
init|=
name|mock
argument_list|(
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|activate
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|85
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|modified
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|params
init|=
name|pbac
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|85
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_RANKING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_ENABLE_AGGREGATION_FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ctx
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|registerService
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|AggregationFilter
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModified2
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
name|getPrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|ServiceRegistration
name|registrationMock
init|=
name|mock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|ctx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
operator|.
name|registerService
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|AggregationFilter
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registrationMock
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
name|config
init|=
name|mock
argument_list|(
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|activate
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|85
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|modified
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|params
init|=
name|pbac
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|85
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_RANKING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|PARAM_ENABLE_AGGREGATION_FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|registrationMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeactivate
parameter_list|()
block|{
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
name|getPrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|ServiceRegistration
name|registrationMock
init|=
name|mock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|ctx
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
operator|.
name|registerService
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|AggregationFilter
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|registrationMock
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
name|config
init|=
name|mock
argument_list|(
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|config
operator|.
name|configurationRanking
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|enableAggregationFilter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|activate
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|deactivate
argument_list|(
name|ctx
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|registrationMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindFilterProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|fp
init|=
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"filterProvider"
argument_list|)
decl_stmt|;
name|fp
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|bindFilterProvider
argument_list|(
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fp
operator|.
name|get
argument_list|(
name|pbac
argument_list|)
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|unbindFilterProvider
argument_list|(
name|mock
argument_list|(
name|FilterProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fp
operator|.
name|get
argument_list|(
name|pbac
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindMountInfoProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|PrincipalBasedAuthorizationConfiguration
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"mountInfoProvider"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrincipalBasedAuthorizationConfiguration
name|pbac
init|=
operator|new
name|PrincipalBasedAuthorizationConfiguration
argument_list|()
decl_stmt|;
name|pbac
operator|.
name|bindMountInfoProvider
argument_list|(
name|mock
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|pbac
argument_list|)
argument_list|)
expr_stmt|;
name|pbac
operator|.
name|unbindMountInfoProvider
argument_list|(
name|mock
argument_list|(
name|MountInfoProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|pbac
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

