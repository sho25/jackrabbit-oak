begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
operator|.
name|fromString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|tool
operator|.
name|Utils
operator|.
name|openReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsopDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Print debugging information about segments, node records and node record  * ranges.  */
end_comment

begin_class
specifier|public
class|class
name|DebugSegments
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|SEGMENT_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-f-]+)|(([0-9a-f-]+:[0-9a-f]+)(-([0-9a-f-]+:[0-9a-f]+))?)?(/.*)?"
argument_list|)
decl_stmt|;
comment|/**      * Create a builder for the {@link DebugSegments} command.      *      * @return an instance of {@link Builder}.      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Collect options for the {@link DebugSegments} command.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|File
name|path
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{
comment|// Prevent external instantiation.
block|}
comment|/**          * The path to an existing segment store. This parameter is required.          *          * @param path the path to an existing segment store.          * @return this builder.          */
specifier|public
name|Builder
name|withPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Add a segment, node record or node record range. It is mandatory to          * add at least one of a segment, node record or node record range.          *<p>          * A segment is specified by its ID, which is specified as a sequence of          * hexadecimal digits and dashes. In example, {@code          * 333dc24d-438f-4cca-8b21-3ebf67c05856}.          *<p>          * A node record is specified by its identifier, with an optional path.          * In example, {@code 333dc24d-438f-4cca-8b21-3ebf67c05856:12345/path/to/child}.          * If a path is not specified, it is take to be {@code /}. The command          * will print information about the node provided by record ID and about          * every child identified by the path.          *<p>          * A node range record is specified by two node identifiers separated by          * a dash. In example, {@code 333dc24d-438f-4cca-8b21-3ebf67c05856:12345-46116fda-7a72-4dbc-af88-a09322a7753a:67890}.          * The command will perform a diff between the two records and print the          * result in the JSOP format.          *          * @param segment The specification for a segment, a node record or a          *                node record range.          * @return this builder.          */
specifier|public
name|Builder
name|withSegment
parameter_list|(
name|String
name|segment
parameter_list|)
block|{
name|this
operator|.
name|segments
operator|.
name|add
argument_list|(
name|checkNotNull
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create an executable version of the {@link DebugSegments} command.          *          * @return an instance of {@link Runnable}.          */
specifier|public
name|Runnable
name|build
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DebugSegments
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|File
name|path
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|segments
decl_stmt|;
specifier|private
name|DebugSegments
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|builder
operator|.
name|path
expr_stmt|;
name|this
operator|.
name|segments
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|builder
operator|.
name|segments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|ReadOnlyFileStore
name|store
init|=
name|openReadOnlyFileStore
argument_list|(
name|path
argument_list|)
init|)
block|{
name|debugSegments
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|debugSegments
parameter_list|(
name|ReadOnlyFileStore
name|store
parameter_list|)
block|{
for|for
control|(
name|String
name|segment
range|:
name|segments
control|)
block|{
name|debugSegment
argument_list|(
name|store
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|debugSegment
parameter_list|(
name|ReadOnlyFileStore
name|store
parameter_list|,
name|String
name|segment
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|SEGMENT_REGEX
operator|.
name|matcher
argument_list|(
name|segment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown argument: "
operator|+
name|segment
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentId
name|id
init|=
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
operator|.
name|newSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|id
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|RecordId
name|id1
init|=
name|store
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|RecordId
name|id2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id1
operator|=
name|fromString
argument_list|(
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id2
operator|=
name|fromString
argument_list|(
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|path
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2
operator|==
literal|null
condition|)
block|{
name|NodeState
name|node
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"/ ("
operator|+
name|id1
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RecordId
name|nid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|nid
operator|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node
operator|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|nid
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|NodeState
name|node1
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|NodeState
name|node2
init|=
name|store
operator|.
name|getReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|id2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node1
operator|=
name|node1
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|node2
operator|=
name|node2
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|JsopDiff
operator|.
name|diffToJsop
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

