begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|isShared
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
operator|.
name|IGNORE_SNFE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|RETAINED_GENERATIONS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|SimpleValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|FileStoreBackupRestoreMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|backup
operator|.
name|impl
operator|.
name|FileStoreBackupRestoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobTrackingStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|BlobIdTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|split
operator|.
name|SplitPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|descriptors
operator|.
name|GenericDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitorTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|AbstractServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|SegmentNodeStoreRegistrar
block|{
specifier|static
name|SegmentNodeStore
name|registerSegmentNodeStore
parameter_list|(
name|Configuration
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentNodeStoreRegistrar
argument_list|(
name|cfg
argument_list|)
operator|.
name|register
argument_list|()
return|;
block|}
interface|interface
name|Configuration
block|{
name|boolean
name|isPrimarySegmentStore
parameter_list|()
function_decl|;
name|boolean
name|isSecondarySegmentStore
parameter_list|()
function_decl|;
name|boolean
name|isStandbyInstance
parameter_list|()
function_decl|;
name|String
name|getRole
parameter_list|()
function_decl|;
name|int
name|getRetainedGenerations
parameter_list|()
function_decl|;
name|int
name|getDefaultRetainedGenerations
parameter_list|()
function_decl|;
name|boolean
name|getPauseCompaction
parameter_list|()
function_decl|;
name|int
name|getRetryCount
parameter_list|()
function_decl|;
name|int
name|getForceCompactionTimeout
parameter_list|()
function_decl|;
name|long
name|getSizeDeltaEstimation
parameter_list|()
function_decl|;
name|int
name|getMemoryThreshold
parameter_list|()
function_decl|;
name|boolean
name|getDisableEstimation
parameter_list|()
function_decl|;
name|long
name|getGCProcessLog
parameter_list|()
function_decl|;
name|File
name|getSegmentDirectory
parameter_list|()
function_decl|;
name|File
name|getSplitPersistenceDirectory
parameter_list|()
function_decl|;
name|int
name|getSegmentCacheSize
parameter_list|()
function_decl|;
name|int
name|getStringCacheSize
parameter_list|()
function_decl|;
name|int
name|getTemplateCacheSize
parameter_list|()
function_decl|;
name|int
name|getStringDeduplicationCacheSize
parameter_list|()
function_decl|;
name|int
name|getTemplateDeduplicationCacheSize
parameter_list|()
function_decl|;
name|int
name|getNodeDeduplicationCacheSize
parameter_list|()
function_decl|;
name|int
name|getMaxFileSize
parameter_list|()
function_decl|;
name|boolean
name|getMemoryMapping
parameter_list|()
function_decl|;
name|boolean
name|hasCustomBlobStore
parameter_list|()
function_decl|;
name|boolean
name|hasCustomSegmentStore
parameter_list|()
function_decl|;
name|boolean
name|hasSplitPersistence
parameter_list|()
function_decl|;
name|boolean
name|registerDescriptors
parameter_list|()
function_decl|;
name|boolean
name|dispatchChanges
parameter_list|()
function_decl|;
name|String
name|getRepositoryHome
parameter_list|()
function_decl|;
name|long
name|getBlobSnapshotInterval
parameter_list|()
function_decl|;
name|long
name|getBlobGcMaxAge
parameter_list|()
function_decl|;
name|File
name|getBackupDirectory
parameter_list|()
function_decl|;
name|Whiteboard
name|getWhiteboard
parameter_list|()
function_decl|;
name|Closer
name|getCloser
parameter_list|()
function_decl|;
name|Logger
name|getLogger
parameter_list|()
function_decl|;
name|StatisticsProvider
name|getStatisticsProvider
parameter_list|()
function_decl|;
name|BlobStore
name|getBlobStore
parameter_list|()
function_decl|;
name|SegmentNodeStorePersistence
name|getSegmentNodeStorePersistence
parameter_list|()
function_decl|;
name|BundleContext
name|getBundleContext
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|final
name|Configuration
name|cfg
decl_stmt|;
specifier|private
name|SegmentNodeStoreRegistrar
parameter_list|(
name|Configuration
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
block|}
specifier|private
name|SegmentNodeStore
name|register
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cfg
operator|.
name|getBlobStore
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|cfg
operator|.
name|hasCustomBlobStore
argument_list|()
operator|||
name|cfg
operator|.
name|isSecondarySegmentStore
argument_list|()
operator|)
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"BlobStore enabled. SegmentNodeStore will be initialized once the blob store becomes available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
operator|==
literal|null
operator|&&
name|cfg
operator|.
name|hasCustomSegmentStore
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"customSegmentStore enabled. SegmentNodeStore will be initialized once the custom segment store becomes available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Listen for GCMonitor services
name|GCMonitor
name|gcMonitor
init|=
name|GCMonitor
operator|.
name|EMPTY
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|GCMonitorTracker
name|tracker
init|=
operator|new
name|GCMonitorTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|start
argument_list|(
name|cfg
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
name|registerCloseable
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|gcMonitor
operator|=
name|tracker
expr_stmt|;
block|}
comment|// Create the gc options
if|if
condition|(
name|cfg
operator|.
name|getRetainedGenerations
argument_list|()
operator|!=
name|cfg
operator|.
name|getDefaultRetainedGenerations
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"The number of retained generations defaults to {} and can't be "
operator|+
literal|"changed. This configuration option is considered deprecated "
operator|+
literal|"and will be removed in the future."
argument_list|,
name|RETAINED_GENERATIONS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SegmentGCOptions
name|gcOptions
init|=
operator|new
name|SegmentGCOptions
argument_list|(
name|cfg
operator|.
name|getPauseCompaction
argument_list|()
argument_list|,
name|cfg
operator|.
name|getRetryCount
argument_list|()
argument_list|,
name|cfg
operator|.
name|getForceCompactionTimeout
argument_list|()
argument_list|)
operator|.
name|setGcSizeDeltaEstimation
argument_list|(
name|cfg
operator|.
name|getSizeDeltaEstimation
argument_list|()
argument_list|)
operator|.
name|setMemoryThreshold
argument_list|(
name|cfg
operator|.
name|getMemoryThreshold
argument_list|()
argument_list|)
operator|.
name|setEstimationDisabled
argument_list|(
name|cfg
operator|.
name|getDisableEstimation
argument_list|()
argument_list|)
operator|.
name|setGCLogInterval
argument_list|(
name|cfg
operator|.
name|getGCProcessLog
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
name|gcOptions
operator|.
name|setRetainedGenerations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Build the FileStore
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|cfg
operator|.
name|getSegmentDirectory
argument_list|()
argument_list|)
operator|.
name|withSegmentCacheSize
argument_list|(
name|cfg
operator|.
name|getSegmentCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringCacheSize
argument_list|(
name|cfg
operator|.
name|getStringCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateCacheSize
argument_list|(
name|cfg
operator|.
name|getTemplateCacheSize
argument_list|()
argument_list|)
operator|.
name|withStringDeduplicationCacheSize
argument_list|(
name|cfg
operator|.
name|getStringDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withTemplateDeduplicationCacheSize
argument_list|(
name|cfg
operator|.
name|getTemplateDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withNodeDeduplicationCacheSize
argument_list|(
name|cfg
operator|.
name|getNodeDeduplicationCacheSize
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
name|cfg
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
name|cfg
operator|.
name|getMemoryMapping
argument_list|()
argument_list|)
operator|.
name|withGCMonitor
argument_list|(
name|gcMonitor
argument_list|)
operator|.
name|withIOMonitor
argument_list|(
operator|new
name|MetricsIOMonitor
argument_list|(
name|cfg
operator|.
name|getStatisticsProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withRemoteStoreMonitor
argument_list|(
operator|new
name|MetricsRemoteStoreMonitor
argument_list|(
name|cfg
operator|.
name|getStatisticsProvider
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|cfg
operator|.
name|getStatisticsProvider
argument_list|()
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|hasCustomBlobStore
argument_list|()
operator|&&
name|cfg
operator|.
name|getBlobStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with BlobStore [{}]"
argument_list|,
name|cfg
operator|.
name|getBlobStore
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withBlobStore
argument_list|(
name|cfg
operator|.
name|getBlobStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|hasCustomSegmentStore
argument_list|()
operator|&&
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cfg
operator|.
name|hasSplitPersistence
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with custom persistence [{}] and local writes"
argument_list|,
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getSplitPersistenceDirectory
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SegmentNodeStorePersistence
name|roPersistence
init|=
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
decl_stmt|;
name|SegmentNodeStorePersistence
name|rwPersistence
init|=
operator|new
name|TarPersistence
argument_list|(
name|cfg
operator|.
name|getSplitPersistenceDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentNodeStorePersistence
name|persistence
init|=
operator|new
name|SplitPersistence
argument_list|(
name|roPersistence
argument_list|,
name|rwPersistence
argument_list|)
decl_stmt|;
name|builder
operator|.
name|withCustomPersistence
argument_list|(
name|persistence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Initializing SegmentNodeStore with custom persistence [{}]"
argument_list|,
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withCustomPersistence
argument_list|(
name|cfg
operator|.
name|getSegmentNodeStorePersistence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cfg
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
name|builder
operator|.
name|withSnfeListener
argument_list|(
name|IGNORE_SNFE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withEagerSegmentCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|store
decl_stmt|;
try|try
block|{
name|store
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFileStoreVersionException
name|e
parameter_list|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"The storage format is not compatible with this version of Oak Segment Tar"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|registerCloseable
argument_list|(
name|store
argument_list|)
expr_stmt|;
comment|// Listen for Executor services on the whiteboard
name|WhiteboardExecutor
name|executor
init|=
operator|new
name|WhiteboardExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|cfg
operator|.
name|getWhiteboard
argument_list|()
argument_list|)
expr_stmt|;
name|registerCloseable
argument_list|(
name|executor
argument_list|)
expr_stmt|;
comment|// Expose stats about the segment cache
name|CacheStatsMBean
name|segmentCacheStats
init|=
name|store
operator|.
name|getSegmentCacheStats
argument_list|()
decl_stmt|;
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|segmentCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|segmentCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose stats about the string and template caches
name|CacheStatsMBean
name|stringCacheStats
init|=
name|store
operator|.
name|getStringCacheStats
argument_list|()
decl_stmt|;
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|templateCacheStats
init|=
name|store
operator|.
name|getTemplateCacheStats
argument_list|()
decl_stmt|;
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|WriterCacheManager
name|cacheManager
init|=
name|builder
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|CacheStatsMBean
name|stringDeduplicationCacheStats
init|=
name|cacheManager
operator|.
name|getStringCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stringDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|stringDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|stringDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|templateDeduplicationCacheStats
init|=
name|cacheManager
operator|.
name|getTemplateCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|templateDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|templateDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|templateDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CacheStatsMBean
name|nodeDeduplicationCacheStats
init|=
name|cacheManager
operator|.
name|getNodeCacheStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeDeduplicationCacheStats
operator|!=
literal|null
condition|)
block|{
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|nodeDeduplicationCacheStats
argument_list|,
name|CacheStats
operator|.
name|TYPE
argument_list|,
name|nodeDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose an MBean to managing and monitoring garbage collection
name|FileStoreGCMonitor
name|monitor
init|=
operator|new
name|FileStoreGCMonitor
argument_list|(
name|Clock
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
name|registerCloseable
argument_list|(
name|register
argument_list|(
name|GCMonitor
operator|.
name|class
argument_list|,
name|monitor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|SegmentRevisionGC
operator|.
name|class
argument_list|,
operator|new
name|SegmentRevisionGCMBean
argument_list|(
name|store
argument_list|,
name|gcOptions
argument_list|,
name|monitor
argument_list|)
argument_list|,
name|SegmentRevisionGC
operator|.
name|TYPE
argument_list|,
literal|"Segment node store revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|RevisionGCMBean
operator|.
name|class
argument_list|,
operator|new
name|RevisionGC
argument_list|(
name|store
operator|.
name|getGCRunner
argument_list|()
argument_list|,
name|store
operator|::
name|cancelGC
argument_list|,
name|monitor
operator|::
name|getStatus
argument_list|,
name|executor
argument_list|)
argument_list|,
name|RevisionGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose statistics about the FileStore
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|FileStoreStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getStats
argument_list|()
argument_list|,
name|FileStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"FileStore statistics"
argument_list|)
argument_list|)
expr_stmt|;
comment|// register segment node store
name|SegmentNodeStore
operator|.
name|SegmentNodeStoreBuilder
name|segmentNodeStoreBuilder
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
name|cfg
operator|.
name|getStatisticsProvider
argument_list|()
argument_list|)
decl_stmt|;
name|segmentNodeStoreBuilder
operator|.
name|dispatchChanges
argument_list|(
name|cfg
operator|.
name|dispatchChanges
argument_list|()
argument_list|)
expr_stmt|;
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoggingHook
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".writer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|segmentNodeStoreBuilder
operator|.
name|withLoggingHook
argument_list|(
name|log
operator|::
name|trace
argument_list|)
expr_stmt|;
block|}
name|SegmentNodeStore
name|segmentNodeStore
init|=
name|segmentNodeStoreBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|ObserverTracker
name|observerTracker
init|=
operator|new
name|ObserverTracker
argument_list|(
name|segmentNodeStore
argument_list|)
decl_stmt|;
name|observerTracker
operator|.
name|start
argument_list|(
name|cfg
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|registerCloseable
argument_list|(
name|observerTracker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|CheckpointMBean
operator|.
name|class
argument_list|,
operator|new
name|SegmentCheckpointMBean
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store checkpoint management"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|registerDescriptors
argument_list|()
condition|)
block|{
comment|// ensure a clusterId is initialized
comment|// and expose it as 'oak.clusterid' repository descriptor
name|GenericDescriptors
name|clusterIdDesc
init|=
operator|new
name|GenericDescriptors
argument_list|()
decl_stmt|;
name|clusterIdDesc
operator|.
name|put
argument_list|(
name|ClusterRepositoryInfo
operator|.
name|OAK_CLUSTERID_REPOSITORY_DESCRIPTOR_KEY
argument_list|,
operator|new
name|SimpleValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registerCloseable
argument_list|(
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
name|clusterIdDesc
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register "discovery lite" descriptors
name|registerCloseable
argument_list|(
name|register
argument_list|(
name|Descriptors
operator|.
name|class
argument_list|,
operator|new
name|SegmentDiscoveryLiteDescriptors
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If a shared data store register the repo id in the data store
if|if
condition|(
operator|!
name|cfg
operator|.
name|isSecondarySegmentStore
argument_list|()
operator|&&
name|cfg
operator|.
name|hasCustomBlobStore
argument_list|()
operator|&&
name|isShared
argument_list|(
name|cfg
operator|.
name|getBlobStore
argument_list|()
argument_list|)
condition|)
block|{
name|SharedDataStore
name|sharedDataStore
init|=
operator|(
name|SharedDataStore
operator|)
name|cfg
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
try|try
block|{
name|sharedDataStore
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not register a unique repositoryId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getBlobStore
argument_list|()
operator|instanceof
name|BlobTrackingStore
condition|)
block|{
name|BlobTrackingStore
name|trackingStore
init|=
operator|(
name|BlobTrackingStore
operator|)
name|cfg
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|trackingStore
operator|.
name|getTracker
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|trackingStore
operator|.
name|addTracker
argument_list|(
name|BlobIdTracker
operator|.
name|build
argument_list|(
name|cfg
operator|.
name|getRepositoryHome
argument_list|()
argument_list|,
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|cfg
operator|.
name|getBlobSnapshotInterval
argument_list|()
argument_list|,
name|sharedDataStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cfg
operator|.
name|isSecondarySegmentStore
argument_list|()
operator|&&
name|cfg
operator|.
name|hasCustomBlobStore
argument_list|()
operator|&&
operator|(
name|cfg
operator|.
name|getBlobStore
argument_list|()
operator|instanceof
name|GarbageCollectableBlobStore
operator|)
condition|)
block|{
name|BlobGarbageCollector
name|gc
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|store
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|cfg
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|executor
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|cfg
operator|.
name|getBlobGcMaxAge
argument_list|()
argument_list|)
argument_list|,
name|getOrCreateId
argument_list|(
name|segmentNodeStore
argument_list|)
argument_list|,
name|cfg
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|cfg
operator|.
name|getStatisticsProvider
argument_list|()
argument_list|)
decl_stmt|;
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|BlobGC
argument_list|(
name|gc
argument_list|,
name|executor
argument_list|)
argument_list|,
name|BlobGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store blob garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Expose an MBean for backup/restore operations
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|FileStoreBackupRestoreMBean
operator|.
name|class
argument_list|,
operator|new
name|FileStoreBackupRestoreImpl
argument_list|(
name|segmentNodeStore
argument_list|,
name|store
operator|.
name|getRevisions
argument_list|()
argument_list|,
name|store
operator|.
name|getReader
argument_list|()
argument_list|,
name|cfg
operator|.
name|getBackupDirectory
argument_list|()
argument_list|,
name|executor
argument_list|)
argument_list|,
name|FileStoreBackupRestoreMBean
operator|.
name|TYPE
argument_list|,
literal|"Segment node store backup/restore"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose statistics about the SegmentNodeStore
name|registerCloseable
argument_list|(
name|registerMBean
argument_list|(
name|SegmentNodeStoreStatsMBean
operator|.
name|class
argument_list|,
name|segmentNodeStore
operator|.
name|getStats
argument_list|()
argument_list|,
name|SegmentNodeStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"SegmentNodeStore statistics"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Primary SegmentNodeStore initialized"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Secondary SegmentNodeStore initialized, role={}"
argument_list|,
name|cfg
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Register a factory service to expose the FileStore
name|registerCloseable
argument_list|(
name|register
argument_list|(
name|SegmentStoreProvider
operator|.
name|class
argument_list|,
operator|new
name|DefaultSegmentStoreProvider
argument_list|(
name|store
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isStandbyInstance
argument_list|()
condition|)
block|{
return|return
name|segmentNodeStore
return|;
block|}
if|if
condition|(
name|cfg
operator|.
name|isPrimarySegmentStore
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|SegmentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"oak.nodestore.description"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nodeStoreType=segment"
block|}
argument_list|)
expr_stmt|;
name|registerCloseable
argument_list|(
name|register
argument_list|(
name|NodeStore
operator|.
name|class
argument_list|,
name|segmentNodeStore
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|segmentNodeStore
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Registration
name|registerMBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|bean
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|registerMBean
argument_list|(
name|clazz
argument_list|,
name|bean
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Registration
name|registerMBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|bean
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
return|return
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|cfg
operator|.
name|getWhiteboard
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|bean
argument_list|,
name|type
argument_list|,
name|maybeAppendRole
argument_list|(
name|name
argument_list|)
argument_list|,
name|maybePutRoleAttribute
argument_list|(
name|attributes
argument_list|)
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|service
parameter_list|)
block|{
return|return
name|register
argument_list|(
name|clazz
argument_list|,
name|service
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getWhiteboard
argument_list|()
operator|.
name|register
argument_list|(
name|clazz
argument_list|,
name|service
argument_list|,
name|maybePutRoleProperty
argument_list|(
name|properties
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|maybeAppendRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getRole
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|+
literal|" - "
operator|+
name|cfg
operator|.
name|getRole
argument_list|()
return|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|jmxRole
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getRole
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|"-"
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|maybePutRoleAttribute
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getRole
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"role"
argument_list|,
name|jmxRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|maybePutRoleProperty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getRole
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"role"
argument_list|,
name|cfg
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
specifier|private
name|void
name|registerCloseable
parameter_list|(
name|Closeable
name|c
parameter_list|)
block|{
name|cfg
operator|.
name|getCloser
argument_list|()
operator|.
name|register
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerCloseable
parameter_list|(
specifier|final
name|AbstractServiceTracker
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|registerCloseable
argument_list|(
operator|(
name|Closeable
operator|)
name|t
operator|::
name|stop
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerCloseable
parameter_list|(
specifier|final
name|Registration
name|r
parameter_list|)
block|{
name|registerCloseable
argument_list|(
operator|(
name|Closeable
operator|)
name|r
operator|::
name|unregister
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerCloseable
parameter_list|(
specifier|final
name|ObserverTracker
name|t
parameter_list|)
block|{
name|registerCloseable
argument_list|(
operator|(
name|Closeable
operator|)
name|t
operator|::
name|stop
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

