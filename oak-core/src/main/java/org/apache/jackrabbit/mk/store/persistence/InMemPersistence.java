begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntriesMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|BinaryBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|IdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|NotFoundException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|InMemPersistence
implements|implements
name|Persistence
implements|,
name|BlobStore
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Id
argument_list|,
name|byte
index|[]
argument_list|>
name|nodes
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Id
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Id
argument_list|,
name|StoredCommit
argument_list|>
name|commits
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Id
argument_list|,
name|StoredCommit
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Id
argument_list|,
name|ChildNodeEntriesMap
argument_list|>
name|cneMaps
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Id
argument_list|,
name|ChildNodeEntriesMap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
specifier|private
name|Id
name|head
decl_stmt|;
comment|// TODO: make this configurable
specifier|private
name|IdFactory
name|idFactory
init|=
name|IdFactory
operator|.
name|getDigestFactory
argument_list|()
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|File
name|homeDir
parameter_list|)
throws|throws
name|Exception
block|{
name|head
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{     }
specifier|public
name|Id
name|readHead
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|head
return|;
block|}
specifier|public
name|void
name|writeHead
parameter_list|(
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|head
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Binding
name|readNodeBinding
parameter_list|(
name|Id
name|id
parameter_list|)
throws|throws
name|NotFoundException
throws|,
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|nodes
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|BinaryBinding
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Id
name|writeNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|node
operator|.
name|serialize
argument_list|(
operator|new
name|BinaryBinding
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Id
name|id
init|=
operator|new
name|Id
argument_list|(
name|idFactory
operator|.
name|createContentId
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodes
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|StoredCommit
name|readCommit
parameter_list|(
name|Id
name|id
parameter_list|)
throws|throws
name|NotFoundException
throws|,
name|Exception
block|{
name|StoredCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
return|return
name|commit
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|writeCommit
parameter_list|(
name|Id
name|id
parameter_list|,
name|Commit
name|commit
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|commit
operator|.
name|serialize
argument_list|(
operator|new
name|BinaryBinding
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|commits
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|StoredCommit
operator|.
name|deserialize
argument_list|(
name|id
argument_list|,
operator|new
name|BinaryBinding
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ChildNodeEntriesMap
name|readCNEMap
parameter_list|(
name|Id
name|id
parameter_list|)
throws|throws
name|NotFoundException
throws|,
name|Exception
block|{
name|ChildNodeEntriesMap
name|map
init|=
name|cneMaps
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return
name|map
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Id
name|writeCNEMap
parameter_list|(
name|ChildNodeEntriesMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|map
operator|.
name|serialize
argument_list|(
operator|new
name|BinaryBinding
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Id
name|id
init|=
operator|new
name|Id
argument_list|(
name|idFactory
operator|.
name|createContentId
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cneMaps
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|cneMaps
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|ChildNodeEntriesMap
operator|.
name|deserialize
argument_list|(
operator|new
name|BinaryBinding
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
comment|//------------------------------------------------------------< BlobStore>
specifier|public
name|String
name|addBlob
parameter_list|(
name|String
name|tempFilePath
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|blobs
operator|.
name|addBlob
argument_list|(
name|tempFilePath
argument_list|)
return|;
block|}
specifier|public
name|String
name|writeBlob
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|blobs
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
specifier|public
name|int
name|readBlob
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|NotFoundException
throws|,
name|Exception
block|{
return|return
name|blobs
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|long
name|getBlobLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|blobs
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

