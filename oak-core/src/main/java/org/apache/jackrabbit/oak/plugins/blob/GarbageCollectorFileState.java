begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
operator|.
name|ExternalSort
import|;
end_import

begin_comment
comment|/**  * Class for keeping the file system state of the garbage collection.  *   * Also, manages any temporary files needed as well as external sorting.  *   */
end_comment

begin_class
class|class
name|GarbageCollectorFileState
implements|implements
name|Closeable
block|{
comment|/** The root of the gc file state directory. */
specifier|private
specifier|final
name|File
name|home
decl_stmt|;
comment|/** The marked references. */
specifier|private
specifier|final
name|File
name|markedRefs
decl_stmt|;
comment|/** The available references. */
specifier|private
specifier|final
name|File
name|availableRefs
decl_stmt|;
comment|/** The gc candidates. */
specifier|private
specifier|final
name|File
name|gcCandidates
decl_stmt|;
comment|/** The garbage stores the garbage collection candidates which were not deleted . */
specifier|private
specifier|final
name|File
name|garbage
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Comparator
argument_list|<
name|String
argument_list|>
name|lexComparator
init|=
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Instantiates a new garbage collector file state.      *       * @param root path of the root directory under which the      *             files created during gc are stored      */
specifier|public
name|GarbageCollectorFileState
parameter_list|(
name|String
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|home
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"gcworkdir-"
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|markedRefs
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"marked-"
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|availableRefs
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"avail-"
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|gcCandidates
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"gccand-"
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|garbage
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"gc-"
operator|+
name|startTime
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|home
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the file storing the marked references.      *       * @return the marked references      */
specifier|public
name|File
name|getMarkedRefs
parameter_list|()
block|{
return|return
name|markedRefs
return|;
block|}
comment|/**      * Gets the file storing the available references.      *       * @return the available references      */
specifier|public
name|File
name|getAvailableRefs
parameter_list|()
block|{
return|return
name|availableRefs
return|;
block|}
comment|/**      * Gets the file storing the gc candidates.      *       * @return the gc candidates      */
specifier|public
name|File
name|getGcCandidates
parameter_list|()
block|{
return|return
name|gcCandidates
return|;
block|}
comment|/**      * Gets the storing the garbage.      *       * @return the garbage      */
specifier|public
name|File
name|getGarbage
parameter_list|()
block|{
return|return
name|garbage
return|;
block|}
comment|/**      * Completes the process by deleting the files.      *       * @throws IOException      *             Signals that an I/O exception has occurred.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|getGarbage
argument_list|()
operator|.
name|exists
argument_list|()
operator|||
name|FileUtils
operator|.
name|sizeOf
argument_list|(
name|getGarbage
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|home
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sorts the given file externally.      *       * @param file file whose contents needs to be sorted      */
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|sorted
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|lexComparator
argument_list|,
literal|true
argument_list|)
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|sorted
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sorts the given file externally with the given comparator.      *      * @param file file whose contents needs to be sorted      * @param comparator to compare      * @throws IOException      */
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|File
name|file
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|sorted
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|file
argument_list|,
name|comparator
argument_list|,
literal|true
argument_list|)
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|sorted
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|merge
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|files
argument_list|,
name|output
argument_list|,
name|lexComparator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|File
name|copy
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|private
specifier|static
name|File
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

