begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Scalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|PagedIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|chain
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|flatten
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Iterators
operator|.
name|map
import|;
end_import

begin_class
specifier|public
class|class
name|KernelContentTree
implements|implements
name|ContentTree
block|{
comment|/**      * Underlying persistent state or {@code null} if this instance represents an      * added content tree      */
specifier|private
specifier|final
name|NodeState
name|persistentState
decl_stmt|;
comment|/** Parent of this content tree */
specifier|private
name|KernelContentTree
name|parent
decl_stmt|;
comment|/** Name of this content tree */
specifier|private
name|String
name|name
decl_stmt|;
comment|/** Listener for changes on this content tree */
specifier|private
specifier|final
name|Listener
name|listener
decl_stmt|;
comment|/** Children with underlying persistent child states */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
name|existingChildren
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently added children */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
name|addedTrees
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently removed children */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedTrees
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently added property states */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|addedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently removed property states */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Listener for changes on {@code ContentTree}s      */
interface|interface
name|Listener
block|{
comment|/**          * The child of the given {@code name} has been added to {@code tree}.          * @param tree  parent to which a child was added          * @param name  name of the added child          */
name|void
name|addChild
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * The child of the given {@code name} has been removed from {@code tree}          * @param tree  parent from which a child was removed          * @param name  name of the removed child          */
name|void
name|removeChild
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * The property of the given {@code name} and {@code value} has been set.          * @param tree  parent on which the property was set.          * @param name  name of the property          * @param value  value of the property          */
name|void
name|setProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|Scalar
name|value
parameter_list|)
function_decl|;
comment|/**          * The property of the given {@code name} and {@code values} has been set.          * @param tree  parent on which the property was set.          * @param name  name of the property          * @param values  values of the property          */
name|void
name|setProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Scalar
argument_list|>
name|values
parameter_list|)
function_decl|;
comment|/**          * The property of the given {@code name} has been removed.          * @param tree  parent on which the property was removed.          * @param name  name of the property          */
name|void
name|removeProperty
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * The child with the given {@code name} has been moved.          * @param tree  parent from which the child was moved          * @param name  name of the moved child          * @param moved  moved child          */
name|void
name|move
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelContentTree
name|moved
parameter_list|)
function_decl|;
comment|/**          * The child with the given {@code name} been copied.          * @param state  parent from which the child way copied          * @param name  name of the copied child          * @param copied  copied child          */
name|void
name|copy
parameter_list|(
name|KernelContentTree
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|KernelContentTree
name|copied
parameter_list|)
function_decl|;
block|}
comment|/**      * Create a new instance representing the root of a branch.      * @param persistentState  underlying persistent state      * @param listener  change listener      */
name|KernelContentTree
parameter_list|(
name|NodeState
name|persistentState
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|this
argument_list|(
name|persistentState
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance representing an added child      * @param parent  the parent of the child      * @param name  name of the child      * @param listener  change listener      */
specifier|private
name|KernelContentTree
parameter_list|(
name|KernelContentTree
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|parent
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance with an underlying persistent state      * @param persistedState  underlying persistent state      * @param parent  the parent of this content tree      * @param name  name of this content tree      * @param listener  change listener      */
specifier|private
name|KernelContentTree
parameter_list|(
name|NodeState
name|persistedState
parameter_list|,
name|KernelContentTree
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Listener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|persistentState
operator|=
name|persistedState
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
comment|/**      * Copy constructor: create a deep copy of the passed {@code ContentTree} with      * the given {@code name} and {@code parent}.      * @param tree  content tree to copy      * @param parent  parent of the copied tree      * @param name  name of the copied tree      */
specifier|private
name|KernelContentTree
parameter_list|(
name|KernelContentTree
name|tree
parameter_list|,
name|KernelContentTree
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|listener
operator|=
name|tree
operator|.
name|listener
expr_stmt|;
name|persistentState
operator|=
name|tree
operator|.
name|persistentState
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
comment|// recursively copy all existing children
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
name|existing
range|:
name|tree
operator|.
name|existingChildren
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|existingName
init|=
name|existing
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|this
operator|.
name|existingChildren
operator|.
name|put
argument_list|(
name|existingName
argument_list|,
operator|new
name|KernelContentTree
argument_list|(
name|existing
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
argument_list|,
name|existingName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recursively copy all added children
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|KernelContentTree
argument_list|>
name|added
range|:
name|tree
operator|.
name|addedTrees
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|addedName
init|=
name|added
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|this
operator|.
name|addedTrees
operator|.
name|put
argument_list|(
name|addedName
argument_list|,
operator|new
name|KernelContentTree
argument_list|(
name|added
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
argument_list|,
name|addedName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|removedTrees
operator|.
name|addAll
argument_list|(
name|tree
operator|.
name|removedTrees
argument_list|)
expr_stmt|;
name|this
operator|.
name|addedProperties
operator|.
name|putAll
argument_list|(
name|tree
operator|.
name|addedProperties
argument_list|)
expr_stmt|;
name|this
operator|.
name|removedProperties
operator|.
name|addAll
argument_list|(
name|tree
operator|.
name|removedProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
else|else
block|{
name|String
name|path
init|=
name|parent
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
else|:
name|path
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ContentTree
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|state
init|=
name|addedProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// Added or removed and re-added property
return|return
name|state
return|;
block|}
comment|// Existing property unless removed
return|return
name|removedProperties
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|persistentState
operator|==
literal|null
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
name|long
name|persistentCount
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|0
else|:
name|persistentState
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
return|return
name|persistentCount
operator|+
name|addedProperties
operator|.
name|size
argument_list|()
operator|-
name|removedProperties
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KernelContentTree
name|getChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|KernelContentTree
name|state
init|=
name|addedTrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// Added or removed and re-added child
return|return
name|state
return|;
block|}
comment|// Existing child unless removed
return|return
name|removedTrees
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|getExistingChild
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getChild
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildrenCount
parameter_list|()
block|{
name|long
name|persistentCount
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|0
else|:
name|persistentState
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
return|return
name|persistentCount
operator|+
name|addedTrees
operator|.
name|size
argument_list|()
operator|-
name|removedTrees
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
comment|// Persisted property states
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|persisted
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// Copy of removed property states
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedProperties
argument_list|)
expr_stmt|;
comment|// Copy of added and re-added property stated
specifier|final
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|addAll
argument_list|(
name|addedProperties
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filter removed property states from persisted property states
comment|// and add added property states
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// persisted states
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
init|=
name|persisted
operator|==
literal|null
condition|?
name|Iterators
operator|.
expr|<
name|PropertyState
operator|>
name|empty
argument_list|()
else|:
name|persisted
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// persisted states - removed states
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|persistedMinusRemoved
init|=
name|filter
argument_list|(
name|properties
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
return|return
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted states - removed states + added states
return|return
name|chain
argument_list|(
name|persistedMinusRemoved
argument_list|,
name|added
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ContentTree
argument_list|>
name|getChildren
parameter_list|()
block|{
comment|// Copy of removed children
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedTrees
argument_list|)
expr_stmt|;
comment|// Copy od added and re-added children
specifier|final
name|Set
argument_list|<
name|ContentTree
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|ContentTree
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|addAll
argument_list|(
name|addedTrees
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filter removed child node entries from persisted child node entries,
comment|// map remaining child node entries to content trees and add added children.
return|return
operator|new
name|Iterable
argument_list|<
name|ContentTree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ContentTree
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// persisted entries
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|persisted
init|=
name|getPersistedChildren
argument_list|(
name|persistentState
argument_list|)
decl_stmt|;
comment|// persisted entries - removed entries
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|persistedMinusRemovedEntries
init|=
name|filter
argument_list|(
name|persisted
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted trees - removed trees
name|Iterator
argument_list|<
name|ContentTree
argument_list|>
name|persistedMinusRemoved
init|=
name|map
argument_list|(
name|persistedMinusRemovedEntries
argument_list|,
operator|new
name|Function1
argument_list|<
name|ChildNodeEntry
argument_list|,
name|ContentTree
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContentTree
name|apply
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
name|getExistingChild
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted trees - removed trees + added trees
return|return
name|chain
argument_list|(
name|persistedMinusRemoved
argument_list|,
name|added
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentTree
name|addChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addedTrees
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|KernelContentTree
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|addChild
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|hasChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markTreeRemoved
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|removeChild
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Scalar
name|value
parameter_list|)
block|{
name|PropertyState
name|propertyState
init|=
operator|new
name|KernelPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|setProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Scalar
argument_list|>
name|values
parameter_list|)
block|{
name|PropertyState
name|propertyState
init|=
operator|new
name|KernelPropertyState
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
name|propertyState
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|setProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExistingProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Mark as removed if removing existing
name|removedProperties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|removeProperty
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Move this tree to the parent at {@code destParent} with the new name      * {@code destName}.      *      * @param destParent  new parent for this tree      * @param destName  new name for this tree      */
specifier|public
name|void
name|move
parameter_list|(
name|KernelContentTree
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|parent
operator|.
name|markTreeRemoved
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|KernelContentTree
name|oldParent
init|=
name|parent
decl_stmt|;
name|String
name|oldName
init|=
name|name
decl_stmt|;
name|name
operator|=
name|destName
expr_stmt|;
name|parent
operator|=
name|destParent
expr_stmt|;
name|destParent
operator|.
name|addedTrees
operator|.
name|put
argument_list|(
name|destName
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|move
argument_list|(
name|oldParent
argument_list|,
name|oldName
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy this tree to the parent at {@code destParent} with the name {@code destName}.      *      * @param destParent  parent for the copied tree      * @param destName  name for the copied tree      */
specifier|public
name|void
name|copy
parameter_list|(
name|KernelContentTree
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|KernelContentTree
name|copy
init|=
operator|new
name|KernelContentTree
argument_list|(
name|this
argument_list|,
name|destParent
argument_list|,
name|destName
argument_list|)
decl_stmt|;
name|destParent
operator|.
name|addedTrees
operator|.
name|put
argument_list|(
name|destName
argument_list|,
name|copy
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|copy
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< internal>---
specifier|private
name|void
name|markTreeRemoved
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedTrees
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExistingChild
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Mark as removed if removing existing
name|removedTrees
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
if|if
condition|(
name|hasExistingProperty
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|removedProperties
operator|.
name|add
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addedProperties
operator|.
name|put
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a content tree for a child which has an existing underlying persistent      * node date.      *      * @param name  name of the child      * @return  content tree or {@code null} if this instance node state      *          does not have an underlying persistent state or the underlying      *          persistent state does not have a child with the given {@code name}.      */
specifier|private
name|KernelContentTree
name|getExistingChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|persistentState
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KernelContentTree
name|transientState
init|=
name|existingChildren
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|transientState
operator|==
literal|null
condition|)
block|{
name|NodeState
name|state
init|=
name|persistentState
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|transientState
operator|=
operator|new
name|KernelContentTree
argument_list|(
name|state
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|existingChildren
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|transientState
argument_list|)
expr_stmt|;
block|}
return|return
name|transientState
return|;
block|}
comment|/**      * Determine whether there is an underling persistent state which has      * a child with the given {@code name}.      * @param name  name of the child.      * @return  {@code true} if and only if this instance has an underlying persistent      *          state which has a child with the given {@code name}.      */
specifier|private
name|boolean
name|hasExistingChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|persistentState
operator|!=
literal|null
operator|&&
name|persistentState
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Determine whether there is an underling persistent state which has      * a property state with the given {@code name}.      * @param name  name of the property state.      * @return  {@code true} if and only if this instance has an underlying persistent      *          state which has a property state with the given {@code name}.      */
specifier|private
name|boolean
name|hasExistingProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|persistentState
operator|!=
literal|null
operator|&&
name|persistentState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Iterator over all persisted child node entries of the given      * {@code persistentState}. This iterator reads the child node entries page wise      * with a page size of 1024 items.      * @param persistentState  persistent state for retrieving the child node entries from      * @return  iterator of child node entries      */
specifier|private
specifier|static
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getPersistedChildren
parameter_list|(
specifier|final
name|NodeState
name|persistentState
parameter_list|)
block|{
if|if
condition|(
name|persistentState
operator|==
literal|null
condition|)
block|{
return|return
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|flatten
argument_list|(
operator|new
name|PagedIterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|(
literal|1024
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getPage
parameter_list|(
name|long
name|pos
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|persistentState
operator|.
name|getChildNodeEntries
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

