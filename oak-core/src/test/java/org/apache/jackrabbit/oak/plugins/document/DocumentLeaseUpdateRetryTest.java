begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
operator|.
name|Virtual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junitx
operator|.
name|util
operator|.
name|PrivateAccessor
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentLeaseUpdateRetryTest
block|{
specifier|private
name|DocumentNodeStore
name|ns
decl_stmt|;
specifier|private
name|Virtual
name|clock
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|ClusterNodeInfo
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|ns
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterNodeInfo
operator|.
name|resetClockToDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeaseRetryLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterNodeInfo
name|clusterInfo
init|=
name|ns
operator|.
name|getClusterInfo
argument_list|()
decl_stmt|;
name|long
name|leaseTime
init|=
name|clusterInfo
operator|.
name|getLeaseTime
argument_list|()
decl_stmt|;
name|long
name|leaseEndTime1
init|=
name|clusterInfo
operator|.
name|getLeaseEndTime
argument_list|()
decl_stmt|;
comment|// TODO: replace privateAccessor.getField with a test-only
comment|// package-protected access
name|Long
name|leaseUpdateInterval
init|=
operator|(
name|Long
operator|)
name|PrivateAccessor
operator|.
name|getField
argument_list|(
name|clusterInfo
argument_list|,
literal|"leaseUpdateInterval"
argument_list|)
decl_stmt|;
comment|// assert that lease is fine at this point
comment|// do this indirectly by trying to invoke some DocumentNodeStore
comment|// functionality
name|ns
operator|.
name|checkpoint
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// forward the virtual clock by more than the leaseUpdateInterval, to
comment|// trigger a lease update
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseUpdateInterval
operator|+
literal|1000
argument_list|)
expr_stmt|;
comment|// but also actually sleep more than 1s to give the background tasks of
comment|// DNS a chance to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|1200
argument_list|)
expr_stmt|;
comment|// assert leaseEndTime having been updated - ie lease having been
comment|// updated
name|long
name|leaseEndTime2
init|=
name|clusterInfo
operator|.
name|getLeaseEndTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|leaseEndTime1
operator|<
name|leaseEndTime2
argument_list|)
expr_stmt|;
comment|// again assert that lease is fine -> do some dummy ns call
name|ns
operator|.
name|checkpoint
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// now forward the virtual clock by more than the lease time - which
comment|// should cause lease to time out
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|leaseTime
operator|+
name|leaseUpdateInterval
operator|+
literal|1000
argument_list|)
expr_stmt|;
comment|// so the next call to the lease check wrapper should now run into the
comment|// retry loop, as the lease has timed out
try|try
block|{
name|ns
operator|.
name|checkpoint
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// it should not fail however, since we should be able to do the
comment|// retry
name|fail
argument_list|(
literal|"call should not have failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

