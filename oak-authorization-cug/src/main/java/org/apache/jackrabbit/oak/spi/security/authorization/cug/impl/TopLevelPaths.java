begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Utility class to determine the top-level CUG paths as recorded on the root  * node.  */
end_comment

begin_class
class|class
name|TopLevelPaths
implements|implements
name|CugConstants
block|{
specifier|static
specifier|final
name|long
name|NONE
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|final
name|long
name|MAX_CNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
name|Boolean
name|hasAny
decl_stmt|;
specifier|private
name|Long
name|cnt
decl_stmt|;
specifier|private
name|String
index|[]
name|paths
decl_stmt|;
name|TopLevelPaths
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
name|boolean
name|hasAny
parameter_list|()
block|{
if|if
condition|(
name|hasAny
operator|==
literal|null
condition|)
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|hasAny
operator|=
name|rootTree
operator|.
name|hasProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
operator|||
name|CugUtil
operator|.
name|hasCug
argument_list|(
name|rootTree
argument_list|)
expr_stmt|;
block|}
return|return
name|hasAny
return|;
block|}
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasAny
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|PropertyState
name|hiddenTopCnt
init|=
name|rootTree
operator|.
name|getProperty
argument_list|(
name|HIDDEN_TOP_CUG_CNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiddenTopCnt
operator|!=
literal|null
condition|)
block|{
name|cnt
operator|=
name|hiddenTopCnt
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|<=
name|MAX_CNT
condition|)
block|{
name|PropertyState
name|hidden
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
operator|.
name|getProperty
argument_list|(
name|HIDDEN_NESTED_CUGS
argument_list|)
decl_stmt|;
name|paths
operator|=
operator|(
name|hidden
operator|==
literal|null
operator|)
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
name|Iterables
operator|.
name|toArray
argument_list|(
name|hidden
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|cnt
operator|=
name|NONE
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cnt
operator|==
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cnt
operator|>
name|MAX_CNT
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

