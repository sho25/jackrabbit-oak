begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
operator|.
name|TimeSeries
import|;
end_import

begin_comment
comment|/**  * Time series of the maximum value recorded in a period  */
end_comment

begin_class
specifier|public
class|class
name|TimeSeriesMax
implements|implements
name|TimeSeries
block|{
specifier|private
specifier|final
name|MaxValue
name|max
init|=
operator|new
name|MaxValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|perSecond
init|=
operator|new
name|long
index|[
literal|60
index|]
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|perMinute
init|=
operator|new
name|long
index|[
literal|60
index|]
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|perHour
init|=
operator|new
name|long
index|[
literal|7
operator|*
literal|24
index|]
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|perWeek
init|=
operator|new
name|long
index|[
literal|3
operator|*
literal|52
index|]
decl_stmt|;
comment|/** Current second (index in {@link #perSecond}) */
specifier|private
name|int
name|seconds
decl_stmt|;
comment|/** Current minute (index in {@link #perMinute}) */
specifier|private
name|int
name|minutes
decl_stmt|;
comment|/** Current hour (index in {@link #perHour}) */
specifier|private
name|int
name|hours
decl_stmt|;
comment|/** Current week (index in {@link #perWeek}) */
specifier|private
name|int
name|weeks
decl_stmt|;
specifier|public
name|TimeSeriesMax
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|perSecond
index|[
name|seconds
operator|++
index|]
operator|=
name|max
operator|.
name|getAndSetValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|seconds
operator|==
name|perSecond
operator|.
name|length
condition|)
block|{
name|seconds
operator|=
literal|0
expr_stmt|;
name|perMinute
index|[
name|minutes
operator|++
index|]
operator|=
name|max
argument_list|(
name|perSecond
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|==
name|perMinute
operator|.
name|length
condition|)
block|{
name|minutes
operator|=
literal|0
expr_stmt|;
name|perHour
index|[
name|hours
operator|++
index|]
operator|=
name|max
argument_list|(
name|perMinute
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hours
operator|==
name|perHour
operator|.
name|length
condition|)
block|{
name|hours
operator|=
literal|0
expr_stmt|;
name|perWeek
index|[
name|weeks
operator|++
index|]
operator|=
name|max
argument_list|(
name|perHour
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|weeks
operator|==
name|perWeek
operator|.
name|length
condition|)
block|{
name|weeks
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recordValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|max
operator|.
name|setIfMaximal
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
index|[]
name|getValuePerSecond
parameter_list|()
block|{
return|return
name|cyclicCopyFrom
argument_list|(
name|perSecond
argument_list|,
name|seconds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
index|[]
name|getValuePerMinute
parameter_list|()
block|{
return|return
name|cyclicCopyFrom
argument_list|(
name|perMinute
argument_list|,
name|minutes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
index|[]
name|getValuePerHour
parameter_list|()
block|{
return|return
name|cyclicCopyFrom
argument_list|(
name|perHour
argument_list|,
name|hours
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
index|[]
name|getValuePerWeek
parameter_list|()
block|{
return|return
name|cyclicCopyFrom
argument_list|(
name|perWeek
argument_list|,
name|weeks
argument_list|)
return|;
block|}
comment|/**      * Returns the maximum of all entries in the given array.      */
specifier|private
specifier|static
name|long
name|max
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|array
control|)
block|{
if|if
condition|(
name|v
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|v
expr_stmt|;
block|}
block|}
return|return
name|max
return|;
block|}
comment|/**      * Returns a copy of the given cyclical array, with the element at      * the given position as the first element of the returned array.      *      * @param array cyclical array      * @param pos position of the first element      * @return copy of the array      */
specifier|private
specifier|static
name|long
index|[]
name|cyclicCopyFrom
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|long
index|[]
name|reverse
init|=
operator|new
name|long
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reverse
index|[
name|i
index|]
operator|=
name|array
index|[
operator|(
name|pos
operator|+
name|i
operator|)
operator|%
name|array
operator|.
name|length
index|]
expr_stmt|;
block|}
return|return
name|reverse
return|;
block|}
specifier|private
specifier|static
class|class
name|MaxValue
block|{
specifier|private
name|long
name|value
decl_stmt|;
specifier|public
name|MaxValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|getAndSetValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|long
name|v
init|=
name|this
operator|.
name|value
decl_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|v
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setIfMaximal
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
name|this
operator|.
name|value
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

