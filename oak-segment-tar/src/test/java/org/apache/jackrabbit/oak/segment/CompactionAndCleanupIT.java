begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|getInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|Fixture
operator|.
name|SEGMENT_MK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FixturesHelper
operator|.
name|getFixtures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
operator|.
name|builder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CompactionAndCleanupIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompactionAndCleanupIT
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|File
name|getFileStoreFolder
parameter_list|()
block|{
return|return
name|folder
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|assumptions
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|getFixtures
argument_list|()
operator|.
name|contains
argument_list|(
name|SEGMENT_MK
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compactionNoBinaryClone
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|DEFAULT
operator|.
name|setRetainedGenerations
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
comment|// 5MB blob
name|int
name|blobSize
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// Create ~2MB of data
name|NodeBuilder
name|extra
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|content
init|=
name|extra
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|content
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|i
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|extra
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|size1
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"File store size {}"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|size1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a property with 5 MB blob
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blob1"
argument_list|,
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
name|blobSize
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|size2
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"1st blob added"
argument_list|,
name|size2
argument_list|,
name|size1
operator|+
name|blobSize
argument_list|,
name|size1
operator|+
name|blobSize
operator|+
operator|(
name|blobSize
operator|/
literal|100
operator|)
argument_list|)
expr_stmt|;
comment|// Now remove the property. No gc yet -> size doesn't shrink
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|removeProperty
argument_list|(
literal|"blob1"
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|size3
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"1st blob removed"
argument_list|,
name|size3
argument_list|,
name|size2
argument_list|,
name|size2
operator|+
literal|4096
argument_list|)
expr_stmt|;
comment|// 1st gc cycle -> no reclaimable garbage...
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|long
name|size4
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"1st gc"
argument_list|,
name|size4
argument_list|,
name|size3
argument_list|,
name|size3
operator|+
name|size1
argument_list|)
expr_stmt|;
comment|// Add another 5MB binary doubling the blob size
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blob2"
argument_list|,
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
name|blobSize
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|size5
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"2nd blob added"
argument_list|,
name|size5
argument_list|,
name|size4
operator|+
name|blobSize
argument_list|,
name|size4
operator|+
name|blobSize
operator|+
operator|(
name|blobSize
operator|/
literal|100
operator|)
argument_list|)
expr_stmt|;
comment|// 2st gc cycle -> 1st blob should get collected
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|long
name|size6
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"2nd gc"
argument_list|,
name|size6
argument_list|,
name|size5
operator|-
name|blobSize
operator|-
name|size1
argument_list|,
name|size5
operator|-
name|blobSize
argument_list|)
expr_stmt|;
comment|// 3rtd gc cycle -> no  significant change
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|long
name|size7
init|=
name|fileStore
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertSize
argument_list|(
literal|"3rd gc"
argument_list|,
name|size7
argument_list|,
name|size6
operator|*
literal|10
operator|/
literal|11
argument_list|,
name|size6
operator|*
literal|10
operator|/
literal|9
argument_list|)
expr_stmt|;
comment|// No data loss
name|byte
index|[]
name|blob
init|=
name|ByteStreams
operator|.
name|toByteArray
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"blob2"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|getNewStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobSize
argument_list|,
name|blob
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertSize
parameter_list|(
name|String
name|info
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"File Store {} size {}, expected in interval [{},{}]"
argument_list|,
name|info
argument_list|,
name|size
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File Store "
operator|+
name|log
operator|+
literal|" size expected in interval "
operator|+
literal|"["
operator|+
operator|(
name|lower
operator|)
operator|+
literal|","
operator|+
operator|(
name|upper
operator|)
operator|+
literal|"] but was: "
operator|+
operator|(
name|size
operator|)
argument_list|,
name|size
operator|>=
name|lower
operator|&&
name|size
operator|<=
operator|(
name|upper
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Blob
name|createBlob
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|createBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Regression test for OAK-2192 testing for mixed segments. This test does not      * cover OAK-3348. I.e. it does not assert the segment graph is free of cross      * gc generation references.      */
annotation|@
name|Test
specifier|public
name|void
name|testMixedSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStore
name|store
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
literal|true
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|DEFAULT
operator|.
name|setForceAfterFail
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|compactionSuccess
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeBuilder
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createNodes
argument_list|(
name|root
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|beforeSegments
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|collectSegments
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|beforeSegments
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|run
init|=
operator|new
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|failedCommits
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|threads
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|k
decl_stmt|;
name|threads
index|[
name|k
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|run
operator|.
name|get
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
literal|"b-"
operator|+
name|threadId
operator|+
literal|","
operator|+
name|j
decl_stmt|;
try|try
block|{
name|NodeBuilder
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|root
operator|.
name|setChildNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|failedCommits
operator|.
name|add
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|k
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|compact
argument_list|()
expr_stmt|;
name|run
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"Failed to acquire compaction lock"
argument_list|,
name|compactionSuccess
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed commits: "
operator|+
name|failedCommits
argument_list|,
name|failedCommits
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|afterSegments
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|collectSegments
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|afterSegments
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|UUID
name|u
range|:
name|beforeSegments
control|)
block|{
name|assertFalse
argument_list|(
literal|"Mixed segments found: "
operator|+
name|u
argument_list|,
name|afterSegments
operator|.
name|contains
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Set a root node referring to a child node that lives in a different segments. Depending      * on the order how the SegmentBufferWriters associated with the threads used to create the      * nodes are flushed, this will introduce a forward reference between the segments.      * The current cleanup mechanism cannot handle forward references and removes the referenced      * segment causing a SNFE.      * This is a regression introduced with OAK-1828.      */
annotation|@
name|Test
specifier|public
name|void
name|cleanupCyclicGraph
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|SegmentWriter
name|writer
init|=
name|fileStore
operator|.
name|getTracker
argument_list|()
operator|.
name|getWriter
argument_list|()
decl_stmt|;
specifier|final
name|SegmentNodeState
name|oldHead
init|=
name|fileStore
operator|.
name|getHead
argument_list|()
decl_stmt|;
specifier|final
name|SegmentNodeState
name|child
init|=
name|run
argument_list|(
operator|new
name|Callable
argument_list|<
name|SegmentNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SegmentNodeState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|writer
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|newHead
init|=
name|run
argument_list|(
operator|new
name|Callable
argument_list|<
name|SegmentNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SegmentNodeState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|oldHead
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"child"
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|setHead
argument_list|(
name|oldHead
argument_list|,
name|newHead
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStore
operator|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|traverse
argument_list|(
name|fileStore
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
comment|// Traversal after cleanup might result in an SNFE
name|traverse
argument_list|(
name|fileStore
operator|.
name|getHead
argument_list|()
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|traverse
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
for|for
control|(
name|ChildNodeEntry
name|childNodeEntry
range|:
name|node
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|traverse
argument_list|(
name|childNodeEntry
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|run
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|FutureTask
argument_list|<
name|T
argument_list|>
name|task
init|=
operator|new
name|FutureTask
argument_list|<
name|T
argument_list|>
argument_list|(
name|callable
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|task
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|task
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Test asserting OAK-3348: Cross gc sessions might introduce references to pre-compacted segments      */
annotation|@
name|Test
specifier|public
name|void
name|preCompactionReferences
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|String
name|ref
range|:
operator|new
name|String
index|[]
block|{
literal|"merge-before-compact"
block|,
literal|"merge-after-compact"
block|}
control|)
block|{
name|SegmentGCOptions
name|gcOptions
init|=
name|DEFAULT
decl_stmt|;
name|File
name|repoDir
init|=
operator|new
name|File
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|repoDir
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|SegmentNodeStore
name|nodeStore
init|=
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
comment|// add some content
name|NodeBuilder
name|preGCBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|preGCBuilder
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob"
argument_list|,
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|preGCBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// remove it again so we have something to gc
name|preGCBuilder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|preGCBuilder
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|preGCBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// with a new builder simulate exceeding the update limit.
comment|// This will cause changes to be pre-written to segments
name|preGCBuilder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|preGCBuilder
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|getInteger
argument_list|(
literal|"update.limit"
argument_list|,
literal|10000
argument_list|)
condition|;
name|k
operator|+=
literal|2
control|)
block|{
name|preGCBuilder
operator|.
name|setChildNode
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// case 1: merge above changes before compact
if|if
condition|(
literal|"merge-before-compact"
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|preGCBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
comment|// Ensure cleanup is efficient by surpassing the number of
comment|// retained generations
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
comment|// case 2: merge above changes after compact
if|if
condition|(
literal|"merge-after-compact"
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|preGCBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Re-initialise the file store to simulate off-line gc
name|fileStore
operator|=
name|FileStore
operator|.
name|builder
argument_list|(
name|repoDir
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
comment|// The 1M blob should get gc-ed
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ref
operator|+
literal|" repository size "
operator|+
name|fileStore
operator|.
name|size
argument_list|()
operator|+
literal|"< "
operator|+
literal|1024
operator|*
literal|1024
argument_list|,
name|fileStore
operator|.
name|size
argument_list|()
operator|<
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|collectSegments
parameter_list|(
name|SegmentNodeState
name|s
parameter_list|,
specifier|final
name|Set
argument_list|<
name|UUID
argument_list|>
name|segmentIds
parameter_list|)
block|{
operator|new
name|SegmentParser
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{
name|super
operator|.
name|onNode
argument_list|(
name|parentId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|nodeId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{
name|super
operator|.
name|onTemplate
argument_list|(
name|parentId
argument_list|,
name|templateId
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|templateId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMap
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|super
operator|.
name|onMap
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|mapId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapDiff
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|super
operator|.
name|onMapDiff
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|mapId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|super
operator|.
name|onMapLeaf
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|mapId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapBranch
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
name|super
operator|.
name|onMapBranch
argument_list|(
name|parentId
argument_list|,
name|mapId
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|mapId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
name|super
operator|.
name|onProperty
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|template
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|propertyId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onValue
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|valueId
parameter_list|,
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|super
operator|.
name|onValue
argument_list|(
name|parentId
argument_list|,
name|valueId
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|valueId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
name|super
operator|.
name|onBlob
argument_list|(
name|parentId
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|blobId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{
name|super
operator|.
name|onString
argument_list|(
name|parentId
argument_list|,
name|stringId
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|stringId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
operator|.
name|onList
argument_list|(
name|parentId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|listId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onListBucket
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|super
operator|.
name|onListBucket
argument_list|(
name|parentId
argument_list|,
name|listId
argument_list|,
name|index
argument_list|,
name|count
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|segmentIds
operator|.
name|add
argument_list|(
name|listId
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|parseNode
argument_list|(
name|s
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createNodes
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
condition|;
name|k
operator|++
control|)
block|{
name|NodeBuilder
name|child
init|=
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"node"
operator|+
name|k
argument_list|)
decl_stmt|;
name|createProperties
argument_list|(
name|child
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|createNodes
argument_list|(
name|child
argument_list|,
name|count
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|createProperties
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
condition|;
name|k
operator|++
control|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"property-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"value-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyRetention
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|SegmentGCOptions
name|gcOptions
init|=
name|DEFAULT
decl_stmt|;
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|1
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Add a property
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"property"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// Segment id of the current segment
name|NodeState
name|test
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|SegmentId
name|id
init|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|test
operator|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fileStore
operator|.
name|containsSegment
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add enough content to fill up the current tar file
name|builder
operator|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|addContent
argument_list|(
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"dump"
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// Segment and property still there
name|assertTrue
argument_list|(
name|fileStore
operator|.
name|containsSegment
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyState
name|property
init|=
name|test
operator|.
name|getProperty
argument_list|(
literal|"property"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|property
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// GC should remove the segment
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Ensure cleanup is efficient by surpassing the number of
comment|// retained generations
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
name|fileStore
operator|.
name|cleanup
argument_list|()
expr_stmt|;
try|try
block|{
name|fileStore
operator|.
name|readSegment
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Segment "
operator|+
name|id
operator|+
literal|"should be gc'ed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|ignore
parameter_list|)
block|{}
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpointDeduplicationTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|FileStore
name|fileStore
init|=
name|FileStore
operator|.
name|builder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|SegmentNodeStore
name|nodeStore
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"bb"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"cc"
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|String
name|cpId
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|NodeState
name|uncompacted
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|fileStore
operator|.
name|compact
argument_list|()
expr_stmt|;
name|NodeState
name|compacted
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|uncompacted
argument_list|,
name|compacted
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uncompacted
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compacted
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|SegmentNodeState
operator|)
name|uncompacted
operator|)
operator|.
name|getStableId
argument_list|()
argument_list|,
operator|(
operator|(
name|SegmentNodeState
operator|)
name|compacted
operator|)
operator|.
name|getStableId
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|checkpoint
init|=
name|nodeStore
operator|.
name|retrieve
argument_list|(
name|cpId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkpoint
operator|instanceof
name|SegmentNodeState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checkpoint should get de-duplicated"
argument_list|,
operator|(
operator|(
name|Record
operator|)
name|compacted
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|,
operator|(
operator|(
name|Record
operator|)
name|checkpoint
operator|)
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addContent
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10000
condition|;
name|k
operator|++
control|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

