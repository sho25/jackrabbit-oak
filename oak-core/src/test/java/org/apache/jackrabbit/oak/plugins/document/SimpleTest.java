begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Node
operator|.
name|Children
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_comment
comment|/**  * A set of simple tests.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|MONGO_DB
init|=
literal|false
decl_stmt|;
comment|// private static final boolean MONGO_DB = true;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathToId
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"0:/"
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"0:/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1:/test"
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test"
argument_list|,
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"1:/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10:/1/2/3/3/4/6/7/8/9/a"
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
literal|"/1/2/3/3/4/6/7/8/9/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/1/2/3/3/4/6/7/8/9/a"
argument_list|,
name|Utils
operator|.
name|getPathFromId
argument_list|(
literal|"10:/1/2/3/3/4/6/7/8/9/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathDepth
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|"1/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|"/a/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Utils
operator|.
name|pathDepth
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodeGetNode
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
name|Revision
name|rev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
operator|new
name|Node
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|UpdateOp
name|op
init|=
name|n
operator|.
name|asOperation
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// mark as commit root
name|NodeDocument
operator|.
name|setRevision
argument_list|(
name|op
argument_list|,
name|rev
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|DocumentStore
name|s
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|op
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|n2
init|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|n2
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeIdentifier
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|rev0
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"a\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev3
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"b\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev4
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"^\"a/x\":1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|r0
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/@r0-0-1\",\":childNodeCount\":0}"
argument_list|,
name|r0
argument_list|)
expr_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/@r1-0-1\",\"test\":{},\":childNodeCount\":1}"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|r2
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/@r2-0-1\",\"test\":{},\":childNodeCount\":1}"
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|String
name|r3
decl_stmt|;
name|r3
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/@r3-0-1\",\"test\":{},\":childNodeCount\":1}"
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|r3
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/test@r3-0-1\",\"a\":{},\"b\":{},\":childNodeCount\":2}"
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|String
name|r4
decl_stmt|;
name|r4
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/@r4-0-1\",\"test\":{},\":childNodeCount\":1}"
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|r4
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/test@r4-0-1\",\"a\":{},\"b\":{},\":childNodeCount\":2}"
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|r4
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test/a"
argument_list|,
name|rev4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/test/a@r4-0-1\",\"x\":1,\":childNodeCount\":0}"
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|r4
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test/b"
argument_list|,
name|rev4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|":id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\":id\":\"/test/b@r3-0-1\",\":childNodeCount\":0}"
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|conflict
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"b\": {}  +\"a\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// the previous commit should be rolled back now,
comment|// so this should work
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"b\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|diff
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev0
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"t1\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"t2\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev3
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"t3\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev4
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\"t3/x\":1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|r0
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":0}"
argument_list|,
name|r0
argument_list|)
expr_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"t1\":{},\":childNodeCount\":1}"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|String
name|r2
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"t1\":{},\"t2\":{},\":childNodeCount\":2}"
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|String
name|r3
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"t1\":{},\"t2\":{},\"t3\":{},\":childNodeCount\":3}"
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|String
name|diff01
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev0
argument_list|,
name|rev1
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/t1\":{}"
argument_list|,
name|diff01
argument_list|)
expr_stmt|;
name|String
name|diff12
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/t2\":{}"
argument_list|,
name|diff12
argument_list|)
expr_stmt|;
name|String
name|diff23
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev2
argument_list|,
name|rev3
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/t3\":{}"
argument_list|,
name|diff23
argument_list|)
expr_stmt|;
name|String
name|diff13
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev1
argument_list|,
name|rev3
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+\"/t2\":{}\n+\"/t3\":{}"
argument_list|,
name|diff13
argument_list|)
expr_stmt|;
name|String
name|diff34
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev3
argument_list|,
name|rev4
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"^\"/t3\":{}"
argument_list|,
name|diff34
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reAddDeleted
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev0
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"name\": \"Hello\"} ^ \"x\": 1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"test\" ^ \"x\": 2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|rev3
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"name\": \"Hallo\"} ^ \"x\": 3"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|test0
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|test0
argument_list|)
expr_stmt|;
name|String
name|test1
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"name\":\"Hello\",\":childNodeCount\":0}"
argument_list|,
name|test1
argument_list|)
expr_stmt|;
name|String
name|test2
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|test2
argument_list|)
expr_stmt|;
name|String
name|test3
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"name\":\"Hallo\",\":childNodeCount\":0}"
argument_list|,
name|test3
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reAddDeleted2
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"x\":\"1\",\"child\": {}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"test\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{}  +\"test2\": {}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|test
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":0}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|String
name|test2
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test2"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\":childNodeCount\":0}"
argument_list|,
name|test2
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"x\":\"1\",\"child\": {}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\"test\": \"/test2\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|test
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test2"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"x\":\"1\",\"child\":{},\":childNodeCount\":1}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|test
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"x\":\"1\",\"child\": {}}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"*\"test\": \"/test2\""
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|test
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test2"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"x\":\"1\",\"child\":{},\":childNodeCount\":1}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|test
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"x\":\"1\",\"child\":{},\":childNodeCount\":1}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|escapePropertyName
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"name.first\": \"Hello\", \"_id\": \"a\", \"$x\": \"1\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"$x\":\"1\",\"_id\":\"a\",\"name.first\":\"Hello\",\":childNodeCount\":0}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\":{\"name\": \"Hello\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{\"name\":\"Hello\",\":childNodeCount\":0}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|String
name|r0
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"a\":{\"name\": \"World\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"b\":{\"name\": \"!\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|r0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|r0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Children
name|c
init|=
name|ns
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[/test]"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/test"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|c
operator|=
name|ns
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[/test/a, /test/b]"
argument_list|,
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"^\"/test\":1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|test
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"test\":1,\"test\":{},\":childNodeCount\":1}"
argument_list|,
name|test
argument_list|)
expr_stmt|;
comment|// System.out.println(test);
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"testDel\":{\"name\": \"Hello\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/testDel"
argument_list|,
literal|"+\"a\":{\"name\": \"World\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/testDel"
argument_list|,
literal|"+\"b\":{\"name\": \"!\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/testDel"
argument_list|,
literal|"+\"c\":{\"name\": \"!\"}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/testDel"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|r1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Children
name|c
init|=
name|ns
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/testDel"
argument_list|,
literal|"-\"c\""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|n
operator|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/testDel"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|c
operator|=
name|ns
operator|.
name|getChildren
argument_list|(
name|n
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r3
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"testDel\""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|n
operator|=
name|ns
operator|.
name|getNode
argument_list|(
literal|"/testDel"
argument_list|,
name|Revision
operator|.
name|fromString
argument_list|(
name|r3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|escapeUnescape
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
decl_stmt|;
name|String
name|nodes
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|int
name|len
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|128
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|buff
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|x2
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|x2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|value
argument_list|(
literal|"x"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
operator|+
name|s
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|value
argument_list|(
literal|"x"
argument_list|)
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|n
init|=
name|jsop
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|n
operator|=
name|jsop
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeAndPropertyNames
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|rev
decl_stmt|;
name|String
name|nodes
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
literal|"_"
block|,
literal|"$"
block|,
literal|"__"
block|,
literal|"_id"
block|,
literal|"$x"
block|,
literal|"."
block|,
literal|".\\"
block|,
literal|"x\\"
block|,
literal|"\\x"
block|,
literal|"first.name"
block|}
control|)
block|{
name|String
name|x2
init|=
name|Utils
operator|.
name|escapePropertyName
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|Utils
operator|.
name|unescapePropertyName
argument_list|(
name|x2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|value
argument_list|(
literal|"x"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
operator|+
name|s
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|value
argument_list|(
literal|"x"
argument_list|)
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|n
init|=
name|jsop
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|rev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
name|s
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|n
operator|=
name|jsop
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|jsop
operator|=
operator|new
name|JsopBuilder
argument_list|()
expr_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|rev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|jsop
operator|.
name|toString
argument_list|()
argument_list|,
name|rev
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addAndMove
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/root\":{}\n"
operator|+
literal|"+\"/root/a\":{}\n"
operator|+
literal|"+\"/root/a/b\":{}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|">\"/root/a\":\"/root/c\"\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/a"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/c/b"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitRoot
parameter_list|()
block|{
name|DocumentMK
name|mk
init|=
name|createMK
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentStore
name|store
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|Revision
name|head
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
decl_stmt|;
name|head
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/test\":{\"foo\":{}}"
argument_list|,
name|head
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// root node must not have the revision
name|NodeDocument
name|rootDoc
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"0:/"
argument_list|)
decl_stmt|;
comment|//As we update the childStatus flag the commit root would shift
comment|//one layer above
comment|// assertNotNull(rootDoc);
comment|// assertFalse(rootDoc.containsRevision(head));
comment|// test node must have head in revisions
name|NodeDocument
name|node
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"1:/test"
argument_list|)
decl_stmt|;
comment|//assertNotNull(node);
comment|//assertTrue(node.containsRevision(head));
comment|// foo must not have head in revisions and must refer to test
comment|// as commit root (depth = 1)
name|NodeDocument
name|foo
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"2:/test/foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|foo
operator|.
name|containsRevision
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|foo
operator|.
name|getCommitRootPath
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/bar\":{}+\"/test/foo/bar\":{}"
argument_list|,
name|head
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// root node is root of commit
name|rootDoc
operator|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"0:/"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rootDoc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootDoc
operator|.
name|containsRevision
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
comment|// /bar refers to root nodes a commit root
name|NodeDocument
name|bar
init|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"1:/bar"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|bar
operator|.
name|getCommitRootPath
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
comment|// /test/foo/bar refers to root nodes a commit root
name|bar
operator|=
name|store
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
literal|"3:/test/foo/bar"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|bar
operator|.
name|getCommitRootPath
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|DocumentMK
name|createMK
parameter_list|()
block|{
return|return
name|createMK
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DocumentMK
name|createMK
parameter_list|(
name|boolean
name|useSimpleRevision
parameter_list|)
block|{
name|DocumentMK
operator|.
name|Builder
name|builder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|MONGO_DB
condition|)
block|{
name|DB
name|db
init|=
name|MongoUtils
operator|.
name|getConnection
argument_list|()
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|MongoUtils
operator|.
name|dropCollections
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMongoDB
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setUseSimpleRevision
argument_list|(
name|useSimpleRevision
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|open
argument_list|()
return|;
block|}
block|}
end_class

end_unit

