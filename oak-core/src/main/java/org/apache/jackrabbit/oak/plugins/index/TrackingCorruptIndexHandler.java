begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TrackingCorruptIndexHandler
implements|implements
name|CorruptIndexHandler
block|{
specifier|static
specifier|final
name|String
name|CORRUPT_INDEX_METER_NAME
init|=
literal|"corrupt-index"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
name|long
name|errorWarnIntervalMillis
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
decl_stmt|;
specifier|private
name|long
name|indexerCycleCount
decl_stmt|;
specifier|private
name|long
name|corruptIntervalMillis
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|30
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|indexes
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
name|MeterStats
name|meter
decl_stmt|;
name|void
name|setMeterStats
parameter_list|(
name|MeterStats
name|meter
parameter_list|)
block|{
name|this
operator|.
name|meter
operator|=
name|meter
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|getCorruptIndexData
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
if|if
condition|(
name|corruptIntervalMillis
operator|<=
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|CorruptIndexInfo
name|info
range|:
name|indexes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|asyncName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|asyncName
argument_list|)
operator|&&
name|info
operator|.
name|isFailingSinceLongTime
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|getFailingIndexData
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|CorruptIndexInfo
name|info
range|:
name|indexes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|asyncName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|asyncName
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|markWorkingIndexes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|updatedIndexPaths
parameter_list|)
block|{
name|indexerCycleCount
operator|++
expr_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|updatedIndexPaths
control|)
block|{
name|CorruptIndexInfo
name|info
init|=
name|indexes
operator|.
name|remove
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Index at [{}] which was so far failing {} is now working again."
argument_list|,
name|info
operator|.
name|path
argument_list|,
name|info
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|meter
operator|!=
literal|null
operator|&&
operator|!
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|meter
operator|.
name|mark
argument_list|(
name|indexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFailing
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
return|return
operator|!
name|getFailingIndexData
argument_list|(
name|asyncName
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|//~--------------------------------< CorruptIndexHandler>
annotation|@
name|Override
specifier|public
name|boolean
name|skippingCorruptIndex
parameter_list|(
name|String
name|async
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Calendar
name|corruptSince
parameter_list|)
block|{
name|CorruptIndexInfo
name|info
init|=
name|getOrCreateInfo
argument_list|(
name|async
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|skippedIndexing
argument_list|(
name|checkNotNull
argument_list|(
name|corruptSince
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring corrupt index [{}] which has been marked as corrupt [{}]. This index "
operator|+
literal|"MUST be reindexed for indexing to work properly"
argument_list|,
name|indexPath
argument_list|,
name|info
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indexUpdateFailed
parameter_list|(
name|String
name|async
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|meter
operator|!=
literal|null
condition|)
block|{
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
name|getOrCreateInfo
argument_list|(
name|async
argument_list|,
name|indexPath
argument_list|)
operator|.
name|addFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//~---------------------------------< Setters>
specifier|public
name|void
name|setCorruptInterval
parameter_list|(
name|long
name|interval
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|corruptIntervalMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorWarnInterval
parameter_list|(
name|long
name|errorWarnInterval
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|errorWarnIntervalMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|errorWarnInterval
argument_list|)
expr_stmt|;
block|}
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
name|long
name|getCorruptIntervalMillis
parameter_list|()
block|{
return|return
name|corruptIntervalMillis
return|;
block|}
name|long
name|getErrorWarnIntervalMillis
parameter_list|()
block|{
return|return
name|errorWarnIntervalMillis
return|;
block|}
specifier|private
name|long
name|getTime
parameter_list|()
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|CorruptIndexInfo
name|getOrCreateInfo
parameter_list|(
name|String
name|asyncName
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|CorruptIndexInfo
name|info
init|=
name|indexes
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|CorruptIndexInfo
argument_list|(
name|asyncName
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|indexes
operator|.
name|put
argument_list|(
name|indexPath
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|public
class|class
name|CorruptIndexInfo
block|{
specifier|private
specifier|final
name|String
name|asyncName
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|long
name|lastIndexerCycleCount
init|=
name|indexerCycleCount
decl_stmt|;
specifier|private
specifier|final
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|(
operator|new
name|ClockTicker
argument_list|(
name|clock
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|String
name|exception
init|=
literal|""
decl_stmt|;
specifier|private
name|int
name|failureCount
decl_stmt|;
specifier|private
name|int
name|skippedCount
decl_stmt|;
specifier|private
name|long
name|corruptSince
decl_stmt|;
name|CorruptIndexInfo
parameter_list|(
name|String
name|asyncName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|asyncName
operator|=
name|asyncName
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|corruptSince
operator|=
name|getTime
argument_list|()
expr_stmt|;
block|}
name|void
name|addFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|failureCount
operator|++
expr_stmt|;
block|}
name|boolean
name|skippedIndexing
parameter_list|(
name|Calendar
name|corruptSince
parameter_list|)
block|{
name|skippedCount
operator|++
expr_stmt|;
name|this
operator|.
name|corruptSince
operator|=
name|corruptSince
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|watch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|errorWarnIntervalMillis
condition|)
block|{
name|watch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isFailingSinceLongTime
parameter_list|()
block|{
return|return
name|getTime
argument_list|()
operator|-
name|corruptSince
operator|>
name|corruptIntervalMillis
return|;
block|}
specifier|public
name|String
name|getStats
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"since %tc ,%d indexing cycles, failed %d times, skipped %d time"
argument_list|,
name|corruptSince
argument_list|,
name|getCycleCount
argument_list|()
argument_list|,
name|failureCount
argument_list|,
name|skippedCount
argument_list|)
return|;
block|}
specifier|public
name|Calendar
name|getCorruptSinceAsCal
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|corruptSince
argument_list|)
expr_stmt|;
return|return
name|cal
return|;
block|}
specifier|public
name|String
name|getLastException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
specifier|public
name|boolean
name|isMarkedAsCorrupt
parameter_list|()
block|{
return|return
name|skippedCount
operator|>
literal|0
return|;
block|}
specifier|public
name|int
name|getSkippedCount
parameter_list|()
block|{
return|return
name|skippedCount
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|private
name|long
name|getCycleCount
parameter_list|()
block|{
return|return
name|indexerCycleCount
operator|-
name|lastIndexerCycleCount
return|;
block|}
block|}
comment|//~-----------------------------------------------------< MBean Support>
specifier|public
name|TabularData
name|getFailingIndexStats
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|TrackingCorruptIndexHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Failing Index Stats"
argument_list|,
name|FailingIndexStats
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|infos
init|=
name|getFailingIndexData
argument_list|(
name|asyncName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|e
range|:
name|infos
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FailingIndexStats
name|stats
init|=
operator|new
name|FailingIndexStats
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
argument_list|(
name|stats
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
specifier|private
specifier|static
class|class
name|FailingIndexStats
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"path"
block|,
literal|"stats"
block|,
literal|"markedCorrupt"
block|,
literal|"failingSince"
block|,
literal|"exception"
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
operator|new
name|String
index|[]
block|{
literal|"Path"
block|,
literal|"Failure stats"
block|,
literal|"Marked as corrupt"
block|,
literal|"Failure start time"
block|,
literal|"Exception"
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|FailingIndexStats
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Failing Index statistics"
argument_list|,
name|FailingIndexStats
operator|.
name|FIELD_NAMES
argument_list|,
name|FailingIndexStats
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|FailingIndexStats
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|CorruptIndexInfo
name|info
decl_stmt|;
specifier|public
name|FailingIndexStats
parameter_list|(
name|CorruptIndexInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|info
operator|.
name|path
block|,
name|info
operator|.
name|getStats
argument_list|()
block|,
name|info
operator|.
name|isMarkedAsCorrupt
argument_list|()
block|,
name|String
operator|.
name|format
argument_list|(
literal|"%tc"
argument_list|,
name|info
operator|.
name|getCorruptSinceAsCal
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
block|,
name|info
operator|.
name|getLastException
argument_list|()
block|,             }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ClockTicker
extends|extends
name|Ticker
block|{
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|ClockTicker
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|read
parameter_list|()
block|{
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

