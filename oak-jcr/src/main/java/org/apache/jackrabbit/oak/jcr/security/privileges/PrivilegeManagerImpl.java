begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|privileges
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Workspace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * PrivilegeManagerImpl...  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeManagerImpl
implements|implements
name|PrivilegeManager
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: move to an appropriate place
comment|// TODO: proper namespace handling once this is present in oak-jcr
specifier|private
specifier|static
specifier|final
name|String
name|PRIVILEGE_ROOT
init|=
name|Workspace
operator|.
name|NAME_SYSTEM_NODE
operator|+
literal|"/{internal}privileges"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NT_REP_PRIVILEGE
init|=
literal|"rep:Privilege"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REP_IS_ABSTRACT
init|=
literal|"rep:isAbstract"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REP_CONTAINS
init|=
literal|"rep:contains"
decl_stmt|;
specifier|private
specifier|final
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|PrivilegeManagerImpl
parameter_list|(
name|SessionContext
name|sessionContext
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|this
operator|.
name|sessionContext
operator|=
name|sessionContext
expr_stmt|;
comment|// TODO: add additional validation ??
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getRegisteredPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Privilege
argument_list|>
name|privileges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Privilege
argument_list|>
argument_list|()
decl_stmt|;
name|NodeIterator
name|it
init|=
name|getPrivilegeRoot
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|privilegeNode
init|=
name|it
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|Privilege
name|p
init|=
name|getPrivilege
argument_list|(
name|privilegeNode
argument_list|,
name|privileges
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|privileges
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|privileges
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|privileges
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|getPrivilege
parameter_list|(
name|String
name|privilegeName
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|RepositoryException
block|{
name|NodeImpl
name|privilegeRoot
init|=
name|getPrivilegeRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegeRoot
operator|.
name|hasNode
argument_list|(
name|privilegeName
argument_list|)
condition|)
block|{
return|return
name|getPrivilege
argument_list|(
name|privilegeRoot
operator|.
name|getNode
argument_list|(
name|privilegeName
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Privilege
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"No such privilege "
operator|+
name|privilegeName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|registerPrivilege
parameter_list|(
name|String
name|privilegeName
parameter_list|,
name|boolean
name|isAbstract
parameter_list|,
name|String
index|[]
name|declaredAggregateNames
parameter_list|)
throws|throws
name|AccessDeniedException
throws|,
name|RepositoryException
block|{
comment|// TODO
return|return
literal|null
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
name|NodeImpl
name|getPrivilegeRoot
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
operator|(
name|NodeImpl
operator|)
name|sessionContext
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|PRIVILEGE_ROOT
argument_list|)
return|;
block|}
specifier|private
name|Privilege
name|getPrivilege
parameter_list|(
name|Node
name|privilegeNode
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Privilege
argument_list|>
name|collected
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Privilege
name|privilege
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|privilegeNode
operator|.
name|isNodeType
argument_list|(
name|NT_REP_PRIVILEGE
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|privilegeNode
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|isAbstract
init|=
name|privilegeNode
operator|.
name|getProperty
argument_list|(
name|REP_IS_ABSTRACT
argument_list|)
operator|.
name|getBoolean
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|declaredAggrNames
decl_stmt|;
if|if
condition|(
name|privilegeNode
operator|.
name|hasProperty
argument_list|(
name|REP_CONTAINS
argument_list|)
condition|)
block|{
name|Value
index|[]
name|vs
init|=
name|privilegeNode
operator|.
name|getProperty
argument_list|(
name|REP_CONTAINS
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|declaredAggrNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|vs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|vs
control|)
block|{
name|String
name|privName
init|=
name|v
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPrivilegeRoot
argument_list|()
operator|.
name|hasNode
argument_list|(
name|privName
argument_list|)
condition|)
block|{
name|declaredAggrNames
operator|.
name|add
argument_list|(
name|privName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|declaredAggrNames
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|privilege
operator|=
operator|new
name|PrivilegeImpl
argument_list|(
name|name
argument_list|,
name|isAbstract
argument_list|,
name|declaredAggrNames
argument_list|)
expr_stmt|;
block|}
return|return
name|privilege
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
class|class
name|PrivilegeImpl
implements|implements
name|Privilege
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAbstract
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|declaredAggregateNames
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|declaredAggregates
decl_stmt|;
specifier|private
name|PrivilegeImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isAbstract
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|declaredAggregateNames
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|isAbstract
operator|=
name|isAbstract
expr_stmt|;
name|this
operator|.
name|declaredAggregateNames
operator|=
name|declaredAggregateNames
expr_stmt|;
block|}
comment|//------------------------------------------------------< Privilege>---
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|isAbstract
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
name|declaredAggregateNames
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getDeclaredAggregatePrivileges
parameter_list|()
block|{
if|if
condition|(
name|declaredAggregates
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|dagrPrivs
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|(
name|declaredAggregateNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pName
range|:
name|declaredAggregateNames
control|)
block|{
try|try
block|{
name|dagrPrivs
operator|.
name|add
argument_list|(
name|getPrivilege
argument_list|(
name|pName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while retrieving privilege "
operator|+
name|pName
operator|+
literal|" contained in "
operator|+
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|declaredAggregates
operator|=
name|dagrPrivs
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|dagrPrivs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|declaredAggregates
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getAggregatePrivileges
parameter_list|()
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|aggr
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Privilege
name|decl
range|:
name|getDeclaredAggregatePrivileges
argument_list|()
control|)
block|{
name|aggr
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
if|if
condition|(
name|decl
operator|.
name|isAggregate
argument_list|()
condition|)
block|{
comment|// TODO: defensive check to prevent circular aggregation
name|aggr
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|decl
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggr
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|aggr
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

