begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|lucene
operator|.
name|LuceneIndexUtils
operator|.
name|getIndexInfos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|KernelNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A provider for Lucene indexes. There is exactly one Lucene index instance per  * MicroKernel.  */
end_comment

begin_class
specifier|public
class|class
name|LuceneIndexProvider
implements|implements
name|QueryIndexProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneIndexProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
name|boolean
name|init
decl_stmt|;
comment|/**      * The indexes list      *       * lazy init      */
specifier|private
name|List
argument_list|<
name|QueryIndex
argument_list|>
name|indexes
init|=
literal|null
decl_stmt|;
specifier|public
name|LuceneIndexProvider
parameter_list|(
name|String
name|indexPath
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
if|if
condition|(
name|init
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing indexes"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isValid
argument_list|(
name|indexPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"index path is not valid {}"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|indexes
operator|=
name|Collections
operator|.
expr|<
name|QueryIndex
operator|>
name|emptyList
argument_list|()
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|NodeStore
name|store
init|=
operator|new
name|KernelNodeStore
argument_list|(
name|mk
argument_list|)
decl_stmt|;
name|NodeState
name|index
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|indexPath
argument_list|)
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|e
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|index
operator|=
name|index
operator|.
name|getChildNode
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
comment|// TODO what should happen when the index node doesn't exist?
name|indexes
operator|=
name|Collections
operator|.
expr|<
name|QueryIndex
operator|>
name|emptyList
argument_list|()
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|QueryIndex
argument_list|>
name|tempIndexes
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryIndex
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexDefinition
name|childIndex
range|:
name|getIndexInfos
argument_list|(
name|index
argument_list|,
name|indexPath
argument_list|)
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding a new lucene index instance @ {}"
argument_list|,
name|childIndex
argument_list|)
expr_stmt|;
name|tempIndexes
operator|.
name|add
argument_list|(
operator|new
name|LuceneIndex
argument_list|(
name|store
argument_list|,
name|childIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexes
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueryIndex
argument_list|>
argument_list|(
name|tempIndexes
argument_list|)
expr_stmt|;
name|init
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|init
argument_list|(
name|mk
argument_list|)
expr_stmt|;
return|return
name|indexes
return|;
block|}
block|}
end_class

end_unit

