begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|jmx
operator|.
name|StandbyStatusMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|store
operator|.
name|CommunicationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StandbyServerSync
implements|implements
name|StandbyStatusMBean
implements|,
name|StateConsumer
implements|,
name|StoreProvider
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandbyServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
specifier|final
name|CommunicationObserver
name|observer
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|allowedClientIPRanges
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|secure
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|state
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|StandbyServer
name|server
decl_stmt|;
specifier|public
name|StandbyServerSync
parameter_list|(
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|FileStore
name|fileStore
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|fileStore
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServerSync
parameter_list|(
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|FileStore
name|fileStore
parameter_list|,
specifier|final
name|boolean
name|secure
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|fileStore
argument_list|,
literal|null
argument_list|,
name|secure
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServerSync
parameter_list|(
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|FileStore
name|fileStore
parameter_list|,
specifier|final
name|String
index|[]
name|allowedClientIPRanges
parameter_list|)
block|{
name|this
argument_list|(
name|port
argument_list|,
name|fileStore
argument_list|,
name|allowedClientIPRanges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StandbyServerSync
parameter_list|(
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|FileStore
name|fileStore
parameter_list|,
specifier|final
name|String
index|[]
name|allowedClientIPRanges
parameter_list|,
specifier|final
name|boolean
name|secure
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|fileStore
operator|=
name|fileStore
expr_stmt|;
name|this
operator|.
name|allowedClientIPRanges
operator|=
name|allowedClientIPRanges
expr_stmt|;
name|this
operator|.
name|secure
operator|=
name|secure
expr_stmt|;
name|this
operator|.
name|observer
operator|=
operator|new
name|CommunicationObserver
argument_list|(
literal|"primary"
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
try|try
block|{
name|jmxServer
operator|.
name|registerMBean
argument_list|(
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|StandbyStatusMBean
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|this
operator|.
name|getMBeanName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can't register standby status mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileStore
name|provideStore
parameter_list|()
block|{
return|return
name|fileStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
return|return;
block|}
name|state
operator|=
name|STATUS_STARTING
expr_stmt|;
try|try
block|{
name|server
operator|=
name|StandbyServer
operator|.
name|builder
argument_list|(
name|port
argument_list|,
name|this
argument_list|)
operator|.
name|secure
argument_list|(
name|secure
argument_list|)
operator|.
name|allowIPRanges
argument_list|(
name|allowedClientIPRanges
argument_list|)
operator|.
name|withStateConsumer
argument_list|(
name|this
argument_list|)
operator|.
name|withObserver
argument_list|(
name|observer
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|state
operator|=
name|STATUS_RUNNING
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Server could not be started."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|state
operator|=
literal|null
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|state
operator|=
name|STATUS_STOPPED
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|state
operator|=
name|STATUS_CLOSING
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|observer
operator|.
name|unregister
argument_list|()
expr_stmt|;
specifier|final
name|MBeanServer
name|jmxServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
try|try
block|{
name|jmxServer
operator|.
name|unregisterMBean
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|this
operator|.
name|getMBeanName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can't unregister standby status mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|STATUS_CLOSED
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
literal|"primary"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|state
operator|==
literal|null
condition|?
name|STATUS_INITIALIZING
else|:
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|String
name|getMBeanName
parameter_list|()
block|{
return|return
name|StandbyStatusMBean
operator|.
name|JMX_NAME
operator|+
literal|",id="
operator|+
name|this
operator|.
name|port
return|;
block|}
block|}
end_class

end_unit

