begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PrivilegeImplTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|PrivilegeConstants
block|{
specifier|private
name|Privilege
name|privilege
decl_stmt|;
specifier|private
name|Privilege
name|abstractPrivilege
decl_stmt|;
specifier|private
name|Privilege
name|allPrivilege
decl_stmt|;
specifier|private
name|Privilege
name|aggrPrivilege
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|PrivilegeManager
name|pMgr
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|privilege
operator|=
name|pMgr
operator|.
name|getPrivilege
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|aggrPrivilege
operator|=
name|pMgr
operator|.
name|getPrivilege
argument_list|(
name|REP_WRITE
argument_list|)
expr_stmt|;
name|allPrivilege
operator|=
name|pMgr
operator|.
name|getPrivilege
argument_list|(
name|JCR_ALL
argument_list|)
expr_stmt|;
name|abstractPrivilege
operator|=
name|pMgr
operator|.
name|registerPrivilege
argument_list|(
literal|"abstractPrivilege"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertAggregation
parameter_list|(
annotation|@
name|NotNull
name|Privilege
index|[]
name|aggr
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|expectedNames
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedNames
operator|.
name|length
argument_list|,
name|aggr
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|expectedNames
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|aggr
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Privilege
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Privilege
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAbstract
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|privilege
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allPrivilege
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aggrPrivilege
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|abstractPrivilege
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAggregate
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|privilege
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivilege
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aggrPrivilege
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|abstractPrivilege
operator|.
name|isAggregate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeclaredAggregatedPrivilegesSimple
parameter_list|()
block|{
name|assertAggregation
argument_list|(
name|privilege
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertAggregation
argument_list|(
name|aggrPrivilege
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedPrivileges
parameter_list|()
block|{
name|assertAggregation
argument_list|(
name|privilege
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|assertAggregation
argument_list|(
name|aggrPrivilege
operator|.
name|getAggregatePrivileges
argument_list|()
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
name|JCR_WRITE
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|JCR_MODIFY_PROPERTIES
argument_list|,
name|REP_ADD_PROPERTIES
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|privilege
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrivilege
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEquals
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|privilege
argument_list|,
name|aggrPrivilege
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|allPrivilege
argument_list|,
name|privilege
argument_list|)
expr_stmt|;
specifier|final
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionReader
argument_list|(
name|root
argument_list|)
operator|.
name|readDefinition
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|privilege
argument_list|,
operator|new
name|Privilege
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|def
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|def
operator|.
name|isAbstract
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
operator|!
name|def
operator|.
name|getDeclaredAggregateNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getDeclaredAggregatePrivileges
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getAggregatePrivileges
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionReader
argument_list|(
name|root
argument_list|)
operator|.
name|readDefinition
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|privilege
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidDeclaredAggregate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|privilegeDefs
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|privDef
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|privilegeDefs
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_PRIVILEGE
argument_list|)
decl_stmt|;
name|privDef
operator|.
name|setProperty
argument_list|(
name|REP_AGGREGATES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
literal|"invalid"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Privilege
name|p
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrivilege
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertAggregation
argument_list|(
name|p
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicDeclaredAggregate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|privilegeDefs
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|privDef
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|privilegeDefs
argument_list|,
literal|"test"
argument_list|,
name|NT_REP_PRIVILEGE
argument_list|)
decl_stmt|;
name|privDef
operator|.
name|setProperty
argument_list|(
name|REP_AGGREGATES
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Privilege
name|p
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrivilege
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertAggregation
argument_list|(
name|p
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

