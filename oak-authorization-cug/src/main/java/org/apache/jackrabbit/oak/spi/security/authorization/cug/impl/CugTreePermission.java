begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_comment
comment|/**  * {@code TreePermission} implementation for all tree located within one of the  * supported paths which may or may not contain a CUG.  */
end_comment

begin_class
specifier|final
class|class
name|CugTreePermission
extends|extends
name|AbstractTreePermission
implements|implements
name|CugConstants
block|{
specifier|private
specifier|final
name|TreePermission
name|parent
decl_stmt|;
specifier|private
name|Status
name|status
decl_stmt|;
name|CugTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreeType
name|type
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|CugPermissionProvider
name|permissionProvider
parameter_list|)
block|{
name|super
argument_list|(
name|tree
argument_list|,
name|type
argument_list|,
name|permissionProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
name|CugTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreeType
name|type
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|CugPermissionProvider
name|permissionProvider
parameter_list|,
name|boolean
name|inCug
parameter_list|,
name|boolean
name|canRead
parameter_list|)
block|{
name|super
argument_list|(
name|tree
argument_list|,
name|type
argument_list|,
name|permissionProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|status
operator|=
operator|new
name|Status
argument_list|(
name|inCug
argument_list|,
name|canRead
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isInCug
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|loadStatus
argument_list|()
expr_stmt|;
block|}
return|return
name|status
operator|.
name|inCug
return|;
block|}
name|boolean
name|isAllow
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|loadStatus
argument_list|()
expr_stmt|;
block|}
return|return
name|status
operator|.
name|allow
return|;
block|}
specifier|private
name|Status
name|getStatus
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|loadStatus
argument_list|()
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
specifier|private
name|void
name|loadStatus
parameter_list|()
block|{
name|Tree
name|cugTree
init|=
name|CugUtil
operator|.
name|getCug
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|cugTree
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
operator|new
name|Status
argument_list|(
literal|true
argument_list|,
name|permissionProvider
operator|.
name|isAllow
argument_list|(
name|cugTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|instanceof
name|CugTreePermission
condition|)
block|{
name|status
operator|=
operator|(
operator|(
name|CugTreePermission
operator|)
name|parent
operator|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|Status
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
comment|//-----------------------------------------------------< TreePermission>---
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
name|isAllow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|isAllow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
name|isAllow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
name|permissions
operator|==
name|Permissions
operator|.
name|READ_NODE
operator|&&
name|isAllow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|permissions
operator|==
name|Permissions
operator|.
name|READ_PROPERTY
operator|&&
name|isAllow
argument_list|()
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|final
specifier|static
class|class
name|Status
block|{
specifier|private
specifier|static
specifier|final
name|Status
name|FALSE
init|=
operator|new
name|Status
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|inCug
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allow
decl_stmt|;
specifier|private
name|Status
parameter_list|(
name|boolean
name|inCug
parameter_list|,
name|boolean
name|allow
parameter_list|)
block|{
name|this
operator|.
name|inCug
operator|=
name|inCug
expr_stmt|;
name|this
operator|.
name|allow
operator|=
name|allow
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

