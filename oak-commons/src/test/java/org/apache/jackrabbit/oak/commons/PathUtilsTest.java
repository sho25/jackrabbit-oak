begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_comment
comment|/**  * Test the PathUtils class.  */
end_comment

begin_class
specifier|public
class|class
name|PathUtilsTest
extends|extends
name|TestCase
block|{
specifier|static
name|boolean
name|assertsEnabled
decl_stmt|;
static|static
block|{
assert|assert
name|assertsEnabled
operator|=
literal|true
assert|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
block|{
try|try
block|{
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"invalid/path/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|getName
argument_list|(
literal|"invalid/path/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|test
argument_list|(
literal|"parent"
argument_list|,
literal|"child"
argument_list|)
expr_stmt|;
name|test
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDepth
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
literal|"a/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcatRelativePaths
parameter_list|()
block|{
name|assertNull
argument_list|(
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/b/c"
argument_list|,
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/b/c"
argument_list|,
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|"a"
argument_list|,
literal|"b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/b/c"
argument_list|,
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|"a/b/c"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/b/c"
argument_list|,
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|"a/b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/b/c"
argument_list|,
name|PathUtils
operator|.
name|concatRelativePaths
argument_list|(
literal|"/"
argument_list|,
literal|"a"
argument_list|,
literal|""
argument_list|,
literal|"b/c/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getElementCount
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
specifier|static
name|String
name|getElement
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|index
operator|==
name|count
operator|++
condition|)
block|{
return|return
name|p
return|;
block|}
block|}
name|fail
argument_list|()
expr_stmt|;
return|return
literal|""
return|;
block|}
specifier|private
specifier|static
name|void
name|test
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
comment|// split
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getElementCount
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getElementCount
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getElementCount
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getElementCount
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getElementCount
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getElementCount
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getElementCount
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|getElement
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|getElement
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|getElement
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|getElement
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
operator|+
literal|"1"
argument_list|,
name|getElement
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"1"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// concat
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|+
literal|"/"
argument_list|,
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
literal|""
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
name|child
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
name|child
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|child
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
literal|"//"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// denotesRoot
name|assertTrue
argument_list|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// getName
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|ROOT_NAME
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// getParentPath
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// getAncestorPath
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"/foo/bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"foo/bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|getAncestorPath
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// isAbsolute
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// isAncestor
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|parent
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
argument_list|,
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|parent
argument_list|,
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
argument_list|,
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
operator|+
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
operator|+
literal|"123/foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// relativize
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/"
argument_list|,
literal|"/"
operator|+
name|parent
operator|+
literal|"/"
operator|+
name|child
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"x/y"
argument_list|,
literal|"y/x"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testMore
parameter_list|()
block|{
name|String
index|[]
name|paths
init|=
block|{
literal|""
block|,
literal|"/"
block|,
literal|"foo"
block|,
literal|"/foo"
block|,
literal|"foo/bar"
block|,
literal|"/foo/bar"
block|,
literal|"foo/bar/baz"
block|,
literal|"/foo/bar/baz"
block|,
literal|"x"
block|,
literal|"/x"
block|,
literal|"x/y"
block|,
literal|"/x/y"
block|,
literal|"x/y/z"
block|,
literal|"/x/y/z"
block|,         }
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|String
name|parent
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|concat
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"original: "
operator|+
name|path
operator|+
literal|" parent: "
operator|+
name|parent
operator|+
literal|" name: "
operator|+
name|name
operator|+
literal|" concat: "
operator|+
name|concat
argument_list|,
name|path
argument_list|,
name|concat
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNextSlash
parameter_list|()
block|{
name|String
name|path
init|=
literal|"/test/a"
decl_stmt|;
name|int
name|n
init|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|path
argument_list|,
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
for|for
control|(
name|String
name|invalid
range|:
operator|new
name|String
index|[]
block|{
literal|"//"
block|,
literal|"//test"
block|,
literal|"/test/"
block|,
literal|"test/"
block|,
literal|"/test//"
block|,
literal|"/test//test"
block|,
literal|"//x"
block|,
literal|"/x/"
block|,
literal|"x/"
block|,
literal|"/x//"
block|,
literal|"/x//x"
block|,         }
control|)
block|{
try|try
block|{
name|PathUtils
operator|.
name|validate
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
for|for
control|(
name|String
name|valid
range|:
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"/"
block|,
literal|"test"
block|,
literal|"test/test"
block|,
literal|"/test"
block|,
literal|"/test/test"
block|,
literal|"x"
block|,
literal|"x/x"
block|,
literal|"/x"
block|,
literal|"/x/x"
block|,         }
control|)
block|{
name|PathUtils
operator|.
name|validate
argument_list|(
name|valid
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|""
argument_list|,
literal|"/test"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testValidateEverything
parameter_list|()
block|{
name|String
name|invalid
init|=
literal|"/test/test//test/test"
decl_stmt|;
try|try
block|{
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
name|invalid
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/x"
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
literal|"/x"
argument_list|,
literal|"y"
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|assertsEnabled
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|PathUtils
operator|.
name|concat
argument_list|(
name|invalid
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|getName
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|getNextSlash
argument_list|(
name|invalid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|relativize
argument_list|(
name|invalid
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|PathUtils
operator|.
name|relativize
argument_list|(
literal|"/test"
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testPathElements
parameter_list|()
block|{
name|String
index|[]
name|invalidPaths
init|=
operator|new
name|String
index|[]
block|{
literal|"//"
block|,
literal|"/a/"
block|,
literal|"a/"
block|,
literal|"/a//"
block|,
literal|"a//b"
block|}
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|invalidPaths
control|)
block|{
try|try
block|{
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
specifier|public
name|void
name|testElements
parameter_list|()
block|{
name|String
name|path
init|=
literal|"a/b/c"
decl_stmt|;
name|String
index|[]
name|elementsArray
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|elementsIterable
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elementsIterable
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|elementsArray
index|[
name|k
operator|++
index|]
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|k
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elementsIterable
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|elementsArray
index|[
name|k
operator|++
index|]
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOptimizeForIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|newHashSet
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|newHashSet
argument_list|(
literal|"/a/b"
argument_list|)
decl_stmt|;
name|PathUtils
operator|.
name|unifyInExcludes
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Excludes supercedes include"
argument_list|,
name|newHashSet
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|includes
operator|=
name|newHashSet
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b/c"
argument_list|)
expr_stmt|;
name|excludes
operator|=
name|newHashSet
argument_list|(
literal|"/a/b"
argument_list|)
expr_stmt|;
name|PathUtils
operator|.
name|unifyInExcludes
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Excludes supercedes include"
argument_list|,
name|newHashSet
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|includes
operator|=
name|newHashSet
argument_list|(
literal|"/a"
argument_list|,
literal|"/a/b/c"
argument_list|)
expr_stmt|;
name|excludes
operator|=
name|newHashSet
argument_list|()
expr_stmt|;
name|PathUtils
operator|.
name|unifyInExcludes
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|includes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOptimizeForExcludes
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|newHashSet
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|newHashSet
argument_list|(
literal|"/c"
argument_list|)
decl_stmt|;
name|PathUtils
operator|.
name|unifyInExcludes
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
literal|"/a"
argument_list|,
literal|"/b"
argument_list|)
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

