begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndex
operator|.
name|encode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|OrderedPropertyIndexLookup
block|{
comment|/**      * the standard Ascending ordered index      */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|STORE
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|()
decl_stmt|;
comment|/**      * the descending ordered index      */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|REVERSED_STORE
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|(
name|OrderDirection
operator|.
name|DESC
argument_list|)
decl_stmt|;
comment|/**      * we're slightly more expensive than the standard PropertyIndex.      */
specifier|private
specifier|static
specifier|final
name|double
name|COST_OVERHEAD
init|=
literal|3
decl_stmt|;
comment|/**      * The maximum cost when the index can be used.      */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COST
init|=
literal|100
decl_stmt|;
specifier|private
name|NodeState
name|root
decl_stmt|;
specifier|public
name|OrderedPropertyIndexLookup
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|/**      * Get the node with the index definition for the given property, if there      * is an applicable index with data.      *      * @param propertyName the property name      * @param filter the filter (which contains information of all supertypes,      *            unless the filter matches all types)      * @return the node where the index definition (metadata) is stored (the      *         parent of ":index"), or null if no index definition or index data      *         node was found      */
annotation|@
name|Nullable
name|NodeState
name|getIndexNode
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
comment|// keep a fallback to a matching index def that has *no* node type constraints
comment|// (initially, there is no fallback)
name|NodeState
name|fallback
init|=
literal|null
decl_stmt|;
name|NodeState
name|state
init|=
name|node
operator|.
name|getChildNode
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|index
init|=
name|entry
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|PropertyState
name|type
init|=
name|index
operator|.
name|getProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isArray
argument_list|()
operator|||
operator|!
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|contains
argument_list|(
name|index
operator|.
name|getNames
argument_list|(
name|PROPERTY_NAMES
argument_list|)
argument_list|,
name|propertyName
argument_list|)
condition|)
block|{
name|NodeState
name|indexContent
init|=
name|index
operator|.
name|getChildNode
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexContent
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|supertypes
init|=
name|getSuperTypes
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|hasProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
condition|)
block|{
if|if
condition|(
name|supertypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|typeName
range|:
name|index
operator|.
name|getNames
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
control|)
block|{
if|if
condition|(
name|supertypes
operator|.
name|contains
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
comment|// TODO: prefer the most specific type restriction
return|return
name|index
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|supertypes
operator|==
literal|null
condition|)
block|{
return|return
name|index
return|;
block|}
elseif|else
if|if
condition|(
name|fallback
operator|==
literal|null
condition|)
block|{
comment|// update the fallback
name|fallback
operator|=
name|index
expr_stmt|;
block|}
block|}
block|}
return|return
name|fallback
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSuperTypes
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|matchesAllTypes
argument_list|()
condition|)
block|{
return|return
name|filter
operator|.
name|getSupertypes
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
name|IndexStoreStrategy
name|getStrategy
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|)
block|{
if|if
condition|(
name|OrderDirection
operator|.
name|isAscending
argument_list|(
name|indexMeta
argument_list|)
condition|)
block|{
return|return
name|STORE
return|;
block|}
else|else
block|{
return|return
name|REVERSED_STORE
return|;
block|}
block|}
specifier|public
name|boolean
name|isAscending
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|OrderDirection
operator|.
name|isAscending
argument_list|(
name|indexMeta
argument_list|)
return|;
block|}
comment|/**      * Checks whether the named property is indexed somewhere along the given      * path. Lookup starts at the current path (at the root of this object) and      * traverses down the path.      *      * @param propertyName property name      * @param path lookup path      * @param filter for the node type restriction (null if no node type restriction)      * @return true if the property is indexed      */
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|path
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
operator|!=
literal|null
return|;
block|}
name|NodeState
name|node
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|getIndexNode
argument_list|(
name|node
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * retrieve the type of the index      *      * @return the type      */
name|String
name|getType
parameter_list|()
block|{
return|return
name|OrderedIndex
operator|.
name|TYPE
return|;
block|}
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|double
name|cost
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|!=
literal|null
condition|)
block|{
comment|// we relay then on the standard property index for the cost
name|cost
operator|=
name|COST_OVERHEAD
operator|+
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
operator|.
name|count
argument_list|(
name|indexMeta
argument_list|,
name|PropertyIndex
operator|.
name|encode
argument_list|(
name|value
argument_list|)
argument_list|,
name|MAX_COST
argument_list|)
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No index for "
operator|+
name|propertyName
argument_list|)
throw|;
block|}
return|return
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|propertyName
argument_list|,
name|indexMeta
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * query the strategy for the provided constrains      *       * @param filter      * @param propertyName      * @param pr      * @return the result set      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No index for "
operator|+
name|propertyName
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|OrderedContentMirrorStoreStrategy
operator|)
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
operator|)
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|propertyName
argument_list|,
name|indexMeta
argument_list|,
name|pr
argument_list|)
return|;
block|}
comment|/**      * return an estimated count to be used in IndexPlans.      *      * @param propertyName      * @param value      * @param filter      * @param pr      * @return the estimated count      */
specifier|public
name|long
name|getEstimatedEntryCount
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|OrderedContentMirrorStoreStrategy
name|strategy
init|=
operator|(
name|OrderedContentMirrorStoreStrategy
operator|)
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
decl_stmt|;
return|return
name|strategy
operator|.
name|count
argument_list|(
name|indexMeta
argument_list|,
name|pr
argument_list|,
name|MAX_COST
argument_list|)
return|;
block|}
block|}
end_class

end_unit

