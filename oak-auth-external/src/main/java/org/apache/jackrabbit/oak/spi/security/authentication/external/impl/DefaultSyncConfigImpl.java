begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncConfig
import|;
end_import

begin_comment
comment|/**  * {@code DefaultSyncConfig} defines how users and groups from an external source are synced into the repository using  * the {@link DefaultSyncHandler}.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|label
operator|=
literal|"Apache Jackrabbit Oak Default Sync Handler"
argument_list|,
name|name
operator|=
literal|"org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|ds
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|DefaultSyncConfigImpl
extends|extends
name|DefaultSyncConfig
block|{
comment|/**      * @see #getName()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_NAME_DEFAULT
init|=
literal|"default"
decl_stmt|;
comment|/**      * @see #getName()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Sync Handler Name"
argument_list|,
name|description
operator|=
literal|"Name of this sync configuration. This is used to reference this handler by the login modules."
argument_list|,
name|value
operator|=
name|PARAM_NAME_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_NAME
init|=
literal|"handler.name"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getExpirationTime()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_EXPIRATION_TIME_DEFAULT
init|=
literal|"1h"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getExpirationTime()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User Expiration Time"
argument_list|,
name|description
operator|=
literal|"Duration until a synced user gets expired (eg. '1h 30m' or '1d')."
argument_list|,
name|value
operator|=
name|PARAM_USER_EXPIRATION_TIME_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_EXPIRATION_TIME
init|=
literal|"user.expirationTime"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getAutoMembership()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_USER_AUTO_MEMBERSHIP_DEFAULT
init|=
block|{}
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getAutoMembership()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User auto membership"
argument_list|,
name|description
operator|=
literal|"List of groups that a synced user is added to automatically"
argument_list|,
name|value
operator|=
block|{}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_AUTO_MEMBERSHIP
init|=
literal|"user.autoMembership"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getPropertyMapping()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_USER_PROPERTY_MAPPING_DEFAULT
init|=
block|{
literal|"rep:fullname=cn"
block|}
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getPropertyMapping()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User property mapping"
argument_list|,
name|description
operator|=
literal|"List mapping definition of local properties from external ones. eg: 'profile/email=mail'."
operator|+
literal|"Use double quotes for fixed values. eg: 'profile/nt:primaryType=\"nt:unstructured\""
argument_list|,
name|value
operator|=
block|{
literal|"rep:fullname=cn"
block|}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_PROPERTY_MAPPING
init|=
literal|"user.propertyMapping"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getPathPrefix()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_PATH_PREFIX_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getPathPrefix()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User Path Prefix"
argument_list|,
name|description
operator|=
literal|"The path prefix used when creating new users."
argument_list|,
name|value
operator|=
name|PARAM_USER_PATH_PREFIX_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_PATH_PREFIX
init|=
literal|"user.pathPrefix"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getMembershipExpirationTime()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_MEMBERSHIP_EXPIRATION_TIME_DEFAULT
init|=
literal|"1h"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getMembershipExpirationTime()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User Membership Expiration"
argument_list|,
name|description
operator|=
literal|"Time after which membership expires (eg. '1h 30m' or '1d'). Note however, that a membership sync is aways bound to a sync of the user."
argument_list|,
name|value
operator|=
name|PARAM_USER_MEMBERSHIP_EXPIRATION_TIME_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_MEMBERSHIP_EXPIRATION_TIME
init|=
literal|"user.membershipExpTime"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getMembershipNestingDepth()      */
specifier|public
specifier|static
specifier|final
name|int
name|PARAM_USER_MEMBERSHIP_NESTING_DEPTH_DEFAULT
init|=
literal|0
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getMembershipNestingDepth()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User membership nesting depth"
argument_list|,
name|description
operator|=
literal|"Returns the maximum depth of group nesting when membership relations are synced. "
operator|+
literal|"A value of 0 effectively disables group membership lookup. A value of 1 only adds the direct "
operator|+
literal|"groups of a user. This value has no effect when syncing individual groups only when syncing a "
operator|+
literal|"users membership ancestry."
argument_list|,
name|intValue
operator|=
name|PARAM_USER_MEMBERSHIP_NESTING_DEPTH_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_MEMBERSHIP_NESTING_DEPTH
init|=
literal|"user.membershipNestingDepth"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.User#getDynamicMembership()      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_USER_DYNAMIC_MEMBERSHIP_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * Configuration option to enable dynamic group membership. If enabled the      * implementation will no longer synchronized group accounts into the repository      * but instead will enable a dedicated principal management: This results in      * external users having their complete principal set as defined external IDP      * synchronized to the repository asserting proper population of the      * {@link javax.security.auth.Subject} upon login. Please note that the external      * groups are reflected through the built-in principal management and thus can      * be retrieved for authorization purposes. However, the information is no      * longer reflected through the Jackrabbit user management API.      *      * @see DefaultSyncConfig.User#getDynamicMembership()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"User Dynamic Membership"
argument_list|,
name|description
operator|=
literal|"If enabled membership of external identities (user) is no longer fully reflected "
operator|+
literal|"within the repositories user management."
argument_list|,
name|boolValue
operator|=
name|PARAM_USER_DYNAMIC_MEMBERSHIP_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_USER_DYNAMIC_MEMBERSHIP
init|=
literal|"user.dynamicMembership"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getExpirationTime()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_EXPIRATION_TIME_DEFAULT
init|=
literal|"1d"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getExpirationTime()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group Expiration Time"
argument_list|,
name|description
operator|=
literal|"Duration until a synced group expires (eg. '1h 30m' or '1d')."
argument_list|,
name|value
operator|=
name|PARAM_GROUP_EXPIRATION_TIME_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_EXPIRATION_TIME
init|=
literal|"group.expirationTime"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getAutoMembership()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_GROUP_AUTO_MEMBERSHIP_DEFAULT
init|=
block|{}
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getAutoMembership()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group auto membership"
argument_list|,
name|description
operator|=
literal|"List of groups that a synced group is added to automatically"
argument_list|,
name|value
operator|=
block|{}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_AUTO_MEMBERSHIP
init|=
literal|"group.autoMembership"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getPropertyMapping()      */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|PARAM_GROUP_PROPERTY_MAPPING_DEFAULT
init|=
block|{}
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getPropertyMapping()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group property mapping"
argument_list|,
name|description
operator|=
literal|"List mapping definition of local properties from external ones."
argument_list|,
name|value
operator|=
block|{}
argument_list|,
name|cardinality
operator|=
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_PROPERTY_MAPPING
init|=
literal|"group.propertyMapping"
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getPathPrefix()      */
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_PATH_PREFIX_DEFAULT
init|=
literal|""
decl_stmt|;
comment|/**      * @see DefaultSyncConfig.Group#getPathPrefix()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Group Path Prefix"
argument_list|,
name|description
operator|=
literal|"The path prefix used when creating new groups."
argument_list|,
name|value
operator|=
name|PARAM_GROUP_PATH_PREFIX_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_GROUP_PATH_PREFIX
init|=
literal|"group.pathPrefix"
decl_stmt|;
comment|/**      * Default value for {@link #PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE}      */
specifier|public
specifier|static
specifier|final
name|boolean
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * @see Authorizable#isApplyRFC7613UsernameCaseMapped()      */
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"RFC7613 Username Normalization Profile"
argument_list|,
name|description
operator|=
literal|"Enable the UsercaseMappedProfile defined in RFC7613 for username normalization."
argument_list|,
name|boolValue
operator|=
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE_DEFAULT
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE
init|=
literal|"enableRFC7613UsercaseMappedProfile"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MILLIS_PER_HOUR
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConfigurationParameters
operator|.
name|Milliseconds
name|ONE_HOUR
init|=
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
name|MILLIS_PER_HOUR
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConfigurationParameters
operator|.
name|Milliseconds
name|ONE_DAY
init|=
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
literal|24
operator|*
name|MILLIS_PER_HOUR
argument_list|)
decl_stmt|;
comment|/**      * Creates a new LDAP provider configuration based on the properties store in the given parameters.      * @param params the configuration parameters.      * @return the config      */
specifier|public
specifier|static
name|DefaultSyncConfig
name|of
parameter_list|(
name|ConfigurationParameters
name|params
parameter_list|)
block|{
name|DefaultSyncConfig
name|cfg
init|=
operator|new
name|DefaultSyncConfigImpl
argument_list|()
operator|.
name|setName
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_NAME
argument_list|,
name|PARAM_NAME_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|user
argument_list|()
operator|.
name|setMembershipExpirationTime
argument_list|(
name|getMilliSeconds
argument_list|(
name|params
argument_list|,
name|PARAM_USER_MEMBERSHIP_EXPIRATION_TIME
argument_list|,
name|PARAM_USER_MEMBERSHIP_EXPIRATION_TIME_DEFAULT
argument_list|,
name|ONE_HOUR
argument_list|)
argument_list|)
operator|.
name|setMembershipNestingDepth
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_MEMBERSHIP_NESTING_DEPTH
argument_list|,
name|PARAM_USER_MEMBERSHIP_NESTING_DEPTH_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setDynamicMembership
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_DYNAMIC_MEMBERSHIP
argument_list|,
name|PARAM_USER_DYNAMIC_MEMBERSHIP_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setExpirationTime
argument_list|(
name|getMilliSeconds
argument_list|(
name|params
argument_list|,
name|PARAM_USER_EXPIRATION_TIME
argument_list|,
name|PARAM_USER_EXPIRATION_TIME_DEFAULT
argument_list|,
name|ONE_HOUR
argument_list|)
argument_list|)
operator|.
name|setApplyRFC7613UsernameCaseMapped
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE
argument_list|,
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setPathPrefix
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_PATH_PREFIX
argument_list|,
name|PARAM_USER_PATH_PREFIX_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setAutoMembership
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_AUTO_MEMBERSHIP
argument_list|,
name|PARAM_USER_AUTO_MEMBERSHIP_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setPropertyMapping
argument_list|(
name|createMapping
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_USER_PROPERTY_MAPPING
argument_list|,
name|PARAM_USER_PROPERTY_MAPPING_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|group
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
name|getMilliSeconds
argument_list|(
name|params
argument_list|,
name|PARAM_GROUP_EXPIRATION_TIME
argument_list|,
name|PARAM_GROUP_EXPIRATION_TIME_DEFAULT
argument_list|,
name|ONE_DAY
argument_list|)
argument_list|)
operator|.
name|setApplyRFC7613UsernameCaseMapped
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE
argument_list|,
name|PARAM_ENABLE_RFC7613_USERCASE_MAPPED_PROFILE_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setPathPrefix
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_PATH_PREFIX
argument_list|,
name|PARAM_GROUP_PATH_PREFIX_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setAutoMembership
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_AUTO_MEMBERSHIP
argument_list|,
name|PARAM_GROUP_AUTO_MEMBERSHIP_DEFAULT
argument_list|)
argument_list|)
operator|.
name|setPropertyMapping
argument_list|(
name|createMapping
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|PARAM_GROUP_PROPERTY_MAPPING
argument_list|,
name|PARAM_GROUP_PROPERTY_MAPPING_DEFAULT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
specifier|private
specifier|static
name|long
name|getMilliSeconds
parameter_list|(
annotation|@
name|Nonnull
name|ConfigurationParameters
name|params
parameter_list|,
annotation|@
name|Nonnull
name|String
name|paramName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|defaultParamValue
parameter_list|,
annotation|@
name|Nonnull
name|ConfigurationParameters
operator|.
name|Milliseconds
name|defaultMillis
parameter_list|)
block|{
return|return
name|ConfigurationParameters
operator|.
name|Milliseconds
operator|.
name|of
argument_list|(
name|params
operator|.
name|getConfigValue
argument_list|(
name|paramName
argument_list|,
name|defaultParamValue
argument_list|)
argument_list|,
name|defaultMillis
argument_list|)
operator|.
name|value
return|;
block|}
comment|/**      * Creates a new property mapping map from a list of patterns.      * @param patterns the patterns      * @return the mapping map      */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createMapping
parameter_list|(
annotation|@
name|Nonnull
name|String
index|[]
name|patterns
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|int
name|idx
init|=
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|relPath
init|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|pattern
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|relPath
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapping
return|;
block|}
block|}
end_class

end_unit

