begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|TimeInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
specifier|public
class|class
name|TimeIntervalTest
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|long
name|start
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|end
init|=
literal|20
decl_stmt|;
specifier|private
name|TimeInterval
name|ti
init|=
operator|new
name|TimeInterval
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|constructFail
parameter_list|()
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|TimeInterval
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ti
operator|.
name|contains
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti
operator|.
name|contains
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti
operator|.
name|contains
argument_list|(
name|start
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti
operator|.
name|contains
argument_list|(
name|start
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti
operator|.
name|contains
argument_list|(
name|end
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notLaterThan1
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notLaterThan
argument_list|(
name|end
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|end
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notLaterThan2
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notLaterThan
argument_list|(
name|start
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notLaterThan3
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notLaterThan
argument_list|(
name|end
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEarlierThan1
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notLaterThan
argument_list|(
name|start
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|start
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEarlierThan2
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notEarlierThan
argument_list|(
name|end
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|end
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|contains
argument_list|(
name|end
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notEarlierThan3
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|notEarlierThan
argument_list|(
name|start
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|startAndDuration
parameter_list|()
block|{
name|TimeInterval
name|t
init|=
name|ti
operator|.
name|startAndDuration
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
operator|new
name|TimeInterval
argument_list|(
name|start
argument_list|,
name|start
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDuration
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|end
operator|-
name|start
argument_list|,
name|ti
operator|.
name|getDurationMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|endsAfter
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ti
operator|.
name|endsAfter
argument_list|(
name|end
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti
operator|.
name|endsAfter
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti
operator|.
name|endsAfter
argument_list|(
name|end
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

