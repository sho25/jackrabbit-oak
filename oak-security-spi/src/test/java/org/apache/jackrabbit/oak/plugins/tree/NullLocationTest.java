begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NullLocationTest
extends|extends
name|AbstractTreeTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NULL_LOCATION_PATH
init|=
name|PROPERTY_PATH
operator|+
literal|"/null"
decl_stmt|;
specifier|private
name|TreeLocation
name|nullLocation
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|nullLocation
operator|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|NULL_LOCATION_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|nullLocation
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTree
parameter_list|()
block|{
name|assertNull
argument_list|(
name|nullLocation
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProperty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|nullLocation
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|nullLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NULL_LOCATION_PATH
argument_list|,
name|nullLocation
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|nullLocation
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChild
parameter_list|()
block|{
name|TreeLocation
name|child
init|=
name|nullLocation
operator|.
name|getChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|child
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|child
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|child
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeepChild
parameter_list|()
block|{
name|TreeLocation
name|child
init|=
name|nullLocation
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NULL_LOCATION_PATH
operator|+
literal|"/b/c"
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|TreeLocation
name|b
init|=
name|child
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NULL_LOCATION_PATH
operator|+
literal|"/b"
argument_list|,
name|b
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|PROPERTY_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"null"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nullLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootParent
parameter_list|()
block|{
name|TreeLocation
name|nullLocation
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|nullLocation
argument_list|,
name|nullLocation
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nullLocation
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nullLocation
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

