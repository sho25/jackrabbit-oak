begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|codec
operator|.
name|controls
operator|.
name|search
operator|.
name|pagedSearch
operator|.
name|PagedResultsDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|constants
operator|.
name|SchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|cursor
operator|.
name|CursorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|cursor
operator|.
name|SearchCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapAuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapInvalidAttributeValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|message
operator|.
name|controls
operator|.
name|PagedResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Rdn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|AbstractPoolableLdapConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|DefaultLdapConnectionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LookupLdapConnectionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|NoVerificationTrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|ValidatingPoolableLdapConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AbstractLazyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|DebugTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code LdapIdentityProvider} implements an external identity provider that reads users and groups from an ldap  * source.  *  * Please refer to {@link LdapProviderConfig} for configuration options.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
comment|// note that the metatype information is generated from LdapProviderConfig
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|LdapIdentityProvider
implements|implements
name|ExternalIdentityProvider
block|{
comment|/**      * default logger      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdapIdentityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * internal configuration      */
specifier|private
name|LdapProviderConfig
name|config
decl_stmt|;
comment|/**      * the connection pool with connections authenticated with the bind DN      */
specifier|private
name|LdapConnectionPool
name|adminPool
decl_stmt|;
comment|/**      * admin connection factory      */
specifier|private
name|AbstractPoolableLdapConnectionFactory
name|adminConnectionFactory
decl_stmt|;
comment|/**      * the connection pool with unbound connections      */
specifier|private
name|UnboundLdapConnectionPool
name|userPool
decl_stmt|;
comment|/**      * user connection factory      */
specifier|private
name|PoolableUnboundConnectionFactory
name|userConnectionFactory
decl_stmt|;
comment|/**      * SSL protocols (initialized on init)      */
specifier|private
name|String
index|[]
name|enabledSSLProtocols
decl_stmt|;
comment|/**      * Default constructor for OSGi      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|public
name|LdapIdentityProvider
parameter_list|()
block|{     }
comment|/**      * Constructor for non-OSGi cases.      * @param config the configuration      */
specifier|public
name|LdapIdentityProvider
parameter_list|(
annotation|@
name|Nonnull
name|LdapProviderConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|//----------------------------------------------------< SCR integration>---
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|ConfigurationParameters
name|cfg
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|config
operator|=
name|LdapProviderConfig
operator|.
name|of
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Closes this provider and releases the internal pool. This should be called by Non-OSGi users of this provider.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|adminPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|adminPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing LDAP connection pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|adminPool
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|userPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|userPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while closing LDAP connection pool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|userPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//-------------------------------------------< ExternalIdentityProvider>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|config
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalIdentity
name|getIdentity
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
operator|!
name|isMyRef
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|connection
operator|.
name|lookup
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|hasObjectClass
argument_list|(
name|config
operator|.
name|getUserConfig
argument_list|()
operator|.
name|getObjectClasses
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createUser
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|hasObjectClass
argument_list|(
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getObjectClasses
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|createGroup
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"referenced identity is neither user or group: {}"
argument_list|,
name|ref
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|getUser
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|getEntry
argument_list|(
name|connection
argument_list|,
name|config
operator|.
name|getUserConfig
argument_list|()
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"lookup"
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getUser({}) {}"
argument_list|,
name|userId
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|createUser
argument_list|(
name|entry
argument_list|,
name|userId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalGroup
name|getGroup
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
try|try
block|{
name|Entry
name|entry
init|=
name|getEntry
argument_list|(
name|connection
argument_list|,
name|config
operator|.
name|getGroupConfig
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"lookup"
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"getGroup({}) {}"
argument_list|,
name|name
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|createGroup
argument_list|(
name|entry
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
name|timer
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalUser
argument_list|>
name|listUsers
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
try|try
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|iter
init|=
name|getEntryIterator
argument_list|(
name|config
operator|.
name|getUserConfig
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractLazyIterator
argument_list|<
name|ExternalUser
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ExternalUser
name|getNext
parameter_list|()
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|createUser
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LdapInvalidAttributeValueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while creating external user object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalGroup
argument_list|>
name|listGroups
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
try|try
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|iter
init|=
name|getEntryIterator
argument_list|(
name|config
operator|.
name|getGroupConfig
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractLazyIterator
argument_list|<
name|ExternalGroup
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ExternalGroup
name|getNext
parameter_list|()
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|createGroup
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LdapInvalidAttributeValueException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while creating external user object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
throw|throw
name|lookupFailedException
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|authenticate
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|ExternalIdentityException
throws|,
name|LoginException
block|{
if|if
condition|(
operator|!
operator|(
name|credentials
operator|instanceof
name|SimpleCredentials
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"LDAP IDP can only authenticate SimpleCredentials."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|SimpleCredentials
name|creds
init|=
operator|(
name|SimpleCredentials
operator|)
name|credentials
decl_stmt|;
specifier|final
name|ExternalUser
name|user
init|=
name|getUser
argument_list|(
name|creds
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
comment|// OAK-2078: check for non-empty passwords to avoid anonymous bind on weakly configured servers
comment|// see http://tools.ietf.org/html/rfc4513#section-5.1.1 for details.
if|if
condition|(
name|creds
operator|.
name|getPassword
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Refusing to authenticate against LDAP server: Empty passwords not allowed."
argument_list|)
throw|;
block|}
comment|// authenticate
name|LdapConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
if|if
condition|(
name|userPool
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|userConnectionFactory
operator|.
name|makeObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|userPool
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|bind
argument_list|(
name|user
operator|.
name|getExternalId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"bind"
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"authenticate({}) {}"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LdapAuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unable to authenticate against LDAP server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error while binding user credentials"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|userPool
operator|==
literal|null
condition|)
block|{
name|userConnectionFactory
operator|.
name|destroyObject
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userPool
operator|.
name|releaseConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
return|return
name|user
return|;
block|}
comment|//-----------------------------------------------------------< internal>---
comment|/**      * Collects the declared (direct) groups of an identity      * @param ref reference to the identity      * @return map of identities where the key is the DN of the LDAP entity      */
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroupRefs
parameter_list|(
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
operator|!
name|isMyRef
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|String
name|searchFilter
init|=
name|config
operator|.
name|getMemberOfSearchFilter
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|LdapConnection
name|connection
init|=
literal|null
decl_stmt|;
name|SearchCursor
name|searchCursor
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create the SearchRequest object
name|SearchRequest
name|req
init|=
operator|new
name|SearchRequestImpl
argument_list|()
decl_stmt|;
name|req
operator|.
name|setScope
argument_list|(
name|SearchScope
operator|.
name|SUBTREE
argument_list|)
expr_stmt|;
name|req
operator|.
name|addAttributes
argument_list|(
name|SchemaConstants
operator|.
name|NO_ATTRIBUTE
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTimeLimit
argument_list|(
operator|(
name|int
operator|)
name|config
operator|.
name|getSearchTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBase
argument_list|(
operator|new
name|Dn
argument_list|(
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getBaseDN
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFilter
argument_list|(
name|searchFilter
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
argument_list|()
decl_stmt|;
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|connection
operator|=
name|connect
argument_list|()
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
name|searchCursor
operator|=
name|connection
operator|.
name|search
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
while|while
condition|(
name|searchCursor
operator|.
name|next
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
name|searchCursor
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|SearchResultEntry
condition|)
block|{
name|Entry
name|resultEntry
init|=
operator|(
operator|(
name|SearchResultEntry
operator|)
name|response
operator|)
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|ExternalIdentityRef
name|groupRef
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|resultEntry
operator|.
name|getDn
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|groupRef
operator|.
name|getId
argument_list|()
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
block|}
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"iterate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found {} entries. {}"
argument_list|,
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getBaseDN
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|groups
operator|.
name|size
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during ldap membership search."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
literal|"Error during ldap membership search."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|searchCursor
operator|!=
literal|null
condition|)
block|{
name|searchCursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Collects the declared (direct) members of a group      * @param ref the reference to the group      * @return map of identity refers      * @throws ExternalIdentityException if an error occurs      */
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|getDeclaredMemberRefs
parameter_list|(
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
operator|!
name|isMyRef
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|LdapConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
name|members
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExternalIdentityRef
argument_list|>
argument_list|()
decl_stmt|;
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|connection
operator|=
name|connect
argument_list|()
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
name|Entry
name|entry
init|=
name|connection
operator|.
name|lookup
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"lookup"
argument_list|)
expr_stmt|;
name|Attribute
name|attr
init|=
name|entry
operator|.
name|get
argument_list|(
name|config
operator|.
name|getGroupMemberAttribute
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LDAP group does not have configured attribute: {}"
argument_list|,
name|config
operator|.
name|getGroupMemberAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Value
name|value
range|:
name|attr
control|)
block|{
name|ExternalIdentityRef
name|memberRef
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|members
operator|.
name|put
argument_list|(
name|memberRef
operator|.
name|getId
argument_list|()
argument_list|,
name|memberRef
argument_list|)
expr_stmt|;
block|}
block|}
name|timer
operator|.
name|mark
argument_list|(
literal|"iterate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"members lookup of {} found {} members. {}"
argument_list|,
name|ref
operator|.
name|getId
argument_list|()
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|,
name|timer
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error during ldap group members lookup."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
comment|/**      * Initializes the ldap identity provider.      */
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|adminConnectionFactory
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Provider already initialized."
argument_list|)
throw|;
block|}
comment|// make sure the JVM supports the TLSv1.1
try|try
block|{
name|enabledSSLProtocols
operator|=
literal|null
expr_stmt|;
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLSv1.1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"JDK does not support TLSv1.1. Disabling it."
argument_list|)
expr_stmt|;
name|enabledSSLProtocols
operator|=
operator|new
name|String
index|[]
block|{
literal|"TLSv1"
block|}
expr_stmt|;
block|}
comment|// setup admin connection pool
name|LdapConnectionConfig
name|cc
init|=
name|createConnectionConfig
argument_list|()
decl_stmt|;
name|String
name|bindDN
init|=
name|config
operator|.
name|getBindDN
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindDN
operator|!=
literal|null
operator|&&
operator|!
name|bindDN
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cc
operator|.
name|setName
argument_list|(
name|bindDN
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setCredentials
argument_list|(
name|config
operator|.
name|getBindPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adminConnectionFactory
operator|=
operator|new
name|ValidatingPoolableLdapConnectionFactory
argument_list|(
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getAdminPoolConfig
argument_list|()
operator|.
name|lookupOnValidate
argument_list|()
condition|)
block|{
name|adminConnectionFactory
operator|.
name|setValidator
argument_list|(
operator|new
name|LookupLdapConnectionValidator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adminConnectionFactory
operator|.
name|setValidator
argument_list|(
operator|new
name|DefaultLdapConnectionValidator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAdminPoolConfig
argument_list|()
operator|.
name|getMaxActive
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|adminPool
operator|=
operator|new
name|LdapConnectionPool
argument_list|(
name|adminConnectionFactory
argument_list|)
expr_stmt|;
name|adminPool
operator|.
name|setTestOnBorrow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adminPool
operator|.
name|setMaxActive
argument_list|(
name|config
operator|.
name|getAdminPoolConfig
argument_list|()
operator|.
name|getMaxActive
argument_list|()
argument_list|)
expr_stmt|;
name|adminPool
operator|.
name|setWhenExhaustedAction
argument_list|(
name|GenericObjectPool
operator|.
name|WHEN_EXHAUSTED_BLOCK
argument_list|)
expr_stmt|;
block|}
comment|// setup unbound connection pool. let's create a new version of the config
name|cc
operator|=
name|createConnectionConfig
argument_list|()
expr_stmt|;
name|userConnectionFactory
operator|=
operator|new
name|PoolableUnboundConnectionFactory
argument_list|(
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getUserPoolConfig
argument_list|()
operator|.
name|lookupOnValidate
argument_list|()
condition|)
block|{
name|userConnectionFactory
operator|.
name|setValidator
argument_list|(
operator|new
name|UnboundLookupConnectionValidator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userConnectionFactory
operator|.
name|setValidator
argument_list|(
operator|new
name|UnboundConnectionValidator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUserPoolConfig
argument_list|()
operator|.
name|getMaxActive
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|userPool
operator|=
operator|new
name|UnboundLdapConnectionPool
argument_list|(
name|userConnectionFactory
argument_list|)
expr_stmt|;
name|userPool
operator|.
name|setTestOnBorrow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|userPool
operator|.
name|setMaxActive
argument_list|(
name|config
operator|.
name|getUserPoolConfig
argument_list|()
operator|.
name|getMaxActive
argument_list|()
argument_list|)
expr_stmt|;
name|userPool
operator|.
name|setWhenExhaustedAction
argument_list|(
name|GenericObjectPool
operator|.
name|WHEN_EXHAUSTED_BLOCK
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"LdapIdentityProvider initialized: {}"
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new connection config based on the config.      * @return the connection config.      */
annotation|@
name|Nonnull
specifier|private
name|LdapConnectionConfig
name|createConnectionConfig
parameter_list|()
block|{
name|LdapConnectionConfig
name|cc
init|=
operator|new
name|LdapConnectionConfig
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setLdapHost
argument_list|(
name|config
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setLdapPort
argument_list|(
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setUseSsl
argument_list|(
name|config
operator|.
name|useSSL
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setUseTls
argument_list|(
name|config
operator|.
name|useTLS
argument_list|()
argument_list|)
expr_stmt|;
comment|// todo: implement better trustmanager/keystore management (via sling/felix)
if|if
condition|(
name|config
operator|.
name|noCertCheck
argument_list|()
condition|)
block|{
name|cc
operator|.
name|setTrustManagers
argument_list|(
operator|new
name|NoVerificationTrustManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enabledSSLProtocols
operator|!=
literal|null
condition|)
block|{
name|cc
operator|.
name|setEnabledProtocols
argument_list|(
name|enabledSSLProtocols
argument_list|)
expr_stmt|;
block|}
return|return
name|cc
return|;
block|}
annotation|@
name|CheckForNull
specifier|private
name|Entry
name|getEntry
parameter_list|(
annotation|@
name|Nonnull
name|LdapConnection
name|connection
parameter_list|,
annotation|@
name|Nonnull
name|LdapProviderConfig
operator|.
name|Identity
name|idConfig
parameter_list|,
annotation|@
name|Nonnull
name|String
name|id
parameter_list|)
throws|throws
name|CursorException
throws|,
name|LdapException
block|{
name|String
name|searchFilter
init|=
name|idConfig
operator|.
name|getSearchFilter
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Create the SearchRequest object
name|SearchRequest
name|req
init|=
operator|new
name|SearchRequestImpl
argument_list|()
decl_stmt|;
name|req
operator|.
name|setScope
argument_list|(
name|SearchScope
operator|.
name|SUBTREE
argument_list|)
expr_stmt|;
name|req
operator|.
name|addAttributes
argument_list|(
name|SchemaConstants
operator|.
name|ALL_USER_ATTRIBUTES
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTimeLimit
argument_list|(
operator|(
name|int
operator|)
name|config
operator|.
name|getSearchTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBase
argument_list|(
operator|new
name|Dn
argument_list|(
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFilter
argument_list|(
name|searchFilter
argument_list|)
expr_stmt|;
comment|// Process the request
name|SearchCursor
name|searchCursor
init|=
literal|null
decl_stmt|;
name|Entry
name|resultEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searchCursor
operator|=
name|connection
operator|.
name|search
argument_list|(
name|req
argument_list|)
expr_stmt|;
while|while
condition|(
name|searchCursor
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|resultEntry
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"search for {} returned more than one entry. discarding additional ones."
argument_list|,
name|searchFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process the SearchResultEntry
name|Response
name|response
init|=
name|searchCursor
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|SearchResultEntry
condition|)
block|{
name|resultEntry
operator|=
operator|(
operator|(
name|SearchResultEntry
operator|)
name|response
operator|)
operator|.
name|getEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|searchCursor
operator|!=
literal|null
condition|)
block|{
name|searchCursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|resultEntry
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found 0 entries."
argument_list|,
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|,
name|searchFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found {}"
argument_list|,
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|resultEntry
operator|.
name|getDn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultEntry
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|SearchResultIterator
name|getEntryIterator
parameter_list|(
annotation|@
name|Nonnull
name|LdapProviderConfig
operator|.
name|Identity
name|idConfig
parameter_list|)
throws|throws
name|LdapException
throws|,
name|CursorException
throws|,
name|ExternalIdentityException
block|{
name|StringBuilder
name|filter
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|objectClass
range|:
name|idConfig
operator|.
name|getObjectClasses
argument_list|()
control|)
block|{
name|num
operator|++
expr_stmt|;
name|filter
operator|.
name|append
argument_list|(
literal|"(objectclass="
argument_list|)
operator|.
name|append
argument_list|(
name|LdapProviderConfig
operator|.
name|encodeFilterValue
argument_list|(
name|objectClass
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|String
name|extraFilter
init|=
name|idConfig
operator|.
name|getExtraFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|extraFilter
operator|!=
literal|null
operator|&&
operator|!
name|extraFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|num
operator|++
expr_stmt|;
name|filter
operator|.
name|append
argument_list|(
name|extraFilter
argument_list|)
expr_stmt|;
block|}
name|String
name|searchFilter
init|=
name|num
operator|>
literal|1
condition|?
literal|"(&"
operator|+
name|filter
operator|+
literal|')'
else|:
name|filter
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|SearchResultIterator
argument_list|(
name|searchFilter
argument_list|,
name|idConfig
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|SearchResultIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|searchFilter
decl_stmt|;
specifier|private
specifier|final
name|LdapProviderConfig
operator|.
name|Identity
name|idConfig
decl_stmt|;
specifier|private
name|byte
index|[]
name|cookie
decl_stmt|;
specifier|private
name|List
name|page
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|searchComplete
decl_stmt|;
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|SearchResultIterator
parameter_list|(
annotation|@
name|Nonnull
name|String
name|searchFilter
parameter_list|,
annotation|@
name|Nonnull
name|LdapProviderConfig
operator|.
name|Identity
name|idConfig
parameter_list|)
throws|throws
name|LdapException
throws|,
name|CursorException
throws|,
name|ExternalIdentityException
block|{
name|this
operator|.
name|searchFilter
operator|=
name|searchFilter
expr_stmt|;
name|this
operator|.
name|idConfig
operator|=
name|idConfig
expr_stmt|;
name|findNextEntry
argument_list|()
expr_stmt|;
block|}
comment|//-------------------------------------------------------< Iterator>---
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|page
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|findNextEntry
argument_list|()
expr_stmt|;
return|return
name|entry
return|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while performing LDAP search"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CursorException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while performing LDAP search"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExternalIdentityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error while performing LDAP search"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|//-------------------------------------------------------< internal>---
specifier|private
name|SearchRequest
name|createSearchRequest
parameter_list|(
name|LdapConnection
name|connection
parameter_list|,
name|byte
index|[]
name|cookie
parameter_list|)
throws|throws
name|LdapException
block|{
name|SearchRequest
name|req
init|=
operator|new
name|SearchRequestImpl
argument_list|()
decl_stmt|;
name|req
operator|.
name|setScope
argument_list|(
name|SearchScope
operator|.
name|SUBTREE
argument_list|)
expr_stmt|;
name|req
operator|.
name|addAttributes
argument_list|(
name|SchemaConstants
operator|.
name|ALL_USER_ATTRIBUTES
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTimeLimit
argument_list|(
operator|(
name|int
operator|)
name|config
operator|.
name|getSearchTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBase
argument_list|(
operator|new
name|Dn
argument_list|(
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFilter
argument_list|(
name|searchFilter
argument_list|)
expr_stmt|;
name|PagedResults
name|pagedSearchControl
init|=
operator|new
name|PagedResultsDecorator
argument_list|(
name|connection
operator|.
name|getCodecService
argument_list|()
argument_list|)
decl_stmt|;
comment|// do paged searches (OAK-2874)
name|pagedSearchControl
operator|.
name|setSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|pagedSearchControl
operator|.
name|setCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|req
operator|.
name|addControl
argument_list|(
name|pagedSearchControl
argument_list|)
expr_stmt|;
return|return
name|req
return|;
block|}
specifier|private
name|boolean
name|loadNextPage
parameter_list|()
throws|throws
name|ExternalIdentityException
throws|,
name|LdapException
throws|,
name|CursorException
block|{
if|if
condition|(
name|searchComplete
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SearchCursor
name|searchCursor
init|=
literal|null
decl_stmt|;
name|DebugTimer
name|timer
init|=
operator|new
name|DebugTimer
argument_list|()
decl_stmt|;
name|LdapConnection
name|connection
init|=
name|connect
argument_list|()
decl_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
name|page
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|searchCursor
operator|=
name|connection
operator|.
name|search
argument_list|(
name|createSearchRequest
argument_list|(
name|connection
argument_list|,
name|cookie
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|searchCursor
operator|.
name|next
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
name|searchCursor
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|SearchResultEntry
condition|)
block|{
name|Entry
name|resultEntry
init|=
operator|(
operator|(
name|SearchResultEntry
operator|)
name|response
operator|)
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|page
operator|.
name|add
argument_list|(
name|resultEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"search below {} with {} found {}"
argument_list|,
name|idConfig
operator|.
name|getBaseDN
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|resultEntry
operator|.
name|getDn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SearchResultDone
name|done
init|=
name|searchCursor
operator|.
name|getSearchResultDone
argument_list|()
decl_stmt|;
name|cookie
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|done
operator|.
name|getLdapResult
argument_list|()
operator|.
name|getResultCode
argument_list|()
operator|!=
name|ResultCodeEnum
operator|.
name|UNWILLING_TO_PERFORM
condition|)
block|{
name|PagedResults
name|ctrl
init|=
operator|(
name|PagedResults
operator|)
name|done
operator|.
name|getControl
argument_list|(
name|PagedResults
operator|.
name|OID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctrl
operator|!=
literal|null
condition|)
block|{
name|cookie
operator|=
name|ctrl
operator|.
name|getCookie
argument_list|()
expr_stmt|;
block|}
block|}
name|searchComplete
operator|=
name|cookie
operator|==
literal|null
expr_stmt|;
name|timer
operator|.
name|mark
argument_list|(
literal|"lookup"
argument_list|)
expr_stmt|;
return|return
operator|!
name|page
operator|.
name|isEmpty
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|searchCursor
operator|!=
literal|null
condition|)
block|{
name|searchCursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|findNextEntry
parameter_list|()
throws|throws
name|LdapException
throws|,
name|CursorException
throws|,
name|ExternalIdentityException
block|{
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
operator|&&
operator|!
name|loadNextPage
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pos
operator|+
literal|1
operator|==
name|page
operator|.
name|size
argument_list|()
condition|)
block|{
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
name|page
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|loadNextPage
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|pos
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|ExternalUser
name|createUser
parameter_list|(
annotation|@
name|Nonnull
name|Entry
name|entry
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|id
parameter_list|)
throws|throws
name|LdapInvalidAttributeValueException
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|entry
operator|.
name|getDn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|String
name|idAttribute
init|=
name|config
operator|.
name|getUserConfig
argument_list|()
operator|.
name|getIdAttribute
argument_list|()
decl_stmt|;
name|Attribute
name|attr
init|=
name|entry
operator|.
name|get
argument_list|(
name|idAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LdapInvalidAttributeValueException
argument_list|(
name|ResultCodeEnum
operator|.
name|CONSTRAINT_VIOLATION
argument_list|,
literal|"no value found for attribute '"
operator|+
name|idAttribute
operator|+
literal|"' for entry "
operator|+
name|entry
argument_list|)
throw|;
block|}
name|id
operator|=
name|attr
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|config
operator|.
name|getUserConfig
argument_list|()
operator|.
name|makeDnPath
argument_list|()
condition|?
name|createDNPath
argument_list|(
name|entry
operator|.
name|getDn
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|LdapUser
name|user
init|=
operator|new
name|LdapUser
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
name|id
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|user
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|applyAttributes
argument_list|(
name|props
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|ExternalGroup
name|createGroup
parameter_list|(
annotation|@
name|Nonnull
name|Entry
name|entry
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|name
parameter_list|)
throws|throws
name|LdapInvalidAttributeValueException
block|{
name|ExternalIdentityRef
name|ref
init|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|entry
operator|.
name|getDn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|String
name|idAttribute
init|=
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|getIdAttribute
argument_list|()
decl_stmt|;
name|Attribute
name|attr
init|=
name|entry
operator|.
name|get
argument_list|(
name|idAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LdapInvalidAttributeValueException
argument_list|(
name|ResultCodeEnum
operator|.
name|CONSTRAINT_VIOLATION
argument_list|,
literal|"no value found for attribute '"
operator|+
name|idAttribute
operator|+
literal|"' for entry "
operator|+
name|entry
argument_list|)
throw|;
block|}
name|name
operator|=
name|attr
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|config
operator|.
name|getGroupConfig
argument_list|()
operator|.
name|makeDnPath
argument_list|()
condition|?
name|createDNPath
argument_list|(
name|entry
operator|.
name|getDn
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|LdapGroup
name|group
init|=
operator|new
name|LdapGroup
argument_list|(
name|this
argument_list|,
name|ref
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|group
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|applyAttributes
argument_list|(
name|props
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|private
name|void
name|applyAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|Entry
name|entry
parameter_list|)
throws|throws
name|LdapInvalidAttributeValueException
block|{
for|for
control|(
name|Attribute
name|attr
range|:
name|entry
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|isHumanReadable
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|propValue
decl_stmt|;
comment|// for multivalue properties, store as collection
if|if
condition|(
name|attr
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Value
argument_list|<
name|?
argument_list|>
name|value
range|:
name|attr
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propValue
operator|=
name|values
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|attr
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getId
argument_list|()
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|LdapConnection
name|connect
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
try|try
block|{
if|if
condition|(
name|adminPool
operator|==
literal|null
condition|)
block|{
return|return
name|adminConnectionFactory
operator|.
name|makeObject
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|adminPool
operator|.
name|getConnection
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error while connecting to the ldap server."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|disconnect
parameter_list|(
annotation|@
name|Nullable
name|LdapConnection
name|connection
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|adminPool
operator|==
literal|null
condition|)
block|{
name|adminConnectionFactory
operator|.
name|destroyObject
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adminPool
operator|.
name|releaseConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while disconnecting from the ldap server."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isMyRef
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|ref
parameter_list|)
block|{
specifier|final
name|String
name|refProviderName
init|=
name|ref
operator|.
name|getProviderName
argument_list|()
decl_stmt|;
return|return
name|refProviderName
operator|==
literal|null
operator|||
name|refProviderName
operator|.
name|isEmpty
argument_list|()
operator|||
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|refProviderName
argument_list|)
return|;
block|}
comment|/**      * Makes the intermediate path of an DN by splitting along the RDNs      * @param dn the dn of the identity      * @return the intermediate path or {@code null} if disabled by config      */
specifier|private
specifier|static
name|String
name|createDNPath
parameter_list|(
name|Dn
name|dn
parameter_list|)
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Rdn
name|rnd
range|:
name|dn
operator|.
name|getRdns
argument_list|()
control|)
block|{
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|append
argument_list|(
name|Text
operator|.
name|escapeIllegalJcrChars
argument_list|(
name|rnd
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ExternalIdentityException
name|lookupFailedException
parameter_list|(
annotation|@
name|Nonnull
name|Exception
name|e
parameter_list|,
annotation|@
name|CheckForNull
name|DebugTimer
name|timer
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error during ldap lookup. "
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
operator|+
operator|(
operator|(
name|timer
operator|!=
literal|null
operator|)
condition|?
name|timer
operator|.
name|getString
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExternalIdentityException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

