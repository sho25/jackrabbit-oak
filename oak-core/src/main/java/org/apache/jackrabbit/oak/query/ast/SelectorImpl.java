begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_MIXIN_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_NAMED_SINGLE_VALUED_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_PRIMARY_SUBTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|REP_SUPERTYPES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
operator|.
name|SizePrecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|fulltext
operator|.
name|FullTextExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
operator|.
name|ExecutionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|plan
operator|.
name|SelectorExecutionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|PropertyValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvancedQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|IndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * A selector within a query.  */
end_comment

begin_class
specifier|public
class|class
name|SelectorImpl
extends|extends
name|SourceImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SelectorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO possibly support using multiple indexes (using index intersection / index merge)
specifier|private
name|SelectorExecutionPlan
name|plan
decl_stmt|;
comment|/**      * The WHERE clause of the query.      */
specifier|private
name|ConstraintImpl
name|queryConstraint
decl_stmt|;
comment|/**      * The join condition of this selector that can be evaluated at execution      * time. For the query "select * from nt:base as a inner join nt:base as b      * on a.x = b.x", the join condition "a.x = b.x" is only set for the      * selector b, as selector a can't evaluate it if it is executed first      * (until b is executed).      */
specifier|private
name|JoinConditionImpl
name|joinCondition
decl_stmt|;
comment|/**      * The node type associated with the {@link #nodeTypeName}      */
specifier|private
specifier|final
name|NodeState
name|nodeType
decl_stmt|;
specifier|private
specifier|final
name|String
name|selectorName
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeTypeName
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|matchesAllTypes
decl_stmt|;
comment|/**      * All of the matching supertypes, or empty if the {@link #matchesAllTypes}      * flag is set      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|supertypes
decl_stmt|;
comment|/**      * All of the matching primary subtypes, or empty if the      * {@link #matchesAllTypes} flag is set      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|primaryTypes
decl_stmt|;
comment|/**      * All of the matching mixin types, or empty if the {@link #matchesAllTypes}      * flag is set      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mixinTypes
decl_stmt|;
comment|/**      * Whether this selector is the parent of a descendent or parent-child join.      * Access rights don't need to be checked in such selectors (unless there      * are conditions on the selector).      */
specifier|private
name|boolean
name|isParent
decl_stmt|;
comment|/**      * Whether this selector is the left hand side of a left outer join.      * Right outer joins are converted to left outer join.      */
specifier|private
name|boolean
name|outerJoinLeftHandSide
decl_stmt|;
comment|/**      * Whether this selector is the right hand side of a left outer join.      * Right outer joins are converted to left outer join.      */
specifier|private
name|boolean
name|outerJoinRightHandSide
decl_stmt|;
comment|/**      * The list of all join conditions this selector is involved. For the query      * "select * from nt:base as a inner join nt:base as b on a.x =      * b.x", the join condition "a.x = b.x" is set for both selectors a and b,      * so both can check if the property x is set.      * The join conditions are added during the init phase.      */
specifier|private
name|ArrayList
argument_list|<
name|JoinConditionImpl
argument_list|>
name|allJoinConditions
init|=
operator|new
name|ArrayList
argument_list|<
name|JoinConditionImpl
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The selector constraints can be evaluated when the given selector is      * evaluated. For example, for the query      * "select * from nt:base a inner join nt:base b where a.x = 1 and b.y = 2",      * the condition "a.x = 1" can be evaluated when evaluating selector a. The      * other part of the condition can't be evaluated until b is available.      * These constraints are collected during the prepare phase.      */
specifier|private
specifier|final
name|List
argument_list|<
name|ConstraintImpl
argument_list|>
name|selectorConstraints
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Cursor
name|cursor
decl_stmt|;
specifier|private
name|IndexRow
name|currentRow
decl_stmt|;
specifier|private
name|int
name|scanCount
decl_stmt|;
specifier|private
name|Tree
name|lastTree
decl_stmt|;
specifier|private
name|String
name|lastPath
decl_stmt|;
specifier|public
name|SelectorImpl
parameter_list|(
name|NodeState
name|nodeType
parameter_list|,
name|String
name|selectorName
parameter_list|)
block|{
name|this
operator|.
name|nodeType
operator|=
name|checkNotNull
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectorName
operator|=
name|checkNotNull
argument_list|(
name|selectorName
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeTypeName
operator|=
name|nodeType
operator|.
name|getName
argument_list|(
name|JCR_NODETYPENAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchesAllTypes
operator|=
name|NT_BASE
operator|.
name|equals
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|matchesAllTypes
condition|)
block|{
name|this
operator|.
name|supertypes
operator|=
name|newHashSet
argument_list|(
name|nodeType
operator|.
name|getNames
argument_list|(
name|REP_SUPERTYPES
argument_list|)
argument_list|)
expr_stmt|;
name|supertypes
operator|.
name|add
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|primaryTypes
operator|=
name|newHashSet
argument_list|(
name|nodeType
operator|.
name|getNames
argument_list|(
name|REP_PRIMARY_SUBTYPES
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|mixinTypes
operator|=
name|newHashSet
argument_list|(
name|nodeType
operator|.
name|getNames
argument_list|(
name|REP_MIXIN_SUBTYPES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeType
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|mixinTypes
operator|.
name|add
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|primaryTypes
operator|.
name|add
argument_list|(
name|nodeTypeName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|supertypes
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|primaryTypes
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|mixinTypes
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getSelectorName
parameter_list|()
block|{
return|return
name|selectorName
return|;
block|}
specifier|public
name|boolean
name|matchesAllTypes
parameter_list|()
block|{
return|return
name|matchesAllTypes
return|;
block|}
comment|/**      * @return all of the matching supertypes, or empty if the      *         {@link #matchesAllTypes} flag is set      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSupertypes
parameter_list|()
block|{
return|return
name|supertypes
return|;
block|}
comment|/**      * @return all of the matching primary subtypes, or empty if the      *         {@link #matchesAllTypes} flag is set      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrimaryTypes
parameter_list|()
block|{
return|return
name|primaryTypes
return|;
block|}
comment|/**      * @return all of the matching mixin types, or empty if the      *         {@link #matchesAllTypes} flag is set      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMixinTypes
parameter_list|()
block|{
return|return
name|mixinTypes
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getWildcardColumns
parameter_list|()
block|{
return|return
name|nodeType
operator|.
name|getNames
argument_list|(
name|REP_NAMED_SINGLE_VALUED_PROPERTIES
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|quote
argument_list|(
name|nodeTypeName
argument_list|)
operator|+
literal|" as "
operator|+
name|quote
argument_list|(
name|selectorName
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPrepared
parameter_list|()
block|{
return|return
name|plan
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unprepare
parameter_list|()
block|{
name|plan
operator|=
literal|null
expr_stmt|;
name|selectorConstraints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isParent
operator|=
literal|false
expr_stmt|;
name|joinCondition
operator|=
literal|null
expr_stmt|;
name|allJoinConditions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|ExecutionPlan
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|SelectorExecutionPlan
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a selector plan"
argument_list|)
throw|;
block|}
name|SelectorExecutionPlan
name|selectorPlan
init|=
operator|(
name|SelectorExecutionPlan
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|selectorPlan
operator|.
name|getSelector
argument_list|()
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a plan for this selector"
argument_list|)
throw|;
block|}
name|pushDown
argument_list|()
expr_stmt|;
name|this
operator|.
name|plan
operator|=
name|selectorPlan
expr_stmt|;
block|}
specifier|private
name|void
name|pushDown
parameter_list|()
block|{
if|if
condition|(
name|queryConstraint
operator|!=
literal|null
condition|)
block|{
name|queryConstraint
operator|.
name|restrictPushDown
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outerJoinLeftHandSide
operator|&&
operator|!
name|outerJoinRightHandSide
condition|)
block|{
for|for
control|(
name|JoinConditionImpl
name|c
range|:
name|allJoinConditions
control|)
block|{
name|c
operator|.
name|restrictPushDown
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExecutionPlan
name|prepare
parameter_list|()
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
return|return
name|plan
return|;
block|}
name|pushDown
argument_list|()
expr_stmt|;
name|plan
operator|=
name|query
operator|.
name|getBestSelectorExecutionPlan
argument_list|(
name|createFilter
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
specifier|public
name|SelectorExecutionPlan
name|getExecutionPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueryConstraint
parameter_list|(
name|ConstraintImpl
name|queryConstraint
parameter_list|)
block|{
name|this
operator|.
name|queryConstraint
operator|=
name|queryConstraint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOuterJoin
parameter_list|(
name|boolean
name|outerJoinLeftHandSide
parameter_list|,
name|boolean
name|outerJoinRightHandSide
parameter_list|)
block|{
name|this
operator|.
name|outerJoinLeftHandSide
operator|=
name|outerJoinLeftHandSide
expr_stmt|;
name|this
operator|.
name|outerJoinRightHandSide
operator|=
name|outerJoinRightHandSide
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addJoinCondition
parameter_list|(
name|JoinConditionImpl
name|joinCondition
parameter_list|,
name|boolean
name|forThisSelector
parameter_list|)
block|{
if|if
condition|(
name|forThisSelector
condition|)
block|{
name|this
operator|.
name|joinCondition
operator|=
name|joinCondition
expr_stmt|;
block|}
name|allJoinConditions
operator|.
name|add
argument_list|(
name|joinCondition
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinCondition
operator|.
name|isParent
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|isParent
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|NodeState
name|rootState
parameter_list|)
block|{
name|QueryIndex
name|index
init|=
name|plan
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|cursor
operator|=
name|Cursors
operator|.
name|newPathCursor
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|query
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|IndexPlan
name|p
init|=
name|plan
operator|.
name|getIndexPlan
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setFilter
argument_list|(
name|createFilter
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|AdvancedQueryIndex
name|adv
init|=
operator|(
name|AdvancedQueryIndex
operator|)
name|index
decl_stmt|;
name|cursor
operator|=
name|adv
operator|.
name|query
argument_list|(
name|p
argument_list|,
name|rootState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|=
name|index
operator|.
name|query
argument_list|(
name|createFilter
argument_list|(
literal|false
argument_list|)
argument_list|,
name|rootState
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|NodeState
name|rootState
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" /* "
argument_list|)
expr_stmt|;
name|QueryIndex
name|index
init|=
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|index
operator|instanceof
name|AdvancedQueryIndex
condition|)
block|{
name|AdvancedQueryIndex
name|adv
init|=
operator|(
name|AdvancedQueryIndex
operator|)
name|index
decl_stmt|;
name|IndexPlan
name|p
init|=
name|plan
operator|.
name|getIndexPlan
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|adv
operator|.
name|getPlanDescription
argument_list|(
name|p
argument_list|,
name|rootState
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|index
operator|.
name|getPlan
argument_list|(
name|createFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|rootState
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"no-index"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selectorConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|AndImpl
argument_list|(
name|selectorConstraints
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexCostInfo
parameter_list|(
name|NodeState
name|rootState
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|quoteJson
argument_list|(
name|selectorName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|QueryIndex
name|index
init|=
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|index
operator|instanceof
name|AdvancedQueryIndex
condition|)
block|{
name|IndexPlan
name|p
init|=
name|plan
operator|.
name|getIndexPlan
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"{ perEntry: "
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getCostPerEntry
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|", perExecution: "
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getCostPerExecution
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|", count: "
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|getEstimatedEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buff
operator|.
name|append
argument_list|(
name|index
operator|.
name|getCost
argument_list|(
name|createFilter
argument_list|(
literal|true
argument_list|)
argument_list|,
name|rootState
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create the filter condition for planning or execution.      *       * @param preparing whether a filter for the prepare phase should be made       * @return the filter      */
annotation|@
name|Override
specifier|public
name|FilterImpl
name|createFilter
parameter_list|(
name|boolean
name|preparing
parameter_list|)
block|{
name|FilterImpl
name|f
init|=
operator|new
name|FilterImpl
argument_list|(
name|this
argument_list|,
name|query
operator|.
name|getStatement
argument_list|()
argument_list|,
name|query
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPreparing
argument_list|(
name|preparing
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinCondition
operator|!=
literal|null
condition|)
block|{
name|joinCondition
operator|.
name|restrict
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|// rep:excerpt handling: create a (fake) restriction
comment|// "rep:excerpt is not null" to let the index know that
comment|// we will need the excerpt
for|for
control|(
name|ColumnImpl
name|c
range|:
name|query
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getSelector
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getColumnName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rep:excerpt"
argument_list|)
condition|)
block|{
name|f
operator|.
name|restrictProperty
argument_list|(
literal|"rep:excerpt"
argument_list|,
name|Operator
operator|.
name|NOT_EQUAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// all conditions can be pushed to the selectors -
comment|// except in some cases to "outer joined" selectors,
comment|// but the exceptions are handled in the condition
comment|// itself.
comment|// An example where it *is* a problem:
comment|//  "select * from a left outer join b on a.x = b.y
comment|// where b.y is null" - in this case the selector b
comment|// must not use an index condition on "y is null"
comment|// (".. is null" must be written as "not .. is not null").
if|if
condition|(
name|queryConstraint
operator|!=
literal|null
condition|)
block|{
name|queryConstraint
operator|.
name|restrict
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FullTextExpression
name|ft
init|=
name|queryConstraint
operator|.
name|getFullTextConstraint
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|f
operator|.
name|setFullTextConstraint
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConstraintImpl
name|constraint
range|:
name|selectorConstraints
control|)
block|{
name|constraint
operator|.
name|restrict
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
while|while
condition|(
name|cursor
operator|!=
literal|null
operator|&&
name|cursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|scanCount
operator|++
expr_stmt|;
name|currentRow
operator|=
name|cursor
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|isParent
condition|)
block|{
comment|// we must not check whether the _parent_ is readable
comment|// for joins of type
comment|// "select [b].[jcr:primaryType]
comment|// from [nt:base] as [a]
comment|// inner join [nt:base] as [b]
comment|// on isdescendantnode([b], [a])
comment|// where [b].[jcr:path] = $path"
comment|// because if we did, we would filter out
comment|// correct results
block|}
elseif|else
if|if
condition|(
name|currentRow
operator|.
name|isVirtualRow
argument_list|()
condition|)
block|{
comment|// this is a virtual row and should be selected as is
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// we must check whether the _child_ is readable
comment|// (even if no properties are read) for joins of type
comment|// "select [a].[jcr:primaryType]
comment|// from [nt:base] as [a]
comment|// inner join [nt:base] as [b]
comment|// on isdescendantnode([b], [a])
comment|// where [a].[jcr:path] = $path"
comment|// because not checking would reveal existence
comment|// of the child node
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|currentRow
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
operator|||
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|evaluateCurrentRow
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|cursor
operator|=
literal|null
expr_stmt|;
name|currentRow
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|evaluateCurrentRow
parameter_list|()
block|{
if|if
condition|(
name|currentRow
operator|.
name|isVirtualRow
argument_list|()
condition|)
block|{
comment|//null path implies that all checks are already done -- we just need to pass it through
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|matchesAllTypes
operator|&&
operator|!
name|evaluateTypeMatch
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|ConstraintImpl
name|constraint
range|:
name|selectorConstraints
control|)
block|{
if|if
condition|(
operator|!
name|constraint
operator|.
name|evaluate
argument_list|()
condition|)
block|{
if|if
condition|(
name|constraint
operator|.
name|evaluateStop
argument_list|()
condition|)
block|{
comment|// stop processing from now on
name|cursor
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|joinCondition
operator|!=
literal|null
operator|&&
operator|!
name|joinCondition
operator|.
name|evaluate
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|evaluateTypeMatch
parameter_list|()
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|currentRow
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
operator|||
operator|!
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyState
name|primary
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
operator|&&
name|primary
operator|.
name|getType
argument_list|()
operator|==
name|NAME
condition|)
block|{
name|String
name|name
init|=
name|primary
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryTypes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|PropertyState
name|mixins
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixins
operator|!=
literal|null
operator|&&
name|mixins
operator|.
name|getType
argument_list|()
operator|==
name|NAMES
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|mixins
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
control|)
block|{
if|if
condition|(
name|mixinTypes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// no matches found
return|return
literal|false
return|;
block|}
comment|/**      * Get the current absolute Oak path (normalized).      *      * @return the path      */
specifier|public
name|String
name|currentPath
parameter_list|()
block|{
return|return
name|cursor
operator|==
literal|null
condition|?
literal|null
else|:
name|currentRow
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**      * Get the tree at the current path.      *       * @return the current tree, or null      */
specifier|public
name|Tree
name|currentTree
parameter_list|()
block|{
name|String
name|path
init|=
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getTree
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Get the tree at the given path.      *       * @param path the path      * @return the tree, or null      */
name|Tree
name|getTree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|lastPath
operator|==
literal|null
operator|||
operator|!
name|path
operator|.
name|equals
argument_list|(
name|lastPath
argument_list|)
condition|)
block|{
name|lastTree
operator|=
name|query
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|lastPath
operator|=
name|path
expr_stmt|;
block|}
return|return
name|lastTree
return|;
block|}
comment|/**      * The value for the given selector for the current node.      *       * @param propertyName the JCR (not normalized) property name      * @return the property value      */
specifier|public
name|PropertyValue
name|currentProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|pn
init|=
name|normalizePropertyName
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
name|currentOakProperty
argument_list|(
name|pn
argument_list|)
return|;
block|}
comment|/**      * The value for the given selector for the current node, filtered by      * property type.      *       * @param propertyName the JCR (not normalized) property name      * @param propertyType only include properties of this type      * @return the property value (possibly null)      */
specifier|public
name|PropertyValue
name|currentProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|int
name|propertyType
parameter_list|)
block|{
name|String
name|pn
init|=
name|normalizePropertyName
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
name|currentOakProperty
argument_list|(
name|pn
argument_list|,
name|propertyType
argument_list|)
return|;
block|}
comment|/**      * Get the property value. The property name may be relative. The special      * property names "jcr:path", "jcr:score" and "rep:excerpt" are supported.      *       * @param oakPropertyName (must already be normalized)      * @return the property value or null if not found      */
specifier|public
name|PropertyValue
name|currentOakProperty
parameter_list|(
name|String
name|oakPropertyName
parameter_list|)
block|{
return|return
name|currentOakProperty
argument_list|(
name|oakPropertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|PropertyValue
name|currentOakProperty
parameter_list|(
name|String
name|oakPropertyName
parameter_list|,
name|Integer
name|propertyType
parameter_list|)
block|{
name|boolean
name|asterisk
init|=
name|oakPropertyName
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|asterisk
condition|)
block|{
name|Tree
name|t
init|=
name|currentTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"currentOakProperty() - '*' case. looking for '{}' in '{}'"
argument_list|,
name|oakPropertyName
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
argument_list|()
decl_stmt|;
name|readOakProperties
argument_list|(
name|list
argument_list|,
name|t
argument_list|,
name|oakPropertyName
argument_list|,
name|propertyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|t2
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t2
operator|!=
name|type
condition|)
block|{
comment|// types don't match
name|type
operator|=
name|Type
operator|.
name|STRING
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|p
range|:
name|list
control|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|strings
argument_list|,
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|PropertyValues
operator|.
name|newString
argument_list|(
name|strings
argument_list|)
return|;
block|}
name|Type
argument_list|<
name|?
argument_list|>
name|baseType
init|=
name|type
operator|.
name|isArray
argument_list|()
condition|?
name|type
operator|.
name|getBaseType
argument_list|()
else|:
name|type
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|PropertyBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|(
name|PropertyBuilder
argument_list|<
name|Object
argument_list|>
operator|)
name|PropertyBuilder
operator|.
name|array
argument_list|(
name|baseType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyValue
name|v
range|:
name|list
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|value
range|:
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|v
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
control|)
block|{
name|builder
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|addValue
argument_list|(
name|v
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|PropertyState
name|s
init|=
name|builder
operator|.
name|getPropertyState
argument_list|()
decl_stmt|;
return|return
name|PropertyValues
operator|.
name|create
argument_list|(
name|s
argument_list|)
return|;
block|}
name|boolean
name|relative
init|=
name|oakPropertyName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
decl_stmt|;
name|Tree
name|t
init|=
name|currentTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|relative
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|oakPropertyName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|isRoot
argument_list|()
condition|?
literal|null
else|:
name|t
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// same node
block|}
else|else
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|oakPropertyName
operator|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|oakPropertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|currentOakProperty
argument_list|(
name|t
argument_list|,
name|oakPropertyName
argument_list|,
name|propertyType
argument_list|)
return|;
block|}
specifier|private
name|PropertyValue
name|currentOakProperty
parameter_list|(
name|Tree
name|t
parameter_list|,
name|String
name|oakPropertyName
parameter_list|,
name|Integer
name|propertyType
parameter_list|)
block|{
name|PropertyValue
name|result
decl_stmt|;
if|if
condition|(
operator|(
name|t
operator|==
literal|null
operator|||
operator|!
name|t
operator|.
name|exists
argument_list|()
operator|)
operator|&&
operator|(
name|currentRow
operator|==
literal|null
operator|||
operator|!
name|currentRow
operator|.
name|isVirtualRow
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|oakPropertyName
operator|.
name|equals
argument_list|(
name|QueryImpl
operator|.
name|JCR_PATH
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|currentPath
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|getLocalPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|==
literal|null
condition|)
block|{
comment|// not a local path
return|return
literal|null
return|;
block|}
name|result
operator|=
name|PropertyValues
operator|.
name|newString
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oakPropertyName
operator|.
name|equals
argument_list|(
name|QueryImpl
operator|.
name|JCR_SCORE
argument_list|)
condition|)
block|{
name|result
operator|=
name|currentRow
operator|.
name|getValue
argument_list|(
name|QueryImpl
operator|.
name|JCR_SCORE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oakPropertyName
operator|.
name|equals
argument_list|(
name|QueryImpl
operator|.
name|REP_EXCERPT
argument_list|)
condition|)
block|{
name|result
operator|=
name|currentRow
operator|.
name|getValue
argument_list|(
name|QueryImpl
operator|.
name|REP_EXCERPT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oakPropertyName
operator|.
name|equals
argument_list|(
name|QueryImpl
operator|.
name|REP_SPELLCHECK
argument_list|)
condition|)
block|{
name|result
operator|=
name|currentRow
operator|.
name|getValue
argument_list|(
name|QueryImpl
operator|.
name|REP_SPELLCHECK
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oakPropertyName
operator|.
name|equals
argument_list|(
name|QueryImpl
operator|.
name|REP_SUGGEST
argument_list|)
condition|)
block|{
name|result
operator|=
name|currentRow
operator|.
name|getValue
argument_list|(
name|QueryImpl
operator|.
name|REP_SUGGEST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|PropertyValues
operator|.
name|create
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|oakPropertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|propertyType
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|!=
name|propertyType
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|readOakProperties
parameter_list|(
name|ArrayList
argument_list|<
name|PropertyValue
argument_list|>
name|target
parameter_list|,
name|Tree
name|t
parameter_list|,
name|String
name|oakPropertyName
parameter_list|,
name|Integer
name|propertyType
parameter_list|)
block|{
name|boolean
name|skipCurrentNode
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|skipCurrentNode
condition|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
operator|||
operator|!
name|t
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"readOakProperties() - reading '{}' for '{}'"
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|,
name|oakPropertyName
argument_list|)
expr_stmt|;
name|int
name|slash
init|=
name|oakPropertyName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|String
name|parent
init|=
name|oakPropertyName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
decl_stmt|;
name|oakPropertyName
operator|=
name|oakPropertyName
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|isRoot
argument_list|()
condition|?
literal|null
else|:
name|t
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// same node
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|t
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|readOakProperties
argument_list|(
name|target
argument_list|,
name|child
argument_list|,
name|oakPropertyName
argument_list|,
name|propertyType
argument_list|)
expr_stmt|;
block|}
name|skipCurrentNode
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|skipCurrentNode
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|oakPropertyName
argument_list|)
condition|)
block|{
name|PropertyValue
name|value
init|=
name|currentOakProperty
argument_list|(
name|t
argument_list|,
name|oakPropertyName
argument_list|,
name|propertyType
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readOakProperties() - adding: '{}' from '{}'"
argument_list|,
name|value
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|target
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|PropertyState
name|p
range|:
name|t
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyType
operator|==
literal|null
operator|||
name|p
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|propertyType
condition|)
block|{
name|PropertyValue
name|v
init|=
name|PropertyValues
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|target
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SelectorImpl
name|getSelector
parameter_list|(
name|String
name|selectorName
parameter_list|)
block|{
if|if
condition|(
name|selectorName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|selectorName
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|long
name|getScanCount
parameter_list|()
block|{
return|return
name|scanCount
return|;
block|}
specifier|public
name|void
name|restrictSelector
parameter_list|(
name|ConstraintImpl
name|constraint
parameter_list|)
block|{
name|selectorConstraints
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ConstraintImpl
argument_list|>
name|getSelectorConstraints
parameter_list|()
block|{
return|return
name|selectorConstraints
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SelectorImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|selectorName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SelectorImpl
operator|)
name|other
operator|)
operator|.
name|selectorName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|selectorName
operator|.
name|hashCode
argument_list|()
return|;
block|}
name|QueryIndex
name|getIndex
parameter_list|()
block|{
return|return
name|plan
operator|==
literal|null
condition|?
literal|null
else|:
name|plan
operator|.
name|getIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|SourceImpl
argument_list|>
name|getInnerJoinSelectors
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|SourceImpl
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|SourceImpl
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOuterJoinRightHandSide
parameter_list|()
block|{
return|return
name|this
operator|.
name|outerJoinRightHandSide
return|;
block|}
specifier|public
name|QueryImpl
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|SizePrecision
name|precision
parameter_list|,
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|cursor
operator|.
name|getSize
argument_list|(
name|precision
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
end_class

end_unit

