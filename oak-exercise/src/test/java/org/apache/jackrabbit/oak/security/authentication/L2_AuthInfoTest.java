begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|createTestGroup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|createTestUser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
operator|.
name|getTestCredentials
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authentication  * =============================================================================  *  * Title: Oak AuthInfo  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the {@link AuthInfo} interface, how it relates to the  * {@link javax.security.auth.Subject} and how it is populated during login.  *  * Exercises:  *  * - {@link #testGetAuthInfo()}  *   Walk through the {@link org.apache.jackrabbit.oak.api.ContentSession#getAuthInfo()}  *   call in order to get in insight to the implementation and how the {@link org.apache.jackrabbit.oak.api.AuthInfo}  *   relates to the {@link javax.security.auth.Subject}  *  * - {@link #testGuestAuthInfo()}  *   Walk though the login call on the Oak API and identify where the {@link AuthInfo}  *   is being created.  *   Fix the test case by providing the expected id and set of principals for the guest content session.  *   Question: Can you identify the similarities between the subject and the AuthInfo? What is missing in AuthInfo?  *  * - {@link #testUserAuthInfo()}  *   Same as {@link #testGuestAuthInfo()} for a newly created user.  *   Fix the test case by providing the expected id and set of principals for the content session.  *   Pay attention to the way the test user has been created.  *  *   Question: What is the principal name?  *   Question: What is the difference between the userID and the principal name? and how is that reflected in the AuthInfo?  *  * - {@link #testUserAuthInfoWithGroupMembership()}  *   Same as {@link #testUserAuthInfo()} but with the subtle difference that the  *   test user is member of a group.  *   Fix the test case by providing the expected set of principals for the content session.  *   Identify how the group membership is being exposed in the AuthInfo  *  *   Question: Can you spot the 'groupID' in the AuthInfo? Or in the underlying Subject?  *  *</pre>  *  * @see org.apache.jackrabbit.oak.api.AuthInfo  * @see javax.security.auth.Subject  * @see org.apache.jackrabbit.oak.api.ContentRepository#login(javax.jcr.Credentials, String)  */
end_comment

begin_class
specifier|public
class|class
name|L2_AuthInfoTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
specifier|private
name|ContentSession
name|contentSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userManager
operator|=
name|getUserManager
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|contentSession
operator|!=
literal|null
condition|)
block|{
name|contentSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthInfo
parameter_list|()
block|{
comment|// EXERCISE: inspect the method
name|AuthInfo
name|authInfo
init|=
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuestAuthInfo
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
name|contentSession
operator|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|AuthInfo
name|authInfo
init|=
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|String
name|expectedId
init|=
literal|null
decl_stmt|;
comment|// EXERCISE : fill in the expected id
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: create the set of expected principals.
comment|// EXERCISE: what are the variants you have at hand when using the Jackrabbit API
comment|// EXERCISE: what are the variants you have at hand when using public Oak SPI interfaces?
name|Set
argument_list|<
name|Principal
argument_list|>
name|expectedPrincipals
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrincipals
argument_list|,
name|authInfo
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAuthInfo
parameter_list|()
throws|throws
name|LoginException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|testUser
operator|=
name|createTestUser
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|contentSession
operator|=
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AuthInfo
name|authInfo
init|=
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
name|String
name|expectedId
init|=
literal|null
decl_stmt|;
comment|// EXERCISE : fill in the expected id
name|assertEquals
argument_list|(
name|expectedId
argument_list|,
name|authInfo
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
comment|// EXERCISE: create the set of expected principals.
comment|// EXERCISE: what are the variants you have at hand when using the Jackrabbit API
comment|// EXERCISE: what are the variants you have at hand when using public Oak SPI interfaces?
name|Set
argument_list|<
name|Principal
argument_list|>
name|expectedPrincipals
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrincipals
argument_list|,
name|authInfo
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAuthInfoWithGroupMembership
parameter_list|()
throws|throws
name|LoginException
throws|,
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|testUser
operator|=
name|createTestUser
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|testGroup
operator|=
name|createTestGroup
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|contentSession
operator|=
name|login
argument_list|(
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AuthInfo
name|authInfo
init|=
name|contentSession
operator|.
name|getAuthInfo
argument_list|()
decl_stmt|;
comment|// EXERCISE: create the set of expected principals.
comment|// EXERCISE: what are the variants you have at hand when using the Jackrabbit API
comment|// EXERCISE: what are the variants you have at hand when using public Oak SPI interfaces?
name|Set
argument_list|<
name|Principal
argument_list|>
name|expectedPrincipals
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPrincipals
argument_list|,
name|authInfo
operator|.
name|getPrincipals
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

