begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
operator|.
name|Jsop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
operator|.
name|JsopArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|MutableCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|MutableNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Use-case: start off a new revision store that contains just the head revision  * and its nodes.  *   * TODO: if copying starts at some point in time and ends some time later, copy  *       all revisions that are accessed in the meantime to the new store.  *       This must be done in a way that ensures the integrity of the parental  *       relationship (because there may be missing intermediate commits).  */
end_comment

begin_class
specifier|public
class|class
name|CopyHeadRevisionTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteRecursive
argument_list|(
literal|"target/mk1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteRecursive
argument_list|(
literal|"target/mk2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testCopyHeadRevisionToNewStore
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultRevisionStore
name|rsFrom
init|=
operator|new
name|DefaultRevisionStore
argument_list|()
decl_stmt|;
name|rsFrom
operator|.
name|initialize
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/mk1"
argument_list|)
argument_list|)
expr_stmt|;
name|MicroKernelImpl
name|mkFrom
init|=
operator|new
name|MicroKernelImpl
argument_list|(
operator|new
name|Repository
argument_list|(
name|rsFrom
argument_list|)
argument_list|)
decl_stmt|;
name|mkFrom
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"c\":{}, \"d\":{} }"
argument_list|,
name|mkFrom
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mkFrom
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"b\" : {}"
argument_list|,
name|mkFrom
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mkFrom
operator|.
name|commit
argument_list|(
literal|"/b"
argument_list|,
literal|"+\"e\" : {}"
argument_list|,
name|mkFrom
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DefaultRevisionStore
name|rsTo
init|=
operator|new
name|DefaultRevisionStore
argument_list|()
decl_stmt|;
name|rsTo
operator|.
name|initialize
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/mk2"
argument_list|)
argument_list|)
expr_stmt|;
name|copyHeadRevision
argument_list|(
name|rsFrom
argument_list|,
name|rsTo
argument_list|)
expr_stmt|;
name|MicroKernelImpl
name|mkTo
init|=
operator|new
name|MicroKernelImpl
argument_list|(
operator|new
name|Repository
argument_list|(
name|rsTo
argument_list|)
argument_list|)
decl_stmt|;
comment|// Assert both old and new MK have same head revision
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mkFrom
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|mkTo
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert both old and new MK have same contents
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mkFrom
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|mkFrom
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|mkTo
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|mkTo
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert new MK has only 2 revisions (initial and head)
name|JsopArray
name|revs
init|=
operator|(
name|JsopArray
operator|)
name|Jsop
operator|.
name|parse
argument_list|(
name|mkTo
operator|.
name|getRevisions
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|revs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the head revision (commit and nodes) from a source provider to a      * target store.      *       * @param from source provider      * @param to target store      * @throws Exception if an error occurs      */
specifier|private
name|void
name|copyHeadRevision
parameter_list|(
name|RevisionProvider
name|from
parameter_list|,
name|RevisionStore
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredCommit
name|commitFrom
init|=
name|from
operator|.
name|getHeadCommit
argument_list|()
decl_stmt|;
name|Node
name|nodeFrom
init|=
name|from
operator|.
name|getNode
argument_list|(
name|commitFrom
operator|.
name|getRootNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|nodeFrom
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|MutableCommit
name|commitTo
init|=
operator|new
name|MutableCommit
argument_list|(
name|commitFrom
argument_list|)
decl_stmt|;
name|commitTo
operator|.
name|setParentId
argument_list|(
name|to
operator|.
name|getHeadCommitId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|revId
init|=
name|to
operator|.
name|putCommit
argument_list|(
name|commitTo
argument_list|)
decl_stmt|;
name|to
operator|.
name|setHeadCommitId
argument_list|(
name|revId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy a node and all its descendants into a target store      * @param node source node      * @param store target store      * @throws Exception if an error occurs      */
specifier|private
name|void
name|copy
parameter_list|(
name|Node
name|node
parameter_list|,
name|RevisionStore
name|store
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|.
name|putNode
argument_list|(
operator|new
name|MutableNode
argument_list|(
name|node
argument_list|,
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChildNode
argument_list|>
name|iter
init|=
name|node
operator|.
name|getChildNodes
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChildNode
name|c
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|c
operator|.
name|getNode
argument_list|()
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

