begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_comment
comment|/**  * Implements a comparator, which sorts paths according to 1) their depth  * (highest first) and 2) the paths natural ordering.  */
end_comment

begin_class
specifier|public
class|class
name|PathComparator
implements|implements
name|Comparator
argument_list|<
name|Path
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1523171906146067782L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Path
argument_list|>
name|INSTANCE
init|=
operator|new
name|PathComparator
argument_list|()
decl_stmt|;
specifier|private
name|PathComparator
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
block|{
name|int
name|d1
init|=
name|p1
operator|.
name|getDepth
argument_list|()
decl_stmt|;
name|int
name|d2
init|=
name|p2
operator|.
name|getDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
name|d2
condition|)
block|{
return|return
name|Integer
operator|.
name|signum
argument_list|(
name|d2
operator|-
name|d1
argument_list|)
return|;
block|}
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

