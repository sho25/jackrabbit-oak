begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_class
specifier|final
class|class
name|ReadStatus
block|{
specifier|private
specifier|static
specifier|final
name|int
name|THIS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROPERTIES
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHILD_NODES
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|THIS_PROPERTIES
init|=
name|THIS
operator||
name|PROPERTIES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ALL
init|=
name|THIS
operator||
name|PROPERTIES
operator||
name|CHILD_NODES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_THIS
init|=
operator|new
name|ReadStatus
argument_list|(
name|THIS
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_THIS_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
name|THIS_PROPERTIES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|ReadStatus
name|ALLOW_ALL
init|=
operator|new
name|ReadStatus
argument_list|(
name|ALL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|ReadStatus
name|DENY_THIS
init|=
operator|new
name|ReadStatus
argument_list|(
name|THIS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReadStatus
name|DENY_THIS_PROPERTIES
init|=
operator|new
name|ReadStatus
argument_list|(
name|THIS_PROPERTIES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|ReadStatus
name|DENY_ALL
init|=
operator|new
name|ReadStatus
argument_list|(
name|ALL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PrivilegeBits
name|READ_BITS
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PrivilegeBits
name|READ_PROPERTIES_BITS
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|status
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAllow
decl_stmt|;
specifier|private
name|ReadStatus
parameter_list|(
name|int
name|status
parameter_list|,
name|boolean
name|isAllow
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|isAllow
operator|=
name|isAllow
expr_stmt|;
block|}
specifier|static
name|ReadStatus
name|create
parameter_list|(
name|PermissionEntry
name|pe
parameter_list|,
name|long
name|permission
parameter_list|,
name|boolean
name|skipped
parameter_list|)
block|{
comment|/*         best effort: read status is only calculated if         - no permission entries have been filtered out (e.g. an entry that           only applies to certain properties and thus not to the target tree itself)         - the target does not define access control content         - the matching entry doesn't contain any restrictions         */
if|if
condition|(
name|skipped
operator|||
name|permission
operator|==
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator|||
name|pe
operator|.
name|restriction
operator|!=
name|RestrictionPattern
operator|.
name|EMPTY
condition|)
block|{
return|return
operator|(
name|pe
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_THIS
else|:
name|DENY_THIS
return|;
block|}
else|else
block|{
if|if
condition|(
name|pe
operator|.
name|privilegeBits
operator|.
name|includes
argument_list|(
name|READ_BITS
argument_list|)
condition|)
block|{
return|return
operator|(
name|pe
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_ALL
else|:
name|DENY_ALL
return|;
block|}
elseif|else
if|if
condition|(
name|pe
operator|.
name|privilegeBits
operator|.
name|includes
argument_list|(
name|READ_PROPERTIES_BITS
argument_list|)
condition|)
block|{
return|return
operator|(
name|pe
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_THIS_PROPERTIES
else|:
name|DENY_THIS_PROPERTIES
return|;
block|}
else|else
block|{
return|return
operator|(
name|pe
operator|.
name|isAllow
operator|)
condition|?
name|ALLOW_THIS
else|:
name|DENY_THIS
return|;
block|}
block|}
block|}
name|boolean
name|allowsThis
parameter_list|()
block|{
return|return
name|isAllow
operator|&&
operator|(
operator|(
name|status
operator|&
name|THIS
operator|)
operator|==
name|THIS
operator|)
return|;
block|}
name|boolean
name|allowsProperties
parameter_list|()
block|{
return|return
name|isAllow
operator|&&
operator|(
operator|(
name|status
operator|&
name|PROPERTIES
operator|)
operator|==
name|PROPERTIES
operator|)
return|;
block|}
name|boolean
name|allowsAll
parameter_list|()
block|{
comment|// NOTE: calculation of allows-all requires knowledge of permissions defined in the subtree
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

