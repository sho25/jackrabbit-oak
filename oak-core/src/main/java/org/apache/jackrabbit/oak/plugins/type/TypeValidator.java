begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
operator|.
name|ReadOnlyTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_class
class|class
name|TypeValidator
implements|implements
name|Validator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypeValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeTypeManager
name|ntm
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyTree
name|parent
decl_stmt|;
specifier|private
name|EffectiveNodeType
name|parentType
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
name|EffectiveNodeType
name|getParentType
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|parentType
operator|==
literal|null
condition|)
block|{
name|parentType
operator|=
name|getEffectiveNodeType
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|parentType
return|;
block|}
specifier|public
name|TypeValidator
parameter_list|(
name|NodeTypeManager
name|ntm
parameter_list|,
name|ReadOnlyTree
name|parent
parameter_list|)
block|{
name|this
operator|.
name|ntm
operator|=
name|ntm
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|//-------------------------------------------------------< NodeValidator>
comment|// TODO check presence of mandatory items
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|validateType
argument_list|(
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canSetProperty
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't add property "
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|validateType
argument_list|(
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canSetProperty
argument_list|(
name|after
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't set property "
operator|+
name|after
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canRemoveProperty
argument_list|(
name|before
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't delete property "
operator|+
name|before
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|PropertyState
name|type
init|=
name|after
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canAddChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't add node "
operator|+
name|name
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|ntName
init|=
name|type
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canAddChildNode
argument_list|(
name|name
argument_list|,
name|ntName
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't add node "
operator|+
name|name
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TypeValidator
argument_list|(
name|ntm
argument_list|,
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|TypeValidator
argument_list|(
name|ntm
argument_list|,
operator|new
name|ReadOnlyTree
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|after
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|getParentType
argument_list|()
operator|.
name|canRemoveNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't delete node "
operator|+
name|name
operator|+
literal|" at "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|validateType
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|boolean
name|primaryType
init|=
name|JCR_PRIMARYTYPE
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|mixinType
init|=
name|JCR_MIXINTYPES
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryType
operator|||
name|mixinType
condition|)
block|{
try|try
block|{
for|for
control|(
name|CoreValue
name|cv
range|:
name|after
operator|.
name|getValues
argument_list|()
control|)
block|{
name|String
name|ntName
init|=
name|cv
operator|.
name|getString
argument_list|()
decl_stmt|;
name|NodeType
name|nt
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nt
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't create node with abstract type: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryType
operator|&&
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't assign mixin for primary type: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mixinType
operator|&&
operator|!
name|nt
operator|.
name|isMixin
argument_list|()
condition|)
block|{
name|throwConstraintViolationException
argument_list|(
literal|"Can't assign primary type for mixin: "
operator|+
name|ntName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|throwConstraintViolationException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|NodeType
name|getPrimaryType
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|PropertyState
name|jcrPrimaryType
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrPrimaryType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CoreValue
name|typeName
range|:
name|jcrPrimaryType
operator|.
name|getValues
argument_list|()
control|)
block|{
name|String
name|ntName
init|=
name|typeName
operator|.
name|getString
argument_list|()
decl_stmt|;
name|NodeType
name|type
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find node type {} for item at {}"
argument_list|,
name|ntName
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Item at {} has no primary type. Assuming nt:base"
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ntm
operator|.
name|getNodeType
argument_list|(
name|NT_BASE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|throwConstraintViolationException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|NodeType
argument_list|>
name|getMixinTypes
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|CommitFailedException
block|{
try|try
block|{
name|List
argument_list|<
name|NodeType
argument_list|>
name|types
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|PropertyState
name|jcrMixinType
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrMixinType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CoreValue
name|typeName
range|:
name|jcrMixinType
operator|.
name|getValues
argument_list|()
control|)
block|{
name|String
name|ntName
init|=
name|typeName
operator|.
name|getString
argument_list|()
decl_stmt|;
name|NodeType
name|type
init|=
name|ntm
operator|.
name|getNodeType
argument_list|(
name|ntName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find mixin type {} for item at {}"
argument_list|,
name|ntName
argument_list|,
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|types
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
return|return
name|throwConstraintViolationException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
specifier|private
name|EffectiveNodeType
name|getEffectiveNodeType
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|EffectiveNodeType
argument_list|(
name|getPrimaryType
argument_list|(
name|tree
argument_list|)
argument_list|,
name|getMixinTypes
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|throwConstraintViolationException
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
operator|new
name|ConstraintViolationException
argument_list|(
name|message
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|throwConstraintViolationException
parameter_list|(
name|RepositoryException
name|cause
parameter_list|)
throws|throws
name|CommitFailedException
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
specifier|private
class|class
name|EffectiveNodeType
block|{
specifier|private
specifier|final
name|NodeType
name|primaryType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeType
argument_list|>
name|mixinTypes
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|NodeType
argument_list|>
name|allTypes
decl_stmt|;
specifier|public
name|EffectiveNodeType
parameter_list|(
name|NodeType
name|primaryType
parameter_list|,
name|List
argument_list|<
name|NodeType
argument_list|>
name|mixinTypes
parameter_list|)
block|{
name|this
operator|.
name|primaryType
operator|=
name|primaryType
expr_stmt|;
name|this
operator|.
name|mixinTypes
operator|=
name|mixinTypes
expr_stmt|;
name|this
operator|.
name|allTypes
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|mixinTypes
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|primaryType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canSetProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
name|property
operator|.
name|isArray
argument_list|()
condition|?
name|canSetProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|property
operator|.
name|getValues
argument_list|()
argument_list|)
else|:
name|canSetProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|canSetProperty
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|,
specifier|final
name|List
argument_list|<
name|CoreValue
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO return nt.canSetProperty(propertyName, values);
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|canSetProperty
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|,
specifier|final
name|CoreValue
name|value
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// TODO return nt.canSetProperty(propertyName, value);
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canRemoveProperty
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
name|nt
operator|.
name|canRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canRemoveNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
name|nt
operator|.
name|canRemoveProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
name|nt
operator|.
name|canAddChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canAddChildNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|ntName
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|any
argument_list|(
name|allTypes
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeType
name|nt
parameter_list|)
block|{
return|return
name|nt
operator|.
name|canAddChildNode
argument_list|(
name|name
argument_list|,
name|ntName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

