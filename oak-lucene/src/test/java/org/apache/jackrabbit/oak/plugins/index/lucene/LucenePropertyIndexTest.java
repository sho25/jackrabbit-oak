begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
operator|.
name|ExtractionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|PreExtractedTextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|nodetype
operator|.
name|NodeTypeIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|NodeTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_BINDINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
operator|.
name|NO_MAPPINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NODE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|TYPE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|PathFilter
operator|.
name|PROP_EXCLUDED_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|PathFilter
operator|.
name|PROP_INCLUDED_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|ORDERED_PROP_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|TIKA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorTest
operator|.
name|createCal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|TestUtil
operator|.
name|useV2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_class
specifier|public
class|class
name|LucenePropertyIndexTest
extends|extends
name|AbstractQueryTest
block|{
comment|/**      * Set the size to twice the batch size to test the pagination with sorting      */
specifier|static
specifier|final
name|int
name|NUMBER_OF_NODES
init|=
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
operator|*
literal|2
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|LuceneIndexEditorProvider
name|editorProvider
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createTestIndexNode
parameter_list|()
throws|throws
name|Exception
block|{
name|setTraversalEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
name|editorProvider
operator|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|createIndexCopier
argument_list|()
argument_list|,
operator|new
name|ExtractedTextCache
argument_list|(
literal|10
operator|*
name|FileUtils
operator|.
name|ONE_MB
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|LuceneIndexProvider
name|provider
init|=
operator|new
name|LuceneIndexProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|QueryIndexProvider
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
operator|(
name|Observer
operator|)
name|provider
argument_list|)
operator|.
name|with
argument_list|(
name|editorProvider
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|NodeTypeIndexProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
specifier|private
name|IndexCopier
name|createIndexCopier
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdownExecutor
parameter_list|()
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fulltextSearchWithCustomAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|anl
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANALYZERS
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_DEFAULT
argument_list|)
decl_stmt|;
name|anl
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_TOKENIZER
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_NAME
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|anl
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|ANL_FILTERS
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"stop"
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"fox jumping"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox was jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Tree
name|createFulltextIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_TYPES
argument_list|,
name|of
argument_list|(
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_BINARY
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propc"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo2'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propc] = 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelectionVsNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|luceneIndex
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
comment|// decrease cost of lucene property index
name|luceneIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|5L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
comment|// Decrease cost of node type index
name|Tree
name|nodeTypeIndex
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
literal|50L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|nodeTypeIndex
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|KEY_COUNT_PROPERTY_NAME
argument_list|,
literal|10L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|15
condition|;
name|idx
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
literal|"/test/n"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propaQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propaQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propaQuery
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexSelectionFulltextVsNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|nodeTypeIdx
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Set the cost to highest to ensure that if Lucene index opts in then
comment|//it always wins. In actual case Lucene index should not participate
comment|//in such queries
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|ENTRY_COUNT_PROPERTY_NAME
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Tree
name|luceneIndex
init|=
name|createFullTextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"lucene"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|setNodeType
argument_list|(
name|test
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"nt:base"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"/jcr:root//element(*, nt:file)"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|explainXpath
argument_list|(
name|propabQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explainXpath
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"nodeType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|declaringNodeTypeSameProp
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propcdQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propcdQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propcdQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|declaringNodeTypeSingleIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:unstructured"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:primaryType"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:unstructured] where [propb] = 'baz' and "
operator|+
literal|"[propa] = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|propNoIdxQuery
init|=
literal|"select [jcr:path] from [nt:base] where [propb] = 'baz'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propNoIdxQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"no-index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propNoIdxQuery
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|usedAsNodeTypeIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|nodeTypeIdx
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:resource"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|setNodeType
argument_list|(
name|test
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"nt:base"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:file]"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|usedAsNodeTypeIndex2
parameter_list|()
throws|throws
name|Exception
block|{
comment|//prevent the default nodeType index from indexing all types
name|Tree
name|nodeTypeIdx
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/nodetype"
argument_list|)
decl_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:resource"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|nodeTypeIdx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|indexWithType
init|=
name|createIndex
argument_list|(
literal|"test2"
argument_list|,
name|of
argument_list|(
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|,
name|of
argument_list|(
literal|"nt:file"
argument_list|)
argument_list|,
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|indexWithType
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|indexWithType
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|setNodeType
argument_list|(
name|test
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"nt:file"
argument_list|)
expr_stmt|;
name|setNodeType
argument_list|(
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|"nt:base"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:file]"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Tree
name|setNodeType
parameter_list|(
name|Tree
name|t
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|t
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|rules
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
argument_list|)
decl_stmt|;
name|rules
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|rule
init|=
name|rules
operator|.
name|addChild
argument_list|(
literal|"nt:base"
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_NODE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"camelCase"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [nt:base] where LOCALNAME() = 'foo'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1(/oak:index/test1) :nodeName:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where LOCALNAME() = 'bar'"
argument_list|,
name|asList
argument_list|(
literal|"/test/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where LOCALNAME() LIKE 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where LOCALNAME() LIKE 'camel%'"
argument_list|,
name|asList
argument_list|(
literal|"/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where NAME() = 'bar'"
argument_list|,
name|asList
argument_list|(
literal|"/test/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where NAME() LIKE 'foo'"
argument_list|,
name|asList
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where NAME() LIKE 'camel%'"
argument_list|,
name|asList
argument_list|(
literal|"/camelCase"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 'foo'"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyExistenceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//OAK-2568
annotation|@
name|Test
specifier|public
name|void
name|multiValueAnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|q
init|=
literal|"SELECT * FROM [nt:unstructured] as content WHERE ISDESCENDANTNODE('/content/dam/en/us')\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[tags] = 'Products:A'\n"
operator|+
literal|"    or content.[tags] = 'Products:A/B'\n"
operator|+
literal|"    or content.[tags] = 'Products:A/B'\n"
operator|+
literal|"    or content.[tags] = 'Products:A'\n"
operator|+
literal|")\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[tags] = 'DocTypes:A'\n"
operator|+
literal|"    or content.[tags] = 'DocTypes:B'\n"
operator|+
literal|"    or content.[tags] = 'DocTypes:C'\n"
operator|+
literal|"    or content.[tags] = 'ProblemType:A'\n"
operator|+
literal|")\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[hasRendition] IS NULL\n"
operator|+
literal|"    or content.[hasRendition] = 'false'\n"
operator|+
literal|")"
decl_stmt|;
name|String
name|explain
init|=
name|explain
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|explain
argument_list|)
expr_stmt|;
name|String
name|luceneQuery
init|=
name|explain
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|explain
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[nt:unstructured] as [content] /* lucene:test1(/oak:index/test1) "
operator|+
literal|"+(tags:Products:A tags:Products:A/B) "
operator|+
literal|"+(tags:DocTypes:A tags:DocTypes:B tags:DocTypes:C tags:ProblemType:A)"
argument_list|,
name|luceneQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|redundantNotNullCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"tags"
argument_list|,
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|q
init|=
literal|"SELECT * FROM [nt:unstructured] as content WHERE ISDESCENDANTNODE('/content/dam/en/us')\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[tags] = 'Products:A'\n"
operator|+
literal|"    or content.[tags] = 'Products:A/B'\n"
operator|+
literal|"    or content.[tags] = 'Products:A/B'\n"
operator|+
literal|"    or content.[tags] = 'Products:A'\n"
operator|+
literal|")\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[tags] = 'DocTypes:A'\n"
operator|+
literal|"    or content.[tags] = 'DocTypes:B'\n"
operator|+
literal|"    or content.[tags] = 'DocTypes:C'\n"
operator|+
literal|"    or content.[tags] = 'ProblemType:A'\n"
operator|+
literal|")\n"
operator|+
literal|"and(\n"
operator|+
literal|"    content.[hasRendition] IS NULL\n"
operator|+
literal|"    or content.[hasRendition] = 'false'\n"
operator|+
literal|")"
decl_stmt|;
comment|//Check that filter created out of query does not have is not null restriction
name|assertThat
argument_list|(
name|explain
argument_list|(
name|q
argument_list|)
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
literal|"[content].[tags] is not null"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyExistenceQuery2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|TestUtil
operator|.
name|TEST_NODE_TYPE
argument_list|)
argument_list|,
literal|"test nodeType"
argument_list|)
expr_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|idx
argument_list|,
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"propa"
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NOT_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"c"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [oak:TestNode] where [propa] is not null"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1(/oak:index/test1) :notNullProps:propa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyNonExistenceQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|TestUtil
operator|.
name|TEST_NODE_TYPE
argument_list|)
argument_list|,
literal|"test nodeType"
argument_list|)
expr_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|idx
argument_list|,
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"propa"
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NULL_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"c"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [oak:TestNode] where [propa] is null"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1(/oak:index/test1) :nullProps:propa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Tree
name|createNodeWithType
parameter_list|(
name|Tree
name|t
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|orderByScore
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null order by [jcr:score]"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 "
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] in (10,20)"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathInclude
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
comment|//Do not provide type information
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 10"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 10"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/a/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|,
name|of
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
comment|//Do not provide type information
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 10"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 10"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Make some change and then check
name|test
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 10"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|determinePropTypeFromRestriction
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Do not provide type information
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20 or [propa] = 10 "
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] in (10,20)"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|10.1
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|20.4
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|30.7
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= 20.3"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa] = 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<= 20.5"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< 20.4"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> 10.5 and [propa]< 30"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"b is b"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check that string props are not tokenized
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa = 'b is b'"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa in ('a', 'c')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]>= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]<= 'f'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]> 'e'"
argument_list|,
name|asList
argument_list|(
literal|"/test/d"
argument_list|,
literal|"/test/e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propb]< 'g'"
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeQueriesWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/02/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
name|createCal
argument_list|(
literal|"14/04/2014"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]>= "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]<="
operator|+
name|dt
argument_list|(
literal|"15/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]< "
operator|+
name|dt
argument_list|(
literal|"14/03/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [propa]> "
operator|+
name|dt
argument_list|(
literal|"15/02/2014"
argument_list|)
operator|+
literal|" and [propa]< "
operator|+
name|dt
argument_list|(
literal|"13/04/2014"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa is not null"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"dumpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like 'hum%'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like '%ty'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where propa like '%ump%'"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nativeQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FUNC_NAME
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"dumpty"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"humpy"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where native('foo', 'propa:(humpty OR dumpty)')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"b/propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where [b/propa] = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test2/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDefinitionBelowRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where ISDESCENDANTNODE(s, '/test') and propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/test2/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexDefinitionBelowRoot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|parent
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
name|parent
argument_list|,
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|parent
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test3"
argument_list|)
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] as s where ISDESCENDANTNODE(s, '/test/test2') and propa = 'a'"
argument_list|,
name|asList
argument_list|(
literal|"/test/test2/test3/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_NotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo]"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|createDataForLongProp
argument_list|()
decl_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base]  order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithLong_NotIndexed_relativeProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo/bar]"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1"
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] order by [foo/bar]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base]  order by [foo/bar] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|assertSortedLong
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|createDataForLongProp
argument_list|()
decl_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|>
name|createDataForLongProp
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDouble
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDouble_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DOUBLE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDouble
argument_list|()
expr_stmt|;
block|}
name|void
name|assertSortedDouble
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
name|createDoubles
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithString_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithStringIgnoredMulti_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|createStrings
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Add a wrong multi-valued property
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|of
argument_list|(
literal|"w"
argument_list|,
literal|"z"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|assertSortedString
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|createStrings
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDate_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertSortedDate
argument_list|()
expr_stmt|;
block|}
name|void
name|assertSortedDate
parameter_list|()
throws|throws
name|ParseException
throws|,
name|CommitFailedException
block|{
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|createDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithDateStringMixed_OrderedProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_DATE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|createDates
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Add the path of property added as timestamp string in the sorted list
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo]"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/n0"
argument_list|)
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Append the path of property added as timestamp string to the sorted list
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] DESC"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|getSortedPaths
argument_list|(
name|tuples
argument_list|,
name|OrderDirection
operator|.
name|DESC
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"/test/n0"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithStringAndLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|propIdx
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|propIdx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_LONG
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|firstPropSize
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|createStrings
argument_list|(
name|firstPropSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longValues
init|=
name|createLongs
argument_list|(
name|NUMBER_OF_NODES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple2
argument_list|>
name|tuples
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|values
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|firstPropSize
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
name|longValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple2
argument_list|(
name|val
argument_list|,
name|longValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertOrderedQuery
argument_list|(
literal|"select [jcr:path] from [nt:base] where [bar] = 'baz' order by [foo] asc, [baz] desc"
argument_list|,
name|getSortedPaths
argument_list|(
name|tuples
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexTimeFieldBoost
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|,
literal|"propc"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|propNode
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
decl_stmt|;
comment|// property definition for index test1
name|Tree
name|propA
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|Tree
name|propB
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propb"
argument_list|)
decl_stmt|;
name|propB
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propB
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|Tree
name|propC
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propc"
argument_list|)
decl_stmt|;
name|propC
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propC
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"//* [jcr:contains(., 'foo' )]"
decl_stmt|;
comment|// verify results ordering
comment|// which should be /test/c (boost = 4.0), /test/a(boost = 2.0), /test/b (1.0)
name|assertOrderedQuery
argument_list|(
name|queryString
argument_list|,
name|asList
argument_list|(
literal|"/test/c"
argument_list|,
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|,
name|XPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|boostTitleOverDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|TestUtil
operator|.
name|TEST_NODE_TYPE
argument_list|)
argument_list|,
literal|"test nodeType"
argument_list|)
expr_stmt|;
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|idx
argument_list|,
name|TestUtil
operator|.
name|NT_TEST
argument_list|)
decl_stmt|;
name|Tree
name|title
init|=
name|props
operator|.
name|addChild
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:content/jcr:title"
argument_list|)
expr_stmt|;
name|title
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|title
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|Tree
name|desc
init|=
name|props
operator|.
name|addChild
argument_list|(
literal|"desc"
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:content/jcr:description"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|Tree
name|text
init|=
name|props
operator|.
name|addChild
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|text
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:content/text"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|a
init|=
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"Batman"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"Silent angel of Gotham"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"once upon a time a long text phrase so as to add penalty to /test/a and nullifying boost"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"Superman"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"Tale of two heroes Superman and Batman"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"some stuff"
argument_list|)
expr_stmt|;
name|Tree
name|c
init|=
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"c"
argument_list|,
literal|"oak:TestNode"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"Ironman"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"jcr:description"
argument_list|,
literal|"New kid in the town"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"Friend of batman?"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"//element(*,oak:TestNode)[jcr:contains(., 'batman')]"
decl_stmt|;
name|String
name|explain
init|=
name|explainXpath
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
comment|//Assert that Lucene query generated has entries for all included boosted fields
name|assertThat
argument_list|(
name|explain
argument_list|,
name|containsString
argument_list|(
literal|"full:jcr:content/jcr:title:batman^4.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|,
name|containsString
argument_list|(
literal|"full:jcr:content/jcr:description:batman^2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|,
name|containsString
argument_list|(
literal|":fulltext:batman"
argument_list|)
argument_list|)
expr_stmt|;
name|assertOrderedQuery
argument_list|(
name|queryString
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|)
argument_list|,
name|XPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortQueriesWithJcrScore
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"n0"
argument_list|,
literal|"n1"
argument_list|,
literal|"n2"
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Tree
name|child
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Descending matches with lucene native sort
name|String
name|query
init|=
literal|"measure select [jcr:path] from [nt:base] where [propa] = 'foo' order by [jcr:score] desc"
decl_stmt|;
name|assertThat
argument_list|(
name|measureWithLimit
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"scanCount: 1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ascending needs to be sorted by query engine
name|query
operator|=
literal|"measure select [jcr:path] from [nt:base] where [propa] = 'foo' order by [jcr:score]"
expr_stmt|;
name|assertThat
argument_list|(
name|measureWithLimit
argument_list|(
name|query
argument_list|,
name|SQL2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"scanCount: 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortFulltextQueriesWithJcrScore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Descending matches with lucene native sort
name|String
name|query
init|=
literal|"measure //*[jcr:contains(., 'foo' )] order by @jcr:score descending"
decl_stmt|;
name|assertThat
argument_list|(
name|measureWithLimit
argument_list|(
name|query
argument_list|,
name|XPATH
argument_list|,
literal|1
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"scanCount: 1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ascending needs to be sorted by query engine
name|query
operator|=
literal|"measure //*[jcr:contains(., 'foo' )] order by @jcr:score"
expr_stmt|;
name|assertThat
argument_list|(
name|measureWithLimit
argument_list|(
name|query
argument_list|,
name|XPATH
argument_list|,
literal|1
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"scanCount: 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2434
specifier|private
name|void
name|fulltextBooleanComplexOrQueries
parameter_list|(
name|boolean
name|ver2
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ver2
condition|)
block|{
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"fox is jumping"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"summer is here"
argument_list|)
expr_stmt|;
name|Tree
name|b
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"fox is sleeping"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"winter is here"
argument_list|)
expr_stmt|;
name|Tree
name|c
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"fox is jumping"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"autumn is here"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox') and CONTAINS([propb], '\"winter is here\" OR \"summer "
operator|+
literal|"is here\"')"
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|,
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2434
annotation|@
name|Test
specifier|public
name|void
name|luceneBooleanComplexOrQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|fulltextBooleanComplexOrQueries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2434
annotation|@
name|Test
specifier|public
name|void
name|lucenPropertyBooleanComplexOrQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|fulltextBooleanComplexOrQueries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// OAK-2438
annotation|@
name|Test
comment|// Copied and modified slightly from org.apache.jackrabbit.core.query.FulltextQueryTest#testFulltextExcludeSQL
specifier|public
name|void
name|luceneAndExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|indexDefn
init|=
name|createTestIndexNode
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
decl_stmt|;
name|Tree
name|r
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Tree
name|n
init|=
name|r
operator|.
name|addChild
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"test text"
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"mytext"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
expr_stmt|;
name|n
operator|=
name|r
operator|.
name|addChild
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"other text"
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"mytext"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog."
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|sql
init|=
literal|"SELECT * FROM [nt:base] WHERE [jcr:path] LIKE \'"
operator|+
name|r
operator|.
name|getPath
argument_list|()
operator|+
literal|"/%\'"
operator|+
literal|" AND CONTAINS(*, \'text \'\'fox jumps\'\' -other\')"
decl_stmt|;
name|assertQuery
argument_list|(
name|sql
argument_list|,
name|asList
argument_list|(
literal|"/test/node1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|measureWithLimit
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|lang
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|qe
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|,
name|lang
argument_list|,
name|limit
argument_list|,
literal|0
argument_list|,
name|Maps
operator|.
expr|<
name|String
argument_list|,
name|PropertyValue
operator|>
name|newHashMap
argument_list|()
argument_list|,
name|NO_MAPPINGS
argument_list|)
operator|.
name|getRows
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|measure
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|measure
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|measure
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexTimeFieldBoostAndRelativeProperty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Tree
name|indexDefn
init|=
name|createTestIndexNode
argument_list|(
name|index
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
decl_stmt|;
name|useV2
argument_list|(
name|indexDefn
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"jcr:content/metadata/title"
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"jcr:content/metadata/title2"
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|addPropertyDefn
argument_list|(
name|indexDefn
argument_list|,
literal|"propa"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo foo foo"
argument_list|)
expr_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|usc
argument_list|(
name|test
argument_list|,
literal|"c"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"metadata"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"title2"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"//element(*, oak:Unstructured)[jcr:contains(., 'foo' )]"
decl_stmt|;
comment|// verify results ordering
comment|// which should be /test/c (boost = 4.0), /test/a(boost = 2.0), /test/b (1.0)
name|assertOrderedQuery
argument_list|(
name|queryString
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|,
literal|"/test/c"
argument_list|,
literal|"/test/a"
argument_list|)
argument_list|,
name|XPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|customTikaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
literal|"fox is jumping"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"xml"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><msg>sky is blue</msg>"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox ')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'sky ')"
argument_list|,
name|asList
argument_list|(
literal|"/test/xml/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now disable extraction for application/xml and see that query
comment|//does not return any result for that
name|idx
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/test"
argument_list|)
expr_stmt|;
name|String
name|tikaConfig
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<properties>\n"
operator|+
literal|"<detectors>\n"
operator|+
literal|"<detector class=\"org.apache.tika.detect.DefaultDetector\"/>\n"
operator|+
literal|"</detectors>\n"
operator|+
literal|"<parsers>\n"
operator|+
literal|"<parser class=\"org.apache.tika.parser.DefaultParser\"/>\n"
operator|+
literal|"<parser class=\"org.apache.tika.parser.EmptyParser\">\n"
operator|+
literal|"<mime>application/xml</mime>\n"
operator|+
literal|"</parser>\n"
operator|+
literal|"</parsers>\n"
operator|+
literal|"</properties>"
decl_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA_CONFIG
argument_list|)
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
name|tikaConfig
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox ')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'sky ')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|excludedBlobContentNotAccessed
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|AccessStateProvidingBlob
name|testBlob
init|=
operator|new
name|AccessStateProvidingBlob
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><msg>sky is blue</msg>"
argument_list|)
decl_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"zip"
argument_list|,
name|testBlob
argument_list|,
literal|"application/zip"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testBlob
operator|.
name|readByteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|preExtractedTextProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessStateProvidingBlob
name|testBlob
init|=
operator|new
name|AccessStateProvidingBlob
argument_list|(
literal|"fox is jumping"
argument_list|,
literal|"id1"
argument_list|)
decl_stmt|;
name|MapBasedProvider
name|textProvider
init|=
operator|new
name|MapBasedProvider
argument_list|()
decl_stmt|;
name|textProvider
operator|.
name|write
argument_list|(
literal|"id1"
argument_list|,
literal|"lion"
argument_list|)
expr_stmt|;
name|editorProvider
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|setExtractedTextProvider
argument_list|(
name|textProvider
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//As its not a reindex case actual blob content would be accessed
name|assertTrue
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'fox ')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|textProvider
operator|.
name|accessCount
argument_list|)
expr_stmt|;
name|testBlob
operator|.
name|resetState
argument_list|()
expr_stmt|;
comment|//Lets trigger a reindex
name|root
operator|.
name|getTree
argument_list|(
name|idx
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//Now the content should be provided by the PreExtractedTextProvider
comment|//and instead of fox its lion!
name|assertFalse
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'lion ')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|textProvider
operator|.
name|accessCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|preExtractedTextCache
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessStateProvidingBlob
name|testBlob
init|=
operator|new
name|AccessStateProvidingBlob
argument_list|(
literal|"fox is jumping"
argument_list|,
literal|"id1"
argument_list|)
decl_stmt|;
comment|//1. Check by adding blobs in diff commit and reset
comment|//cache each time. In such case blob stream would be
comment|//accessed as many times
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|editorProvider
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|resetCache
argument_list|()
expr_stmt|;
name|test
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text2"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testBlob
operator|.
name|accessCount
argument_list|)
expr_stmt|;
comment|//Reset all test state
name|testBlob
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|editorProvider
operator|.
name|getExtractedTextCache
argument_list|()
operator|.
name|resetCache
argument_list|()
expr_stmt|;
comment|//2. Now add 2 nodes with same blob in same commit
comment|//This time cache effect would come and blob would
comment|//be accessed only once
name|test
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text3"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text4"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testBlob
operator|.
name|accessCount
argument_list|)
expr_stmt|;
comment|//Reset
name|testBlob
operator|.
name|resetState
argument_list|()
expr_stmt|;
comment|//3. Now just add another node with same blob with no cache
comment|//reset. This time blob stream would not be accessed at all
name|test
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text5"
argument_list|,
name|testBlob
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|testBlob
operator|.
name|isStreamAccessed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testBlob
operator|.
name|accessCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|maxFieldLengthCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"text"
argument_list|,
literal|"red brown fox was jumping"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/test"
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|MAX_FIELD_LENGTH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|maxExtractLengthCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
literal|"red brown fox was jumping"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'red')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/oak:index/test"
argument_list|)
expr_stmt|;
name|idx
operator|.
name|addChild
argument_list|(
name|TIKA
argument_list|)
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|TIKA_MAX_EXTRACT_LENGTH
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|IndexConstants
operator|.
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'red')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryNotIndexedWhenMimeTypeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
literal|"red brown fox was jumping"
argument_list|,
literal|"text/plain"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Remove the mimeType property. Then binary would not be indexed and result would be empty
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|removeProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryNotIndexedWhenNotSupportedMimeType
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createFulltextIndex
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|createFileNode
argument_list|(
name|test
argument_list|,
literal|"text"
argument_list|,
literal|"red brown fox was jumping"
argument_list|,
literal|"text/plain"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|asList
argument_list|(
literal|"/test/text/jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"select * from [nt:base] where CONTAINS(*, 'jumping')"
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|relativePropertyAndCursor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|propNode
init|=
name|idx
operator|.
name|addChild
argument_list|(
name|PROP_NODE
argument_list|)
decl_stmt|;
comment|// property definition for index test1
name|Tree
name|propA
init|=
name|propNode
operator|.
name|addChild
argument_list|(
literal|"propa"
argument_list|)
decl_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|,
name|PropertyType
operator|.
name|TYPENAME_STRING
argument_list|)
expr_stmt|;
name|propA
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// create test data with 1 more than batch size
comment|//with boost set we ensure that correct result comes *after* the batch size of results
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LucenePropertyIndex
operator|.
name|LUCENE_QUERY_BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"doNotInclude"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"jcr:content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"/jcr:root//element(*, nt:base)[jcr:contains(jcr:content, 'foo' )]"
decl_stmt|;
name|assertQuery
argument_list|(
name|queryString
argument_list|,
literal|"xpath"
argument_list|,
name|asList
argument_list|(
literal|"/test/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unionSortResultCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|,
literal|"propc"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"propc"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|nodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|seed
init|=
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"fooa"
argument_list|)
expr_stmt|;
name|seed
operator|+=
literal|2
expr_stmt|;
name|int
name|num
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
name|seed
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"foob"
argument_list|)
expr_stmt|;
name|seed
operator|+=
literal|2
expr_stmt|;
name|int
name|num
init|=
literal|100
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// scan count scans the whole result set
name|String
name|query
init|=
literal|"measure /jcr:root//element(*, nt:base)[(@propa = 'fooa' or @propb = 'foob')] order by @propc"
decl_stmt|;
name|assertThat
argument_list|(
name|measureWithLimit
argument_list|(
name|query
argument_list|,
name|XPATH
argument_list|,
literal|100
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"scanCount: 101"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unionSortQueries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index Definition
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|,
literal|"propc"
argument_list|,
literal|"propd"
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|ORDERED_PROP_NAMES
argument_list|,
name|of
argument_list|(
literal|"propd"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|useV2
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// create test data
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|seed
init|=
operator|-
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propa"
argument_list|,
literal|"a"
operator|+
name|i
argument_list|)
expr_stmt|;
name|seed
operator|+=
literal|3
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
name|seed
operator|=
operator|-
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propb"
argument_list|,
literal|"b"
operator|+
name|i
argument_list|)
expr_stmt|;
name|seed
operator|+=
literal|3
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
name|seed
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|a
init|=
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
decl_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propc"
argument_list|,
literal|"c"
operator|+
name|i
argument_list|)
expr_stmt|;
name|seed
operator|+=
literal|3
expr_stmt|;
name|a
operator|.
name|setProperty
argument_list|(
literal|"propd"
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//element(*, nt:base)[(@propa = 'a4' or @propb = 'b3')] order by @propd"
argument_list|,
name|XPATH
argument_list|,
name|asList
argument_list|(
literal|"/test/b3"
argument_list|,
literal|"/test/a4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"/jcr:root//element(*, nt:base)[(@propa = 'a3' or @propb = 'b0' or @propc = 'c2')] order by @propd"
argument_list|,
name|XPATH
argument_list|,
name|asList
argument_list|(
literal|"/test/b0"
argument_list|,
literal|"/test/c2"
argument_list|,
literal|"/test/a3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexingBasedOnMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|idx
argument_list|,
literal|"mix:title"
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:title"
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createNodeWithMixinType
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|,
literal|"mix:title"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|createNodeWithMixinType
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|,
literal|"mix:title"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:title"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [mix:title] where [jcr:title] = 'a'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1(/oak:index/test1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexingBasedOnMixinWithInheritence
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|idx
init|=
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
name|of
argument_list|(
literal|"propa"
argument_list|,
literal|"propb"
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|idx
argument_list|,
literal|"mix:mimeType"
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
literal|"jcr:mimeType"
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"a"
argument_list|,
literal|"nt:resource"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|createNodeWithType
argument_list|(
name|test
argument_list|,
literal|"b"
argument_list|,
literal|"nt:resource"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"jcr:mimeType"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|propabQuery
init|=
literal|"select [jcr:path] from [mix:mimeType] where [jcr:mimeType] = 'a'"
decl_stmt|;
name|assertThat
argument_list|(
name|explain
argument_list|(
name|propabQuery
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"lucene:test1(/oak:index/test1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|propabQuery
argument_list|,
name|asList
argument_list|(
literal|"/test/a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Tree
name|createNodeWithMixinType
parameter_list|(
name|Tree
name|t
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|typeName
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|Tree
name|createFileNode
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
return|return
name|createFileNode
argument_list|(
name|tree
argument_list|,
name|name
argument_list|,
operator|new
name|ArrayBasedBlob
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|mimeType
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createFileNode
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|name
parameter_list|,
name|Blob
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|Tree
name|jcrContent
init|=
name|tree
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
operator|.
name|addChild
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|jcrContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_DATA
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|jcrContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
return|return
name|jcrContent
return|;
block|}
specifier|private
name|Tree
name|usc
parameter_list|(
name|Tree
name|parent
parameter_list|,
name|String
name|childName
parameter_list|)
block|{
name|Tree
name|child
init|=
name|parent
operator|.
name|addChild
argument_list|(
name|childName
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"oak:Unstructured"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|private
name|Tree
name|addPropertyDefn
parameter_list|(
name|Tree
name|indexDefn
parameter_list|,
name|String
name|propName
parameter_list|,
name|double
name|boost
parameter_list|)
block|{
name|Tree
name|props
init|=
name|TestUtil
operator|.
name|newRulePropTree
argument_list|(
name|indexDefn
argument_list|,
literal|"oak:Unstructured"
argument_list|)
decl_stmt|;
name|Tree
name|prop
init|=
name|props
operator|.
name|addChild
argument_list|(
name|TestUtil
operator|.
name|unique
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
argument_list|,
name|boost
argument_list|)
expr_stmt|;
return|return
name|prop
return|;
block|}
specifier|private
name|void
name|assertOrderedQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|assertOrderedQuery
argument_list|(
name|sql
argument_list|,
name|paths
argument_list|,
name|SQL2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertOrderedQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|String
name|language
parameter_list|,
name|boolean
name|skipSort
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeQuery
argument_list|(
name|sql
argument_list|,
name|language
argument_list|,
literal|true
argument_list|,
name|skipSort
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|//TODO Test for range with Date. Check for precision
specifier|private
name|String
name|explain
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
return|return
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"JCR-SQL2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|String
name|explainXpath
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|explain
init|=
literal|"explain "
operator|+
name|query
decl_stmt|;
name|Result
name|result
init|=
name|executeQuery
argument_list|(
name|explain
argument_list|,
literal|"xpath"
argument_list|,
name|NO_BINDINGS
argument_list|)
decl_stmt|;
name|ResultRow
name|row
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|row
operator|.
name|getValue
argument_list|(
literal|"plan"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|index
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|propNames
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|propNames
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|FULL_TEXT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|INCLUDE_PROPERTY_NAMES
argument_list|,
name|propNames
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|SAVE_DIR_LISTING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|index
operator|.
name|getChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|Tree
name|createFullTextIndex
parameter_list|(
name|Tree
name|index
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|def
init|=
name|index
operator|.
name|addChild
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|INDEX_DEFINITIONS_NODE_TYPE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|TYPE_PROPERTY_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|TYPE_LUCENE
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|REINDEX_PROPERTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|EVALUATE_PATH_RESTRICTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|COMPAT_MODE
argument_list|,
name|IndexFormatVersion
operator|.
name|V2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|props
init|=
name|def
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|INDEX_RULES
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|addChild
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"allProps"
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|,
name|LuceneIndexConstants
operator|.
name|REGEX_ALL_PROPS
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
specifier|private
specifier|static
name|String
name|dt
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CAST ('%s' AS DATE)"
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|createCal
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedPaths
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|OrderDirection
name|dir
parameter_list|)
block|{
if|if
condition|(
name|OrderDirection
operator|.
name|DESC
operator|==
name|dir
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
name|t
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSortedPaths
parameter_list|(
name|List
argument_list|<
name|Tuple2
argument_list|>
name|tuples
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple2
name|t
range|:
name|tuples
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|t
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|createLongs
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Double
argument_list|>
name|createDoubles
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|rnd
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createStrings
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"value%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Calendar
argument_list|>
name|createDates
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|ParseException
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|createCal
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%02d/%02d/2%03d"
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|1
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
class|class
name|Tuple
implements|implements
name|Comparable
argument_list|<
name|Tuple
argument_list|>
block|{
specifier|final
name|Comparable
name|value
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|Tuple
parameter_list|(
name|Comparable
name|value
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Tuple
name|o
parameter_list|)
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Tuple{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Tuple2
implements|implements
name|Comparable
argument_list|<
name|Tuple2
argument_list|>
block|{
specifier|final
name|Comparable
name|value
decl_stmt|;
specifier|final
name|Comparable
name|value2
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|Tuple2
parameter_list|(
name|Comparable
name|value
parameter_list|,
name|Comparable
name|value2
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|value2
operator|=
name|value2
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Tuple2
name|o
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|value
argument_list|,
name|o
operator|.
name|value
argument_list|)
operator|.
name|compare
argument_list|(
name|value2
argument_list|,
name|o
operator|.
name|value2
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Tuple2{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", value2="
operator|+
name|value2
operator|+
literal|", path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AccessStateProvidingBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|private
name|CountingInputStream
name|stream
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|int
name|accessCount
decl_stmt|;
specifier|public
name|AccessStateProvidingBlob
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AccessStateProvidingBlob
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AccessStateProvidingBlob
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|InputStream
name|getNewStream
parameter_list|()
block|{
name|accessCount
operator|++
expr_stmt|;
name|stream
operator|=
operator|new
name|CountingInputStream
argument_list|(
name|super
operator|.
name|getNewStream
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
specifier|public
name|boolean
name|isStreamAccessed
parameter_list|()
block|{
return|return
name|stream
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|resetState
parameter_list|()
block|{
name|stream
operator|=
literal|null
expr_stmt|;
name|accessCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|readByteCount
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|stream
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentIdentity
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapBasedProvider
implements|implements
name|PreExtractedTextProvider
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExtractedText
argument_list|>
name|idMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|accessCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ExtractedText
name|getText
parameter_list|(
name|String
name|propertyPath
parameter_list|,
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtractedText
name|result
init|=
name|idMap
operator|.
name|get
argument_list|(
name|blob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|accessCount
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|idMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|ExtractedText
argument_list|(
name|ExtractionResult
operator|.
name|SUCCESS
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|accessCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

