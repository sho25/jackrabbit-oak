begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeNodeStoreStatsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNodeCountsMaxSizeLimit
parameter_list|()
block|{
name|CompositeNodeStoreStats
name|stats
init|=
operator|new
name|CompositeNodeStoreStats
argument_list|(
name|StatisticsProvider
operator|.
name|NOOP
argument_list|,
literal|"NODE"
argument_list|,
literal|true
argument_list|,
literal|6
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
operator|+
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|stats
operator|.
name|getMaxNodePathCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
operator|+
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
operator|.
name|getMaxNodePathCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid count for /xyz"
operator|+
name|i
argument_list|,
operator|(
name|long
operator|)
name|i
operator|+
literal|4
argument_list|,
operator|(
name|long
operator|)
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"/xyz"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
operator|+
literal|6
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|getMaxNodePathCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
operator|+
literal|6
argument_list|)
expr_stmt|;
comment|// this should remove the smallest value
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
operator|+
literal|6
argument_list|)
expr_stmt|;
comment|// this should add the new value
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNodeCountsMaxValueLimit
parameter_list|()
block|{
name|CompositeNodeStoreStats
name|stats
init|=
operator|new
name|CompositeNodeStoreStats
argument_list|(
name|StatisticsProvider
operator|.
name|NOOP
argument_list|,
literal|"NODE"
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
block|{
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|stats
operator|.
name|getMaxNodePathCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19l
argument_list|,
operator|(
name|long
operator|)
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"/xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|onCreateNodeObject
argument_list|(
literal|"/xyz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|stats
operator|.
name|getMaxNodePathCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10l
argument_list|,
operator|(
name|long
operator|)
name|stats
operator|.
name|getNodePathCountsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"/xyz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

