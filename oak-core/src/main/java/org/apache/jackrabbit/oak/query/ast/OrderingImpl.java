begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
package|;
end_package

begin_comment
comment|/**  * An element of an "order by" list. This includes whether this element should  * be sorted in ascending or descending order.  */
end_comment

begin_class
specifier|public
class|class
name|OrderingImpl
extends|extends
name|AstElement
block|{
specifier|private
specifier|final
name|DynamicOperandImpl
name|operand
decl_stmt|;
specifier|private
specifier|final
name|Order
name|order
decl_stmt|;
specifier|public
name|OrderingImpl
parameter_list|(
name|DynamicOperandImpl
name|operand
parameter_list|,
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|operand
operator|=
name|operand
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|DynamicOperandImpl
name|getOperand
parameter_list|()
block|{
return|return
name|operand
return|;
block|}
specifier|public
name|String
name|getOrder
parameter_list|()
block|{
return|return
name|order
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
name|boolean
name|accept
parameter_list|(
name|AstVisitor
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|operand
operator|+
literal|" "
operator|+
name|order
operator|.
name|name
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDescending
parameter_list|()
block|{
return|return
name|order
operator|==
name|Order
operator|.
name|DESCENDING
return|;
block|}
block|}
end_class

end_unit

