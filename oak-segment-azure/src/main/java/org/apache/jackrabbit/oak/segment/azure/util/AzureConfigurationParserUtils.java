begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|azure
operator|.
name|util
operator|.
name|AzureConfigurationParserUtils
operator|.
name|AzureConnectionKey
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing Oak Segment Azure configuration (e.g. connection  * string, container name, uri, etc.) from custom encoded String or Azure  * standard URI.  */
end_comment

begin_class
specifier|public
class|class
name|AzureConfigurationParserUtils
block|{
specifier|public
enum|enum
name|AzureConnectionKey
block|{
name|DEFAULT_ENDPOINTS_PROTOCOL
argument_list|(
literal|"DefaultEndpointsProtocol"
argument_list|)
block|,
name|ACCOUNT_NAME
argument_list|(
literal|"AccountName"
argument_list|)
block|,
name|ACCOUNT_KEY
argument_list|(
literal|"AccountKey"
argument_list|)
block|,
name|BLOB_ENDPOINT
argument_list|(
literal|"BlobEndpoint"
argument_list|)
block|,
name|CONTAINER_NAME
argument_list|(
literal|"ContainerName"
argument_list|)
block|,
name|DIRECTORY
argument_list|(
literal|"Directory"
argument_list|)
block|;
specifier|private
name|String
name|text
decl_stmt|;
name|AzureConnectionKey
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|String
name|text
parameter_list|()
block|{
return|return
name|text
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CONNECTION_STRING
init|=
literal|"connectionString"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CONTAINER_NAME
init|=
literal|"containerName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ACCOUNT_NAME
init|=
literal|"accountName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_STORAGE_URI
init|=
literal|"storageUri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_DIR
init|=
literal|"directory"
decl_stmt|;
specifier|private
name|AzureConfigurationParserUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**      *      * @param conn      *            the connection string      * @return<code>true</code> if this is a custom encoded Azure connection      *         String,<code>false</code> otherwise      */
specifier|public
specifier|static
name|boolean
name|isCustomAzureConnectionString
parameter_list|(
name|String
name|conn
parameter_list|)
block|{
return|return
name|conn
operator|.
name|contains
argument_list|(
name|DEFAULT_ENDPOINTS_PROTOCOL
operator|.
name|text
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a custom encoded connection string of the form (line breaks added for      * clarity):      *<br><br>      *<b>DefaultEndpointsProtocol</b>=http;<b>AccountName</b>=devstoreaccount1;      *<b>AccountKey</b>=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;      *<b>BlobEndpoint</b>=http://127.0.0.1:10000/devstoreaccount1;<br>      *<b>ContainerName</b>=mycontainer;<br>      *<b>Directory</b>=mydir      *<br><br>      * where the first three lines in the string represent a standard Azure      * Connection String and the last two lines are Oak Segment Azure specific      * arguments. Please note that all configuration keys are semicolon separated, except for the last entry. The order      * of keys is not important.      *      * @param conn      *            the connection string      * @return parsed configuration map containing the Azure<b>connectionString</b>,      *<b>containerName</b> and<b>dir</b> (key names in bold)      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseAzureConfigurationFromCustomConnection
parameter_list|(
name|String
name|conn
parameter_list|)
block|{
name|Map
argument_list|<
name|AzureConnectionKey
argument_list|,
name|String
argument_list|>
name|tempConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|connKeys
init|=
name|conn
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|AzureConnectionKey
name|key
range|:
name|AzureConnectionKey
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|connKey
range|:
name|connKeys
control|)
block|{
if|if
condition|(
name|connKey
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|key
operator|.
name|text
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|tempConfig
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|connKey
operator|.
name|substring
argument_list|(
name|connKey
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|StringBuilder
name|connectionString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
name|DEFAULT_ENDPOINTS_PROTOCOL
operator|.
name|text
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|tempConfig
operator|.
name|get
argument_list|(
name|DEFAULT_ENDPOINTS_PROTOCOL
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
name|ACCOUNT_NAME
operator|.
name|text
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|tempConfig
operator|.
name|get
argument_list|(
name|ACCOUNT_NAME
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
name|ACCOUNT_KEY
operator|.
name|text
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|tempConfig
operator|.
name|get
argument_list|(
name|ACCOUNT_KEY
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|connectionString
operator|.
name|append
argument_list|(
name|BLOB_ENDPOINT
operator|.
name|text
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|tempConfig
operator|.
name|get
argument_list|(
name|BLOB_ENDPOINT
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_CONNECTION_STRING
argument_list|,
name|connectionString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_CONTAINER_NAME
argument_list|,
name|tempConfig
operator|.
name|get
argument_list|(
name|CONTAINER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_DIR
argument_list|,
name|tempConfig
operator|.
name|get
argument_list|(
name|DIRECTORY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
comment|/**      * Parses a standard Azure URI in the format      *<b>https</b>://<b>myaccount</b>.blob.core.windows.net/<b>container</b>/<b>repo</b>,      *      * @param uriStr      *            the Azure URI as string      * @return parsed configuration map containing<b>accountName</b>,<b>storageUri</b> and<b>dir</b>      * (key names in bold)      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseAzureConfigurationFromUri
parameter_list|(
name|String
name|uriStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uriStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|int
name|lastSlashPosPath
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|dotPosHost
init|=
name|host
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|accountName
init|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotPosHost
argument_list|)
decl_stmt|;
name|String
name|container
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSlashPosPath
argument_list|)
decl_stmt|;
name|String
name|storageUri
init|=
name|scheme
operator|+
literal|"://"
operator|+
name|host
operator|+
name|container
decl_stmt|;
name|String
name|dir
init|=
name|path
operator|.
name|substring
argument_list|(
name|lastSlashPosPath
operator|+
literal|1
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_ACCOUNT_NAME
argument_list|,
name|accountName
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_STORAGE_URI
argument_list|,
name|storageUri
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|KEY_DIR
argument_list|,
name|dir
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

