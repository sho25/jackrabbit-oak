begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionsTest
extends|extends
name|AbstractSecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromPermissionNameActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Permissions
operator|.
name|getNames
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
name|String
name|jcrActions
init|=
name|Text
operator|.
name|implode
argument_list|(
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|permissions
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromInvalidActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Session
operator|.
name|ACTION_READ
operator|+
literal|",invalid"
argument_list|,
literal|"invalid"
argument_list|,
literal|"invalid,"
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|invalid
range|:
name|l
control|)
block|{
try|try
block|{
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|invalid
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregates
parameter_list|()
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

