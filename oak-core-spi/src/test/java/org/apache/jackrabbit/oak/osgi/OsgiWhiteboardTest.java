begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiWhiteboardTest
block|{
comment|/**      * OAK-3409      */
annotation|@
name|Test
specifier|public
name|void
name|testDoubleUnregister
parameter_list|()
block|{
name|BundleContext
name|bundleContext
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|OsgiWhiteboard
name|w
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|bundleContext
argument_list|)
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicBoolean
name|unregistered
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|ServiceRegistration
name|sr
init|=
operator|new
name|ServiceRegistration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|unregistered
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Service already unregistered."
argument_list|)
throw|;
block|}
name|unregistered
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperties
parameter_list|(
name|Dictionary
name|properties
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|ServiceReference
name|getReference
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Runnable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|r
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|Registration
name|reg
init|=
name|w
operator|.
name|register
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|r
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|unregistered
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

