begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
package|;
end_package

begin_comment
comment|/**  * A revision.  */
end_comment

begin_class
specifier|public
class|class
name|Revision
block|{
specifier|static
name|long
name|timestampOffset
init|=
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2013-01-01 00:00:00.0"
argument_list|)
operator|.
name|getTime
argument_list|()
operator|/
literal|100
decl_stmt|;
specifier|static
specifier|volatile
name|long
name|lastTimestamp
decl_stmt|;
specifier|static
specifier|volatile
name|int
name|count
decl_stmt|;
comment|/**      * The timestamp in milliseconds since 2013 (unlike in seconds since 1970 as      * in MongoDB).      */
specifier|private
name|long
name|timestamp
decl_stmt|;
comment|/**      * An incrementing counter, for commits that occur within the same      * millisecond.      */
specifier|private
name|int
name|counter
decl_stmt|;
comment|/**      * The cluster id (the MongoDB machine id).      */
specifier|private
name|int
name|clusterId
decl_stmt|;
specifier|public
name|Revision
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|int
name|counter
parameter_list|,
name|int
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
block|}
comment|/**      * Compare the time part of two revisions.      *       * @return -1 if this revision occurred earlier, 1 if later, 0 if equal      */
name|int
name|compareRevisionTime
parameter_list|(
name|Revision
name|other
parameter_list|)
block|{
name|int
name|comp
init|=
name|timestamp
operator|<
name|other
operator|.
name|timestamp
condition|?
operator|-
literal|1
else|:
name|timestamp
operator|>
name|other
operator|.
name|timestamp
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
name|comp
operator|=
name|counter
operator|<
name|other
operator|.
name|counter
condition|?
operator|-
literal|1
else|:
name|counter
operator|>
name|other
operator|.
name|counter
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|comp
return|;
block|}
comment|/**      * Create a simple revision id. The format is similar to MongoDB ObjectId.      *       * @param clusterId the unique machineId + processId      * @return the unique revision id      */
specifier|static
name|Revision
name|newRevision
parameter_list|(
name|int
name|clusterId
parameter_list|)
block|{
name|long
name|timestamp
init|=
name|getCurrentTimestamp
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
synchronized|synchronized
init|(
name|Revision
operator|.
name|class
init|)
block|{
if|if
condition|(
name|timestamp
operator|>
name|lastTimestamp
condition|)
block|{
name|lastTimestamp
operator|=
name|timestamp
expr_stmt|;
name|c
operator|=
name|count
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timestamp
operator|<
name|lastTimestamp
condition|)
block|{
name|timestamp
operator|=
name|lastTimestamp
expr_stmt|;
name|c
operator|=
operator|++
name|count
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
operator|++
name|count
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|>=
literal|0xfff
condition|)
block|{
name|timestamp
operator|++
expr_stmt|;
name|c
operator|=
literal|0
expr_stmt|;
name|lastTimestamp
operator|=
name|Math
operator|.
name|max
argument_list|(
name|timestamp
argument_list|,
name|lastTimestamp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Revision
argument_list|(
name|timestamp
argument_list|,
name|c
argument_list|,
name|clusterId
argument_list|)
return|;
block|}
comment|/**      * Get the timestamp value of the current date and time.      *       * @return the timestamp      */
specifier|public
specifier|static
name|long
name|getCurrentTimestamp
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|100
operator|-
name|timestampOffset
return|;
block|}
comment|/**      * Get the difference between two timestamps (a - b) in milliseconds.      *       * @param a the first timestamp      * @param b the second timestamp      * @return the difference in milliseconds      */
specifier|public
specifier|static
name|long
name|getTimestampDifference
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|-
name|b
operator|)
operator|*
literal|100
return|;
block|}
specifier|public
specifier|static
name|Revision
name|fromString
parameter_list|(
name|String
name|rev
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rev
operator|.
name|startsWith
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|rev
argument_list|)
throw|;
block|}
name|int
name|idxCount
init|=
name|rev
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|rev
argument_list|)
throw|;
block|}
name|int
name|idxClusterId
init|=
name|rev
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|idxCount
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxClusterId
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|rev
argument_list|)
throw|;
block|}
name|String
name|t
init|=
name|rev
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|idxCount
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|t
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|t
operator|=
name|rev
operator|.
name|substring
argument_list|(
name|idxCount
operator|+
literal|1
argument_list|,
name|idxClusterId
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|t
operator|=
name|rev
operator|.
name|substring
argument_list|(
name|idxClusterId
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|clusterId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
operator|new
name|Revision
argument_list|(
name|timestamp
argument_list|,
name|c
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"r"
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|timestamp
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|counter
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|clusterId
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|timestamp
operator|>>>
literal|32
argument_list|)
operator|^
operator|(
name|int
operator|)
name|timestamp
operator|^
name|counter
operator|^
name|clusterId
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Revision
name|r
init|=
operator|(
name|Revision
operator|)
name|other
decl_stmt|;
return|return
name|r
operator|.
name|timestamp
operator|==
name|this
operator|.
name|timestamp
operator|&&
name|r
operator|.
name|counter
operator|==
name|this
operator|.
name|counter
operator|&&
name|r
operator|.
name|clusterId
operator|==
name|this
operator|.
name|clusterId
return|;
block|}
specifier|public
name|int
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
block|}
end_class

end_unit

