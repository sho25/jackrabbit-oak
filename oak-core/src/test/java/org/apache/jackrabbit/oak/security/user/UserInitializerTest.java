begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|AdminPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|util
operator|.
name|UserUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * UserInitializerTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|UserInitializerTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|UserManager
name|userMgr
decl_stmt|;
specifier|private
name|ConfigurationParameters
name|config
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|userMgr
operator|=
name|getUserManager
argument_list|()
expr_stmt|;
name|config
operator|=
name|getUserConfiguration
argument_list|()
operator|.
name|getConfigurationParameters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildInUserExist
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAdminId
argument_list|(
name|config
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAnonymousId
argument_list|(
name|config
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|a
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAdminId
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|User
name|admin
init|=
operator|(
name|User
operator|)
name|a
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|AdminPrincipal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|admin
operator|.
name|getID
argument_list|()
argument_list|,
name|admin
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|a
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAnonymousId
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|User
name|anonymous
init|=
operator|(
name|User
operator|)
name|a
decl_stmt|;
name|assertFalse
argument_list|(
name|anonymous
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|anonymous
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|AdminPrincipal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|anonymous
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|TreeBasedPrincipal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|anonymous
operator|.
name|getID
argument_list|()
argument_list|,
name|anonymous
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserContent
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|a
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAdminId
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|UserUtility
operator|.
name|getAnonymousId
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserIndexDefinitions
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|oakIndex
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|'/'
operator|+
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oakIndex
argument_list|)
expr_stmt|;
name|Tree
name|id
init|=
name|oakIndex
operator|.
name|getChild
argument_list|(
literal|"authorizableId"
argument_list|)
decl_stmt|;
name|assertIndexDefinition
argument_list|(
name|id
argument_list|,
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|princName
init|=
name|oakIndex
operator|.
name|getChild
argument_list|(
literal|"principalName"
argument_list|)
decl_stmt|;
name|assertIndexDefinition
argument_list|(
name|princName
argument_list|,
name|UserConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Tree
name|members
init|=
name|oakIndex
operator|.
name|getChild
argument_list|(
literal|"members"
argument_list|)
decl_stmt|;
name|assertIndexDefinition
argument_list|(
name|members
argument_list|,
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertIndexDefinition
parameter_list|(
name|Tree
name|tree
parameter_list|,
name|String
name|propName
parameter_list|,
name|boolean
name|isUnique
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|isUnique
argument_list|,
name|node
operator|.
name|getBoolean
argument_list|(
name|IndexConstants
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|propName
block|}
argument_list|,
name|node
operator|.
name|getNames
argument_list|(
name|IndexConstants
operator|.
name|PROPERTY_NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

