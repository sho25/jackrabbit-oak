begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|RepoPolicyTreePermissionTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|AccessControlConstants
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPO_POLICY_PATH
init|=
literal|'/'
operator|+
name|REP_REPO_POLICY
decl_stmt|;
specifier|private
name|AuthorizationConfiguration
name|config
decl_stmt|;
specifier|private
name|ContentSession
name|accessSession
decl_stmt|;
specifier|private
name|ContentSession
name|noAccessSession
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Principal
name|testPrincipal
init|=
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|config
operator|=
name|getSecurityProvider
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|accessSession
operator|=
name|createTestSession
argument_list|()
expr_stmt|;
name|Subject
name|notAllowedSubject
init|=
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|ImmutableSet
operator|.
expr|<
name|Principal
operator|>
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|noAccessSession
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|notAllowedSubject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|ContentSession
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
return|return
name|getContentRepository
argument_list|()
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|)
class|;
end_class

begin_function
unit|}      @
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|accessSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|noAccessSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|NotNull
specifier|private
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|NotNull
name|ContentSession
name|cs
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Root
name|r
init|=
name|cs
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|config
operator|.
name|getPermissionProvider
argument_list|(
name|r
argument_list|,
name|cs
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|tp
operator|=
name|pp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
return|return
name|tp
return|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testTreePermissionImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|RepoPolicyTreePermission
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testGetChildPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|tp
argument_list|,
name|tp
operator|.
name|getChildPermission
argument_list|(
literal|"childName"
argument_list|,
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanRead
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanRead2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAceNode
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|REPO_POLICY_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAceNode2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|REPO_POLICY_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_ACL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_ACL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadPropertyAceNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|REPO_POLICY_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyState
name|principalProp
init|=
name|aceTree
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|aceTree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|principalProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadPropertyAceNode2
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|aceTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|REPO_POLICY_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PropertyState
name|principalProp
init|=
name|aceTree
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|aceTree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|principalProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadProperties2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAll
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCanReadAll2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testIsGranted2
parameter_list|()
throws|throws
name|Exception
block|{
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|accessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|PropertyState
name|ps
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|getTreePermission
argument_list|(
name|noAccessSession
argument_list|,
name|REPO_POLICY_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

