begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|read
operator|.
name|ListAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|TemporarySystemProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|IndexDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|editor
operator|.
name|FulltextDocumentMaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidParameterException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContentHelper
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneDocumentMakerLargeStringPropertiesLogTest
block|{
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|listAppender
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeImplLogger
init|=
name|LuceneDocumentMaker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|warnMessage
init|=
literal|"String length: {} for property: {} at Node: {} is greater than configured value {}"
decl_stmt|;
specifier|private
name|String
name|customStringPropertyThresholdLimit
init|=
literal|"9"
decl_stmt|;
specifier|private
name|String
name|smallStringProperty
init|=
literal|"1234567"
decl_stmt|;
specifier|private
name|String
name|largeStringPropertyAsPerCustomThreshold
init|=
literal|"1234567890"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporarySystemProperty
name|temporarySystemProperty
init|=
operator|new
name|TemporarySystemProperty
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|loggingAppenderStart
parameter_list|()
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LoggerFactory
operator|.
name|getILoggerFactory
argument_list|()
decl_stmt|;
name|listAppender
operator|=
operator|new
name|ListAppender
argument_list|<>
argument_list|()
expr_stmt|;
name|listAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|.
name|getLogger
argument_list|(
name|nodeImplLogger
argument_list|)
operator|.
name|addAppender
argument_list|(
name|listAppender
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|loggingAppenderStop
parameter_list|()
block|{
name|listAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setThresholdLimit
parameter_list|(
name|String
name|threshold
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|FulltextDocumentMaker
operator|.
name|WARN_LOG_STRING_SIZE_THRESHOLD_KEY
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LuceneDocumentMaker
name|addPropertyAccordingToType
parameter_list|(
name|NodeBuilder
name|test
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
modifier|...
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
name|IndexDefinitionBuilder
name|builder
init|=
operator|new
name|IndexDefinitionBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|indexRule
argument_list|(
literal|"nt:base"
argument_list|)
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|propertyIndex
argument_list|()
operator|.
name|analyzed
argument_list|()
operator|.
name|valueExcludedPrefixes
argument_list|(
literal|"/jobs"
argument_list|)
expr_stmt|;
name|LuceneIndexDefinition
name|defn
init|=
name|LuceneIndexDefinition
operator|.
name|newBuilder
argument_list|(
name|root
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"/foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
operator|new
name|LuceneDocumentMaker
argument_list|(
name|defn
argument_list|,
name|defn
operator|.
name|getApplicableIndexingRule
argument_list|(
literal|"nt:base"
argument_list|)
argument_list|,
literal|"/x"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|STRINGS
operator|==
name|type
condition|)
block|{
name|test
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
name|str
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Type
operator|.
name|STRING
operator|==
name|type
operator|&&
name|str
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|test
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|str
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidParameterException
argument_list|()
throw|;
block|}
return|return
name|docMaker
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoLoggingOnAddingSmallStringWithCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|setThresholdLimit
argument_list|(
name|customStringPropertyThresholdLimit
argument_list|)
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoLoggingOnAddingSmallStringArrayWithCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|setThresholdLimit
argument_list|(
name|customStringPropertyThresholdLimit
argument_list|)
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
name|smallStringProperty
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoLoggingOnAddingSmallStringArrayWithoutCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
name|smallStringProperty
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoggingOnAddingLargeStringWithCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|setThresholdLimit
argument_list|(
name|customStringPropertyThresholdLimit
argument_list|)
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoggingOnAddingLargeStringWithoutCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
comment|//  setThresholdLimit(null);
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoggingOnAddingLargeStringArrayOneLargePropertyWithoutCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoggingOnAddingLargeStringArrayOneLargePropertyWithCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|setThresholdLimit
argument_list|(
name|customStringPropertyThresholdLimit
argument_list|)
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|,
name|smallStringProperty
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listAppender
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoggingOnAddingLargeStringArrayTwoLargePropertiesWithCustomThreshold
parameter_list|()
throws|throws
name|IOException
block|{
name|setThresholdLimit
argument_list|(
name|customStringPropertyThresholdLimit
argument_list|)
expr_stmt|;
name|NodeBuilder
name|test
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|LuceneDocumentMaker
name|docMaker
init|=
name|addPropertyAccordingToType
argument_list|(
name|test
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|,
name|largeStringPropertyAsPerCustomThreshold
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docMaker
operator|.
name|makeDocument
argument_list|(
name|test
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isWarnMessagePresent
argument_list|(
name|listAppender
argument_list|)
argument_list|)
expr_stmt|;
comment|// number of logs equal twice the number of large properties once for fulltext indexing
comment|// and once for property indexing.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|listAppender
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isWarnMessagePresent
parameter_list|(
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|listAppender
parameter_list|)
block|{
for|for
control|(
name|ILoggingEvent
name|loggingEvent
range|:
name|listAppender
operator|.
name|list
control|)
block|{
if|if
condition|(
name|loggingEvent
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|warnMessage
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

