begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Base class for user mgt related tests  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractUserTest
extends|extends
name|AbstractJCRTest
block|{
specifier|protected
name|String
name|testPw
init|=
literal|"pw"
decl_stmt|;
specifier|protected
name|UserManager
name|userMgr
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|protected
name|Group
name|group
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|userMgr
operator|=
name|getUserManager
argument_list|(
name|superuser
argument_list|)
expr_stmt|;
name|user
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|createUserId
argument_list|()
argument_list|,
name|testPw
argument_list|)
expr_stmt|;
name|group
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|UserManager
name|getUserManager
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
try|try
block|{
return|return
operator|(
operator|(
name|JackrabbitSession
operator|)
name|session
operator|)
operator|.
name|getUserManager
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|Subject
name|buildSubject
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|Subject
argument_list|(
literal|true
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|p
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Node
name|getNode
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|String
name|path
init|=
name|authorizable
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Cannot access node for authorizable "
operator|+
name|authorizable
operator|.
name|getID
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|createUserId
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
literal|"testUser_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
return|;
block|}
specifier|protected
name|String
name|createGroupId
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
literal|"testGroup_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
return|;
block|}
specifier|protected
name|Principal
name|getTestPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|pn
init|=
literal|"testPrincipal_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
return|return
name|getTestPrincipal
argument_list|(
name|pn
argument_list|)
return|;
block|}
specifier|protected
name|Principal
name|getTestPrincipal
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|User
name|getTestUser
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Authorizable
name|auth
init|=
name|getUserManager
argument_list|(
name|session
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|session
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
operator|&&
operator|!
name|auth
operator|.
name|isGroup
argument_list|()
condition|)
block|{
return|return
operator|(
name|User
operator|)
name|auth
return|;
block|}
comment|// should never happen. An Session should always have a corresponding User.
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Unable to retrieve a User."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

