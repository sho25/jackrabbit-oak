begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|OptionsBeanFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_class
class|class
name|ExportOptions
implements|implements
name|OptionsBean
block|{
specifier|public
specifier|static
specifier|final
name|OptionsBeanFactory
name|FACTORY
init|=
name|ExportOptions
operator|::
operator|new
decl_stmt|;
specifier|private
name|String
name|defaultFilter
init|=
literal|"{\"properties\":[\"*\", \"-:childOrder\"]}"
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|filterFileOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|File
argument_list|>
name|outDirOpt
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|filter
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|format
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|serializeBlobContent
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Boolean
argument_list|>
name|prettyPrint
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|depth
decl_stmt|;
specifier|private
specifier|final
name|OptionSpec
argument_list|<
name|Integer
argument_list|>
name|maxChildNodes
decl_stmt|;
specifier|private
name|OptionSet
name|options
decl_stmt|;
specifier|public
name|ExportOptions
parameter_list|(
name|OptionParser
name|parser
parameter_list|)
block|{
name|filterFileOpt
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"filter-file"
argument_list|,
literal|"Filter file which contains the filter json expression"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|outDirOpt
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"o"
argument_list|,
literal|"out"
argument_list|)
argument_list|,
literal|"Output directory where the exported json and blobs are stored"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"f"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"Filter expression as json to filter out which "
operator|+
literal|"nodes and properties are included in exported file"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|defaultFilter
argument_list|)
expr_stmt|;
name|path
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"p"
argument_list|,
literal|"path"
argument_list|)
argument_list|,
literal|"Repository path to export"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|format
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"format"
argument_list|,
literal|"Export format 'json' or 'txt'"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|"json"
argument_list|)
expr_stmt|;
name|serializeBlobContent
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"b"
argument_list|,
literal|"blobs"
argument_list|)
argument_list|,
literal|"Export blobs also. "
operator|+
literal|"By default blobs are not exported"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prettyPrint
operator|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"pretty"
argument_list|,
literal|"Pretty print the json output"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|depth
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"d"
argument_list|,
literal|"depth"
argument_list|)
argument_list|,
literal|"Max depth to include in output"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|maxChildNodes
operator|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"n"
argument_list|,
literal|"max-child-nodes"
argument_list|)
argument_list|,
literal|"Maximum number of child nodes "
operator|+
literal|"to include for a any parent"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|ofType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|defaultsTo
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|OptionSet
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|title
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"The export command supports exporting nodes from a repository in json. It also provide options "
operator|+
literal|"to export the blobs which are stored in FileDataStore format"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|order
parameter_list|()
block|{
return|return
literal|50
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|operationNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
comment|//~-------------------------------------------------------------
specifier|public
name|File
name|getFilterFile
parameter_list|()
block|{
return|return
name|filterFileOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|File
name|getOutDir
parameter_list|()
block|{
return|return
name|outDirOpt
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|NodeStateSerializer
operator|.
name|Format
name|getFormat
parameter_list|()
block|{
name|String
name|fmt
init|=
name|format
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
return|return
name|NodeStateSerializer
operator|.
name|Format
operator|.
name|valueOf
argument_list|(
name|fmt
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|includeBlobs
parameter_list|()
block|{
return|return
name|serializeBlobContent
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|depth
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMaxChildNodes
parameter_list|()
block|{
return|return
name|maxChildNodes
operator|.
name|value
argument_list|(
name|options
argument_list|)
return|;
block|}
block|}
end_class

end_unit

