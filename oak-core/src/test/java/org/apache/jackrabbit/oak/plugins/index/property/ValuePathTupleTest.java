begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * tests the utility class ValuePathTuple  */
end_comment

begin_class
specifier|public
class|class
name|ValuePathTupleTest
block|{
comment|/**      * testing for asserting the right comparison behaviour of the custom class      */
annotation|@
name|Test
specifier|public
name|void
name|valuePathTupleComparison
parameter_list|()
block|{
try|try
block|{
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should have raised a NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// so far so good
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path1"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value1"
argument_list|,
literal|"path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value000"
argument_list|,
literal|"/test/n1"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value001"
argument_list|,
literal|"/test/n0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value001"
argument_list|,
literal|"/test/n0"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"value000"
argument_list|,
literal|"/test/n1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|greaterThanPredicate
parameter_list|()
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|data
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"a"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"b"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"c"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"d"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"e"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"f"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|data
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|GreaterThanPredicate
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|greaterThanEqualaPredicate
parameter_list|()
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|data
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"a"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"b"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"c"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"d"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"e"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"f"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|data
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|GreaterThanPredicate
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lessThanPredicate
parameter_list|()
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|data
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"a"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"b"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"c"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"d"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"e"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"f"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|data
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|LessThanPredicate
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"f"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"e"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"d"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"c"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"b"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"a"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|filtered
operator|=
name|Iterables
operator|.
name|filter
argument_list|(
name|data
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|LessThanPredicate
argument_list|(
literal|"e"
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lessThanEqualPredicate
parameter_list|()
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|data
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
literal|"a"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"b"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"c"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"d"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"e"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|,
operator|new
name|ValuePathTuple
argument_list|(
literal|"f"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ValuePathTuple
argument_list|>
name|filtered
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|data
argument_list|,
operator|new
name|ValuePathTuple
operator|.
name|LessThanPredicate
argument_list|(
literal|"e"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|filtered
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filtered
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

