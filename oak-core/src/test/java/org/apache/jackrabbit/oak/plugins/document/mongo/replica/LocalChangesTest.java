begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LocalChangesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReplicaInactive
parameter_list|()
block|{
name|LocalChanges
name|l
init|=
operator|new
name|LocalChanges
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContainChildrenOf
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/123"
argument_list|,
name|revs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't remember the path, only the (2,2,2) revision
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/567"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we only remembered the timestamp, not the path
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// the new revision>= the remembered (2,2,2)
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/567"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMayContain
parameter_list|()
block|{
name|LocalChanges
name|l
init|=
operator|new
name|LocalChanges
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/123"
argument_list|,
name|revs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContainChildrenOf
argument_list|(
literal|"1:/xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContainChildrenOf
argument_list|(
literal|"1:/xyz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGotRootRevisions
parameter_list|()
block|{
name|LocalChanges
name|l
init|=
operator|new
name|LocalChanges
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/123"
argument_list|,
name|revs
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLimit
parameter_list|()
block|{
name|LocalChanges
name|l
init|=
operator|new
name|LocalChanges
argument_list|()
decl_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// make the class active
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|99
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/"
operator|+
name|i
argument_list|,
name|revs
argument_list|(
name|i
operator|+
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/100"
argument_list|,
name|revs
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// the list should be cleared right now
name|l
operator|.
name|add
argument_list|(
literal|"2:/abc/123"
argument_list|,
name|revs
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
comment|// this is added to the new list
name|l
operator|.
name|add
argument_list|(
literal|"2:/abc/456"
argument_list|,
name|revs
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// this shouldn't be added to the new list (as it's old)
comment|// now the list should be cleared and we should got true for all documents
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/999"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleton
argument_list|(
literal|"2:/abc/123"
argument_list|)
argument_list|,
name|l
operator|.
name|localChanges
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalidate
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/99"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/abc/456"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dontAddOldRevisions
parameter_list|()
block|{
name|LocalChanges
name|l
init|=
operator|new
name|LocalChanges
argument_list|()
decl_stmt|;
name|l
operator|.
name|gotRootRevisions
argument_list|(
name|revsV
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"2:/xyz/1"
argument_list|,
name|revs
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|mayContain
argument_list|(
literal|"2:/xyz/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
argument_list|<
name|Revision
argument_list|>
name|revs
parameter_list|(
name|int
modifier|...
name|timestamps
parameter_list|)
block|{
name|List
argument_list|<
name|Revision
argument_list|>
name|revs
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timestamps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|revs
operator|.
name|add
argument_list|(
operator|new
name|Revision
argument_list|(
name|timestamps
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|revs
return|;
block|}
specifier|private
name|RevisionVector
name|revsV
parameter_list|(
name|int
modifier|...
name|timestamps
parameter_list|)
block|{
return|return
operator|new
name|RevisionVector
argument_list|(
name|revs
argument_list|(
name|timestamps
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

