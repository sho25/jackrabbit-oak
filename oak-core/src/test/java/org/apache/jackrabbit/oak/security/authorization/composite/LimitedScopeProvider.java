begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|AggregatedPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Test implementation of the {@code AggregatedPermissionProvider} with following  * characteristics. It has a limited scope and supports  *  * - {@link Permissions#NAMESPACE_MANAGEMENT} and {@link Permissions#NODE_TYPE_DEFINITION_MANAGEMENT} on repository level  * - {@link Permissions#WRITE} at the tree defined by {@link AbstractCompositeProviderTest#TEST_A_PATH}  * - {@link Permissions#NO_PERMISSION} everywhere else.  *  * The permission setup defined by this provider is as follows:  *  * At the repository level  * - {@link Permissions#NAMESPACE_MANAGEMENT} is denied  * - {@link Permissions#NODE_TYPE_DEFINITION_MANAGEMENT} is allowed  *  * At {@link AbstractCompositeProviderTest#TEST_A_PATH}  * - {@link Permissions#ADD_NODE} and {@link Permissions#ADD_PROPERTY} is denied  * - all other aggregates of {@link Permissions#WRITE} are allowed.  * - any other permissions are ignored  *  * Consequently any path outside of the scope of this provider is not affected  * by the permission setup.  */
end_comment

begin_class
class|class
name|LimitedScopeProvider
implements|implements
name|AggregatedPermissionProvider
implements|,
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|GRANTED_PRIVS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DENIED_PRIVS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|REP_ADD_PROPERTIES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|GRANTED_PERMS
init|=
name|Permissions
operator|.
name|REMOVE_NODE
operator||
name|Permissions
operator|.
name|REMOVE_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_PROPERTY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DENIED_PERMS
init|=
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
name|LimitedScopeProvider
parameter_list|(
annotation|@
name|Nonnull
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
comment|//-------------------------------------------------< PermissionProvider>---
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
comment|//nop
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isSupported
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|pSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|privilegeNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pSet
operator|.
name|contains
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|pSet
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|pSet
operator|.
name|contains
argument_list|(
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isSupported
argument_list|(
name|tree
argument_list|)
condition|)
block|{
if|if
condition|(
name|pSet
operator|.
name|removeAll
argument_list|(
name|DENIED_PRIVS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|pSet
operator|.
name|removeAll
argument_list|(
name|GRANTED_PRIVS
argument_list|)
condition|)
block|{
return|return
name|pSet
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RepositoryPermission
name|getRepositoryPermission
parameter_list|()
block|{
return|return
operator|new
name|RepositoryPermission
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|repositoryPermissions
parameter_list|)
block|{
return|return
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
operator|==
name|repositoryPermissions
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nonnull
name|TreePermission
name|parentPermission
parameter_list|)
block|{
return|return
name|createTreePermission
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|tree
argument_list|)
condition|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|includes
argument_list|(
name|permissions
argument_list|,
name|DENIED_PERMS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|diff
argument_list|(
name|permissions
argument_list|,
name|GRANTED_PERMS
argument_list|)
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nonnull
name|String
name|jcrActions
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|oakPath
argument_list|)
condition|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|long
name|perms
init|=
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|TreeLocation
operator|.
name|create
argument_list|(
name|tree
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Permissions
operator|.
name|includes
argument_list|(
name|perms
argument_list|,
name|DENIED_PERMS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|diff
argument_list|(
name|perms
argument_list|,
name|GRANTED_PERMS
argument_list|)
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//---------------------------------------< AggregatedPermissionProvider>---
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|PrivilegeBits
name|supportedPrivileges
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
name|PrivilegeBits
name|supported
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
name|supported
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSupported
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|supported
operator|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|supported
operator|=
name|PrivilegeBits
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
name|privilegeBits
operator|!=
literal|null
operator|&&
operator|!
name|supported
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|privilegeBits
argument_list|)
operator|.
name|retain
argument_list|(
name|supported
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|supported
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|tree
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|property
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
name|permissions
operator|&
operator|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|isSupported
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
name|permissions
operator|&
name|Permissions
operator|.
name|WRITE
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|permissions
operator|&
name|Permissions
operator|.
name|WRITE
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|supportedPermissions
parameter_list|(
annotation|@
name|Nonnull
name|TreePermission
name|treePermission
parameter_list|,
annotation|@
name|Nullable
name|PropertyState
name|propertyState
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|treePermission
operator|instanceof
name|TestTreePermission
operator|&&
name|isSupported
argument_list|(
operator|(
operator|(
name|TestTreePermission
operator|)
name|treePermission
operator|)
operator|.
name|path
argument_list|)
condition|)
block|{
return|return
name|permissions
operator|&
name|Permissions
operator|.
name|WRITE
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
annotation|@
name|Nonnull
name|TreeLocation
name|location
parameter_list|,
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|includes
argument_list|(
name|permissions
argument_list|,
name|DENIED_PERMS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|diff
argument_list|(
name|permissions
argument_list|,
name|GRANTED_PERMS
argument_list|)
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
name|boolean
name|isSupported
parameter_list|(
annotation|@
name|Nonnull
name|Tree
name|tree
parameter_list|)
block|{
return|return
name|isSupported
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isSupported
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
return|return
name|Text
operator|.
name|isDescendantOrEqual
argument_list|(
name|AbstractCompositeProviderTest
operator|.
name|TEST_A_PATH
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TreePermission
name|createTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
operator|new
name|TestTreePermission
argument_list|(
name|path
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Text
operator|.
name|isDescendant
argument_list|(
name|path
argument_list|,
name|AbstractCompositeProviderTest
operator|.
name|TEST_A_PATH
argument_list|)
condition|)
block|{
return|return
operator|new
name|EmptyTestPermission
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TreePermission
operator|.
name|NO_RECOURSE
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|EmptyTestPermission
implements|implements
name|TreePermission
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|EmptyTestPermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|childName
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|childState
parameter_list|)
block|{
return|return
name|createTreePermission
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestTreePermission
implements|implements
name|TreePermission
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|TestTreePermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|TreePermission
name|getChildPermission
parameter_list|(
annotation|@
name|Nonnull
name|String
name|childName
parameter_list|,
annotation|@
name|Nonnull
name|NodeState
name|childState
parameter_list|)
block|{
return|return
name|createTreePermission
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRead
parameter_list|(
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadAll
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canReadProperties
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|includes
argument_list|(
name|permissions
argument_list|,
name|DENIED_PERMS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|diff
argument_list|(
name|permissions
argument_list|,
name|GRANTED_PERMS
argument_list|)
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGranted
parameter_list|(
name|long
name|permissions
parameter_list|,
annotation|@
name|Nonnull
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|Permissions
operator|.
name|includes
argument_list|(
name|permissions
argument_list|,
name|DENIED_PERMS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Permissions
operator|.
name|diff
argument_list|(
name|permissions
argument_list|,
name|GRANTED_PERMS
argument_list|)
operator|==
name|Permissions
operator|.
name|NO_PERMISSION
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

