begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
operator|.
name|AdvanceFulltextQueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ResultCountingIndexProvider
implements|implements
name|QueryIndexProvider
block|{
specifier|private
specifier|final
name|QueryIndexProvider
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|CountingCursorFactory
name|cursorFactory
decl_stmt|;
specifier|private
name|boolean
name|shouldCount
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ResultCountingIndexProvider
parameter_list|(
name|QueryIndexProvider
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|cursorFactory
operator|=
operator|new
name|CountingCursorFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|void
name|setShouldCount
parameter_list|(
name|boolean
name|shouldCount
parameter_list|)
block|{
name|this
operator|.
name|shouldCount
operator|=
name|shouldCount
expr_stmt|;
block|}
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|incrementCount
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
if|if
condition|(
name|shouldCount
condition|)
block|{
return|return
name|Lists
operator|.
name|transform
argument_list|(
name|delegate
operator|.
name|getQueryIndexes
argument_list|(
name|nodeState
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|QueryIndex
argument_list|,
name|QueryIndex
argument_list|>
argument_list|()
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|QueryIndex
name|apply
parameter_list|(
annotation|@
name|NotNull
name|QueryIndex
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|AdvanceFulltextQueryIndex
condition|)
block|{
return|return
operator|new
name|CountingIndex
argument_list|(
operator|(
name|AdvanceFulltextQueryIndex
operator|)
name|input
argument_list|,
name|cursorFactory
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|input
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|delegate
operator|.
name|getQueryIndexes
argument_list|(
name|nodeState
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CountingIndex
implements|implements
name|QueryIndex
implements|,
name|QueryIndex
operator|.
name|AdvancedQueryIndex
block|{
specifier|final
name|AdvanceFulltextQueryIndex
name|delegate
decl_stmt|;
specifier|final
name|CountingCursorFactory
name|cursorFactory
decl_stmt|;
name|CountingIndex
parameter_list|(
name|AdvanceFulltextQueryIndex
name|delegate
parameter_list|,
name|CountingCursorFactory
name|cursorFactory
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|cursorFactory
operator|=
name|cursorFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getMinimumCost
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getMinimumCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getCost
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getPlan
argument_list|(
name|filter
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getIndexName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IndexPlan
argument_list|>
name|getPlans
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getPlans
argument_list|(
name|filter
argument_list|,
name|sortOrder
argument_list|,
name|rootState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlanDescription
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getPlanDescription
argument_list|(
name|plan
argument_list|,
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
name|cursorFactory
operator|.
name|wrap
argument_list|(
name|delegate
operator|.
name|query
argument_list|(
name|plan
argument_list|,
name|rootState
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CountingCursorFactory
block|{
specifier|final
name|ResultCountingIndexProvider
name|provider
decl_stmt|;
name|CountingCursorFactory
parameter_list|(
name|ResultCountingIndexProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
name|Cursor
name|wrap
parameter_list|(
specifier|final
name|Cursor
name|c
parameter_list|)
block|{
return|return
operator|new
name|Cursor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexRow
name|next
parameter_list|()
block|{
name|provider
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
return|return
name|c
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|Result
operator|.
name|SizePrecision
name|precision
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
name|c
operator|.
name|getSize
argument_list|(
name|precision
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|c
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

