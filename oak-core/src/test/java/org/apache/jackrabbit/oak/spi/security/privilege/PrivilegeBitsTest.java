begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PrivilegeBitsTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NO_PRIVILEGE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PrivilegeBits
name|READ_NODES_PRIVILEGE_BITS
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_READ_NODES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|LONGS
init|=
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|13
block|,
literal|199
block|,
literal|512
block|,
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
specifier|private
specifier|static
name|long
name|getLongValue
parameter_list|(
name|PrivilegeBits
name|bits
parameter_list|)
block|{
name|String
name|s
init|=
name|bits
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|15
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|+
literal|1
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|PropertyState
name|createPropertyState
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"name"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|l
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertEquivalent
parameter_list|(
name|PrivilegeBits
name|a
parameter_list|,
name|PrivilegeBits
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|a
operator|.
name|toString
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongValue
parameter_list|()
block|{
comment|// empty
name|assertEquals
argument_list|(
name|NO_PRIVILEGE
argument_list|,
name|getLongValue
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// long based privilege bits
for|for
control|(
name|long
name|l
range|:
name|LONGS
control|)
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|createPropertyState
argument_list|(
name|l
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|getLongValue
argument_list|(
name|bits
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// long based privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|long
name|l
init|=
name|getLongValue
argument_list|(
name|pb
argument_list|)
decl_stmt|;
while|while
condition|(
name|l
operator|<
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
condition|)
block|{
name|l
operator|=
name|l
operator|<<
literal|1
expr_stmt|;
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|getLongValue
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// other privilege bits: long value not available.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getLongValue
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// modifiable privilege bits
name|pb
operator|=
name|READ_NODES_PRIVILEGE_BITS
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|modifiable
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getLongValue
argument_list|(
name|pb
argument_list|)
argument_list|,
name|getLongValue
argument_list|(
name|modifiable
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNextBits
parameter_list|()
block|{
comment|// empty
name|assertSame
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|nextBits
argument_list|()
argument_list|)
expr_stmt|;
comment|// long based privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|long
name|l
init|=
name|getLongValue
argument_list|(
name|pb
argument_list|)
decl_stmt|;
while|while
condition|(
name|l
operator|<
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
condition|)
block|{
name|l
operator|=
name|l
operator|<<
literal|1
expr_stmt|;
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|getLongValue
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// other privilege bits: long value not available.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nxt
argument_list|,
name|pb
operator|.
name|nextBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pb
operator|.
name|equals
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
comment|// modifiable privilege bits
name|pb
operator|=
name|READ_NODES_PRIVILEGE_BITS
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|modifiable
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
try|try
block|{
name|modifiable
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmodifiable
parameter_list|()
block|{
name|assertSame
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
comment|// other privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|nxt
argument_list|,
name|nxt
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nxt
argument_list|,
name|nxt
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|mod
argument_list|,
name|mod
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludes
parameter_list|()
block|{
comment|// empty
name|assertTrue
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|includes
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// other privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pb
operator|.
name|includes
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mod
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nxt
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nxt
operator|.
name|includes
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pb
operator|+
literal|" should not include "
operator|+
name|nxt
argument_list|,
name|pb
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nxt
operator|+
literal|" should not include "
operator|+
name|pb
argument_list|,
name|nxt
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mod
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nxt
operator|.
name|includes
argument_list|(
name|mod
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
comment|// empty
name|assertTrue
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// any other bits should not be empty
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|pb
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|=
name|pb
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mod
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|tmp
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|toString
argument_list|()
argument_list|,
name|tmp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
comment|// empty
try|try
block|{
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// other privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|pb
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|add
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
try|try
block|{
name|pb
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|long
name|before
init|=
name|getLongValue
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|long
name|nxtLong
init|=
name|getLongValue
argument_list|(
name|nxt
argument_list|)
decl_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLongValue
argument_list|(
name|nxt
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|before
operator||
name|nxtLong
argument_list|,
name|getLongValue
argument_list|(
name|mod
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mod
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|tmp
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|READ_NODES_PRIVILEGE_BITS
operator|.
name|equals
argument_list|(
name|pb
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
operator|&&
name|tmp
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|READ_NODES_PRIVILEGE_BITS
operator|.
name|equals
argument_list|(
name|pb
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiff
parameter_list|()
block|{
comment|// empty
try|try
block|{
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|diff
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// other privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
try|try
block|{
name|pb
operator|.
name|diff
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|diff
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|PrivilegeBits
name|before
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|mod
operator|.
name|diff
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|before
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|before
operator|.
name|equals
argument_list|(
name|mod
argument_list|)
argument_list|)
expr_stmt|;
name|mod
operator|.
name|diff
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|before
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
comment|// diff with same pb must leave original bits empty
name|PrivilegeBits
name|tmp
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// diff without intersection -> leave privilege unmodified.
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// diff with intersection -> privilege must be modified accordingly.
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|nxt
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|tmp2
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
name|tmp2
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|tmp3
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|tmp2
argument_list|)
decl_stmt|;
name|assertEquivalent
argument_list|(
name|tmp2
argument_list|,
name|tmp3
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|diff
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
if|if
condition|(
name|READ_NODES_PRIVILEGE_BITS
operator|.
name|equals
argument_list|(
name|pb
argument_list|)
condition|)
block|{
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquivalent
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
comment|// but pb passed to the diff call must not be modified.
name|assertEquivalent
argument_list|(
name|tmp3
argument_list|,
name|tmp2
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDifference
parameter_list|()
block|{
comment|// empty
try|try
block|{
name|PrivilegeBits
operator|.
name|EMPTY
operator|.
name|addDifference
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
comment|// other privilege bits
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
try|try
block|{
name|pb
operator|.
name|addDifference
argument_list|(
name|nxt
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|addDifference
argument_list|(
name|nxt
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|PrivilegeBits
name|tmp
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|addDifference
argument_list|(
name|nxt
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|mod
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|mod
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// since there is diff(nxt, read) which results in nxt
if|if
condition|(
operator|!
name|pb
operator|.
name|equals
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
condition|)
block|{
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|mod2
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|addDifference
argument_list|(
name|mod2
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nxt
operator|.
name|equals
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
comment|// tmp should be modified by addDifference call.
name|assertEquivalent
argument_list|(
name|mod2
argument_list|,
name|mod
argument_list|)
expr_stmt|;
comment|// mod2 should not be modified here
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|mod
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|mod2
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|mod
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|mod2
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|nxt
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// tmp not modified by addDifference call.
name|assertEquivalent
argument_list|(
name|mod2
argument_list|,
name|mod
argument_list|)
expr_stmt|;
comment|// mod2 should not be modified here
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|mod
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|nxt
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// tmp not modified by addDifference call.
name|assertFalse
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|mod
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// tmp not modified by addDifference call.
name|assertTrue
argument_list|(
name|tmp
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetainUnmodifiable
parameter_list|()
block|{
name|PrivilegeBits
name|unmodifiable
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
try|try
block|{
name|unmodifiable
operator|.
name|retain
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetainSimple
parameter_list|()
block|{
name|PrivilegeBits
name|pb
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|retain
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|retain
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pb
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pb
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|write
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|REP_WRITE
argument_list|)
decl_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|retain
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|retain
argument_list|(
name|write
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pb
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
operator|.
name|add
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|write
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pb
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|lock
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|lw
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|write
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
operator|.
name|add
argument_list|(
name|write
argument_list|)
operator|.
name|add
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|pb
operator|.
name|retain
argument_list|(
name|lw
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|lw
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pb
operator|.
name|includes
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetain
parameter_list|()
block|{
name|PrivilegeBits
name|pb
init|=
name|READ_NODES_PRIVILEGE_BITS
decl_stmt|;
name|List
argument_list|<
name|PrivilegeBits
argument_list|>
name|pbs
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeBits
argument_list|>
argument_list|()
decl_stmt|;
name|pbs
operator|.
name|add
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeBits
name|nxt
init|=
name|pb
operator|.
name|nextBits
argument_list|()
decl_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|,
name|pb
argument_list|)
decl_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|nxt
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|mod
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nxt
operator|.
name|toString
argument_list|()
argument_list|,
name|mod
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|mod
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nxt
operator|.
name|toString
argument_list|()
argument_list|,
name|mod
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|mod
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|nxt
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|mod
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|,
name|pb
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|mod
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|other
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|pbs
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|other
operator|.
name|add
argument_list|(
name|pbs
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|pbs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mod
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|mod
operator|.
name|retain
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|other
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|other
operator|.
name|retain
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|other
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|pbs
operator|.
name|add
argument_list|(
name|nxt
argument_list|)
expr_stmt|;
name|pb
operator|=
name|nxt
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstance
parameter_list|()
block|{
name|PrivilegeBits
name|pb
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|diff
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|diff
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|pb
operator|.
name|diff
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|pb
operator|=
name|PrivilegeBits
operator|.
name|EMPTY
expr_stmt|;
name|assertEquivalent
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|diff
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceFromBase
parameter_list|()
block|{
name|PrivilegeBits
name|pb
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
decl_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|pb2
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquivalent
argument_list|(
name|pb
argument_list|,
name|pb2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceFromPropertyState
parameter_list|()
block|{
for|for
control|(
name|long
name|l
range|:
name|LONGS
control|)
block|{
name|PropertyState
name|property
init|=
name|createPropertyState
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|pb
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|assertEquivalent
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pb
argument_list|,
name|pb
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquivalent
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
argument_list|,
name|pb
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|pb
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|pb
operator|.
name|add
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|addDifference
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|,
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|pb
operator|.
name|diff
argument_list|(
name|READ_NODES_PRIVILEGE_BITS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UnsupportedOperation expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstanceFromTree
parameter_list|()
block|{
name|Tree
name|privRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Tree
name|tmp
init|=
name|privRoot
operator|.
name|addChild
argument_list|(
literal|"tmpPrivilege"
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|tmpBits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|privRoot
operator|.
name|getProperty
argument_list|(
name|REP_NEXT
argument_list|)
argument_list|)
decl_stmt|;
name|tmpBits
operator|.
name|writeTo
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Tree
argument_list|,
name|PrivilegeBits
argument_list|>
name|treeToBits
init|=
operator|new
name|HashMap
argument_list|<
name|Tree
argument_list|,
name|PrivilegeBits
argument_list|>
argument_list|()
decl_stmt|;
name|treeToBits
operator|.
name|put
argument_list|(
name|privRoot
operator|.
name|getChild
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|treeToBits
operator|.
name|put
argument_list|(
name|tmp
argument_list|,
name|tmpBits
argument_list|)
expr_stmt|;
name|treeToBits
operator|.
name|put
argument_list|(
name|privRoot
argument_list|,
name|tmpBits
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|tree
range|:
name|treeToBits
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|treeToBits
operator|.
name|get
argument_list|(
name|tree
argument_list|)
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCalculatePermissions
parameter_list|()
block|{
name|PrivilegeBitsProvider
name|provider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PrivilegeBits
argument_list|,
name|Long
argument_list|>
name|simple
init|=
operator|new
name|HashMap
argument_list|<
name|PrivilegeBits
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|,
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_READ_NODES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_READ_PROPERTIES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_USER_MANAGEMENT
argument_list|)
argument_list|,
name|Permissions
operator|.
name|USER_MANAGEMENT
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_PROPERTIES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_ADD_PROPERTIES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_ALTER_PROPERTIES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_REMOVE_PROPERTIES
argument_list|)
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
expr_stmt|;
name|simple
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getBits
argument_list|(
name|REP_INDEX_DEFINITION_MANAGEMENT
argument_list|)
argument_list|,
name|Permissions
operator|.
name|INDEX_DEFINITION_MANAGEMENT
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeBits
name|pb
range|:
name|simple
operator|.
name|keySet
argument_list|()
control|)
block|{
name|long
name|expected
init|=
name|simple
operator|.
name|get
argument_list|(
name|pb
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|pb
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|pb
argument_list|,
name|pb
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// jcr:modifyProperty aggregate
name|PrivilegeBits
name|add_change
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|REP_ADD_PROPERTIES
argument_list|,
name|REP_ALTER_PROPERTIES
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
operator|(
name|Permissions
operator|.
name|ADD_PROPERTY
operator||
name|Permissions
operator|.
name|MODIFY_PROPERTY
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|add_change
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|add_change
argument_list|,
name|add_change
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|add_rm
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|REP_ADD_PROPERTIES
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|)
decl_stmt|;
name|permissions
operator|=
operator|(
name|Permissions
operator|.
name|ADD_PROPERTY
operator||
name|Permissions
operator|.
name|REMOVE_PROPERTY
operator|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|add_rm
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|add_rm
argument_list|,
name|add_rm
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|ch_rm
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|REP_ALTER_PROPERTIES
argument_list|,
name|REP_REMOVE_PROPERTIES
argument_list|)
decl_stmt|;
name|permissions
operator|=
operator|(
name|Permissions
operator|.
name|MODIFY_PROPERTY
operator||
name|Permissions
operator|.
name|REMOVE_PROPERTY
operator|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|ch_rm
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|ch_rm
argument_list|,
name|add_rm
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// jcr:add aggregate
name|PrivilegeBits
name|all
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_ALL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|ALL
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|all
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Permissions
operator|.
name|ALL
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|all
argument_list|,
name|all
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// parent aware permissions
comment|// a) jcr:addChildNodes
name|PrivilegeBits
name|addChild
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|addChild
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|addChild
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// b) jcr:removeChildNodes and jcr:removeNode
name|PrivilegeBits
name|removeChild
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|removeChild
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|removeChild
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|removeNode
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|removeNode
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|removeNode
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|remove
init|=
name|provider
operator|.
name|getBits
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|remove
argument_list|,
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|remove
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
operator|==
name|PrivilegeBits
operator|.
name|calculatePermissions
argument_list|(
name|remove
argument_list|,
name|remove
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

