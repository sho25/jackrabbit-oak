begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * A tree allows to query a value for a given key, similar to  * {@code java.util.SortedMap}.  */
end_comment

begin_class
specifier|public
class|class
name|BTree
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_SIZE
init|=
literal|2
decl_stmt|;
specifier|private
name|Indexer
name|indexer
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|unique
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|minSize
init|=
name|DEFAULT_MIN_SIZE
decl_stmt|;
specifier|public
name|BTree
parameter_list|(
name|Indexer
name|indexer
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|unique
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|unique
operator|=
name|unique
expr_stmt|;
if|if
condition|(
operator|!
name|indexer
operator|.
name|nodeExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|commit
argument_list|(
name|jsop
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMinSize
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|minSize
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minSize: "
operator|+
name|minSize
argument_list|)
throw|;
block|}
name|this
operator|.
name|minSize
operator|=
name|minSize
expr_stmt|;
block|}
comment|/**      * Find the given key or key/value pair in the page.      *      * @param key the key (required)      * @param value the value (optional)      * @param keys the key list      * @param values the value list      * @return the position      */
name|int
name|find
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
index|[]
name|keys
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
block|{
comment|// modified binary search:
comment|// return the first elements for non-unique
comment|// indexes, if multiple elements were found
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|keys
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|min
operator|<=
name|max
condition|)
block|{
name|int
name|test
init|=
operator|(
name|min
operator|+
name|max
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|compare
init|=
name|key
operator|==
literal|null
condition|?
literal|1
else|:
name|keys
index|[
name|test
index|]
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|unique
condition|)
block|{
return|return
name|test
return|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|compare
operator|=
name|values
index|[
name|test
index|]
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// consider equality as bigger, so
comment|// that the first element is found
name|compare
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|compare
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|test
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compare
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|test
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|test
return|;
block|}
block|}
comment|// not found: return negative insertion point
return|return
operator|-
operator|(
name|min
operator|+
literal|1
operator|)
return|;
block|}
name|BTreePage
name|getPageIfCached
parameter_list|(
name|BTreeNode
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|indexer
operator|.
name|getPageIfCached
argument_list|(
name|this
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
name|BTreePage
name|getPage
parameter_list|(
name|BTreeNode
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|indexer
operator|.
name|getPage
argument_list|(
name|this
argument_list|,
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|Cursor
name|findFirst
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Cursor
name|c
init|=
operator|new
name|Cursor
argument_list|()
decl_stmt|;
name|BTreePage
name|node
init|=
name|getPage
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|pos
init|=
name|node
operator|.
name|find
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|BTreeLeaf
condition|)
block|{
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
name|c
operator|.
name|setCurrent
argument_list|(
operator|(
name|BTreeLeaf
operator|)
name|node
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|pos
operator|>=
name|node
operator|.
name|size
argument_list|()
condition|)
block|{
name|c
operator|.
name|step
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|node
operator|=
operator|(
operator|(
name|BTreeNode
operator|)
name|node
operator|)
operator|.
name|getChild
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
name|void
name|bufferSetArray
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
index|[]
name|data
parameter_list|)
block|{
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'^'
argument_list|)
operator|.
name|key
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|jsop
operator|.
name|value
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsop
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|d
range|:
name|data
control|)
block|{
name|jsop
operator|.
name|value
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|jsop
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|jsop
operator|.
name|newline
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|buffer
argument_list|(
name|jsop
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|bufferMove
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'>'
argument_list|)
operator|.
name|key
argument_list|(
name|path
argument_list|)
operator|.
name|value
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|newline
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|buffer
argument_list|(
name|jsop
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|bufferDelete
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|JsopBuilder
name|jsop
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|jsop
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|name
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|jsop
operator|.
name|newline
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|buffer
argument_list|(
name|jsop
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|buffer
parameter_list|(
name|String
name|jsop
parameter_list|)
block|{
name|indexer
operator|.
name|buffer
argument_list|(
name|jsop
argument_list|)
expr_stmt|;
block|}
name|void
name|modified
parameter_list|(
name|BTreePage
name|page
parameter_list|)
block|{
name|indexer
operator|.
name|modified
argument_list|(
name|this
argument_list|,
name|page
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|moveCache
parameter_list|(
name|String
name|oldPath
parameter_list|)
block|{
name|indexer
operator|.
name|moveCache
argument_list|(
name|this
argument_list|,
name|oldPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|BTreeNode
name|parent
init|=
literal|null
decl_stmt|;
name|int
name|parentPos
init|=
literal|0
decl_stmt|;
name|BTreePage
name|n
init|=
name|getPage
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|BTreeNode
condition|)
block|{
name|BTreeNode
name|page
init|=
operator|(
name|BTreeNode
operator|)
name|n
decl_stmt|;
name|int
name|pos
init|=
name|page
operator|.
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|parent
operator|=
name|page
expr_stmt|;
name|parentPos
operator|=
name|pos
expr_stmt|;
name|n
operator|=
name|page
operator|.
name|getChild
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BTreeLeaf
name|page
init|=
operator|(
name|BTreeLeaf
operator|)
name|n
decl_stmt|;
name|int
name|pos
init|=
name|page
operator|.
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|page
operator|.
name|delete
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|bufferDelete
argument_list|(
name|page
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|modified
argument_list|(
name|this
argument_list|,
name|page
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// empty leaf with a parent
name|parent
operator|.
name|delete
argument_list|(
name|parentPos
argument_list|)
expr_stmt|;
name|parent
operator|.
name|writeData
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// empty node becomes a empty leaf
name|BTreeLeaf
name|p
init|=
operator|new
name|BTreeLeaf
argument_list|(
name|this
argument_list|,
name|parent
operator|.
name|parent
argument_list|,
name|parent
operator|.
name|name
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|modified
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|page
operator|.
name|writeData
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|BTreeNode
name|parent
init|=
literal|null
decl_stmt|;
name|int
name|parentPos
init|=
literal|0
decl_stmt|;
name|BTreePage
name|n
init|=
name|getPage
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|n
operator|.
name|size
argument_list|()
operator|>=
name|getMaxSize
argument_list|()
condition|)
block|{
comment|// split
name|int
name|split
init|=
name|getMinSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// new root
name|BTreeNode
name|root
init|=
operator|new
name|BTreeNode
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
name|n
operator|.
name|keys
index|[
name|split
index|]
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|n
operator|.
name|values
index|[
name|split
index|]
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|}
argument_list|)
decl_stmt|;
name|modified
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|n
operator|.
name|split
argument_list|(
name|root
argument_list|,
literal|"0"
argument_list|,
name|split
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|n
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|String
name|k
init|=
name|n
operator|.
name|keys
index|[
name|split
index|]
decl_stmt|;
name|String
name|v
init|=
name|n
operator|.
name|values
index|[
name|split
index|]
decl_stmt|;
name|String
name|path
init|=
name|parent
operator|.
name|getNextChildPath
argument_list|()
decl_stmt|;
name|n
operator|.
name|split
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|split
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|parent
operator|.
name|insert
argument_list|(
name|parentPos
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|PathUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|writeData
argument_list|()
expr_stmt|;
comment|// go back one step (the entry might be in the
comment|// other node now)
name|n
operator|=
name|parent
expr_stmt|;
block|}
block|}
if|if
condition|(
name|n
operator|instanceof
name|BTreeNode
condition|)
block|{
name|BTreeNode
name|page
init|=
operator|(
name|BTreeNode
operator|)
name|n
decl_stmt|;
name|int
name|pos
init|=
name|page
operator|.
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|parent
operator|=
name|page
expr_stmt|;
name|parentPos
operator|=
name|pos
expr_stmt|;
name|n
operator|=
name|page
operator|.
name|getChild
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BTreeLeaf
name|page
init|=
operator|(
name|BTreeLeaf
operator|)
name|n
decl_stmt|;
name|int
name|pos
init|=
name|page
operator|.
name|find
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|unique
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unique key violation"
argument_list|)
throw|;
block|}
block|}
name|page
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|page
operator|.
name|writeData
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|private
name|int
name|getMinSize
parameter_list|()
block|{
return|return
name|minSize
return|;
block|}
specifier|private
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|minSize
operator|+
name|minSize
operator|+
literal|1
return|;
block|}
name|boolean
name|isUnique
parameter_list|()
block|{
return|return
name|unique
return|;
block|}
block|}
end_class

end_unit

