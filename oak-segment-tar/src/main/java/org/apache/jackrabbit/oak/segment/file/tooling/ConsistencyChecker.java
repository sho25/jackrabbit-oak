begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tooling
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|text
operator|.
name|DateFormat
operator|.
name|getDateTimeInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|denotesRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
operator|.
name|getNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|InvalidFileStoreVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|JournalReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|ReadOnlyFileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|IOMonitorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Utility for checking the files of a  * {@link FileStore} for inconsistency and  * reporting that latest consistent revision.  */
end_comment

begin_class
specifier|public
class|class
name|ConsistencyChecker
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CHECKPOINT_INDENT
init|=
literal|"  "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_INDENT
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
class|class
name|StatisticsIOMonitor
extends|extends
name|IOMonitorAdapter
block|{
specifier|private
specifier|final
name|AtomicLong
name|ioOperations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|readBytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|readTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|afterSegmentRead
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
name|ioOperations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|readBytes
operator|.
name|addAndGet
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|readTime
operator|.
name|addAndGet
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|StatisticsIOMonitor
name|statisticsIOMonitor
init|=
operator|new
name|StatisticsIOMonitor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyFileStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|long
name|debugInterval
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|outWriter
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|errWriter
decl_stmt|;
specifier|private
name|int
name|nodeCount
decl_stmt|;
specifier|private
name|int
name|propertyCount
decl_stmt|;
specifier|private
name|int
name|checkCount
decl_stmt|;
comment|/**      * Run a full traversal consistency check.      *      * @param directory  directory containing the tar files      * @param journalFileName  name of the journal file containing the revision history      * @param debugInterval    number of seconds between printing progress information to      *                         the console during the full traversal phase.      * @param checkBinaries    if {@code true} full content of binary properties will be scanned      * @param checkHead        if {@code true} will check the head      * @param checkpoints      collection of checkpoints to be checked       * @param filterPaths      collection of repository paths to be checked                               * @param ioStatistics     if {@code true} prints I/O statistics gathered while consistency       *                         check was performed      * @param outWriter        text output stream writer      * @param errWriter        text error stream writer                              * @throws IOException      * @throws InvalidFileStoreVersionException      */
specifier|public
specifier|static
name|void
name|checkConsistency
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|journalFileName
parameter_list|,
name|long
name|debugInterval
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|,
name|boolean
name|checkHead
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|filterPaths
parameter_list|,
name|boolean
name|ioStatistics
parameter_list|,
name|PrintWriter
name|outWriter
parameter_list|,
name|PrintWriter
name|errWriter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
try|try
init|(
name|JournalReader
name|journal
init|=
operator|new
name|JournalReader
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|journalFileName
argument_list|)
argument_list|)
init|;
name|ConsistencyChecker
name|checker
operator|=
operator|new
name|ConsistencyChecker
argument_list|(
name|directory
argument_list|,
name|debugInterval
argument_list|,
name|ioStatistics
argument_list|,
name|outWriter
argument_list|,
name|errWriter
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|checkpointsSet
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|headPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PathToCheck
argument_list|>
argument_list|>
name|checkpointPaths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|revisionCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|checkpoints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkpointsSet
operator|.
name|addAll
argument_list|(
name|checkpoints
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkpointsSet
operator|.
name|remove
argument_list|(
literal|"/checkpoints"
argument_list|)
condition|)
block|{
name|checkpointsSet
operator|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|checker
operator|.
name|store
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|checkpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|filterPaths
control|)
block|{
if|if
condition|(
name|checkHead
condition|)
block|{
name|headPaths
operator|.
name|add
argument_list|(
operator|new
name|PathToCheck
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|checkCount
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|checkpoint
range|:
name|checkpointsSet
control|)
block|{
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|pathList
init|=
name|checkpointPaths
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathList
operator|==
literal|null
condition|)
block|{
name|pathList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|checkpointPaths
operator|.
name|put
argument_list|(
name|checkpoint
argument_list|,
name|pathList
argument_list|)
expr_stmt|;
block|}
name|pathList
operator|.
name|add
argument_list|(
operator|new
name|PathToCheck
argument_list|(
name|path
argument_list|,
name|checkpoint
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|checkCount
operator|++
expr_stmt|;
block|}
block|}
name|int
name|initialCount
init|=
name|checker
operator|.
name|checkCount
decl_stmt|;
name|JournalEntry
name|lastValidJournalEntry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|journal
operator|.
name|hasNext
argument_list|()
operator|&&
name|checker
operator|.
name|checkCount
operator|>
literal|0
condition|)
block|{
name|JournalEntry
name|journalEntry
init|=
name|journal
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|revision
init|=
name|journalEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
try|try
block|{
name|revisionCount
operator|++
expr_stmt|;
name|checker
operator|.
name|store
operator|.
name|setRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|boolean
name|overallValid
init|=
literal|true
decl_stmt|;
name|SegmentNodeStore
name|sns
init|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|checker
operator|.
name|store
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checker
operator|.
name|print
argument_list|(
literal|"\nChecking revision {0}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkHead
condition|)
block|{
name|boolean
name|mustCheck
init|=
name|headPaths
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|journalEntry
operator|==
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mustCheck
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"\nChecking head\n"
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|sns
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|overallValid
operator|=
name|overallValid
operator|&&
name|checker
operator|.
name|checkPathsAtRoot
argument_list|(
name|headPaths
argument_list|,
name|root
argument_list|,
name|journalEntry
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|checkpointsSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|checkpointsToCheck
init|=
name|checkpointPaths
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|journalEntry
operator|==
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|mustCheck
init|=
name|checkpointsToCheck
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|v
lambda|->
name|v
operator|==
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mustCheck
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"\nChecking checkpoints"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|checkpoint
range|:
name|checkpointsSet
control|)
block|{
if|if
condition|(
name|checkpointsToCheck
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"\nChecking checkpoint {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|pathList
init|=
name|checkpointPaths
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
name|NodeState
name|root
init|=
name|sns
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"Checkpoint {0} not found in this revision!"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|overallValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|overallValid
operator|=
name|overallValid
operator|&&
name|checker
operator|.
name|checkPathsAtRoot
argument_list|(
name|pathList
argument_list|,
name|root
argument_list|,
name|journalEntry
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|overallValid
condition|)
block|{
name|lastValidJournalEntry
operator|=
name|journalEntry
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|checker
operator|.
name|printError
argument_list|(
literal|"Skipping invalid record id {0}"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
name|checker
operator|.
name|print
argument_list|(
literal|"\nSearched through {0} revisions and {1} checkpoints"
argument_list|,
name|revisionCount
argument_list|,
name|checkpointsSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialCount
operator|==
name|checker
operator|.
name|checkCount
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"No good revision found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|checkHead
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"\nHead"
argument_list|)
expr_stmt|;
name|checker
operator|.
name|printResults
argument_list|(
name|headPaths
argument_list|,
name|NO_INDENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkpointsSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"\nCheckpoints"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|checkpoint
range|:
name|checkpointsSet
control|)
block|{
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|pathList
init|=
name|checkpointPaths
operator|.
name|get
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
name|checker
operator|.
name|print
argument_list|(
literal|"- {0}"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|checker
operator|.
name|printResults
argument_list|(
name|pathList
argument_list|,
name|CHECKPOINT_INDENT
argument_list|)
expr_stmt|;
block|}
block|}
name|checker
operator|.
name|print
argument_list|(
literal|"\nOverall"
argument_list|)
expr_stmt|;
name|checker
operator|.
name|printOverallResults
argument_list|(
name|lastValidJournalEntry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|checker
operator|.
name|print
argument_list|(
literal|"[I/O] Segment read: Number of operations: {0}"
argument_list|,
name|checker
operator|.
name|statisticsIOMonitor
operator|.
name|ioOperations
argument_list|)
expr_stmt|;
name|checker
operator|.
name|print
argument_list|(
literal|"[I/O] Segment read: Total size: {0} ({1} bytes)"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|checker
operator|.
name|statisticsIOMonitor
operator|.
name|readBytes
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|checker
operator|.
name|statisticsIOMonitor
operator|.
name|readBytes
argument_list|)
expr_stmt|;
name|checker
operator|.
name|print
argument_list|(
literal|"[I/O] Segment read: Total time: {0} ns"
argument_list|,
name|checker
operator|.
name|statisticsIOMonitor
operator|.
name|readTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|printResults
parameter_list|(
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|pathList
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
for|for
control|(
name|PathToCheck
name|ptc
range|:
name|pathList
control|)
block|{
name|String
name|revision
init|=
name|ptc
operator|.
name|journalEntry
operator|!=
literal|null
condition|?
name|ptc
operator|.
name|journalEntry
operator|.
name|getRevision
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|timestamp
init|=
name|ptc
operator|.
name|journalEntry
operator|!=
literal|null
condition|?
name|ptc
operator|.
name|journalEntry
operator|.
name|getTimestamp
argument_list|()
else|:
operator|-
literal|1L
decl_stmt|;
name|print
argument_list|(
literal|"{0}Latest good revision for path {1} is {2} from {3}"
argument_list|,
name|indent
argument_list|,
name|ptc
operator|.
name|path
argument_list|,
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|,
name|toString
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printOverallResults
parameter_list|(
name|JournalEntry
name|journalEntry
parameter_list|)
block|{
name|String
name|revision
init|=
name|journalEntry
operator|!=
literal|null
condition|?
name|journalEntry
operator|.
name|getRevision
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|timestamp
init|=
name|journalEntry
operator|!=
literal|null
condition|?
name|journalEntry
operator|.
name|getTimestamp
argument_list|()
else|:
operator|-
literal|1L
decl_stmt|;
name|print
argument_list|(
literal|"Latest good revision for paths and checkpoints checked is {0} from {1}"
argument_list|,
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|,
name|toString
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
return|return
name|revision
return|;
block|}
else|else
block|{
return|return
literal|"none"
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|!=
operator|-
literal|1L
condition|)
block|{
return|return
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|timestamp
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"unknown date"
return|;
block|}
block|}
comment|/**      * Create a new consistency checker instance      *      * @param directory        directory containing the tar files      * @param debugInterval    number of seconds between printing progress information to      *                         the console during the full traversal phase.      * @param ioStatistics     if {@code true} prints I/O statistics gathered while consistency       *                         check was performed      * @param outWriter        text output stream writer      * @param errWriter        text error stream writer                              * @throws IOException      */
specifier|public
name|ConsistencyChecker
parameter_list|(
name|File
name|directory
parameter_list|,
name|long
name|debugInterval
parameter_list|,
name|boolean
name|ioStatistics
parameter_list|,
name|PrintWriter
name|outWriter
parameter_list|,
name|PrintWriter
name|errWriter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidFileStoreVersionException
block|{
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioStatistics
condition|)
block|{
name|builder
operator|.
name|withIOMonitor
argument_list|(
name|statisticsIOMonitor
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|=
name|builder
operator|.
name|buildReadOnly
argument_list|()
expr_stmt|;
name|this
operator|.
name|debugInterval
operator|=
name|debugInterval
expr_stmt|;
name|this
operator|.
name|outWriter
operator|=
name|outWriter
expr_stmt|;
name|this
operator|.
name|errWriter
operator|=
name|errWriter
expr_stmt|;
block|}
comment|/**      * Checks for consistency a list of paths, relative to the same root.      *       * @param paths             paths to check      * @param root              root relative to which the paths are retrieved      * @param journalEntry      entry containing the current revision checked      * @param checkBinaries     if {@code true} full content of binary properties will be scanned      * @return                  {@code true}, if the whole list of paths is consistent      */
specifier|private
name|boolean
name|checkPathsAtRoot
parameter_list|(
name|List
argument_list|<
name|PathToCheck
argument_list|>
name|paths
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|JournalEntry
name|journalEntry
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|PathToCheck
name|ptc
range|:
name|paths
control|)
block|{
if|if
condition|(
name|ptc
operator|.
name|journalEntry
operator|==
literal|null
condition|)
block|{
name|String
name|corruptPath
init|=
name|checkPathAtRoot
argument_list|(
name|ptc
argument_list|,
name|root
argument_list|,
name|checkBinaries
argument_list|)
decl_stmt|;
if|if
condition|(
name|corruptPath
operator|==
literal|null
condition|)
block|{
name|print
argument_list|(
literal|"Path {0} is consistent"
argument_list|,
name|ptc
operator|.
name|path
argument_list|)
expr_stmt|;
name|ptc
operator|.
name|journalEntry
operator|=
name|journalEntry
expr_stmt|;
name|checkCount
operator|--
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
name|ptc
operator|.
name|corruptPaths
operator|.
name|add
argument_list|(
name|corruptPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Checks the consistency of the supplied {@code ptc} relative to the given {@code root}.       *       * @param ptc           path to check, provided there are no corrupt paths.      * @param root          root relative to which the path is retrieved      * @param checkBinaries if {@code true} full content of binary properties will be scanned      * @return              {@code null}, if the content tree rooted at path (possibly under a checkpoint)       *                      is consistent in this revision or the path of the first inconsistency otherwise.        */
specifier|private
name|String
name|checkPathAtRoot
parameter_list|(
name|PathToCheck
name|ptc
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|corruptPath
range|:
name|ptc
operator|.
name|corruptPaths
control|)
block|{
try|try
block|{
name|NodeWrapper
name|wrapper
init|=
name|NodeWrapper
operator|.
name|deriveTraversableNodeOnPath
argument_list|(
name|root
argument_list|,
name|corruptPath
argument_list|)
decl_stmt|;
name|result
operator|=
name|checkNode
argument_list|(
name|wrapper
operator|.
name|node
argument_list|,
name|wrapper
operator|.
name|path
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|debug
argument_list|(
literal|"Path {0} not found"
argument_list|,
name|corruptPath
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeCount
operator|=
literal|0
expr_stmt|;
name|propertyCount
operator|=
literal|0
expr_stmt|;
name|print
argument_list|(
literal|"Checking {0}"
argument_list|,
name|ptc
operator|.
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeWrapper
name|wrapper
init|=
name|NodeWrapper
operator|.
name|deriveTraversableNodeOnPath
argument_list|(
name|root
argument_list|,
name|ptc
operator|.
name|path
argument_list|)
decl_stmt|;
name|result
operator|=
name|checkNodeAndDescendants
argument_list|(
name|wrapper
operator|.
name|node
argument_list|,
name|wrapper
operator|.
name|path
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"Checked {0} nodes and {1} properties"
argument_list|,
name|nodeCount
argument_list|,
name|propertyCount
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Path {0} not found"
argument_list|,
name|ptc
operator|.
name|path
argument_list|)
expr_stmt|;
return|return
name|ptc
operator|.
name|path
return|;
block|}
block|}
comment|/**      * Checks the consistency of a node and its properties at the given path.      *       * @param node              node to be checked      * @param path              path of the node      * @param checkBinaries     if {@code true} full content of binary properties will be scanned      * @return                  {@code null}, if the node is consistent,       *                          or the path of the first inconsistency otherwise.      */
specifier|private
name|String
name|checkNode
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|)
block|{
try|try
block|{
name|debug
argument_list|(
literal|"Traversing {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|nodeCount
operator|++
expr_stmt|;
for|for
control|(
name|PropertyState
name|propertyState
range|:
name|node
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|propertyState
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BINARY
condition|)
block|{
name|checked
operator|=
name|traverse
argument_list|(
name|propertyState
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|)
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|BINARIES
condition|)
block|{
for|for
control|(
name|Blob
name|blob
range|:
name|propertyState
operator|.
name|getValue
argument_list|(
name|BINARIES
argument_list|)
control|)
block|{
name|checked
operator|=
name|checked
operator||
name|traverse
argument_list|(
name|blob
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|propertyState
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|propertyCount
operator|++
expr_stmt|;
name|checked
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|checked
condition|)
block|{
name|debug
argument_list|(
literal|"Checked {0}/{1}"
argument_list|,
name|path
argument_list|,
name|propertyState
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
block|}
comment|/**      * Recursively checks the consistency of a node and its descendants at the given path.      * @param node          node to be checked      * @param path          path of the node      * @param checkBinaries if {@code true} full content of binary properties will be scanned      * @return              {@code null}, if the node is consistent,       *                      or the path of the first inconsistency otherwise.      */
specifier|private
name|String
name|checkNodeAndDescendants
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|)
block|{
name|String
name|result
init|=
name|checkNode
argument_list|(
name|node
argument_list|,
name|path
argument_list|,
name|checkBinaries
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
try|try
block|{
for|for
control|(
name|ChildNodeEntry
name|cne
range|:
name|node
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|childName
init|=
name|cne
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|child
init|=
name|cne
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|result
operator|=
name|checkNodeAndDescendants
argument_list|(
name|child
argument_list|,
name|concat
argument_list|(
name|path
argument_list|,
name|childName
argument_list|)
argument_list|,
name|checkBinaries
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Error while traversing {0}: {1}"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
block|}
specifier|static
class|class
name|NodeWrapper
block|{
specifier|final
name|NodeState
name|node
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
name|NodeWrapper
parameter_list|(
name|NodeState
name|node
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|static
name|NodeWrapper
name|deriveTraversableNodeOnPath
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|parentPath
init|=
name|getParentPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|getName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|NodeState
name|parent
init|=
name|getNode
argument_list|(
name|root
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
operator|new
name|NodeWrapper
argument_list|(
name|parent
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|NodeWrapper
argument_list|(
name|parent
argument_list|,
name|parentPath
argument_list|)
return|;
block|}
block|}
block|}
specifier|static
class|class
name|PathToCheck
block|{
specifier|final
name|String
name|path
decl_stmt|;
specifier|final
name|String
name|checkpoint
decl_stmt|;
name|JournalEntry
name|journalEntry
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|corruptPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PathToCheck
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|checkpoint
operator|=
name|checkpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|checkpoint
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|checkpoint
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|PathToCheck
condition|)
block|{
name|PathToCheck
name|that
init|=
operator|(
name|PathToCheck
operator|)
name|object
decl_stmt|;
return|return
name|path
operator|.
name|equals
argument_list|(
name|that
operator|.
name|path
argument_list|)
operator|&&
name|checkpoint
operator|.
name|equals
argument_list|(
name|that
operator|.
name|checkpoint
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|boolean
name|traverse
parameter_list|(
name|Blob
name|blob
parameter_list|,
name|boolean
name|checkBinaries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkBinaries
operator|&&
operator|!
name|isExternal
argument_list|(
name|blob
argument_list|)
condition|)
block|{
name|InputStream
name|s
init|=
name|blob
operator|.
name|getNewStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|l
init|=
name|s
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
while|while
condition|(
name|l
operator|>=
literal|0
condition|)
block|{
name|l
operator|=
name|s
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|propertyCount
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isExternal
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|instanceof
name|SegmentBlob
condition|)
block|{
return|return
operator|(
operator|(
name|SegmentBlob
operator|)
name|b
operator|)
operator|.
name|isExternal
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|outWriter
operator|.
name|println
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
name|outWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
name|outWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|arg3
parameter_list|,
name|Object
name|arg4
parameter_list|)
block|{
name|outWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printError
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
name|errWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printError
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
name|errWriter
operator|.
name|println
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|ts
decl_stmt|;
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
if|if
condition|(
name|debug
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|format
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
if|if
condition|(
name|debug
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|format
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|debug
parameter_list|()
block|{
comment|// Avoid calling System.currentTimeMillis(), which is slow on some systems.
if|if
condition|(
name|debugInterval
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|debugInterval
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ts
operator|-
name|this
operator|.
name|ts
operator|)
operator|/
literal|1000
operator|>
name|debugInterval
condition|)
block|{
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

