begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_comment
comment|/**  * The version of an index (property "compatVersion").  *  * The default is version 2. Version 1 is supported for backward compatibility.  */
end_comment

begin_enum
specifier|public
enum|enum
name|IndexFormatVersion
block|{
comment|/**      * Index confirming to Oak version upto 1.0.8      */
name|V1
argument_list|(
literal|1
argument_list|)
block|,
comment|/**      * Index confirming to Oak version upto 1.0.9      */
name|V2
argument_list|(
literal|2
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
name|IndexFormatVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if this version is at least as high as the      * given<code>version</code>.      *      * @param version the other version to compare.      * @return<code>true</code> if this version is at least as high as the      *         provided;<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isAtLeast
parameter_list|(
name|IndexFormatVersion
name|version
parameter_list|)
block|{
return|return
name|this
operator|.
name|version
operator|>=
name|version
operator|.
name|getVersion
argument_list|()
return|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
specifier|static
name|IndexFormatVersion
name|getVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
case|case
literal|1
case|:
return|return
name|V1
return|;
case|case
literal|2
case|:
return|return
name|V2
return|;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown version : "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|IndexFormatVersion
name|getDefault
parameter_list|()
block|{
return|return
name|V2
return|;
block|}
specifier|public
specifier|static
name|IndexFormatVersion
name|max
parameter_list|(
name|IndexFormatVersion
name|o1
parameter_list|,
name|IndexFormatVersion
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|version
operator|>
name|o2
operator|.
name|version
condition|?
name|o1
else|:
name|o2
return|;
block|}
block|}
end_enum

end_unit

