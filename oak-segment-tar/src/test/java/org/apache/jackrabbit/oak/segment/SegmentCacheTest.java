begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentStore
operator|.
name|EMPTY_STORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|AbstractCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentCacheTest
block|{
specifier|private
specifier|final
name|SegmentCache
name|cache
init|=
operator|new
name|SegmentCache
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id1
init|=
operator|new
name|SegmentId
argument_list|(
name|EMPTY_STORE
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|cache
operator|::
name|recordHit
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Segment
name|segment1
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SegmentId
name|id2
init|=
operator|new
name|SegmentId
argument_list|(
name|EMPTY_STORE
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
name|cache
operator|::
name|recordHit
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Segment
name|segment2
init|=
name|mock
argument_list|(
name|Segment
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|when
argument_list|(
name|segment1
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|segment2
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putTest
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|putSegment
argument_list|(
name|segment1
argument_list|)
expr_stmt|;
comment|// Segment should be cached with the segmentId and thus not trigger a call
comment|// to the (empty) node store.
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
name|id1
operator|::
name|getSegment
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidateTests
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|cache
operator|.
name|putSegment
argument_list|(
name|segment1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
name|id1
operator|::
name|getSegment
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clearing the cache should cause an eviction call back for id
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Check that segment1 was evicted and needs reloading through the node store
name|AtomicBoolean
name|cached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
block|{
name|cached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|segment1
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cached
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|statsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractCacheStats
name|stats
init|=
name|cache
operator|.
name|getCacheStats
argument_list|()
decl_stmt|;
comment|// empty cache
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// load
name|cache
operator|.
name|getSegment
argument_list|(
name|id1
argument_list|,
parameter_list|()
lambda|->
name|segment1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// cache hit
name|assertEquals
argument_list|(
name|segment1
argument_list|,
name|id1
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|resetStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getElementCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getLoadCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

