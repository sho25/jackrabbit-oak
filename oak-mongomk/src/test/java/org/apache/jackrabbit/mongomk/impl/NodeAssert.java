begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_class
specifier|public
class|class
name|NodeAssert
block|{
specifier|public
specifier|static
name|void
name|assertDeepEquals
parameter_list|(
name|Node
name|expected
parameter_list|,
name|Node
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
name|expected
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
name|int
name|actualCount
init|=
name|actual
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it
init|=
name|expected
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|expectedChild
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|expectedChildName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|expectedChild
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it2
init|=
name|actual
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|actualChild
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|actualChildName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|actualChild
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedChildName
operator|.
name|equals
argument_list|(
name|actualChildName
argument_list|)
condition|)
block|{
name|assertDeepEquals
argument_list|(
name|expectedChild
argument_list|,
name|actualChild
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|valid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|expecteds
parameter_list|,
name|Collection
argument_list|<
name|Node
argument_list|>
name|actuals
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|iter1
init|=
name|expecteds
init|;
name|iter1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|expected
init|=
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|iter2
init|=
name|actuals
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|actual
init|=
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|actual
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|valid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|Collection
argument_list|<
name|Node
argument_list|>
name|expecteds
parameter_list|,
name|Collection
argument_list|<
name|Node
argument_list|>
name|actuals
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expecteds
operator|.
name|size
argument_list|()
argument_list|,
name|actuals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|expected
range|:
name|expecteds
control|)
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Node
name|actual
range|:
name|actuals
control|)
block|{
if|if
condition|(
name|expected
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|actual
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|valid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|Node
name|expected
parameter_list|,
name|Node
name|actual
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPath
argument_list|()
argument_list|,
name|actual
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|expectedRevisionId
init|=
name|expected
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
name|Long
name|actualRevisionId
init|=
name|actual
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedRevisionId
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|actualRevisionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualRevisionId
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|expectedRevisionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|actualRevisionId
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|expectedRevisionId
operator|!=
literal|null
operator|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRevisionId
argument_list|,
name|actualRevisionId
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedProperties
init|=
name|expected
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actualProperties
init|=
name|actual
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedProperties
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|actualProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualProperties
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|expectedProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|actualProperties
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|expectedProperties
operator|!=
literal|null
operator|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedProperties
argument_list|,
name|actualProperties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

