begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests the NameFilter utility class.  */
end_comment

begin_class
specifier|public
class|class
name|NameFilterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|NameFilter
name|filter
init|=
operator|new
name|NameFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo*"
block|,
literal|"-foo99"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo 99"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo99"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|NameFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*foo"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|NameFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo\\*bar"
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|matches
argument_list|(
literal|"foo*bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

