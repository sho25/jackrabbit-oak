begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|IndexFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyIndexFactory
implements|implements
name|IndexFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_PROPERTY
init|=
literal|"property"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE_PREFIX
init|=
literal|"prefix"
decl_stmt|;
specifier|private
name|Indexer
name|indexer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|MicroKernel
name|mk
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
operator|new
name|Indexer
argument_list|(
name|mk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getTypes
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|TYPE_PREFIX
block|,
name|TYPE_PROPERTY
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|createIndex
parameter_list|(
name|IndexDefinition
name|indexDefinition
parameter_list|)
block|{
if|if
condition|(
name|TYPE_PREFIX
operator|.
name|equals
argument_list|(
name|indexDefinition
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|indexDefinition
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PrefixIndex
argument_list|(
name|indexer
argument_list|,
name|prefix
argument_list|,
name|indexDefinition
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|TYPE_PROPERTY
operator|.
name|equals
argument_list|(
name|indexDefinition
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|indexDefinition
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"pname"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PropertyIndex
argument_list|(
name|indexer
argument_list|,
name|name
argument_list|,
name|indexDefinition
operator|.
name|isUnique
argument_list|()
argument_list|,
name|indexDefinition
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

