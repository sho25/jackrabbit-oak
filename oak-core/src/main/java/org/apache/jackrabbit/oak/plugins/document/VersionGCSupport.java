begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getAllDocuments
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getSelectedDocuments
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
operator|.
name|SplitDocType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_class
specifier|public
class|class
name|VersionGCSupport
block|{
specifier|private
specifier|final
name|DocumentStore
name|store
decl_stmt|;
specifier|public
name|VersionGCSupport
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getPossiblyDeletedDocs
parameter_list|(
specifier|final
name|long
name|lastModifiedTime
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getSelectedDocuments
argument_list|(
name|store
argument_list|,
name|NodeDocument
operator|.
name|DELETED_ONCE
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|wasDeletedOnce
argument_list|()
operator|&&
operator|!
name|input
operator|.
name|hasBeenModifiedSince
argument_list|(
name|lastModifiedTime
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteSplitDocuments
parameter_list|(
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|,
name|VersionGCStats
name|stats
parameter_list|)
block|{
name|SplitDocumentCleanUp
name|cu
init|=
name|createCleanUp
argument_list|(
name|gcTypes
argument_list|,
name|oldestRevTimeStamp
argument_list|,
name|stats
argument_list|)
decl_stmt|;
try|try
block|{
name|stats
operator|.
name|splitDocGCCount
operator|+=
name|cu
operator|.
name|disconnect
argument_list|()
operator|.
name|deleteSplitDocuments
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Utils
operator|.
name|closeIfCloseable
argument_list|(
name|cu
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SplitDocumentCleanUp
name|createCleanUp
parameter_list|(
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
name|long
name|oldestRevTimeStamp
parameter_list|,
name|VersionGCStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|SplitDocumentCleanUp
argument_list|(
name|store
argument_list|,
name|stats
argument_list|,
name|identifyGarbage
argument_list|(
name|gcTypes
argument_list|,
name|oldestRevTimeStamp
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|identifyGarbage
parameter_list|(
specifier|final
name|Set
argument_list|<
name|SplitDocType
argument_list|>
name|gcTypes
parameter_list|,
specifier|final
name|long
name|oldestRevTimeStamp
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getAllDocuments
argument_list|(
name|store
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeDocument
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
return|return
name|gcTypes
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getSplitDocType
argument_list|()
argument_list|)
operator|&&
name|doc
operator|.
name|hasAllRevisionLessThan
argument_list|(
name|oldestRevTimeStamp
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

