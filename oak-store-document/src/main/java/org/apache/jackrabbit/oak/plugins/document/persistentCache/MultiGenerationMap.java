begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|persistentCache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_class
specifier|public
class|class
name|MultiGenerationMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|volatile
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|write
decl_stmt|;
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|Integer
argument_list|,
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|read
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Integer
argument_list|,
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|MultiGenerationMap
parameter_list|()
block|{     }
specifier|public
name|void
name|setWriteMap
parameter_list|(
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|write
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|addReadMap
parameter_list|(
name|int
name|generation
parameter_list|,
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|read
operator|.
name|put
argument_list|(
name|generation
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeReadMap
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
name|read
operator|.
name|remove
argument_list|(
name|generation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
init|=
name|write
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
comment|// closed concurrently
return|return
literal|null
return|;
block|}
return|return
name|m
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ValueWithGenerationInfo
argument_list|<
name|V
argument_list|>
name|value
init|=
name|readValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|isCurrentGeneration
argument_list|()
condition|)
block|{
name|put
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|,
name|value
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|.
name|getValue
argument_list|()
return|;
block|}
name|ValueWithGenerationInfo
argument_list|<
name|V
argument_list|>
name|readValue
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|generation
range|:
name|read
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
init|=
name|read
operator|.
name|get
argument_list|(
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|V
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ValueWithGenerationInfo
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|,
name|m
operator|==
name|write
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|generation
range|:
name|read
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
name|CacheMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m
init|=
name|read
operator|.
name|get
argument_list|(
name|generation
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|write
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|write
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|static
class|class
name|ValueWithGenerationInfo
parameter_list|<
name|V
parameter_list|>
block|{
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isCurrentGeneration
decl_stmt|;
specifier|private
name|ValueWithGenerationInfo
parameter_list|(
name|V
name|value
parameter_list|,
name|boolean
name|isCurrentGeneration
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|isCurrentGeneration
operator|=
name|isCurrentGeneration
expr_stmt|;
block|}
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
name|boolean
name|isCurrentGeneration
parameter_list|()
block|{
return|return
name|isCurrentGeneration
return|;
block|}
block|}
block|}
end_class

end_unit

