begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|prototype
operator|.
name|DocumentStore
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * A higher level object representing a commit.  */
end_comment

begin_class
specifier|public
class|class
name|Commit
block|{
specifier|private
specifier|final
name|Revision
name|revision
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|operations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|JsopWriter
name|diff
init|=
operator|new
name|JsopStream
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|changedParents
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Commit
parameter_list|(
name|Revision
name|revision
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
name|UpdateOp
name|getUpdateOperationForNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
name|Node
operator|.
name|convertPathToDocumentId
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|op
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|operations
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|public
name|Revision
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
name|void
name|addNode
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|operations
operator|.
name|containsKey
argument_list|(
name|n
operator|.
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Node already added: "
operator|+
name|n
operator|.
name|path
argument_list|)
throw|;
block|}
name|operations
operator|.
name|put
argument_list|(
name|n
operator|.
name|path
argument_list|,
name|n
operator|.
name|asOperation
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|.
name|tag
argument_list|(
literal|'+'
argument_list|)
operator|.
name|key
argument_list|(
name|n
operator|.
name|path
argument_list|)
expr_stmt|;
name|diff
operator|.
name|object
argument_list|()
expr_stmt|;
name|n
operator|.
name|append
argument_list|(
name|diff
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|diff
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|diff
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|operations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|void
name|apply
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
name|String
name|commitRoot
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
name|newNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
name|changedNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|UpdateOp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|addChangedParent
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitRoot
operator|==
literal|null
condition|)
block|{
name|commitRoot
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|commitRoot
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|commitRoot
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|commitRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|commitRoot
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// create a "root of the commit" if there is none
name|UpdateOp
name|root
init|=
name|getUpdateOperationForNode
argument_list|(
name|commitRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|root
condition|)
block|{
comment|// apply at the end
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|isNew
argument_list|()
condition|)
block|{
name|newNodes
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changedNodes
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changedNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|root
operator|.
name|isNew
condition|)
block|{
comment|// no updates, so we just add the root like the others
name|newNodes
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|newNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|newNodes
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|UpdateOp
name|op
range|:
name|changedNodes
control|)
block|{
name|store
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|addMapEntry
argument_list|(
literal|"_revisions"
argument_list|,
name|revision
operator|.
name|toString
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeNode
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|diff
operator|.
name|tag
argument_list|(
literal|'-'
argument_list|)
operator|.
name|value
argument_list|(
name|path
argument_list|)
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JsopWriter
name|getDiff
parameter_list|()
block|{
return|return
name|diff
return|;
block|}
specifier|private
name|void
name|addChangedParent
parameter_list|(
name|String
name|path
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|UpdateOp
name|op
init|=
name|operations
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
operator|!
name|op
operator|.
name|isNew
condition|)
block|{
comment|// no need to update the write count
comment|// for new nodes
name|changedParents
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getChangedParents
parameter_list|()
block|{
return|return
name|changedParents
return|;
block|}
block|}
end_class

end_unit

