begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyValues
block|{
specifier|private
name|PropertyValues
parameter_list|()
block|{     }
comment|// TODO consistent naming
annotation|@
name|CheckForNull
specifier|public
specifier|static
name|PropertyValue
name|create
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PropertyValue
argument_list|(
name|property
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|stringProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newString
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|stringProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newLong
parameter_list|(
name|Long
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|longProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newDouble
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|doubleProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newDecimal
parameter_list|(
name|BigDecimal
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|decimalProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|booleanProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newDate
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|dateProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|nameProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newPath
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|pathProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newReference
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|referenceProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newWeakReference
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|weakreferenceProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newUri
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|uriProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|public
specifier|static
name|PropertyValue
name|newBinary
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|PropertyValue
argument_list|(
name|PropertyStates
operator|.
name|binaryProperty
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|// --
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyState
name|p2
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|p1
argument_list|,
name|create
argument_list|(
name|p2
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|PropertyState
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|create
argument_list|(
name|p1
argument_list|)
argument_list|,
name|p2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|PropertyValue
name|p1
parameter_list|,
name|PropertyValue
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|!=
name|p2
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|p1
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
case|case
name|PropertyType
operator|.
name|BINARY
case|:
if|if
condition|(
name|p1
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|p2
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|contains
argument_list|(
name|p1
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|,
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|p1
operator|.
name|isArray
argument_list|()
operator|&&
name|p2
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|contains
argument_list|(
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|,
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|)
argument_list|)
return|;
block|}
default|default:
if|if
condition|(
name|p1
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|p2
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|contains
argument_list|(
name|p1
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|p1
operator|.
name|isArray
argument_list|()
operator|&&
name|p2
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|contains
argument_list|(
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|,
name|p2
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// both arrays or both single values
return|return
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|boolean
name|contains
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
name|p1
parameter_list|,
name|T
name|p2
parameter_list|)
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|i1
init|=
name|p1
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|compare
init|=
name|i1
operator|.
name|next
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// --
comment|/**      * Convert a value to the given target type, if possible.      *       * @param v      *            the value to convert      * @param targetType      *            the target property type      * @return the converted value, or null if converting is not possible      */
specifier|public
specifier|static
name|PropertyValue
name|convert
parameter_list|(
name|PropertyState
name|value
parameter_list|,
name|int
name|targetType
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|)
block|{
comment|// TODO support full set of conversion features defined in the JCR spec
comment|// at 3.6.4 Property Type Conversion
comment|// re-use existing code if possible
try|try
block|{
switch|switch
condition|(
name|targetType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|newString
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|newDate
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|newLong
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|newDouble
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|newDecimal
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|newBoolean
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|newName
argument_list|(
name|getOakPath
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|mapper
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|newPath
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|newReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|newWeakReference
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|newUri
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
try|try
block|{
name|byte
index|[]
name|data
init|=
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|newBinary
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// I don't know in what case that could really occur
comment|// except if UTF-8 isn't supported
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
comment|// throw new IllegalArgumentException("Unknown property type: " +
comment|// targetType);
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// TODO detect unsupported conversions, so that no exception is
comment|// thrown
comment|// because exceptions are slow
return|return
literal|null
return|;
comment|// throw new IllegalArgumentException("<unsupported conversion of "
comment|// +
comment|// v + " (" + PropertyType.nameFromValue(v.getType()) + ") to type "
comment|// +
comment|// PropertyType.nameFromValue(targetType) + ">");
block|}
block|}
specifier|public
specifier|static
name|String
name|getOakPath
parameter_list|(
name|String
name|jcrPath
parameter_list|,
name|NamePathMapper
name|mapper
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
comment|// to simplify testing, a getNamePathMapper isn't required
return|return
name|jcrPath
return|;
block|}
name|String
name|p
init|=
name|mapper
operator|.
name|getOakPath
argument_list|(
name|jcrPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a valid JCR path: "
operator|+
name|jcrPath
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

