begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|defaultGCOptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|FileFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobReferenceRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|GarbageCollectorFileState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|MarkSweepGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|cluster
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for SegmentNodeStore DataStore GC  */
end_comment

begin_class
specifier|public
class|class
name|SegmentDataStoreBlobGCIT
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentDataStoreBlobGCIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
name|SegmentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
name|DataStoreBlobStore
name|blobStore
decl_stmt|;
specifier|private
name|SegmentGCOptions
name|gcOptions
init|=
name|defaultGCOptions
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|closeFileStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|closeBlobStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|blobStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|SegmentNodeStore
name|getNodeStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeStore
operator|==
literal|null
condition|)
block|{
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|FileStoreBuilder
name|builder
init|=
name|fileStoreBuilder
argument_list|(
name|getWorkDir
argument_list|()
argument_list|)
operator|.
name|withNodeDeduplicationCacheSize
argument_list|(
literal|16384
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|256
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
literal|false
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|executor
argument_list|)
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
decl_stmt|;
name|store
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeStore
return|;
block|}
specifier|private
name|File
name|getWorkDir
parameter_list|()
block|{
return|return
name|folder
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|public
name|DataStoreState
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|setUp
argument_list|(
literal|10
argument_list|)
return|;
block|}
specifier|protected
name|DataStoreBlobStore
name|getBlobStore
parameter_list|(
name|File
name|folder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|DataStoreUtils
operator|.
name|getBlobStore
argument_list|(
name|folder
argument_list|)
return|;
block|}
specifier|public
name|DataStoreState
name|setUp
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
name|blobStore
operator|=
name|getBlobStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|=
name|getNodeStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|/* Create garbage by creating in-lined blobs (size< 16KB) */
name|int
name|number
init|=
literal|500
decl_stmt|;
name|NodeBuilder
name|content
init|=
name|a
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|content
operator|.
name|child
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|setProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|,
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|j
argument_list|,
literal|16384
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|long
name|dataSize
init|=
name|store
operator|.
name|getStats
argument_list|()
operator|.
name|getApproximateSize
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"File store dataSize {}"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|dataSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Now remove the nodes to generate garbage
name|content
operator|=
name|a
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|c
init|=
name|content
operator|.
name|child
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|c
operator|.
name|removeProperty
argument_list|(
literal|"p"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|/* Create and delete nodes with blobs stored in DS*/
name|int
name|maxDeleted
init|=
literal|5
decl_stmt|;
name|int
name|numBlobs
init|=
name|count
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|processed
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDeleted
condition|;
name|i
operator|++
control|)
block|{
name|int
name|n
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|numBlobs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStoreState
name|state
init|=
operator|new
name|DataStoreState
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlobs
condition|;
name|i
operator|++
control|)
block|{
name|SegmentBlob
name|b
init|=
operator|(
name|SegmentBlob
operator|)
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|18342
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getBlobId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|processed
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|state
operator|.
name|blobsPresent
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|child
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created blobs : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
range|:
name|processed
control|)
block|{
name|delete
argument_list|(
literal|"c"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Deleted nodes : {}"
argument_list|,
name|processed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep a little to make eligible for cleanup
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// Ensure cleanup is efficient by surpassing the number of
comment|// retained generations
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|store
operator|.
name|compactFull
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|cleanup
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|addInlined
parameter_list|()
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|16514
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cinline"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|addNodeSpecialChars
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|specialCharSets
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"q\\%22afdg\\%22"
argument_list|,
literal|"a\nbcd"
argument_list|,
literal|"a\n\rabcd"
argument_list|,
literal|"012\\efg"
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specialCharSets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SegmentBlob
name|b
init|=
operator|(
name|SegmentBlob
operator|)
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
literal|18432
argument_list|)
argument_list|)
decl_stmt|;
name|NodeBuilder
name|n
init|=
name|a
operator|.
name|child
argument_list|(
literal|"cspecial"
argument_list|)
decl_stmt|;
name|n
operator|.
name|child
argument_list|(
name|specialCharSets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
name|blobStore
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getBlobId
argument_list|()
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|idIter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|private
class|class
name|DataStoreState
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|blobsAdded
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|blobsPresent
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
block|}
specifier|private
name|void
name|delete
parameter_list|(
name|String
name|nodeId
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|NodeBuilder
name|builder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
name|nodeId
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs that should remain after gc : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs for nodes which are deleted : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkMark
parameter_list|()
throws|throws
name|Exception
block|{
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|MarkSweepGarbageCollector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|DataStoreState
name|state
init|=
name|setUp
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs available : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|rootFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|MarkSweepGarbageCollector
name|gcObj
init|=
name|init
argument_list|(
literal|0
argument_list|,
name|executor
argument_list|,
name|rootFolder
argument_list|)
decl_stmt|;
name|gcObj
operator|.
name|collectGarbage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
name|assertBlobReferenceRecords
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|rootFolder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noGc
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs that should remain after gc : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs for nodes which are deleted : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|86400
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsAdded
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcSpecialChar
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|specialCharNodeBlobs
init|=
name|addNodeSpecialChars
argument_list|()
decl_stmt|;
name|state
operator|.
name|blobsAdded
operator|.
name|addAll
argument_list|(
name|specialCharNodeBlobs
argument_list|)
expr_stmt|;
name|state
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|specialCharNodeBlobs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckInit
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gcObj
init|=
name|init
argument_list|(
literal|86400
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|long
name|candidates
init|=
name|gcObj
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckWithGc
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gcObj
init|=
name|init
argument_list|(
literal|86400
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|long
name|candidates
init|=
name|gcObj
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckWithRenegadeDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
comment|// Simulate faulty state by deleting some blobs directly
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|87
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|blobStore
operator|.
name|countDeleteChunks
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|existing
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|existing
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gcObj
init|=
name|init
argument_list|(
literal|86400
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|long
name|candidates
init|=
name|gcObj
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcLongRunningBlobCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} Blobs added {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} Blobs should be present {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|repoId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|)
condition|)
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|store
operator|.
name|getBlobStore
argument_list|()
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TestGarbageCollector
name|gc
init|=
operator|new
name|TestGarbageCollector
argument_list|(
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|store
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|executor
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|5000
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} Blobs existing after gc {}"
argument_list|,
name|existingAfterGC
operator|.
name|size
argument_list|()
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gc
operator|.
name|additionalBlobs
argument_list|,
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcWithInlined
parameter_list|()
throws|throws
name|Exception
block|{
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|DataStoreUtils
operator|.
name|createFDS
argument_list|(
operator|new
name|File
argument_list|(
name|getWorkDir
argument_list|()
argument_list|,
literal|"datastore"
argument_list|)
argument_list|,
literal|16516
argument_list|)
argument_list|)
expr_stmt|;
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|addInlined
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs that should remain after gc : {}"
argument_list|,
name|state
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs for nodes which are deleted : {}"
argument_list|,
name|state
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|state
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|gcInternal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|state
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|consistencyCheckInlined
parameter_list|()
throws|throws
name|Exception
block|{
name|blobStore
operator|=
operator|new
name|DataStoreBlobStore
argument_list|(
name|DataStoreUtils
operator|.
name|createFDS
argument_list|(
operator|new
name|File
argument_list|(
name|getWorkDir
argument_list|()
argument_list|,
literal|"datastore"
argument_list|)
argument_list|,
literal|16516
argument_list|)
argument_list|)
expr_stmt|;
name|DataStoreState
name|state
init|=
name|setUp
argument_list|()
decl_stmt|;
name|addInlined
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gcObj
init|=
name|init
argument_list|(
literal|86400
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|long
name|candidates
init|=
name|gcObj
operator|.
name|checkConsistency
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|gcInternal
parameter_list|(
name|long
name|maxBlobGcInSecs
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadPoolExecutor
name|executor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MarkSweepGarbageCollector
name|gc
init|=
name|init
argument_list|(
name|maxBlobGcInSecs
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|gc
operator|.
name|collectGarbage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|executor
operator|.
name|getTaskCount
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|iterate
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs existing after gc : {}"
argument_list|,
name|existingAfterGC
operator|.
name|size
argument_list|()
argument_list|,
name|existingAfterGC
argument_list|)
expr_stmt|;
return|return
name|existingAfterGC
return|;
block|}
specifier|private
specifier|static
name|void
name|assertBlobReferenceRecords
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|String
name|rootFolder
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read the marked files to check if paths logged or not
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|rootFolder
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|rootFile
init|=
name|FileFilterUtils
operator|.
name|filterList
argument_list|(
name|FileFilterUtils
operator|.
name|prefixFileFilter
argument_list|(
literal|"gcworkdir-"
argument_list|)
argument_list|,
name|root
operator|.
name|listFiles
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|markedFiles
init|=
name|FileFilterUtils
operator|.
name|filterList
argument_list|(
name|FileFilterUtils
operator|.
name|prefixFileFilter
argument_list|(
literal|"marked-"
argument_list|)
argument_list|,
name|rootFile
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|listFiles
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|markedFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|records
init|=
name|FileIOUtils
operator|.
name|readStringsAsSet
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|rootFile
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MarkSweepGarbageCollector
name|init
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|init
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|,
name|executor
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MarkSweepGarbageCollector
name|init
parameter_list|(
name|long
name|blobGcMaxAgeInSecs
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|,
name|String
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|repoId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|)
condition|)
block|{
name|repoId
operator|=
name|ClusterRepositoryInfo
operator|.
name|getOrCreateId
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|store
operator|.
name|getBlobStore
argument_list|()
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MarkSweepGarbageCollector
name|gc
init|=
operator|new
name|MarkSweepGarbageCollector
argument_list|(
operator|new
name|SegmentBlobReferenceRetriever
argument_list|(
name|store
argument_list|)
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|store
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|executor
argument_list|,
name|root
argument_list|,
literal|2048
argument_list|,
name|blobGcMaxAgeInSecs
argument_list|,
name|repoId
argument_list|)
decl_stmt|;
return|return
name|gc
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iterate
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|cur
init|=
name|blobStore
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existing
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|cur
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
comment|/**     * Waits for some time and adds additional blobs after blob referenced identified to simulate     * long running blob id collection phase.      */
specifier|private
class|class
name|TestGarbageCollector
extends|extends
name|MarkSweepGarbageCollector
block|{
specifier|private
name|long
name|maxLastModifiedInterval
decl_stmt|;
specifier|private
name|String
name|root
decl_stmt|;
specifier|private
name|GarbageCollectableBlobStore
name|blobStore
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|additionalBlobs
decl_stmt|;
name|TestGarbageCollector
parameter_list|(
name|BlobReferenceRetriever
name|marker
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|batchCount
parameter_list|,
name|long
name|maxLastModifiedInterval
parameter_list|,
annotation|@
name|Nullable
name|String
name|repositoryId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|marker
argument_list|,
name|blobStore
argument_list|,
name|executor
argument_list|,
name|root
argument_list|,
name|batchCount
argument_list|,
name|maxLastModifiedInterval
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|maxLastModifiedInterval
operator|=
name|maxLastModifiedInterval
expr_stmt|;
name|this
operator|.
name|additionalBlobs
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|markAndSweep
parameter_list|(
name|boolean
name|markOnly
parameter_list|,
name|boolean
name|forceBlobRetrieve
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|GarbageCollectorFileState
name|fs
init|=
operator|new
name|GarbageCollectorFileState
argument_list|(
name|root
argument_list|)
init|)
block|{
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Test Blob garbage collection"
argument_list|)
expr_stmt|;
comment|// Sleep a little more than the max interval to get over the interval for valid blobs
name|Thread
operator|.
name|sleep
argument_list|(
name|maxLastModifiedInterval
operator|+
literal|100
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slept {} to make blobs old"
argument_list|,
name|maxLastModifiedInterval
operator|+
literal|100
argument_list|)
expr_stmt|;
name|long
name|markStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mark
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mark finished"
argument_list|)
expr_stmt|;
name|additionalBlobs
operator|=
name|createAdditional
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|markOnly
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|maxLastModifiedInterval
operator|+
literal|100
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slept {} to make additional blobs old"
argument_list|,
name|maxLastModifiedInterval
operator|+
literal|100
argument_list|)
expr_stmt|;
name|long
name|deleteCount
init|=
name|sweep
argument_list|(
name|fs
argument_list|,
name|markStart
argument_list|,
name|forceBlobRetrieve
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Blob garbage collection completed in {}. Number of blobs deleted [{}]"
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|deleteCount
argument_list|,
name|maxLastModifiedInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|createAdditional
parameter_list|()
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|blobSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeBuilder
name|a
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|SegmentBlob
name|b
init|=
operator|(
name|SegmentBlob
operator|)
name|nodeStore
operator|.
name|createBlob
argument_list|(
name|randomStream
argument_list|(
literal|100
operator|+
name|i
argument_list|,
literal|16516
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|child
argument_list|(
literal|"cafter"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|idIter
init|=
operator|(
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
operator|)
operator|.
name|resolveChunks
argument_list|(
name|b
operator|.
name|getBlobId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|idIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|chunk
init|=
name|idIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|blobSet
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"{} Additional created {}"
argument_list|,
name|blobSet
operator|.
name|size
argument_list|()
argument_list|,
name|blobSet
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|a
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|blobSet
return|;
block|}
block|}
block|}
end_class

end_unit

