begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A tool that converts a list of queries to parameterized queries. This for  * example allows to extract unique queries.  */
end_comment

begin_class
specifier|public
class|class
name|QueryShapeTool
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|processFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|processFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|processFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File "
operator|+
name|file
argument_list|)
expr_stmt|;
name|LineNumberReader
name|r
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|process
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|LineNumberReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|sortedUnique
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|sortedUnique
operator|.
name|add
argument_list|(
name|shape
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|sortedUnique
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|shape
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|String
name|result
init|=
name|query
decl_stmt|;
comment|// replace double quoted string literals with "$s"
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"\"[^\"]*\""
argument_list|,
literal|"\\$s"
argument_list|)
expr_stmt|;
comment|// replace single quoted string literals with "$s"
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"'[^\']*\'"
argument_list|,
literal|"\\$s"
argument_list|)
expr_stmt|;
comment|// replace repeated "$s" with a single one (due to escape characters in string literals)
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"(\\$s)+"
argument_list|,
literal|"\\$s"
argument_list|)
expr_stmt|;
comment|// xpath: replace "//" with "/ /" so we can more easily stop there
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"//"
argument_list|,
literal|"/ /"
argument_list|)
expr_stmt|;
comment|// xpath: replace "/element(" with "/ element" for the same reason
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"/element\\("
argument_list|,
literal|"/ element\\("
argument_list|)
expr_stmt|;
comment|// xpath: replace "/text(" with "/ text" for the same reason
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"/text\\("
argument_list|,
literal|"/ text\\("
argument_list|)
expr_stmt|;
comment|// xpath: replace a path at the beginning of the query with $path
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"/jcr:root(/([^ /]*))*[ /]"
argument_list|,
literal|"/jcr:root/\\$path/"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

