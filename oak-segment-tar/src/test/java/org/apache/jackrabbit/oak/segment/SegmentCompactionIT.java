begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|get
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newConcurrentHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|addCallback
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
operator|.
name|immediateCancelledFuture
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|listeningDecorator
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|MAX_VALUE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|getProperty
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
operator|.
name|randomAlphabetic
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|defaultGCOptions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|helpers
operator|.
name|MessageFormatter
operator|.
name|arrayFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|helpers
operator|.
name|MessageFormatter
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanRegistrationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableScheduledFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|ConflictHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|commit
operator|.
name|DefaultConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentRevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreGCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|gc
operator|.
name|GCMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|CompositeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<p>This is a longevity test for revision garbage collection.</p>  *  *<p>The test schedules a number of readers, writers, a compactor and holds some references for a certain time.  * All of which can be interactively modified through the accompanying  * {@link SegmentCompactionITMBean}, the  * {@link SegmentRevisionGC} and the  *  *<p>The test is<b>disabled</b> by default, to run it you need to set the {@code SegmentCompactionIT} system property:<br>  * {@code mvn test -Dtest=SegmentCompactionIT -Dtest.opts.memory=-Xmx4G}  *</p>  *  *<p>TODO Leverage longevity test support from OAK-2771 once we have it.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SegmentCompactionIT
block|{
comment|/** Only run if explicitly asked to via -Dtest=SegmentCompactionIT */
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLED
init|=
name|SegmentCompactionIT
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentCompactionIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MBeanServer
name|mBeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|50
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ListeningScheduledExecutorService
name|scheduler
init|=
name|listeningDecorator
argument_list|(
name|executor
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileStoreGCMonitor
name|fileStoreGCMonitor
init|=
operator|new
name|FileStoreGCMonitor
argument_list|(
name|Clock
operator|.
name|SIMPLE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TestGCMonitor
name|gcMonitor
init|=
operator|new
name|TestGCMonitor
argument_list|(
name|fileStoreGCMonitor
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|writers
init|=
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|readers
init|=
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|references
init|=
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SegmentCompactionITMBean
name|segmentCompactionMBean
init|=
operator|new
name|SegmentCompactionITMBean
argument_list|()
decl_stmt|;
specifier|private
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
name|SegmentNodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|Registration
name|mBeanRegistration
decl_stmt|;
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|compactor
init|=
name|immediateCancelledFuture
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|ReadWriteLock
name|compactionLock
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxReaders
init|=
literal|10
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxWriters
init|=
literal|10
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|maxStoreSize
init|=
literal|200000000000L
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxBlobSize
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxStringSize
init|=
literal|100
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxReferences
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxWriteOps
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxNodeCount
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|maxPropertyCount
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|nodeRemoveRatio
init|=
literal|10
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|propertyRemoveRatio
init|=
literal|10
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|nodeAddRatio
init|=
literal|40
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|addStringRatio
init|=
literal|20
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|addBinaryRatio
init|=
literal|0
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|compactionInterval
init|=
literal|2
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stopping
decl_stmt|;
specifier|private
specifier|volatile
name|Reference
name|rootReference
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|fileStoreSize
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|stopping
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addReaders
parameter_list|(
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|count
condition|;
name|c
operator|++
control|)
block|{
name|scheduleReader
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeReaders
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|remove
argument_list|(
name|readers
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWriters
parameter_list|(
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|count
condition|;
name|c
operator|++
control|)
block|{
name|scheduleWriter
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeWriters
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|remove
argument_list|(
name|writers
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeReferences
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|remove
argument_list|(
name|references
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|remove
parameter_list|(
name|Set
argument_list|<
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|ops
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|it
init|=
name|ops
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Registration
name|registerMBean
parameter_list|(
name|Object
name|mBean
parameter_list|,
specifier|final
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|NotCompliantMBeanException
throws|,
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
block|{
name|mBeanServer
operator|.
name|registerMBean
argument_list|(
name|mBean
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
try|try
block|{
name|mBeanServer
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error unregistering Segment Compaction MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|ENABLED
argument_list|)
expr_stmt|;
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|SegmentGCOptions
name|gcOptions
init|=
name|defaultGCOptions
argument_list|()
operator|.
name|setEstimationDisabled
argument_list|(
literal|true
argument_list|)
operator|.
name|setForceTimeout
argument_list|(
literal|3600
argument_list|)
decl_stmt|;
name|fileStore
operator|=
name|fileStoreBuilder
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
argument_list|)
operator|.
name|withMemoryMapping
argument_list|(
literal|true
argument_list|)
operator|.
name|withGCMonitor
argument_list|(
name|gcMonitor
argument_list|)
operator|.
name|withGCOptions
argument_list|(
name|gcOptions
argument_list|)
operator|.
name|withStatisticsProvider
argument_list|(
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|executor
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nodeStore
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Registration
argument_list|>
name|registrations
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|segmentCompactionMBean
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE=Segment Compaction"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
operator|new
name|SegmentRevisionGCMBean
argument_list|(
name|fileStore
argument_list|,
name|gcOptions
argument_list|,
name|fileStoreGCMonitor
argument_list|)
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE=Segment Revision GC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|segmentCacheStats
init|=
name|fileStore
operator|.
name|getSegmentCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|segmentCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|segmentCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|stringCacheStats
init|=
name|fileStore
operator|.
name|getStringCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|stringCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|stringCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|templateCacheStats
init|=
name|fileStore
operator|.
name|getTemplateCacheStats
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|templateCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|templateCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|stringDeduplicationCacheStats
init|=
name|fileStore
operator|.
name|getStringDeduplicationCacheStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stringDeduplicationCacheStats
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|stringDeduplicationCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|stringDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|templateDeduplicationCacheStats
init|=
name|fileStore
operator|.
name|getTemplateDeduplicationCacheStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|templateDeduplicationCacheStats
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|templateDeduplicationCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|templateDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheStatsMBean
name|nodeDeduplicationCacheStats
init|=
name|fileStore
operator|.
name|getNodeDeduplicationCacheStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodeDeduplicationCacheStats
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|nodeDeduplicationCacheStats
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"IT:TYPE="
operator|+
name|nodeDeduplicationCacheStats
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mBeanRegistration
operator|=
operator|new
name|CompositeRegistration
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|mBeanRegistration
operator|!=
literal|null
condition|)
block|{
name|mBeanRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|remove
argument_list|(
name|writers
argument_list|,
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|readers
argument_list|,
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|references
argument_list|,
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileStore
operator|!=
literal|null
condition|)
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|scheduleSizeMonitor
argument_list|()
expr_stmt|;
name|scheduleCompactor
argument_list|()
expr_stmt|;
name|addReaders
argument_list|(
name|maxReaders
argument_list|)
expr_stmt|;
name|addWriters
argument_list|(
name|maxWriters
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|stopping
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|scheduleSizeMonitor
parameter_list|()
block|{
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fileStoreSize
operator|=
name|fileStore
operator|.
name|getStats
argument_list|()
operator|.
name|getApproximateSize
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|scheduleCompactor
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling compaction after {} minutes"
argument_list|,
name|compactionInterval
argument_list|)
expr_stmt|;
name|compactor
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|compactor
operator|=
name|scheduler
operator|.
name|schedule
argument_list|(
operator|(
operator|new
name|Compactor
argument_list|(
name|fileStore
argument_list|,
name|gcMonitor
argument_list|)
operator|)
argument_list|,
name|compactionInterval
argument_list|,
name|MINUTES
argument_list|)
expr_stmt|;
name|addCallback
argument_list|(
name|compactor
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|scheduleCompactor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|segmentCompactionMBean
operator|.
name|error
argument_list|(
literal|"Compactor error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scheduleWriter
parameter_list|()
block|{
if|if
condition|(
name|writers
operator|.
name|size
argument_list|()
operator|<
name|maxWriters
condition|)
block|{
specifier|final
name|RandomWriter
name|writer
init|=
operator|new
name|RandomWriter
argument_list|(
name|rnd
argument_list|,
name|nodeStore
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxWriteOps
argument_list|)
argument_list|,
literal|"W"
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ListenableScheduledFuture
argument_list|<
name|Void
argument_list|>
name|futureWriter
init|=
name|scheduler
operator|.
name|schedule
argument_list|(
name|writer
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|futureWriter
argument_list|)
expr_stmt|;
name|addCallback
argument_list|(
name|futureWriter
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|writers
operator|.
name|remove
argument_list|(
name|futureWriter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|futureWriter
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|scheduleWriter
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|writer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|writers
operator|.
name|remove
argument_list|(
name|futureWriter
argument_list|)
expr_stmt|;
name|segmentCompactionMBean
operator|.
name|error
argument_list|(
literal|"Writer error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scheduleReader
parameter_list|()
block|{
if|if
condition|(
name|readers
operator|.
name|size
argument_list|()
operator|<
name|maxReaders
condition|)
block|{
specifier|final
name|RandomReader
argument_list|<
name|?
argument_list|>
name|reader
init|=
name|rnd
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|RandomNodeReader
argument_list|(
name|rnd
argument_list|,
name|nodeStore
argument_list|)
else|:
operator|new
name|RandomPropertyReader
argument_list|(
name|rnd
argument_list|,
name|nodeStore
argument_list|)
decl_stmt|;
specifier|final
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|futureReader
init|=
name|scheduler
operator|.
name|schedule
argument_list|(
name|reader
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|futureReader
argument_list|)
expr_stmt|;
name|addCallback
argument_list|(
name|futureReader
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|readers
operator|.
name|remove
argument_list|(
name|futureReader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|futureReader
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
name|rnd
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|scheduleReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scheduleReader
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|reader
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|readers
operator|.
name|remove
argument_list|(
name|futureReader
argument_list|)
expr_stmt|;
name|segmentCompactionMBean
operator|.
name|error
argument_list|(
literal|"Node reader error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scheduleReference
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|references
operator|.
name|size
argument_list|()
operator|<
name|maxReferences
condition|)
block|{
specifier|final
name|Reference
name|reference
init|=
operator|new
name|Reference
argument_list|(
name|object
argument_list|)
decl_stmt|;
specifier|final
name|ListenableScheduledFuture
argument_list|<
name|?
argument_list|>
name|futureReference
init|=
name|scheduler
operator|.
name|schedule
argument_list|(
name|reference
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
literal|600
argument_list|)
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|references
operator|.
name|add
argument_list|(
name|futureReference
argument_list|)
expr_stmt|;
name|addCallback
argument_list|(
name|futureReference
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|references
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|futureReference
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|scheduleReader
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|reference
operator|.
name|run
argument_list|()
expr_stmt|;
name|references
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|segmentCompactionMBean
operator|.
name|error
argument_list|(
literal|"Reference error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scheduleReader
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RandomWriter
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|Random
name|rnd
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
specifier|final
name|int
name|opCount
decl_stmt|;
specifier|private
specifier|final
name|String
name|itemPrefix
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cancelled
decl_stmt|;
name|RandomWriter
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|opCount
parameter_list|,
name|String
name|itemPrefix
parameter_list|)
block|{
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|opCount
operator|=
name|opCount
expr_stmt|;
name|this
operator|.
name|itemPrefix
operator|=
name|itemPrefix
expr_stmt|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|run
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|thunk
parameter_list|)
throws|throws
name|Exception
block|{
name|ReadWriteLock
name|lock
init|=
name|compactionLock
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|thunk
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|thunk
operator|.
name|call
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|opCount
operator|&&
operator|!
name|cancelled
condition|;
name|k
operator|++
control|)
block|{
name|modify
argument_list|(
name|nodeStore
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cancelled
condition|)
block|{
try|try
block|{
name|CommitHook
name|commitHook
init|=
name|rnd
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|CompositeHook
argument_list|(
operator|new
name|ConflictHook
argument_list|(
name|DefaultConflictHandler
operator|.
name|OURS
argument_list|)
argument_list|)
else|:
operator|new
name|CompositeHook
argument_list|(
operator|new
name|ConflictHook
argument_list|(
name|DefaultConflictHandler
operator|.
name|THEIRS
argument_list|)
argument_list|)
decl_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|root
argument_list|,
name|commitHook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|segmentCompactionMBean
operator|.
name|committed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Commit failed: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|modify
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|NodeBuilder
name|nodeBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|p0
init|=
name|nodeRemoveRatio
decl_stmt|;
name|int
name|p1
init|=
name|p0
operator|+
name|propertyRemoveRatio
decl_stmt|;
name|int
name|p2
init|=
name|p1
operator|+
name|nodeAddRatio
decl_stmt|;
name|int
name|p3
init|=
name|p2
operator|+
name|addStringRatio
decl_stmt|;
name|double
name|p
init|=
name|p3
operator|+
name|addBinaryRatio
decl_stmt|;
name|boolean
name|deleteOnly
init|=
name|fileStoreSize
operator|>
name|maxStoreSize
decl_stmt|;
name|double
name|k
init|=
name|rnd
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|<
name|p0
operator|/
name|p
condition|)
block|{
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|<
name|p1
operator|/
name|p
condition|)
block|{
name|removeRandomProperty
argument_list|(
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|<
name|p2
operator|/
name|p
operator|&&
operator|!
name|deleteOnly
condition|)
block|{
name|addRandomNode
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|<
name|p3
operator|/
name|p
operator|&&
operator|!
name|deleteOnly
condition|)
block|{
name|addRandomValue
argument_list|(
name|nodeBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|deleteOnly
condition|)
block|{
name|addRandomBlob
argument_list|(
name|nodeStore
argument_list|,
name|nodeBuilder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NodeBuilder
name|chooseRandomNode
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
name|NodeBuilder
name|childBuilder
init|=
name|nodeBuilder
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
condition|;
name|k
operator|++
control|)
block|{
name|childBuilder
operator|=
name|randomStep
argument_list|(
name|nodeBuilder
argument_list|,
name|nodeBuilder
operator|=
name|childBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|childBuilder
return|;
block|}
specifier|private
name|NodeBuilder
name|chooseRandomNode
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|,
name|Predicate
argument_list|<
name|NodeBuilder
argument_list|>
name|predicate
parameter_list|)
block|{
name|NodeBuilder
name|childBuilder
init|=
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|predicate
operator|.
name|apply
argument_list|(
name|childBuilder
argument_list|)
condition|)
block|{
name|childBuilder
operator|=
name|randomStep
argument_list|(
name|nodeBuilder
argument_list|,
name|nodeBuilder
operator|=
name|childBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|childBuilder
return|;
block|}
specifier|private
name|NodeBuilder
name|randomStep
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|NodeBuilder
name|node
parameter_list|)
block|{
name|int
name|count
init|=
operator|(
name|int
operator|)
name|node
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|k
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|0
condition|)
block|{
return|return
name|parent
return|;
block|}
else|else
block|{
name|String
name|name
init|=
name|get
argument_list|(
name|node
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
name|k
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|removeRandomProperty
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
name|int
name|count
init|=
operator|(
name|int
operator|)
name|nodeBuilder
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|PropertyState
name|property
init|=
name|get
argument_list|(
name|nodeBuilder
operator|.
name|getProperties
argument_list|()
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
argument_list|)
decl_stmt|;
name|nodeBuilder
operator|.
name|removeProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addRandomNode
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getChildNodeCount
argument_list|(
name|maxNodeCount
argument_list|)
operator|<
name|maxNodeCount
return|;
block|}
block|}
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|'N'
operator|+
name|itemPrefix
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxNodeCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRandomValue
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getPropertyCount
argument_list|()
operator|<
name|maxPropertyCount
return|;
block|}
block|}
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|'P'
operator|+
name|itemPrefix
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxPropertyCount
argument_list|)
argument_list|,
name|randomAlphabetic
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxStringSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRandomBlob
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|NodeBuilder
name|nodeBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|chooseRandomNode
argument_list|(
name|nodeBuilder
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getPropertyCount
argument_list|()
operator|<
name|maxPropertyCount
return|;
block|}
block|}
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|'B'
operator|+
name|itemPrefix
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxPropertyCount
argument_list|)
argument_list|,
name|createBlob
argument_list|(
name|nodeStore
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxBlobSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Blob
name|createBlob
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|createBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|RandomReader
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
specifier|final
name|Random
name|rnd
decl_stmt|;
specifier|protected
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|cancelled
decl_stmt|;
name|RandomReader
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
operator|.
name|rnd
operator|=
name|rnd
expr_stmt|;
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|NodeState
name|randomStep
parameter_list|(
name|NodeState
name|parent
parameter_list|,
name|NodeState
name|node
parameter_list|)
block|{
name|int
name|count
init|=
operator|(
name|int
operator|)
name|node
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|k
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|0
condition|)
block|{
return|return
name|parent
return|;
block|}
else|else
block|{
name|String
name|name
init|=
name|get
argument_list|(
name|node
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
name|k
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|final
name|NodeState
name|chooseRandomNode
parameter_list|(
name|NodeState
name|parent
parameter_list|)
block|{
name|NodeState
name|child
init|=
name|parent
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
operator|&&
operator|!
name|cancelled
condition|;
name|k
operator|++
control|)
block|{
name|child
operator|=
name|randomStep
argument_list|(
name|parent
argument_list|,
name|parent
operator|=
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
specifier|protected
specifier|final
name|PropertyState
name|chooseRandomProperty
parameter_list|(
name|NodeState
name|node
parameter_list|)
block|{
name|int
name|count
init|=
operator|(
name|int
operator|)
name|node
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|get
argument_list|(
name|node
operator|.
name|getProperties
argument_list|()
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|RandomNodeReader
extends|extends
name|RandomReader
argument_list|<
name|NodeState
argument_list|>
block|{
name|RandomNodeReader
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|super
argument_list|(
name|rnd
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|chooseRandomNode
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RandomPropertyReader
extends|extends
name|RandomReader
argument_list|<
name|PropertyState
argument_list|>
block|{
name|RandomPropertyReader
parameter_list|(
name|Random
name|rnd
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|super
argument_list|(
name|rnd
argument_list|,
name|nodeStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|chooseRandomProperty
argument_list|(
name|chooseRandomNode
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Reference
implements|implements
name|Runnable
block|{
specifier|private
specifier|volatile
name|Object
name|referent
decl_stmt|;
name|Reference
parameter_list|(
name|Object
name|referent
parameter_list|)
block|{
name|this
operator|.
name|referent
operator|=
name|referent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|referent
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Compactor
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|FileStore
name|fileStore
decl_stmt|;
specifier|private
specifier|final
name|TestGCMonitor
name|gcMonitor
decl_stmt|;
name|Compactor
parameter_list|(
name|FileStore
name|fileStore
parameter_list|,
name|TestGCMonitor
name|gcMonitor
parameter_list|)
block|{
name|this
operator|.
name|fileStore
operator|=
name|fileStore
expr_stmt|;
name|this
operator|.
name|gcMonitor
operator|=
name|gcMonitor
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|run
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|thunk
parameter_list|)
throws|throws
name|Exception
block|{
name|ReadWriteLock
name|lock
init|=
name|compactionLock
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|thunk
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|thunk
operator|.
name|call
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|gcMonitor
operator|.
name|isCleaned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running compaction"
argument_list|)
expr_stmt|;
try|try
block|{
name|run
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|gcMonitor
operator|.
name|resetCleaned
argument_list|()
expr_stmt|;
name|fileStore
operator|.
name|getGCRunner
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while running compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not running compaction as no cleanup has taken place"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|TestGCMonitor
implements|implements
name|GCMonitor
block|{
specifier|private
specifier|final
name|GCMonitor
name|delegate
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cleaned
init|=
literal|true
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|lastCompacted
decl_stmt|;
name|TestGCMonitor
parameter_list|(
name|GCMonitor
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arrayFormat
argument_list|(
name|message
argument_list|,
name|arguments
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arrayFormat
argument_list|(
name|message
argument_list|,
name|arguments
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|format
argument_list|(
name|message
argument_list|,
name|exception
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skipped
parameter_list|(
name|String
name|reason
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|cleaned
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|arrayFormat
argument_list|(
name|reason
argument_list|,
name|arguments
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|skipped
argument_list|(
name|reason
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compacted
parameter_list|()
block|{
name|delegate
operator|.
name|compacted
argument_list|()
expr_stmt|;
name|lastCompacted
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleaned
parameter_list|(
name|long
name|reclaimedSize
parameter_list|,
name|long
name|currentSize
parameter_list|)
block|{
name|cleaned
operator|=
literal|true
expr_stmt|;
name|delegate
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|currentSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|delegate
operator|.
name|updateStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCleaned
parameter_list|()
block|{
return|return
name|cleaned
return|;
block|}
specifier|public
name|void
name|resetCleaned
parameter_list|()
block|{
name|cleaned
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|long
name|getLastCompacted
parameter_list|()
block|{
return|return
name|lastCompacted
return|;
block|}
block|}
specifier|private
class|class
name|SegmentCompactionITMBean
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|SegmentCompactionMBean
block|{
specifier|private
specifier|final
name|AtomicLong
name|commitCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|String
name|lastError
decl_stmt|;
name|SegmentCompactionITMBean
parameter_list|()
block|{
name|super
argument_list|(
name|SegmentCompactionMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|SegmentCompactionIT
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCorePoolSize
parameter_list|(
name|int
name|corePoolSize
parameter_list|)
block|{
name|executor
operator|.
name|setCorePoolSize
argument_list|(
name|corePoolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCorePoolSize
parameter_list|()
block|{
return|return
name|executor
operator|.
name|getCorePoolSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCompactionInterval
parameter_list|(
name|int
name|minutes
parameter_list|)
block|{
if|if
condition|(
name|compactionInterval
operator|!=
name|minutes
condition|)
block|{
name|compactionInterval
operator|=
name|minutes
expr_stmt|;
name|scheduleCompactor
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCompactionInterval
parameter_list|()
block|{
return|return
name|compactionInterval
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLastCompaction
parameter_list|()
block|{
return|return
name|valueOf
argument_list|(
operator|new
name|Date
argument_list|(
name|gcMonitor
operator|.
name|getLastCompacted
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUseCompactionLock
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|&&
name|compactionLock
operator|==
literal|null
condition|)
block|{
name|compactionLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|compactionLock
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getUseCompactionLock
parameter_list|()
block|{
return|return
name|compactionLock
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxReaders
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxReaders
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|readers
operator|.
name|size
argument_list|()
condition|)
block|{
name|addReaders
argument_list|(
name|count
operator|-
name|readers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeReaders
argument_list|(
name|readers
operator|.
name|size
argument_list|()
operator|-
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxReaders
parameter_list|()
block|{
return|return
name|maxReaders
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxWriters
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxWriters
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|writers
operator|.
name|size
argument_list|()
condition|)
block|{
name|addWriters
argument_list|(
name|count
operator|-
name|writers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeWriters
argument_list|(
name|writers
operator|.
name|size
argument_list|()
operator|-
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxWriters
parameter_list|()
block|{
return|return
name|maxWriters
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxStoreSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|maxStoreSize
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxStoreSize
parameter_list|()
block|{
return|return
name|maxStoreSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxStringSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|maxStringSize
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxStringSize
parameter_list|()
block|{
return|return
name|maxStringSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxBlobSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|maxBlobSize
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxBlobSize
parameter_list|()
block|{
return|return
name|maxBlobSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxReferences
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxReferences
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|count
operator|<
name|references
operator|.
name|size
argument_list|()
condition|)
block|{
name|removeReferences
argument_list|(
name|references
operator|.
name|size
argument_list|()
operator|-
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxReferences
parameter_list|()
block|{
return|return
name|maxReferences
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxWriteOps
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxWriteOps
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxWriteOps
parameter_list|()
block|{
return|return
name|maxWriteOps
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxNodeCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxNodeCount
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxNodeCount
parameter_list|()
block|{
return|return
name|maxNodeCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxPropertyCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|count
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|maxPropertyCount
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxPropertyCount
parameter_list|()
block|{
return|return
name|maxPropertyCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeRemoveRatio
parameter_list|(
name|int
name|ratio
parameter_list|)
block|{
name|nodeRemoveRatio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNodeRemoveRatio
parameter_list|()
block|{
return|return
name|nodeRemoveRatio
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPropertyRemoveRatio
parameter_list|(
name|int
name|ratio
parameter_list|)
block|{
name|propertyRemoveRatio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPropertyRemoveRatio
parameter_list|()
block|{
return|return
name|propertyRemoveRatio
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeAddRatio
parameter_list|(
name|int
name|ratio
parameter_list|)
block|{
name|nodeAddRatio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNodeAddRatio
parameter_list|()
block|{
return|return
name|nodeAddRatio
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAddStringRatio
parameter_list|(
name|int
name|ratio
parameter_list|)
block|{
name|addStringRatio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAddStringRatio
parameter_list|()
block|{
return|return
name|addStringRatio
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAddBinaryRatio
parameter_list|(
name|int
name|ratio
parameter_list|)
block|{
name|addBinaryRatio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAddBinaryRatio
parameter_list|()
block|{
return|return
name|addBinaryRatio
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRootReference
parameter_list|(
name|boolean
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|&&
name|rootReference
operator|==
literal|null
condition|)
block|{
name|rootReference
operator|=
operator|new
name|Reference
argument_list|(
name|nodeStore
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rootReference
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getRootReference
parameter_list|()
block|{
return|return
name|rootReference
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReaderCount
parameter_list|()
block|{
return|return
name|readers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriterCount
parameter_list|()
block|{
return|return
name|writers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReferenceCount
parameter_list|()
block|{
return|return
name|references
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFileStoreSize
parameter_list|()
block|{
return|return
name|fileStoreSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLastError
parameter_list|()
block|{
return|return
name|lastError
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCommitCount
parameter_list|()
block|{
return|return
name|commitCount
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|CancellationException
operator|)
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|sw
operator|.
name|write
argument_list|(
name|message
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|lastError
operator|=
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|committed
parameter_list|()
block|{
name|commitCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

