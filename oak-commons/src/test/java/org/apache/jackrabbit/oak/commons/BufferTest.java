begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ReadOnlyBufferException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Buffer}  */
end_comment

begin_class
specifier|public
class|class
name|BufferTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getFirstCharacterInWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Get the 2 first bytes and convert back to String. Result should be the first 'T' character
name|byte
name|byte0
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
name|byte1
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|firstCharacter
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[]
block|{
name|byte0
block|,
name|byte1
block|}
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
operator|-
literal|2
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|firstCharacter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testString
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getFirstCharacterInBoundedWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|,
literal|10
argument_list|,
literal|12
argument_list|)
decl_stmt|;
comment|// Get the 2 first bytes and convert back to String. Result should be the 's' character of 'string'
name|byte
name|byte0
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
name|byte1
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|firstCharacter
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[]
block|{
name|byte0
block|,
name|byte1
block|}
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s"
argument_list|,
name|firstCharacter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
argument_list|,
name|buffer
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRandomCharacterInWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// Get the bytes in positions 16 and 17 and convert back to String. Result should be the 'i' character
name|byte
name|byte16
init|=
name|buffer
operator|.
name|get
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|byte
name|byte17
init|=
name|buffer
operator|.
name|get
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|String
name|iCharacter
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[]
block|{
name|byte16
block|,
name|byte17
block|}
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|iCharacter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRandomCharactersInWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|result
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestTest"
argument_list|,
operator|new
name|String
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetWrappedBufferToMarkedPosition
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark current position 2
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset back to position 2
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putCharacterToWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|'-'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test-string"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putStringToWrappedBuffer
parameter_list|()
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|String
name|testString
init|=
literal|"Test"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|Buffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|buffer
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestTest"
argument_list|,
operator|new
name|String
argument_list|(
name|result
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BufferOverflowException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putStringToLimitedWrappedBuffer
parameter_list|()
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|testString
init|=
literal|"Test"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareWrappedBuffers
parameter_list|()
block|{
name|String
name|testString1
init|=
literal|"Test string"
decl_stmt|;
name|String
name|testString2
init|=
literal|"Test string"
decl_stmt|;
name|Buffer
name|buffer1
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|testString1
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Buffer
name|buffer2
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|testString2
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// Both buffers should be equal
name|assertTrue
argument_list|(
name|buffer1
operator|.
name|equals
argument_list|(
name|buffer2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Changing the position make them different
name|buffer1
operator|.
name|position
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buffer1
operator|.
name|equals
argument_list|(
name|buffer2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restoring the position make them equal again
name|buffer1
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|buffer1
operator|.
name|equals
argument_list|(
name|buffer2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putNumbersToWrappedBuffer
parameter_list|()
block|{
name|Buffer
name|buffer
init|=
name|Buffer
operator|.
name|allocate
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|int
name|intValue
init|=
literal|1000
decl_stmt|;
name|long
name|longValue
init|=
literal|5000000000L
decl_stmt|;
comment|// Inserting an integer and a long (4 + 8 bytes)
name|buffer
operator|.
name|putInt
argument_list|(
name|intValue
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putLong
argument_list|(
name|longValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intValue
argument_list|,
name|buffer
operator|.
name|getInt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longValue
argument_list|,
name|buffer
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|intValue
argument_list|,
name|buffer
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longValue
argument_list|,
name|buffer
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|duplicateWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
literal|"-"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Buffer
name|buffer1
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Buffer
name|buffer2
init|=
name|buffer1
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|buffer2
operator|.
name|position
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|buffer2
operator|.
name|put
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Modification of buffer2 should have modified buffer1 too
name|assertEquals
argument_list|(
literal|"Test-string"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer1
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test-string"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer2
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ReadOnlyBufferException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createReadOnlyCopyOfWrappedBuffer
parameter_list|()
block|{
name|String
name|testString
init|=
literal|"Test string"
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
literal|"-"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Buffer
name|buffer1
init|=
name|Buffer
operator|.
name|wrap
argument_list|(
name|testString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Buffer
name|buffer2
init|=
name|buffer1
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
name|buffer2
operator|.
name|position
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// Exception thrown here, as the copy is read-only
name|buffer2
operator|.
name|put
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

