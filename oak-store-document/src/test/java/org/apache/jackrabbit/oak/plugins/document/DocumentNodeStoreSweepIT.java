begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|TestUtils
operator|.
name|merge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeFalse
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentNodeStoreSweepIT
extends|extends
name|AbstractTwoNodeTest
block|{
specifier|private
name|FailingDocumentStore
name|store1
decl_stmt|;
specifier|private
name|FailingDocumentStore
name|store2
decl_stmt|;
specifier|public
name|DocumentNodeStoreSweepIT
parameter_list|(
name|DocumentStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
comment|// this test checks cache invalidation, which is
comment|// not available with the MemoryDocumentStore
name|assumeFalse
argument_list|(
name|fixture
operator|instanceof
name|DocumentStoreFixture
operator|.
name|MemoryFixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|DocumentStore
name|customize
parameter_list|(
name|DocumentStore
name|store
parameter_list|)
block|{
name|DocumentStore
name|s
decl_stmt|;
if|if
condition|(
name|store1
operator|==
literal|null
condition|)
block|{
name|store1
operator|=
operator|new
name|FailingDocumentStore
argument_list|(
name|store
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|s
operator|=
name|store1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|store2
operator|==
literal|null
condition|)
block|{
name|store2
operator|=
operator|new
name|FailingDocumentStore
argument_list|(
name|store
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|s
operator|=
name|store2
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"too many stores initialized"
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidateAfterSelfRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|createUncommittedChanges
argument_list|(
name|ds1
argument_list|,
name|store1
argument_list|)
decl_stmt|;
comment|// cluster node 2 must see uncommitted change
name|assertFalse
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// crash and restart cluster node 1, this will run recovery
comment|// and revert uncommitted changes
name|ds1
operator|=
name|crashAndRestart
argument_list|(
name|ds1
argument_list|,
name|store1
argument_list|)
expr_stmt|;
comment|// must see uncommitted change, because no background read occurred
name|assertFalse
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|ds2
operator|.
name|runBackgroundReadOperations
argument_list|()
expr_stmt|;
comment|// now cache must reflect the up-to-date document
name|assertTrue
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidateAfterRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|createUncommittedChanges
argument_list|(
name|ds1
argument_list|,
name|store1
argument_list|)
decl_stmt|;
comment|// cluster node 2 must see uncommitted change
name|assertFalse
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// crash cluster node 1
name|crash
argument_list|(
name|ds1
argument_list|,
name|store1
argument_list|)
expr_stmt|;
comment|// must still see uncommitted change
name|assertFalse
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for lease to expire
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_DURATION_MILLIS
argument_list|)
expr_stmt|;
comment|// run recovery for cluster node 1
name|assertTrue
argument_list|(
name|ds2
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|recover
argument_list|(
name|c1Id
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// now cache must reflect the up-to-date document
name|assertTrue
argument_list|(
name|isClean
argument_list|(
name|ds2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isClean
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// use find that also reads from the cache
name|NodeDocument
name|doc
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
operator|.
name|find
argument_list|(
name|NODES
argument_list|,
name|Utils
operator|.
name|getIdFromPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Revision
name|c
range|:
name|doc
operator|.
name|getAllChanges
argument_list|()
control|)
block|{
name|String
name|commitValue
init|=
name|ns
operator|.
name|getCommitValue
argument_list|(
name|c
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|isCommitted
argument_list|(
name|commitValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|DocumentNodeStore
name|crashAndRestart
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|FailingDocumentStore
name|store
parameter_list|)
block|{
name|DocumentStore
name|s
init|=
name|ns
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|BlobStore
name|bs
init|=
name|ns
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
name|int
name|clusterId
init|=
name|ns
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|int
name|asyncDelay
init|=
name|ns
operator|.
name|getAsyncDelay
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
name|ns
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|crash
argument_list|(
name|ns
argument_list|,
name|store
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setDocumentStore
argument_list|(
name|s
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
name|asyncDelay
argument_list|)
operator|.
name|setLeaseCheckMode
argument_list|(
name|LeaseCheckMode
operator|.
name|DISABLED
argument_list|)
operator|.
name|getNodeStore
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|crash
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|FailingDocumentStore
name|store
parameter_list|)
block|{
name|store
operator|.
name|fail
argument_list|()
operator|.
name|after
argument_list|(
literal|0
argument_list|)
operator|.
name|eternally
argument_list|()
expr_stmt|;
try|try
block|{
name|ns
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"dispose() must fail with an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentStoreException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|store
operator|.
name|fail
argument_list|()
operator|.
name|never
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|createUncommittedChanges
parameter_list|(
name|DocumentNodeStore
name|ns
parameter_list|,
name|FailingDocumentStore
name|store
parameter_list|)
throws|throws
name|Exception
block|{
name|ns
operator|.
name|setMaxBackOffMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|fail
argument_list|()
operator|.
name|after
argument_list|(
literal|5
argument_list|)
operator|.
name|eternally
argument_list|()
expr_stmt|;
try|try
block|{
name|merge
argument_list|(
name|ns
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail with exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|store
operator|.
name|fail
argument_list|()
operator|.
name|never
argument_list|()
expr_stmt|;
comment|// store must now contain uncommitted changes
name|NodeDocument
name|doc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NodeDocument
name|d
range|:
name|Utils
operator|.
name|getAllDocuments
argument_list|(
name|store
argument_list|)
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/node-"
argument_list|)
condition|)
block|{
name|doc
operator|=
name|d
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|doc
operator|.
name|getNodeAtRevision
argument_list|(
name|ns
argument_list|,
name|ns
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|doc
operator|.
name|getLocalDeleted
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ns
operator|.
name|getCommitValue
argument_list|(
name|deleted
operator|.
name|firstKey
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

