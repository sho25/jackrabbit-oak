begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *    *    http://www.apache.org/licenses/LICENSE-2.0  *    *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.   *    */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|ldap
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|constants
operator|.
name|SupportedSaslMechanisms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|DefaultEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|schema
operator|.
name|SchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schema
operator|.
name|manager
operator|.
name|impl
operator|.
name|DefaultSchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|constants
operator|.
name|ServerDNConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|constants
operator|.
name|SystemSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|DefaultDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|CacheService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|CoreSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|InstanceLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|schema
operator|.
name|SchemaPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|jndi
operator|.
name|CoreContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|impl
operator|.
name|avl
operator|.
name|AvlPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|shared
operator|.
name|DefaultDnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|LdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|extended
operator|.
name|StartTlsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|extended
operator|.
name|StoredProcedureExtendedOperationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|cramMD5
operator|.
name|CramMd5MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|digestMD5
operator|.
name|DigestMd5MechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|gssapi
operator|.
name|GssapiMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|ntlm
operator|.
name|NtlmMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|handlers
operator|.
name|sasl
operator|.
name|plain
operator|.
name|PlainMechanismHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|protocol
operator|.
name|shared
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|util
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple ldap test server  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractServer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE_DN
init|=
literal|"dc=example,dc=com"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|EMPTY_LIST
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|LdifEntry
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CTX_FACTORY
init|=
literal|"com.sun.jndi.ldap.LdapCtxFactory"
decl_stmt|;
comment|/**      * the context root for the rootDSE      */
specifier|protected
name|CoreSession
name|rootDSE
decl_stmt|;
comment|/**      * flag whether to delete database files for each test or not      */
specifier|protected
name|boolean
name|doDelete
init|=
literal|true
decl_stmt|;
specifier|protected
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|CacheService
name|cacheService
decl_stmt|;
specifier|protected
name|DirectoryService
name|directoryService
decl_stmt|;
specifier|protected
name|LdapServer
name|ldapServer
decl_stmt|;
comment|/**      * Loads an LDIF from an input stream and adds the entries it contains to      * the server.  It appears as though the administrator added these entries      * to the server.      *      * @param in            the input stream containing the LDIF entries to load      * @return a list of entries added to the server in the order they were added      * @throws NamingException of the load fails      */
specifier|protected
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|loadLdif
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_LIST
return|;
block|}
name|LdifReader
name|ldifReader
init|=
operator|new
name|LdifReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|loadLdif
argument_list|(
name|ldifReader
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|loadLdif
parameter_list|(
name|LdifReader
name|ldifReader
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|LdifEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LdifEntry
name|ldifEntry
range|:
name|ldifReader
control|)
block|{
name|Dn
name|dn
init|=
name|ldifEntry
operator|.
name|getDn
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldifEntry
operator|.
name|isEntry
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
name|items
init|=
name|ldifEntry
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|rootDSE
operator|.
name|add
argument_list|(
operator|new
name|DefaultEntry
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|items
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added entry {}"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|ldifEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
comment|/**      * Inject an ldif String into the server. DN must be relative to the      * root.      *      * @param ldif the entries to inject      * @throws NamingException if the entries cannot be added      */
specifier|protected
name|void
name|addEntry
parameter_list|(
name|String
name|ldif
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ldif
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
name|LdifReader
name|reader
init|=
operator|new
name|LdifReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|loadLdif
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
comment|/**      * Common code to get an initial context via a simple bind to the      * server over the wire using the SUN JNDI LDAP provider. Do not use      * this method until after the setUp() method is called to start the      * server otherwise it will fail.      *      * @return an LDAP context as the the administrator to the rootDSE      * @throws NamingException if the server cannot be contacted      */
specifier|protected
name|LdapContext
name|getWiredContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getWiredContext
argument_list|(
name|ServerDNConstants
operator|.
name|ADMIN_SYSTEM_DN
argument_list|,
literal|"secret"
argument_list|)
return|;
block|}
comment|/**      * Common code to get an initial context via a simple bind to the      * server over the wire using the SUN JNDI LDAP provider. Do not use      * this method until after the setUp() method is called to start the      * server otherwise it will fail.      *      * @param bindPrincipalDn the DN of the principal to bind as      * @param password        the password of the bind principal      * @return an LDAP context as the the administrator to the rootDSE      * @throws NamingException if the server cannot be contacted      */
specifier|protected
name|LdapContext
name|getWiredContext
parameter_list|(
name|String
name|bindPrincipalDn
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|CTX_FACTORY
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
literal|"ldap://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|bindPrincipalDn
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
return|return
operator|new
name|InitialLdapContext
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get's the initial context factory for the provider's ou=system context      * root.      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|cwd
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"apacheds"
argument_list|)
decl_stmt|;
name|doDelete
argument_list|(
name|cwd
argument_list|)
expr_stmt|;
comment|// setup directory service
name|directoryService
operator|=
operator|new
name|DefaultDirectoryService
argument_list|()
expr_stmt|;
name|directoryService
operator|.
name|setShutdownHookEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setInstanceLayout
argument_list|(
operator|new
name|InstanceLayout
argument_list|(
name|cwd
argument_list|)
argument_list|)
expr_stmt|;
name|cacheService
operator|=
operator|new
name|CacheService
argument_list|()
expr_stmt|;
name|cacheService
operator|.
name|initialize
argument_list|(
name|directoryService
operator|.
name|getInstanceLayout
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaManager
name|schemaManager
init|=
operator|new
name|DefaultSchemaManager
argument_list|()
decl_stmt|;
name|directoryService
operator|.
name|setSchemaManager
argument_list|(
name|schemaManager
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setDnFactory
argument_list|(
operator|new
name|DefaultDnFactory
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|cacheService
operator|.
name|getCache
argument_list|(
literal|"dnCache"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AvlPartition
name|schLdifPart
init|=
operator|new
name|AvlPartition
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|directoryService
operator|.
name|getDnFactory
argument_list|()
argument_list|)
decl_stmt|;
name|schLdifPart
operator|.
name|setId
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
name|schLdifPart
operator|.
name|setSuffixDn
argument_list|(
name|directoryService
operator|.
name|getDnFactory
argument_list|()
operator|.
name|create
argument_list|(
name|ServerDNConstants
operator|.
name|CN_SCHEMA_DN
argument_list|)
argument_list|)
expr_stmt|;
name|SchemaPartition
name|schPart
init|=
operator|new
name|SchemaPartition
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|)
decl_stmt|;
name|schPart
operator|.
name|setWrappedPartition
argument_list|(
name|schLdifPart
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setSchemaPartition
argument_list|(
name|schPart
argument_list|)
expr_stmt|;
name|AvlPartition
name|sysPart
init|=
operator|new
name|AvlPartition
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|directoryService
operator|.
name|getDnFactory
argument_list|()
argument_list|)
decl_stmt|;
name|sysPart
operator|.
name|setId
argument_list|(
name|SystemSchemaConstants
operator|.
name|SCHEMA_NAME
argument_list|)
expr_stmt|;
name|sysPart
operator|.
name|setSuffixDn
argument_list|(
name|directoryService
operator|.
name|getDnFactory
argument_list|()
operator|.
name|create
argument_list|(
name|ServerDNConstants
operator|.
name|SYSTEM_DN
argument_list|)
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|setSystemPartition
argument_list|(
name|sysPart
argument_list|)
expr_stmt|;
name|AvlPartition
name|examplePart
init|=
operator|new
name|AvlPartition
argument_list|(
name|directoryService
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|directoryService
operator|.
name|getDnFactory
argument_list|()
argument_list|)
decl_stmt|;
name|examplePart
operator|.
name|setId
argument_list|(
literal|"example"
argument_list|)
expr_stmt|;
name|examplePart
operator|.
name|setSuffixDn
argument_list|(
name|directoryService
operator|.
name|getDnFactory
argument_list|()
operator|.
name|create
argument_list|(
name|EXAMPLE_DN
argument_list|)
argument_list|)
expr_stmt|;
name|examplePart
operator|.
name|setCacheService
argument_list|(
name|cacheService
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|addPartition
argument_list|(
name|examplePart
argument_list|)
expr_stmt|;
comment|// setup ldap server
name|port
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|ldapServer
operator|=
operator|new
name|LdapServer
argument_list|()
expr_stmt|;
name|setupLdapServer
argument_list|()
expr_stmt|;
name|setupSaslMechanisms
argument_list|()
expr_stmt|;
name|directoryService
operator|.
name|startup
argument_list|()
expr_stmt|;
name|setupExamplePartition
argument_list|()
expr_stmt|;
name|startLdapServer
argument_list|()
expr_stmt|;
name|setContexts
argument_list|(
name|ServerDNConstants
operator|.
name|ADMIN_SYSTEM_DN
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start the LDAP server assuming we can bind to the previously reserved port.      * Given that there is a small race between when the port was reserved and when the      * socket is actually bound this can still fail. For now we are ignoring this rare      * case and skip the test. See OAK-5542.      * TODO: OAK-5832: Make the LDAP server used in testing resilient against ports already in use      * @throws Exception      */
specifier|private
name|void
name|startLdapServer
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ldapServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LdapConfigurationException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assumeFalse
argument_list|(
literal|"Ignoring this test as the server port is already in use (OAK-5542): "
operator|+
name|cause
argument_list|,
name|cause
operator|instanceof
name|BindException
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|setupLdapServer
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapServer
operator|.
name|setTransports
argument_list|(
operator|new
name|TcpTransport
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|setDirectoryService
argument_list|(
name|directoryService
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|addExtendedOperationHandler
argument_list|(
operator|new
name|StartTlsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|addExtendedOperationHandler
argument_list|(
operator|new
name|StoredProcedureExtendedOperationHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupExamplePartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup acl to allow read all users
comment|// Inject the context entry for dc=example,dc=com partition if it does not already exist
try|try
block|{
name|directoryService
operator|.
name|getAdminSession
argument_list|()
operator|.
name|lookup
argument_list|(
operator|new
name|Dn
argument_list|(
name|EXAMPLE_DN
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LdapException
name|lnnfe
parameter_list|)
block|{
name|Entry
name|entry
init|=
name|directoryService
operator|.
name|newEntry
argument_list|(
operator|new
name|Dn
argument_list|(
name|EXAMPLE_DN
argument_list|)
argument_list|)
decl_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"objectClass"
argument_list|,
literal|"top"
argument_list|,
literal|"domain"
argument_list|,
literal|"extensibleObject"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"dc"
argument_list|,
literal|"example"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"administrativeRole"
argument_list|,
literal|"accessControlSpecificArea"
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|getAdminSession
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
name|directoryService
operator|.
name|newEntry
argument_list|(
operator|new
name|Dn
argument_list|(
literal|"cn=enableSearchForAllUsers,"
operator|+
name|EXAMPLE_DN
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"objectClass"
argument_list|,
literal|"top"
argument_list|,
literal|"subentry"
argument_list|,
literal|"accessControlSubentry"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"cn"
argument_list|,
literal|"enableSearchForAllUsers"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"subtreeSpecification"
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"prescriptiveACI"
argument_list|,
literal|"{ \n"
operator|+
literal|"  identificationTag \"enableSearchForAllUsers\",\n"
operator|+
literal|"  precedence 14,\n"
operator|+
literal|"  authenticationLevel simple,\n"
operator|+
literal|"  itemOrUserFirst userFirst: \n"
operator|+
literal|"  { \n"
operator|+
literal|"    userClasses { allUsers }, \n"
operator|+
literal|"    userPermissions \n"
operator|+
literal|"    { \n"
operator|+
literal|"      {\n"
operator|+
literal|"        protectedItems {entry, allUserAttributeTypesAndValues}, \n"
operator|+
literal|"        grantsAndDenials { grantRead, grantReturnDN, grantBrowse } \n"
operator|+
literal|"      }\n"
operator|+
literal|"    } \n"
operator|+
literal|"  } \n"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|getAdminSession
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|directoryService
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMaxSizeLimit
parameter_list|(
name|long
name|maxSizeLimit
parameter_list|)
block|{
name|ldapServer
operator|.
name|setMaxSizeLimit
argument_list|(
name|maxSizeLimit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupSaslMechanisms
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MechanismHandler
argument_list|>
name|mechanismHandlerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MechanismHandler
argument_list|>
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|PLAIN
argument_list|,
operator|new
name|PlainMechanismHandler
argument_list|()
argument_list|)
expr_stmt|;
name|CramMd5MechanismHandler
name|cramMd5MechanismHandler
init|=
operator|new
name|CramMd5MechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|CRAM_MD5
argument_list|,
name|cramMd5MechanismHandler
argument_list|)
expr_stmt|;
name|DigestMd5MechanismHandler
name|digestMd5MechanismHandler
init|=
operator|new
name|DigestMd5MechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|DIGEST_MD5
argument_list|,
name|digestMd5MechanismHandler
argument_list|)
expr_stmt|;
name|GssapiMechanismHandler
name|gssapiMechanismHandler
init|=
operator|new
name|GssapiMechanismHandler
argument_list|()
decl_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|GSSAPI
argument_list|,
name|gssapiMechanismHandler
argument_list|)
expr_stmt|;
name|NtlmMechanismHandler
name|ntlmMechanismHandler
init|=
operator|new
name|NtlmMechanismHandler
argument_list|()
decl_stmt|;
comment|// TODO - set some sort of default NtlmProvider implementation here
comment|// ntlmMechanismHandler.setNtlmProvider( provider );
comment|// TODO - or set FQCN of some sort of default NtlmProvider implementation here
comment|// ntlmMechanismHandler.setNtlmProviderFqcn( "com.foo.BarNtlmProvider" );
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|NTLM
argument_list|,
name|ntlmMechanismHandler
argument_list|)
expr_stmt|;
name|mechanismHandlerMap
operator|.
name|put
argument_list|(
name|SupportedSaslMechanisms
operator|.
name|GSS_SPNEGO
argument_list|,
name|ntlmMechanismHandler
argument_list|)
expr_stmt|;
name|ldapServer
operator|.
name|setSaslMechanismHandlers
argument_list|(
name|mechanismHandlerMap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes the Eve working directory.      *      * @param wkdir the directory to delete      * @throws IOException if the directory cannot be deleted      */
specifier|protected
name|void
name|doDelete
parameter_list|(
name|File
name|wkdir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doDelete
condition|)
block|{
if|if
condition|(
name|wkdir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|wkdir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wkdir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete: "
operator|+
name|wkdir
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Sets the contexts for this base class.  Values of user and password used to      * set the respective JNDI properties.  These values can be overriden by the      * overrides properties.      *      * @param user   the username for authenticating as this user      * @param passwd the password of the user      * @throws NamingException if there is a failure of any kind      */
specifier|protected
name|void
name|setContexts
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|passwd
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DirectoryService
operator|.
name|JNDI_KEY
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|CoreContextFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setContexts
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the contexts of this class taking into account the extras and overrides      * properties.      *      * @param env an environment to use while setting up the system root.      * @throws NamingException if there is a failure of any kind      */
specifier|protected
name|void
name|setContexts
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|envFinal
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|envFinal
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rootDSE
operator|=
name|directoryService
operator|.
name|getAdminSession
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the system context root to null.      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ldapServer
operator|!=
literal|null
condition|)
block|{
name|ldapServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|directoryService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|cacheService
operator|!=
literal|null
condition|)
block|{
name|cacheService
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

