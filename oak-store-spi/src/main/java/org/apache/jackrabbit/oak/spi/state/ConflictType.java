begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
package|;
end_package

begin_comment
comment|/**  * Enum to define various types of conflicts.  *  * @see org.apache.jackrabbit.oak.spi.state.NodeStore#rebase(NodeBuilder)  */
end_comment

begin_enum
specifier|public
enum|enum
name|ConflictType
block|{
comment|/**      * A property has been removed while a property of the same name has been changed in trunk.      */
name|DELETE_CHANGED_PROPERTY
argument_list|(
literal|"deleteChangedProperty"
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * A node has been removed while a node of the same name has been changed in trunk.      */
name|DELETE_CHANGED_NODE
argument_list|(
literal|"deleteChangedNode"
argument_list|,
literal|true
argument_list|)
block|,
comment|/**      * A property has been added that has a different value than a property with the same name      * that has been added in trunk.      */
name|ADD_EXISTING_PROPERTY
argument_list|(
literal|"addExistingProperty"
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * A property has been changed while a property of the same name has been removed in trunk.      */
name|CHANGE_DELETED_PROPERTY
argument_list|(
literal|"changeDeletedProperty"
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * A property has been changed while a property of the same name has been changed to a      * different value in trunk.      */
name|CHANGE_CHANGED_PROPERTY
argument_list|(
literal|"changeChangedProperty"
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * A property has been removed while a property of the same name has been removed in trunk.      */
name|DELETE_DELETED_PROPERTY
argument_list|(
literal|"deleteDeletedProperty"
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * A node has been added that is different from a node of them same name that has been added      * to the trunk.      */
name|ADD_EXISTING_NODE
argument_list|(
literal|"addExistingNode"
argument_list|,
literal|true
argument_list|)
block|,
comment|/**      * A node has been changed while a node of the same name has been removed in trunk.      */
name|CHANGE_DELETED_NODE
argument_list|(
literal|"changeDeletedNode"
argument_list|,
literal|true
argument_list|)
block|,
comment|/**      * A node has been removed while a node of the same name has been removed in trunk.      */
name|DELETE_DELETED_NODE
argument_list|(
literal|"deleteDeletedNode"
argument_list|,
literal|true
argument_list|)
block|,     ;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|effectsNode
parameter_list|()
block|{
return|return
name|effectsNode
return|;
block|}
specifier|public
specifier|static
name|ConflictType
name|fromName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|ConflictType
name|t
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized conflictType: "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|effectsNode
decl_stmt|;
specifier|private
name|ConflictType
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|node
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|effectsNode
operator|=
name|node
expr_stmt|;
block|}
block|}
end_enum

end_unit

