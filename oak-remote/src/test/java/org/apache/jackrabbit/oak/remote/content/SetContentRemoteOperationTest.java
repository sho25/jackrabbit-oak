begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|content
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO8601
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|BaseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toBinaryId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toDecimal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toDouble
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiBinaryId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiDecimal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiDouble
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toMultiWeakReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
operator|.
name|toWeakReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|SetContentRemoteOperationTest
block|{
specifier|private
name|SetContentRemoteOperation
name|createOperation
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|RemoteValue
name|value
parameter_list|)
block|{
return|return
operator|new
name|SetContentRemoteOperation
argument_list|(
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
name|SetContentRemoteOperation
name|createOperation
parameter_list|(
name|ContentRemoteBinaries
name|binaries
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|RemoteValue
name|value
parameter_list|)
block|{
return|return
operator|new
name|SetContentRemoteOperation
argument_list|(
name|binaries
argument_list|,
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Matcher
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
name|isIterableReferencing
parameter_list|(
specifier|final
name|T
name|value
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
name|Iterable
name|iterable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|Iterable
condition|)
block|{
name|iterable
operator|=
operator|(
name|Iterable
operator|)
name|item
expr_stmt|;
block|}
if|if
condition|(
name|iterable
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|any
argument_list|(
name|iterable
argument_list|,
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|element
operator|==
name|value
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"an iterable referencing "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Matcher
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
name|isIterableContaining
parameter_list|(
specifier|final
name|T
name|value
parameter_list|)
block|{
return|return
operator|new
name|BaseMatcher
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
name|Iterable
name|iterable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|Iterable
condition|)
block|{
name|iterable
operator|=
operator|(
name|Iterable
operator|)
name|item
expr_stmt|;
block|}
if|if
condition|(
name|iterable
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|any
argument_list|(
name|iterable
argument_list|,
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
operator|&&
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|element
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"an iterable containing "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RemoteCommitException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetWithNonExistingTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|mock
argument_list|(
name|RemoteValue
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBinaryProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|supplier
init|=
name|mock
argument_list|(
name|Supplier
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|stream
argument_list|)
operator|.
name|when
argument_list|(
name|supplier
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|createBlob
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toBinary
argument_list|(
name|supplier
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|blob
argument_list|,
name|Type
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiBinaryProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Supplier
argument_list|<
name|InputStream
argument_list|>
name|supplier
init|=
name|mock
argument_list|(
name|Supplier
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|stream
argument_list|)
operator|.
name|when
argument_list|(
name|supplier
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|createBlob
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiBinary
argument_list|(
name|singletonList
argument_list|(
name|supplier
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableReferencing
argument_list|(
name|blob
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBinaryIdProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
name|binaries
argument_list|,
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toBinaryId
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|blob
argument_list|,
name|Type
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setMultiBinaryIdProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|blob
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|ContentRemoteBinaries
name|binaries
init|=
name|mock
argument_list|(
name|ContentRemoteBinaries
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|blob
argument_list|)
operator|.
name|when
argument_list|(
name|binaries
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
name|binaries
argument_list|,
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiBinaryId
argument_list|(
name|singletonList
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableReferencing
argument_list|(
name|blob
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetBooleanProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toBoolean
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiBooleanProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiBoolean
argument_list|(
name|singletonList
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|BOOLEANS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDateProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toDate
argument_list|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|ISO8601
operator|.
name|format
argument_list|(
name|calendar
argument_list|)
argument_list|,
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiDateProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiDate
argument_list|(
name|singletonList
argument_list|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
name|ISO8601
operator|.
name|format
argument_list|(
name|calendar
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|DATES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDecimalProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toDecimal
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiDecimalProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiDecimal
argument_list|(
name|singletonList
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|DECIMALS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDoubleProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toDouble
argument_list|(
literal|4.2
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|4.2
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiDoubleProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiDouble
argument_list|(
name|singletonList
argument_list|(
literal|4.2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|4.2
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|DOUBLES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetLongProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toLong
argument_list|(
literal|42L
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|42L
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiLongProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiLong
argument_list|(
name|singletonList
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|42L
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|LONGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetNameProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toName
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiNameProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiName
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPathProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toPath
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiPathProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiPath
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetReferenceProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toReference
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiReferenceProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiReference
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|REFERENCES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetStringProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toText
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiStringProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiText
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetUriProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toUri
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|URI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiUriProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiUri
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|URIS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetWeakReferenceProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toWeakReference
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|,
name|Type
operator|.
name|WEAKREFERENCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMultiWeakReferenceProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tree
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tree
argument_list|)
operator|.
name|when
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|createOperation
argument_list|(
literal|"/test"
argument_list|,
literal|"name"
argument_list|,
name|toMultiWeakReference
argument_list|(
name|singletonList
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|apply
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tree
argument_list|)
operator|.
name|setProperty
argument_list|(
name|eq
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|isIterableContaining
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Type
operator|.
name|WEAKREFERENCES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

