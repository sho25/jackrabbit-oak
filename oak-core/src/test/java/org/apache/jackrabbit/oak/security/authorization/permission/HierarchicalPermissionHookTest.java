begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Testing the {@code PermissionHook}  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|()
comment|// TODO: to be removed
specifier|public
class|class
name|HierarchicalPermissionHookTest
extends|extends
name|AbstractPermissionHookTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReorderForSinglePrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|testPrincipal
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|/*         Original setup with 3 access control entries for testPrincipal @ testPath         Expected result:         0 - testuser - allow - JCR_ADD_CHILD_NODES       - NA         1 - everyone - allow - READ                      - NA         2 - testuser - deny  - JCR_MODIFY_ACCESS_CONTROL - NA         3 - testuser - allow - JCR_READ_ACCESS_CONTROL   - /*         */
name|long
name|rootDepths
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|0
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|2
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|3
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
comment|/*         Reorder entries         Expected result:         0 - allow - JCR_ADD_CHILD_NODES       - NA         1 - everyone - allow - READ                      - NA         2 - allow - JCR_READ_ACCESS_CONTROL   - /*         3 - deny  - JCR_MODIFY_ACCESS_CONTROL - NA         */
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|ace
operator|.
name|getPrivileges
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|orderBefore
argument_list|(
name|ace
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rootDepths
operator|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|0
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|2
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|3
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
comment|/*         Remove all entries         */
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cntEntries
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderForSinglePrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|testPrincipal
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|/*         Original setup with 3 access control entries for testPrincipal @ testPath         Expected result:         0 - testuser - allow - JCR_ADD_CHILD_NODES       - NA         1 - everyone - allow - READ                      - NA         2 - testuser - deny  - JCR_MODIFY_ACCESS_CONTROL - NA         3 - testuser - allow - JCR_READ_ACCESS_CONTROL   - /*         */
name|long
name|rootDepths
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|0
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|2
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|3
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
comment|/*         Reorder entries         Expected result:         0 - allow - JCR_READ_ACCESS_CONTROL   - /*         1 - allow - JCR_ADD_CHILD_NODES       - NA         3 - deny  - JCR_MODIFY_ACCESS_CONTROL - NA         */
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|ace
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|ace
operator|.
name|getPrivileges
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|orderBefore
argument_list|(
name|ace
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rootDepths
operator|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|0
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|1
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
name|assertEntry
argument_list|(
name|getEntry
argument_list|(
name|testPrincipalName
argument_list|,
name|testPath
argument_list|,
literal|3
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|++
name|rootDepths
argument_list|)
expr_stmt|;
comment|/*         Remove all entries         */
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cntEntries
argument_list|(
name|getPrincipalRoot
argument_list|(
name|testPrincipalName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertEntry
parameter_list|(
name|Tree
name|entry
parameter_list|,
name|PrivilegeBits
name|expectedBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|long
name|expectedDepth
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedBits
argument_list|,
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_PRIVILEGE_BITS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAllow
argument_list|,
name|entry
operator|.
name|getProperty
argument_list|(
name|REP_IS_ALLOW
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDepth
argument_list|,
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

