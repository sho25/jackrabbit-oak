begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrincipalAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AccessControlPolicyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AbstractAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|PolicyOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|principalbased
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO9075
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of the {@link org.apache.jackrabbit.api.security.JackrabbitAccessControlManager}  * interface that allows to create, modify and remove closed user group policies.  */
end_comment

begin_class
class|class
name|PrincipalBasedAccessControlManager
extends|extends
name|AbstractAccessControlManager
implements|implements
name|PolicyOwner
implements|,
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrincipalBasedAccessControlManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MgrProvider
name|mgrProvider
decl_stmt|;
specifier|private
specifier|final
name|int
name|importBehavior
decl_stmt|;
specifier|private
specifier|final
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBitsProvider
name|privilegeBitsProvider
decl_stmt|;
specifier|private
specifier|final
name|FilterProvider
name|filterProvider
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
name|PrincipalBasedAccessControlManager
parameter_list|(
annotation|@
name|NotNull
name|MgrProvider
name|mgrProvider
parameter_list|,
annotation|@
name|NotNull
name|FilterProvider
name|filterProvider
parameter_list|)
block|{
name|super
argument_list|(
name|mgrProvider
operator|.
name|getRoot
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getNamePathMapper
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|mgrProvider
operator|=
name|mgrProvider
expr_stmt|;
name|importBehavior
operator|=
name|ImportBehavior
operator|.
name|valueFromString
argument_list|(
name|getConfig
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|ProtectedItemImporter
operator|.
name|PARAM_IMPORT_BEHAVIOR
argument_list|,
name|ImportBehavior
operator|.
name|NAME_ABORT
argument_list|)
argument_list|)
expr_stmt|;
name|principalManager
operator|=
name|mgrProvider
operator|.
name|getPrincipalManager
argument_list|()
expr_stmt|;
name|privilegeBitsProvider
operator|=
name|mgrProvider
operator|.
name|getPrivilegeBitsProvider
argument_list|()
expr_stmt|;
name|this
operator|.
name|filterProvider
operator|=
name|filterProvider
expr_stmt|;
name|filter
operator|=
name|filterProvider
operator|.
name|getFilter
argument_list|(
name|mgrProvider
operator|.
name|getSecurityProvider
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getRoot
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------------< JackrabbitAccessControlManager>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getApplicablePolicies
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|canHandle
argument_list|(
name|principal
argument_list|)
condition|)
block|{
name|String
name|oakPath
init|=
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|hasChild
argument_list|(
name|REP_PRINCIPAL_POLICY
argument_list|)
condition|)
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|oakPath
argument_list|,
name|mgrProvider
argument_list|)
block|}
return|;
block|}
block|}
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlPolicy
name|policy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|canHandle
argument_list|(
name|principal
argument_list|)
condition|)
block|{
name|policy
operator|=
name|createPolicy
argument_list|(
name|principal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|policy
operator|==
literal|null
operator|)
condition|?
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
else|:
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
name|policy
block|}
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// this implementation only takes effect if the complete set of principals can be handled. see also
comment|// PrincipalBasedAuthorizationConfiguration.getPermissionProvider
if|if
condition|(
name|canHandle
argument_list|(
name|principals
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|AccessControlPolicy
argument_list|>
name|effective
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|principals
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
name|AccessControlPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|principal
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|effective
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
comment|//-----------------------------------------------< AccessControlManager>---
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getTree
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Editing access control policies by path is not supported. Use JackrabbitAccessControlManager.getPolicies(Principal principal)"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StringBuilder
name|stmt
init|=
operator|new
name|StringBuilder
argument_list|(
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|filterProvider
operator|.
name|getFilterRoot
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//element(*,"
argument_list|)
operator|.
name|append
argument_list|(
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
operator|.
name|append
argument_list|(
literal|")["
argument_list|)
expr_stmt|;
name|String
name|cond
init|=
literal|""
decl_stmt|;
comment|// list of effective paths not empty at this point and will at least contain the oakPath
for|for
control|(
name|String
name|effectivePath
range|:
name|getEffectivePaths
argument_list|(
name|oakPath
argument_list|)
control|)
block|{
name|stmt
operator|.
name|append
argument_list|(
name|cond
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|ISO9075
operator|.
name|encode
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|QueryUtils
operator|.
name|escapeForQuery
argument_list|(
name|effectivePath
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|cond
operator|=
literal|" or "
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|"] order by jcr:path option (traversal ok)"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// run query on persisted content omitting any transient modifications
name|QueryEngine
name|queryEngine
init|=
name|getLatestRoot
argument_list|()
operator|.
name|getQueryEngine
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|queryEngine
operator|.
name|executeQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|,
name|QueryEngine
operator|.
name|NO_MAPPINGS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Principal
argument_list|,
name|List
argument_list|<
name|AbstractEntry
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|Tree
name|entryTree
init|=
name|row
operator|.
name|getTree
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AbstractEntry
name|entry
init|=
name|createEffectiveEntry
argument_list|(
name|entryTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AbstractEntry
argument_list|>
name|entries
init|=
name|m
operator|.
name|computeIfAbsent
argument_list|(
name|entry
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterable
argument_list|<
name|PrincipalAccessControlList
argument_list|>
name|acls
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|m
operator|.
name|entrySet
argument_list|()
argument_list|,
name|entry
lambda|->
operator|new
name|ImmutablePrincipalPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|filter
operator|.
name|getOakPath
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|toArray
argument_list|(
name|acls
argument_list|,
name|PrincipalAccessControlList
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error while collecting effective policies at "
operator|+
name|absPath
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|getTree
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Editing access control policies by path is not supported. Use JackrabbitAccessControlManager.getApplicablePolicies(Principal principal)"
argument_list|)
expr_stmt|;
return|return
name|AccessControlPolicyIteratorAdapter
operator|.
name|EMPTY
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PrincipalPolicyImpl
name|pp
init|=
name|checkValidPolicy
argument_list|(
name|absPath
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|String
name|oakPath
init|=
name|pp
operator|.
name|getOakPath
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|policyTree
init|=
name|getPolicyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyTree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|policyTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// make sure parent has mixin set and policy node is properly initialized
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|tree
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
name|getRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|policyTree
operator|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|tree
argument_list|,
name|REP_PRINCIPAL_POLICY
argument_list|,
name|NT_REP_PRINCIPAL_POLICY
argument_list|)
expr_stmt|;
name|policyTree
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyTree
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|,
name|pp
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|RestrictionProvider
name|restrictionProvider
init|=
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalPolicyImpl
operator|.
name|EntryImpl
name|entry
range|:
name|pp
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|effectiveOakPath
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|entry
operator|.
name|getOakPath
argument_list|()
argument_list|)
decl_stmt|;
name|Tree
name|entryTree
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|policyTree
argument_list|,
literal|"entry"
operator|+
name|i
operator|++
argument_list|,
name|NT_REP_PRINCIPAL_ENTRY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|hasModAcPermission
argument_list|(
name|getPermissionProvider
argument_list|()
argument_list|,
name|effectiveOakPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Access denied."
argument_list|)
throw|;
block|}
name|entryTree
operator|.
name|setProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|,
name|effectiveOakPath
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|entryTree
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|privilegeBitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|entry
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|restrictionProvider
operator|.
name|writeRestrictions
argument_list|(
name|oakPath
argument_list|,
name|entryTree
argument_list|,
name|entry
operator|.
name|getRestrictions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
name|String
name|absPath
parameter_list|,
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PrincipalPolicyImpl
name|pp
init|=
name|checkValidPolicy
argument_list|(
name|absPath
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|Tree
name|policyTree
init|=
name|getPolicyTree
argument_list|(
name|getTree
argument_list|(
name|pp
operator|.
name|getOakPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyTree
operator|.
name|exists
argument_list|()
condition|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPrincipalEntry
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|PropertyState
name|effectivePath
init|=
name|child
operator|.
name|getProperty
argument_list|(
name|REP_EFFECTIVE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Missing mandatory property rep:effectivePath; cannot validate permissions to modify policy."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Utils
operator|.
name|hasModAcPermission
argument_list|(
name|getPermissionProvider
argument_list|()
argument_list|,
name|effectivePath
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATH
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Access denied."
argument_list|)
throw|;
block|}
block|}
block|}
name|policyTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"No policy to remove at "
operator|+
name|absPath
argument_list|)
throw|;
block|}
block|}
comment|//--------------------------------------------------------< PolicyOwner>---
annotation|@
name|Override
specifier|public
name|boolean
name|defines
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|AccessControlPolicy
name|accessControlPolicy
parameter_list|)
block|{
name|String
name|oakPath
init|=
operator|(
name|absPath
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakPath
operator|==
literal|null
operator|||
operator|!
name|filterProvider
operator|.
name|handlesPath
argument_list|(
name|oakPath
argument_list|)
operator|||
operator|!
operator|(
name|accessControlPolicy
operator|instanceof
name|PrincipalPolicyImpl
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|oakPath
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PrincipalPolicyImpl
operator|)
name|accessControlPolicy
operator|)
operator|.
name|getOakPath
argument_list|()
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
comment|/**      * Validate the specified {@code principal} taking the configured      * {@link ImportBehavior} into account.      *      * @param principal The principal to validate.      * @return if the principal can be handled by the filter      * @throws AccessControlException If the principal has an invalid name or      * if {@link ImportBehavior#ABORT} is configured and this principal cannot be handled by the filter.      */
specifier|private
name|boolean
name|canHandle
parameter_list|(
annotation|@
name|Nullable
name|Principal
name|principal
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|name
init|=
operator|(
name|principal
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid principal "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|importBehavior
operator|==
name|ImportBehavior
operator|.
name|ABORT
operator|||
name|importBehavior
operator|==
name|ImportBehavior
operator|.
name|IGNORE
condition|)
block|{
name|principal
operator|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|importBehavior
operator|==
name|ImportBehavior
operator|.
name|IGNORE
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring unknown principal {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// abort
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unsupported principal "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|canHandle
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|AccessControlException
block|{
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
if|if
condition|(
operator|!
name|canHandle
argument_list|(
name|principal
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|PrincipalPolicyImpl
name|checkValidPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
name|defines
argument_list|(
name|absPath
argument_list|,
name|policy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid policy "
operator|+
name|policy
operator|+
literal|" at path "
operator|+
name|absPath
argument_list|)
throw|;
block|}
return|return
operator|(
name|PrincipalPolicyImpl
operator|)
name|policy
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Tree
name|getPolicyTree
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|accessControlledTree
parameter_list|)
block|{
return|return
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|Constants
operator|.
name|REP_PRINCIPAL_POLICY
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|JackrabbitAccessControlPolicy
name|createPolicy
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
name|boolean
name|isEffectivePolicy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|filter
operator|.
name|getOakPath
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEffectivePolicy
condition|)
block|{
name|Root
name|r
init|=
name|getRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|tree
operator|=
name|r
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAccessControlled
argument_list|(
name|tree
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrincipalPolicyImpl
name|policy
init|=
literal|null
decl_stmt|;
name|Tree
name|policyTree
init|=
name|getPolicyTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|Utils
operator|.
name|isPrincipalPolicyTree
argument_list|(
name|policyTree
argument_list|)
condition|)
block|{
name|policy
operator|=
operator|new
name|PrincipalPolicyImpl
argument_list|(
name|principal
argument_list|,
name|oakPath
argument_list|,
name|mgrProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|policyTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|Utils
operator|.
name|isPrincipalEntry
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isEffectivePolicy
operator|&&
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|policy
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|new
name|ImmutablePrincipalPolicy
argument_list|(
name|policy
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|policy
return|;
block|}
block|}
specifier|private
name|boolean
name|isAccessControlled
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
name|Tree
name|typeRoot
init|=
name|getRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
return|return
name|tree
operator|.
name|exists
argument_list|()
operator|&&
name|TreeUtil
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|MIX_REP_PRINCIPAL_BASED_MIXIN
argument_list|,
name|typeRoot
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|getEffectivePaths
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
comment|// read-access-control permission has already been check for 'oakPath'
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|oakPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|effectivePath
init|=
name|oakPath
decl_stmt|;
while|while
condition|(
name|effectivePath
operator|!=
literal|null
operator|&&
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|effectivePath
argument_list|)
condition|)
block|{
name|effectivePath
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|effectivePath
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|effectivePath
argument_list|)
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|AbstractEntry
name|createEffectiveEntry
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|entryTree
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|String
name|principalName
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|entryTree
operator|.
name|getParent
argument_list|()
argument_list|,
name|AccessControlConstants
operator|.
name|REP_PRINCIPAL_NAME
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
operator|!
name|filter
operator|.
name|canHandle
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|oakPath
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|entryTree
argument_list|,
name|REP_EFFECTIVE_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|bits
init|=
name|privilegeBitsProvider
operator|.
name|getBits
argument_list|(
name|entryTree
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|REP_PRIVILEGES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|mgrProvider
operator|.
name|getRestrictionProvider
argument_list|()
operator|.
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|entryTree
argument_list|)
decl_stmt|;
name|NamePathMapper
name|npMapper
init|=
name|getNamePathMapper
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractEntry
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|,
name|bits
argument_list|,
name|restrictions
argument_list|,
name|npMapper
argument_list|)
block|{
annotation|@
name|Override
annotation|@
name|NotNull
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|npMapper
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|privilegeBitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|privilegesFromOakNames
argument_list|(
name|names
argument_list|,
name|mgrProvider
operator|.
name|getPrivilegeManager
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

