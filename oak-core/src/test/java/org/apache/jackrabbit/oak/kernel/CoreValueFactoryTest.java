begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
operator|.
name|MicroKernelImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CoreValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|IdentifierManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * CoreValueUtilTest...  */
end_comment

begin_class
specifier|public
class|class
name|CoreValueFactoryTest
block|{
specifier|private
specifier|final
name|MicroKernel
name|kernel
init|=
operator|new
name|MicroKernelImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CoreValueFactory
name|valueFactory
init|=
operator|new
name|CoreValueFactoryImpl
argument_list|(
name|kernel
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|CoreValue
argument_list|,
name|String
argument_list|>
name|singleValueMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CoreValue
argument_list|>
argument_list|>
name|mvValueMap
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|singleValueMap
operator|=
operator|new
name|HashMap
argument_list|<
name|CoreValue
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"\"abc\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"a:bc"
argument_list|)
argument_list|,
literal|"\"a:bc\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"a:bc"
argument_list|)
argument_list|,
literal|"\"a:bc\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"boo:abc"
argument_list|)
argument_list|,
literal|"\"str:boo:abc\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:abc"
argument_list|)
argument_list|,
literal|"\"str:str:abc\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:"
argument_list|)
argument_list|,
literal|"\"str:str:\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|12345
argument_list|)
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1.23
argument_list|)
argument_list|,
literal|"\"dou:1.23\""
argument_list|)
expr_stmt|;
name|BigDecimal
name|decimal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"12345678901234567890"
argument_list|)
decl_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|decimal
argument_list|)
argument_list|,
literal|"\"dec:"
operator|+
name|decimal
operator|.
name|toString
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"2012-05-01T12:00.000:00GMT"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
argument_list|,
literal|"\"dat:2012-05-01T12:00.000:00GMT\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|,
literal|"\"nam:jcr:primaryType\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"/jcr:system"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|,
literal|"\"pat:/jcr:system\""
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"http://jackrabbit.apache.org"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
argument_list|,
literal|"\"uri:http://jackrabbit.apache.org\""
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|IdentifierManager
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
argument_list|,
literal|"\"ref:"
operator|+
name|uuid
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|,
literal|"\"wea:"
operator|+
name|uuid
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|CoreValue
name|binary
init|=
name|valueFactory
operator|.
name|createValue
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"123"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|singleValueMap
operator|.
name|put
argument_list|(
name|binary
argument_list|,
literal|"\"bin:"
operator|+
name|binary
operator|.
name|getString
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
comment|// multi valued properties
name|mvValueMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CoreValue
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[]"
argument_list|,
name|Collections
operator|.
expr|<
name|CoreValue
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|strValues
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|strValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|strValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"a:bc"
argument_list|)
argument_list|)
expr_stmt|;
name|strValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"boo:abc"
argument_list|)
argument_list|)
expr_stmt|;
name|strValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:abc"
argument_list|)
argument_list|)
expr_stmt|;
name|strValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"str:"
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"abc\",\"a:bc\",\"str:boo:abc\",\"str:str:abc\",\"str:str:\"]"
argument_list|,
name|strValues
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|boValues
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|boValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|boValues
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[true,false]"
argument_list|,
name|boValues
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|longs
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|longs
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|longs
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|longs
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[1,2,3]"
argument_list|,
name|longs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|doubles
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|doubles
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|1.23
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"dou:1.23\"]"
argument_list|,
name|doubles
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|decimals
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|decimals
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|decimal
argument_list|)
argument_list|)
expr_stmt|;
name|decimals
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|decimal
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"dec:"
operator|+
name|decimal
operator|.
name|toString
argument_list|()
operator|+
literal|"\",\"dec:"
operator|+
name|decimal
operator|.
name|toString
argument_list|()
operator|+
literal|"\"]"
argument_list|,
name|decimals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|dates
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"2012-05-01T12:00.000:00GMT"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
argument_list|)
decl_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"dat:2012-05-01T12:00.000:00GMT\"]"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|names
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"jcr:primaryType"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"nam:jcr:primaryType\"]"
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"/jcr:system"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"../../content"
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"pat:/jcr:system\",\"pat:../../content\"]"
argument_list|,
name|paths
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|uris
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"http://jackrabbit.apache.org"
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
argument_list|)
decl_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"uri:http://jackrabbit.apache.org\"]"
argument_list|,
name|uris
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|refs
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"ref:"
operator|+
name|uuid
operator|+
literal|"\"]"
argument_list|,
name|refs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CoreValue
argument_list|>
name|wr
init|=
operator|new
name|ArrayList
argument_list|<
name|CoreValue
argument_list|>
argument_list|()
decl_stmt|;
name|wr
operator|.
name|add
argument_list|(
name|valueFactory
operator|.
name|createValue
argument_list|(
name|uuid
argument_list|,
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|)
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"wea:"
operator|+
name|uuid
operator|+
literal|"\"]"
argument_list|,
name|wr
argument_list|)
expr_stmt|;
name|mvValueMap
operator|.
name|put
argument_list|(
literal|"[\"bin:"
operator|+
name|binary
operator|.
name|getString
argument_list|()
operator|+
literal|"\"]"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeCodes
parameter_list|()
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|codes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|PropertyType
operator|.
name|UNDEFINED
init|;
name|i
operator|<=
name|PropertyType
operator|.
name|DECIMAL
condition|;
name|i
operator|++
control|)
block|{
name|String
name|code
init|=
name|TypeCodes
operator|.
name|getCodeForType
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|codes
operator|.
name|add
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|code
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeCodes
operator|.
name|startsWithCode
argument_list|(
name|code
operator|+
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|def
init|=
name|getDefaultValue
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
literal|"\""
operator|+
name|code
operator|+
literal|":"
operator|+
name|def
operator|+
literal|"\""
argument_list|)
decl_stmt|;
block|}
block|}
specifier|private
specifier|static
name|CoreValue
name|getDefaultValue
parameter_list|(
name|int
name|propertyType
parameter_list|)
block|{
name|CoreValueFactory
name|cv
init|=
name|MemoryValueFactory
operator|.
name|INSTANCE
decl_stmt|;
switch|switch
condition|(
name|propertyType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
try|try
block|{
return|return
name|cv
operator|.
name|createValue
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|"1970-01-01T00:00:00.0"
argument_list|,
name|PropertyType
operator|.
name|DATE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|0.0
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"0"
argument_list|)
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|false
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|NAME
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|REFERENCE
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|REFERENCE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|WEAKREFERENCE
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|WEAKREFERENCE
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|URI
argument_list|)
return|;
case|case
name|PropertyType
operator|.
name|UNDEFINED
case|:
return|return
name|cv
operator|.
name|createValue
argument_list|(
literal|""
argument_list|,
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type: "
operator|+
name|propertyType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

