begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_comment
comment|/**  * Tests the LIRS cache.  */
end_comment

begin_class
specifier|public
class|class
name|CacheTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testRandomSmallCache
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
literal|30
condition|;
name|j
operator|++
control|)
block|{
name|int
name|key
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|int
name|memory
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"add "
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|memory
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|j
argument_list|,
name|memory
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|buff
operator|.
name|append
argument_list|(
literal|"remove "
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|test
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|buff
operator|.
name|append
argument_list|(
literal|"get "
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|test
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEdgeCases
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|test
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|test
operator|.
name|setMaxMemory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|test
operator|.
name|setAverageMemory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|verifyMapSize
argument_list|(
literal|7
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|13
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|25
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|49
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|97
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|193
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|385
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|verifyMapSize
argument_list|(
literal|769
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
decl_stmt|;
name|test
operator|=
name|createCache
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|test
operator|=
name|createCache
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|test
operator|=
name|createCache
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2000
condition|;
name|j
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
comment|// for a cache of size 1000,
comment|// there are 62 cold entries (about 6.25%).
name|assertEquals
argument_list|(
literal|62
argument_list|,
name|test
operator|.
name|size
argument_list|()
operator|-
name|test
operator|.
name|sizeHot
argument_list|()
argument_list|)
expr_stmt|;
comment|// at most as many non-resident elements
comment|// as there are entries in the stack
name|assertEquals
argument_list|(
literal|968
argument_list|,
name|test
operator|.
name|sizeNonResident
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyMapSize
parameter_list|(
name|int
name|elements
parameter_list|,
name|int
name|expectedMapSize
parameter_list|)
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
decl_stmt|;
name|test
operator|=
name|createCache
argument_list|(
name|elements
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|sizeMapArray
argument_list|()
operator|<
name|expectedMapSize
argument_list|)
expr_stmt|;
name|test
operator|=
name|createCache
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMapSize
argument_list|,
name|test
operator|.
name|sizeMapArray
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|=
name|createCache
argument_list|(
name|elements
operator|*
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMapSize
argument_list|,
name|test
operator|.
name|sizeMapArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPutPeekRemove
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|peek
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 4 3 2 1 cold: non-resident:"
argument_list|)
expr_stmt|;
comment|// move middle to front
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|test
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// already on (an optimization)
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 1 2 3 4 cold: non-resident:"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 3 1 2 4 cold: non-resident:"
argument_list|)
expr_stmt|;
comment|// 5 is cold; will make 4 non-resident
name|test
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 5 3 1 2 cold: 5 non-resident: 4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|test
operator|.
name|getMemory
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|test
operator|.
name|getMemory
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|getMemory
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|getMemory
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|peek
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|getIfPresent
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 3 2 1 cold: 5 non-resident: 4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|5
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 5 3 2 1 cold: 5 non-resident: 4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|test
operator|.
name|getUnchecked
argument_list|(
literal|5
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 5 3 2 cold: 1 non-resident: 4"
argument_list|)
expr_stmt|;
comment|// remove
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|test
operator|.
name|remove
argument_list|(
literal|5
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 3 stack: 3 2 1 cold: non-resident: 4"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 3 stack: 3 2 1 cold: non-resident:"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 3 stack: 3 2 1 cold: non-resident:"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 5 4 3 2 cold: 5 non-resident: 1"
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 4 3 2 5 cold: 2 non-resident: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|test
operator|.
name|remove
argument_list|(
literal|5
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 3 stack: 4 3 2 cold: non-resident: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|test
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 2 stack: 4 3 cold: non-resident:"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 2 1 4 3 cold: non-resident:"
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 4 3 1 2 cold: non-resident:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 3 stack: 4 3 2 cold: non-resident:"
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// test clear
name|test
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 0 stack: cold: non-resident:"
argument_list|)
expr_stmt|;
comment|// strange situation where there is only a non-resident entry
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|containsValue
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 5 4 3 2 cold: 5 non-resident: 1"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 1 5 4 3 2 cold: 1 non-resident: 5"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|containsValue
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 1 stack: 1 cold: non-resident: 5"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 0 stack: cold: non-resident: 5"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|containsKey
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that converting a hot to cold entry will prune the stack
name|test
operator|.
name|clear
argument_list|()
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 3 4 5 2 cold: 5 non-resident: 1"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 6 3 4 5 2 cold: 6 non-resident: 5 1"
argument_list|)
expr_stmt|;
comment|// this will prune the stack (remove entry 5 as entry 2 becomes cold)
name|test
operator|.
name|getUnchecked
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 6 3 4 cold: 2 non-resident: 5 1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPruneStack
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 5 stack: 6 5 4 3 2 1 cold: 6 non-resident: 5 0"
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 5 stack: 2 3 4 6 5 1 cold: 6 non-resident: 5 0"
argument_list|)
expr_stmt|;
comment|// this call needs to prune the stack
name|test
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 2 3 4 6 cold: non-resident: 5 0"
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// the the stack was not pruned, the following will fail
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 5 stack: 1 0 2 3 4 cold: 1 non-resident: 6 5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|40
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|10
operator|*
name|i
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 36 stack: 4 3 2 1 cold: 4 non-resident: 0"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|test
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|>=
literal|1
operator|&&
name|e
operator|.
name|getKey
argument_list|()
operator|<=
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|>=
literal|10
operator|&&
name|e
operator|.
name|getValue
argument_list|()
operator|<=
literal|40
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
range|:
name|test
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|x
operator|>=
literal|10
operator|&&
name|x
operator|<=
literal|40
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|x
operator|>=
literal|1
operator|&&
name|x
operator|<=
literal|4
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|test
operator|.
name|getMaxMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getAverageMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|test
operator|.
name|getUsedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|test
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|test
operator|.
name|sizeHot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|test
operator|.
name|sizeNonResident
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// changing the limit is not supposed to modify the map
name|test
operator|.
name|setMaxMemory
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getMaxMemory
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setMaxMemory
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|test
operator|.
name|setAverageMemory
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|test
operator|.
name|getAverageMemory
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setAverageMemory
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 36 stack: 4 3 2 1 cold: 4 non-resident: 0"
argument_list|)
expr_stmt|;
comment|// putAll uses the average memory
name|test
operator|.
name|asMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|test
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 40 stack: 4 3 2 1 cold: non-resident: 0"
argument_list|)
expr_stmt|;
name|test
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 0 stack: cold: non-resident:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|test
operator|.
name|getMaxMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|test
operator|.
name|getAverageMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|getUsedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|sizeHot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|sizeNonResident
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLimitHot
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|10
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|test
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|test
operator|.
name|sizeNonResident
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|93
argument_list|,
name|test
operator|.
name|sizeHot
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLimitNonResident
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
literal|10
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|"mem: 4 stack: 19 18 17 16 3 2 1 cold: 19 non-resident: 18 17 16"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadHashMethod
parameter_list|()
block|{
comment|// ensure an 2^n cache size
specifier|final
name|int
name|size
init|=
literal|4
decl_stmt|;
comment|/**          * A class with a bad hashCode implementation.          */
class|class
name|BadHash
block|{
name|int
name|x
decl_stmt|;
name|BadHash
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|x
operator|&
literal|1
operator|)
operator|*
name|size
operator|*
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
operator|(
name|BadHash
operator|)
name|o
operator|)
operator|.
name|x
operator|==
name|x
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|x
return|;
block|}
block|}
name|CacheLIRS
argument_list|<
name|BadHash
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
name|size
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|test
operator|.
name|remove
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|test
operator|.
name|getIfPresent
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|test
operator|.
name|getIfPresent
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|test
operator|.
name|remove
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|test
operator|.
name|remove
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|test
operator|.
name|getIfPresent
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|test
operator|.
name|getIfPresent
argument_list|(
operator|new
name|BadHash
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanResistance
parameter_list|()
block|{
name|boolean
name|log
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
literal|20
decl_stmt|;
comment|// cache size 11 (10 hot, 1 cold)
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
name|size
operator|/
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// init the cache with some dummy entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
operator|-
name|i
argument_list|,
operator|-
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// init with 0..9, ensure those are hot entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|getUnchecked
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"get "
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// read 0..9, add 10..19 (cold)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|x
init|=
name|test
operator|.
name|getIfPresent
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|y
init|=
name|test
operator|.
name|peek
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|size
operator|/
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
literal|"i: "
operator|+
name|i
argument_list|,
name|x
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"i: "
operator|+
name|i
argument_list|,
name|y
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|10
argument_list|,
name|x
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|10
argument_list|,
name|y
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// peek should have no effect
name|assertEquals
argument_list|(
name|i
operator|*
literal|10
argument_list|,
name|test
operator|.
name|peek
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"get "
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// ensure 0..9 are hot, 10..18 are not resident, 19 is cold
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|x
init|=
name|test
operator|.
name|getIfPresent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|size
operator|/
literal|2
operator|||
name|i
operator|==
name|size
operator|-
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
literal|"i: "
operator|+
name|i
argument_list|,
name|x
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
literal|10
argument_list|,
name|x
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomOperations
parameter_list|()
block|{
name|boolean
name|log
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
literal|10
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|test
init|=
name|createCache
argument_list|(
name|size
operator|/
literal|2
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|good
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|key
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" put "
operator|+
name|key
operator|+
literal|" "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|good
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" get "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|Integer
name|a
init|=
name|good
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Integer
name|b
init|=
name|test
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" remove "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|good
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" -> "
operator|+
name|toString
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verify
argument_list|(
name|test
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|String
name|toString
parameter_list|(
name|CacheLIRS
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"mem: "
operator|+
name|cache
operator|.
name|getUsedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|" stack:"
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|k
range|:
name|cache
operator|.
name|keys
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" cold:"
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|k
range|:
name|cache
operator|.
name|keys
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
literal|" non-resident:"
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|k
range|:
name|cache
operator|.
name|keys
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|verify
parameter_list|(
name|CacheLIRS
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|String
name|got
init|=
name|toString
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
name|int
name|mem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|K
name|k
range|:
name|cache
operator|.
name|keySet
argument_list|()
control|)
block|{
name|mem
operator|+=
name|cache
operator|.
name|getMemory
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mem
argument_list|,
name|cache
operator|.
name|getUsedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|K
argument_list|>
name|stack
init|=
name|cache
operator|.
name|keys
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|K
argument_list|>
name|cold
init|=
name|cache
operator|.
name|keys
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|K
argument_list|>
name|nonResident
init|=
name|cache
operator|.
name|keys
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nonResident
operator|.
name|size
argument_list|()
argument_list|,
name|cache
operator|.
name|sizeNonResident
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|K
argument_list|>
name|hot
init|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|hot
operator|.
name|removeAll
argument_list|(
name|cold
argument_list|)
expr_stmt|;
name|hot
operator|.
name|removeAll
argument_list|(
name|nonResident
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hot
operator|.
name|size
argument_list|()
argument_list|,
name|cache
operator|.
name|sizeHot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hot
operator|.
name|size
argument_list|()
operator|+
name|cold
operator|.
name|size
argument_list|()
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|K
name|lastStack
init|=
name|stack
operator|.
name|get
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hot
operator|.
name|contains
argument_list|(
name|lastStack
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheLIRS
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createCache
parameter_list|(
name|int
name|maxElements
parameter_list|)
block|{
return|return
name|createCache
argument_list|(
name|maxElements
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|CacheLIRS
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createCache
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|int
name|averageSize
parameter_list|)
block|{
return|return
operator|new
name|CacheLIRS
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
literal|null
argument_list|,
name|maxSize
argument_list|,
name|averageSize
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsMap
parameter_list|()
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|createCache
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|cache
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|1
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|1
argument_list|,
literal|"Hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|map
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|"Hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hallo"
argument_list|,
name|cache
operator|.
name|getIfPresent
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|"Hallo"
argument_list|,
literal|"Hi!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|"Hi!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1]"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1=Hello]"
argument_list|,
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
literal|"Hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|CacheLIRS
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|CacheLIRS
operator|.
name|Builder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
literal|100
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|Integer
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|key
operator|+
name|value
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|Integer
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|key
operator|<
literal|0
operator|||
name|key
operator|>=
literal|100
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Out of range"
argument_list|)
throw|;
block|}
return|return
literal|"n"
operator|+
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|reload
parameter_list|(
name|Integer
name|key
parameter_list|,
name|String
name|oldValue
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|oldValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SettableFuture
argument_list|<
name|String
argument_list|>
name|f
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|f
operator|.
name|set
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n1"
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|get
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// expected to log a warning, but not fail
name|cache
operator|.
name|refresh
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

