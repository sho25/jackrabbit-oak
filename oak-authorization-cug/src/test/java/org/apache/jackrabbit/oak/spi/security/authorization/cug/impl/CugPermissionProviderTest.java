begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|RepositoryPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CugPermissionProviderTest
extends|extends
name|AbstractCugTest
implements|implements
name|NodeTypeConstants
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_GROUP_ID
init|=
literal|"testGroupForCugTest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|PATH_INCUG_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
name|SUPPORTED_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/a/b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/a/b/c/jcr:primaryType"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/aa"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/content/aa/bb/cc"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// paths that may not contain cugs anyway
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
name|NODE_TYPES_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
name|UNSUPPORTED_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PATH_INCUG_MAP
operator|.
name|put
argument_list|(
name|INVALID_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|READABLE_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content/a/b/c"
argument_list|,
literal|"/content/a/b/c/jcr:primaryType"
argument_list|,
literal|"/content/a/b/c/nonExisting"
argument_list|,
literal|"/content/a/b/c/nonExisting/jcr:primaryType"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NOT_READABLE_PATHS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/jcr:primaryType"
argument_list|,
name|UNSUPPORTED_PATH
argument_list|,
name|UNSUPPORTED_PATH
operator|+
literal|"/jcr:primaryType"
argument_list|,
literal|"/content"
argument_list|,
literal|"/content/jcr:primaryType"
argument_list|,
literal|"/content/a"
argument_list|,
literal|"/content/a/jcr:primaryType"
argument_list|,
literal|"/content/a/b"
argument_list|,
literal|"/content/a/b/jcr:primaryType"
argument_list|,
literal|"/content/a/b/c/rep:cugPolicy"
argument_list|,
literal|"/content/a/b/c/rep:cugPolicy/jcr:primaryType"
argument_list|,
literal|"/content/a/b/c/rep:cugPolicy/rep:principalNames"
argument_list|,
literal|"/content/a/b/c/rep:cugPolicy/nonExisting"
argument_list|,
literal|"/content/a/b/c/rep:cugPolicy/nonExisting/jcr:primaryType"
argument_list|,
literal|"/content/aa"
argument_list|,
literal|"/content/aa/jcr:primaryType"
argument_list|,
literal|"/content/bb"
argument_list|,
literal|"/content/bb/jcr:primaryType"
argument_list|,
literal|"/content/aa/bb/rep:cugPolicy"
argument_list|,
literal|"/content/aa/bb/rep:cugPolicy/jcr:primaryType"
argument_list|,
literal|"/content/aa/bb/rep:cugPolicy/rep:principalNames"
argument_list|,
literal|"/content/nonExisting"
argument_list|,
literal|"/content/nonExisting/jcr:primaryType"
argument_list|)
decl_stmt|;
specifier|private
name|Principal
name|testGroupPrincipal
decl_stmt|;
specifier|private
name|CugPermissionProvider
name|cugPermProvider
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Group
name|testGroup
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|createGroup
argument_list|(
name|TEST_GROUP_ID
argument_list|)
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// add more child nodes
name|NodeUtil
name|n
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|n
operator|.
name|addChild
argument_list|(
literal|"aa"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"bb"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"cc"
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|testGroupPrincipal
operator|=
name|testGroup
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|createCug
argument_list|(
literal|"/content/a"
argument_list|,
name|testGroupPrincipal
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content/a/b/c"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content/aa/bb"
argument_list|,
name|testGroupPrincipal
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|supportedPaths
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SUPPORTED_PATH
argument_list|)
decl_stmt|;
name|cugPermProvider
operator|=
operator|new
name|CugPermissionProvider
argument_list|(
name|root
argument_list|,
name|principals
argument_list|,
name|supportedPaths
argument_list|,
name|CugContext
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// revert transient pending changes (that might be invalid)
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// remove the test group
name|Authorizable
name|testGroup
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TEST_GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
comment|//---------------------------------------< AggregatedPermissionProvider>---
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPrivileges(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPrivileges
parameter_list|()
block|{
name|PrivilegeBits
name|readBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|readNodeBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|readPropBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
decl_stmt|;
name|PrivilegeBitsProvider
name|provider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|PATH_INCUG_MAP
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isInCug
init|=
name|PATH_INCUG_MAP
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInCug
condition|)
block|{
name|assertPrivilegeBits
argument_list|(
name|readBits
argument_list|,
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readBits
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrivilegeBits
argument_list|(
name|readNodeBits
argument_list|,
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readNodeBits
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrivilegeBits
argument_list|(
name|readPropBits
argument_list|,
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readPropBits
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrivilegeBits
argument_list|(
name|readBits
argument_list|,
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertPrivilegeBits
argument_list|(
name|readNodeBits
argument_list|,
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readNodeBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|readPropBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
name|tree
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertPrivilegeBits
parameter_list|(
annotation|@
name|Nonnull
name|PrivilegeBits
name|expected
parameter_list|,
annotation|@
name|Nonnull
name|PrivilegeBits
name|toTest
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|toTest
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPrivileges(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeBits)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPrivilegesForNullTree
parameter_list|()
block|{
name|PrivilegeBits
name|readBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|readNodeBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
decl_stmt|;
name|PrivilegeBits
name|readPropBits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
decl_stmt|;
name|PrivilegeBitsProvider
name|provider
init|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|readBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|readNodeBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|readPropBits
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_WRITE
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_REMOVE_NODE
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|supportedPrivileges
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getBits
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPermissions(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.api.PropertyState, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsByTree
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|PATH_INCUG_MAP
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isInCug
init|=
name|PATH_INCUG_MAP
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInCug
condition|)
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPermissions(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.api.PropertyState, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsByNullTree
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
operator|(
name|Tree
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPermissions(org.apache.jackrabbit.oak.plugins.tree.TreeLocation, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsByLocation
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|PATH_INCUG_MAP
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isInCug
init|=
name|PATH_INCUG_MAP
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInCug
condition|)
block|{
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#supportedPermissions(org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission, org.apache.jackrabbit.oak.api.PropertyState, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testSupportedPermissionsByTreePermission
parameter_list|()
block|{
name|TreePermission
name|rootTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TreePermission
argument_list|,
name|Boolean
argument_list|>
name|tpMap
init|=
operator|new
name|HashMap
argument_list|<
name|TreePermission
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|TreePermission
name|contentTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|,
name|rootTp
argument_list|)
decl_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|contentTp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TreePermission
name|aTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
argument_list|,
name|contentTp
argument_list|)
decl_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|aTp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|)
argument_list|,
name|aTp
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TreePermission
name|bTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b"
argument_list|)
argument_list|,
name|aTp
argument_list|)
decl_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|bTp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
argument_list|,
name|bTp
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TreePermission
name|aaTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa"
argument_list|)
argument_list|,
name|contentTp
argument_list|)
decl_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|aaTp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TreePermission
name|bbTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/bb"
argument_list|)
argument_list|,
name|aaTp
argument_list|)
decl_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/bb/cc"
argument_list|)
argument_list|,
name|bbTp
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// paths that may not contain cugs anyway
name|tpMap
operator|.
name|put
argument_list|(
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/jcr:system"
argument_list|)
argument_list|,
name|rootTp
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|rootTp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tpMap
operator|.
name|put
argument_list|(
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|UNSUPPORTED_PATH
argument_list|)
argument_list|,
name|rootTp
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|TreePermission
name|tp
range|:
name|tpMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|isInCug
init|=
name|tpMap
operator|.
name|get
argument_list|(
name|tp
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInCug
condition|)
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|cugPermProvider
operator|.
name|supportedPermissions
argument_list|(
name|tp
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.AggregatedPermissionProvider#isGranted(org.apache.jackrabbit.oak.plugins.tree.TreeLocation, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedByLocation
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|p
range|:
name|NOT_READABLE_PATHS
control|)
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|READABLE_PATHS
control|)
block|{
name|TreeLocation
name|location
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|location
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------< getPrivileges>---
comment|/**      * @see PermissionProvider#getPrivileges(org.apache.jackrabbit.oak.api.Tree)      */
annotation|@
name|Test
specifier|public
name|void
name|getPrivileges
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|NOT_READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see PermissionProvider#getPrivileges(org.apache.jackrabbit.oak.api.Tree)      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesAtCug
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|cugPermProvider
operator|.
name|getPrivileges
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see PermissionProvider#getPrivileges(org.apache.jackrabbit.oak.api.Tree)      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesAtCug2
parameter_list|()
block|{
name|PermissionProvider
name|pp
init|=
operator|new
name|CugPermissionProvider
argument_list|(
name|root
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testGroupPrincipal
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|,
name|CugContext
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|pp
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/bb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|.
name|getPrivileges
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------< hasPrivileges>---
comment|/**      * @see PermissionProvider#hasPrivileges(org.apache.jackrabbit.oak.api.Tree, String...)      */
annotation|@
name|Test
specifier|public
name|void
name|testHasReadPrivileges
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|NOT_READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see PermissionProvider#hasPrivileges(org.apache.jackrabbit.oak.api.Tree, String...)      */
annotation|@
name|Test
specifier|public
name|void
name|testHasReadPrivilegesAtCug
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see PermissionProvider#hasPrivileges(org.apache.jackrabbit.oak.api.Tree, String...)      */
annotation|@
name|Test
specifier|public
name|void
name|hasNonReadPrivileges
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|READABLE_PATHS
argument_list|,
name|NOT_READABLE_PATHS
argument_list|)
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//--------------------------------------------< getRepositoryPermission>---
comment|/**      * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.PermissionProvider#getRepositoryPermission()      */
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryPermissions
parameter_list|()
block|{
name|assertSame
argument_list|(
name|RepositoryPermission
operator|.
name|EMPTY
argument_list|,
name|cugPermProvider
operator|.
name|getRepositoryPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------< getTreePermission>---
comment|/**      * @see PermissionProvider#getTreePermission(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.spi.security.authorization.permission.TreePermission)      */
annotation|@
name|Test
specifier|public
name|void
name|testGetTreePermissions
parameter_list|()
throws|throws
name|AccessDeniedException
block|{
name|TreePermission
name|rootTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTp
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|contentTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|SUPPORTED_PATH
argument_list|)
argument_list|,
name|rootTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|contentTp
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|aTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a"
argument_list|)
argument_list|,
name|contentTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aTp
operator|instanceof
name|CugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|bTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b"
argument_list|)
argument_list|,
name|aTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bTp
operator|instanceof
name|CugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|cTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/b/c"
argument_list|)
argument_list|,
name|bTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cTp
operator|instanceof
name|CugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|aaTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa"
argument_list|)
argument_list|,
name|contentTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aaTp
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|bbTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/bb"
argument_list|)
argument_list|,
name|aaTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bbTp
operator|instanceof
name|CugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|ccTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/bb/cc"
argument_list|)
argument_list|,
name|bbTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ccTp
operator|instanceof
name|CugTreePermission
argument_list|)
expr_stmt|;
comment|// false cug-policy node (wrong nt)
name|Tree
name|aaTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa"
argument_list|)
decl_stmt|;
operator|new
name|NodeUtil
argument_list|(
name|aaTree
argument_list|)
operator|.
name|addChild
argument_list|(
name|CugConstants
operator|.
name|REP_CUG_POLICY
argument_list|,
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|TreePermission
name|aaTp2
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa"
argument_list|)
argument_list|,
name|contentTp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aaTp2
operator|instanceof
name|EmptyCugTreePermission
argument_list|)
expr_stmt|;
name|TreePermission
name|falseCugTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/aa/rep:cugPolicy"
argument_list|)
argument_list|,
name|aaTp2
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|falseCugTp
argument_list|)
expr_stmt|;
comment|// cug content
name|TreePermission
name|cugTp
init|=
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/content/a/rep:cugPolicy"
argument_list|)
argument_list|,
name|aTp
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|cugTp
argument_list|)
expr_stmt|;
comment|// paths that may not contain cugs anyway
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/jcr:system"
argument_list|)
argument_list|,
name|rootTp
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|cugPermProvider
operator|.
name|getTreePermission
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|UNSUPPORTED_PATH
argument_list|)
argument_list|,
name|rootTp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//-------------------------------< isGranted(Tree, PropertyState, long)>---
comment|/**      * @see PermissionProvider#isGranted(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.api.PropertyState, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedNonRead
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|READABLE_PATHS
argument_list|,
name|NOT_READABLE_PATHS
argument_list|)
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see PermissionProvider#isGranted(org.apache.jackrabbit.oak.api.Tree, org.apache.jackrabbit.oak.api.PropertyState, long)      */
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedRead
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|NOT_READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|p
range|:
name|READABLE_PATHS
control|)
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
name|tree
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------< isGranted(String, String)>---
comment|/**      * @see PermissionProvider#isGranted(String, String)      */
annotation|@
name|Test
specifier|public
name|void
name|testIsGrantedJcrActions
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|NOT_READABLE_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|','
operator|+
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|READABLE_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cugPermProvider
operator|.
name|isGranted
argument_list|(
name|p
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|','
operator|+
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

