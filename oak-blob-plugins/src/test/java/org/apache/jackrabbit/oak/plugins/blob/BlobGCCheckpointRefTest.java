begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Adds BlobGC tests related to retrieving oldest checkpoint reference  */
end_comment

begin_class
specifier|public
class|class
name|BlobGCCheckpointRefTest
extends|extends
name|BlobGCTest
block|{
specifier|protected
name|CheckpointMBean
name|checkpointMBean
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|checkpointMBean
operator|=
operator|new
name|MemoryStoreCheckpointMBean
argument_list|(
name|cluster
operator|.
name|nodeStore
argument_list|,
name|clock
argument_list|)
expr_stmt|;
name|WhiteboardUtils
operator|.
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|CheckpointMBean
operator|.
name|class
argument_list|,
name|checkpointMBean
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Test checkpoint mbean"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcCheckpointHeld
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring gcCheckpointHeld()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"afterSetupTime {}"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|checkpointMBean
operator|.
name|createCheckpoint
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|afterCheckpointBlobs
init|=
name|createBlobs
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|present
init|=
name|Sets
operator|.
name|union
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|afterCheckpointBlobs
argument_list|)
decl_stmt|;
name|long
name|maxGcAge
init|=
name|checkpointMBean
operator|.
name|getOldestCheckpointCreationTimestamp
argument_list|()
operator|-
name|afterSetupTime
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs remaining : {}"
argument_list|,
name|present
operator|.
name|size
argument_list|()
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
name|maxGcAge
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|present
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcCheckpointHeldNoAddition
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring gcCheckpointHeldNoAddition()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"afterSetupTime {}"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|checkpointMBean
operator|.
name|createCheckpoint
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|long
name|maxGcAge
init|=
name|checkpointMBean
operator|.
name|getOldestCheckpointCreationTimestamp
argument_list|()
operator|-
name|afterSetupTime
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
name|maxGcAge
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gcCheckpointHeldMaxAgeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Staring gcCheckpointHeldMaxAgeChange()"
argument_list|)
expr_stmt|;
name|long
name|afterSetupTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} afterSetupTime time"
argument_list|,
name|afterSetupTime
argument_list|)
expr_stmt|;
name|checkpointMBean
operator|.
name|createCheckpoint
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|afterCheckpointBlobs
init|=
name|createBlobs
argument_list|(
name|cluster
operator|.
name|blobStore
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|addAll
argument_list|(
name|afterCheckpointBlobs
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs added : {}"
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsAdded
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} blobs remaining : {}"
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|)
expr_stmt|;
name|long
name|maxGcAge
init|=
name|checkpointMBean
operator|.
name|getOldestCheckpointCreationTimestamp
argument_list|()
operator|-
name|afterSetupTime
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Max age configured {}"
argument_list|,
name|maxGcAge
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAfterGC
init|=
name|executeGarbageCollection
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|getCollector
argument_list|(
name|maxGcAge
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|cluster
operator|.
name|blobStoreState
operator|.
name|blobsPresent
argument_list|,
name|existingAfterGC
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * CheckpointMBean implementation for MemoryNodeStore      */
specifier|static
class|class
name|MemoryStoreCheckpointMBean
implements|implements
name|CheckpointMBean
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CREATION_DATE
init|=
literal|"creationDate"
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|public
name|MemoryStoreCheckpointMBean
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|listCheckpoints
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOldestCheckpointCreationTimestamp
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|nodeStore
operator|.
name|checkpoints
argument_list|()
decl_stmt|;
name|long
name|minCreationDate
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|checkpoint
range|:
name|checkpoints
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|chkInfo
init|=
name|nodeStore
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|chkInfo
operator|.
name|containsKey
argument_list|(
name|CREATION_DATE
argument_list|)
operator|&&
name|Long
operator|.
name|valueOf
argument_list|(
name|chkInfo
operator|.
name|get
argument_list|(
name|CREATION_DATE
argument_list|)
argument_list|)
operator|<
name|minCreationDate
condition|)
block|{
name|minCreationDate
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|chkInfo
operator|.
name|get
argument_list|(
name|CREATION_DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minCreationDate
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|minCreationDate
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|minCreationDate
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getOldestCheckpointCreationDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|getOldestCheckpointCreationTimestamp
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createCheckpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CREATION_DATE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|checkpoint
init|=
name|nodeStore
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|checkpoint
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|releaseCheckpoint
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|nodeStore
operator|.
name|release
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

