begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|benchmarks
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityBlobSearchSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityNodeSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|scalability
operator|.
name|suites
operator|.
name|ScalabilityAbstractSuite
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|RowIterator
import|;
end_import

begin_comment
comment|/**  * Splits the search in {@link org.apache.jackrabbit.oak.scalability.benchmarks.search.OrderBySearcher} to multiple  * queries and unions the results.  *  */
end_comment

begin_class
specifier|public
class|class
name|SplitOrderBySearcher
extends|extends
name|OrderBySearcher
block|{
annotation|@
name|Override
specifier|protected
name|void
name|search
parameter_list|(
name|QueryManager
name|qm
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|searchCommon
argument_list|(
name|qm
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|qm
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|QueryResult
name|r
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|it
init|=
name|r
operator|.
name|getRows
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|rows
init|=
literal|0
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|rows
operator|<
name|LIMIT
condition|;
name|rows
operator|++
control|)
block|{
name|Node
name|node
init|=
name|it
operator|.
name|nextRow
argument_list|()
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|searchCommon
parameter_list|(
name|QueryManager
name|qm
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|/** Execute standard query */
name|Query
name|stdQuery
init|=
name|getStandardQuery
argument_list|(
name|qm
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|stdQuery
operator|.
name|setLimit
argument_list|(
name|LIMIT
argument_list|)
expr_stmt|;
name|QueryResult
name|stdResult
init|=
name|stdQuery
operator|.
name|execute
argument_list|()
decl_stmt|;
name|RowIterator
name|stdIt
init|=
name|stdResult
operator|.
name|getRows
argument_list|()
decl_stmt|;
comment|// Iterate the standard shown first
for|for
control|(
name|int
name|rows
init|=
literal|0
init|;
name|stdIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|rows
operator|<
name|LIMIT
condition|;
name|rows
operator|++
control|)
block|{
name|Node
name|node
init|=
name|stdIt
operator|.
name|nextRow
argument_list|()
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Query
name|getStandardQuery
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|QueryManager
name|qm
parameter_list|,
name|ExecutionContext
name|context
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// /jcr:root/LongevitySearchAssets/12345//element(*, ParentType)[(@viewed = 'true')]
name|StringBuilder
name|statement
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/jcr:root/"
argument_list|)
decl_stmt|;
name|statement
operator|.
name|append
argument_list|(
operator|(
operator|(
name|String
operator|)
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|ScalabilityBlobSearchSuite
operator|.
name|CTX_ROOT_NODE_NAME_PROP
argument_list|)
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"//element(*, "
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|ScalabilityNodeSuite
operator|.
name|CTX_ACT_NODE_TYPE_PROP
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|append
argument_list|(
literal|"[("
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|ScalabilityNodeSuite
operator|.
name|SORT_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|"= 'true'"
argument_list|)
operator|.
name|append
argument_list|(
literal|")]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|statement
argument_list|)
expr_stmt|;
return|return
name|qm
operator|.
name|createQuery
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getOrderByClause
parameter_list|()
block|{
return|return
literal|" order by"
operator|+
literal|" @"
operator|+
name|ScalabilityNodeSuite
operator|.
name|DATE_PROP
operator|+
literal|" descending"
return|;
block|}
block|}
end_class

end_unit

