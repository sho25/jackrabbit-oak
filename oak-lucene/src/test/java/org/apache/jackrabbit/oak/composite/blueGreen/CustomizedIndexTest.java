begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|blueGreen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * Tests customized indexes.  */
end_comment

begin_class
specifier|public
class|class
name|CustomizedIndexTest
block|{
specifier|private
specifier|final
name|Persistence
operator|.
name|Config
name|config
init|=
operator|new
name|Persistence
operator|.
name|Config
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|globalDir
decl_stmt|;
specifier|private
name|File
name|libs1Dir
decl_stmt|;
specifier|private
name|File
name|libs2Dir
decl_stmt|;
specifier|private
name|File
name|datastoreDir
decl_stmt|;
specifier|private
name|File
name|indexDir
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|createFolders
argument_list|()
expr_stmt|;
name|config
operator|.
name|blobStore
operator|=
name|Persistence
operator|.
name|getFileBlobStore
argument_list|(
name|datastoreDir
argument_list|)
expr_stmt|;
name|config
operator|.
name|indexDir
operator|=
name|indexDir
expr_stmt|;
name|initLibs1
argument_list|()
expr_stmt|;
name|initGlobal
argument_list|()
expr_stmt|;
name|compositeLibs1
argument_list|()
expr_stmt|;
name|initLibs2
argument_list|()
expr_stmt|;
name|compositeLibs2
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initLibs1
parameter_list|()
throws|throws
name|Exception
block|{
name|Persistence
name|p
init|=
name|Persistence
operator|.
name|open
argument_list|(
name|libs1Dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|p
operator|.
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|p
operator|.
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|IndexUtils
operator|.
name|createIndex
argument_list|(
name|p
argument_list|,
literal|"test-1"
argument_list|,
literal|"foo"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo]"
argument_list|,
literal|"test-1"
argument_list|,
literal|"[/libs/test]"
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initGlobal
parameter_list|()
throws|throws
name|Exception
block|{
name|Persistence
name|p
init|=
name|Persistence
operator|.
name|open
argument_list|(
name|globalDir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|p
operator|.
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"content"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|p
operator|.
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|compositeLibs1
parameter_list|()
throws|throws
name|Exception
block|{
name|Persistence
name|p
init|=
name|Persistence
operator|.
name|openComposite
argument_list|(
name|globalDir
argument_list|,
name|libs1Dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|IndexUtils
operator|.
name|checkLibsIsReadOnly
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|createIndex
argument_list|(
name|p
argument_list|,
literal|"test-1"
argument_list|,
literal|"foo"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo] order by @jcr:path"
argument_list|,
literal|"test-1"
argument_list|,
literal|"[/content/test, /libs/test]"
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|compositeLibs2
parameter_list|()
throws|throws
name|Exception
block|{
name|Persistence
name|p
init|=
name|Persistence
operator|.
name|openComposite
argument_list|(
name|globalDir
argument_list|,
name|libs2Dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|IndexUtils
operator|.
name|checkLibsIsReadOnly
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|createIndex
argument_list|(
name|p
argument_list|,
literal|"test-2"
argument_list|,
literal|"foo"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo] order by @jcr:path"
argument_list|,
literal|"test-2"
argument_list|,
literal|"[/content/test, /libs/test2]"
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// the new index must not be used in the old version (wiht libs1)
name|p
operator|=
name|Persistence
operator|.
name|openComposite
argument_list|(
name|globalDir
argument_list|,
name|libs1Dir
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo] order by @jcr:path"
argument_list|,
literal|"test-1"
argument_list|,
literal|"[/content/test, /libs/test]"
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initLibs2
parameter_list|()
throws|throws
name|Exception
block|{
name|Persistence
name|p
init|=
name|Persistence
operator|.
name|open
argument_list|(
name|libs2Dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|p
operator|.
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|p
operator|.
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|IndexUtils
operator|.
name|createIndex
argument_list|(
name|p
argument_list|,
literal|"test-1"
argument_list|,
literal|"foo"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo]"
argument_list|,
literal|"test-1"
argument_list|,
literal|"[/libs/test2]"
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|createIndex
argument_list|(
name|p
argument_list|,
literal|"test-2"
argument_list|,
literal|"foo"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|IndexUtils
operator|.
name|assertQueryUsesIndexAndReturns
argument_list|(
name|p
argument_list|,
literal|"/jcr:root//*[@foo]"
argument_list|,
literal|"test-2"
argument_list|,
literal|"[/libs/test2]"
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createFolders
parameter_list|()
throws|throws
name|IOException
block|{
name|globalDir
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|(
literal|"global"
argument_list|)
expr_stmt|;
name|libs1Dir
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|(
literal|"libs1"
argument_list|)
expr_stmt|;
name|libs2Dir
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|(
literal|"libs2"
argument_list|)
expr_stmt|;
name|datastoreDir
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|(
literal|"datastore"
argument_list|)
expr_stmt|;
name|indexDir
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

