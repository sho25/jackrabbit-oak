begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiBinaryPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|SharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|DefaultStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|StatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
operator|.
name|encodeHexString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyInputStreamToFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ConsolidatedDataStoreStatsTest
extends|extends
name|AbstractDataStoreCacheTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsolidatedDataStoreStatsTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_PREFIX
init|=
literal|"12345"
decl_stmt|;
specifier|private
specifier|static
name|String
name|testNodePathName
init|=
literal|"test/node/path/name"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedEx
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|File
name|root
decl_stmt|;
specifier|private
name|File
name|testFile
decl_stmt|;
specifier|private
name|CountDownLatch
name|taskLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|callbackLatch
decl_stmt|;
specifier|private
name|CountDownLatch
name|afterExecuteLatch
decl_stmt|;
specifier|private
name|TestExecutor
name|executor
decl_stmt|;
specifier|private
name|StatisticsProvider
name|statsProvider
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduledExecutor
decl_stmt|;
specifier|private
name|ConsolidatedDataStoreCacheStats
name|stats
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|AbstractSharedCachingDataStore
name|dataStore
decl_stmt|;
specifier|private
specifier|static
name|Blob
name|mockBlob
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|folder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|init
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|testFile
operator|=
name|folder
operator|.
name|newFile
argument_list|()
expr_stmt|;
name|copyInputStreamToFile
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
literal|16384
argument_list|)
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|String
name|testNodeId
init|=
name|getIdForInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
decl_stmt|;
name|mockBlob
operator|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testNodeId
argument_list|)
expr_stmt|;
name|nodeStore
operator|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
expr_stmt|;
comment|// create executor
name|taskLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|callbackLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|afterExecuteLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|TestExecutor
argument_list|(
literal|1
argument_list|,
name|taskLatch
argument_list|,
name|callbackLatch
argument_list|,
name|afterExecuteLatch
argument_list|)
expr_stmt|;
comment|// stats
name|ScheduledExecutorService
name|statsExecutor
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|statsExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|statsProvider
operator|=
operator|new
name|DefaultStatisticsProvider
argument_list|(
name|statsExecutor
argument_list|)
expr_stmt|;
name|scheduledExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
operator|new
name|ExecutorCloser
argument_list|(
name|scheduledExecutor
argument_list|,
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|dataStore
operator|=
operator|new
name|AbstractSharedCachingDataStore
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SharedBackend
name|createBackend
parameter_list|()
block|{
return|return
operator|new
name|TestMemoryBackend
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinRecordLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
expr_stmt|;
name|dataStore
operator|.
name|setStatisticsProvider
argument_list|(
name|statsProvider
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|listeningExecutor
operator|=
name|executor
expr_stmt|;
name|dataStore
operator|.
name|schedulerExecutor
operator|=
name|scheduledExecutor
expr_stmt|;
name|dataStore
operator|.
name|init
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
operator|new
name|ConsolidatedDataStoreCacheStats
argument_list|()
expr_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|stats
operator|.
name|cachingDataStore
operator|=
name|dataStore
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tear
parameter_list|()
throws|throws
name|Exception
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getIdForInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|,
name|digest
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|encodeHexString
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeStore
name|initNodeStore
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Blob
argument_list|>
name|blobProp1
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Blob
argument_list|>
name|blobProp2
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|stringProp
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|intProp
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|Blob
argument_list|>
argument_list|>
name|blobPropList
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|initNodeBuilder
argument_list|(
name|rootBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobProp1
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blobProp1"
argument_list|,
name|blobProp1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobProp2
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"blobProp2"
argument_list|,
name|blobProp2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stringProp
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"stringProp"
argument_list|,
name|stringProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intProp
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
literal|"intProp"
argument_list|,
name|intProp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobPropList
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|MultiBinaryPropertyState
operator|.
name|binaryPropertyFromBlob
argument_list|(
literal|"blobPropList"
argument_list|,
name|blobPropList
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|nodeStore
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|initNodeBuilder
parameter_list|(
specifier|final
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|nodeName
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|testNodePathName
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|differentPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|NodeStore
name|nodeStore
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
name|stats
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
specifier|final
name|String
name|path1
init|=
literal|"path/to/node/1"
decl_stmt|;
specifier|final
name|String
name|path2
init|=
literal|"path/to/node/2"
decl_stmt|;
specifier|final
name|String
name|path3
init|=
literal|"shortpath"
decl_stmt|;
specifier|final
name|String
name|path4
init|=
literal|"a/very/very/long/path/leads/to/node/4"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|,
name|path3
argument_list|,
name|path4
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leadingSlashPath
init|=
literal|"/"
operator|+
name|path1
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|blobContents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|blobIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
name|blobContents
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blobIds
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|NodeBuilder
name|rootBuilder
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|NodeBuilder
argument_list|>
name|builders
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|path
range|:
name|paths
control|)
block|{
name|NodeBuilder
name|builder
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|nodeName
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob1"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob2"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob3"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"blob4"
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStore
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DataRecord
argument_list|>
name|records
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|String
name|s
range|:
name|blobContents
control|)
block|{
name|records
operator|.
name|add
argument_list|(
name|dataStore
operator|.
name|addRecord
argument_list|(
name|getStream
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|path
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|,
name|path3
argument_list|,
name|path4
argument_list|,
name|leadingSlashPath
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|stats
operator|.
name|isFileSynced
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|invalidPath
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|path1
operator|+
literal|"/"
argument_list|,
literal|"/"
operator|+
name|path1
operator|+
literal|"/"
argument_list|,
literal|"/path//to/node///1"
argument_list|)
control|)
block|{
try|try
block|{
name|stats
operator|.
name|isFileSynced
argument_list|(
name|invalidPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// shouldn't get here on an invalid path
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
finally|finally
block|{
name|delete
argument_list|(
name|dataStore
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|multiplePropertiesAndBinarySynced
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|123
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleBinaryPropsAllSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob2
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleBinaryPropsNotAllSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob2
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|List
argument_list|<
name|Blob
argument_list|>
operator|>
name|absent
argument_list|()
argument_list|)
decl_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryPropSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binariesPropertyMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|,
name|mockBlob2
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedTrue
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binariesPropertyNotAllSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob
argument_list|,
name|mockBlob2
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binarySyncedAndBinariesNotSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryNotSyncedAndBinariesSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryAndBinariesSynced
parameter_list|()
throws|throws
name|Exception
block|{
name|Blob
name|mockBlob2
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id2
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob2
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|Blob
name|mockBlob3
init|=
name|mock
argument_list|(
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|id3
init|=
name|getIdForInputStream
argument_list|(
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockBlob3
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Blob
argument_list|>
name|blobPropList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mockBlob2
argument_list|,
name|mockBlob3
argument_list|)
decl_stmt|;
name|NodeStore
name|nodeStore
init|=
name|initNodeStore
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|mockBlob
argument_list|)
argument_list|,
name|Optional
operator|.
expr|<
name|Blob
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|String
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
expr|<
name|Integer
operator|>
name|absent
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|blobPropList
argument_list|)
argument_list|)
decl_stmt|;
name|assertSyncedFalse
argument_list|(
name|stats
argument_list|,
name|dataStore
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents2"
argument_list|)
argument_list|,
name|getStream
argument_list|(
literal|"testContents3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|AbstractSharedCachingDataStore
name|s3ds
parameter_list|,
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
parameter_list|)
throws|throws
name|DataStoreException
block|{
for|for
control|(
name|DataRecord
name|rec
range|:
name|recs
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|rec
condition|)
block|{
name|s3ds
operator|.
name|deleteRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertSyncedFalse
parameter_list|(
name|ConsolidatedDataStoreCacheStats
name|mBean
parameter_list|,
name|AbstractSharedCachingDataStore
name|s3ds
parameter_list|,
name|InputStream
modifier|...
name|streams
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|InputStream
name|is
range|:
name|streams
control|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|s3ds
operator|.
name|addRecord
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|mBean
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitFinish
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|s3ds
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSyncedTrue
parameter_list|(
name|ConsolidatedDataStoreCacheStats
name|mBean
parameter_list|,
name|AbstractSharedCachingDataStore
name|s3ds
parameter_list|,
name|InputStream
modifier|...
name|streams
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|taskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|callbackLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DataRecord
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|InputStream
name|is
range|:
name|streams
control|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|s3ds
operator|.
name|addRecord
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|waitFinish
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mBean
operator|.
name|isFileSynced
argument_list|(
name|testNodePathName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|(
name|s3ds
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitFinish
parameter_list|()
block|{
try|try
block|{
comment|// wait for upload finish
name|afterExecuteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Force execute removal from staging cache
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
init|=
name|scheduledExecutor
operator|.
name|schedule
argument_list|(
name|dataStore
operator|.
name|getCache
argument_list|()
operator|.
name|getStagingCache
argument_list|()
operator|.
operator|new
name|RemoveJob
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduledFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After jobs completed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|InputStream
name|getStream
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

