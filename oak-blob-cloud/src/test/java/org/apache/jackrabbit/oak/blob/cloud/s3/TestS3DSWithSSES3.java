begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test S3DataStore operation with SSE_S3 encryption.  * It requires to pass aws config file via system property  or system properties by prefixing with 'ds.'.  * See details @ {@link S3DataStoreUtils}.  * For e.g. -Dconfig=/opt/cq/aws.properties. Sample aws properties located at  * src/test/resources/aws.properties   */
end_comment

begin_class
specifier|public
class|class
name|TestS3DSWithSSES3
extends|extends
name|TestS3Ds
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestS3DSWithSSES3
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|,
name|S3Constants
operator|.
name|S3_ENCRYPTION_SSE_S3
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"cacheSize"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test data migration enabling SSE_S3 encryption.      */
annotation|@
name|Test
specifier|public
name|void
name|testDataMigration
parameter_list|()
block|{
try|try
block|{
comment|//manually close the setup ds and remove encryption
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|)
expr_stmt|;
name|ds
operator|=
name|createDataStore
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLength
index|]
decl_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|DataRecord
name|rec
init|=
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// turn encryption now anc recreate datastore instance
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_ENCRYPTION
argument_list|,
name|S3Constants
operator|.
name|S3_ENCRYPTION_SSE_S3
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|S3Constants
operator|.
name|S3_RENAME_KEYS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ds
operator|=
name|createDataStore
argument_list|()
expr_stmt|;
name|rec
operator|=
name|ds
operator|.
name|getRecord
argument_list|(
name|rec
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|rec
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|data
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|randomGen
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ds
operator|.
name|addRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

