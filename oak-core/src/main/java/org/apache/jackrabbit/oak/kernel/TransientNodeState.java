begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|EmptyIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|FilterIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|IteratorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|TransformIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|PagedIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|Function1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|add
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|TransientNodeState
operator|.
name|Iterators
operator|.
name|map
import|;
end_import

begin_comment
comment|/**  * A transient node state represents a node being edited. All edit operations are  * done through an associated {@link org.apache.jackrabbit.mk.model.NodeStateEditor}.  *<p>  * A transient node state contains the current state of a node and is  * in contrast to {@link org.apache.jackrabbit.mk.model.NodeState} instances  * mutable and not thread safe.  *<p>  * The various accessors on this class mirror these of {@code NodeState}. However,  * since instances of this class are mutable return values may change between  * invocations.  */
end_comment

begin_class
specifier|public
class|class
name|TransientNodeState
block|{
comment|/** Editor acting upon this instance */
specifier|private
specifier|final
name|KernelNodeStateEditor
name|editor
decl_stmt|;
comment|/**      * Underlying persistent state or {@code null} if this instance represents an      * added node state      */
specifier|private
specifier|final
name|NodeState
name|persistentState
decl_stmt|;
comment|/** Resolved persistent child states */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
name|existingChildNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently added node states */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
name|addedNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently removed node stated */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently added property states */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|addedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Transiently removed property states */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Name of this state */
specifier|private
name|String
name|name
decl_stmt|;
comment|/** Parent of this state */
specifier|private
name|TransientNodeState
name|parent
decl_stmt|;
comment|/**      * Create a new instance representing the root of a sub-tree.      * @param persistentState  underlying persistent state      * @param editor  editor acting upon the transient node state      */
name|TransientNodeState
parameter_list|(
name|NodeState
name|persistentState
parameter_list|,
name|KernelNodeStateEditor
name|editor
parameter_list|)
block|{
name|this
operator|.
name|editor
operator|=
name|editor
expr_stmt|;
name|this
operator|.
name|persistentState
operator|=
name|persistentState
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|""
expr_stmt|;
block|}
comment|/**      * Create a new instance representing a added node state      * @param parentEditor  editor of the parent state      * @param name  name of the state      */
specifier|private
name|TransientNodeState
parameter_list|(
name|KernelNodeStateEditor
name|parentEditor
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|parentEditor
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance with an underlying persistent state      * @param parentEditor  editor of the parent state      * @param name  name of the state      * @param persistedState  underlying persistent state      */
specifier|private
name|TransientNodeState
parameter_list|(
name|KernelNodeStateEditor
name|parentEditor
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|persistedState
parameter_list|)
block|{
name|editor
operator|=
operator|new
name|KernelNodeStateEditor
argument_list|(
name|parentEditor
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|persistentState
operator|=
name|persistedState
expr_stmt|;
name|parent
operator|=
name|parentEditor
operator|.
name|getTransientState
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Copy constructor: create a deep copy of the passed {@code state} with      * the given {@code name} and {@code parent}.      * @param state  state to copy      * @param parent  parent of the copied state      * @param name  name of the copied state      */
specifier|private
name|TransientNodeState
parameter_list|(
name|TransientNodeState
name|state
parameter_list|,
name|TransientNodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|editor
operator|=
operator|new
name|KernelNodeStateEditor
argument_list|(
name|parent
operator|.
name|getEditor
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|persistentState
operator|=
name|state
operator|.
name|persistentState
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
comment|// recursively copy all existing node states
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
name|existing
range|:
name|state
operator|.
name|existingChildNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|existingName
init|=
name|existing
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|this
operator|.
name|existingChildNodes
operator|.
name|put
argument_list|(
name|existingName
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|existing
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
argument_list|,
name|existingName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recursively copy all added node states
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TransientNodeState
argument_list|>
name|added
range|:
name|state
operator|.
name|addedNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|addedName
init|=
name|added
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|this
operator|.
name|addedNodes
operator|.
name|put
argument_list|(
name|addedName
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|added
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
argument_list|,
name|addedName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|removedNodes
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|removedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|addedProperties
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|addedProperties
argument_list|)
expr_stmt|;
name|this
operator|.
name|removedProperties
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|removedProperties
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return  the name of this transient node state      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return  relative path of this transient node state      */
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
else|else
block|{
name|String
name|path
init|=
name|parent
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
else|:
name|path
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
block|}
specifier|public
name|TransientNodeState
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**      * @return  editor acting upon this instance      */
specifier|public
name|KernelNodeStateEditor
name|getEditor
parameter_list|()
block|{
return|return
name|editor
return|;
block|}
comment|/**      * Get a property state      * @param name name of the property state      * @return  the property state with the given {@code name} or {@code null}      *          if no such property state exists.      */
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|state
init|=
name|addedProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// Added or removed and re-added property
return|return
name|state
return|;
block|}
comment|// Existing property unless removed
return|return
name|removedProperties
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|persistentState
operator|==
literal|null
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Determine if a property state exists      * @param name  name of the property state      * @return  {@code true} if and only if a property with the given {@code name}      *          exists.      */
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Determine the number of properties.      * @return  number of properties      */
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
name|long
name|persistentCount
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|0
else|:
name|persistentState
operator|.
name|getPropertyCount
argument_list|()
decl_stmt|;
return|return
name|persistentCount
operator|+
name|addedProperties
operator|.
name|size
argument_list|()
operator|-
name|removedProperties
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Get a child node state      * @param name  name of the child node state      * @return  the child node state with the given {@code name} or {@code null}      *          if no such child node state exists.      */
specifier|public
name|TransientNodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TransientNodeState
name|state
init|=
name|addedNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
comment|// Added or removed and re-added child node
return|return
name|state
return|;
block|}
comment|// Existing child node unless removed
return|return
name|removedNodes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|getExistingChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Determine if a child node state exists      * @param name  name of the child node state      * @return  {@code true} if and only if a child node with the given {@code name}      *          exists.      */
specifier|public
name|boolean
name|hasNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Determine the number of child nodes.      * @return  number of child nodes.      */
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
name|long
name|persistentCount
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|0
else|:
name|persistentState
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
return|return
name|persistentCount
operator|+
name|addedNodes
operator|.
name|size
argument_list|()
operator|-
name|removedNodes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * All property states. The returned {@code Iterable} has snapshot semantics. That      * is, it reflect the state of this transient node state instance at the time of the      * call. Later changes to this instance are no visible to iterators obtained from      * the returned iterable.      * @return  An {@code Iterable} for all property states      */
specifier|public
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
comment|// Persisted property states
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|persisted
init|=
name|persistentState
operator|==
literal|null
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// Copy of removed property states
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedProperties
argument_list|)
expr_stmt|;
comment|// Copy of added and re-added property stated
specifier|final
name|Set
argument_list|<
name|PropertyState
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|addAll
argument_list|(
name|addedProperties
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filter removed property states from persisted property states
comment|// and add added property states
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// persisted states
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
init|=
name|persisted
operator|==
literal|null
condition|?
name|Iterators
operator|.
expr|<
name|PropertyState
operator|>
name|empty
argument_list|()
else|:
name|persisted
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// persisted states - removed states
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|persistedMinusRemoved
init|=
name|filter
argument_list|(
name|properties
argument_list|,
operator|new
name|Predicate
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
return|return
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted states - removed states + added states
return|return
name|add
argument_list|(
name|persistedMinusRemoved
argument_list|,
name|added
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * All child node states. The returned {@code Iterable} has snapshot semantics. That      * is, it reflect the state of this transient node state instance at the time of the      * call. Later changes to this instance are no visible to iterators obtained from      * the returned iterable.      * @return  An {@code Iterable} for all child node states      */
specifier|public
name|Iterable
argument_list|<
name|TransientNodeState
argument_list|>
name|getChildNodes
parameter_list|()
block|{
comment|// Copy od removed child node states
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedNodes
argument_list|)
expr_stmt|;
comment|// Copy od added and re-added child node states
specifier|final
name|Set
argument_list|<
name|TransientNodeState
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|TransientNodeState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|addAll
argument_list|(
name|addedNodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Filter removed child node entries from persisted child node entries,
comment|// map remaining child node entries to child node states and add added
comment|// child node states
return|return
operator|new
name|Iterable
argument_list|<
name|TransientNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|TransientNodeState
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// persisted entries
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|persisted
init|=
name|getPersistedChildNodeEntries
argument_list|(
name|persistentState
argument_list|)
decl_stmt|;
comment|// persisted entries - removed entries
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|persistedMinusRemovedEntries
init|=
name|filter
argument_list|(
name|persisted
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted states - removed states
name|Iterator
argument_list|<
name|TransientNodeState
argument_list|>
name|persistedMinusRemoved
init|=
name|map
argument_list|(
name|persistedMinusRemovedEntries
argument_list|,
operator|new
name|Function1
argument_list|<
name|ChildNodeEntry
argument_list|,
name|TransientNodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TransientNodeState
name|apply
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
name|getExistingChildNode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// persisted states - removed states + added states
return|return
name|add
argument_list|(
name|persistedMinusRemoved
argument_list|,
name|added
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|//------------------------------------------------------------< internal>---
comment|/**      * Add a new child node state with the given {@code name}.      * The behaviour of this method is not defined if a node state with that      * {@code name} already exists.      * @param name  name of the child node state      */
name|void
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|editor
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the child node state with the given {@code name}.      * Does nothing if there is no node state with the given {@code name}.      * @param name  name of the child node state      */
name|void
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedNodes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExistingNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Mark as removed if removing existing
name|removedNodes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set a property state.      * @param state  a property state      */
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
if|if
condition|(
name|hasExistingProperty
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|removedProperties
operator|.
name|add
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addedProperties
operator|.
name|put
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the property state with the given {@code name}.      * Does nothing if there is no property state with the given {@code name}.      * @param name  a property state      */
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasExistingProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Mark as removed if removing existing
name|removedProperties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Move the child node state with the given {@code name} to the new parent at      * The behaviour of this method is undefined if either this node state has      * no child node state with the given {@code name} or {@code destParent} already      * has a child node state of {@code destName}.      *      * @param name  name of the child node state to move      * @param destParent  parent of the moved node state      * @param destName  name of the moved node state      */
name|void
name|move
parameter_list|(
name|String
name|name
parameter_list|,
name|TransientNodeState
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|TransientNodeState
name|state
init|=
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|removeNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|state
operator|.
name|name
operator|=
name|destName
expr_stmt|;
name|state
operator|.
name|parent
operator|=
name|destParent
expr_stmt|;
name|destParent
operator|.
name|addedNodes
operator|.
name|put
argument_list|(
name|destName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the child node state with the given {@code name} to the new parent at      * The behaviour of this method is undefined if {@code destParent} already      * has a child node state of {@code destName}.      *      * @param name  name of the child node state to move      * @param destParent  parent of the moved node state      * @param destName  name of the moved node state      */
name|void
name|copy
parameter_list|(
name|String
name|name
parameter_list|,
name|TransientNodeState
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|destParent
operator|.
name|addedNodes
operator|.
name|put
argument_list|(
name|destName
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|,
name|destParent
argument_list|,
name|destName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a transient node state for a child node state which has      * an existing underlying persistent node date.      *      * @param name  name of the child node state      * @return  transient node state or {@code null} if this transient      *          node state does not have an underlying persistent state      *          or the underlying persistent state does not have a child      *          node state with the given {@code name}.      */
specifier|private
name|TransientNodeState
name|getExistingChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|persistentState
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TransientNodeState
name|transientState
init|=
name|existingChildNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|transientState
operator|==
literal|null
condition|)
block|{
name|NodeState
name|state
init|=
name|persistentState
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|transientState
operator|=
operator|new
name|TransientNodeState
argument_list|(
name|editor
argument_list|,
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|existingChildNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|transientState
argument_list|)
expr_stmt|;
block|}
return|return
name|transientState
return|;
block|}
comment|/**      * Determine whether there is an underling persistent state which has      * a child node state with the given {@code name}.      * @param name  name of the child node state.      * @return  {@code true} if and only if this transient node state has an      *          underlying persistent state which has a child node state with      *          the given {@code name}.      */
specifier|private
name|boolean
name|hasExistingNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|persistentState
operator|!=
literal|null
operator|&&
name|persistentState
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Determine whether there is an underling persistent state which has      * a property state with the given {@code name}.      * @param name  name of the property state.      * @return  {@code true} if and only if this transient node state has an      *          underlying persistent state which has a property state with      *          the given {@code name}.      */
specifier|private
name|boolean
name|hasExistingProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|persistentState
operator|!=
literal|null
operator|&&
name|persistentState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Iterator over all persisted child node entries of the given      * {@code persistentState}. This iterator reads the child node entries page wise      * with a page size of 1024 items.      * @param persistentState  persistent state for retrieving the child node entries from      * @return  iterator of child node entries      */
specifier|private
specifier|static
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getPersistedChildNodeEntries
parameter_list|(
specifier|final
name|NodeState
name|persistentState
parameter_list|)
block|{
if|if
condition|(
name|persistentState
operator|==
literal|null
condition|)
block|{
return|return
name|Iterators
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Iterators
operator|.
name|flatten
argument_list|(
operator|new
name|PagedIterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|(
literal|1024
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getPage
parameter_list|(
name|long
name|pos
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|persistentState
operator|.
name|getChildNodeEntries
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|// TODO: move to a more suitable location
specifier|static
specifier|final
class|class
name|Iterators
block|{
specifier|private
name|Iterators
parameter_list|()
block|{ }
comment|/**          * Returns an empty iterator of type {@code T}.          *          * @param<T>          * @return          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|empty
parameter_list|()
block|{
return|return
name|EmptyIterator
operator|.
name|INSTANCE
return|;
block|}
comment|/**          * Returns an iterator for the concatenation of {@code iterator1} and          * {@code iterator2}.          *          * @param<T>          * @param iterator1          * @param iterator2          * @return          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|add
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterator1
parameter_list|,
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterator2
parameter_list|)
block|{
return|return
operator|new
name|IteratorChain
argument_list|(
name|iterator1
argument_list|,
name|iterator2
argument_list|)
return|;
block|}
comment|/**          * Returns an iterator containing only the elements from an original          * {@code iterator} where the given {@code predicate} matches.          *          * @param<T>          * @param iterator          * @param predicate          * @return          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterator
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|FilterIterator
argument_list|(
name|iterator
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|predicate
operator|.
name|evaluate
argument_list|(
operator|(
name|T
operator|)
name|object
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**          * Returns an iterator with elements of an original  {@code iterator} mapped by          * a function {@code f}.          *          * @param<T>          * @param<R>          * @param<S>          * @param iterator          * @param f          * @return          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|,
name|S
extends|extends
name|T
parameter_list|>
name|Iterator
argument_list|<
name|R
argument_list|>
name|map
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|iterator
parameter_list|,
specifier|final
name|Function1
argument_list|<
name|S
argument_list|,
name|?
super|super
name|R
argument_list|>
name|f
parameter_list|)
block|{
return|return
operator|new
name|TransformIterator
argument_list|(
name|iterator
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
name|f
operator|.
name|apply
argument_list|(
operator|(
name|S
operator|)
name|input
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**          * Type safe counter part of {@link org.apache.commons.collections.Predicate}.          *          * @param<T> type of values this predicate is defined on          */
interface|interface
name|Predicate
parameter_list|<
name|T
parameter_list|>
block|{
name|boolean
name|evaluate
parameter_list|(
name|T
name|arg
parameter_list|)
function_decl|;
block|}
comment|/**          * Type safe counter part of {@link org.apache.commons.collections.Transformer}.          *          * @param<S>  argument type to transform from          * @param<T>  result type to transform to          */
specifier|public
interface|interface
name|Function1
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
block|{
name|T
name|apply
parameter_list|(
name|S
name|argument
parameter_list|)
function_decl|;
block|}
comment|/**          * Flattens an iterator of iterators into a single iterator.          * @param iterators          * @param<T>          * @return          */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|flatten
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|iterators
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|iterators
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
do|do
block|{
name|current
operator|=
name|iterators
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|current
operator|.
name|hasNext
argument_list|()
operator|&&
name|iterators
operator|.
name|hasNext
argument_list|()
condition|)
do|;
return|return
name|current
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|current
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**          * A {@code PagedIterator} is an iterator of several pages. A page itself is          * an iterator. The abstract {@code getPage} method is called whenever this          * iterator needs to fetch another page.<p/>          *          * Lazy flattening (e.g. with {@link Iterators#flatten(java.util.Iterator)}          * results in an iterator which does batch reading from its back end.          *          * @param<T>          */
specifier|public
specifier|abstract
specifier|static
class|class
name|PagedIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|pageSize
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|current
decl_stmt|;
specifier|protected
name|PagedIterator
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
block|}
comment|/**              * @param pos  start index              * @param size  maximal number of elements              * @return  iterator starting at index {@code pos} containing at most {@code size} elements.              */
specifier|protected
specifier|abstract
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getPage
parameter_list|(
name|long
name|pos
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
name|getPage
argument_list|(
name|pos
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|pageSize
expr_stmt|;
block|}
return|return
name|current
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|e
init|=
name|current
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

