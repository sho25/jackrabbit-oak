begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedBytes
import|;
end_import

begin_comment
comment|/**  * Version of the segment storage format.  *<ul>  *<li>10 = all Oak versions previous to 11</li>  *<li>11 = all Oak versions starting from 1.0.12, 1.1.7 and 1.2</li>  *</ul>  */
end_comment

begin_enum
specifier|public
enum|enum
name|SegmentVersion
block|{
comment|/**      * @deprecated Use latest version V11      */
annotation|@
name|Deprecated
name|V_10
argument_list|(
operator|(
name|byte
operator|)
literal|10
argument_list|)
block|,
name|V_11
argument_list|(
operator|(
name|byte
operator|)
literal|11
argument_list|)
block|;
comment|/**      * Latest segment version      */
specifier|public
specifier|static
name|SegmentVersion
name|LATEST_VERSION
init|=
name|max
argument_list|(
name|allOf
argument_list|(
name|SegmentVersion
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SegmentVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SegmentVersion
name|v1
parameter_list|,
name|SegmentVersion
name|v2
parameter_list|)
block|{
return|return
name|UnsignedBytes
operator|.
name|compare
argument_list|(
name|v1
operator|.
name|version
argument_list|,
name|v2
operator|.
name|version
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
name|version
decl_stmt|;
name|SegmentVersion
parameter_list|(
name|byte
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|boolean
name|onOrAfter
parameter_list|(
name|SegmentVersion
name|other
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
specifier|static
name|byte
name|asByte
parameter_list|(
name|SegmentVersion
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|version
return|;
block|}
specifier|public
specifier|static
name|SegmentVersion
name|fromByte
parameter_list|(
name|byte
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|V_11
operator|.
name|version
condition|)
block|{
return|return
name|V_11
return|;
block|}
elseif|else
if|if
condition|(
name|v
operator|==
name|V_10
operator|.
name|version
condition|)
block|{
return|return
name|V_10
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown version "
operator|+
name|v
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isValid
parameter_list|(
name|byte
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
name|V_10
operator|.
name|version
operator|||
name|v
operator|==
name|V_11
operator|.
name|version
return|;
block|}
block|}
end_enum

end_unit

