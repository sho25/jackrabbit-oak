begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
class|class
name|TestIdentityProvider
implements|implements
name|ExternalIdentityProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ID_TEST_USER
init|=
literal|"testUser"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_SECOND_USER
init|=
literal|"secondUser"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ID_EXCEPTION
init|=
literal|"throw!"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalGroup
argument_list|>
name|externalGroups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExternalGroup
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExternalUser
argument_list|>
name|externalUsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExternalUser
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TestIdentityProvider
parameter_list|()
block|{
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"aa"
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"aaa"
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"a"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|withGroups
argument_list|(
literal|"aa"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"b"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|withGroups
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"c"
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"secondGroup"
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addUser
argument_list|(
operator|new
name|TestUser
argument_list|(
name|ID_TEST_USER
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"name"
argument_list|,
literal|"Test User"
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"profile/name"
argument_list|,
literal|"Public Name"
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"profile/age"
argument_list|,
literal|72
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"email"
argument_list|,
literal|"test@testuser.com"
argument_list|)
operator|.
name|withGroups
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|addUser
argument_list|(
operator|new
name|TestUser
argument_list|(
name|ID_SECOND_USER
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"profile/name"
argument_list|,
literal|"Second User"
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"age"
argument_list|,
literal|24
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"col"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"v1"
argument_list|,
literal|"v2"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"boolArr"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"charArr"
argument_list|,
operator|new
name|char
index|[]
block|{
literal|'t'
block|,
literal|'o'
block|,
literal|'b'
block|}
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"byteArr"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
operator|.
name|withGroups
argument_list|(
literal|"secondGroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addUser
parameter_list|(
name|TestIdentity
name|user
parameter_list|)
block|{
name|externalUsers
operator|.
name|put
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|(
name|TestUser
operator|)
name|user
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addGroup
parameter_list|(
name|TestIdentity
name|group
parameter_list|)
block|{
name|externalGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|(
name|TestGroup
operator|)
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalIdentity
name|getIdentity
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentityRef
name|ref
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|ID_EXCEPTION
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
name|ID_EXCEPTION
argument_list|)
throw|;
block|}
name|ExternalIdentity
name|id
init|=
name|externalUsers
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
block|}
return|return
name|externalGroups
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|getUser
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|ID_EXCEPTION
operator|.
name|equals
argument_list|(
name|userId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
name|ID_EXCEPTION
argument_list|)
throw|;
block|}
return|return
name|externalUsers
operator|.
name|get
argument_list|(
name|userId
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalUser
name|authenticate
parameter_list|(
annotation|@
name|Nonnull
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|ExternalIdentityException
throws|,
name|LoginException
block|{
if|if
condition|(
operator|!
operator|(
name|credentials
operator|instanceof
name|SimpleCredentials
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SimpleCredentials
name|creds
init|=
operator|(
name|SimpleCredentials
operator|)
name|credentials
decl_stmt|;
name|TestUser
name|user
init|=
operator|(
name|TestUser
operator|)
name|getUser
argument_list|(
name|creds
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|new
name|String
argument_list|(
name|creds
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Invalid User/Password"
argument_list|)
throw|;
block|}
block|}
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExternalGroup
name|getGroup
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|)
throws|throws
name|ExternalIdentityException
block|{
if|if
condition|(
name|ID_EXCEPTION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExternalIdentityException
argument_list|(
name|ID_EXCEPTION
argument_list|)
throw|;
block|}
return|return
name|externalGroups
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalUser
argument_list|>
name|listUsers
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
return|return
name|externalUsers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ExternalGroup
argument_list|>
name|listGroups
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
return|return
name|externalGroups
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|TestIdentity
implements|implements
name|ExternalIdentity
block|{
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|String
name|principalName
decl_stmt|;
specifier|private
specifier|final
name|ExternalIdentityRef
name|id
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|ExternalIdentityRef
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TestIdentity
parameter_list|()
block|{
name|this
argument_list|(
literal|"externalId"
argument_list|,
literal|"principalName"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestIdentity
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|)
block|{
name|this
argument_list|(
name|userId
argument_list|,
name|userId
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestIdentity
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|principalName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|idpName
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|principalName
operator|=
name|principalName
expr_stmt|;
name|id
operator|=
operator|new
name|ExternalIdentityRef
argument_list|(
name|userId
argument_list|,
name|idpName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestIdentity
parameter_list|(
annotation|@
name|Nonnull
name|ExternalIdentity
name|base
parameter_list|)
block|{
name|userId
operator|=
name|base
operator|.
name|getId
argument_list|()
expr_stmt|;
name|principalName
operator|=
name|base
operator|.
name|getPrincipalName
argument_list|()
expr_stmt|;
name|id
operator|=
name|base
operator|.
name|getExternalId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
name|principalName
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ExternalIdentityRef
name|getExternalId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIntermediatePath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
specifier|protected
name|TestIdentity
name|withProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|TestIdentity
name|withGroups
parameter_list|(
name|String
modifier|...
name|grps
parameter_list|)
block|{
for|for
control|(
name|String
name|grp
range|:
name|grps
control|)
block|{
name|groups
operator|.
name|add
argument_list|(
operator|new
name|ExternalIdentityRef
argument_list|(
name|grp
argument_list|,
name|id
operator|.
name|getProviderName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestUser
extends|extends
name|TestIdentity
implements|implements
name|ExternalUser
block|{
specifier|public
name|TestUser
parameter_list|(
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|idpName
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|userId
argument_list|,
name|idpName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestGroup
extends|extends
name|TestIdentity
implements|implements
name|ExternalGroup
block|{
specifier|public
name|TestGroup
parameter_list|(
annotation|@
name|Nonnull
name|String
name|userId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|idpName
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|userId
argument_list|,
name|idpName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredMembers
parameter_list|()
throws|throws
name|ExternalIdentityException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|ForeignExternalUser
extends|extends
name|TestIdentityProvider
operator|.
name|TestIdentity
implements|implements
name|ExternalUser
block|{
specifier|public
name|ForeignExternalUser
parameter_list|()
block|{
name|super
argument_list|(
literal|"externalId"
argument_list|,
literal|"principalName"
argument_list|,
literal|"AnotherExternalIDP"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|ForeignExternalGroup
extends|extends
name|TestIdentityProvider
operator|.
name|TestIdentity
implements|implements
name|ExternalGroup
block|{
specifier|public
name|ForeignExternalGroup
parameter_list|()
block|{
name|super
argument_list|(
literal|"externalId"
argument_list|,
literal|"principalName"
argument_list|,
literal|"AnotherExternalIDP"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|ExternalIdentityRef
argument_list|>
name|getDeclaredMembers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

