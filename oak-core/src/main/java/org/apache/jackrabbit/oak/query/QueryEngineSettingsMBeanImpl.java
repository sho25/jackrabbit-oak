begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|QueryEngineSettingsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|jmx
operator|.
name|AnnotatedStandardMBean
import|;
end_import

begin_comment
comment|/**  * Settings of the query engine. This instance is an AnnotatedStandardMBean.  */
end_comment

begin_class
specifier|public
class|class
name|QueryEngineSettingsMBeanImpl
extends|extends
name|AnnotatedStandardMBean
implements|implements
name|QueryEngineSettingsMBean
block|{
specifier|private
specifier|final
name|QueryEngineSettings
name|settings
decl_stmt|;
comment|/**      * Create a new query engine settings object. Creating the object is      * relatively slow, and at runtime, as few such objects as possible should      * be created (ideally, only one per Oak instance). Creating new instances      * also means they can not be configured using JMX, as one would expect.      */
specifier|public
name|QueryEngineSettingsMBeanImpl
parameter_list|(
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|QueryEngineSettingsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
comment|/**      * Create a new query engine settings object. Creating the object is      * relatively slow, and at runtime, as few such objects as possible should      * be created (ideally, only one per Oak instance). Creating new instances      * also means they can not be configured using JMX, as one would expect.      */
specifier|public
name|QueryEngineSettingsMBeanImpl
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLimitInMemory
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getLimitInMemory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLimitInMemory
parameter_list|(
name|long
name|limitInMemory
parameter_list|)
block|{
name|settings
operator|.
name|setLimitInMemory
argument_list|(
name|limitInMemory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLimitReads
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getLimitReads
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLimitReads
parameter_list|(
name|long
name|limitReads
parameter_list|)
block|{
name|settings
operator|.
name|setLimitReads
argument_list|(
name|limitReads
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getFailTraversal
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getFailTraversal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFailTraversal
parameter_list|(
name|boolean
name|failQueriesWithoutIndex
parameter_list|)
block|{
name|settings
operator|.
name|setFailTraversal
argument_list|(
name|failQueriesWithoutIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFullTextComparisonWithoutIndex
parameter_list|(
name|boolean
name|fullTextComparisonWithoutIndex
parameter_list|)
block|{
name|settings
operator|.
name|setFullTextComparisonWithoutIndex
argument_list|(
name|fullTextComparisonWithoutIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getFullTextComparisonWithoutIndex
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getFullTextComparisonWithoutIndex
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSql2Optimisation
parameter_list|()
block|{
return|return
name|settings
operator|.
name|isSql2Optimisation
argument_list|()
return|;
block|}
specifier|public
name|QueryEngineSettings
name|unwrap
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|settings
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

