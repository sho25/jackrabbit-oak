begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newIdentityHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultWhiteboard
implements|implements
name|Whiteboard
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Service
argument_list|>
argument_list|>
name|registry
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|void
name|registered
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|registry
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|==
literal|null
condition|)
block|{
name|services
operator|=
name|newIdentityHashSet
argument_list|()
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|services
argument_list|)
expr_stmt|;
block|}
name|services
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|void
name|unregistered
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|registry
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
name|services
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|lookup
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|registry
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|services
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Service
operator|::
name|getService
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|lookup
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|)
block|{
name|Set
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|registry
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|services
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|matches
argument_list|(
name|filterProperties
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Service
operator|::
name|getService
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|//--------------------------------------------------------< Whiteboard>--
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Registration
name|register
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|T
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|Service
name|s
init|=
operator|new
name|Service
argument_list|(
name|service
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|registered
argument_list|(
name|type
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
operator|new
name|Registration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|unregistered
argument_list|(
name|type
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracker
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|lookup
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{             }
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Tracker
argument_list|<
name|T
argument_list|>
name|track
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracker
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|lookup
argument_list|(
name|type
argument_list|,
name|filterProperties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{             }
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|Service
block|{
specifier|private
specifier|final
name|Object
name|service
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|Service
parameter_list|(
annotation|@
name|Nonnull
name|Object
name|service
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|private
name|Object
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|this
operator|::
name|propertyMatches
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|propertyMatches
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterEntry
parameter_list|)
block|{
name|String
name|key
init|=
name|filterEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|expectedValue
init|=
name|filterEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|expectedValue
operator|==
literal|null
return|;
block|}
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|expectedValue
operator|==
literal|null
return|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

