begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_class
class|class
name|BinaryUtils
block|{
specifier|private
name|BinaryUtils
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
specifier|static
name|int
name|writeByte
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|position
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|value
expr_stmt|;
return|return
name|position
return|;
block|}
specifier|static
name|int
name|writeShort
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|position
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|position
operator|=
name|writeByte
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|=
name|writeByte
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|position
return|;
block|}
specifier|static
name|int
name|writeInt
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|position
operator|=
name|writeShort
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|short
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|=
name|writeShort
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|short
call|)
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|position
return|;
block|}
specifier|static
name|int
name|writeLong
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|position
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|position
operator|=
name|writeInt
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|int
call|)
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|=
name|writeInt
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
call|(
name|int
call|)
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|position
return|;
block|}
block|}
end_class

end_unit

