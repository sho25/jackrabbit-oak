begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|commons
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|MVStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|mvstore
operator|.
name|type
operator|.
name|StringDataType
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_class
specifier|public
class|class
name|PersistentCacheCommand
implements|implements
name|Command
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PERSISTENTCACHE
init|=
literal|"persistentcache"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|pathSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"path"
argument_list|,
literal|"only list entries starting with this path prefix"
argument_list|)
operator|.
name|withOptionalArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|revisionSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"revision"
argument_list|,
literal|"only list revisions that start with this prefix"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|mapSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"map"
argument_list|,
literal|"only print contents of this map"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|valuesSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"values"
argument_list|,
literal|"print values, not just keys and value lengths"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|rawSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"raw"
argument_list|,
literal|"print raw data (tab separated map name, key, length, value)"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|outSpec
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"out"
argument_list|,
literal|"print to this file instead of stdout"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
operator|.
name|defaultsTo
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|?
argument_list|>
name|helpSpec
init|=
name|parser
operator|.
name|acceptsAll
argument_list|(
name|asList
argument_list|(
literal|"h"
argument_list|,
literal|"?"
argument_list|,
literal|"help"
argument_list|)
argument_list|,
literal|"show help"
argument_list|)
operator|.
name|forHelp
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nonOptions
argument_list|(
literal|"persistent cache file (required)"
argument_list|)
operator|.
name|ofType
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|has
argument_list|(
name|helpSpec
argument_list|)
operator|||
name|options
operator|.
name|nonOptionArguments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mode: "
operator|+
name|PERSISTENTCACHE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Map names and statistic are listed if just the file name is specified."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To list all keys, just specify '/' and the file name."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To dump multiples files in one go, add multiple file names."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files are accessed in read-only mode; "
operator|+
literal|"to analyze a running system you need to copy the cache file first."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Output format is CSV (',' replaced with '#')"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To import in H2, use: "
operator|+
literal|"create table cache as select * from csvread('cache.csv', null, 'fieldDelimiter=')"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|parser
operator|.
name|printHelpOn
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|path
init|=
name|pathSpec
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|revision
init|=
name|revisionSpec
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|map
init|=
name|mapSpec
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|boolean
name|values
init|=
name|options
operator|.
name|has
argument_list|(
name|valuesSpec
argument_list|)
decl_stmt|;
name|boolean
name|raw
init|=
name|options
operator|.
name|has
argument_list|(
name|rawSpec
argument_list|)
decl_stmt|;
name|String
name|out
init|=
name|outSpec
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|PrintWriter
name|write
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|fileName
range|:
operator|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|options
operator|.
name|nonOptionArguments
argument_list|()
operator|)
control|)
block|{
name|dump
argument_list|(
name|write
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|map
argument_list|,
name|fileName
argument_list|,
name|values
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
name|write
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|dump
parameter_list|(
name|PrintWriter
name|write
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|map
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|values
parameter_list|,
name|boolean
name|raw
parameter_list|)
block|{
name|MVStore
name|s
init|=
operator|new
name|MVStore
operator|.
name|Builder
argument_list|()
operator|.
name|readOnly
argument_list|()
operator|.
name|fileName
argument_list|(
name|fileName
argument_list|)
operator|.
name|open
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
name|s
operator|.
name|getMetaMap
argument_list|()
decl_stmt|;
name|boolean
name|statsOnly
init|=
literal|""
operator|.
name|equalsIgnoreCase
argument_list|(
name|map
argument_list|)
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|statsOnly
condition|)
block|{
if|if
condition|(
name|raw
condition|)
block|{
name|write
operator|.
name|println
argument_list|(
literal|"map"
operator|+
literal|"\t"
operator|+
literal|"key"
operator|+
literal|"\t"
operator|+
literal|"length"
operator|+
literal|"\t"
operator|+
literal|"value"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
condition|)
block|{
name|write
operator|.
name|println
argument_list|(
literal|"map,path,revision,p2,length,value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
operator|.
name|println
argument_list|(
literal|"map,path,revision,p2,length"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|n
range|:
name|meta
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|.
name|startsWith
argument_list|(
literal|"name."
argument_list|)
condition|)
block|{
name|String
name|mapName
init|=
name|n
operator|.
name|substring
argument_list|(
literal|5
argument_list|,
name|n
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|map
operator|.
name|equalsIgnoreCase
argument_list|(
name|mapName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|MVMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|b
init|=
operator|new
name|MVMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|keyType
argument_list|(
name|StringDataType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|valueType
argument_list|(
name|StringDataType
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|MVMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|s
operator|.
name|openMap
argument_list|(
name|mapName
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|statsOnly
condition|)
block|{
name|statistics
argument_list|(
name|write
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|raw
condition|)
block|{
name|dumpRaw
argument_list|(
name|write
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dump
argument_list|(
name|write
argument_list|,
name|m
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|statistics
parameter_list|(
name|PrintWriter
name|write
parameter_list|,
name|MVMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|)
block|{
name|write
operator|.
name|println
argument_list|(
literal|"map: "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|write
operator|.
name|println
argument_list|(
literal|"entryCount: "
operator|+
name|m
operator|.
name|sizeAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|keyLen
init|=
literal|0
decl_stmt|,
name|valueLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|keyLen
operator|+=
name|k
operator|.
name|length
argument_list|()
expr_stmt|;
name|valueLen
operator|+=
name|v
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|write
operator|.
name|println
argument_list|(
literal|"keyLen: "
operator|+
name|keyLen
argument_list|)
expr_stmt|;
name|write
operator|.
name|println
argument_list|(
literal|"valueLen: "
operator|+
name|valueLen
argument_list|)
expr_stmt|;
name|write
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|dumpRaw
parameter_list|(
name|PrintWriter
name|write
parameter_list|,
name|MVMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|)
block|{
name|String
name|mapName
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
comment|// map key value length
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|write
operator|.
name|println
argument_list|(
name|mapName
operator|+
literal|"\t"
operator|+
name|key
operator|+
literal|"\t"
operator|+
name|value
operator|.
name|length
argument_list|()
operator|+
literal|"\t"
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|dump
parameter_list|(
name|PrintWriter
name|write
parameter_list|,
name|MVMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|revision
parameter_list|,
name|boolean
name|values
parameter_list|)
block|{
name|String
name|mapName
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
comment|// map,path,revision,p2,value,length
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|slash
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|r2
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|slash
operator|>
literal|0
condition|)
block|{
name|r2
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
argument_list|)
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'#'
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|slash
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|lastAt
init|=
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|r2
operator|.
name|endsWith
argument_list|(
literal|":p"
argument_list|)
condition|)
block|{
comment|// prev_document, for example 0:p/r155a16928cd-0-1/0
comment|// format: ..p<path>r<revision>/<number>
comment|// we set r2 to<number>
name|rev
operator|=
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
name|rev
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|=
name|rev
operator|.
name|substring
argument_list|(
name|rev
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rev
operator|=
name|rev
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rev
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastAt
operator|>
literal|0
condition|)
block|{
name|rev
operator|=
name|key
operator|.
name|substring
argument_list|(
name|lastAt
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'#'
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastAt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
operator|&&
operator|!
name|rev
operator|.
name|startsWith
argument_list|(
name|revision
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|length
argument_list|()
operator|+
literal|","
operator|+
name|v
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'#'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
literal|""
operator|+
name|v
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|key
operator|=
name|key
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'#'
argument_list|)
expr_stmt|;
name|write
operator|.
name|println
argument_list|(
name|mapName
operator|+
literal|","
operator|+
name|key
operator|+
literal|","
operator|+
name|rev
operator|+
literal|","
operator|+
name|r2
operator|+
literal|","
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

