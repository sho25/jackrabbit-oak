begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|Function1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PathsTest
block|{
specifier|private
specifier|static
specifier|final
name|Function1
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|RESOLVER
init|=
operator|new
name|Function1
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
block|{
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|argument
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|getPrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|Paths
operator|.
name|getPrefixFromElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Paths
operator|.
name|getPrefixFromElement
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Paths
operator|.
name|getNameFromElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Paths
operator|.
name|getNameFromElement
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isValidElement
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|"foo:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|"fo/o:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidElement
argument_list|(
literal|":bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isValidAbsolutePath
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/p:a/q:b/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/a/b/c/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/p:a/:b/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/p:a/q:/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/p:a/:/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"/p:a//r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"//"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isValidRelativePath
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"p:a/q:b/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"a/b/c/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"p:a/:b/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"p:a/q:/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"p:a/:/r:c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Paths
operator|.
name|isValidPath
argument_list|(
literal|"p:a//r:c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resolveElement
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Paths
operator|.
name|resolveElement
argument_list|(
literal|"foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x:foo"
argument_list|,
name|Paths
operator|.
name|resolveElement
argument_list|(
literal|"a:foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Paths
operator|.
name|resolveElement
argument_list|(
literal|"q:foo"
argument_list|,
name|RESOLVER
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|resolveAbsolutePath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"/foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo/bar"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"/foo/bar"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/x:foo"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"/a:foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/x:foo/y:bar"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"/a:foo/b:bar"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"/a:foo/q:bar"
argument_list|,
name|RESOLVER
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|resolveRelativePath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"foo/bar"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x:foo"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"a:foo"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x:foo/y:bar"
argument_list|,
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"a:foo/b:bar"
argument_list|,
name|RESOLVER
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Paths
operator|.
name|resolvePath
argument_list|(
literal|"a:foo/q:bar"
argument_list|,
name|RESOLVER
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

