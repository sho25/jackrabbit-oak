begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CheckpointsTest
block|{
annotation|@
name|Rule
specifier|public
name|DocumentMKBuilderProvider
name|builderProvider
init|=
operator|new
name|DocumentMKBuilderProvider
argument_list|()
decl_stmt|;
specifier|private
name|Clock
name|clock
decl_stmt|;
specifier|private
name|DocumentNodeStore
name|store
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|clock
operator|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
expr_stmt|;
name|store
operator|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|clock
argument_list|(
name|clock
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckpointPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expiryTime
init|=
literal|1000
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|expiryTime
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
comment|//Trigger expiry by forwarding the clock to future
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|expiryTime
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckpointPurgeByCount
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expiryTime
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Checkpoints
operator|.
name|CLEANUP_INTERVAL
condition|;
name|i
operator|++
control|)
block|{
name|r1
operator|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|expiryTime
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRoot
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|Revision
operator|.
name|newRevision
argument_list|(
name|store
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Checkpoints
operator|.
name|CLEANUP_INTERVAL
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Trigger expiry by forwarding the clock to future
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|expiryTime
argument_list|)
expr_stmt|;
comment|//Now creating the next checkpoint should trigger
comment|//cleanup
name|store
operator|.
name|checkpoint
argument_list|(
name|expiryTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleCheckpointOnSameRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|e1
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|e2
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|//Create CP with higher expiry first and then one with
comment|//lower expiry
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|e2
argument_list|)
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|e1
argument_list|)
argument_list|)
decl_stmt|;
name|clock
operator|.
name|waitUntil
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|e1
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//The older checkpoint was for greater duration so checkpoint
comment|//must not be GC
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
comment|// after getOldestRevisionToKeep() only one must be remaining
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|r1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|r2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOldestRevisionToKeep
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|et1
init|=
literal|1000
decl_stmt|,
name|et2
init|=
name|et1
operator|+
literal|1000
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|et1
argument_list|)
argument_list|)
decl_stmt|;
comment|//Do some commit to change headRevision
name|NodeBuilder
name|b2
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|et2
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
comment|//r2 has the later expiry
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|starttime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|//Trigger expiry by forwarding the clock to future e1
name|clock
operator|.
name|waitUntil
argument_list|(
name|starttime
operator|+
name|et1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
comment|//Trigger expiry by forwarding the clock to future e2
comment|//This time no valid checkpoint
name|clock
operator|.
name|waitUntil
argument_list|(
name|starttime
operator|+
name|et2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpointRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|et1
init|=
literal|1000
decl_stmt|,
name|et2
init|=
name|et1
operator|+
literal|1000
decl_stmt|;
name|String
name|cp1
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|et1
argument_list|)
decl_stmt|;
name|Revision
name|r1
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|cp1
argument_list|)
decl_stmt|;
comment|//Do some commit to change headRevision
name|NodeBuilder
name|b2
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|String
name|cp2
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|et2
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|cp2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|release
argument_list|(
name|cp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getOldestRevisionToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readOldFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentStore
name|docStore
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|empty
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|docStore
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
literal|"checkpoint"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|(
name|Map
argument_list|<
name|Revision
argument_list|,
name|String
argument_list|>
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// manually update checkpoint data with old format
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"checkpoint"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|expires
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|1000
operator|+
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|update
operator|.
name|setMapEntry
argument_list|(
literal|"data"
argument_list|,
name|r
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|expires
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docStore
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|update
argument_list|)
argument_list|)
expr_stmt|;
name|Checkpoints
operator|.
name|Info
name|info
init|=
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|info
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|expiryOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|empty
argument_list|)
argument_list|)
decl_stmt|;
name|Checkpoints
operator|.
name|Info
name|info
init|=
name|store
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|getCheckpoints
argument_list|()
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|info
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|userInfoNamedExpires
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"expires"
argument_list|,
literal|"today"
argument_list|)
decl_stmt|;
name|Revision
name|r
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|checkpoint
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|props
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|store
operator|.
name|checkpointInfo
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|props
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseInfo
parameter_list|()
block|{
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// initial 1.0 format: only expiry time
name|Checkpoints
operator|.
name|Info
name|info
init|=
name|Checkpoints
operator|.
name|Info
operator|.
name|fromString
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|expires
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|info
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1.2 format: json with expiry and info map
name|String
name|infoString
init|=
literal|"{\"expires\":\""
operator|+
name|expires
operator|+
literal|"\",\"foo\":\"bar\"}"
decl_stmt|;
name|info
operator|=
name|Checkpoints
operator|.
name|Info
operator|.
name|fromString
argument_list|(
name|infoString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|info
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|info
operator|.
name|get
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|info
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1.4 format: json with expiry, revision vector and info map
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|infoString
operator|=
literal|"{\"expires\":\""
operator|+
name|expires
operator|+
literal|"\",\"rv\":\""
operator|+
name|rv
operator|.
name|toString
argument_list|()
operator|+
literal|"\",\"foo\":\"bar\"}"
expr_stmt|;
name|info
operator|=
name|Checkpoints
operator|.
name|Info
operator|.
name|fromString
argument_list|(
name|infoString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|info
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|info
operator|.
name|get
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|info
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv
argument_list|,
name|info
operator|.
name|getCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoString
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|crossClusterNodeCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use an async delay to ensure DocumentNodeStore.suspendUntil() works
comment|// but set it to a high value and control background ops manually in
comment|// this test
specifier|final
name|int
name|asyncDelay
init|=
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
name|asyncDelay
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
specifier|final
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
name|asyncDelay
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// create node on ns1
name|NodeBuilder
name|builder
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// make visible on ns2
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// create checkpoint on ns1
name|String
name|cp1
init|=
name|ns1
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// retrieve checkpoint on ns2
name|NodeState
name|root
init|=
name|ns2
operator|.
name|retrieve
argument_list|(
name|cp1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|release
argument_list|(
name|cp1
argument_list|)
expr_stmt|;
comment|// create node on ns1
name|builder
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create checkpoint when 'bar' is not yet visible to ns2
specifier|final
name|String
name|cp2
init|=
name|ns1
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// retrieve checkpoint on ns2
specifier|final
name|NodeState
name|state
index|[]
init|=
operator|new
name|NodeState
index|[
literal|1
index|]
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|state
index|[
literal|0
index|]
operator|=
name|ns2
operator|.
name|retrieve
argument_list|(
name|cp2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|ns2
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|state
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
index|[
literal|0
index|]
operator|.
name|hasChildNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|crossClusterCheckpointNewClusterNode
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
comment|// create 'foo' on ns1
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// checkpoint sees 'foo' but not 'bar'
name|String
name|checkpoint
init|=
name|ns1
operator|.
name|checkpoint
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// create 'bar' on ns1
name|b1
operator|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// make visible
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// now start second node store
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|ns2
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|crossClusterReadOldCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentStore
name|store
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|DocumentNodeStore
name|ns1
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b1
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|b1
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
comment|// manually create a check point in 1.2 format
name|Revision
name|headRev
init|=
name|Revision
operator|.
name|fromString
argument_list|(
name|ns1
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|expires
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|String
name|data
init|=
literal|"{\"expires\":\""
operator|+
name|expires
operator|+
literal|"\"}"
decl_stmt|;
name|UpdateOp
name|update
init|=
operator|new
name|UpdateOp
argument_list|(
literal|"checkpoint"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|update
operator|.
name|setMapEntry
argument_list|(
literal|"data"
argument_list|,
name|headRev
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|store
operator|.
name|createOrUpdate
argument_list|(
name|Collection
operator|.
name|SETTINGS
argument_list|,
name|update
argument_list|)
expr_stmt|;
comment|// now start second node store
name|DocumentNodeStore
name|ns2
init|=
name|builderProvider
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|store
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b2
operator|.
name|child
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|b2
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|ns2
operator|.
name|retrieve
argument_list|(
name|headRev
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

