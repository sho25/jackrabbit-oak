begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * A Reporter implementation that logs every nth node  * and/or any nth property to the given logger on {@code info}  * level.  */
end_comment

begin_class
specifier|public
class|class
name|LoggingReporter
extends|extends
name|PeriodicReporter
block|{
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
specifier|final
name|String
name|verb
decl_stmt|;
specifier|private
specifier|final
name|EvictingQueue
name|lastPaths
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|/**      * Constructor that allows setting the intervals to log node and property      * accesses to a given logger.      *      * @param logger              The logger to log the progress to.      * @param nodeLogInterval     Every how many nodes a log message should be written.      * @param propertyLogInterval Every how many properties a log message should be written.      */
specifier|public
name|LoggingReporter
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|int
name|nodeLogInterval
parameter_list|,
specifier|final
name|int
name|propertyLogInterval
parameter_list|)
block|{
name|this
argument_list|(
name|logger
argument_list|,
literal|"Loading"
argument_list|,
name|nodeLogInterval
argument_list|,
name|propertyLogInterval
argument_list|)
expr_stmt|;
block|}
comment|/**      * Like {@link #LoggingReporter(Logger, int, int)}, however this constructor allow      * to customize the verb of the log message.      *<br>      * The messages are of the format: "{verb} node #100: /path/to/the/node      *      * @param logger              The logger to log the progress to.      * @param verb                The verb to use for logging.      * @param nodeLogInterval     Every how many nodes a log message should be written.      * @param propertyLogInterval Every how many properties a log message should be written.      */
specifier|public
name|LoggingReporter
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|String
name|verb
parameter_list|,
specifier|final
name|int
name|nodeLogInterval
parameter_list|,
specifier|final
name|int
name|propertyLogInterval
parameter_list|)
block|{
name|super
argument_list|(
name|nodeLogInterval
argument_list|,
name|propertyLogInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|verb
operator|=
name|verb
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reportPeriodicNode
parameter_list|(
specifier|final
name|long
name|count
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|nodeState
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{} node #{}: {}"
argument_list|,
name|verb
argument_list|,
name|count
argument_list|,
name|nodeState
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reportPeriodicProperty
parameter_list|(
specifier|final
name|long
name|count
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|parent
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{} properties #{}: {}"
argument_list|,
name|verb
argument_list|,
name|count
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|skipNodeState
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|nodeState
parameter_list|)
block|{
name|String
name|path
init|=
name|nodeState
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|lastPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

