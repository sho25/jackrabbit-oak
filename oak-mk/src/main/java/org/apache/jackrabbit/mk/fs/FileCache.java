begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|SimpleLRUCache
import|;
end_import

begin_comment
comment|/**  * A file that has a simple read cache.  */
end_comment

begin_class
specifier|public
class|class
name|FileCache
extends|extends
name|FileBase
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|APPEND_BUFFER
init|=
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"mk.disableAppendBuffer"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|APPEND_BUFFER_SIZE_INIT
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|APPEND_BUFFER_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
name|readCache
init|=
name|SimpleLRUCache
operator|.
name|newInstance
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileChannel
name|base
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|,
name|size
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|ByteArrayOutputStream
argument_list|>
name|appendBuffer
decl_stmt|;
specifier|private
name|int
name|appendOperations
decl_stmt|;
specifier|private
name|Thread
name|appendFlushThread
decl_stmt|;
name|FileCache
parameter_list|(
name|String
name|name
parameter_list|,
name|FileChannel
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|base
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|position
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
specifier|public
name|FileChannel
name|position
parameter_list|(
name|long
name|newPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pos
operator|=
name|newPosition
expr_stmt|;
return|return
name|this
return|;
block|}
name|boolean
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|appendBuffer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|ByteArrayOutputStream
name|newBuff
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|APPEND_BUFFER_SIZE_INIT
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buff
init|=
name|appendBuffer
operator|.
name|getAndSet
argument_list|(
name|newBuff
argument_list|)
decl_stmt|;
if|if
condition|(
name|buff
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|base
operator|.
name|position
argument_list|(
name|size
operator|-
name|buff
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buff
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|long
name|readPos
init|=
operator|(
name|pos
operator|/
name|BLOCK_SIZE
operator|)
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|int
name|off
init|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|-
name|readPos
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|BLOCK_SIZE
operator|-
name|off
decl_stmt|;
name|ByteBuffer
name|buff
init|=
name|readCache
operator|.
name|get
argument_list|(
name|readPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|buff
operator|==
literal|null
condition|)
block|{
name|base
operator|.
name|position
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|buff
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|base
operator|.
name|read
argument_list|(
name|buff
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
name|BLOCK_SIZE
condition|)
block|{
name|readCache
operator|.
name|put
argument_list|(
name|readPos
argument_list|,
name|buff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|dst
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buff
operator|.
name|array
argument_list|()
argument_list|,
name|off
argument_list|,
name|dst
operator|.
name|array
argument_list|()
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|dst
operator|.
name|position
argument_list|(
name|dst
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|size
return|;
block|}
specifier|public
name|FileChannel
name|truncate
parameter_list|(
name|long
name|newSize
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|readCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|base
operator|.
name|truncate
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pos
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|size
operator|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|write
parameter_list|(
name|ByteBuffer
name|src
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|readCache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|readCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// append operations are buffered, but
comment|// only if there was at least one successful write operation
comment|// (to detect trying to write to a read-only file and such early on)
comment|// (in addition to that, the first few append operations are not buffered
comment|// to avoid starting a thread unnecessarily)
if|if
condition|(
name|APPEND_BUFFER
operator|&&
name|pos
operator|==
name|size
operator|&&
operator|++
name|appendOperations
operator|>=
literal|4
condition|)
block|{
name|int
name|len
init|=
name|src
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|APPEND_BUFFER_SIZE
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|appendBuffer
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|buff
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|APPEND_BUFFER_SIZE_INIT
argument_list|)
decl_stmt|;
name|appendBuffer
operator|=
operator|new
name|AtomicReference
argument_list|<
name|ByteArrayOutputStream
argument_list|>
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|appendFlushThread
operator|=
operator|new
name|Thread
argument_list|(
literal|"Flush "
operator|+
name|name
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
name|flush
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
do|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
expr_stmt|;
name|appendFlushThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|appendFlushThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|buff
init|=
name|appendBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|buff
operator|.
name|size
argument_list|()
operator|>
name|APPEND_BUFFER_SIZE
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
name|buff
operator|=
name|appendBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|buff
operator|.
name|write
argument_list|(
name|src
operator|.
name|array
argument_list|()
argument_list|,
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
name|size
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
block|}
name|base
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|base
operator|.
name|write
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
name|size
operator|=
name|Math
operator|.
name|max
argument_list|(
name|size
argument_list|,
name|pos
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
specifier|protected
name|void
name|implCloseChannel
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|appendBuffer
operator|!=
literal|null
condition|)
block|{
name|appendFlushThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|appendFlushThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|flush
argument_list|()
expr_stmt|;
block|}
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|force
parameter_list|(
name|boolean
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|base
operator|.
name|force
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileLock
name|tryLock
parameter_list|(
name|long
name|position
parameter_list|,
name|long
name|size
parameter_list|,
name|boolean
name|shared
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
return|return
name|base
operator|.
name|tryLock
argument_list|(
name|position
argument_list|,
name|size
argument_list|,
name|shared
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cache:"
operator|+
name|base
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

