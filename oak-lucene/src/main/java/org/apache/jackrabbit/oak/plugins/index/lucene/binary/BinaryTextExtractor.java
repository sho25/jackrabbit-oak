begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|binary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|LazyInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|fulltext
operator|.
name|ExtractedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|ExtractedTextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|WriteOutContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|FieldFactory
operator|.
name|newFulltextField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditor
operator|.
name|TEXT_EXTRACTION_ERROR
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryTextExtractor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BinaryTextExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Parser
name|defaultParser
init|=
name|createDefaultParser
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SMALL_BINARY
init|=
name|Long
operator|.
name|getLong
argument_list|(
literal|"oak.lucene.smallBinary"
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TextExtractionStats
name|textExtractionStats
init|=
operator|new
name|TextExtractionStats
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExtractedTextCache
name|extractedTextCache
decl_stmt|;
specifier|private
specifier|final
name|IndexDefinition
name|definition
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|reindex
decl_stmt|;
specifier|private
name|Parser
name|parser
decl_stmt|;
comment|/**      * The media types supported by the parser used.      */
specifier|private
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedMediaTypes
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|MediaType
argument_list|>
name|nonIndexedMediaType
decl_stmt|;
specifier|public
name|BinaryTextExtractor
parameter_list|(
name|ExtractedTextCache
name|extractedTextCache
parameter_list|,
name|IndexDefinition
name|definition
parameter_list|,
name|boolean
name|reindex
parameter_list|)
block|{
name|this
operator|.
name|extractedTextCache
operator|=
name|extractedTextCache
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
name|this
operator|.
name|reindex
operator|=
name|reindex
expr_stmt|;
block|}
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|reindex
parameter_list|)
block|{
name|textExtractionStats
operator|.
name|log
argument_list|(
name|reindex
argument_list|)
expr_stmt|;
name|textExtractionStats
operator|.
name|collectStats
argument_list|(
name|extractedTextCache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|newBinary
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|String
name|nodePath
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//jcr:mimeType is mandatory for a binary to be indexed
name|String
name|type
init|=
name|state
operator|.
name|getString
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|isSupportedMediaType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"[{}] Ignoring binary content for node {} due to unsupported (or null) jcr:mimeType [{}]"
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|JCR_DATA
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|encoding
init|=
name|state
operator|.
name|getString
argument_list|(
name|JcrConstants
operator|.
name|JCR_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
comment|// not mandatory
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Blob
name|v
range|:
name|property
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARIES
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|parseStringValue
argument_list|(
name|v
argument_list|,
name|metadata
argument_list|,
name|path
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodePath
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|newFulltextField
argument_list|(
name|nodePath
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
name|newFulltextField
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
specifier|private
name|String
name|parseStringValue
parameter_list|(
name|Blob
name|v
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|text
init|=
name|extractedTextCache
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|propertyName
argument_list|,
name|v
argument_list|,
name|reindex
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|parseStringValue0
argument_list|(
name|v
argument_list|,
name|metadata
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
specifier|private
name|String
name|parseStringValue0
parameter_list|(
name|Blob
name|v
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|definition
operator|.
name|getMaxExtractLength
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
name|long
name|length
init|=
name|v
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Extracting {}, {} bytes, id {}"
argument_list|,
name|path
argument_list|,
name|length
argument_list|,
name|v
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|oldThreadName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|SMALL_BINARY
condition|)
block|{
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|oldThreadName
operator|=
name|t
operator|.
name|getName
argument_list|()
expr_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|oldThreadName
operator|+
literal|": Extracting "
operator|+
name|path
operator|+
literal|", "
operator|+
name|length
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CountingInputStream
name|stream
init|=
operator|new
name|CountingInputStream
argument_list|(
operator|new
name|LazyInputStream
argument_list|(
operator|new
name|BlobByteSource
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bytesRead
operator|=
name|stream
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LinkageError
name|e
parameter_list|)
block|{
comment|// Capture and ignore errors caused by extraction libraries
comment|// not being present. This is equivalent to disabling
comment|// selected media types in configuration, so we can simply
comment|// ignore these errors.
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Capture and report any other full text extraction problems.
comment|// The special STOP exception is used for normal termination.
if|if
condition|(
operator|!
name|handler
operator|.
name|isWriteLimitReached
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Failed to extract text from a binary property: {}."
operator|+
literal|" This is a fairly common case, and nothing to"
operator|+
literal|" worry about. The stack trace is included to"
operator|+
literal|" help improve the text extraction feature."
argument_list|,
name|getIndexName
argument_list|()
argument_list|,
name|path
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|extractedTextCache
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|ExtractedText
operator|.
name|ERROR
argument_list|)
expr_stmt|;
return|return
name|TEXT_EXTRACTION_ERROR
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|oldThreadName
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|oldThreadName
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|result
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|>
literal|0
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|int
name|len
init|=
name|result
operator|.
name|length
argument_list|()
decl_stmt|;
name|recordTextExtractionStats
argument_list|(
name|time
argument_list|,
name|bytesRead
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Extracting {} took {} ms, {} bytes read, {} text size"
argument_list|,
name|path
argument_list|,
name|time
argument_list|,
name|bytesRead
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
name|extractedTextCache
operator|.
name|put
argument_list|(
name|v
argument_list|,
operator|new
name|ExtractedText
argument_list|(
name|ExtractedText
operator|.
name|ExtractionResult
operator|.
name|SUCCESS
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|recordTextExtractionStats
parameter_list|(
name|long
name|timeInMillis
parameter_list|,
name|long
name|bytesRead
parameter_list|,
name|int
name|textLength
parameter_list|)
block|{
name|textExtractionStats
operator|.
name|addStats
argument_list|(
name|timeInMillis
argument_list|,
name|bytesRead
argument_list|,
name|textLength
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|definition
operator|.
name|getIndexName
argument_list|()
return|;
block|}
comment|//~-------------------------------------------< Tika>
specifier|private
name|Parser
name|getParser
parameter_list|()
block|{
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|initializeTikaParser
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
return|return
name|parser
return|;
block|}
specifier|private
name|boolean
name|isSupportedMediaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|supportedMediaTypes
operator|==
literal|null
condition|)
block|{
name|supportedMediaTypes
operator|=
name|getParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|nonIndexedMediaType
operator|=
name|getNonIndexedMediaTypes
argument_list|()
expr_stmt|;
block|}
name|MediaType
name|mediaType
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|supportedMediaTypes
operator|.
name|contains
argument_list|(
name|mediaType
argument_list|)
operator|&&
operator|!
name|nonIndexedMediaType
operator|.
name|contains
argument_list|(
name|mediaType
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getNonIndexedMediaTypes
parameter_list|()
block|{
name|InputStream
name|configStream
init|=
literal|null
decl_stmt|;
name|String
name|configSource
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|definition
operator|.
name|hasCustomTikaConfig
argument_list|()
condition|)
block|{
name|configSource
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Custom config at %s"
argument_list|,
name|definition
operator|.
name|getIndexPath
argument_list|()
argument_list|)
expr_stmt|;
name|configStream
operator|=
name|definition
operator|.
name|getTikaConfig
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|URL
name|configUrl
init|=
name|LuceneIndexEditorContext
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"tika-config.xml"
argument_list|)
decl_stmt|;
name|configSource
operator|=
literal|"Default : tika-config.xml"
expr_stmt|;
if|if
condition|(
name|configUrl
operator|!=
literal|null
condition|)
block|{
name|configStream
operator|=
name|configUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configStream
operator|!=
literal|null
condition|)
block|{
return|return
name|TikaParserConfig
operator|.
name|getNonIndexedMediaTypes
argument_list|(
name|configStream
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TikaException
decl||
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tika configuration not available : "
operator|+
name|configSource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|configStream
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Parser
name|initializeTikaParser
parameter_list|(
name|IndexDefinition
name|definition
parameter_list|)
block|{
name|ClassLoader
name|current
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|definition
operator|.
name|hasCustomTikaConfig
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"[{}] Using custom tika config"
argument_list|,
name|definition
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|LuceneIndexEditorContext
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|definition
operator|.
name|getTikaConfig
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|AutoDetectParser
argument_list|(
name|getTikaConfig
argument_list|(
name|is
argument_list|,
name|definition
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultParser
return|;
block|}
specifier|private
specifier|static
name|AutoDetectParser
name|createDefaultParser
parameter_list|()
block|{
name|ClassLoader
name|current
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|configUrl
init|=
name|LuceneIndexEditorContext
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"tika-config.xml"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|LuceneIndexEditorContext
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
name|configUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|TikaConfig
name|config
init|=
operator|new
name|TikaConfig
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Loaded default Tika Config from classpath {}"
argument_list|,
name|configUrl
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoDetectParser
argument_list|(
name|config
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tika configuration not available : "
operator|+
name|configUrl
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Default Tika configuration not found"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AutoDetectParser
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|TikaConfig
name|getTikaConfig
parameter_list|(
name|InputStream
name|configStream
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|TikaConfig
argument_list|(
name|configStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Tika configuration not available : "
operator|+
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
return|;
block|}
block|}
end_class

end_unit

