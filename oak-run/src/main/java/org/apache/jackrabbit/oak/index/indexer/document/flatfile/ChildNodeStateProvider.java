begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|size
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|getParentPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|isAncestor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_class
class|class
name|ChildNodeStateProvider
block|{
specifier|private
specifier|final
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|entries
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|preferredPathElements
decl_stmt|;
specifier|public
name|ChildNodeStateProvider
parameter_list|(
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|preferredPathElements
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|preferredPathElements
operator|=
name|preferredPathElements
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasChildNode
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
block|{
return|return
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|boolean
name|isPreferred
init|=
name|preferredPathElements
operator|.
name|contains
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|NodeStateEntry
argument_list|>
name|o
init|=
name|Iterators
operator|.
name|tryFind
argument_list|(
name|children
argument_list|(
name|isPreferred
argument_list|)
argument_list|,
name|p
lambda|->
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|o
operator|.
name|isPresent
argument_list|()
condition|?
name|o
operator|.
name|get
argument_list|()
operator|.
name|getNodeState
argument_list|()
else|:
name|MISSING_NODE
return|;
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|max
operator|==
literal|1
operator|&&
name|children
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|size
argument_list|(
name|children
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|getChildNodeNames
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
name|transform
argument_list|(
name|children
argument_list|()
argument_list|,
name|p
lambda|->
name|name
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
name|transform
argument_list|(
name|children
argument_list|()
argument_list|,
name|p
lambda|->
operator|new
name|MemoryChildNodeEntry
argument_list|(
name|name
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|children
parameter_list|()
block|{
return|return
name|children
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|children
parameter_list|(
name|boolean
name|preferred
parameter_list|)
block|{
name|PeekingIterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|pitr
init|=
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|entries
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pitr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|emptyIterator
argument_list|()
return|;
block|}
comment|//Skip till current entry
while|while
condition|(
name|pitr
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|pitr
operator|.
name|peek
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|pitr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|//Skip past the current find
name|checkState
argument_list|(
name|pitr
operator|.
name|hasNext
argument_list|()
operator|&&
name|path
operator|.
name|equals
argument_list|(
name|pitr
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|"Did not found path [%s] in leftover iterator. Possibly node state accessed "
operator|+
literal|"after main iterator has moved past it"
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//Prepare an iterator to fetch all child node paths i.e. immediate and there children
return|return
operator|new
name|AbstractIterator
argument_list|<
name|NodeStateEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStateEntry
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|pitr
operator|.
name|hasNext
argument_list|()
operator|&&
name|isAncestor
argument_list|(
name|path
argument_list|,
name|pitr
operator|.
name|peek
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|NodeStateEntry
name|nextEntry
init|=
name|pitr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|nextEntryPath
init|=
name|nextEntry
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isImmediateChild
argument_list|(
name|nextEntryPath
argument_list|)
condition|)
block|{
name|String
name|nextEntryName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nextEntryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferred
operator|&&
operator|!
name|preferredPathElements
operator|.
name|contains
argument_list|(
name|nextEntryName
argument_list|)
condition|)
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
return|return
name|nextEntry
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|String
name|name
parameter_list|(
name|NodeStateEntry
name|p
parameter_list|)
block|{
return|return
name|getName
argument_list|(
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isImmediateChild
parameter_list|(
name|String
name|childPath
parameter_list|)
block|{
return|return
name|getParentPath
argument_list|(
name|childPath
argument_list|)
operator|.
name|equals
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

