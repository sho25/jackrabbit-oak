begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|forceDelete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|closeQuietly
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|FileIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_comment
comment|/**  * Implements a {@link java.io.Closeable} wrapper over a {@link LineIterator}.  * Also has a transformer to transform the output. If the underlying file is  * provided then it deletes the file on {@link #close()}.  *  * If there is a scope for lines in the file containing line break characters it  * should be ensured that the files is written with  * {@link FileIOUtils#writeAsLine(BufferedWriter, String, boolean)} with true to escape  * line break characters and should be properly unescaped on read. A custom  * transformer can also be provided to unescape.  *  * @param<T>  *            the type of elements in the iterator  */
end_comment

begin_class
specifier|public
class|class
name|BurnOnCloseFileIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Closeable
implements|,
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BurnOnCloseFileIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Impl
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
specifier|public
name|BurnOnCloseFileIterator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|Impl
argument_list|<
name|T
argument_list|>
argument_list|(
name|iterator
argument_list|,
literal|null
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BurnOnCloseFileIterator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|,
name|File
name|backingFile
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|Impl
argument_list|<
name|T
argument_list|>
argument_list|(
name|iterator
argument_list|,
name|backingFile
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegate
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegate
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|wrap
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
parameter_list|)
block|{
return|return
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|iter
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
name|wrap
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
parameter_list|,
name|File
name|backingFile
parameter_list|)
block|{
return|return
operator|new
name|BurnOnCloseFileIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|iter
argument_list|,
name|backingFile
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|Impl
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractIterator
argument_list|<
name|T
argument_list|>
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|transformer
decl_stmt|;
specifier|private
specifier|final
name|File
name|backingFile
decl_stmt|;
specifier|public
name|Impl
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|,
name|File
name|backingFile
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
name|this
operator|.
name|backingFile
operator|=
name|backingFile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|T
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|transformer
operator|.
name|apply
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing iterator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|iterator
operator|instanceof
name|Closeable
condition|)
block|{
name|closeQuietly
argument_list|(
operator|(
name|Closeable
operator|)
name|iterator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|backingFile
operator|!=
literal|null
operator|&&
name|backingFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|forceDelete
argument_list|(
name|backingFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

