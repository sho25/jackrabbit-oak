begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Filtering iterators that are useful for queries with limit, offset, order by,  * or distinct.  */
end_comment

begin_class
specifier|public
class|class
name|FilterIterators
block|{
comment|/**      * Verify the number of in-memory nodes is below the limit.      *       * @param count the number of nodes      * @param maxMemoryEntries the maximum number of nodes      * @throws UnsupportedOperationException if the limit was exceeded      */
specifier|public
specifier|static
name|void
name|checkMemoryLimit
parameter_list|(
name|long
name|count
parameter_list|,
name|long
name|maxMemoryEntries
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>
name|maxMemoryEntries
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The query read more than "
operator|+
name|maxMemoryEntries
operator|+
literal|" nodes in memory. "
operator|+
literal|"To avoid running out of memory, processing was stopped."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Verify the number of node read operations is below the limit.      *       * @param count the number of read operations      * @throws UnsupportedOperationException if the limit was exceeded      */
specifier|public
specifier|static
name|void
name|checkReadLimit
parameter_list|(
name|long
name|count
parameter_list|,
name|long
name|maxReadEntries
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>
name|maxReadEntries
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The query read or traversed more than "
operator|+
name|maxReadEntries
operator|+
literal|" nodes. "
operator|+
literal|"To avoid affecting other tasks, processing was stopped."
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|newCombinedFilter
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|,
name|boolean
name|distinct
parameter_list|,
name|long
name|limit
parameter_list|,
name|long
name|offset
parameter_list|,
name|Comparator
argument_list|<
name|K
argument_list|>
name|orderBy
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|distinct
condition|)
block|{
name|it
operator|=
name|FilterIterators
operator|.
name|newDistinct
argument_list|(
name|it
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderBy
operator|!=
literal|null
condition|)
block|{
comment|// avoid overflow (both offset and limit could be Long.MAX_VALUE)
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|offset
argument_list|)
operator|+
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|limit
argument_list|)
argument_list|)
decl_stmt|;
name|it
operator|=
name|FilterIterators
operator|.
name|newSort
argument_list|(
name|it
argument_list|,
name|orderBy
argument_list|,
name|max
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
name|it
operator|=
name|FilterIterators
operator|.
name|newOffset
argument_list|(
name|it
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|<
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|it
operator|=
name|FilterIterators
operator|.
name|newLimit
argument_list|(
name|it
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
name|it
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|DistinctIterator
argument_list|<
name|K
argument_list|>
name|newDistinct
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|DistinctIterator
argument_list|<
name|K
argument_list|>
argument_list|(
name|it
argument_list|,
name|settings
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|newLimit
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
return|return
operator|new
name|LimitIterator
argument_list|<
name|K
argument_list|>
argument_list|(
name|it
argument_list|,
name|limit
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|newOffset
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
operator|new
name|OffsetIterator
argument_list|<
name|K
argument_list|>
argument_list|(
name|it
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|newSort
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|it
parameter_list|,
name|Comparator
argument_list|<
name|K
argument_list|>
name|orderBy
parameter_list|,
name|int
name|max
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|SortIterator
argument_list|<
name|K
argument_list|>
argument_list|(
name|it
argument_list|,
name|orderBy
argument_list|,
name|max
argument_list|,
name|settings
argument_list|)
return|;
block|}
comment|/**      * An iterator that filters duplicate entries, that is, it only returns each      * unique entry once. The internal set of unique entries is filled only when      * needed (on demand).      *       * @param<K> the entry type      */
specifier|static
class|class
name|DistinctIterator
parameter_list|<
name|K
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxMemoryEntries
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|K
argument_list|>
name|distinctSet
decl_stmt|;
specifier|private
name|K
name|current
decl_stmt|;
specifier|private
name|boolean
name|end
decl_stmt|;
name|DistinctIterator
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|maxMemoryEntries
operator|=
name|settings
operator|.
name|getLimitInMemory
argument_list|()
expr_stmt|;
name|distinctSet
operator|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
name|end
condition|)
block|{
return|return;
block|}
while|while
condition|(
name|source
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|source
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|distinctSet
operator|.
name|add
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|checkMemoryLimit
argument_list|(
name|distinctSet
operator|.
name|size
argument_list|()
argument_list|,
name|maxMemoryEntries
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|current
operator|=
literal|null
expr_stmt|;
name|end
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
if|if
condition|(
name|end
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
block|}
name|K
name|r
init|=
name|current
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * An iterator that returns entries in sorted order. The internal list of      * sorted entries can be limited to a given number of entries, and the      * entries are only read when needed (on demand).      *       * @param<K> the entry type      */
specifier|static
class|class
name|SortIterator
parameter_list|<
name|K
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxMemoryEntries
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|K
argument_list|>
name|orderBy
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|K
argument_list|>
name|result
decl_stmt|;
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
name|SortIterator
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
parameter_list|,
name|Comparator
argument_list|<
name|K
argument_list|>
name|orderBy
parameter_list|,
name|int
name|max
parameter_list|,
name|QueryEngineSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|orderBy
operator|=
name|orderBy
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|maxMemoryEntries
operator|=
name|settings
operator|.
name|getLimitInMemory
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|K
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|K
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|source
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|K
name|x
init|=
name|source
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|checkMemoryLimit
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|maxMemoryEntries
argument_list|)
expr_stmt|;
comment|// from time to time, sort and truncate
comment|// this should results in O(n*log(2*keep)) operations,
comment|// which is close to the optimum O(n*log(keep))
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
name|max
operator|*
literal|2
condition|)
block|{
comment|// remove tail entries right now, to save memory
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|orderBy
argument_list|)
expr_stmt|;
name|keepFirst
argument_list|(
name|list
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|orderBy
argument_list|)
expr_stmt|;
name|keepFirst
argument_list|(
name|list
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|result
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**          * Truncate a list.          *           * @param list the list          * @param keep the maximum number of entries to keep          */
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|void
name|keepFirst
parameter_list|(
name|ArrayList
argument_list|<
name|K
argument_list|>
name|list
parameter_list|,
name|int
name|keep
parameter_list|)
block|{
while|while
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
name|keep
condition|)
block|{
comment|// remove the entries starting at the end,
comment|// to avoid n^2 performance
name|list
operator|.
name|remove
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * An iterator that ignores the first number of entries. Entries are only      * read when needed (on demand).      *       * @param<K> the entry type      */
specifier|static
class|class
name|OffsetIterator
parameter_list|<
name|K
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
specifier|private
name|boolean
name|init
decl_stmt|;
name|OffsetIterator
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|init
condition|)
block|{
return|return;
block|}
name|init
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
operator|&&
name|source
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|source
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|source
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|source
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * An iterator that limits the number of returned entries. Entries are only      * read when needed (on demand).      *       * @param<K> the entry type      */
specifier|static
class|class
name|LimitIterator
parameter_list|<
name|K
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
decl_stmt|;
specifier|private
specifier|final
name|long
name|limit
decl_stmt|;
specifier|private
name|long
name|count
decl_stmt|;
name|LimitIterator
parameter_list|(
name|Iterator
argument_list|<
name|K
argument_list|>
name|source
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|count
operator|<
name|limit
operator|&&
name|source
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|count
operator|++
expr_stmt|;
return|return
name|source
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

