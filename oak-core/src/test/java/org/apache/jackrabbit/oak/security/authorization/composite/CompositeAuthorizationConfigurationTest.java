begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|OpenAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|EmptyPermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|CompositeRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeAuthorizationConfigurationTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|CompositeAuthorizationConfiguration
name|getCompositeConfiguration
parameter_list|(
name|AuthorizationConfiguration
modifier|...
name|entries
parameter_list|)
block|{
name|CompositeAuthorizationConfiguration
name|compositeConfiguration
init|=
operator|new
name|CompositeAuthorizationConfiguration
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|compositeConfiguration
operator|.
name|setRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|compositeConfiguration
operator|.
name|setTreeProvider
argument_list|(
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AuthorizationConfiguration
name|ac
range|:
name|entries
control|)
block|{
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
block|}
return|return
name|compositeConfiguration
return|;
block|}
specifier|private
name|AuthorizationConfigurationImpl
name|createAuthorizationConfigurationImpl
parameter_list|()
block|{
name|AuthorizationConfigurationImpl
name|ac
init|=
operator|new
name|AuthorizationConfigurationImpl
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setRootProvider
argument_list|(
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setTreeProvider
argument_list|(
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ac
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyGetAccessControlManager
parameter_list|()
block|{
name|getCompositeConfiguration
argument_list|()
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyGetPermissionProvider
parameter_list|()
block|{
name|getCompositeConfiguration
argument_list|()
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|adminSession
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyGetRestrictionProvider
parameter_list|()
block|{
name|assertSame
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|,
name|getCompositeConfiguration
argument_list|()
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleGetAccessControlManager
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlManager
name|accessControlManager
init|=
name|cc
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|accessControlManager
operator|instanceof
name|CompositeAccessControlManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleGetPermissionProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|cc
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|instanceof
name|CompositePermissionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRestrictionProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|cc
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|instanceof
name|CompositeRestrictionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleGetAccessControlManager
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlManager
name|accessControlManager
init|=
name|cc
operator|.
name|getAccessControlManager
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|accessControlManager
operator|instanceof
name|CompositeAccessControlManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleGetPermissionProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
operator|new
name|OpenAuthorizationConfiguration
argument_list|()
argument_list|,
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|cc
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|instanceof
name|CompositePermissionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleGetPermissionProvider2
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|cc
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pp
operator|instanceof
name|CompositePermissionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleGetPermissionProvider3
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
operator|new
name|OpenAuthorizationConfiguration
argument_list|()
argument_list|,
operator|new
name|OpenAuthorizationConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|PermissionProvider
name|pp
init|=
name|cc
operator|.
name|getPermissionProvider
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|pp
operator|instanceof
name|CompositePermissionProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|EmptyPermissionProvider
operator|.
name|getInstance
argument_list|()
argument_list|,
name|pp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRestrictionProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|cc
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|CompositeRestrictionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleWithEmptyRestrictionProvider
parameter_list|()
block|{
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|createAuthorizationConfigurationImpl
argument_list|()
argument_list|,
operator|new
name|OpenAuthorizationConfiguration
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|RestrictionProvider
operator|.
name|EMPTY
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|cc
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|instanceof
name|CompositeRestrictionProvider
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlyEmptyRestrictionProvider
parameter_list|()
block|{
name|AuthorizationConfiguration
name|ac
init|=
operator|new
name|OpenAuthorizationConfiguration
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|RestrictionProvider
operator|.
name|EMPTY
return|;
block|}
block|}
decl_stmt|;
name|CompositeAuthorizationConfiguration
name|cc
init|=
name|getCompositeConfiguration
argument_list|(
name|ac
argument_list|,
name|ac
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|cc
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rp
operator|instanceof
name|CompositeRestrictionProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

