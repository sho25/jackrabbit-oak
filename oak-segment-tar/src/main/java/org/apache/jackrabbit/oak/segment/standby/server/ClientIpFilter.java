begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A white list for IP addresses. A filter can be a single IP address, a single  * host name or a range of IP addresses.  *<p>  * Known issue: if a host name is provided as a filter and that host name  * contains a dash ("-"), it will be interpreted as an IP range.  */
end_comment

begin_class
class|class
name|ClientIpFilter
implements|implements
name|ClientFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientIpFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|areAddressesEqual
parameter_list|(
name|InetAddress
name|a
parameter_list|,
name|InetAddress
name|b
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAddress
argument_list|()
argument_list|,
name|b
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
assert|assert
name|left
operator|.
name|length
operator|==
name|right
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|left
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|l
init|=
name|left
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|r
init|=
name|right
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|r
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|r
operator|<
name|l
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isAddressInRange
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|InetAddress
name|left
parameter_list|,
name|InetAddress
name|right
parameter_list|)
block|{
name|byte
index|[]
name|addressBytes
init|=
name|address
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|byte
index|[]
name|leftBytes
init|=
name|left
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|leftBytes
operator|.
name|length
operator|!=
name|addressBytes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
name|byte
index|[]
name|rightBytes
init|=
name|right
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|rightBytes
operator|.
name|length
operator|!=
name|addressBytes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compare
argument_list|(
name|leftBytes
argument_list|,
name|addressBytes
argument_list|)
operator|<=
literal|0
operator|&&
name|compare
argument_list|(
name|addressBytes
argument_list|,
name|rightBytes
argument_list|)
operator|<=
literal|0
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isAllowed
parameter_list|(
name|InetAddress
name|client
parameter_list|,
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
name|InetAddress
name|leftAddress
decl_stmt|;
try|try
block|{
name|leftAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to resolve address or invalid IP literal "
operator|+
name|left
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|InetAddress
name|rightAddress
decl_stmt|;
try|try
block|{
name|rightAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to resolve address or invalid IP literal "
operator|+
name|right
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|isAddressInRange
argument_list|(
name|client
argument_list|,
name|leftAddress
argument_list|,
name|rightAddress
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isAllowed
parameter_list|(
name|InetAddress
name|client
parameter_list|,
name|String
name|match
parameter_list|)
block|{
name|InetAddress
name|matchAddress
decl_stmt|;
try|try
block|{
name|matchAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to resolve address or invalid IP literal "
operator|+
name|match
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|areAddressesEqual
argument_list|(
name|matchAddress
argument_list|,
name|client
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|String
index|[]
name|allowedIpRanges
decl_stmt|;
comment|/**      * Create a new white list based on the provided filters.      *      * @param filters A list of filters.      */
name|ClientIpFilter
parameter_list|(
name|String
index|[]
name|filters
parameter_list|)
block|{
name|this
operator|.
name|allowedIpRanges
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowed
parameter_list|(
name|SocketAddress
name|address
parameter_list|)
block|{
return|return
name|isAllowed
argument_list|(
operator|(
operator|(
name|InetSocketAddress
operator|)
name|address
operator|)
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAllowed
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|allowedIpRanges
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|allowedIpRanges
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|s
range|:
name|this
operator|.
name|allowedIpRanges
control|)
block|{
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isAllowed
argument_list|(
name|address
argument_list|,
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isAllowed
argument_list|(
name|address
argument_list|,
name|s
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

