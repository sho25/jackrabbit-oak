begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|htree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|PersistHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
operator|.
name|PutToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|AbstractFilteringIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|AbstractRangeIterator
import|;
end_import

begin_comment
comment|/**  *<code>HTree</code> based implementation to manage child node entries.   */
end_comment

begin_class
specifier|public
class|class
name|ChildNodeEntriesHTree
implements|implements
name|ChildNodeEntries
implements|,
name|PersistHook
block|{
specifier|private
name|HashDirectory
name|top
decl_stmt|;
specifier|public
name|ChildNodeEntriesHTree
parameter_list|(
name|RevisionProvider
name|provider
parameter_list|)
block|{
name|top
operator|=
operator|new
name|HashDirectory
argument_list|(
name|provider
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|ChildNodeEntriesHTree
name|clone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|ChildNodeEntriesHTree
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
comment|// can't possibly get here
block|}
comment|// shallow clone of array of immutable IndexEntry objects
name|clone
operator|.
name|top
operator|=
operator|(
name|HashDirectory
operator|)
name|top
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|inlined
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|top
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|top
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|count
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|offset
operator|>=
name|getCount
argument_list|()
operator|||
name|count
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
name|empty
operator|.
name|iterator
argument_list|()
return|;
block|}
if|if
condition|(
name|count
operator|==
operator|-
literal|1
operator|||
operator|(
name|offset
operator|+
name|count
operator|)
operator|>
name|getCount
argument_list|()
condition|)
block|{
name|count
operator|=
name|getCount
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
operator|new
name|AbstractRangeIterator
argument_list|<
name|String
argument_list|>
argument_list|(
name|getEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|doNext
parameter_list|()
block|{
name|ChildNodeEntry
name|cne
init|=
operator|(
name|ChildNodeEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|cne
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getEntries
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|top
operator|.
name|getEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|add
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
name|top
operator|.
name|add
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|top
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|rename
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|oldName
operator|.
name|equals
argument_list|(
name|newName
argument_list|)
condition|)
block|{
return|return
name|get
argument_list|(
name|oldName
argument_list|)
return|;
block|}
name|ChildNodeEntry
name|old
init|=
name|remove
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|add
argument_list|(
operator|new
name|ChildNodeEntry
argument_list|(
name|newName
argument_list|,
name|old
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getAdded
parameter_list|(
name|ChildNodeEntries
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntriesHTree
condition|)
block|{
return|return
name|top
operator|.
name|getAdded
argument_list|(
operator|(
operator|(
name|ChildNodeEntriesHTree
operator|)
name|other
operator|)
operator|.
name|top
argument_list|)
return|;
block|}
comment|// todo optimize
return|return
operator|new
name|AbstractFilteringIterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|(
name|other
operator|.
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|include
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getRemoved
parameter_list|(
name|ChildNodeEntries
name|other
parameter_list|)
block|{
return|return
name|other
operator|.
name|getAdded
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|getModified
parameter_list|(
specifier|final
name|ChildNodeEntries
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ChildNodeEntriesHTree
condition|)
block|{
return|return
name|top
operator|.
name|getModified
argument_list|(
operator|(
operator|(
name|ChildNodeEntriesHTree
operator|)
name|other
operator|)
operator|.
name|top
argument_list|)
return|;
block|}
comment|// todo optimize
return|return
operator|new
name|AbstractFilteringIterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|(
name|getEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|include
parameter_list|(
name|ChildNodeEntry
name|entry
parameter_list|)
block|{
name|ChildNodeEntry
name|namesake
init|=
name|other
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|namesake
operator|!=
literal|null
operator|&&
operator|!
name|namesake
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|top
operator|.
name|serialize
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deserialize
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|top
operator|.
name|deserialize
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePersist
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|top
operator|.
name|prePersist
argument_list|(
name|store
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postPersist
parameter_list|(
name|RevisionStore
name|store
parameter_list|,
name|PutToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
comment|// nothing to be done here
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|top
operator|.
name|getMemory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

