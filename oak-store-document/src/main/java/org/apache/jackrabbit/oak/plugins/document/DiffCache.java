begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_comment
comment|/**  * A cache for child node diffs.  */
end_comment

begin_class
specifier|abstract
class|class
name|DiffCache
block|{
comment|/**      * Returns a jsop diff for the child nodes at the given path. The returned      * String may contain the following changes on child nodes:      *<ul>      *<li>Changed child nodes: e.g. {@code ^"foo":{}}</li>      *<li>Added child nodes: e.g. {@code +"bar":{}}</li>      *<li>Removed child nodes: e.g. {@code -"baz"}</li>      *</ul>      * A {@code null} value indicates that this cache does not have an entry      * for the given revision range at the path.      *      * @param from the from revision.      * @param to the to revision.      * @param path the path of the parent node.      * @param loader an optional loader for the cache entry.      * @return the diff or {@code null} if unknown and no loader was passed.      */
annotation|@
name|CheckForNull
specifier|abstract
name|String
name|getChanges
parameter_list|(
annotation|@
name|Nonnull
name|RevisionVector
name|from
parameter_list|,
annotation|@
name|Nonnull
name|RevisionVector
name|to
parameter_list|,
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|Loader
name|loader
parameter_list|)
function_decl|;
comment|/**      * Starts a new cache entry for the diff cache. Actual changes are added      * to the entry with the {@link Entry#append(String, String)} method.      *      * @param from the from revision.      * @param to the to revision.      * @param local true indicates that the entry results from a local change,      * false if it results from an external change      * @return the cache entry.      */
annotation|@
name|Nonnull
specifier|abstract
name|Entry
name|newEntry
parameter_list|(
annotation|@
name|Nonnull
name|RevisionVector
name|from
parameter_list|,
annotation|@
name|Nonnull
name|RevisionVector
name|to
parameter_list|,
name|boolean
name|local
parameter_list|)
function_decl|;
comment|/**      * @return the statistics for this cache.      */
annotation|@
name|Nonnull
specifier|abstract
name|Iterable
argument_list|<
name|CacheStats
argument_list|>
name|getStats
parameter_list|()
function_decl|;
comment|/**      * Parses the jsop diff returned by      * {@link #getChanges(RevisionVector, RevisionVector, String, Loader)} and reports the      * changes by calling the appropriate methods on {@link Diff}.      *      * @param jsop the jsop diff to parse.      * @param diff the diff handler.      * @return {@code true} it the complete jsop was processed or {@code false}      *      if one of the {@code diff} callbacks requested a stop.      * @throws IllegalArgumentException if {@code jsop} is malformed.      */
specifier|static
name|boolean
name|parseJsopDiff
parameter_list|(
annotation|@
name|Nonnull
name|String
name|jsop
parameter_list|,
annotation|@
name|Nonnull
name|Diff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|jsop
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsop
argument_list|)
decl_stmt|;
name|boolean
name|continueComparison
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|continueComparison
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|String
name|name
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|read
argument_list|()
operator|!=
literal|'}'
condition|)
block|{
comment|// skip properties
block|}
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|String
name|name
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|String
name|name
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|continueComparison
operator|=
name|diff
operator|.
name|childNodeChanged
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"jsonDiff: illegal token '"
operator|+
name|t
operator|.
name|getToken
argument_list|()
operator|+
literal|"' at pos: "
operator|+
name|t
operator|.
name|getLastPos
argument_list|()
operator|+
literal|' '
operator|+
name|jsop
argument_list|)
throw|;
block|}
block|}
return|return
name|continueComparison
return|;
block|}
interface|interface
name|Entry
block|{
comment|/**          * Appends changes about children of the node at the given path.          *          * @param path the path of the parent node.          * @param changes the child node changes.          */
name|void
name|append
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|,
annotation|@
name|Nonnull
name|String
name|changes
parameter_list|)
function_decl|;
comment|/**          * Called when all changes have been appended and the entry is ready          * to be used by the cache.          *           * @return {@code true} if the entry was successfully added to the          *          cache, {@code false} otherwise.          */
name|boolean
name|done
parameter_list|()
function_decl|;
block|}
interface|interface
name|Loader
block|{
name|String
name|call
parameter_list|()
function_decl|;
block|}
interface|interface
name|Diff
block|{
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

