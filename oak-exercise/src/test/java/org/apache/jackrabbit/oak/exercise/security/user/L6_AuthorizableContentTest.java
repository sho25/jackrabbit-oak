begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Representation of User|Group Content in the Repository  * -----------------------------------------------------------------------------  *  * Goal:  * Understand how the default implementation stores user/group information.  * After having completed this test you should be familiar with the node  * type definitions for rep:Authorizable, rep:User and rep:Group and be  * able to map some basic API calls to the individual properties.  *  * Exercises:  *  * - Overview  *   Look {@code org/apache/jackrabbit/oak/plugins/nodetype/write/builtin_nodetypes.cnd}  *   and try to identify the built in node types used to store user and group  *   content.  *  *   Question: Can explain the meaning of all types?  *   Question: Why are most item definitions protected?  *   Question: Can you explain which child item definitions are not protected and why?  *  * - {@link #testUserNode()}  *   Test case for user nodes.  *  * - {@link #testUserNodeType()}  *   What is the primary type of a user node?  *   Which mixin types are present in addition?  *  * - {@link #testGroupNode()}  *   Test case for group nodes.  *  * - {@link #testGroupNodeType()}  *   What is the primary type of a group node?  *   Which mixin types are present in addition?  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - Discuss why {@link #testUserNode()} doesn't include the password?  * - Discuss why {@link #testGroupNode()} doesn't include the 'disabled' flag.  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L5_UuidTest ()}  * - {@link L11_PasswordTest}  * - {@link L12_PasswordExpiryTest}  * - {@link L8_MembershipTest}  *  *</pre>  *  * @see org.apache.jackrabbit.api.security.user.User  * @see org.apache.jackrabbit.api.security.user.Group  * @see org.apache.jackrabbit.oak.spi.security.user.UserConstants  */
end_comment

begin_class
specifier|public
class|class
name|L6_AuthorizableContentTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|userManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|disable
argument_list|(
literal|"no longer active"
argument_list|)
expr_stmt|;
name|testGroup
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|getAuthorizableNode
parameter_list|(
name|Authorizable
name|authorizable
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|path
init|=
name|authorizable
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|testUserNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getAuthorizableNode
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|String
name|idPropertyName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|idPropertyName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|principalPropertyName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|principalPropertyName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|disabledPropertyName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|testUser
operator|.
name|getDisabledReason
argument_list|()
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|disabledPropertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getAuthorizableNode
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|String
name|expectedNodeTypeName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedNodeTypeName
argument_list|,
name|node
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mixinTypes
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// EXERCISE : fill the list
for|for
control|(
name|String
name|mixin
range|:
name|mixinTypes
control|)
block|{
name|assertTrue
argument_list|(
name|node
operator|.
name|isNodeType
argument_list|(
name|mixin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupNode
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getAuthorizableNode
argument_list|(
name|testGroup
argument_list|)
decl_stmt|;
name|String
name|idPropertyName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|idPropertyName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|principalPropertyName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|testGroup
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getProperty
argument_list|(
name|principalPropertyName
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedNodeTypeName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedNodeTypeName
argument_list|,
name|node
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupNodeType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|node
init|=
name|getAuthorizableNode
argument_list|(
name|testGroup
argument_list|)
decl_stmt|;
name|String
name|expectedNodeTypeName
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedNodeTypeName
argument_list|,
name|node
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mixinTypes
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// EXERCISE : fill the list
for|for
control|(
name|String
name|mixin
range|:
name|mixinTypes
control|)
block|{
name|assertTrue
argument_list|(
name|node
operator|.
name|isNodeType
argument_list|(
name|mixin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

