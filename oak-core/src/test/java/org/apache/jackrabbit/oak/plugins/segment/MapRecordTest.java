begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createControl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Test case for segment node state comparisons.  */
end_comment

begin_class
specifier|public
class|class
name|MapRecordTest
block|{
specifier|private
specifier|final
name|NodeStateDiff
name|diff
init|=
name|createControl
argument_list|()
operator|.
name|createMock
argument_list|(
literal|"diff"
argument_list|,
name|NodeStateDiff
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|NodeBuilder
name|builder
init|=
operator|new
name|MemoryStore
argument_list|()
operator|.
name|getTracker
argument_list|()
operator|.
name|getWriter
argument_list|()
operator|.
name|writeNode
argument_list|(
name|EMPTY_NODE
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testOak1104
parameter_list|()
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|beforeNames
init|=
name|newHashSet
argument_list|(
name|pattern
operator|.
name|split
argument_list|(
literal|"_b_Lucene41_0.doc, _b.fdx, _b.fdt, segments_34, _b_4.del,"
operator|+
literal|" _b_Lucene41_0.pos, _b.nvm, _b.nvd, _b.fnm, _3n.si,"
operator|+
literal|" _b_Lucene41_0.tip, _b_Lucene41_0.tim, _3n.cfe,"
operator|+
literal|" segments.gen, _3n.cfs, _b.si"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|afterNames
init|=
name|newHashSet
argument_list|(
name|pattern
operator|.
name|split
argument_list|(
literal|"_b_Lucene41_0.pos, _3k.cfs, _3j_1.del, _b.nvm, _b.nvd,"
operator|+
literal|" _3d.cfe, _3d.cfs, _b.fnm, _3j.si, _3h.si, _3i.cfe,"
operator|+
literal|" _3i.cfs, _3e_2.del, _3f.si, _b_Lucene41_0.tip,"
operator|+
literal|" _b_Lucene41_0.tim, segments.gen, _3e.cfe, _3e.cfs,"
operator|+
literal|" _b.si, _3g.si, _3l.si, _3i_1.del, _3d_3.del, _3e.si,"
operator|+
literal|" _3d.si, _b_Lucene41_0.doc, _3h_2.del, _3i.si, _3k_1.del,"
operator|+
literal|" _3j.cfe, _3j.cfs, _b.fdx, _b.fdt, _3g_1.del, _3k.si,"
operator|+
literal|" _3l.cfe, _3l.cfs, segments_33, _3f_1.del, _3h.cfe,"
operator|+
literal|" _3h.cfs, _b_4.del, _3f.cfe, _3f.cfs, _3g.cfe, _3g.cfs"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|beforeNames
control|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|beforeNames
argument_list|,
name|afterNames
argument_list|)
control|)
block|{
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|afterNames
argument_list|,
name|beforeNames
argument_list|)
control|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|beforeNames
argument_list|,
name|afterNames
argument_list|)
control|)
block|{
name|expect
argument_list|(
name|diff
operator|.
name|childNodeDeleted
argument_list|(
name|name
argument_list|,
name|before
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|afterNames
argument_list|,
name|beforeNames
argument_list|)
control|)
block|{
name|expect
argument_list|(
name|diff
operator|.
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|replay
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

