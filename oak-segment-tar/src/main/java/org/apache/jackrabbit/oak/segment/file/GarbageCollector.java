begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|getInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
operator|.
name|FULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|Reclaimers
operator|.
name|newOldReclaimer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Revisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GarbageCollectionStrategy
operator|.
name|SuccessfulCompactionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|GarbageCollectionStrategy
operator|.
name|SuccessfulGarbageCollectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_class
class|class
name|GarbageCollector
block|{
comment|/**      * GC counter for logging purposes      */
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|GC_COUNT
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Minimal interval in milli seconds between subsequent garbage collection      * cycles. Garbage collection invoked via full compaction will be skipped      * unless at least the specified time has passed since its last successful      * invocation.      */
specifier|private
specifier|static
specifier|final
name|long
name|GC_BACKOFF
init|=
name|getInteger
argument_list|(
literal|"oak.gc.backoff"
argument_list|,
literal|10
operator|*
literal|3600
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentGCOptions
name|gcOptions
decl_stmt|;
comment|/**      * {@code GcListener} listening to this instance's gc progress      */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|PrefixedGCListener
name|gcListener
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCJournal
name|gcJournal
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientMemory
decl_stmt|;
specifier|private
specifier|final
name|FileReaper
name|fileReaper
decl_stmt|;
specifier|private
specifier|final
name|TarFiles
name|tarFiles
decl_stmt|;
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|SegmentReader
name|segmentReader
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Revisions
argument_list|>
name|revisionsSupplier
decl_stmt|;
specifier|private
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
specifier|final
name|SegmentCache
name|segmentCache
decl_stmt|;
specifier|private
specifier|final
name|SegmentWriter
name|segmentWriter
decl_stmt|;
specifier|private
specifier|final
name|FileStoreStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|CancelCompactionSupplier
name|cancel
decl_stmt|;
specifier|private
specifier|final
name|Flusher
name|flusher
decl_stmt|;
specifier|private
specifier|final
name|GarbageCollectionStrategy
operator|.
name|SegmentWriterFactory
name|segmentWriterFactory
decl_stmt|;
specifier|private
specifier|final
name|GCNodeWriteMonitor
name|compactionMonitor
decl_stmt|;
comment|/**      * Timestamp of the last time full or tail compaction was successfully      * invoked. 0 if never.      */
specifier|private
name|long
name|lastSuccessfullGC
decl_stmt|;
comment|/**      * Last compaction type used to determine which predicate to use during      * cleanup. Defaults to {@link SegmentGCOptions.GCType#FULL FULL}, which is      * conservative and safe in case it does not match the real type (e.g.      * because of a system restart).      */
specifier|private
name|SegmentGCOptions
operator|.
name|GCType
name|lastCompactionType
init|=
name|FULL
decl_stmt|;
name|GarbageCollector
parameter_list|(
name|SegmentGCOptions
name|gcOptions
parameter_list|,
name|GCListener
name|gcListener
parameter_list|,
name|GCJournal
name|gcJournal
parameter_list|,
name|AtomicBoolean
name|sufficientMemory
parameter_list|,
name|FileReaper
name|fileReaper
parameter_list|,
name|TarFiles
name|tarFiles
parameter_list|,
name|SegmentTracker
name|tracker
parameter_list|,
name|SegmentReader
name|segmentReader
parameter_list|,
name|Supplier
argument_list|<
name|Revisions
argument_list|>
name|revisionsSupplier
parameter_list|,
name|BlobStore
name|blobStore
parameter_list|,
name|SegmentCache
name|segmentCache
parameter_list|,
name|SegmentWriter
name|segmentWriter
parameter_list|,
name|FileStoreStats
name|stats
parameter_list|,
name|CancelCompactionSupplier
name|cancel
parameter_list|,
name|Flusher
name|flusher
parameter_list|,
name|GarbageCollectionStrategy
operator|.
name|SegmentWriterFactory
name|segmentWriterFactory
parameter_list|)
block|{
name|this
operator|.
name|gcOptions
operator|=
name|gcOptions
expr_stmt|;
name|this
operator|.
name|gcListener
operator|=
operator|new
name|PrefixedGCListener
argument_list|(
name|gcListener
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|gcJournal
operator|=
name|gcJournal
expr_stmt|;
name|this
operator|.
name|sufficientMemory
operator|=
name|sufficientMemory
expr_stmt|;
name|this
operator|.
name|fileReaper
operator|=
name|fileReaper
expr_stmt|;
name|this
operator|.
name|tarFiles
operator|=
name|tarFiles
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|segmentReader
operator|=
name|segmentReader
expr_stmt|;
name|this
operator|.
name|revisionsSupplier
operator|=
name|revisionsSupplier
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|segmentCache
operator|=
name|segmentCache
expr_stmt|;
name|this
operator|.
name|segmentWriter
operator|=
name|segmentWriter
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|cancel
operator|=
name|cancel
expr_stmt|;
name|this
operator|.
name|flusher
operator|=
name|flusher
expr_stmt|;
name|this
operator|.
name|segmentWriterFactory
operator|=
name|segmentWriterFactory
expr_stmt|;
name|this
operator|.
name|compactionMonitor
operator|=
operator|new
name|GCNodeWriteMonitor
argument_list|(
name|gcOptions
operator|.
name|getGcLogInterval
argument_list|()
argument_list|,
name|gcListener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|GCGeneration
name|getGcGeneration
parameter_list|()
block|{
return|return
name|revisionsSupplier
operator|.
name|get
argument_list|()
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
name|GCNodeWriteMonitor
name|getGCNodeWriteMonitor
parameter_list|()
block|{
return|return
name|compactionMonitor
return|;
block|}
specifier|private
name|GarbageCollectionStrategy
operator|.
name|Context
name|newGarbageCollectionContext
parameter_list|(
name|int
name|gcCount
parameter_list|)
block|{
return|return
operator|new
name|GarbageCollectionStrategy
operator|.
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SegmentGCOptions
name|getGCOptions
parameter_list|()
block|{
return|return
name|gcOptions
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCListener
name|getGCListener
parameter_list|()
block|{
return|return
name|gcListener
return|;
block|}
annotation|@
name|Override
specifier|public
name|Revisions
name|getRevisions
parameter_list|()
block|{
return|return
name|revisionsSupplier
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCJournal
name|getGCJournal
parameter_list|()
block|{
return|return
name|gcJournal
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentTracker
name|getSegmentTracker
parameter_list|()
block|{
return|return
name|tracker
return|;
block|}
annotation|@
name|Override
specifier|public
name|GarbageCollectionStrategy
operator|.
name|SegmentWriterFactory
name|getSegmentWriterFactory
parameter_list|()
block|{
return|return
name|segmentWriterFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|GCNodeWriteMonitor
name|getCompactionMonitor
parameter_list|()
block|{
return|return
name|compactionMonitor
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|CancelCompactionSupplier
name|getCanceller
parameter_list|()
block|{
return|return
name|cancel
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastSuccessfulGC
parameter_list|()
block|{
return|return
name|lastSuccessfullGC
return|;
block|}
annotation|@
name|Override
specifier|public
name|TarFiles
name|getTarFiles
parameter_list|()
block|{
return|return
name|tarFiles
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicBoolean
name|getSufficientMemory
parameter_list|()
block|{
return|return
name|sufficientMemory
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileReaper
name|getFileReaper
parameter_list|()
block|{
return|return
name|fileReaper
return|;
block|}
annotation|@
name|Override
specifier|public
name|SuccessfulGarbageCollectionListener
name|getSuccessfulGarbageCollectionListener
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
name|lastSuccessfullGC
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SuccessfulCompactionListener
name|getSuccessfulCompactionListener
parameter_list|()
block|{
return|return
name|type
lambda|->
name|lastCompactionType
operator|=
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|Flusher
name|getFlusher
parameter_list|()
block|{
return|return
name|flusher
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getGCBackOff
parameter_list|()
block|{
return|return
name|GC_BACKOFF
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentGCOptions
operator|.
name|GCType
name|getLastCompactionType
parameter_list|()
block|{
return|return
name|lastCompactionType
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getGCCount
parameter_list|()
block|{
return|return
name|gcCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentCache
name|getSegmentCache
parameter_list|()
block|{
return|return
name|segmentCache
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStoreStats
name|getFileStoreStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
annotation|@
name|Override
specifier|public
name|SegmentReader
name|getSegmentReader
parameter_list|()
block|{
return|return
name|segmentReader
return|;
block|}
block|}
return|;
block|}
specifier|synchronized
name|void
name|run
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
name|strategy
operator|.
name|collectGarbage
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|runFull
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
name|strategy
operator|.
name|collectFullGarbage
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|runTail
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
name|strategy
operator|.
name|collectTailGarbage
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|CompactionResult
name|compactFull
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|strategy
operator|.
name|compactFull
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|synchronized
name|CompactionResult
name|compactTail
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|strategy
operator|.
name|compactTail
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|cleanup
parameter_list|(
name|GarbageCollectionStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|strategy
operator|.
name|cleanup
argument_list|(
name|newGarbageCollectionContext
argument_list|(
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Finds all external blob references that are currently accessible in this      * repository and adds them to the given collector. Useful for collecting      * garbage in an external data store.      *<p>      * Note that this method only collects blob references that are already      * stored in the repository (at the time when this method is called), so the      * garbage collector will need some other mechanism for tracking in-memory      * references and references stored while this method is running.      *      * @param collector reference collector called back for each blob reference      *                  found      */
specifier|synchronized
name|void
name|collectBlobReferences
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarFiles
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|,
name|newOldReclaimer
argument_list|(
name|lastCompactionType
argument_list|,
name|getGcGeneration
argument_list|()
argument_list|,
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|cancel
parameter_list|()
block|{
name|cancel
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

