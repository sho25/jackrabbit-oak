begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|PropertyState
import|;
end_import

begin_comment
comment|/**  * Note: Most of this functionality is mirrored from NodeDelta with the hopes  * that the two functionality can be consolidated at some point.  */
end_comment

begin_class
specifier|public
class|class
name|MongoNodeDelta
block|{
specifier|public
specifier|static
enum|enum
name|ConflictType
block|{
comment|/**          * same property has been added or set, but with differing values          */
name|PROPERTY_VALUE_CONFLICT
block|,
comment|/**          * child nodes with identical name have been added or modified, but          * with differing id's; the corresponding node subtrees are hence differing          * and potentially conflicting.          */
name|NODE_CONTENT_CONFLICT
block|,
comment|/**          * a modified property has been deleted          */
name|REMOVED_DIRTY_PROPERTY_CONFLICT
block|,
comment|/**          * a child node entry pointing to a modified subtree has been deleted          */
name|REMOVED_DIRTY_NODE_CONFLICT
block|}
specifier|private
specifier|final
name|NodeStore
name|provider
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|node1
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|changedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|addedChildNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|removedChildNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|changedChildNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MongoNodeDelta
parameter_list|(
name|NodeStore
name|provider
parameter_list|,
name|NodeState
name|node1
parameter_list|,
name|NodeState
name|node2
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|node1
operator|=
name|node1
expr_stmt|;
name|this
operator|.
name|provider
operator|.
name|compare
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
operator|new
name|DiffHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAddedProperties
parameter_list|()
block|{
return|return
name|addedProperties
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRemovedProperties
parameter_list|()
block|{
return|return
name|removedProperties
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getChangedProperties
parameter_list|()
block|{
return|return
name|changedProperties
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|getAddedChildNodes
parameter_list|()
block|{
return|return
name|addedChildNodes
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|getRemovedChildNodes
parameter_list|()
block|{
return|return
name|removedChildNodes
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|getChangedChildNodes
parameter_list|()
block|{
return|return
name|changedChildNodes
return|;
block|}
specifier|public
name|boolean
name|conflictsWith
parameter_list|(
name|MongoNodeDelta
name|other
parameter_list|)
block|{
return|return
operator|!
name|listConflicts
argument_list|(
name|other
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Conflict
argument_list|>
name|listConflicts
parameter_list|(
name|MongoNodeDelta
name|other
parameter_list|)
block|{
comment|// assume that both delta's were built using the *same* base node revision
if|if
condition|(
operator|!
name|node1
operator|.
name|equals
argument_list|(
name|other
operator|.
name|node1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"other and this NodeDelta object are expected to share common node1 instance"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Conflict
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
comment|// properties
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherAddedProps
init|=
name|other
operator|.
name|getAddedProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|added
range|:
name|addedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|otherValue
init|=
name|otherAddedProps
operator|.
name|get
argument_list|(
name|added
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherValue
operator|!=
literal|null
operator|&&
operator|!
name|added
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|otherValue
argument_list|)
condition|)
block|{
comment|// same property added with conflicting values
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|PROPERTY_VALUE_CONFLICT
argument_list|,
name|added
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherChangedProps
init|=
name|other
operator|.
name|getChangedProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherRemovedProps
init|=
name|other
operator|.
name|getRemovedProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|changed
range|:
name|changedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|otherValue
init|=
name|otherChangedProps
operator|.
name|get
argument_list|(
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherValue
operator|!=
literal|null
operator|&&
operator|!
name|changed
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|otherValue
argument_list|)
condition|)
block|{
comment|// same property changed with conflicting values
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|PROPERTY_VALUE_CONFLICT
argument_list|,
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|otherRemovedProps
operator|.
name|containsKey
argument_list|(
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// changed property has been removed
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|REMOVED_DIRTY_PROPERTY_CONFLICT
argument_list|,
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removed
range|:
name|removedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|otherChangedProps
operator|.
name|containsKey
argument_list|(
name|removed
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// removed property has been changed
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|REMOVED_DIRTY_PROPERTY_CONFLICT
argument_list|,
name|removed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// child node entries
comment|//Map<String, Id> otherAddedChildNodes = other.getAddedChildNodes();
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|otherAddedChildNodes
init|=
name|other
operator|.
name|getAddedChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|added
range|:
name|addedChildNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeState
name|otherValue
init|=
name|otherAddedChildNodes
operator|.
name|get
argument_list|(
name|added
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherValue
operator|!=
literal|null
operator|&&
operator|!
name|added
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|otherValue
argument_list|)
condition|)
block|{
comment|// same child node entry added with different target id's
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|NODE_CONTENT_CONFLICT
argument_list|,
name|added
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Map<String, Id> otherChangedChildNodes = other.getChangedChildNodes();
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|otherChangedChildNodes
init|=
name|other
operator|.
name|getChangedChildNodes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|otherRemovedChildNodes
init|=
name|other
operator|.
name|getRemovedChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|changed
range|:
name|changedChildNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeState
name|otherValue
init|=
name|otherChangedChildNodes
operator|.
name|get
argument_list|(
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherValue
operator|!=
literal|null
operator|&&
operator|!
name|changed
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|otherValue
argument_list|)
condition|)
block|{
comment|// same child node entry changed with different target id's
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|NODE_CONTENT_CONFLICT
argument_list|,
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|otherRemovedChildNodes
operator|.
name|containsKey
argument_list|(
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// changed child node entry has been removed
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|REMOVED_DIRTY_NODE_CONFLICT
argument_list|,
name|changed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|removed
range|:
name|removedChildNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|otherChangedChildNodes
operator|.
name|containsKey
argument_list|(
name|removed
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// removed child node entry has been changed
name|conflicts
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|ConflictType
operator|.
name|REMOVED_DIRTY_NODE_CONFLICT
argument_list|,
name|removed
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
comment|//--------------------------------------------------------< inner classes>
specifier|private
class|class
name|DiffHandler
implements|implements
name|NodeStateDiff
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
block|{
name|addedProperties
operator|.
name|put
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
block|{
name|changedProperties
operator|.
name|put
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
block|{
name|removedProperties
operator|.
name|put
argument_list|(
name|before
operator|.
name|getName
argument_list|()
argument_list|,
name|before
operator|.
name|getEncodedValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|addedChildNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
name|changedChildNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|after
comment|/*provider.getId(after)*/
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|removedChildNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|before
comment|/*provider.getId(before)*/
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Conflict
block|{
specifier|final
name|ConflictType
name|type
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
comment|/**          * @param type conflict type          * @param name name of conflicting property or child node          */
name|Conflict
parameter_list|(
name|ConflictType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ConflictType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

